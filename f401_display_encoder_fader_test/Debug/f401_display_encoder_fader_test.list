
f401_display_encoder_fader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cca4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0800ce44  0800ce44  0000de44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcf4  0800dcf4  0000f074  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcf4  0800dcf4  0000ecf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcfc  0800dcfc  0000f074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcfc  0800dcfc  0000ecfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd00  0800dd00  0000ed00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800dd04  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001175c  20000074  0800dd78  0000f074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200117d0  0800dd78  0000f7d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8b5  00000000  00000000  0000f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e8  00000000  00000000  0002c959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00030a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143a  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d3d8  00000000  00000000  00033882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002379c  00000000  00000000  00050c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a633d  00000000  00000000  000743f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000794c  00000000  00000000  0011a778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001220c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ce2c 	.word	0x0800ce2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800ce2c 	.word	0x0800ce2c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <displayStrings>:
 * @param[in] numStrings Total number of strings in the array.
 * @param[in] cursor_index Index of the currently selected string, which will be highlighted on the display.
 *
 * @note Ensure that the `strings` array is correctly populated and `numStrings` reflects the actual number of valid strings. The display dimensions and font sizes should be configured to match the display hardware.
 */
void displayStrings(I2C_HandleTypeDef *hi2c1, char** strings, uint8_t numStrings, uint8_t cursor_index) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b0a8      	sub	sp, #160	@ 0xa0
 8000594:	af02      	add	r7, sp, #8
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	460b      	mov	r3, r1
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	4613      	mov	r3, r2
 80005a4:	71bb      	strb	r3, [r7, #6]
    // Clear screen
    ssd1306_Fill(Black);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 fb4e 	bl	8001c48 <ssd1306_Fill>

    // Calculate the last visible index based on the first visible index and the number of visible lines
    uint8_t last_visible_index = first_visible_index + num_visible_lines - 1;
 80005ac:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <displayStrings+0x16c>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4b53      	ldr	r3, [pc, #332]	@ (8000700 <displayStrings+0x170>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4413      	add	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	3b01      	subs	r3, #1
 80005ba:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    // Ensure cursor is within the visible range
    if (cursor_index < first_visible_index) {
 80005be:	4b4f      	ldr	r3, [pc, #316]	@ (80006fc <displayStrings+0x16c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79ba      	ldrb	r2, [r7, #6]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d203      	bcs.n	80005d0 <displayStrings+0x40>
        first_visible_index = cursor_index;
 80005c8:	4a4c      	ldr	r2, [pc, #304]	@ (80006fc <displayStrings+0x16c>)
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	7013      	strb	r3, [r2, #0]
 80005ce:	e00d      	b.n	80005ec <displayStrings+0x5c>
    } else if (cursor_index > last_visible_index) {
 80005d0:	79ba      	ldrb	r2, [r7, #6]
 80005d2:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d908      	bls.n	80005ec <displayStrings+0x5c>
        first_visible_index = cursor_index - num_visible_lines + 1;
 80005da:	4b49      	ldr	r3, [pc, #292]	@ (8000700 <displayStrings+0x170>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b44      	ldr	r3, [pc, #272]	@ (80006fc <displayStrings+0x16c>)
 80005ea:	701a      	strb	r2, [r3, #0]
    }

    // Write data to list section of the screen
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 80005ec:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <displayStrings+0x16c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80005f4:	e03b      	b.n	800066e <displayStrings+0xde>
        ssd1306_SetCursor(BORDER_WIDTH, (k - first_visible_index) * LINE_HEIGHT + BORDER_WIDTH); // Adjust cursor_index position based on line height
 80005f6:	4b41      	ldr	r3, [pc, #260]	@ (80006fc <displayStrings+0x16c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	0092      	lsls	r2, r2, #2
 8000606:	4413      	add	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	2001      	movs	r0, #1
 8000614:	f001 fc76 	bl	8001f04 <ssd1306_SetCursor>
        if (k == cursor_index) {
 8000618:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	429a      	cmp	r2, r3
 8000620:	d115      	bne.n	800064e <displayStrings+0xbe>
            // Write the line with cursor_index
            char line_with_cursor[DISPLAY_WIDTH - BORDER_WIDTH];
            snprintf(line_with_cursor, sizeof(line_with_cursor), "%c %s", CURSOR, strings[k]);
 8000622:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	4413      	add	r3, r2
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f107 0014 	add.w	r0, r7, #20
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	233e      	movs	r3, #62	@ 0x3e
 8000636:	4a33      	ldr	r2, [pc, #204]	@ (8000704 <displayStrings+0x174>)
 8000638:	217f      	movs	r1, #127	@ 0x7f
 800063a:	f00b fadb 	bl	800bbf4 <sniprintf>
            ssd1306_WriteString(line_with_cursor, Font_7x10, White);
 800063e:	4a32      	ldr	r2, [pc, #200]	@ (8000708 <displayStrings+0x178>)
 8000640:	f107 0014 	add.w	r0, r7, #20
 8000644:	2301      	movs	r3, #1
 8000646:	ca06      	ldmia	r2, {r1, r2}
 8000648:	f001 fc36 	bl	8001eb8 <ssd1306_WriteString>
 800064c:	e00a      	b.n	8000664 <displayStrings+0xd4>
        } else {
            ssd1306_WriteString(strings[k], Font_7x10, White);
 800064e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	4413      	add	r3, r2
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <displayStrings+0x178>)
 800065c:	2301      	movs	r3, #1
 800065e:	ca06      	ldmia	r2, {r1, r2}
 8000660:	f001 fc2a 	bl	8001eb8 <ssd1306_WriteString>
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 8000664:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000668:	3301      	adds	r3, #1
 800066a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800066e:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	429a      	cmp	r2, r3
 8000676:	d209      	bcs.n	800068c <displayStrings+0xfc>
 8000678:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <displayStrings+0x16c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <displayStrings+0x170>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	440b      	add	r3, r1
 8000688:	429a      	cmp	r2, r3
 800068a:	dbb4      	blt.n	80005f6 <displayStrings+0x66>
        }
    }

    // Draw border around the list section
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000692:	e029      	b.n	80006e8 <displayStrings+0x158>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800069a:	e01c      	b.n	80006d6 <displayStrings+0x146>
            if (j < BORDER_WIDTH || j >= LIST_SECTION_HEIGHT - BORDER_WIDTH || i < BORDER_WIDTH || i >= DISPLAY_WIDTH - BORDER_WIDTH) {
 800069c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00b      	beq.n	80006bc <displayStrings+0x12c>
 80006a4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006a8:	2b4f      	cmp	r3, #79	@ 0x4f
 80006aa:	d807      	bhi.n	80006bc <displayStrings+0x12c>
 80006ac:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d003      	beq.n	80006bc <displayStrings+0x12c>
 80006b4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80006ba:	d907      	bls.n	80006cc <displayStrings+0x13c>
                ssd1306_DrawPixel(i, j, White);
 80006bc:	f897 1095 	ldrb.w	r1, [r7, #149]	@ 0x95
 80006c0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006c4:	2201      	movs	r2, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fb14 	bl	8001cf4 <ssd1306_DrawPixel>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 80006cc:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006d0:	3301      	adds	r3, #1
 80006d2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80006d6:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006da:	2b50      	cmp	r3, #80	@ 0x50
 80006dc:	d9de      	bls.n	800069c <displayStrings+0x10c>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80006de:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006e2:	3301      	adds	r3, #1
 80006e4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80006e8:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dad1      	bge.n	8000694 <displayStrings+0x104>
            }
        }
    }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3798      	adds	r7, #152	@ 0x98
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000090 	.word	0x20000090
 8000700:	20000000 	.word	0x20000000
 8000704:	0800ce44 	.word	0x0800ce44
 8000708:	20000004 	.word	0x20000004

0800070c <renderSelectedFile>:
 *
 * @note Ensure that the `filename` is properly null-terminated and that the display dimensions 
 * and font settings are configured correctly to match the hardware.
 */

void renderSelectedFile(I2C_HandleTypeDef *hi2c1, const char *filename) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    // Clear the selected file section of the screen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e012      	b.n	8000742 <renderSelectedFile+0x36>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 800071c:	2351      	movs	r3, #81	@ 0x51
 800071e:	73bb      	strb	r3, [r7, #14]
 8000720:	e008      	b.n	8000734 <renderSelectedFile+0x28>
            ssd1306_DrawPixel(i, j, Black);
 8000722:	7bb9      	ldrb	r1, [r7, #14]
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2200      	movs	r2, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fae3 	bl	8001cf4 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 800072e:	7bbb      	ldrb	r3, [r7, #14]
 8000730:	3301      	adds	r3, #1
 8000732:	73bb      	strb	r3, [r7, #14]
 8000734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000738:	2b00      	cmp	r3, #0
 800073a:	daf2      	bge.n	8000722 <renderSelectedFile+0x16>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3301      	adds	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	dae8      	bge.n	800071c <renderSelectedFile+0x10>
        }
    }

    // Write the selected file name in the selected file section
    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + 2); // Adjust Y position for text alignment
 800074a:	2153      	movs	r1, #83	@ 0x53
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fbd9 	bl	8001f04 <ssd1306_SetCursor>
    ssd1306_WriteString(filename, Font_7x10, White);
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <renderSelectedFile+0x5c>)
 8000754:	2301      	movs	r3, #1
 8000756:	ca06      	ldmia	r2, {r1, r2}
 8000758:	6838      	ldr	r0, [r7, #0]
 800075a:	f001 fbad 	bl	8001eb8 <ssd1306_WriteString>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000004 	.word	0x20000004

0800076c <drawFaderProzent>:
 * @param[in] multiplikator Integer value used to adjust the vertical position on the screen, affecting where the percentage is drawn.
 *
 * @note Ensure that the `prozent` string is properly null-terminated and that the display dimensions and font settings are configured correctly to match the hardware. 
 * The `multiplikator` should be set appropriately to ensure that the displayed text does not overlap with other screen elements.
 */
void drawFaderProzent(I2C_HandleTypeDef *hi2c1, const char *prozent, int multiplikator){
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
    // Clear the selected file section of the screen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	75fb      	strb	r3, [r7, #23]
 800077c:	e019      	b.n	80007b2 <drawFaderProzent+0x46>
        for (uint8_t j = LIST_SECTION_HEIGHT + (18 * multiplikator); j < DISPLAY_HEIGHT; j++) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3351      	adds	r3, #81	@ 0x51
 800078e:	75bb      	strb	r3, [r7, #22]
 8000790:	e008      	b.n	80007a4 <drawFaderProzent+0x38>
            ssd1306_DrawPixel(i, j, Black);
 8000792:	7db9      	ldrb	r1, [r7, #22]
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	2200      	movs	r2, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f001 faab 	bl	8001cf4 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT + (18 * multiplikator); j < DISPLAY_HEIGHT; j++) {
 800079e:	7dbb      	ldrb	r3, [r7, #22]
 80007a0:	3301      	adds	r3, #1
 80007a2:	75bb      	strb	r3, [r7, #22]
 80007a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	daf2      	bge.n	8000792 <drawFaderProzent+0x26>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	3301      	adds	r3, #1
 80007b0:	75fb      	strb	r3, [r7, #23]
 80007b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dae1      	bge.n	800077e <drawFaderProzent+0x12>
        }
    }
    // Write the selected file name in the selected file section
    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + (18 * multiplikator)); // Adjust Y position for text alignment
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	00d2      	lsls	r2, r2, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3351      	adds	r3, #81	@ 0x51
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	2000      	movs	r0, #0
 80007d0:	f001 fb98 	bl	8001f04 <ssd1306_SetCursor>
    ssd1306_WriteString(prozent, Font_7x10, White);
 80007d4:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <drawFaderProzent+0x7c>)
 80007d6:	2301      	movs	r3, #1
 80007d8:	ca06      	ldmia	r2, {r1, r2}
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f001 fb6c 	bl	8001eb8 <ssd1306_WriteString>
}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000004 	.word	0x20000004

080007ec <addFile>:
 * @param[in] classes Array of float values representing the file's class percentages.
 *
 * @note Ensure that the `FileManager` has sufficient capacity in the `files[]` array to accommodate new files.
 */

void addFile(FileManager *fm, const char *filename, const float *classes){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
    if (fm->num_files < MAX_FILES) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80007fe:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 8000802:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000806:	da45      	bge.n	8000894 <addFile+0xa8>
        strcpy(fm->files[fm->num_files].filename, filename);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800080e:	f8d3 2b9c 	ldr.w	r2, [r3, #2972]	@ 0xb9c
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	4618      	mov	r0, r3
 8000822:	f00b fbb8 	bl	800bf96 <strcpy>
        for(int i = 0; i < MAX_CLASSES; i++){
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e017      	b.n	800085c <addFile+0x70>
            fm->files[fm->num_files].classes[i] = classes[i];
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 800083a:	f8d2 2b9c 	ldr.w	r2, [r2, #2972]	@ 0xb9c
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	3308      	adds	r3, #8
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4403      	add	r3, r0
 8000854:	6019      	str	r1, [r3, #0]
        for(int i = 0; i < MAX_CLASSES; i++){
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	2b03      	cmp	r3, #3
 8000860:	dde4      	ble.n	800082c <addFile+0x40>
        }
        fm->num_files++;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000868:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 800086c:	3301      	adds	r3, #1
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000874:	f8c2 3b9c 	str.w	r3, [r2, #2972]	@ 0xb9c
        if(fm->num_files == 1)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800087e:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 8000882:	2b01      	cmp	r3, #1
 8000884:	d106      	bne.n	8000894 <addFile+0xa8>
            fm->cursor_index = 0;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800088c:	461a      	mov	r2, r3
 800088e:	2300      	movs	r3, #0
 8000890:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
    }
}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <cursorUp>:
 * structure to move the cursor visually higher on the LCD display. 
 *  
 * @param[in] fm Pointer to the `FileManager` structure whose `cursor_index` is to be decremented.
 *
*/
void cursorUp(FileManager *fm){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index > 0) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008aa:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd0b      	ble.n	80008ca <cursorUp+0x2e>
        fm->cursor_index--;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008b8:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 80008bc:	3b01      	subs	r3, #1
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 80008c4:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
    } else {
        fm->cursor_index = fm->num_matched_files - 1 ;
    }
}
 80008c8:	e00a      	b.n	80008e0 <cursorUp+0x44>
        fm->cursor_index = fm->num_matched_files - 1 ;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008d0:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 80008d4:	3b01      	subs	r3, #1
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 80008dc:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <cursorDown>:
 * structure to move the cursor visually lower on the LCD display. 
 *  
 * @param[in] fm Pointer to the `FileManager` structure whose `cursor_index` is to be incremented.
 *
*/
void cursorDown(FileManager *fm){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index < fm->num_matched_files - 1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008fa:	f8d3 2ba4 	ldr.w	r2, [r3, #2980]	@ 0xba4
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000904:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000908:	3b01      	subs	r3, #1
 800090a:	429a      	cmp	r2, r3
 800090c:	da0b      	bge.n	8000926 <cursorDown+0x3a>
        fm->cursor_index++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000914:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 8000918:	3301      	adds	r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000920:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
    } else {
        fm->cursor_index = 0;
    }
}
 8000924:	e006      	b.n	8000934 <cursorDown+0x48>
        fm->cursor_index = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800092c:	461a      	mov	r2, r3
 800092e:	2300      	movs	r3, #0
 8000930:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <safeCurrentFileName>:
 * @param[in] fm Pointer to the `FileManager` structure from which the filename is retrieved and stored.
 *
 * @note Ensure that `cursor_index` is within the valid range of indices in the `shownFiles` array to avoid out-of-bounds access. 
 * The `current_cursor_filename` should have sufficient space allocated to store the filename.
 */
void safeCurrentFileName(FileManager *fm){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	strcpy(fm->current_cursor_filename, fm->shownFiles[fm->cursor_index].filename);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f503 423b 	add.w	r2, r3, #47872	@ 0xbb00
 800094e:	3280      	adds	r2, #128	@ 0x80
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000956:	f8d3 1ba4 	ldr.w	r1, [r3, #2980]	@ 0xba4
 800095a:	460b      	mov	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	440b      	add	r3, r1
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8000966:	3340      	adds	r3, #64	@ 0x40
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	440b      	add	r3, r1
 800096c:	4619      	mov	r1, r3
 800096e:	4610      	mov	r0, r2
 8000970:	f00b fb11 	bl	800bf96 <strcpy>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <setCursor>:
 *   - The `cursor_index` is set to the last position in the list.
 * 
 * @param[in] fm Pointer to the `FileManager` structure used to adjust the cursor position.
 */

void setCursor(FileManager *fm){
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	int res = NOT_EXISTS;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	60bb      	str	r3, [r7, #8]
	//If no file match with the fader settings
	if( fm->num_matched_files == 0){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000990:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d107      	bne.n	80009a8 <setCursor+0x2c>
		fm->cursor_index = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800099e:	461a      	mov	r2, r3
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
		return;
 80009a6:	e060      	b.n	8000a6a <setCursor+0xee>
	}
	//If the current current_cursor_filename match with one of the shownFiles on a position in array
	//set the cursor with the position
	for(int i = 0; i < fm->num_matched_files; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e027      	b.n	80009fe <setCursor+0x82>
		res = strcmp(fm->current_cursor_filename, fm->shownFiles[i].filename);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f503 423b 	add.w	r2, r3, #47872	@ 0xbb00
 80009b4:	3280      	adds	r2, #128	@ 0x80
 80009b6:	68f9      	ldr	r1, [r7, #12]
 80009b8:	460b      	mov	r3, r1
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	440b      	add	r3, r1
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 80009c4:	3340      	adds	r3, #64	@ 0x40
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	440b      	add	r3, r1
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f7ff fc07 	bl	80001e0 <strcmp>
 80009d2:	60b8      	str	r0, [r7, #8]
		if(res == EXISTS){
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10e      	bne.n	80009f8 <setCursor+0x7c>
			fm->cursor_index = i;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80009e0:	461a      	mov	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
			fm->current_file_index = i;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f8c2 3ba8 	str.w	r3, [r2, #2984]	@ 0xba8
			return;
 80009f6:	e038      	b.n	8000a6a <setCursor+0xee>
	for(int i = 0; i < fm->num_matched_files; i++){
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a04:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbcf      	blt.n	80009ae <setCursor+0x32>
		}
	}
	//If the file is not exists anymore in shownFiles set the current_cursor_filename with the name
	//of the file on the same position that the current_file_index is.
	if (fm->num_matched_files >= fm->cursor_index){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a14:	f8d3 2ba0 	ldr.w	r2, [r3, #2976]	@ 0xba0
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a1e:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 8000a22:	429a      	cmp	r2, r3
 8000a24:	db16      	blt.n	8000a54 <setCursor+0xd8>
		strcpy(fm->current_cursor_filename, fm->shownFiles[fm->current_file_index].filename);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f503 423b 	add.w	r2, r3, #47872	@ 0xbb00
 8000a2c:	3280      	adds	r2, #128	@ 0x80
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a34:	f8d3 1ba8 	ldr.w	r1, [r3, #2984]	@ 0xba8
 8000a38:	460b      	mov	r3, r1
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	440b      	add	r3, r1
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8000a44:	3340      	adds	r3, #64	@ 0x40
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	440b      	add	r3, r1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f00b faa2 	bl	800bf96 <strcpy>
 8000a52:	e00a      	b.n	8000a6a <setCursor+0xee>
	}
	else {
		// when cursor_index is bigger than the list set him as the end position of the list
		fm->cursor_index = fm->num_matched_files - 1;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a5a:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000a66:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
	}
}
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <selectFile>:
 * This allows the file at the cursor position to be marked as the selected file, which can then be processed or displayed as needed.
 *
 * @param[in] fm Pointer to the `FileManager` structure in which the `current_file_index` will be set to the value of `cursor_index`.
 */

void selectFile(FileManager *fm) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	fm->current_file_index = fm->cursor_index;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a7e:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000a88:	f8c2 3ba8 	str.w	r3, [r2, #2984]	@ 0xba8
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <HAL_GPIO_EXTI_Callback>:
 *   - Select the file and debounce the encoder switch using Timer5 and the debounce flag.
 *
 * @param[in] GPIO_pin The GPIO pin signals from the MCU related to the encoder and switch.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]

    // Change the cnt the Position of Cursor and debounce the encoder with &tim5
    if (GPIO_Pin == enc_a_clk_in1_Pin && !debounce) {
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d129      	bne.n	8000afc <HAL_GPIO_EXTI_Callback+0x64>
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f083 0301 	eor.w	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d022      	beq.n	8000afc <HAL_GPIO_EXTI_Callback+0x64>
          __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000ab6:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f06f 0201 	mvn.w	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
          HAL_TIM_Base_Start_IT(&htim5);
 8000ac0:	4820      	ldr	r0, [pc, #128]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000ac2:	f006 faed 	bl	80070a0 <HAL_TIM_Base_Start_IT>
          debounce = true;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
       //wenn A High und B High, decrement Encoder Count and increment the cursor position of the display
        if (HAL_GPIO_ReadPin(enc_b_dt_in2_GPIO_Port, enc_b_dt_in2_Pin)) {
 8000acc:	2102      	movs	r1, #2
 8000ace:	481e      	ldr	r0, [pc, #120]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000ad0:	f003 fcc0 	bl	8004454 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d008      	beq.n	8000aec <HAL_GPIO_EXTI_Callback+0x54>
          rotary_enc_count--;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000ae2:	6013      	str	r3, [r2, #0]
          cursorDown(&fm);
 8000ae4:	481a      	ldr	r0, [pc, #104]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000ae6:	f7ff ff01 	bl	80008ec <cursorDown>
 8000aea:	e007      	b.n	8000afc <HAL_GPIO_EXTI_Callback+0x64>
        } else {
          // wenn A High und B Low, increment Encoder Count and decrement the cursor position of the display
            rotary_enc_count++;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000af4:	6013      	str	r3, [r2, #0]
            cursorUp(&fm);
 8000af6:	4816      	ldr	r0, [pc, #88]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000af8:	f7ff fed0 	bl	800089c <cursorUp>
        }
    }
    // If the switch is pushed selectFile and debounce the encoder with &tim5
    if(GPIO_Pin == enc_switch_in3_Pin && !debounce){
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	2b10      	cmp	r3, #16
 8000b00:	d11a      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0xa0>
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	f083 0301 	eor.w	r3, r3, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d013      	beq.n	8000b38 <HAL_GPIO_EXTI_Callback+0xa0>
      __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f06f 0201 	mvn.w	r2, #1
 8000b18:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Start_IT(&htim5);
 8000b1a:	480a      	ldr	r0, [pc, #40]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000b1c:	f006 fac0 	bl	80070a0 <HAL_TIM_Base_Start_IT>
      debounce = true;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
      switch_push_button =true;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
      selectFile(&fm);
 8000b2c:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b2e:	f7ff ff9f 	bl	8000a70 <selectFile>
      init = false;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
    }
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000099 	.word	0x20000099
 8000b44:	200003b0 	.word	0x200003b0
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	20000440 	.word	0x20000440
 8000b54:	20000098 	.word	0x20000098
 8000b58:	2000009a 	.word	0x2000009a

08000b5c <HAL_TIM_PeriodElapsedCallback>:
 * - Sets a new timer for the next refresh interval.
 *
 * @param[in] htim Pointer to the TIM_HandleTypeDef structure for the current timer.
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    // reset debounce flag nach Timer5 elapsed
    if (htim == &htim5) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d105      	bne.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x1c>
        HAL_TIM_Base_Stop_IT(&htim5);
 8000b6c:	480f      	ldr	r0, [pc, #60]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b6e:	f006 faf9 	bl	8007164 <HAL_TIM_Base_Stop_IT>
        debounce = false;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
    }
    // stop timer set flags for dma and screen update and set a new timer for new refresh interval
    if (htim == &htim3){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d110      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x46>
        HAL_TIM_Base_Stop_IT(&htim3);
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b82:	f006 faef 	bl	8007164 <HAL_TIM_Base_Stop_IT>
    	updateScreenFlag = true;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
    	adcDmaFlag = true;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f06f 0201 	mvn.w	r2, #1
 8000b9a:	611a      	str	r2, [r3, #16]
        HAL_TIM_Base_Start_IT(&htim3);
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b9e:	f006 fa7f 	bl	80070a0 <HAL_TIM_Base_Start_IT>
    }
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200003b0 	.word	0x200003b0
 8000bb0:	20000099 	.word	0x20000099
 8000bb4:	20000368 	.word	0x20000368
 8000bb8:	20010c21 	.word	0x20010c21
 8000bbc:	20010c20 	.word	0x20010c20

08000bc0 <HAL_ADC_ConvCpltCallback>:
 * - Initializes the character array that will be shown on the display.
 *
 * @param[in] hadc Pointer to the ADC handle structure.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{	// Calculation of the smooth values for alle channels od the ADC
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0xfc>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d16f      	bne.n	8000cb2 <HAL_ADC_ConvCpltCallback+0xf2>
		cnt++;
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b39      	ldr	r3, [pc, #228]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000bdc:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < NUM_CHANNELS; i++){
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e00f      	b.n	8000c04 <HAL_ADC_ConvCpltCallback+0x44>
			smoothValue[i]+=adcBuffer[i];
 8000be4:	4a37      	ldr	r2, [pc, #220]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bec:	4936      	ldr	r1, [pc, #216]	@ (8000cc8 <HAL_ADC_ConvCpltCallback+0x108>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf4:	441a      	add	r2, r3
 8000bf6:	4933      	ldr	r1, [pc, #204]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_CHANNELS; i++){
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	ddec      	ble.n	8000be4 <HAL_ADC_ConvCpltCallback+0x24>
		}
		// Calculation of the average values for the diplay and the compare operations
		if(cnt >= SMOOTHING_HEIGHT){
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d94d      	bls.n	8000cb2 <HAL_ADC_ConvCpltCallback+0xf2>
			HAL_ADC_Stop_DMA(&hadc1);
 8000c16:	482d      	ldr	r0, [pc, #180]	@ (8000ccc <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c18:	f002 f8cc 	bl	8002db4 <HAL_ADC_Stop_DMA>
			for(int j = 0; j < NUM_CHANNELS; j++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	e02f      	b.n	8000c82 <HAL_ADC_ConvCpltCallback+0xc2>
				//Shown values
				currentClassPercentADC[j]=(smoothValue[j]/SMOOTHING_HEIGHT)/41;
 8000c22:	4a28      	ldr	r2, [pc, #160]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	4a29      	ldr	r2, [pc, #164]	@ (8000cd0 <HAL_ADC_ConvCpltCallback+0x110>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c5b      	lsrs	r3, r3, #17
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	4a27      	ldr	r2, [pc, #156]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
				//Compare values for the Sortalgorythm
				fm.fader_Class[j] = ((smoothValue[j]/SMOOTHING_HEIGHT)/4096.0f);
 8000c3e:	4a21      	ldr	r2, [pc, #132]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	4a24      	ldr	r2, [pc, #144]	@ (8000cd8 <HAL_ADC_ConvCpltCallback+0x118>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0b5b      	lsrs	r3, r3, #13
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c56:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000cdc <HAL_ADC_ConvCpltCallback+0x11c>
 8000c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x120>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8000c66:	332a      	adds	r3, #42	@ 0x2a
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	edc3 7a00 	vstr	s15, [r3]
				smoothValue[j]=0;
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2100      	movs	r1, #0
 8000c78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 0; j < NUM_CHANNELS; j++){
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	ddcc      	ble.n	8000c22 <HAL_ADC_ConvCpltCallback+0x62>
			}
			cnt=0;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	801a      	strh	r2, [r3, #0]
			//Initialisation of the char array that are shown on Display
			sprintf(faderProzent[0], "F1: %u F2: %u",currentClassPercentADC[0], currentClassPercentADC[1]);
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	4912      	ldr	r1, [pc, #72]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x124>)
 8000c9a:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x128>)
 8000c9c:	f00a ffde 	bl	800bc5c <siprintf>
			sprintf(faderProzent[1], "F3: %u F4: %u",currentClassPercentADC[2], currentClassPercentADC[3]);
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	4910      	ldr	r1, [pc, #64]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x12c>)
 8000cac:	4810      	ldr	r0, [pc, #64]	@ (8000cf0 <HAL_ADC_ConvCpltCallback+0x130>)
 8000cae:	f00a ffd5 	bl	800bc5c <siprintf>
		}
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	2000009c 	.word	0x2000009c
 8000cc4:	200000a0 	.word	0x200000a0
 8000cc8:	20010c24 	.word	0x20010c24
 8000ccc:	20000128 	.word	0x20000128
 8000cd0:	1b47afc9 	.word	0x1b47afc9
 8000cd4:	200000bc 	.word	0x200000bc
 8000cd8:	45e7b273 	.word	0x45e7b273
 8000cdc:	45800000 	.word	0x45800000
 8000ce0:	20000440 	.word	0x20000440
 8000ce4:	0800ce4c 	.word	0x0800ce4c
 8000ce8:	200000c4 	.word	0x200000c4
 8000cec:	0800ce5c 	.word	0x0800ce5c
 8000cf0:	200000f6 	.word	0x200000f6

08000cf4 <screenInit>:
 * This function initializes the LCD-Display, fills it with black, and updates the screen. It also
 * initializes the file manager with file names and assigns random class percentages for system tests.
 * 
 * @param[in] fileNames Array of file names to be added to the file manager.
 */
void screenInit(char (*fileNames)[MAX_FILENAME_LENGTH]){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	f5ad 5dfb 	sub.w	sp, sp, #8032	@ 0x1f60
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8000d00:	f6a3 735c 	subw	r3, r3, #3932	@ 0xf5c
 8000d04:	6018      	str	r0, [r3, #0]
  if (ssd1306_Init(&hi2c1) != 0) {
 8000d06:	4865      	ldr	r0, [pc, #404]	@ (8000e9c <screenInit+0x1a8>)
 8000d08:	f000 fe86 	bl	8001a18 <ssd1306_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <screenInit+0x22>
  	Error_Handler();
 8000d12:	f000 fe63 	bl	80019dc <Error_Handler>
  }
  HAL_Delay(1000);
 8000d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d1a:	f001 fde3 	bl	80028e4 <HAL_Delay>

  ssd1306_Fill(Black);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 ff92 	bl	8001c48 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 8000d24:	485d      	ldr	r0, [pc, #372]	@ (8000e9c <screenInit+0x1a8>)
 8000d26:	f000 ffb3 	bl	8001c90 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d2e:	f001 fdd9 	bl	80028e4 <HAL_Delay>

  init = true;
 8000d32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea0 <screenInit+0x1ac>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
  //Initialisation of the Class Percentage for System Tests with random Values between 0.0-1.0
  float fileClasses[MAX_FILES][MAX_CLASSES];

  for (int i = 0; i < MAX_FILES; ++i) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000d3e:	f102 021c 	add.w	r2, r2, #28
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e061      	b.n	8000e0a <screenInit+0x116>
      for (int j = 0; j < MAX_CLASSES; ++j) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000d4c:	f102 0218 	add.w	r2, r2, #24
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e048      	b.n	8000de6 <screenInit+0xf2>
          // Generiere eine Zufallszahl zwischen 0 und 1000 (für zwei Nachkommastellen)
          int random_value = rand() % 1001;
 8000d54:	f00a fe4e 	bl	800b9f4 <rand>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a52      	ldr	r2, [pc, #328]	@ (8000ea4 <screenInit+0x1b0>)
 8000d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d60:	1211      	asrs	r1, r2, #8
 8000d62:	17da      	asrs	r2, r3, #31
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 8000d6a:	fb01 f202 	mul.w	r2, r1, r2
 8000d6e:	1a9b      	subs	r3, r3, r2
 8000d70:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000d74:	f102 0210 	add.w	r2, r2, #16
 8000d78:	6013      	str	r3, [r2, #0]
          float random_float = (float)random_value / 1000.0f; // Skaliere auf den Bereich 0.0 - 1.0
 8000d7a:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000d7e:	f103 0310 	add.w	r3, r3, #16
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d8c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8000ea8 <screenInit+0x1b4>
 8000d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d94:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000d98:	f103 030c 	add.w	r3, r3, #12
 8000d9c:	edc3 7a00 	vstr	s15, [r3]

          // Setze den Wert im Array
          fileClasses[i][j] = random_float;
 8000da0:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8000da4:	f6a3 7254 	subw	r2, r3, #3924	@ 0xf54
 8000da8:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000dac:	f103 031c 	add.w	r3, r3, #28
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	0099      	lsls	r1, r3, #2
 8000db4:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000db8:	f103 0318 	add.w	r3, r3, #24
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000dc8:	f102 020c 	add.w	r2, r2, #12
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	601a      	str	r2, [r3, #0]
      for (int j = 0; j < MAX_CLASSES; ++j) {
 8000dd0:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000dd4:	f103 0318 	add.w	r3, r3, #24
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000de0:	f102 0218 	add.w	r2, r2, #24
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000dea:	f103 0318 	add.w	r3, r3, #24
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	ddaf      	ble.n	8000d54 <screenInit+0x60>
  for (int i = 0; i < MAX_FILES; ++i) {
 8000df4:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000df8:	f103 031c 	add.w	r3, r3, #28
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e04:	f102 021c 	add.w	r2, r2, #28
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e0e:	f103 031c 	add.w	r3, r3, #28
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e18:	db95      	blt.n	8000d46 <screenInit+0x52>
      }
  }
  // Add Files to the Filemanger
  for (int i = 1; i < MAX_FILES; i++) {
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e20:	f102 0214 	add.w	r2, r2, #20
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e028      	b.n	8000e7a <screenInit+0x186>
      addFile(&fm, fileNames[i], fileClasses[i]);
 8000e28:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e2c:	f103 0314 	add.w	r3, r3, #20
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4613      	mov	r3, r2
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8000e40:	f6a3 735c 	subw	r3, r3, #3932	@ 0xf5c
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1899      	adds	r1, r3, r2
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	3b14      	subs	r3, #20
 8000e4e:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e52:	f102 0214 	add.w	r2, r2, #20
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4813      	ldr	r0, [pc, #76]	@ (8000eac <screenInit+0x1b8>)
 8000e60:	f7ff fcc4 	bl	80007ec <addFile>
  for (int i = 1; i < MAX_FILES; i++) {
 8000e64:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e68:	f103 0314 	add.w	r3, r3, #20
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e74:	f102 0214 	add.w	r2, r2, #20
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e7e:	f103 0314 	add.w	r3, r3, #20
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e88:	dbce      	blt.n	8000e28 <screenInit+0x134>
  }
  sortFiles();
 8000e8a:	f000 f811 	bl	8000eb0 <sortFiles>
  updateScreen();
 8000e8e:	f000 f8cb 	bl	8001028 <updateScreen>
}
 8000e92:	bf00      	nop
 8000e94:	f507 57fb 	add.w	r7, r7, #8032	@ 0x1f60
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001d0 	.word	0x200001d0
 8000ea0:	2000009a 	.word	0x2000009a
 8000ea4:	4178749f 	.word	0x4178749f
 8000ea8:	447a0000 	.word	0x447a0000
 8000eac:	20000440 	.word	0x20000440

08000eb0 <sortFiles>:
 * - Compares the newly added filenames with the existing ones.
 * - Adds files from the existing file list to the `shownFiles` in the file manager.
 *
 * @param[in] void
 */
void sortFiles(void){
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
	char* compareFile;
	char* shownFile;
	int res;
	//Comparsion of the fileclasses and the fader settings
	//whether the class is fullfilled with a threashold of 0.1
	for(int i = 0; i < MAX_FILES; i++){
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	e0a3      	b.n	8001004 <sortFiles+0x154>
		classFulfilled = true;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		fileExists = true;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		for(int j = 0; j < MAX_CLASSES; j++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	e02c      	b.n	8000f28 <sortFiles+0x78>
			classForWav = fm.files[i].classes[j];
 8000ece:	4953      	ldr	r1, [pc, #332]	@ (800101c <sortFiles+0x16c>)
 8000ed0:	6a3a      	ldr	r2, [r7, #32]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	4413      	add	r3, r2
 8000ede:	3308      	adds	r3, #8
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	617b      	str	r3, [r7, #20]
			classFromFader = fm.fader_Class[j];
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800101c <sortFiles+0x16c>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8000ef0:	332a      	adds	r3, #42	@ 0x2a
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
			if(fabsf(classForWav-classFromFader) > THREASHOLD){
 8000efc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f00:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f08:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001020 <sortFiles+0x170>
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	dd03      	ble.n	8000f22 <sortFiles+0x72>
				classFulfilled = false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8000f20:	e005      	b.n	8000f2e <sortFiles+0x7e>
		for(int j = 0; j < MAX_CLASSES; j++){
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3301      	adds	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	ddcf      	ble.n	8000ece <sortFiles+0x1e>
			}
		}
		//Comparsion of the allready added filenames und the new one
		if(classFulfilled){
 8000f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d032      	beq.n	8000f9c <sortFiles+0xec>
			fileExists = false;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			compareFile = fm.files[i].filename;
 8000f3c:	6a3a      	ldr	r2, [r7, #32]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4a35      	ldr	r2, [pc, #212]	@ (800101c <sortFiles+0x16c>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
			for(int k = 0; k<fm.num_matched_files; k++){
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	e01c      	b.n	8000f8c <sortFiles+0xdc>
				shownFile = fm.shownFiles[k].filename;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8000f60:	3340      	adds	r3, #64	@ 0x40
 8000f62:	4a2e      	ldr	r2, [pc, #184]	@ (800101c <sortFiles+0x16c>)
 8000f64:	4413      	add	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
				res = strcmp(compareFile, shownFile);
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff f938 	bl	80001e0 <strcmp>
 8000f70:	6078      	str	r0, [r7, #4]
				if(res == EXISTS){
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <sortFiles+0xd6>
					fileExists = true;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					res = -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	607b      	str	r3, [r7, #4]
					break;
 8000f84:	e00a      	b.n	8000f9c <sortFiles+0xec>
			for(int k = 0; k<fm.num_matched_files; k++){
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <sortFiles+0x16c>)
 8000f8e:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000f92:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbda      	blt.n	8000f52 <sortFiles+0xa2>
				}
			}
		}
		//Add of the file from all existing files to the filemanegers shownFiles
		if(!fileExists){
 8000f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d029      	beq.n	8000ffe <sortFiles+0x14e>
			fm.shownFiles[fm.num_matched_files] = fm.files[i];
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <sortFiles+0x16c>)
 8000fac:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000fb0:	f8d3 2ba0 	ldr.w	r2, [r3, #2976]	@ 0xba0
 8000fb4:	4919      	ldr	r1, [pc, #100]	@ (800101c <sortFiles+0x16c>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 42bb 	add.w	r2, r3, #23936	@ 0x5d80
 8000fc4:	3240      	adds	r2, #64	@ 0x40
 8000fc6:	4815      	ldr	r0, [pc, #84]	@ (800101c <sortFiles+0x16c>)
 8000fc8:	6a39      	ldr	r1, [r7, #32]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	440b      	add	r3, r1
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	4403      	add	r3, r0
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			fm.num_matched_files++;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <sortFiles+0x16c>)
 8000fea:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000fee:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a09      	ldr	r2, [pc, #36]	@ (800101c <sortFiles+0x16c>)
 8000ff6:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000ffa:	f8c2 3ba0 	str.w	r3, [r2, #2976]	@ 0xba0
	for(int i = 0; i < MAX_FILES; i++){
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	3301      	adds	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800100a:	f6ff af57 	blt.w	8000ebc <sortFiles+0xc>
		}
	}
	sortFilesFlag = false;
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <sortFiles+0x174>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	@ 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}
 800101c:	20000440 	.word	0x20000440
 8001020:	3dcccccd 	.word	0x3dcccccd
 8001024:	2000009b 	.word	0x2000009b

08001028 <updateScreen>:
 * - Display the currently selected filename.
 * - Shows the fader settings on the display.
 *
 * @note The function relies on global variables and external functions to interact with the display.
 */
void updateScreen(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 6dfb 	sub.w	sp, sp, #2008	@ 0x7d8
 800102e:	af00      	add	r7, sp, #0
	char *filenames[MAX_FILES];
	char *currentFileName;
	for (int i = 0; i < fm.num_files; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 8001036:	e017      	b.n	8001068 <updateScreen+0x40>
		filenames[i] = fm.shownFiles[i].filename; // Extracting filenames from File structures
 8001038:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8001048:	3340      	adds	r3, #64	@ 0x40
 800104a:	4a2b      	ldr	r2, [pc, #172]	@ (80010f8 <updateScreen+0xd0>)
 800104c:	1899      	adds	r1, r3, r2
 800104e:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8001052:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 8001056:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 800105a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < fm.num_files; i++) {
 800105e:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 8001062:	3301      	adds	r3, #1
 8001064:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <updateScreen+0xd0>)
 800106a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800106e:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 8001072:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 8001076:	429a      	cmp	r2, r3
 8001078:	dbde      	blt.n	8001038 <updateScreen+0x10>
	}
	//Case if the init is not fullfiled
	if(init){
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <updateScreen+0xd4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <updateScreen+0x62>
		currentFileName = "";
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <updateScreen+0xd8>)
 8001084:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8001088:	e00f      	b.n	80010aa <updateScreen+0x82>
	}
	else{
	//To display the chosen filename
	currentFileName = fm.shownFiles[fm.current_file_index].filename;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <updateScreen+0xd0>)
 800108c:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8001090:	f8d3 2ba8 	ldr.w	r2, [r3, #2984]	@ 0xba8
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 80010a0:	3340      	adds	r3, #64	@ 0x40
 80010a2:	4a15      	ldr	r2, [pc, #84]	@ (80010f8 <updateScreen+0xd0>)
 80010a4:	4413      	add	r3, r2
 80010a6:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
	}
	//To show all filenames in the showFiles Array
	displayStrings(&hi2c1, filenames, fm.num_matched_files, fm.cursor_index);
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <updateScreen+0xd0>)
 80010ac:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80010b0:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <updateScreen+0xd0>)
 80010b8:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80010bc:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4639      	mov	r1, r7
 80010c4:	480f      	ldr	r0, [pc, #60]	@ (8001104 <updateScreen+0xdc>)
 80010c6:	f7ff fa63 	bl	8000590 <displayStrings>
	//To display the chosen filename
	renderSelectedFile(&hi2c1, currentFileName);
 80010ca:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	@ 0x7d4
 80010ce:	480d      	ldr	r0, [pc, #52]	@ (8001104 <updateScreen+0xdc>)
 80010d0:	f7ff fb1c 	bl	800070c <renderSelectedFile>
	//Show the Fader Settings on Display
	drawFaderProzent(&hi2c1, faderProzent[0], 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	490c      	ldr	r1, [pc, #48]	@ (8001108 <updateScreen+0xe0>)
 80010d8:	480a      	ldr	r0, [pc, #40]	@ (8001104 <updateScreen+0xdc>)
 80010da:	f7ff fb47 	bl	800076c <drawFaderProzent>
	drawFaderProzent(&hi2c1, faderProzent[1], 2);
 80010de:	2202      	movs	r2, #2
 80010e0:	490a      	ldr	r1, [pc, #40]	@ (800110c <updateScreen+0xe4>)
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <updateScreen+0xdc>)
 80010e4:	f7ff fb42 	bl	800076c <drawFaderProzent>


	// Update display
	ssd1306_UpdateScreen(&hi2c1);
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <updateScreen+0xdc>)
 80010ea:	f000 fdd1 	bl	8001c90 <ssd1306_UpdateScreen>
}
 80010ee:	bf00      	nop
 80010f0:	f507 67fb 	add.w	r7, r7, #2008	@ 0x7d8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000440 	.word	0x20000440
 80010fc:	2000009a 	.word	0x2000009a
 8001100:	0800ce6c 	.word	0x0800ce6c
 8001104:	200001d0 	.word	0x200001d0
 8001108:	200000c4 	.word	0x200000c4
 800110c:	200000f6 	.word	0x200000f6

08001110 <compareADCValues>:
 * - Sets a flag to indicate that the file list needs to be sorted.
 * - Saves the current filename and clears the `shownFiles` array if a change is detected.
 *
 * @note This function uses global variables for fader settings and file management.
 */
void compareADCValues(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	bool faderSettingsChanged= false;
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]
    //Compare the current und the past fader settings
	for(int i = 0; i < NUM_CHANNELS; i++){
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	e01a      	b.n	8001156 <compareADCValues+0x46>
		if(pastClassPercentADC[i] != currentClassPercentADC[i]){
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <compareADCValues+0x68>)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4914      	ldr	r1, [pc, #80]	@ (800117c <compareADCValues+0x6c>)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	440b      	add	r3, r1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d00d      	beq.n	8001150 <compareADCValues+0x40>
			pastClassPercentADC[i] = currentClassPercentADC[i];
 8001134:	4a11      	ldr	r2, [pc, #68]	@ (800117c <compareADCValues+0x6c>)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4413      	add	r3, r2
 800113a:	7819      	ldrb	r1, [r3, #0]
 800113c:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <compareADCValues+0x68>)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	460a      	mov	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
			faderSettingsChanged = true;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
			sortFilesFlag = true;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <compareADCValues+0x70>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_CHANNELS; i++){
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b04      	cmp	r3, #4
 800115a:	dde1      	ble.n	8001120 <compareADCValues+0x10>
		}
	}
	//The current filename get safed and the shownFiles array get cleared
	if(faderSettingsChanged){
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <compareADCValues+0x60>
		safeCurrentFileName(&fm);
 8001162:	4808      	ldr	r0, [pc, #32]	@ (8001184 <compareADCValues+0x74>)
 8001164:	f7ff fbec 	bl	8000940 <safeCurrentFileName>
		resetShownFiles();
 8001168:	f000 f80e 	bl	8001188 <resetShownFiles>
		faderSettingsChanged = false;
 800116c:	2300      	movs	r3, #0
 800116e:	71fb      	strb	r3, [r7, #7]
	}
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000b4 	.word	0x200000b4
 800117c:	200000bc 	.word	0x200000bc
 8001180:	2000009b 	.word	0x2000009b
 8001184:	20000440 	.word	0x20000440

08001188 <resetShownFiles>:
 * - Sets the memory area of `fm.shownFiles` to zero using `memset`.
 * - Resets the `num_matched_files` field to 0.
 *
 * @note This function is used to clear the list of files currently displayed on the screen.
 */
void resetShownFiles(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    memset(fm.shownFiles, 0, sizeof(fm.shownFiles)); // Setzt den gesamten Speicherbereich auf 0
 800118c:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 8001190:	2100      	movs	r1, #0
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <resetShownFiles+0x24>)
 8001194:	f00a fe5a 	bl	800be4c <memset>
    fm.num_matched_files = 0;
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <resetShownFiles+0x28>)
 800119a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800119e:	461a      	mov	r2, r3
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c2 3ba0 	str.w	r3, [r2, #2976]	@ 0xba0
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20006200 	.word	0x20006200
 80011b0:	20000440 	.word	0x20000440

080011b4 <listFiles>:
 * @param[in] path The directory path on the SD card to search for files.
 *
 * @note This function assumes that `fileNamesSDCard` and `fileCount` are global variables and that `MAX_FILES` and `MAX_FILENAME_LENGTH` are defined constants.
 */
void listFiles(const char *path)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    // Open the Directory
    fres = f_opendir(&dir, "/SamplePool");
 80011bc:	492a      	ldr	r1, [pc, #168]	@ (8001268 <listFiles+0xb4>)
 80011be:	482b      	ldr	r0, [pc, #172]	@ (800126c <listFiles+0xb8>)
 80011c0:	f00a fa20 	bl	800b604 <f_opendir>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <listFiles+0xbc>)
 80011ca:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK)
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <listFiles+0xbc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d145      	bne.n	8001260 <listFiles+0xac>
    {
        while (fileCount < MAX_FILES)
 80011d4:	e03c      	b.n	8001250 <listFiles+0x9c>
        {
            // Read the entry in the directory
            fres = f_readdir(&dir, &fno);
 80011d6:	4927      	ldr	r1, [pc, #156]	@ (8001274 <listFiles+0xc0>)
 80011d8:	4824      	ldr	r0, [pc, #144]	@ (800126c <listFiles+0xb8>)
 80011da:	f00a faac 	bl	800b736 <f_readdir>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <listFiles+0xbc>)
 80011e4:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK || fno.fname[0] == 0) break;
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <listFiles+0xbc>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d135      	bne.n	800125a <listFiles+0xa6>
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <listFiles+0xc0>)
 80011f0:	7d9b      	ldrb	r3, [r3, #22]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d031      	beq.n	800125a <listFiles+0xa6>

            // Check whether it a file
            if (!(fno.fattrib & AM_DIR))
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <listFiles+0xc0>)
 80011f8:	7a1b      	ldrb	r3, [r3, #8]
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d126      	bne.n	8001250 <listFiles+0x9c>
            {
                // It is a file
                char *fileName = fno.fname;
 8001202:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <listFiles+0xc4>)
 8001204:	60fb      	str	r3, [r7, #12]

                // Check whether the file have a extension .wav
                if (strstr(fileName, ".wav") != NULL)
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <listFiles+0xc8>)
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f00a fe3a 	bl	800be82 <strstr>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01d      	beq.n	8001250 <listFiles+0x9c>
                {
                    // File with extension .wav get Safed
                    strncpy(fileNamesSDCard[fileCount + 1], fileName, MAX_FILENAME_LENGTH - 1);
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <listFiles+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	4613      	mov	r3, r2
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <listFiles+0xd0>)
 8001224:	4413      	add	r3, r2
 8001226:	221d      	movs	r2, #29
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f00a fe16 	bl	800be5c <strncpy>
                    fileNamesSDCard[fileCount][MAX_FILENAME_LENGTH - 1] = '\0'; // Null-terminieren
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <listFiles+0xcc>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4913      	ldr	r1, [pc, #76]	@ (8001284 <listFiles+0xd0>)
 8001236:	4613      	mov	r3, r2
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	440b      	add	r3, r1
 8001240:	331d      	adds	r3, #29
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
                    fileCount++;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <listFiles+0xcc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <listFiles+0xcc>)
 800124e:	6013      	str	r3, [r2, #0]
        while (fileCount < MAX_FILES)
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <listFiles+0xcc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001258:	dbbd      	blt.n	80011d6 <listFiles+0x22>
                }
            }
        }
        f_closedir(&dir);
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <listFiles+0xb8>)
 800125c:	f00a fa45 	bl	800b6ea <f_closedir>
    }
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800ce70 	.word	0x0800ce70
 800126c:	2000d150 	.word	0x2000d150
 8001270:	2000d14c 	.word	0x2000d14c
 8001274:	2000bffc 	.word	0x2000bffc
 8001278:	2000c012 	.word	0x2000c012
 800127c:	0800ce7c 	.word	0x0800ce7c
 8001280:	20010c1c 	.word	0x20010c1c
 8001284:	2000d184 	.word	0x2000d184

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128c:	f001 fab8 	bl	8002800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001290:	f000 f870 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001294:	f000 faf4 	bl	8001880 <MX_GPIO_Init>
  MX_DMA_Init();
 8001298:	f000 fac2 	bl	8001820 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800129c:	f000 fa96 	bl	80017cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012a0:	f000 f988 	bl	80015b4 <MX_I2C1_Init>
  MX_TIM5_Init();
 80012a4:	f000 fa3c 	bl	8001720 <MX_TIM5_Init>
  MX_ADC1_Init();
 80012a8:	f000 f8d0 	bl	800144c <MX_ADC1_Init>
  MX_TIM3_Init();
 80012ac:	f000 f9e0 	bl	8001670 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 80012b0:	f000 f9ae 	bl	8001610 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80012b4:	f007 fff8 	bl	80092a8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //Start DMA for Read Faders
  HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
 80012b8:	2205      	movs	r2, #5
 80012ba:	4922      	ldr	r1, [pc, #136]	@ (8001344 <main+0xbc>)
 80012bc:	4822      	ldr	r0, [pc, #136]	@ (8001348 <main+0xc0>)
 80012be:	f001 fc89 	bl	8002bd4 <HAL_ADC_Start_DMA>


  //Open the file system
  fres = f_mount(&FatFs, SDPath, 1); //1=mount now
 80012c2:	2201      	movs	r2, #1
 80012c4:	4921      	ldr	r1, [pc, #132]	@ (800134c <main+0xc4>)
 80012c6:	4822      	ldr	r0, [pc, #136]	@ (8001350 <main+0xc8>)
 80012c8:	f00a f956 	bl	800b578 <f_mount>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <main+0xcc>)
 80012d2:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <main+0xcc>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <main+0x58>
      //uart_printf("f_mount error (%i)\r\n", fres);
      while(1);
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <main+0x54>
  }
  //creatFileManagerFile();

  //Get all File Names from SD
  listFiles("/");
 80012e0:	481d      	ldr	r0, [pc, #116]	@ (8001358 <main+0xd0>)
 80012e2:	f7ff ff67 	bl	80011b4 <listFiles>
  if (fres != FR_OK) {
      //uart_printf("f_mount error (%i)\r\n", fres);
      while(1);
  }*/
  // Init lcd with the Filename from SD Card
  screenInit(fileNamesSDCard);
 80012e6:	481d      	ldr	r0, [pc, #116]	@ (800135c <main+0xd4>)
 80012e8:	f7ff fd04 	bl	8000cf4 <screenInit>

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <main+0xd8>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f06f 0201 	mvn.w	r2, #1
 80012f4:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 80012f6:	481a      	ldr	r0, [pc, #104]	@ (8001360 <main+0xd8>)
 80012f8:	f005 fed2 	bl	80070a0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { 
	if(updateScreenFlag){
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <main+0xdc>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0fb      	beq.n	80012fc <main+0x74>
		compareADCValues();
 8001304:	f7ff ff04 	bl	8001110 <compareADCValues>
		updateScreenFlag = false;
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <main+0xdc>)
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]

		if(sortFilesFlag == true){
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <main+0xe0>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <main+0x9e>
		sortFiles();
 8001316:	f7ff fdcb 	bl	8000eb0 <sortFiles>
		setCursor(&fm);
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <main+0xe4>)
 800131c:	f7ff fb2e 	bl	800097c <setCursor>
		sortFilesFlag = false;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <main+0xe0>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
		}
		updateScreen();
 8001326:	f7ff fe7f 	bl	8001028 <updateScreen>
		//writeFileManagerOnSD();
		//readFileManagerFromSD();
		if(adcDmaFlag){
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <main+0xe8>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0e4      	beq.n	80012fc <main+0x74>
	    HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
 8001332:	2205      	movs	r2, #5
 8001334:	4903      	ldr	r1, [pc, #12]	@ (8001344 <main+0xbc>)
 8001336:	4804      	ldr	r0, [pc, #16]	@ (8001348 <main+0xc0>)
 8001338:	f001 fc4c 	bl	8002bd4 <HAL_ADC_Start_DMA>
	    adcDmaFlag = false;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <main+0xe8>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
	if(updateScreenFlag){
 8001342:	e7db      	b.n	80012fc <main+0x74>
 8001344:	20010c24 	.word	0x20010c24
 8001348:	20000128 	.word	0x20000128
 800134c:	2001144c 	.word	0x2001144c
 8001350:	2000c114 	.word	0x2000c114
 8001354:	2000d14c 	.word	0x2000d14c
 8001358:	0800cf44 	.word	0x0800cf44
 800135c:	2000d184 	.word	0x2000d184
 8001360:	20000368 	.word	0x20000368
 8001364:	20010c21 	.word	0x20010c21
 8001368:	2000009b 	.word	0x2000009b
 800136c:	20000440 	.word	0x20000440
 8001370:	20010c20 	.word	0x20010c20

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b094      	sub	sp, #80	@ 0x50
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2230      	movs	r2, #48	@ 0x30
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00a fd62 	bl	800be4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <SystemClock_Config+0xd0>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	4a28      	ldr	r2, [pc, #160]	@ (8001444 <SystemClock_Config+0xd0>)
 80013a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a8:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <SystemClock_Config+0xd0>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <SystemClock_Config+0xd4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013c0:	4a21      	ldr	r2, [pc, #132]	@ (8001448 <SystemClock_Config+0xd4>)
 80013c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <SystemClock_Config+0xd4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013dc:	2310      	movs	r3, #16
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e0:	2302      	movs	r3, #2
 80013e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013e8:	2310      	movs	r3, #16
 80013ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013f2:	2304      	movs	r3, #4
 80013f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013f6:	2307      	movs	r3, #7
 80013f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fd20 	bl	8004e44 <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800140a:	f000 fae7 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	230f      	movs	r3, #15
 8001410:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001412:	2302      	movs	r3, #2
 8001414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2102      	movs	r1, #2
 800142a:	4618      	mov	r0, r3
 800142c:	f003 ff82 	bl	8005334 <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001436:	f000 fad1 	bl	80019dc <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3750      	adds	r7, #80	@ 0x50
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	@ 0x30
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001460:	463b      	mov	r3, r7
 8001462:	2220      	movs	r2, #32
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f00a fcf0 	bl	800be4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800146c:	4b4d      	ldr	r3, [pc, #308]	@ (80015a4 <MX_ADC1_Init+0x158>)
 800146e:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <MX_ADC1_Init+0x15c>)
 8001470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001472:	4b4c      	ldr	r3, [pc, #304]	@ (80015a4 <MX_ADC1_Init+0x158>)
 8001474:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147a:	4b4a      	ldr	r3, [pc, #296]	@ (80015a4 <MX_ADC1_Init+0x158>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001480:	4b48      	ldr	r3, [pc, #288]	@ (80015a4 <MX_ADC1_Init+0x158>)
 8001482:	2201      	movs	r2, #1
 8001484:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001486:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <MX_ADC1_Init+0x158>)
 8001488:	2201      	movs	r2, #1
 800148a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800148c:	4b45      	ldr	r3, [pc, #276]	@ (80015a4 <MX_ADC1_Init+0x158>)
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001494:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <MX_ADC1_Init+0x158>)
 8001496:	2200      	movs	r2, #0
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149a:	4b42      	ldr	r3, [pc, #264]	@ (80015a4 <MX_ADC1_Init+0x158>)
 800149c:	4a43      	ldr	r2, [pc, #268]	@ (80015ac <MX_ADC1_Init+0x160>)
 800149e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	@ (80015a4 <MX_ADC1_Init+0x158>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80014a6:	4b3f      	ldr	r3, [pc, #252]	@ (80015a4 <MX_ADC1_Init+0x158>)
 80014a8:	2205      	movs	r2, #5
 80014aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014ac:	4b3d      	ldr	r3, [pc, #244]	@ (80015a4 <MX_ADC1_Init+0x158>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b4:	4b3b      	ldr	r3, [pc, #236]	@ (80015a4 <MX_ADC1_Init+0x158>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ba:	483a      	ldr	r0, [pc, #232]	@ (80015a4 <MX_ADC1_Init+0x158>)
 80014bc:	f001 fa36 	bl	800292c <HAL_ADC_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80014c6:	f000 fa89 	bl	80019dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014ca:	2306      	movs	r3, #6
 80014cc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	4619      	mov	r1, r3
 80014dc:	4831      	ldr	r0, [pc, #196]	@ (80015a4 <MX_ADC1_Init+0x158>)
 80014de:	f001 fce1 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80014e8:	f000 fa78 	bl	80019dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014ec:	2307      	movs	r3, #7
 80014ee:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80014f0:	2302      	movs	r3, #2
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4619      	mov	r1, r3
 80014fa:	482a      	ldr	r0, [pc, #168]	@ (80015a4 <MX_ADC1_Init+0x158>)
 80014fc:	f001 fcd2 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001506:	f000 fa69 	bl	80019dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800150a:	2308      	movs	r3, #8
 800150c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800150e:	2303      	movs	r3, #3
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	4619      	mov	r1, r3
 8001518:	4822      	ldr	r0, [pc, #136]	@ (80015a4 <MX_ADC1_Init+0x158>)
 800151a:	f001 fcc3 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001524:	f000 fa5a 	bl	80019dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001528:	2309      	movs	r3, #9
 800152a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800152c:	2304      	movs	r3, #4
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4619      	mov	r1, r3
 8001536:	481b      	ldr	r0, [pc, #108]	@ (80015a4 <MX_ADC1_Init+0x158>)
 8001538:	f001 fcb4 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001542:	f000 fa4b 	bl	80019dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001546:	230a      	movs	r3, #10
 8001548:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800154a:	2305      	movs	r3, #5
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	4619      	mov	r1, r3
 8001554:	4813      	ldr	r0, [pc, #76]	@ (80015a4 <MX_ADC1_Init+0x158>)
 8001556:	f001 fca5 	bl	8002ea4 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001560:	f000 fa3c 	bl	80019dc <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001564:	2306      	movs	r3, #6
 8001566:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001568:	2301      	movs	r3, #1
 800156a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <MX_ADC1_Init+0x164>)
 800157a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001588:	463b      	mov	r3, r7
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_ADC1_Init+0x158>)
 800158e:	f001 ff33 	bl	80033f8 <HAL_ADCEx_InjectedConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001598:	f000 fa20 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	3730      	adds	r7, #48	@ 0x30
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000128 	.word	0x20000128
 80015a8:	40012000 	.word	0x40012000
 80015ac:	0f000001 	.word	0x0f000001
 80015b0:	000f0001 	.word	0x000f0001

080015b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015ba:	4a13      	ldr	r2, [pc, #76]	@ (8001608 <MX_I2C1_Init+0x54>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015c0:	4a12      	ldr	r2, [pc, #72]	@ (800160c <MX_I2C1_Init+0x58>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e4:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f0:	4804      	ldr	r0, [pc, #16]	@ (8001604 <MX_I2C1_Init+0x50>)
 80015f2:	f002 ff79 	bl	80044e8 <HAL_I2C_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015fc:	f000 f9ee 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200001d0 	.word	0x200001d0
 8001608:	40005400 	.word	0x40005400
 800160c:	000186a0 	.word	0x000186a0

08001610 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001614:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 8001616:	4a15      	ldr	r2, [pc, #84]	@ (800166c <MX_SDIO_SD_Init+0x5c>)
 8001618:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800162c:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800163e:	480a      	ldr	r0, [pc, #40]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 8001640:	f004 f898 	bl	8005774 <HAL_SD_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 800164a:	f000 f9c7 	bl	80019dc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800164e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001652:	4805      	ldr	r0, [pc, #20]	@ (8001668 <MX_SDIO_SD_Init+0x58>)
 8001654:	f005 f812 	bl	800667c <HAL_SD_ConfigWideBusOperation>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 800165e:	f000 f9bd 	bl	80019dc <Error_Handler>
  }

  /* USER CODE END SDIO_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000224 	.word	0x20000224
 800166c:	40012c00 	.word	0x40012c00

08001670 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <MX_TIM3_Init+0xa8>)
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <MX_TIM3_Init+0xac>)
 8001690:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_TIM3_Init+0xa8>)
 8001694:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8001698:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <MX_TIM3_Init+0xa8>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_TIM3_Init+0xa8>)
 80016a2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80016a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <MX_TIM3_Init+0xa8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_TIM3_Init+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b4:	4818      	ldr	r0, [pc, #96]	@ (8001718 <MX_TIM3_Init+0xa8>)
 80016b6:	f005 fca3 	bl	8007000 <HAL_TIM_Base_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016c0:	f000 f98c 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	4619      	mov	r1, r3
 80016d0:	4811      	ldr	r0, [pc, #68]	@ (8001718 <MX_TIM3_Init+0xa8>)
 80016d2:	f005 fec0 	bl	8007456 <HAL_TIM_ConfigClockSource>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016dc:	f000 f97e 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80016e0:	2108      	movs	r1, #8
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_TIM3_Init+0xa8>)
 80016e4:	f005 fd6d 	bl	80071c2 <HAL_TIM_OnePulse_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016ee:	f000 f975 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <MX_TIM3_Init+0xa8>)
 8001700:	f006 f8be 	bl	8007880 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800170a:	f000 f967 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000368 	.word	0x20000368
 800171c:	40000400 	.word	0x40000400

08001720 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 800173e:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <MX_TIM5_Init+0xa8>)
 8001740:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 8001744:	2264      	movs	r2, #100	@ 0x64
 8001746:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8400;
 800174e:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 8001750:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001754:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b19      	ldr	r3, [pc, #100]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001762:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 8001764:	f005 fc4c 	bl	8007000 <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800176e:	f000 f935 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	4619      	mov	r1, r3
 800177e:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 8001780:	f005 fe69 	bl	8007456 <HAL_TIM_ConfigClockSource>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800178a:	f000 f927 	bl	80019dc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 800178e:	2108      	movs	r1, #8
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 8001792:	f005 fd16 	bl	80071c2 <HAL_TIM_OnePulse_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 800179c:	f000 f91e 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_TIM5_Init+0xa4>)
 80017ae:	f006 f867 	bl	8007880 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80017b8:	f000 f910 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200003b0 	.word	0x200003b0
 80017c8:	40000c00 	.word	0x40000c00

080017cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <MX_USART2_UART_Init+0x50>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d6:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <MX_USART2_UART_Init+0x4c>)
 8001804:	f006 f8be 	bl	8007984 <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800180e:	f000 f8e5 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200003f8 	.word	0x200003f8
 800181c:	40004400 	.word	0x40004400

08001820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <MX_DMA_Init+0x5c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a13      	ldr	r2, [pc, #76]	@ (800187c <MX_DMA_Init+0x5c>)
 8001830:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <MX_DMA_Init+0x5c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	2038      	movs	r0, #56	@ 0x38
 8001848:	f002 f847 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800184c:	2038      	movs	r0, #56	@ 0x38
 800184e:	f002 f860 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	203b      	movs	r0, #59	@ 0x3b
 8001858:	f002 f83f 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800185c:	203b      	movs	r0, #59	@ 0x3b
 800185e:	f002 f858 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	2045      	movs	r0, #69	@ 0x45
 8001868:	f002 f837 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800186c:	2045      	movs	r0, #69	@ 0x45
 800186e:	f002 f850 	bl	8003912 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800

08001880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	@ 0x28
 8001884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b4d      	ldr	r3, [pc, #308]	@ (80019d0 <MX_GPIO_Init+0x150>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4a4c      	ldr	r2, [pc, #304]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b46      	ldr	r3, [pc, #280]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4a45      	ldr	r2, [pc, #276]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b3f      	ldr	r3, [pc, #252]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a3e      	ldr	r2, [pc, #248]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b3c      	ldr	r3, [pc, #240]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a37      	ldr	r2, [pc, #220]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <MX_GPIO_Init+0x150>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b31      	ldr	r3, [pc, #196]	@ (80019d0 <MX_GPIO_Init+0x150>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a30      	ldr	r2, [pc, #192]	@ (80019d0 <MX_GPIO_Init+0x150>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <MX_GPIO_Init+0x150>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2120      	movs	r1, #32
 8001926:	482b      	ldr	r0, [pc, #172]	@ (80019d4 <MX_GPIO_Init+0x154>)
 8001928:	f002 fdac 	bl	8004484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800192c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001932:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4619      	mov	r1, r3
 8001942:	4825      	ldr	r0, [pc, #148]	@ (80019d8 <MX_GPIO_Init+0x158>)
 8001944:	f002 fc02 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_a_clk_in1_Pin enc_switch_in3_Pin */
  GPIO_InitStruct.Pin = enc_a_clk_in1_Pin|enc_switch_in3_Pin;
 8001948:	2311      	movs	r3, #17
 800194a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800194c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	481d      	ldr	r0, [pc, #116]	@ (80019d4 <MX_GPIO_Init+0x154>)
 800195e:	f002 fbf5 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_b_dt_in2_Pin */
  GPIO_InitStruct.Pin = enc_b_dt_in2_Pin;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196a:	2301      	movs	r3, #1
 800196c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(enc_b_dt_in2_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4817      	ldr	r0, [pc, #92]	@ (80019d4 <MX_GPIO_Init+0x154>)
 8001976:	f002 fbe9 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800197a:	2320      	movs	r3, #32
 800197c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4810      	ldr	r0, [pc, #64]	@ (80019d4 <MX_GPIO_Init+0x154>)
 8001992:	f002 fbdb 	bl	800414c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2006      	movs	r0, #6
 800199c:	f001 ff9d 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019a0:	2006      	movs	r0, #6
 80019a2:	f001 ffb6 	bl	8003912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	200a      	movs	r0, #10
 80019ac:	f001 ff95 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80019b0:	200a      	movs	r0, #10
 80019b2:	f001 ffae 	bl	8003912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2028      	movs	r0, #40	@ 0x28
 80019bc:	f001 ff8d 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019c0:	2028      	movs	r0, #40	@ 0x28
 80019c2:	f001 ffa6 	bl	8003912 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020800 	.word	0x40020800

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <Error_Handler+0x8>

080019e8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af04      	add	r7, sp, #16
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80019f4:	230a      	movs	r3, #10
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	2301      	movs	r3, #1
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	1cfb      	adds	r3, r7, #3
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2301      	movs	r3, #1
 8001a02:	2200      	movs	r2, #0
 8001a04:	2178      	movs	r1, #120	@ 0x78
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f002 feb2 	bl	8004770 <HAL_I2C_Mem_Write>
 8001a0c:	4603      	mov	r3, r0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001a20:	2064      	movs	r0, #100	@ 0x64
 8001a22:	f000 ff5f 	bl	80028e4 <HAL_Delay>
    int status = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]

    // Init LCD

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYOFF);               // 0xAE
 8001a2a:	21ae      	movs	r1, #174	@ 0xae
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ffdb 	bl	80019e8 <ssd1306_WriteCommand>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4413      	add	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYCLOCKDIV);
 8001a3c:	21d5      	movs	r1, #213	@ 0xd5
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffd2 	bl	80019e8 <ssd1306_WriteCommand>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x51); // 0xd5, 0x51,
 8001a4e:	2151      	movs	r1, #81	@ 0x51
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffc9 	bl	80019e8 <ssd1306_WriteCommand>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_MEMORYMODE);
 8001a60:	2120      	movs	r1, #32
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffc0 	bl	80019e8 <ssd1306_WriteCommand>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
status += ssd1306_WriteCommand(hi2c, 0x00); // 0x00 for Horizontal addressing mode
 8001a72:	2100      	movs	r1, #0
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffb7 	bl	80019e8 <ssd1306_WriteCommand>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETCONTRAST); 
 8001a84:	2181      	movs	r1, #129	@ 0x81
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffae 	bl	80019e8 <ssd1306_WriteCommand>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x4F);       // 0x81, 0x4F
 8001a96:	214f      	movs	r1, #79	@ 0x4f
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffa5 	bl	80019e8 <ssd1306_WriteCommand>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DCDC) ;
 8001aa8:	21ad      	movs	r1, #173	@ 0xad
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff9c 	bl	80019e8 <ssd1306_WriteCommand>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8A);               // 0xAD, 0x8A
 8001aba:	218a      	movs	r1, #138	@ 0x8a
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff93 	bl	80019e8 <ssd1306_WriteCommand>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SEGREMAP);                 // 0xA0
 8001acc:	21a0      	movs	r1, #160	@ 0xa0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff8a 	bl	80019e8 <ssd1306_WriteCommand>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_COMSCANINC);               // 0xC0
 8001ade:	21c0      	movs	r1, #192	@ 0xc0
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff81 	bl	80019e8 <ssd1306_WriteCommand>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPSTARTLINE);
 8001af0:	21dc      	movs	r1, #220	@ 0xdc
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff78 	bl	80019e8 <ssd1306_WriteCommand>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x0);    // 0xDC 0x00
 8001b02:	2100      	movs	r1, #0
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff6f 	bl	80019e8 <ssd1306_WriteCommand>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 8001b14:	21d3      	movs	r1, #211	@ 0xd3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff66 	bl	80019e8 <ssd1306_WriteCommand>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x60);   // 0xd3, 0x60,
 8001b26:	2160      	movs	r1, #96	@ 0x60
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff5d 	bl	80019e8 <ssd1306_WriteCommand>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4413      	add	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPRECHARGE); 
 8001b38:	21d9      	movs	r1, #217	@ 0xd9
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ff54 	bl	80019e8 <ssd1306_WriteCommand>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);       // 0xd9, 0x22,
 8001b4a:	2122      	movs	r1, #34	@ 0x22
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ff4b 	bl	80019e8 <ssd1306_WriteCommand>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETVCOMDETECT); 
 8001b5c:	21db      	movs	r1, #219	@ 0xdb
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ff42 	bl	80019e8 <ssd1306_WriteCommand>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x35);      // 0xdb, 0x35,
 8001b6e:	2135      	movs	r1, #53	@ 0x35
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff39 	bl	80019e8 <ssd1306_WriteCommand>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPAGEADDR);                  // 0xb0
 8001b80:	21b0      	movs	r1, #176	@ 0xb0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff30 	bl	80019e8 <ssd1306_WriteCommand>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]

    // status += ssd1306_WriteCommand(hi2c, H110X_SETCOMPINS);
    // status += ssd1306_WriteCommand(hi2c,  0x12);             // 0xda, 0x12,
    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYALLON_RESUME); // 0xa4
 8001b92:	21a4      	movs	r1, #164	@ 0xa4
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff27 	bl	80019e8 <ssd1306_WriteCommand>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_NORMALDISPLAY);       // 0xa6
 8001ba4:	21a6      	movs	r1, #166	@ 0xa6
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff1e 	bl	80019e8 <ssd1306_WriteCommand>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 8001bb6:	21d3      	movs	r1, #211	@ 0xd3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff15 	bl	80019e8 <ssd1306_WriteCommand>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff0c 	bl	80019e8 <ssd1306_WriteCommand>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETMULTIPLEX);
 8001bda:	21a8      	movs	r1, #168	@ 0xa8
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff03 	bl	80019e8 <ssd1306_WriteCommand>
 8001be2:	4603      	mov	r3, r0
 8001be4:	461a      	mov	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x7F);
 8001bec:	217f      	movs	r1, #127	@ 0x7f
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fefa 	bl	80019e8 <ssd1306_WriteCommand>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYON);
 8001bfe:	21af      	movs	r1, #175	@ 0xaf
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fef1 	bl	80019e8 <ssd1306_WriteCommand>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <ssd1306_Init+0x202>
        return 1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <ssd1306_Init+0x222>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f000 f814 	bl	8001c48 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f835 	bl	8001c90 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001c26:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <ssd1306_Init+0x22c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <ssd1306_Init+0x22c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001c32:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <ssd1306_Init+0x22c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	715a      	strb	r2, [r3, #5]

    return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20011438 	.word	0x20011438

08001c48 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e00d      	b.n	8001c74 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <ssd1306_Fill+0x1a>
 8001c5e:	2100      	movs	r1, #0
 8001c60:	e000      	b.n	8001c64 <ssd1306_Fill+0x1c>
 8001c62:	21ff      	movs	r1, #255	@ 0xff
 8001c64:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <ssd1306_Fill+0x44>)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4413      	add	r3, r2
 8001c6a:	460a      	mov	r2, r1
 8001c6c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3301      	adds	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c7a:	d3ed      	bcc.n	8001c58 <ssd1306_Fill+0x10>
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20010c38 	.word	0x20010c38

08001c90 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af04      	add	r7, sp, #16
 8001c96:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 16; i++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	e020      	b.n	8001ce0 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	3b50      	subs	r3, #80	@ 0x50
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fe9e 	bl	80019e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001cac:	2100      	movs	r1, #0
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fe9a 	bl	80019e8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fe96 	bl	80019e8 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	01db      	lsls	r3, r3, #7
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf0 <ssd1306_UpdateScreen+0x60>)
 8001cc2:	4413      	add	r3, r2
 8001cc4:	2264      	movs	r2, #100	@ 0x64
 8001cc6:	9202      	str	r2, [sp, #8]
 8001cc8:	2280      	movs	r2, #128	@ 0x80
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	2240      	movs	r2, #64	@ 0x40
 8001cd2:	2178      	movs	r1, #120	@ 0x78
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f002 fd4b 	bl	8004770 <HAL_I2C_Mem_Write>
    for (i = 0; i < 16; i++) {
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b0f      	cmp	r3, #15
 8001ce4:	d9db      	bls.n	8001c9e <ssd1306_UpdateScreen+0xe>
    }
}
 8001ce6:	bf00      	nop
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20010c38 	.word	0x20010c38

08001cf4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	71bb      	strb	r3, [r7, #6]
 8001d02:	4613      	mov	r3, r2
 8001d04:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db49      	blt.n	8001da2 <ssd1306_DrawPixel+0xae>
 8001d0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db45      	blt.n	8001da2 <ssd1306_DrawPixel+0xae>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001d16:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <ssd1306_DrawPixel+0xbc>)
 8001d18:	791b      	ldrb	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <ssd1306_DrawPixel+0x38>
    {
        color = (SSD1306_COLOR)!color;
 8001d1e:	797b      	ldrb	r3, [r7, #5]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001d2c:	797b      	ldrb	r3, [r7, #5]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d11a      	bne.n	8001d68 <ssd1306_DrawPixel+0x74>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001d32:	79fa      	ldrb	r2, [r7, #7]
 8001d34:	79bb      	ldrb	r3, [r7, #6]
 8001d36:	08db      	lsrs	r3, r3, #3
 8001d38:	b2d8      	uxtb	r0, r3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	01db      	lsls	r3, r3, #7
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a1c      	ldr	r2, [pc, #112]	@ (8001db4 <ssd1306_DrawPixel+0xc0>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	b25a      	sxtb	r2, r3
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b259      	sxtb	r1, r3
 8001d58:	79fa      	ldrb	r2, [r7, #7]
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	01db      	lsls	r3, r3, #7
 8001d5e:	4413      	add	r3, r2
 8001d60:	b2c9      	uxtb	r1, r1
 8001d62:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <ssd1306_DrawPixel+0xc0>)
 8001d64:	54d1      	strb	r1, [r2, r3]
 8001d66:	e01d      	b.n	8001da4 <ssd1306_DrawPixel+0xb0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001d68:	79fa      	ldrb	r2, [r7, #7]
 8001d6a:	79bb      	ldrb	r3, [r7, #6]
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	b2d8      	uxtb	r0, r3
 8001d70:	4603      	mov	r3, r0
 8001d72:	01db      	lsls	r3, r3, #7
 8001d74:	4413      	add	r3, r2
 8001d76:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <ssd1306_DrawPixel+0xc0>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	b25a      	sxtb	r2, r3
 8001d7c:	79bb      	ldrb	r3, [r7, #6]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	4013      	ands	r3, r2
 8001d90:	b259      	sxtb	r1, r3
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	4603      	mov	r3, r0
 8001d96:	01db      	lsls	r3, r3, #7
 8001d98:	4413      	add	r3, r2
 8001d9a:	b2c9      	uxtb	r1, r1
 8001d9c:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <ssd1306_DrawPixel+0xc0>)
 8001d9e:	54d1      	strb	r1, [r2, r3]
 8001da0:	e000      	b.n	8001da4 <ssd1306_DrawPixel+0xb0>
        return;
 8001da2:	bf00      	nop
    }
}
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20011438 	.word	0x20011438
 8001db4:	20010c38 	.word	0x20010c38

08001db8 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	1d38      	adds	r0, r7, #4
 8001dc2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4623      	mov	r3, r4
 8001dca:	73fb      	strb	r3, [r7, #15]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001dd0:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	793b      	ldrb	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ddc:	dc06      	bgt.n	8001dec <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001dde:	4b35      	ldr	r3, [pc, #212]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001de0:	885b      	ldrh	r3, [r3, #2]
 8001de2:	461a      	mov	r2, r3
 8001de4:	797b      	ldrb	r3, [r7, #5]
 8001de6:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001de8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dea:	dd01      	ble.n	8001df0 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e05c      	b.n	8001eaa <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
 8001df4:	e04c      	b.n	8001e90 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	3b20      	subs	r3, #32
 8001dfc:	7979      	ldrb	r1, [r7, #5]
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	440b      	add	r3, r1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	61bb      	str	r3, [r7, #24]
 8001e14:	e034      	b.n	8001e80 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d012      	beq.n	8001e4c <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001e26:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	b2d8      	uxtb	r0, r3
 8001e34:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001e36:	885b      	ldrh	r3, [r3, #2]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	7bba      	ldrb	r2, [r7, #14]
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7ff ff55 	bl	8001cf4 <ssd1306_DrawPixel>
 8001e4a:	e016      	b.n	8001e7a <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4413      	add	r3, r2
 8001e58:	b2d8      	uxtb	r0, r3
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001e5c:	885b      	ldrh	r3, [r3, #2]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	b2d9      	uxtb	r1, r3
 8001e68:	7bbb      	ldrb	r3, [r7, #14]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	f7ff ff3d 	bl	8001cf4 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	793b      	ldrb	r3, [r7, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d3c5      	bcc.n	8001e16 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	797b      	ldrb	r3, [r7, #5]
 8001e92:	461a      	mov	r2, r3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d3ad      	bcc.n	8001df6 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	793a      	ldrb	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b03      	ldr	r3, [pc, #12]	@ (8001eb4 <ssd1306_WriteChar+0xfc>)
 8001ea6:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20011438 	.word	0x20011438

08001eb8 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	1d38      	adds	r0, r7, #4
 8001ec2:	e880 0006 	stmia.w	r0, {r1, r2}
 8001ec6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001ec8:	e012      	b.n	8001ef0 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	7818      	ldrb	r0, [r3, #0]
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	1d3a      	adds	r2, r7, #4
 8001ed2:	ca06      	ldmia	r2, {r1, r2}
 8001ed4:	f7ff ff70 	bl	8001db8 <ssd1306_WriteChar>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d002      	beq.n	8001eea <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	e008      	b.n	8001efc <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3301      	adds	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1e8      	bne.n	8001eca <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	781b      	ldrb	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <ssd1306_SetCursor>:

//
//  Set cursor_index position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	460a      	mov	r2, r1
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <ssd1306_SetCursor+0x2c>)
 8001f1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <ssd1306_SetCursor+0x2c>)
 8001f22:	805a      	strh	r2, [r3, #2]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	20011438 	.word	0x20011438

08001f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <HAL_MspInit+0x5c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a13      	ldr	r2, [pc, #76]	@ (8001f90 <HAL_MspInit+0x5c>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <HAL_MspInit+0x5c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_MspInit+0x5c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f90 <HAL_MspInit+0x5c>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_MspInit+0x5c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f72:	2007      	movs	r0, #7
 8001f74:	f001 fca6 	bl	80038c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	2051      	movs	r0, #81	@ 0x51
 8001f7e:	f001 fcac 	bl	80038da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001f82:	2051      	movs	r0, #81	@ 0x51
 8001f84:	f001 fcc5 	bl	8003912 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	@ 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 031c 	add.w	r3, r7, #28
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a4d      	ldr	r2, [pc, #308]	@ (80020e8 <HAL_ADC_MspInit+0x154>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	f040 8094 	bne.w	80020e0 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fc6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc8:	4b48      	ldr	r3, [pc, #288]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	4b44      	ldr	r3, [pc, #272]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fdc:	4a43      	ldr	r2, [pc, #268]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001fde:	f043 0304 	orr.w	r3, r3, #4
 8001fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe4:	4b41      	ldr	r3, [pc, #260]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	617b      	str	r3, [r7, #20]
 8001fee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002000:	4b3a      	ldr	r3, [pc, #232]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	4a35      	ldr	r2, [pc, #212]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	6313      	str	r3, [r2, #48]	@ 0x30
 800201c:	4b33      	ldr	r3, [pc, #204]	@ (80020ec <HAL_ADC_MspInit+0x158>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = FADER_IN5_Pin;
 8002028:	2301      	movs	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202c:	2303      	movs	r3, #3
 800202e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FADER_IN5_GPIO_Port, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	482d      	ldr	r0, [pc, #180]	@ (80020f0 <HAL_ADC_MspInit+0x15c>)
 800203c:	f002 f886 	bl	800414c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FADER_IN1_Pin|FADER_IN2_Pin;
 8002040:	23c0      	movs	r3, #192	@ 0xc0
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002044:	2303      	movs	r3, #3
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4828      	ldr	r0, [pc, #160]	@ (80020f4 <HAL_ADC_MspInit+0x160>)
 8002054:	f002 f87a 	bl	800414c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FADER_IN3_Pin|FADER_IN4_Pin;
 8002058:	2303      	movs	r3, #3
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205c:	2303      	movs	r3, #3
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4823      	ldr	r0, [pc, #140]	@ (80020f8 <HAL_ADC_MspInit+0x164>)
 800206c:	f002 f86e 	bl	800414c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002070:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 8002072:	4a23      	ldr	r2, [pc, #140]	@ (8002100 <HAL_ADC_MspInit+0x16c>)
 8002074:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002076:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002082:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 8002084:	2200      	movs	r2, #0
 8002086:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002088:	4b1c      	ldr	r3, [pc, #112]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 800208a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800208e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002090:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 8002092:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002096:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 800209a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800209e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020a0:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 80020a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020b4:	4811      	ldr	r0, [pc, #68]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 80020b6:	f001 fc47 	bl	8003948 <HAL_DMA_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80020c0:	f7ff fc8c 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 80020c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80020ca:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <HAL_ADC_MspInit+0x168>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2012      	movs	r0, #18
 80020d6:	f001 fc00 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80020da:	2012      	movs	r0, #18
 80020dc:	f001 fc19 	bl	8003912 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020e0:	bf00      	nop
 80020e2:	3730      	adds	r7, #48	@ 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40012000 	.word	0x40012000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40020800 	.word	0x40020800
 80020f4:	40020000 	.word	0x40020000
 80020f8:	40020400 	.word	0x40020400
 80020fc:	20000170 	.word	0x20000170
 8002100:	40026410 	.word	0x40026410

08002104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	@ 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <HAL_I2C_MspInit+0x84>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12b      	bne.n	800217e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b18      	ldr	r3, [pc, #96]	@ (800218c <HAL_I2C_MspInit+0x88>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a17      	ldr	r2, [pc, #92]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b15      	ldr	r3, [pc, #84]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002146:	2312      	movs	r3, #18
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214a:	2301      	movs	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002152:	2304      	movs	r3, #4
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <HAL_I2C_MspInit+0x8c>)
 800215e:	f001 fff5 	bl	800414c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b09      	ldr	r3, [pc, #36]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	4a08      	ldr	r2, [pc, #32]	@ (800218c <HAL_I2C_MspInit+0x88>)
 800216c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002170:	6413      	str	r3, [r2, #64]	@ 0x40
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_I2C_MspInit+0x88>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	@ 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40005400 	.word	0x40005400
 800218c:	40023800 	.word	0x40023800
 8002190:	40020400 	.word	0x40020400

08002194 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a70      	ldr	r2, [pc, #448]	@ (8002374 <HAL_SD_MspInit+0x1e0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	f040 80da 	bne.w	800236c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c0:	4a6d      	ldr	r2, [pc, #436]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	4b67      	ldr	r3, [pc, #412]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	4a66      	ldr	r2, [pc, #408]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021de:	f043 0304 	orr.w	r3, r3, #4
 80021e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e4:	4b64      	ldr	r3, [pc, #400]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	4b60      	ldr	r3, [pc, #384]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002200:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <HAL_SD_MspInit+0x1e4>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800220c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002216:	2301      	movs	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800221e:	230c      	movs	r3, #12
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4854      	ldr	r0, [pc, #336]	@ (800237c <HAL_SD_MspInit+0x1e8>)
 800222a:	f001 ff8f 	bl	800414c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800222e:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002240:	230c      	movs	r3, #12
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	484c      	ldr	r0, [pc, #304]	@ (800237c <HAL_SD_MspInit+0x1e8>)
 800224c:	f001 ff7e 	bl	800414c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002250:	2304      	movs	r3, #4
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002258:	2301      	movs	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002260:	230c      	movs	r3, #12
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4845      	ldr	r0, [pc, #276]	@ (8002380 <HAL_SD_MspInit+0x1ec>)
 800226c:	f001 ff6e 	bl	800414c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002270:	4b44      	ldr	r3, [pc, #272]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 8002272:	4a45      	ldr	r2, [pc, #276]	@ (8002388 <HAL_SD_MspInit+0x1f4>)
 8002274:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002276:	4b43      	ldr	r3, [pc, #268]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 8002278:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800227c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800227e:	4b41      	ldr	r3, [pc, #260]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002284:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800228a:	4b3e      	ldr	r3, [pc, #248]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 800228c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002290:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002292:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 8002294:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002298:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800229a:	4b3a      	ldr	r3, [pc, #232]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 800229c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022a0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80022a2:	4b38      	ldr	r3, [pc, #224]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022a4:	2220      	movs	r2, #32
 80022a6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022a8:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022ae:	4b35      	ldr	r3, [pc, #212]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022b0:	2204      	movs	r2, #4
 80022b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022b4:	4b33      	ldr	r3, [pc, #204]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80022ba:	4b32      	ldr	r3, [pc, #200]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80022c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80022c2:	4b30      	ldr	r3, [pc, #192]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022c4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80022c8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80022ca:	482e      	ldr	r0, [pc, #184]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022cc:	f001 fb3c 	bl	8003948 <HAL_DMA_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80022d6:	f7ff fb81 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a29      	ldr	r2, [pc, #164]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40
 80022e0:	4a28      	ldr	r2, [pc, #160]	@ (8002384 <HAL_SD_MspInit+0x1f0>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 80022e8:	4a29      	ldr	r2, [pc, #164]	@ (8002390 <HAL_SD_MspInit+0x1fc>)
 80022ea:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80022ec:	4b27      	ldr	r3, [pc, #156]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 80022ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022f2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022f4:	4b25      	ldr	r3, [pc, #148]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 80022f6:	2240      	movs	r2, #64	@ 0x40
 80022f8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022fa:	4b24      	ldr	r3, [pc, #144]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002302:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002306:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002308:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 800230a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800230e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002310:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002316:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002318:	4b1c      	ldr	r3, [pc, #112]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 800231a:	2220      	movs	r2, #32
 800231c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800231e:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002320:	2200      	movs	r2, #0
 8002322:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002326:	2204      	movs	r2, #4
 8002328:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800232a:	4b18      	ldr	r3, [pc, #96]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 800232c:	2203      	movs	r2, #3
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002332:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002338:	4b14      	ldr	r3, [pc, #80]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 800233a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002340:	4812      	ldr	r0, [pc, #72]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002342:	f001 fb01 	bl	8003948 <HAL_DMA_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800234c:	f7ff fb46 	bl	80019dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a0e      	ldr	r2, [pc, #56]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002354:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002356:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <HAL_SD_MspInit+0x1f8>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800235c:	2200      	movs	r2, #0
 800235e:	2100      	movs	r1, #0
 8002360:	2031      	movs	r0, #49	@ 0x31
 8002362:	f001 faba 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002366:	2031      	movs	r0, #49	@ 0x31
 8002368:	f001 fad3 	bl	8003912 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	@ 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40012c00 	.word	0x40012c00
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	200002a8 	.word	0x200002a8
 8002388:	40026458 	.word	0x40026458
 800238c:	20000308 	.word	0x20000308
 8002390:	400264a0 	.word	0x400264a0

08002394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002414 <HAL_TIM_Base_MspInit+0x80>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d116      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <HAL_TIM_Base_MspInit+0x84>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002418 <HAL_TIM_Base_MspInit+0x84>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b6:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <HAL_TIM_Base_MspInit+0x84>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	201d      	movs	r0, #29
 80023c8:	f001 fa87 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023cc:	201d      	movs	r0, #29
 80023ce:	f001 faa0 	bl	8003912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80023d2:	e01a      	b.n	800240a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a10      	ldr	r2, [pc, #64]	@ (800241c <HAL_TIM_Base_MspInit+0x88>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d115      	bne.n	800240a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_TIM_Base_MspInit+0x84>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002418 <HAL_TIM_Base_MspInit+0x84>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_TIM_Base_MspInit+0x84>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	2032      	movs	r0, #50	@ 0x32
 8002400:	f001 fa6b 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002404:	2032      	movs	r0, #50	@ 0x32
 8002406:	f001 fa84 	bl	8003912 <HAL_NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40000400 	.word	0x40000400
 8002418:	40023800 	.word	0x40023800
 800241c:	40000c00 	.word	0x40000c00

08002420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08a      	sub	sp, #40	@ 0x28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_UART_MspInit+0x94>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d133      	bne.n	80024aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <HAL_UART_MspInit+0x98>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a1b      	ldr	r2, [pc, #108]	@ (80024b8 <HAL_UART_MspInit+0x98>)
 800244c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_UART_MspInit+0x98>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <HAL_UART_MspInit+0x98>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a14      	ldr	r2, [pc, #80]	@ (80024b8 <HAL_UART_MspInit+0x98>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_UART_MspInit+0x98>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800247a:	230c      	movs	r3, #12
 800247c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800248a:	2307      	movs	r3, #7
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4809      	ldr	r0, [pc, #36]	@ (80024bc <HAL_UART_MspInit+0x9c>)
 8002496:	f001 fe59 	bl	800414c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2026      	movs	r0, #38	@ 0x26
 80024a0:	f001 fa1b 	bl	80038da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024a4:	2026      	movs	r0, #38	@ 0x26
 80024a6:	f001 fa34 	bl	8003912 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	@ 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40004400 	.word	0x40004400
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000

080024c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <NMI_Handler+0x4>

080024c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <MemManage_Handler+0x4>

080024d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002516:	f000 f9c5 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}

0800251e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_a_clk_in1_Pin);
 8002522:	2001      	movs	r0, #1
 8002524:	f001 ffc8 	bl	80044b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_switch_in3_Pin);
 8002530:	2010      	movs	r0, #16
 8002532:	f001 ffc1 	bl	80044b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002540:	4802      	ldr	r0, [pc, #8]	@ (800254c <ADC_IRQHandler+0x10>)
 8002542:	f000 fa36 	bl	80029b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000128 	.word	0x20000128

08002550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002554:	4802      	ldr	r0, [pc, #8]	@ (8002560 <TIM3_IRQHandler+0x10>)
 8002556:	f004 fe8e 	bl	8007276 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000368 	.word	0x20000368

08002564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002568:	4802      	ldr	r0, [pc, #8]	@ (8002574 <USART2_IRQHandler+0x10>)
 800256a:	f005 fa5b 	bl	8007a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200003f8 	.word	0x200003f8

08002578 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800257c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002580:	f001 ff9a 	bl	80044b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <SDIO_IRQHandler+0x10>)
 800258e:	f003 fd15 	bl	8005fbc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000224 	.word	0x20000224

0800259c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <TIM5_IRQHandler+0x10>)
 80025a2:	f004 fe68 	bl	8007276 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200003b0 	.word	0x200003b0

080025b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <DMA2_Stream0_IRQHandler+0x10>)
 80025b6:	f001 fb5f 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000170 	.word	0x20000170

080025c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <DMA2_Stream3_IRQHandler+0x10>)
 80025ca:	f001 fb55 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200002a8 	.word	0x200002a8

080025d8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <DMA2_Stream6_IRQHandler+0x10>)
 80025de:	f001 fb4b 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000308 	.word	0x20000308

080025ec <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  return 1;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <_kill>:

int _kill(int pid, int sig)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002614:	f009 fc92 	bl	800bf3c <__errno>
 8002618:	4603      	mov	r3, r0
 800261a:	2216      	movs	r2, #22
 800261c:	601a      	str	r2, [r3, #0]
  return -1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <_exit>:

void _exit (int status)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002632:	f04f 31ff 	mov.w	r1, #4294967295
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff ffe7 	bl	800260a <_kill>
  while (1) {}    /* Make sure we hang here */
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <_exit+0x12>

08002640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e00a      	b.n	8002668 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002652:	f3af 8000 	nop.w
 8002656:	4601      	mov	r1, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60ba      	str	r2, [r7, #8]
 800265e:	b2ca      	uxtb	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	dbf0      	blt.n	8002652 <_read+0x12>
  }

  return len;
 8002670:	687b      	ldr	r3, [r7, #4]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b086      	sub	sp, #24
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e009      	b.n	80026a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	60ba      	str	r2, [r7, #8]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	dbf1      	blt.n	800268c <_write+0x12>
  }
  return len;
 80026a8:	687b      	ldr	r3, [r7, #4]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <_close>:

int _close(int file)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026da:	605a      	str	r2, [r3, #4]
  return 0;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <_isatty>:

int _isatty(int file)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026f2:	2301      	movs	r3, #1
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002724:	4a14      	ldr	r2, [pc, #80]	@ (8002778 <_sbrk+0x5c>)
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <_sbrk+0x60>)
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002730:	4b13      	ldr	r3, [pc, #76]	@ (8002780 <_sbrk+0x64>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002738:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <_sbrk+0x64>)
 800273a:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <_sbrk+0x68>)
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273e:	4b10      	ldr	r3, [pc, #64]	@ (8002780 <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	429a      	cmp	r2, r3
 800274a:	d207      	bcs.n	800275c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800274c:	f009 fbf6 	bl	800bf3c <__errno>
 8002750:	4603      	mov	r3, r0
 8002752:	220c      	movs	r2, #12
 8002754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e009      	b.n	8002770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800275c:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <_sbrk+0x64>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002762:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <_sbrk+0x64>)
 800276c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276e:	68fb      	ldr	r3, [r7, #12]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20018000 	.word	0x20018000
 800277c:	00000400 	.word	0x00000400
 8002780:	20011440 	.word	0x20011440
 8002784:	200117d0 	.word	0x200117d0

08002788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <SystemInit+0x20>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <SystemInit+0x20>)
 8002794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027b0:	f7ff ffea 	bl	8002788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b4:	480c      	ldr	r0, [pc, #48]	@ (80027e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027b6:	490d      	ldr	r1, [pc, #52]	@ (80027ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027cc:	4c0a      	ldr	r4, [pc, #40]	@ (80027f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027da:	f009 fbb5 	bl	800bf48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027de:	f7fe fd53 	bl	8001288 <main>
  bx  lr    
 80027e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027f0:	0800dd04 	.word	0x0800dd04
  ldr r2, =_sbss
 80027f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027f8:	200117d0 	.word	0x200117d0

080027fc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <DMA1_Stream0_IRQHandler>
	...

08002800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a0d      	ldr	r2, [pc, #52]	@ (8002840 <HAL_Init+0x40>)
 800280a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800280e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <HAL_Init+0x40>)
 8002816:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800281a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a07      	ldr	r2, [pc, #28]	@ (8002840 <HAL_Init+0x40>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f001 f84b 	bl	80038c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800282e:	2000      	movs	r0, #0
 8002830:	f000 f808 	bl	8002844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002834:	f7ff fb7e 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023c00 	.word	0x40023c00

08002844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800284c:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_InitTick+0x54>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_InitTick+0x58>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285a:	fbb3 f3f1 	udiv	r3, r3, r1
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f863 	bl	800392e <HAL_SYSTICK_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e00e      	b.n	8002890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d80a      	bhi.n	800288e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f001 f82b 	bl	80038da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002884:	4a06      	ldr	r2, [pc, #24]	@ (80028a0 <HAL_InitTick+0x5c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	2000000c 	.word	0x2000000c
 800289c:	20000014 	.word	0x20000014
 80028a0:	20000010 	.word	0x20000010

080028a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <HAL_IncTick+0x20>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_IncTick+0x24>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a04      	ldr	r2, [pc, #16]	@ (80028c8 <HAL_IncTick+0x24>)
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000014 	.word	0x20000014
 80028c8:	20011444 	.word	0x20011444

080028cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;
 80028d0:	4b03      	ldr	r3, [pc, #12]	@ (80028e0 <HAL_GetTick+0x14>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20011444 	.word	0x20011444

080028e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff ffee 	bl	80028cc <HAL_GetTick>
 80028f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d005      	beq.n	800290a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_Delay+0x44>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800290a:	bf00      	nop
 800290c:	f7ff ffde 	bl	80028cc <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	429a      	cmp	r2, r3
 800291a:	d8f7      	bhi.n	800290c <HAL_Delay+0x28>
  {
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20000014 	.word	0x20000014

0800292c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e033      	b.n	80029aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff fb22 	bl	8001f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d118      	bne.n	800299c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002972:	f023 0302 	bic.w	r3, r3, #2
 8002976:	f043 0202 	orr.w	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fbb2 	bl	80030e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f023 0303 	bic.w	r3, r3, #3
 8002992:	f043 0201 	orr.w	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	@ 0x40
 800299a:	e001      	b.n	80029a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d049      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xca>
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d046      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12b      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d127      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d119      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0220 	bic.w	r2, r2, #32
 8002a46:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7fe f8a7 	bl	8000bc0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0212 	mvn.w	r2, #18
 8002a7a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d057      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x190>
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d054      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d139      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d12b      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d124      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d11d      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b0c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fc56 	bl	80033e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 020c 	mvn.w	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d017      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x1d6>
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d014      	beq.n	8002b88 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10d      	bne.n	8002b88 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f97f 	bl	8002e7c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0201 	mvn.w	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b96:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d015      	beq.n	8002bca <HAL_ADC_IRQHandler+0x218>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba8:	f043 0202 	orr.w	r2, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0220 	mvn.w	r2, #32
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f968 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0220 	mvn.w	r2, #32
 8002bc8:	601a      	str	r2, [r3, #0]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Start_DMA+0x1e>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e0ce      	b.n	8002d90 <HAL_ADC_Start_DMA+0x1bc>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d018      	beq.n	8002c3a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c18:	4b5f      	ldr	r3, [pc, #380]	@ (8002d98 <HAL_ADC_Start_DMA+0x1c4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a5f      	ldr	r2, [pc, #380]	@ (8002d9c <HAL_ADC_Start_DMA+0x1c8>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	0c9a      	lsrs	r2, r3, #18
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c48:	d107      	bne.n	8002c5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c58:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	f040 8086 	bne.w	8002d76 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	f023 0206 	bic.w	r2, r3, #6
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc6:	4b36      	ldr	r3, [pc, #216]	@ (8002da0 <HAL_ADC_Start_DMA+0x1cc>)
 8002cc8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	4a35      	ldr	r2, [pc, #212]	@ (8002da4 <HAL_ADC_Start_DMA+0x1d0>)
 8002cd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	4a34      	ldr	r2, [pc, #208]	@ (8002da8 <HAL_ADC_Start_DMA+0x1d4>)
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cde:	4a33      	ldr	r2, [pc, #204]	@ (8002dac <HAL_ADC_Start_DMA+0x1d8>)
 8002ce0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002cea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002cfa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d0a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	334c      	adds	r3, #76	@ 0x4c
 8002d16:	4619      	mov	r1, r3
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f000 fec2 	bl	8003aa4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d129      	bne.n	8002d8e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	e020      	b.n	8002d8e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <HAL_ADC_Start_DMA+0x1dc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d11b      	bne.n	8002d8e <HAL_ADC_Start_DMA+0x1ba>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d114      	bne.n	8002d8e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e00b      	b.n	8002d8e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3718      	adds	r7, #24
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000000c 	.word	0x2000000c
 8002d9c:	431bde83 	.word	0x431bde83
 8002da0:	40012300 	.word	0x40012300
 8002da4:	080032e1 	.word	0x080032e1
 8002da8:	0800339b 	.word	0x0800339b
 8002dac:	080033b7 	.word	0x080033b7
 8002db0:	40012000 	.word	0x40012000

08002db4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Stop_DMA+0x1a>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e048      	b.n	8002e60 <HAL_ADC_Stop_DMA+0xac>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d130      	bne.n	8002e56 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e02:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d10f      	bne.n	8002e32 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fe9c 	bl	8003b54 <HAL_DMA_Abort>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002e40:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e105      	b.n	80030cc <HAL_ADC_ConfigChannel+0x228>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b09      	cmp	r3, #9
 8002ece:	d925      	bls.n	8002f1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68d9      	ldr	r1, [r3, #12]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b1e      	subs	r3, #30
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43da      	mvns	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	4603      	mov	r3, r0
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4403      	add	r3, r0
 8002f0e:	3b1e      	subs	r3, #30
 8002f10:	409a      	lsls	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	e022      	b.n	8002f62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6919      	ldr	r1, [r3, #16]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	2207      	movs	r2, #7
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6919      	ldr	r1, [r3, #16]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4403      	add	r3, r0
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b06      	cmp	r3, #6
 8002f68:	d824      	bhi.n	8002fb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b05      	subs	r3, #5
 8002f7c:	221f      	movs	r2, #31
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	400a      	ands	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3b05      	subs	r3, #5
 8002fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fb2:	e04c      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d824      	bhi.n	8003006 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	3b23      	subs	r3, #35	@ 0x23
 8002fce:	221f      	movs	r2, #31
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	400a      	ands	r2, r1
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3b23      	subs	r3, #35	@ 0x23
 8002ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
 8003004:	e023      	b.n	800304e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b41      	subs	r3, #65	@ 0x41
 8003018:	221f      	movs	r2, #31
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b41      	subs	r3, #65	@ 0x41
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304e:	4b22      	ldr	r3, [pc, #136]	@ (80030d8 <HAL_ADC_ConfigChannel+0x234>)
 8003050:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a21      	ldr	r2, [pc, #132]	@ (80030dc <HAL_ADC_ConfigChannel+0x238>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d109      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1cc>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b12      	cmp	r3, #18
 8003062:	d105      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_ADC_ConfigChannel+0x238>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d123      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b10      	cmp	r3, #16
 8003080:	d003      	beq.n	800308a <HAL_ADC_ConfigChannel+0x1e6>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b11      	cmp	r3, #17
 8003088:	d11b      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b10      	cmp	r3, #16
 800309c:	d111      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800309e:	4b10      	ldr	r3, [pc, #64]	@ (80030e0 <HAL_ADC_ConfigChannel+0x23c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a10      	ldr	r2, [pc, #64]	@ (80030e4 <HAL_ADC_ConfigChannel+0x240>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	0c9a      	lsrs	r2, r3, #18
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030b4:	e002      	b.n	80030bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40012300 	.word	0x40012300
 80030dc:	40012000 	.word	0x40012000
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	431bde83 	.word	0x431bde83

080030e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f0:	4b79      	ldr	r3, [pc, #484]	@ (80032d8 <ADC_Init+0x1f0>)
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800311c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	021a      	lsls	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	4a58      	ldr	r2, [pc, #352]	@ (80032dc <ADC_Init+0x1f4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d022      	beq.n	80031c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800318e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6899      	ldr	r1, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	e00f      	b.n	80031e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0202 	bic.w	r2, r2, #2
 80031f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6899      	ldr	r1, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7e1b      	ldrb	r3, [r3, #24]
 8003200:	005a      	lsls	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01b      	beq.n	800324c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003222:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	3b01      	subs	r3, #1
 8003240:	035a      	lsls	r2, r3, #13
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	e007      	b.n	800325c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800325a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800326a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	3b01      	subs	r3, #1
 8003278:	051a      	lsls	r2, r3, #20
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800329e:	025a      	lsls	r2, r3, #9
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	029a      	lsls	r2, r3, #10
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40012300 	.word	0x40012300
 80032dc:	0f000001 	.word	0x0f000001

080032e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d13c      	bne.n	8003374 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d12b      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003318:	2b00      	cmp	r3, #0
 800331a:	d127      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003322:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003334:	2b00      	cmp	r3, #0
 8003336:	d119      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0220 	bic.w	r2, r2, #32
 8003346:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f7fd fc27 	bl	8000bc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003372:	e00e      	b.n	8003392 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fd85 	bl	8002e90 <HAL_ADC_ErrorCallback>
}
 8003386:	e004      	b.n	8003392 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	4798      	blx	r3
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f7ff fd5d 	bl	8002e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2240      	movs	r2, #64	@ 0x40
 80033c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fd5a 	bl	8002e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800340c:	2302      	movs	r3, #2
 800340e:	e17d      	b.n	800370c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b09      	cmp	r3, #9
 800341e:	d925      	bls.n	800346c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68d9      	ldr	r1, [r3, #12]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	3b1e      	subs	r3, #30
 8003436:	2207      	movs	r2, #7
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43da      	mvns	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	400a      	ands	r2, r1
 8003444:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68d9      	ldr	r1, [r3, #12]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b29b      	uxth	r3, r3
 8003456:	4618      	mov	r0, r3
 8003458:	4603      	mov	r3, r0
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4403      	add	r3, r0
 800345e:	3b1e      	subs	r3, #30
 8003460:	409a      	lsls	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	e022      	b.n	80034b2 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6919      	ldr	r1, [r3, #16]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	2207      	movs	r2, #7
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	400a      	ands	r2, r1
 800348e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6919      	ldr	r1, [r3, #16]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	4618      	mov	r0, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4403      	add	r3, r0
 80034a8:	409a      	lsls	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80034c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	051a      	lsls	r2, r3, #20
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3303      	adds	r3, #3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	221f      	movs	r2, #31
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43da      	mvns	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	400a      	ands	r2, r1
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3303      	adds	r3, #3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	fa00 f203 	lsl.w	r2, r0, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4a74      	ldr	r2, [pc, #464]	@ (8003718 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d022      	beq.n	8003590 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8003558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800357a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	e00f      	b.n	80035b0 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800359e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80035ae:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	7d5b      	ldrb	r3, [r3, #21]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	e007      	b.n	80035da <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d8:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	7d1b      	ldrb	r3, [r3, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	e007      	b.n	8003604 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003602:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d02e      	beq.n	800366a <HAL_ADCEx_InjectedConfigChannel+0x272>
 800360c:	2b03      	cmp	r3, #3
 800360e:	d840      	bhi.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8003610:	2b01      	cmp	r3, #1
 8003612:	d002      	beq.n	800361a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8003614:	2b02      	cmp	r3, #2
 8003616:	d014      	beq.n	8003642 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8003618:	e03b      	b.n	8003692 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003628:	f023 030f 	bic.w	r3, r3, #15
 800362c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6959      	ldr	r1, [r3, #20]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	615a      	str	r2, [r3, #20]
      break;
 8003640:	e03b      	b.n	80036ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003650:	f023 030f 	bic.w	r3, r3, #15
 8003654:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6999      	ldr	r1, [r3, #24]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	619a      	str	r2, [r3, #24]
      break;
 8003668:	e027      	b.n	80036ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003678:	f023 030f 	bic.w	r3, r3, #15
 800367c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69d9      	ldr	r1, [r3, #28]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	61da      	str	r2, [r3, #28]
      break;
 8003690:	e013      	b.n	80036ba <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80036a0:	f023 030f 	bic.w	r3, r3, #15
 80036a4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6a19      	ldr	r1, [r3, #32]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	621a      	str	r2, [r3, #32]
      break;
 80036b8:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ba:	4b18      	ldr	r3, [pc, #96]	@ (800371c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80036bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a17      	ldr	r2, [pc, #92]	@ (8003720 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d109      	bne.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b12      	cmp	r3, #18
 80036ce:	d105      	bne.n	80036dc <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003720 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10d      	bne.n	8003702 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d003      	beq.n	80036f6 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b11      	cmp	r3, #17
 80036f4:	d105      	bne.n	8003702 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	000f0001 	.word	0x000f0001
 800371c:	40012300 	.word	0x40012300
 8003720:	40012000 	.word	0x40012000

08003724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003740:	4013      	ands	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800374c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003756:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <__NVIC_SetPriorityGrouping+0x44>)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	60d3      	str	r3, [r2, #12]
}
 800375c:	bf00      	nop
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003770:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <__NVIC_GetPriorityGrouping+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	f003 0307 	and.w	r3, r3, #7
}
 800377a:	4618      	mov	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	2b00      	cmp	r3, #0
 8003798:	db0b      	blt.n	80037b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379a:	79fb      	ldrb	r3, [r7, #7]
 800379c:	f003 021f 	and.w	r2, r3, #31
 80037a0:	4907      	ldr	r1, [pc, #28]	@ (80037c0 <__NVIC_EnableIRQ+0x38>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	2001      	movs	r0, #1
 80037aa:	fa00 f202 	lsl.w	r2, r0, r2
 80037ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000e100 	.word	0xe000e100

080037c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0a      	blt.n	80037ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	@ (8003810 <__NVIC_SetPriority+0x4c>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ec:	e00a      	b.n	8003804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4908      	ldr	r1, [pc, #32]	@ (8003814 <__NVIC_SetPriority+0x50>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3b04      	subs	r3, #4
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	440b      	add	r3, r1
 8003802:	761a      	strb	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003818:	b480      	push	{r7}
 800381a:	b089      	sub	sp, #36	@ 0x24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	f1c3 0307 	rsb	r3, r3, #7
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf28      	it	cs
 8003836:	2304      	movcs	r3, #4
 8003838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3304      	adds	r3, #4
 800383e:	2b06      	cmp	r3, #6
 8003840:	d902      	bls.n	8003848 <NVIC_EncodePriority+0x30>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3b03      	subs	r3, #3
 8003846:	e000      	b.n	800384a <NVIC_EncodePriority+0x32>
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43da      	mvns	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	401a      	ands	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003860:	f04f 31ff 	mov.w	r1, #4294967295
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43d9      	mvns	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003870:	4313      	orrs	r3, r2
         );
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	@ 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3b01      	subs	r3, #1
 800388c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003890:	d301      	bcc.n	8003896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003892:	2301      	movs	r3, #1
 8003894:	e00f      	b.n	80038b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003896:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <SysTick_Config+0x40>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389e:	210f      	movs	r1, #15
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	f7ff ff8e 	bl	80037c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <SysTick_Config+0x40>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <SysTick_Config+0x40>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010

080038c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff29 	bl	8003724 <__NVIC_SetPriorityGrouping>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	4603      	mov	r3, r0
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ec:	f7ff ff3e 	bl	800376c <__NVIC_GetPriorityGrouping>
 80038f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68b9      	ldr	r1, [r7, #8]
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7ff ff8e 	bl	8003818 <NVIC_EncodePriority>
 80038fc:	4602      	mov	r2, r0
 80038fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff5d 	bl	80037c4 <__NVIC_SetPriority>
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff31 	bl	8003788 <__NVIC_EnableIRQ>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ffa2 	bl	8003880 <SysTick_Config>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7fe ffba 	bl	80028cc <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e099      	b.n	8003a98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003984:	e00f      	b.n	80039a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003986:	f7fe ffa1 	bl	80028cc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b05      	cmp	r3, #5
 8003992:	d908      	bls.n	80039a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2203      	movs	r2, #3
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e078      	b.n	8003a98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e8      	bne.n	8003986 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4b38      	ldr	r3, [pc, #224]	@ (8003aa0 <HAL_DMA_Init+0x158>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d107      	bne.n	8003a10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 0307 	bic.w	r3, r3, #7
 8003a26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d117      	bne.n	8003a6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fb01 	bl	8004054 <DMA_CheckFifoParam>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2240      	movs	r2, #64	@ 0x40
 8003a5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a66:	2301      	movs	r3, #1
 8003a68:	e016      	b.n	8003a98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fab8 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a80:	223f      	movs	r2, #63	@ 0x3f
 8003a82:	409a      	lsls	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	f010803f 	.word	0xf010803f

08003aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_DMA_Start_IT+0x26>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e040      	b.n	8003b4c <HAL_DMA_Start_IT+0xa8>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d12f      	bne.n	8003b3e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fa4a 	bl	8003f8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	223f      	movs	r2, #63	@ 0x3f
 8003afe:	409a      	lsls	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0216 	orr.w	r2, r2, #22
 8003b12:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0208 	orr.w	r2, r2, #8
 8003b2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	e005      	b.n	8003b4a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
 8003b48:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b62:	f7fe feb3 	bl	80028cc <HAL_GetTick>
 8003b66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d008      	beq.n	8003b86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2280      	movs	r2, #128	@ 0x80
 8003b78:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e052      	b.n	8003c2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0216 	bic.w	r2, r2, #22
 8003b94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ba4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <HAL_DMA_Abort+0x62>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0208 	bic.w	r2, r2, #8
 8003bc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd6:	e013      	b.n	8003c00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd8:	f7fe fe78 	bl	80028cc <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d90c      	bls.n	8003c00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e015      	b.n	8003c2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1e4      	bne.n	8003bd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c12:	223f      	movs	r2, #63	@ 0x3f
 8003c14:	409a      	lsls	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	@ 0x80
 8003c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00c      	b.n	8003c6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2205      	movs	r2, #5
 8003c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c84:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec0 <HAL_DMA_IRQHandler+0x248>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a8e      	ldr	r2, [pc, #568]	@ (8003ec4 <HAL_DMA_IRQHandler+0x24c>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01a      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0204 	bic.w	r2, r2, #4
 8003cca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	2201      	movs	r2, #1
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	f043 0202 	orr.w	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	2204      	movs	r2, #4
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	2210      	movs	r2, #16
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d043      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03c      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	2210      	movs	r2, #16
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d024      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
 8003da6:	e01f      	b.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
 8003db8:	e016      	b.n	8003de8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0208 	bic.w	r2, r2, #8
 8003dd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	2220      	movs	r2, #32
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 808f 	beq.w	8003f18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8087 	beq.w	8003f18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0e:	2220      	movs	r2, #32
 8003e10:	409a      	lsls	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d136      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0216 	bic.w	r2, r2, #22
 8003e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x1da>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	223f      	movs	r2, #63	@ 0x3f
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d07e      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
        }
        return;
 8003e8e:	e079      	b.n	8003f84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d031      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e02c      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
 8003ebe:	bf00      	nop
 8003ec0:	2000000c 	.word	0x2000000c
 8003ec4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d023      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
 8003ed8:	e01e      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0210 	bic.w	r2, r2, #16
 8003ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d032      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2205      	movs	r2, #5
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3301      	adds	r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d307      	bcc.n	8003f60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f2      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x2cc>
 8003f5e:	e000      	b.n	8003f62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e000      	b.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f84:	bf00      	nop
    }
  }
}
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b40      	cmp	r3, #64	@ 0x40
 8003fb8:	d108      	bne.n	8003fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fca:	e007      	b.n	8003fdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3b10      	subs	r3, #16
 8003ff8:	4a14      	ldr	r2, [pc, #80]	@ (800404c <DMA_CalcBaseAndBitshift+0x64>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <DMA_CalcBaseAndBitshift+0x68>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d909      	bls.n	800402a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	659a      	str	r2, [r3, #88]	@ 0x58
 8004028:	e007      	b.n	800403a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	aaaaaaab 	.word	0xaaaaaaab
 8004050:	0800d7b8 	.word	0x0800d7b8

08004054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11f      	bne.n	80040ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d856      	bhi.n	8004122 <DMA_CheckFifoParam+0xce>
 8004074:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <DMA_CheckFifoParam+0x28>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800409f 	.word	0x0800409f
 8004084:	0800408d 	.word	0x0800408d
 8004088:	08004123 	.word	0x08004123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d046      	beq.n	8004126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409c:	e043      	b.n	8004126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040a6:	d140      	bne.n	800412a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e03d      	b.n	800412a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b6:	d121      	bne.n	80040fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d837      	bhi.n	800412e <DMA_CheckFifoParam+0xda>
 80040be:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <DMA_CheckFifoParam+0x70>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040db 	.word	0x080040db
 80040cc:	080040d5 	.word	0x080040d5
 80040d0:	080040ed 	.word	0x080040ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e030      	b.n	800413c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d025      	beq.n	8004132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e022      	b.n	8004132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f4:	d11f      	bne.n	8004136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040fa:	e01c      	b.n	8004136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d903      	bls.n	800410a <DMA_CheckFifoParam+0xb6>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d003      	beq.n	8004110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004108:	e018      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      break;
 800410e:	e015      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e00b      	b.n	800413a <DMA_CheckFifoParam+0xe6>
      break;
 8004122:	bf00      	nop
 8004124:	e00a      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e008      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e006      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;   
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
    }
  } 
  
  return status; 
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop

0800414c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	@ 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e159      	b.n	800441c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004168:	2201      	movs	r2, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	f040 8148 	bne.w	8004416 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d005      	beq.n	800419e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419a:	2b02      	cmp	r3, #2
 800419c:	d130      	bne.n	8004200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 0201 	and.w	r2, r3, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b03      	cmp	r3, #3
 800420a:	d017      	beq.n	800423c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d123      	bne.n	8004290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	220f      	movs	r2, #15
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	08da      	lsrs	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0203 	and.w	r2, r3, #3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a2 	beq.w	8004416 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b57      	ldr	r3, [pc, #348]	@ (8004434 <HAL_GPIO_Init+0x2e8>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	4a56      	ldr	r2, [pc, #344]	@ (8004434 <HAL_GPIO_Init+0x2e8>)
 80042dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042e2:	4b54      	ldr	r3, [pc, #336]	@ (8004434 <HAL_GPIO_Init+0x2e8>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ee:	4a52      	ldr	r2, [pc, #328]	@ (8004438 <HAL_GPIO_Init+0x2ec>)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	3302      	adds	r3, #2
 80042f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	220f      	movs	r2, #15
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a49      	ldr	r2, [pc, #292]	@ (800443c <HAL_GPIO_Init+0x2f0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d019      	beq.n	800434e <HAL_GPIO_Init+0x202>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a48      	ldr	r2, [pc, #288]	@ (8004440 <HAL_GPIO_Init+0x2f4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_GPIO_Init+0x1fe>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a47      	ldr	r2, [pc, #284]	@ (8004444 <HAL_GPIO_Init+0x2f8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00d      	beq.n	8004346 <HAL_GPIO_Init+0x1fa>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a46      	ldr	r2, [pc, #280]	@ (8004448 <HAL_GPIO_Init+0x2fc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <HAL_GPIO_Init+0x1f6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a45      	ldr	r2, [pc, #276]	@ (800444c <HAL_GPIO_Init+0x300>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_GPIO_Init+0x1f2>
 800433a:	2304      	movs	r3, #4
 800433c:	e008      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800433e:	2307      	movs	r3, #7
 8004340:	e006      	b.n	8004350 <HAL_GPIO_Init+0x204>
 8004342:	2303      	movs	r3, #3
 8004344:	e004      	b.n	8004350 <HAL_GPIO_Init+0x204>
 8004346:	2302      	movs	r3, #2
 8004348:	e002      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800434e:	2300      	movs	r3, #0
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	f002 0203 	and.w	r2, r2, #3
 8004356:	0092      	lsls	r2, r2, #2
 8004358:	4093      	lsls	r3, r2
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004360:	4935      	ldr	r1, [pc, #212]	@ (8004438 <HAL_GPIO_Init+0x2ec>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	3302      	adds	r3, #2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436e:	4b38      	ldr	r3, [pc, #224]	@ (8004450 <HAL_GPIO_Init+0x304>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004392:	4a2f      	ldr	r2, [pc, #188]	@ (8004450 <HAL_GPIO_Init+0x304>)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004398:	4b2d      	ldr	r3, [pc, #180]	@ (8004450 <HAL_GPIO_Init+0x304>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043bc:	4a24      	ldr	r2, [pc, #144]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043c2:	4b23      	ldr	r3, [pc, #140]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ec:	4b18      	ldr	r3, [pc, #96]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004410:	4a0f      	ldr	r2, [pc, #60]	@ (8004450 <HAL_GPIO_Init+0x304>)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3301      	adds	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b0f      	cmp	r3, #15
 8004420:	f67f aea2 	bls.w	8004168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3724      	adds	r7, #36	@ 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	40013800 	.word	0x40013800
 800443c:	40020000 	.word	0x40020000
 8004440:	40020400 	.word	0x40020400
 8004444:	40020800 	.word	0x40020800
 8004448:	40020c00 	.word	0x40020c00
 800444c:	40021000 	.word	0x40021000
 8004450:	40013c00 	.word	0x40013c00

08004454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	887b      	ldrh	r3, [r7, #2]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
 8004470:	e001      	b.n	8004476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
 8004490:	4613      	mov	r3, r2
 8004492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004494:	787b      	ldrb	r3, [r7, #1]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a0:	e003      	b.n	80044aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	041a      	lsls	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044c2:	4b08      	ldr	r3, [pc, #32]	@ (80044e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d006      	beq.n	80044dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ce:	4a05      	ldr	r2, [pc, #20]	@ (80044e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fade 	bl	8000a98 <HAL_GPIO_EXTI_Callback>
  }
}
 80044dc:	bf00      	nop
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40013c00 	.word	0x40013c00

080044e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e12b      	b.n	8004752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fd fdf8 	bl	8002104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	@ 0x24
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800453a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800454a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800454c:	f001 f8ea 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a81      	ldr	r2, [pc, #516]	@ (800475c <HAL_I2C_Init+0x274>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d807      	bhi.n	800456c <HAL_I2C_Init+0x84>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a80      	ldr	r2, [pc, #512]	@ (8004760 <HAL_I2C_Init+0x278>)
 8004560:	4293      	cmp	r3, r2
 8004562:	bf94      	ite	ls
 8004564:	2301      	movls	r3, #1
 8004566:	2300      	movhi	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e006      	b.n	800457a <HAL_I2C_Init+0x92>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a7d      	ldr	r2, [pc, #500]	@ (8004764 <HAL_I2C_Init+0x27c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0e7      	b.n	8004752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a78      	ldr	r2, [pc, #480]	@ (8004768 <HAL_I2C_Init+0x280>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a6a      	ldr	r2, [pc, #424]	@ (800475c <HAL_I2C_Init+0x274>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d802      	bhi.n	80045bc <HAL_I2C_Init+0xd4>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	e009      	b.n	80045d0 <HAL_I2C_Init+0xe8>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	4a69      	ldr	r2, [pc, #420]	@ (800476c <HAL_I2C_Init+0x284>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	3301      	adds	r3, #1
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	495c      	ldr	r1, [pc, #368]	@ (800475c <HAL_I2C_Init+0x274>)
 80045ec:	428b      	cmp	r3, r1
 80045ee:	d819      	bhi.n	8004624 <HAL_I2C_Init+0x13c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e59      	subs	r1, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80045fe:	1c59      	adds	r1, r3, #1
 8004600:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004604:	400b      	ands	r3, r1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_I2C_Init+0x138>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e59      	subs	r1, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fbb1 f3f3 	udiv	r3, r1, r3
 8004618:	3301      	adds	r3, #1
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	e051      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 8004620:	2304      	movs	r3, #4
 8004622:	e04f      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d111      	bne.n	8004650 <HAL_I2C_Init+0x168>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1e58      	subs	r0, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	440b      	add	r3, r1
 800463a:	fbb0 f3f3 	udiv	r3, r0, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e012      	b.n	8004676 <HAL_I2C_Init+0x18e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1e58      	subs	r0, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	0099      	lsls	r1, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	fbb0 f3f3 	udiv	r3, r0, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Init+0x196>
 800467a:	2301      	movs	r3, #1
 800467c:	e022      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10e      	bne.n	80046a4 <HAL_I2C_Init+0x1bc>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1e58      	subs	r0, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	440b      	add	r3, r1
 8004694:	fbb0 f3f3 	udiv	r3, r0, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046a2:	e00f      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1e58      	subs	r0, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	0099      	lsls	r1, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	6809      	ldr	r1, [r1, #0]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6911      	ldr	r1, [r2, #16]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68d2      	ldr	r2, [r2, #12]
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	430b      	orrs	r3, r1
 8004706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	000186a0 	.word	0x000186a0
 8004760:	001e847f 	.word	0x001e847f
 8004764:	003d08ff 	.word	0x003d08ff
 8004768:	431bde83 	.word	0x431bde83
 800476c:	10624dd3 	.word	0x10624dd3

08004770 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	4608      	mov	r0, r1
 800477a:	4611      	mov	r1, r2
 800477c:	461a      	mov	r2, r3
 800477e:	4603      	mov	r3, r0
 8004780:	817b      	strh	r3, [r7, #10]
 8004782:	460b      	mov	r3, r1
 8004784:	813b      	strh	r3, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800478a:	f7fe f89f 	bl	80028cc <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b20      	cmp	r3, #32
 800479a:	f040 80d9 	bne.w	8004950 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	2319      	movs	r3, #25
 80047a4:	2201      	movs	r2, #1
 80047a6:	496d      	ldr	r1, [pc, #436]	@ (800495c <HAL_I2C_Mem_Write+0x1ec>)
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f971 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047b4:	2302      	movs	r3, #2
 80047b6:	e0cc      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_I2C_Mem_Write+0x56>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0c5      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d007      	beq.n	80047ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2221      	movs	r2, #33	@ 0x21
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2240      	movs	r2, #64	@ 0x40
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800481c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a4d      	ldr	r2, [pc, #308]	@ (8004960 <HAL_I2C_Mem_Write+0x1f0>)
 800482c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800482e:	88f8      	ldrh	r0, [r7, #6]
 8004830:	893a      	ldrh	r2, [r7, #8]
 8004832:	8979      	ldrh	r1, [r7, #10]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	9301      	str	r3, [sp, #4]
 8004838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	4603      	mov	r3, r0
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f890 	bl	8004964 <I2C_RequestMemoryWrite>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d052      	beq.n	80048f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e081      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 fa36 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00d      	beq.n	800487a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	2b04      	cmp	r3, #4
 8004864:	d107      	bne.n	8004876 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004874:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e06b      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	781a      	ldrb	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b04      	cmp	r3, #4
 80048b6:	d11b      	bne.n	80048f0 <HAL_I2C_Mem_Write+0x180>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d017      	beq.n	80048f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c4:	781a      	ldrb	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1aa      	bne.n	800484e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fa29 	bl	8004d54 <I2C_WaitOnBTFFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00d      	beq.n	8004924 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	2b04      	cmp	r3, #4
 800490e:	d107      	bne.n	8004920 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800491e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e016      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004932:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004950:	2302      	movs	r3, #2
  }
}
 8004952:	4618      	mov	r0, r3
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	00100002 	.word	0x00100002
 8004960:	ffff0000 	.word	0xffff0000

08004964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	4603      	mov	r3, r0
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	460b      	mov	r3, r1
 8004978:	813b      	strh	r3, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800498c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	2200      	movs	r2, #0
 8004996:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 f878 	bl	8004a90 <I2C_WaitOnFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00d      	beq.n	80049c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b4:	d103      	bne.n	80049be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e05f      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049c2:	897b      	ldrh	r3, [r7, #10]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	492d      	ldr	r1, [pc, #180]	@ (8004a8c <I2C_RequestMemoryWrite+0x128>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f8d3 	bl	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e04c      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a00:	6a39      	ldr	r1, [r7, #32]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f95e 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00d      	beq.n	8004a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d107      	bne.n	8004a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e02b      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d105      	bne.n	8004a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a30:	893b      	ldrh	r3, [r7, #8]
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	611a      	str	r2, [r3, #16]
 8004a3a:	e021      	b.n	8004a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a3c:	893b      	ldrh	r3, [r7, #8]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4c:	6a39      	ldr	r1, [r7, #32]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f938 	bl	8004cc4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d107      	bne.n	8004a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e005      	b.n	8004a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a76:	893b      	ldrh	r3, [r7, #8]
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	00010002 	.word	0x00010002

08004a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa0:	e048      	b.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d044      	beq.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fd ff0f 	bl	80028cc <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d139      	bne.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	0c1b      	lsrs	r3, r3, #16
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d10d      	bne.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	43da      	mvns	r2, r3
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	e00c      	b.n	8004b00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	43da      	mvns	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	4013      	ands	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	461a      	mov	r2, r3
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d116      	bne.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e023      	b.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d10d      	bne.n	8004b5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	43da      	mvns	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	e00c      	b.n	8004b74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	43da      	mvns	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4013      	ands	r3, r2
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d093      	beq.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b92:	e071      	b.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba2:	d123      	bne.n	8004bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f043 0204 	orr.w	r2, r3, #4
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e067      	b.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d041      	beq.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fd fe6a 	bl	80028cc <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d136      	bne.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10c      	bne.n	8004c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	43da      	mvns	r2, r3
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bf14      	ite	ne
 8004c26:	2301      	movne	r3, #1
 8004c28:	2300      	moveq	r3, #0
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e00b      	b.n	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d016      	beq.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e021      	b.n	8004cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10c      	bne.n	8004c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	43da      	mvns	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e00b      	b.n	8004cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	bf14      	ite	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	2300      	moveq	r3, #0
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f47f af6d 	bne.w	8004b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cd0:	e034      	b.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f886 	bl	8004de4 <I2C_IsAcknowledgeFailed>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e034      	b.n	8004d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d028      	beq.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fd fdef 	bl	80028cc <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11d      	bne.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0a:	2b80      	cmp	r3, #128	@ 0x80
 8004d0c:	d016      	beq.n	8004d3c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	f043 0220 	orr.w	r2, r3, #32
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e007      	b.n	8004d4c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b80      	cmp	r3, #128	@ 0x80
 8004d48:	d1c3      	bne.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d60:	e034      	b.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 f83e 	bl	8004de4 <I2C_IsAcknowledgeFailed>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e034      	b.n	8004ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d028      	beq.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fd fda7 	bl	80028cc <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d11d      	bne.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d016      	beq.n	8004dcc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	f043 0220 	orr.w	r2, r3, #32
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e007      	b.n	8004ddc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d1c3      	bne.n	8004d62 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfa:	d11b      	bne.n	8004e34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	f043 0204 	orr.w	r2, r3, #4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e267      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d075      	beq.n	8004f4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e62:	4b88      	ldr	r3, [pc, #544]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d00c      	beq.n	8004e88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e6e:	4b85      	ldr	r3, [pc, #532]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	d112      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7a:	4b82      	ldr	r3, [pc, #520]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e86:	d10b      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e88:	4b7e      	ldr	r3, [pc, #504]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d05b      	beq.n	8004f4c <HAL_RCC_OscConfig+0x108>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d157      	bne.n	8004f4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e242      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea8:	d106      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x74>
 8004eaa:	4b76      	ldr	r3, [pc, #472]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a75      	ldr	r2, [pc, #468]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e01d      	b.n	8004ef4 <HAL_RCC_OscConfig+0xb0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ec0:	d10c      	bne.n	8004edc <HAL_RCC_OscConfig+0x98>
 8004ec2:	4b70      	ldr	r3, [pc, #448]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a6f      	ldr	r2, [pc, #444]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	4b6d      	ldr	r3, [pc, #436]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6c      	ldr	r2, [pc, #432]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e00b      	b.n	8004ef4 <HAL_RCC_OscConfig+0xb0>
 8004edc:	4b69      	ldr	r3, [pc, #420]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a68      	ldr	r2, [pc, #416]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b66      	ldr	r3, [pc, #408]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a65      	ldr	r2, [pc, #404]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d013      	beq.n	8004f24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fd fce6 	bl	80028cc <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f04:	f7fd fce2 	bl	80028cc <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	@ 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e207      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	4b5b      	ldr	r3, [pc, #364]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0xc0>
 8004f22:	e014      	b.n	8004f4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fd fcd2 	bl	80028cc <HAL_GetTick>
 8004f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7fd fcce 	bl	80028cc <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	@ 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e1f3      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3e:	4b51      	ldr	r3, [pc, #324]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0xe8>
 8004f4a:	e000      	b.n	8004f4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d063      	beq.n	8005022 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f66:	4b47      	ldr	r3, [pc, #284]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d11c      	bne.n	8004fac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f72:	4b44      	ldr	r3, [pc, #272]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d116      	bne.n	8004fac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7e:	4b41      	ldr	r3, [pc, #260]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_RCC_OscConfig+0x152>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e1c7      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f96:	4b3b      	ldr	r3, [pc, #236]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4937      	ldr	r1, [pc, #220]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004faa:	e03a      	b.n	8005022 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d020      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb4:	4b34      	ldr	r3, [pc, #208]	@ (8005088 <HAL_RCC_OscConfig+0x244>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fba:	f7fd fc87 	bl	80028cc <HAL_GetTick>
 8004fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc2:	f7fd fc83 	bl	80028cc <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e1a8      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe0:	4b28      	ldr	r3, [pc, #160]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4925      	ldr	r1, [pc, #148]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	600b      	str	r3, [r1, #0]
 8004ff4:	e015      	b.n	8005022 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff6:	4b24      	ldr	r3, [pc, #144]	@ (8005088 <HAL_RCC_OscConfig+0x244>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fd fc66 	bl	80028cc <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005004:	f7fd fc62 	bl	80028cc <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e187      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005016:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f0      	bne.n	8005004 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d036      	beq.n	800509c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005036:	4b15      	ldr	r3, [pc, #84]	@ (800508c <HAL_RCC_OscConfig+0x248>)
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503c:	f7fd fc46 	bl	80028cc <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005044:	f7fd fc42 	bl	80028cc <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e167      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005056:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <HAL_RCC_OscConfig+0x240>)
 8005058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x200>
 8005062:	e01b      	b.n	800509c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005064:	4b09      	ldr	r3, [pc, #36]	@ (800508c <HAL_RCC_OscConfig+0x248>)
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506a:	f7fd fc2f 	bl	80028cc <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005070:	e00e      	b.n	8005090 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005072:	f7fd fc2b 	bl	80028cc <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d907      	bls.n	8005090 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e150      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
 8005084:	40023800 	.word	0x40023800
 8005088:	42470000 	.word	0x42470000
 800508c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005090:	4b88      	ldr	r3, [pc, #544]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005092:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1ea      	bne.n	8005072 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8097 	beq.w	80051d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ae:	4b81      	ldr	r3, [pc, #516]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]
 80050be:	4b7d      	ldr	r3, [pc, #500]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	4a7c      	ldr	r2, [pc, #496]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80050c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ca:	4b7a      	ldr	r3, [pc, #488]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050da:	4b77      	ldr	r3, [pc, #476]	@ (80052b8 <HAL_RCC_OscConfig+0x474>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d118      	bne.n	8005118 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e6:	4b74      	ldr	r3, [pc, #464]	@ (80052b8 <HAL_RCC_OscConfig+0x474>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a73      	ldr	r2, [pc, #460]	@ (80052b8 <HAL_RCC_OscConfig+0x474>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f2:	f7fd fbeb 	bl	80028cc <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fa:	f7fd fbe7 	bl	80028cc <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e10c      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510c:	4b6a      	ldr	r3, [pc, #424]	@ (80052b8 <HAL_RCC_OscConfig+0x474>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d106      	bne.n	800512e <HAL_RCC_OscConfig+0x2ea>
 8005120:	4b64      	ldr	r3, [pc, #400]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005124:	4a63      	ldr	r2, [pc, #396]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	@ 0x70
 800512c:	e01c      	b.n	8005168 <HAL_RCC_OscConfig+0x324>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b05      	cmp	r3, #5
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x30c>
 8005136:	4b5f      	ldr	r3, [pc, #380]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513a:	4a5e      	ldr	r2, [pc, #376]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 800513c:	f043 0304 	orr.w	r3, r3, #4
 8005140:	6713      	str	r3, [r2, #112]	@ 0x70
 8005142:	4b5c      	ldr	r3, [pc, #368]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005146:	4a5b      	ldr	r2, [pc, #364]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	6713      	str	r3, [r2, #112]	@ 0x70
 800514e:	e00b      	b.n	8005168 <HAL_RCC_OscConfig+0x324>
 8005150:	4b58      	ldr	r3, [pc, #352]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005154:	4a57      	ldr	r2, [pc, #348]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	6713      	str	r3, [r2, #112]	@ 0x70
 800515c:	4b55      	ldr	r3, [pc, #340]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005160:	4a54      	ldr	r2, [pc, #336]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005162:	f023 0304 	bic.w	r3, r3, #4
 8005166:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7fd fbac 	bl	80028cc <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005176:	e00a      	b.n	800518e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005178:	f7fd fba8 	bl	80028cc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e0cb      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518e:	4b49      	ldr	r3, [pc, #292]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0ee      	beq.n	8005178 <HAL_RCC_OscConfig+0x334>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800519c:	f7fd fb96 	bl	80028cc <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a4:	f7fd fb92 	bl	80028cc <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e0b5      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ba:	4b3e      	ldr	r3, [pc, #248]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ee      	bne.n	80051a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d105      	bne.n	80051d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051cc:	4b39      	ldr	r3, [pc, #228]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80051ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d0:	4a38      	ldr	r2, [pc, #224]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80051d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80a1 	beq.w	8005324 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051e2:	4b34      	ldr	r3, [pc, #208]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d05c      	beq.n	80052a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d141      	bne.n	800527a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f6:	4b31      	ldr	r3, [pc, #196]	@ (80052bc <HAL_RCC_OscConfig+0x478>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051fc:	f7fd fb66 	bl	80028cc <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005204:	f7fd fb62 	bl	80028cc <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e087      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005216:	4b27      	ldr	r3, [pc, #156]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f0      	bne.n	8005204 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	019b      	lsls	r3, r3, #6
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	3b01      	subs	r3, #1
 800523c:	041b      	lsls	r3, r3, #16
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005244:	061b      	lsls	r3, r3, #24
 8005246:	491b      	ldr	r1, [pc, #108]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800524c:	4b1b      	ldr	r3, [pc, #108]	@ (80052bc <HAL_RCC_OscConfig+0x478>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fd fb3b 	bl	80028cc <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525a:	f7fd fb37 	bl	80028cc <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e05c      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526c:	4b11      	ldr	r3, [pc, #68]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x416>
 8005278:	e054      	b.n	8005324 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527a:	4b10      	ldr	r3, [pc, #64]	@ (80052bc <HAL_RCC_OscConfig+0x478>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005280:	f7fd fb24 	bl	80028cc <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005288:	f7fd fb20 	bl	80028cc <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e045      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529a:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <HAL_RCC_OscConfig+0x470>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x444>
 80052a6:	e03d      	b.n	8005324 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d107      	bne.n	80052c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e038      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
 80052b4:	40023800 	.word	0x40023800
 80052b8:	40007000 	.word	0x40007000
 80052bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <HAL_RCC_OscConfig+0x4ec>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d028      	beq.n	8005320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d121      	bne.n	8005320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d11a      	bne.n	8005320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052f0:	4013      	ands	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d111      	bne.n	8005320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	3b01      	subs	r3, #1
 800530a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800530c:	429a      	cmp	r2, r3
 800530e:	d107      	bne.n	8005320 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d001      	beq.n	8005324 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40023800 	.word	0x40023800

08005334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0cc      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005348:	4b68      	ldr	r3, [pc, #416]	@ (80054ec <HAL_RCC_ClockConfig+0x1b8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d90c      	bls.n	8005370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b65      	ldr	r3, [pc, #404]	@ (80054ec <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535e:	4b63      	ldr	r3, [pc, #396]	@ (80054ec <HAL_RCC_ClockConfig+0x1b8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0b8      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d020      	beq.n	80053be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005388:	4b59      	ldr	r3, [pc, #356]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a58      	ldr	r2, [pc, #352]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a0:	4b53      	ldr	r3, [pc, #332]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4a52      	ldr	r2, [pc, #328]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ac:	4b50      	ldr	r3, [pc, #320]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	494d      	ldr	r1, [pc, #308]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d044      	beq.n	8005454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d107      	bne.n	80053e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d2:	4b47      	ldr	r3, [pc, #284]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d119      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e07f      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d003      	beq.n	80053f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f2:	4b3f      	ldr	r3, [pc, #252]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e06f      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005402:	4b3b      	ldr	r3, [pc, #236]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e067      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005412:	4b37      	ldr	r3, [pc, #220]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f023 0203 	bic.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4934      	ldr	r1, [pc, #208]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005424:	f7fd fa52 	bl	80028cc <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	e00a      	b.n	8005442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800542c:	f7fd fa4e 	bl	80028cc <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e04f      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	4b2b      	ldr	r3, [pc, #172]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 020c 	and.w	r2, r3, #12
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	429a      	cmp	r2, r3
 8005452:	d1eb      	bne.n	800542c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005454:	4b25      	ldr	r3, [pc, #148]	@ (80054ec <HAL_RCC_ClockConfig+0x1b8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d20c      	bcs.n	800547c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	4b22      	ldr	r3, [pc, #136]	@ (80054ec <HAL_RCC_ClockConfig+0x1b8>)
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546a:	4b20      	ldr	r3, [pc, #128]	@ (80054ec <HAL_RCC_ClockConfig+0x1b8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d001      	beq.n	800547c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e032      	b.n	80054e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005488:	4b19      	ldr	r3, [pc, #100]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4916      	ldr	r1, [pc, #88]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d009      	beq.n	80054ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054a6:	4b12      	ldr	r3, [pc, #72]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	490e      	ldr	r1, [pc, #56]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054ba:	f000 f821 	bl	8005500 <HAL_RCC_GetSysClockFreq>
 80054be:	4602      	mov	r2, r0
 80054c0:	4b0b      	ldr	r3, [pc, #44]	@ (80054f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	490a      	ldr	r1, [pc, #40]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 80054cc:	5ccb      	ldrb	r3, [r1, r3]
 80054ce:	fa22 f303 	lsr.w	r3, r2, r3
 80054d2:	4a09      	ldr	r2, [pc, #36]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054d6:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fd f9b2 	bl	8002844 <HAL_InitTick>

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40023c00 	.word	0x40023c00
 80054f0:	40023800 	.word	0x40023800
 80054f4:	0800d7a0 	.word	0x0800d7a0
 80054f8:	2000000c 	.word	0x2000000c
 80054fc:	20000010 	.word	0x20000010

08005500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005504:	b094      	sub	sp, #80	@ 0x50
 8005506:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	647b      	str	r3, [r7, #68]	@ 0x44
 800550c:	2300      	movs	r3, #0
 800550e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005510:	2300      	movs	r3, #0
 8005512:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005518:	4b79      	ldr	r3, [pc, #484]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x200>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 030c 	and.w	r3, r3, #12
 8005520:	2b08      	cmp	r3, #8
 8005522:	d00d      	beq.n	8005540 <HAL_RCC_GetSysClockFreq+0x40>
 8005524:	2b08      	cmp	r3, #8
 8005526:	f200 80e1 	bhi.w	80056ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_RCC_GetSysClockFreq+0x34>
 800552e:	2b04      	cmp	r3, #4
 8005530:	d003      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0x3a>
 8005532:	e0db      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005534:	4b73      	ldr	r3, [pc, #460]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x204>)
 8005536:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005538:	e0db      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800553a:	4b73      	ldr	r3, [pc, #460]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x208>)
 800553c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800553e:	e0d8      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005540:	4b6f      	ldr	r3, [pc, #444]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x200>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005548:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800554a:	4b6d      	ldr	r3, [pc, #436]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x200>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d063      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005556:	4b6a      	ldr	r3, [pc, #424]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x200>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	2200      	movs	r2, #0
 800555e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005560:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005568:	633b      	str	r3, [r7, #48]	@ 0x30
 800556a:	2300      	movs	r3, #0
 800556c:	637b      	str	r3, [r7, #52]	@ 0x34
 800556e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005572:	4622      	mov	r2, r4
 8005574:	462b      	mov	r3, r5
 8005576:	f04f 0000 	mov.w	r0, #0
 800557a:	f04f 0100 	mov.w	r1, #0
 800557e:	0159      	lsls	r1, r3, #5
 8005580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005584:	0150      	lsls	r0, r2, #5
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4621      	mov	r1, r4
 800558c:	1a51      	subs	r1, r2, r1
 800558e:	6139      	str	r1, [r7, #16]
 8005590:	4629      	mov	r1, r5
 8005592:	eb63 0301 	sbc.w	r3, r3, r1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a4:	4659      	mov	r1, fp
 80055a6:	018b      	lsls	r3, r1, #6
 80055a8:	4651      	mov	r1, sl
 80055aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ae:	4651      	mov	r1, sl
 80055b0:	018a      	lsls	r2, r1, #6
 80055b2:	4651      	mov	r1, sl
 80055b4:	ebb2 0801 	subs.w	r8, r2, r1
 80055b8:	4659      	mov	r1, fp
 80055ba:	eb63 0901 	sbc.w	r9, r3, r1
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055d2:	4690      	mov	r8, r2
 80055d4:	4699      	mov	r9, r3
 80055d6:	4623      	mov	r3, r4
 80055d8:	eb18 0303 	adds.w	r3, r8, r3
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	462b      	mov	r3, r5
 80055e0:	eb49 0303 	adc.w	r3, r9, r3
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	f04f 0200 	mov.w	r2, #0
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055f2:	4629      	mov	r1, r5
 80055f4:	024b      	lsls	r3, r1, #9
 80055f6:	4621      	mov	r1, r4
 80055f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055fc:	4621      	mov	r1, r4
 80055fe:	024a      	lsls	r2, r1, #9
 8005600:	4610      	mov	r0, r2
 8005602:	4619      	mov	r1, r3
 8005604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005606:	2200      	movs	r2, #0
 8005608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800560a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800560c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005610:	f7fa fe46 	bl	80002a0 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4613      	mov	r3, r2
 800561a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800561c:	e058      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800561e:	4b38      	ldr	r3, [pc, #224]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x200>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	099b      	lsrs	r3, r3, #6
 8005624:	2200      	movs	r2, #0
 8005626:	4618      	mov	r0, r3
 8005628:	4611      	mov	r1, r2
 800562a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
 8005634:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005638:	4642      	mov	r2, r8
 800563a:	464b      	mov	r3, r9
 800563c:	f04f 0000 	mov.w	r0, #0
 8005640:	f04f 0100 	mov.w	r1, #0
 8005644:	0159      	lsls	r1, r3, #5
 8005646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800564a:	0150      	lsls	r0, r2, #5
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4641      	mov	r1, r8
 8005652:	ebb2 0a01 	subs.w	sl, r2, r1
 8005656:	4649      	mov	r1, r9
 8005658:	eb63 0b01 	sbc.w	fp, r3, r1
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005668:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800566c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005670:	ebb2 040a 	subs.w	r4, r2, sl
 8005674:	eb63 050b 	sbc.w	r5, r3, fp
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	00eb      	lsls	r3, r5, #3
 8005682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005686:	00e2      	lsls	r2, r4, #3
 8005688:	4614      	mov	r4, r2
 800568a:	461d      	mov	r5, r3
 800568c:	4643      	mov	r3, r8
 800568e:	18e3      	adds	r3, r4, r3
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	464b      	mov	r3, r9
 8005694:	eb45 0303 	adc.w	r3, r5, r3
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056a6:	4629      	mov	r1, r5
 80056a8:	028b      	lsls	r3, r1, #10
 80056aa:	4621      	mov	r1, r4
 80056ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b0:	4621      	mov	r1, r4
 80056b2:	028a      	lsls	r2, r1, #10
 80056b4:	4610      	mov	r0, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056ba:	2200      	movs	r2, #0
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	61fa      	str	r2, [r7, #28]
 80056c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c4:	f7fa fdec 	bl	80002a0 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	3301      	adds	r3, #1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80056e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x204>)
 80056ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3750      	adds	r7, #80	@ 0x50
 80056f8:	46bd      	mov	sp, r7
 80056fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800
 8005704:	00f42400 	.word	0x00f42400
 8005708:	007a1200 	.word	0x007a1200

0800570c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <HAL_RCC_GetHCLKFreq+0x14>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	2000000c 	.word	0x2000000c

08005724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005728:	f7ff fff0 	bl	800570c <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	0a9b      	lsrs	r3, r3, #10
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4903      	ldr	r1, [pc, #12]	@ (8005748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40023800 	.word	0x40023800
 8005748:	0800d7b0 	.word	0x0800d7b0

0800574c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005750:	f7ff ffdc 	bl	800570c <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b05      	ldr	r3, [pc, #20]	@ (800576c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0b5b      	lsrs	r3, r3, #13
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4903      	ldr	r1, [pc, #12]	@ (8005770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005768:	4618      	mov	r0, r3
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40023800 	.word	0x40023800
 8005770:	0800d7b0 	.word	0x0800d7b0

08005774 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e022      	b.n	80057cc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d105      	bne.n	800579e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fc fcfb 	bl	8002194 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2203      	movs	r2, #3
 80057a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f814 	bl	80057d4 <HAL_SD_InitCard>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e00a      	b.n	80057cc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80057d4:	b5b0      	push	{r4, r5, r7, lr}
 80057d6:	b08e      	sub	sp, #56	@ 0x38
 80057d8:	af04      	add	r7, sp, #16
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80057dc:	2300      	movs	r3, #0
 80057de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80057f0:	2376      	movs	r3, #118	@ 0x76
 80057f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681d      	ldr	r5, [r3, #0]
 80057f8:	466c      	mov	r4, sp
 80057fa:	f107 0314 	add.w	r3, r7, #20
 80057fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005806:	f107 0308 	add.w	r3, r7, #8
 800580a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800580c:	4628      	mov	r0, r5
 800580e:	f002 ffd7 	bl	80087c0 <SDIO_Init>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e04f      	b.n	80058c4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005824:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <HAL_SD_InitCard+0xf8>)
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f003 f80f 	bl	8008852 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005834:	4b25      	ldr	r3, [pc, #148]	@ (80058cc <HAL_SD_InitCard+0xf8>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800583a:	2002      	movs	r0, #2
 800583c:	f7fd f852 	bl	80028e4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f001 f911 	bl	8006a68 <SD_PowerON>
 8005846:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	431a      	orrs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e02e      	b.n	80058c4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f001 f830 	bl	80068cc <SD_InitCard>
 800586c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e01b      	b.n	80058c4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005894:	4618      	mov	r0, r3
 8005896:	f003 f86e 	bl	8008976 <SDMMC_CmdBlockLength>
 800589a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00f      	beq.n	80058c2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a0a      	ldr	r2, [pc, #40]	@ (80058d0 <HAL_SD_InitCard+0xfc>)
 80058a8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3728      	adds	r7, #40	@ 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bdb0      	pop	{r4, r5, r7, pc}
 80058cc:	422580a0 	.word	0x422580a0
 80058d0:	004005ff 	.word	0x004005ff

080058d4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b092      	sub	sp, #72	@ 0x48
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80058e2:	f7fc fff3 	bl	80028cc <HAL_GetTick>
 80058e6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e1c5      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b01      	cmp	r3, #1
 8005910:	f040 81b8 	bne.w	8005c84 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800591a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	441a      	add	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	429a      	cmp	r2, r3
 8005926:	d907      	bls.n	8005938 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e1ac      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2203      	movs	r2, #3
 800593c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2200      	movs	r2, #0
 8005946:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594c:	2b01      	cmp	r3, #1
 800594e:	d002      	beq.n	8005956 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	025b      	lsls	r3, r3, #9
 8005954:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	025b      	lsls	r3, r3, #9
 8005960:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005962:	2390      	movs	r3, #144	@ 0x90
 8005964:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005966:	2302      	movs	r3, #2
 8005968:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800596e:	2301      	movs	r3, #1
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f107 0214 	add.w	r2, r7, #20
 800597a:	4611      	mov	r1, r2
 800597c:	4618      	mov	r0, r3
 800597e:	f002 ffce 	bl	800891e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d90a      	bls.n	800599e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2202      	movs	r2, #2
 800598c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005994:	4618      	mov	r0, r3
 8005996:	f003 f832 	bl	80089fe <SDMMC_CmdReadMultiBlock>
 800599a:	6478      	str	r0, [r7, #68]	@ 0x44
 800599c:	e009      	b.n	80059b2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059aa:	4618      	mov	r0, r3
 80059ac:	f003 f805 	bl	80089ba <SDMMC_CmdReadSingleBlock>
 80059b0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80059b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d012      	beq.n	80059de <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a7e      	ldr	r2, [pc, #504]	@ (8005bb8 <HAL_SD_ReadBlocks+0x2e4>)
 80059be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e159      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80059e2:	e061      	b.n	8005aa8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d03c      	beq.n	8005a6c <HAL_SD_ReadBlocks+0x198>
 80059f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d039      	beq.n	8005a6c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80059f8:	2300      	movs	r3, #0
 80059fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80059fc:	e033      	b.n	8005a66 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f002 ff07 	bl	8008816 <SDIO_ReadFIFO>
 8005a08:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a14:	3301      	adds	r3, #1
 8005a16:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a30:	3b01      	subs	r3, #1
 8005a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a36:	0c1b      	lsrs	r3, r3, #16
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a40:	3301      	adds	r3, #1
 8005a42:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a46:	3b01      	subs	r3, #1
 8005a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4c:	0e1b      	lsrs	r3, r3, #24
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a52:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a56:	3301      	adds	r3, #1
 8005a58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a62:	3301      	adds	r3, #1
 8005a64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a68:	2b07      	cmp	r3, #7
 8005a6a:	d9c8      	bls.n	80059fe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005a6c:	f7fc ff2e 	bl	80028cc <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d902      	bls.n	8005a82 <HAL_SD_ReadBlocks+0x1ae>
 8005a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d112      	bne.n	8005aa8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a4c      	ldr	r2, [pc, #304]	@ (8005bb8 <HAL_SD_ReadBlocks+0x2e4>)
 8005a88:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e0f4      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aae:	f240 332a 	movw	r3, #810	@ 0x32a
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d095      	beq.n	80059e4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d022      	beq.n	8005b0c <HAL_SD_ReadBlocks+0x238>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d91f      	bls.n	8005b0c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d01b      	beq.n	8005b0c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f002 fff7 	bl	8008acc <SDMMC_CmdStopTransfer>
 8005ade:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d012      	beq.n	8005b0c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a33      	ldr	r2, [pc, #204]	@ (8005bb8 <HAL_SD_ReadBlocks+0x2e4>)
 8005aec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0c2      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_SD_ReadBlocks+0x254>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d012      	beq.n	8005b4e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a22      	ldr	r2, [pc, #136]	@ (8005bb8 <HAL_SD_ReadBlocks+0x2e4>)
 8005b2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	f043 0208 	orr.w	r2, r3, #8
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e0a1      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a15      	ldr	r2, [pc, #84]	@ (8005bb8 <HAL_SD_ReadBlocks+0x2e4>)
 8005b62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	f043 0202 	orr.w	r2, r3, #2
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e087      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d064      	beq.n	8005c5a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a08      	ldr	r2, [pc, #32]	@ (8005bb8 <HAL_SD_ReadBlocks+0x2e4>)
 8005b96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	f043 0220 	orr.w	r2, r3, #32
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e06d      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
 8005bb6:	bf00      	nop
 8005bb8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f002 fe28 	bl	8008816 <SDIO_ReadFIFO>
 8005bc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bce:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be8:	3301      	adds	r3, #1
 8005bea:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf4:	0c1b      	lsrs	r3, r3, #16
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfe:	3301      	adds	r3, #1
 8005c00:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c04:	3b01      	subs	r3, #1
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c0a:	0e1b      	lsrs	r3, r3, #24
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c10:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c14:	3301      	adds	r3, #1
 8005c16:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005c1e:	f7fc fe55 	bl	80028cc <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d902      	bls.n	8005c34 <HAL_SD_ReadBlocks+0x360>
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d112      	bne.n	8005c5a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a18      	ldr	r2, [pc, #96]	@ (8005c9c <HAL_SD_ReadBlocks+0x3c8>)
 8005c3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2200      	movs	r2, #0
 8005c54:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e01b      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <HAL_SD_ReadBlocks+0x39a>
 8005c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1a6      	bne.n	8005bbc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005c76:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e006      	b.n	8005c92 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3748      	adds	r7, #72	@ 0x48
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	004005ff 	.word	0x004005ff

08005ca0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b092      	sub	sp, #72	@ 0x48
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cae:	f7fc fe0d 	bl	80028cc <HAL_GetTick>
 8005cb2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e16d      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	f040 8160 	bne.w	8005fa0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005ce6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	441a      	add	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d907      	bls.n	8005d04 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e154      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2203      	movs	r2, #3
 8005d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2200      	movs	r2, #0
 8005d12:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d002      	beq.n	8005d22 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	025b      	lsls	r3, r3, #9
 8005d20:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d22:	f04f 33ff 	mov.w	r3, #4294967295
 8005d26:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	025b      	lsls	r3, r3, #9
 8005d2c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005d2e:	2390      	movs	r3, #144	@ 0x90
 8005d30:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f107 0218 	add.w	r2, r7, #24
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f002 fde8 	bl	800891e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d90a      	bls.n	8005d6a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d60:	4618      	mov	r0, r3
 8005d62:	f002 fe90 	bl	8008a86 <SDMMC_CmdWriteMultiBlock>
 8005d66:	6478      	str	r0, [r7, #68]	@ 0x44
 8005d68:	e009      	b.n	8005d7e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2210      	movs	r2, #16
 8005d6e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d76:	4618      	mov	r0, r3
 8005d78:	f002 fe63 	bl	8008a42 <SDMMC_CmdWriteSingleBlock>
 8005d7c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d012      	beq.n	8005daa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a8b      	ldr	r2, [pc, #556]	@ (8005fb8 <HAL_SD_WriteBlocks+0x318>)
 8005d8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d92:	431a      	orrs	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e101      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005dae:	e065      	b.n	8005e7c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d040      	beq.n	8005e40 <HAL_SD_WriteBlocks+0x1a0>
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d03d      	beq.n	8005e40 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dc8:	e037      	b.n	8005e3a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	021a      	lsls	r2, r3, #8
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dea:	3301      	adds	r3, #1
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df0:	3b01      	subs	r3, #1
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	041a      	lsls	r2, r3, #16
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e02:	3301      	adds	r3, #1
 8005e04:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	061a      	lsls	r2, r3, #24
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e20:	3b01      	subs	r3, #1
 8005e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f107 0214 	add.w	r2, r7, #20
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f002 fcfe 	bl	8008830 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e36:	3301      	adds	r3, #1
 8005e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3c:	2b07      	cmp	r3, #7
 8005e3e:	d9c4      	bls.n	8005dca <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e40:	f7fc fd44 	bl	80028cc <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d902      	bls.n	8005e56 <HAL_SD_WriteBlocks+0x1b6>
 8005e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d112      	bne.n	8005e7c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a57      	ldr	r2, [pc, #348]	@ (8005fb8 <HAL_SD_WriteBlocks+0x318>)
 8005e5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e098      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e82:	f240 331a 	movw	r3, #794	@ 0x31a
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d091      	beq.n	8005db0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d022      	beq.n	8005ee0 <HAL_SD_WriteBlocks+0x240>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d91f      	bls.n	8005ee0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d01b      	beq.n	8005ee0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f002 fe0d 	bl	8008acc <SDMMC_CmdStopTransfer>
 8005eb2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d012      	beq.n	8005ee0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8005fb8 <HAL_SD_WriteBlocks+0x318>)
 8005ec0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e066      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_SD_WriteBlocks+0x25c>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d012      	beq.n	8005f22 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb8 <HAL_SD_WriteBlocks+0x318>)
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	f043 0208 	orr.w	r2, r3, #8
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e045      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d012      	beq.n	8005f56 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a20      	ldr	r2, [pc, #128]	@ (8005fb8 <HAL_SD_WriteBlocks+0x318>)
 8005f36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	f043 0202 	orr.w	r2, r3, #2
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e02b      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d012      	beq.n	8005f8a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a13      	ldr	r2, [pc, #76]	@ (8005fb8 <HAL_SD_WriteBlocks+0x318>)
 8005f6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f70:	f043 0210 	orr.w	r2, r3, #16
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e011      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005f92:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e006      	b.n	8005fae <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
  }
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3748      	adds	r7, #72	@ 0x48
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	004005ff 	.word	0x004005ff

08005fbc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d008      	beq.n	8005fea <HAL_SD_IRQHandler+0x2e>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 0308 	and.w	r3, r3, #8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 ff66 	bl	8006eb4 <SD_Read_IT>
 8005fe8:	e165      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 808f 	beq.w	8006118 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006002:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006012:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006016:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d039      	beq.n	80060a6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <HAL_SD_IRQHandler+0x8a>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d011      	beq.n	800606a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f002 fd3e 	bl	8008acc <SDMMC_CmdStopTransfer>
 8006050:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f92f 	bl	80062c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006072:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <HAL_SD_IRQHandler+0xda>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f003 f99e 	bl	80093d8 <HAL_SD_RxCpltCallback>
 800609c:	e10b      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f003 f990 	bl	80093c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80060a4:	e107      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8102 	beq.w	80062b6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d011      	beq.n	80060e0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f002 fd03 	bl	8008acc <SDMMC_CmdStopTransfer>
 80060c6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8f4 	bl	80062c8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 80e5 	bne.w	80062b6 <HAL_SD_IRQHandler+0x2fa>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 80df 	bne.w	80062b6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0208 	bic.w	r2, r2, #8
 8006106:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f003 f957 	bl	80093c4 <HAL_SD_TxCpltCallback>
}
 8006116:	e0ce      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800611e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <HAL_SD_IRQHandler+0x17c>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d003      	beq.n	8006138 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 ff10 	bl	8006f56 <SD_Write_IT>
 8006136:	e0be      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613e:	f240 233a 	movw	r3, #570	@ 0x23a
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80b6 	beq.w	80062b6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	f043 0202 	orr.w	r2, r3, #2
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006176:	f043 0208 	orr.w	r2, r3, #8
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006190:	f043 0220 	orr.w	r2, r3, #32
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061aa:	f043 0210 	orr.w	r2, r3, #16
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c4:	f043 0208 	orr.w	r2, r3, #8
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f240 723a 	movw	r2, #1850	@ 0x73a
 80061d4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80061e4:	f023 0302 	bic.w	r3, r3, #2
 80061e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f002 fc6c 	bl	8008acc <SDMMC_CmdStopTransfer>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0308 	and.w	r3, r3, #8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f855 	bl	80062c8 <HAL_SD_ErrorCallback>
}
 800621e:	e04a      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006226:	2b00      	cmp	r3, #0
 8006228:	d045      	beq.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_SD_IRQHandler+0x282>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d011      	beq.n	8006262 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006242:	4a1f      	ldr	r2, [pc, #124]	@ (80062c0 <HAL_SD_IRQHandler+0x304>)
 8006244:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624a:	4618      	mov	r0, r3
 800624c:	f7fd fcf2 	bl	8003c34 <HAL_DMA_Abort_IT>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d02f      	beq.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625a:	4618      	mov	r0, r3
 800625c:	f000 fac8 	bl	80067f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006260:	e029      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <HAL_SD_IRQHandler+0x2ba>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d011      	beq.n	800629a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	4a12      	ldr	r2, [pc, #72]	@ (80062c4 <HAL_SD_IRQHandler+0x308>)
 800627c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	4618      	mov	r0, r3
 8006284:	f7fd fcd6 	bl	8003c34 <HAL_DMA_Abort_IT>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d013      	beq.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fae3 	bl	800685e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006298:	e00d      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f003 f87e 	bl	80093b0 <HAL_SD_AbortCallback>
}
 80062b4:	e7ff      	b.n	80062b6 <HAL_SD_IRQHandler+0x2fa>
 80062b6:	bf00      	nop
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	080067f1 	.word	0x080067f1
 80062c4:	0800685f 	.word	0x0800685f

080062c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ea:	0f9b      	lsrs	r3, r3, #30
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f6:	0e9b      	lsrs	r3, r3, #26
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006308:	0e1b      	lsrs	r3, r3, #24
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 0303 	and.w	r3, r3, #3
 8006310:	b2da      	uxtb	r2, r3
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800631a:	0c1b      	lsrs	r3, r3, #16
 800631c:	b2da      	uxtb	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b2da      	uxtb	r2, r3
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006332:	b2da      	uxtb	r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800633c:	0d1b      	lsrs	r3, r3, #20
 800633e:	b29a      	uxth	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 030f 	and.w	r3, r3, #15
 8006350:	b2da      	uxtb	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800635a:	0bdb      	lsrs	r3, r3, #15
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800636c:	0b9b      	lsrs	r3, r3, #14
 800636e:	b2db      	uxtb	r3, r3
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	b2da      	uxtb	r2, r3
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800637e:	0b5b      	lsrs	r3, r3, #13
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	b2da      	uxtb	r2, r3
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006390:	0b1b      	lsrs	r3, r3, #12
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	b2da      	uxtb	r2, r3
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2200      	movs	r2, #0
 80063a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d163      	bne.n	8006474 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063b0:	009a      	lsls	r2, r3, #2
 80063b2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80063b6:	4013      	ands	r3, r2
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80063bc:	0f92      	lsrs	r2, r2, #30
 80063be:	431a      	orrs	r2, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063c8:	0edb      	lsrs	r3, r3, #27
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063da:	0e1b      	lsrs	r3, r3, #24
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ec:	0d5b      	lsrs	r3, r3, #21
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063fe:	0c9b      	lsrs	r3, r3, #18
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	b2da      	uxtb	r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006410:	0bdb      	lsrs	r3, r3, #15
 8006412:	b2db      	uxtb	r3, r3
 8006414:	f003 0307 	and.w	r3, r3, #7
 8006418:	b2da      	uxtb	r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	7e1b      	ldrb	r3, [r3, #24]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	3302      	adds	r3, #2
 8006434:	2201      	movs	r2, #1
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800643e:	fb03 f202 	mul.w	r2, r3, r2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	7a1b      	ldrb	r3, [r3, #8]
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	2201      	movs	r2, #1
 8006452:	409a      	lsls	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006460:	0a52      	lsrs	r2, r2, #9
 8006462:	fb03 f202 	mul.w	r2, r3, r2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006470:	661a      	str	r2, [r3, #96]	@ 0x60
 8006472:	e031      	b.n	80064d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	2b01      	cmp	r3, #1
 800647a:	d11d      	bne.n	80064b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800648a:	0c1b      	lsrs	r3, r3, #16
 800648c:	431a      	orrs	r2, r3
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	3301      	adds	r3, #1
 8006498:	029a      	lsls	r2, r3, #10
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80064b6:	e00f      	b.n	80064d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a58      	ldr	r2, [pc, #352]	@ (8006620 <HAL_SD_GetCardCSD+0x344>)
 80064be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e09d      	b.n	8006614 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064dc:	0b9b      	lsrs	r3, r3, #14
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064ee:	09db      	lsrs	r3, r3, #7
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006506:	b2da      	uxtb	r2, r3
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006510:	0fdb      	lsrs	r3, r3, #31
 8006512:	b2da      	uxtb	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651c:	0f5b      	lsrs	r3, r3, #29
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	0e9b      	lsrs	r3, r3, #26
 8006530:	b2db      	uxtb	r3, r3
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	b2da      	uxtb	r2, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006540:	0d9b      	lsrs	r3, r3, #22
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	b2da      	uxtb	r2, r3
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	0d5b      	lsrs	r3, r3, #21
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	0c1b      	lsrs	r3, r3, #16
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	b2da      	uxtb	r2, r3
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006582:	0bdb      	lsrs	r3, r3, #15
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	b2da      	uxtb	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006596:	0b9b      	lsrs	r3, r3, #14
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065aa:	0b5b      	lsrs	r3, r3, #13
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065be:	0b1b      	lsrs	r3, r3, #12
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d2:	0a9b      	lsrs	r3, r3, #10
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fa:	085b      	lsrs	r3, r3, #1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006602:	b2da      	uxtb	r2, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	004005ff 	.word	0x004005ff

08006624 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800667c:	b5b0      	push	{r4, r5, r7, lr}
 800667e:	b08e      	sub	sp, #56	@ 0x38
 8006680:	af04      	add	r7, sp, #16
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2203      	movs	r2, #3
 8006690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006698:	2b03      	cmp	r3, #3
 800669a:	d02e      	beq.n	80066fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a2:	d106      	bne.n	80066b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80066b0:	e029      	b.n	8006706 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066b8:	d10a      	bne.n	80066d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fa8a 	bl	8006bd4 <SD_WideBus_Enable>
 80066c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80066ce:	e01a      	b.n	8006706 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fac7 	bl	8006c6a <SD_WideBus_Disable>
 80066dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80066ea:	e00c      	b.n	8006706 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80066f8:	e005      	b.n	8006706 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00b      	beq.n	8006726 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a26      	ldr	r2, [pc, #152]	@ (80067ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8006714:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006724:	e01f      	b.n	8006766 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681d      	ldr	r5, [r3, #0]
 800674c:	466c      	mov	r4, sp
 800674e:	f107 0314 	add.w	r3, r7, #20
 8006752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006760:	4628      	mov	r0, r5
 8006762:	f002 f82d 	bl	80087c0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800676e:	4618      	mov	r0, r3
 8006770:	f002 f901 	bl	8008976 <SDMMC_CmdBlockLength>
 8006774:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00c      	beq.n	8006796 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a0a      	ldr	r2, [pc, #40]	@ (80067ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8006782:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006788:	6a3b      	ldr	r3, [r7, #32]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800679e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3728      	adds	r7, #40	@ 0x28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bdb0      	pop	{r4, r5, r7, pc}
 80067aa:	bf00      	nop
 80067ac:	004005ff 	.word	0x004005ff

080067b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80067bc:	f107 030c 	add.w	r3, r7, #12
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f9de 	bl	8006b84 <SD_SendStatus>
 80067c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	0a5b      	lsrs	r3, r3, #9
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80067e6:	693b      	ldr	r3, [r7, #16]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006806:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff ffd1 	bl	80067b0 <HAL_SD_GetCardState>
 800680e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b06      	cmp	r3, #6
 8006822:	d002      	beq.n	800682a <SD_DMATxAbort+0x3a>
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b05      	cmp	r3, #5
 8006828:	d10a      	bne.n	8006840 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f002 f94c 	bl	8008acc <SDMMC_CmdStopTransfer>
 8006834:	4602      	mov	r2, r0
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800683a:	431a      	orrs	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006844:	2b00      	cmp	r3, #0
 8006846:	d103      	bne.n	8006850 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f002 fdb1 	bl	80093b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800684e:	e002      	b.n	8006856 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff fd39 	bl	80062c8 <HAL_SD_ErrorCallback>
}
 8006856:	bf00      	nop
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006874:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff ff9a 	bl	80067b0 <HAL_SD_GetCardState>
 800687c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b06      	cmp	r3, #6
 8006890:	d002      	beq.n	8006898 <SD_DMARxAbort+0x3a>
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b05      	cmp	r3, #5
 8006896:	d10a      	bne.n	80068ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f002 f915 	bl	8008acc <SDMMC_CmdStopTransfer>
 80068a2:	4602      	mov	r2, r0
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a8:	431a      	orrs	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d103      	bne.n	80068be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f002 fd7a 	bl	80093b0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80068bc:	e002      	b.n	80068c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff fd02 	bl	80062c8 <HAL_SD_ErrorCallback>
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80068cc:	b5b0      	push	{r4, r5, r7, lr}
 80068ce:	b094      	sub	sp, #80	@ 0x50
 80068d0:	af04      	add	r7, sp, #16
 80068d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80068d4:	2301      	movs	r3, #1
 80068d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 ffc6 	bl	800886e <SDIO_GetPowerState>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80068e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80068ec:	e0b8      	b.n	8006a60 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d02f      	beq.n	8006956 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f002 f9f0 	bl	8008ce0 <SDMMC_CmdSendCID>
 8006900:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <SD_InitCard+0x40>
    {
      return errorstate;
 8006908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690a:	e0a9      	b.n	8006a60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f001 fff0 	bl	80088f8 <SDIO_GetResponse>
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2104      	movs	r1, #4
 8006924:	4618      	mov	r0, r3
 8006926:	f001 ffe7 	bl	80088f8 <SDIO_GetResponse>
 800692a:	4602      	mov	r2, r0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2108      	movs	r1, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f001 ffde 	bl	80088f8 <SDIO_GetResponse>
 800693c:	4602      	mov	r2, r0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	210c      	movs	r1, #12
 8006948:	4618      	mov	r0, r3
 800694a:	f001 ffd5 	bl	80088f8 <SDIO_GetResponse>
 800694e:	4602      	mov	r2, r0
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695a:	2b03      	cmp	r3, #3
 800695c:	d00d      	beq.n	800697a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f107 020e 	add.w	r2, r7, #14
 8006966:	4611      	mov	r1, r2
 8006968:	4618      	mov	r0, r3
 800696a:	f002 f9f6 	bl	8008d5a <SDMMC_CmdSetRelAdd>
 800696e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <SD_InitCard+0xae>
    {
      return errorstate;
 8006976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006978:	e072      	b.n	8006a60 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	2b03      	cmp	r3, #3
 8006980:	d036      	beq.n	80069f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006982:	89fb      	ldrh	r3, [r7, #14]
 8006984:	461a      	mov	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f002 f9c0 	bl	8008d1c <SDMMC_CmdSendCSD>
 800699c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800699e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80069a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a6:	e05b      	b.n	8006a60 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 ffa2 	bl	80088f8 <SDIO_GetResponse>
 80069b4:	4602      	mov	r2, r0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2104      	movs	r1, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 ff99 	bl	80088f8 <SDIO_GetResponse>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2108      	movs	r1, #8
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 ff90 	bl	80088f8 <SDIO_GetResponse>
 80069d8:	4602      	mov	r2, r0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	210c      	movs	r1, #12
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 ff87 	bl	80088f8 <SDIO_GetResponse>
 80069ea:	4602      	mov	r2, r0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2104      	movs	r1, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 ff7e 	bl	80088f8 <SDIO_GetResponse>
 80069fc:	4603      	mov	r3, r0
 80069fe:	0d1a      	lsrs	r2, r3, #20
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006a04:	f107 0310 	add.w	r3, r7, #16
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff fc66 	bl	80062dc <HAL_SD_GetCardCSD>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a16:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006a1a:	e021      	b.n	8006a60 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	2200      	movs	r2, #0
 8006a28:	461c      	mov	r4, r3
 8006a2a:	4615      	mov	r5, r2
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	462b      	mov	r3, r5
 8006a30:	4608      	mov	r0, r1
 8006a32:	f002 f86d 	bl	8008b10 <SDMMC_CmdSelDesel>
 8006a36:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <SD_InitCard+0x176>
  {
    return errorstate;
 8006a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a40:	e00e      	b.n	8006a60 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681d      	ldr	r5, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	466c      	mov	r4, sp
 8006a4a:	f103 0210 	add.w	r2, r3, #16
 8006a4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a54:	3304      	adds	r3, #4
 8006a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a58:	4628      	mov	r0, r5
 8006a5a:	f001 feb1 	bl	80087c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3740      	adds	r7, #64	@ 0x40
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bdb0      	pop	{r4, r5, r7, pc}

08006a68 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f002 f868 	bl	8008b56 <SDMMC_CmdGoIdleState>
 8006a86:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	e072      	b.n	8006b78 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f002 f87b 	bl	8008b92 <SDMMC_CmdOperCond>
 8006a9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00d      	beq.n	8006ac0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f002 f851 	bl	8008b56 <SDMMC_CmdGoIdleState>
 8006ab4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	e05b      	b.n	8006b78 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d137      	bne.n	8006b3e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 f87b 	bl	8008bd0 <SDMMC_CmdAppCommand>
 8006ada:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d02d      	beq.n	8006b3e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ae2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006ae6:	e047      	b.n	8006b78 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f002 f86e 	bl	8008bd0 <SDMMC_CmdAppCommand>
 8006af4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <SD_PowerON+0x98>
    {
      return errorstate;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	e03b      	b.n	8006b78 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	491e      	ldr	r1, [pc, #120]	@ (8006b80 <SD_PowerON+0x118>)
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 f884 	bl	8008c14 <SDMMC_CmdAppOperCommand>
 8006b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d002      	beq.n	8006b1a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006b18:	e02e      	b.n	8006b78 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 fee9 	bl	80088f8 <SDIO_GetResponse>
 8006b26:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	0fdb      	lsrs	r3, r3, #31
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <SD_PowerON+0xcc>
 8006b30:	2301      	movs	r3, #1
 8006b32:	e000      	b.n	8006b36 <SD_PowerON+0xce>
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]

    count++;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d802      	bhi.n	8006b4e <SD_PowerON+0xe6>
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0cc      	beq.n	8006ae8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d902      	bls.n	8006b5e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006b58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b5c:	e00c      	b.n	8006b78 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8006b6e:	e002      	b.n	8006b76 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	c1100000 	.word	0xc1100000

08006b84 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d102      	bne.n	8006b9a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006b94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b98:	e018      	b.n	8006bcc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f002 f8f8 	bl	8008d9c <SDMMC_CmdSendStatus>
 8006bac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	e009      	b.n	8006bcc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 fe9a 	bl	80088f8 <SDIO_GetResponse>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2100      	movs	r1, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 fe84 	bl	80088f8 <SDIO_GetResponse>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bfa:	d102      	bne.n	8006c02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006bfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c00:	e02f      	b.n	8006c62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c02:	f107 030c 	add.w	r3, r7, #12
 8006c06:	4619      	mov	r1, r3
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f879 	bl	8006d00 <SD_FindSCR>
 8006c0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	e023      	b.n	8006c62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01c      	beq.n	8006c5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f001 ffcd 	bl	8008bd0 <SDMMC_CmdAppCommand>
 8006c36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	e00f      	b.n	8006c62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2102      	movs	r1, #2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f002 f806 	bl	8008c5a <SDMMC_CmdBusWidth>
 8006c4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	e003      	b.n	8006c62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e001      	b.n	8006c62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c5e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3718      	adds	r7, #24
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b086      	sub	sp, #24
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2100      	movs	r1, #0
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 fe39 	bl	80088f8 <SDIO_GetResponse>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c90:	d102      	bne.n	8006c98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c96:	e02f      	b.n	8006cf8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f82e 	bl	8006d00 <SD_FindSCR>
 8006ca4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	e023      	b.n	8006cf8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01c      	beq.n	8006cf4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	f001 ff82 	bl	8008bd0 <SDMMC_CmdAppCommand>
 8006ccc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	e00f      	b.n	8006cf8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2100      	movs	r1, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 ffbb 	bl	8008c5a <SDMMC_CmdBusWidth>
 8006ce4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	e003      	b.n	8006cf8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e001      	b.n	8006cf8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cf4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b08f      	sub	sp, #60	@ 0x3c
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d0a:	f7fb fddf 	bl	80028cc <HAL_GetTick>
 8006d0e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2108      	movs	r1, #8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 fe25 	bl	8008976 <SDMMC_CmdBlockLength>
 8006d2c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	e0b9      	b.n	8006eac <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f001 ff43 	bl	8008bd0 <SDMMC_CmdAppCommand>
 8006d4a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	e0aa      	b.n	8006eac <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006d5c:	2308      	movs	r3, #8
 8006d5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006d60:	2330      	movs	r3, #48	@ 0x30
 8006d62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006d64:	2302      	movs	r3, #2
 8006d66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f107 0210 	add.w	r2, r7, #16
 8006d78:	4611      	mov	r1, r2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 fdcf 	bl	800891e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 ff8a 	bl	8008c9e <SDMMC_CmdSendSCR>
 8006d8a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d02a      	beq.n	8006de8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	e08a      	b.n	8006eac <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00f      	beq.n	8006dc4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6819      	ldr	r1, [r3, #0]
 8006da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	f107 0208 	add.w	r2, r7, #8
 8006db0:	18d4      	adds	r4, r2, r3
 8006db2:	4608      	mov	r0, r1
 8006db4:	f001 fd2f 	bl	8008816 <SDIO_ReadFIFO>
 8006db8:	4603      	mov	r3, r0
 8006dba:	6023      	str	r3, [r4, #0]
      index++;
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc2:	e006      	b.n	8006dd2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d012      	beq.n	8006df8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006dd2:	f7fb fd7b 	bl	80028cc <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d102      	bne.n	8006de8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006de2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006de6:	e061      	b.n	8006eac <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dee:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0cf      	beq.n	8006d96 <SD_FindSCR+0x96>
 8006df6:	e000      	b.n	8006dfa <SD_FindSCR+0xfa>
      break;
 8006df8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d106      	bne.n	8006e16 <SD_FindSCR+0x116>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2208      	movs	r2, #8
 8006e1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e1e:	2308      	movs	r3, #8
 8006e20:	e044      	b.n	8006eac <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2202      	movs	r2, #2
 8006e36:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e037      	b.n	8006eac <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d005      	beq.n	8006e56 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006e52:	2320      	movs	r3, #32
 8006e54:	e02a      	b.n	8006eac <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006e5e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	061a      	lsls	r2, r3, #24
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	0a1b      	lsrs	r3, r3, #8
 8006e72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	0e1b      	lsrs	r3, r3, #24
 8006e7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e80:	601a      	str	r2, [r3, #0]
    scr++;
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	3304      	adds	r3, #4
 8006e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	061a      	lsls	r2, r3, #24
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006e9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	0e1b      	lsrs	r3, r3, #24
 8006ea4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	373c      	adds	r7, #60	@ 0x3c
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd90      	pop	{r4, r7, pc}

08006eb4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d03f      	beq.n	8006f4e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006ece:	2300      	movs	r3, #0
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	e033      	b.n	8006f3c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 fc9c 	bl	8008816 <SDIO_ReadFIFO>
 8006ede:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	0a1b      	lsrs	r3, r3, #8
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	0c1b      	lsrs	r3, r3, #16
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	0e1b      	lsrs	r3, r3, #24
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	2b07      	cmp	r3, #7
 8006f40:	d9c8      	bls.n	8006ed4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8006f4e:	bf00      	nop
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d043      	beq.n	8006ff8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	e037      	b.n	8006fe6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	021a      	lsls	r2, r3, #8
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	041a      	lsls	r2, r3, #16
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	061a      	lsls	r2, r3, #24
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f107 0208 	add.w	r2, r7, #8
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fc28 	bl	8008830 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b07      	cmp	r3, #7
 8006fea:	d9c4      	bls.n	8006f76 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e041      	b.n	8007096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fb f9b4 	bl	8002394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3304      	adds	r3, #4
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f000 faf8 	bl	8007634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d001      	beq.n	80070b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e044      	b.n	8007142 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007150 <HAL_TIM_Base_Start_IT+0xb0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d018      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x6c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e2:	d013      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x6c>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a1a      	ldr	r2, [pc, #104]	@ (8007154 <HAL_TIM_Base_Start_IT+0xb4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00e      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x6c>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a19      	ldr	r2, [pc, #100]	@ (8007158 <HAL_TIM_Base_Start_IT+0xb8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d009      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x6c>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a17      	ldr	r2, [pc, #92]	@ (800715c <HAL_TIM_Base_Start_IT+0xbc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d004      	beq.n	800710c <HAL_TIM_Base_Start_IT+0x6c>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a16      	ldr	r2, [pc, #88]	@ (8007160 <HAL_TIM_Base_Start_IT+0xc0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d111      	bne.n	8007130 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b06      	cmp	r3, #6
 800711c:	d010      	beq.n	8007140 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f042 0201 	orr.w	r2, r2, #1
 800712c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712e:	e007      	b.n	8007140 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	40010000 	.word	0x40010000
 8007154:	40000400 	.word	0x40000400
 8007158:	40000800 	.word	0x40000800
 800715c:	40000c00 	.word	0x40000c00
 8007160:	40014000 	.word	0x40014000

08007164 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0201 	bic.w	r2, r2, #1
 800717a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a1a      	ldr	r2, [r3, #32]
 8007182:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10f      	bne.n	80071ac <HAL_TIM_Base_Stop_IT+0x48>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a1a      	ldr	r2, [r3, #32]
 8007192:	f240 4344 	movw	r3, #1092	@ 0x444
 8007196:	4013      	ands	r3, r2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d107      	bne.n	80071ac <HAL_TIM_Base_Stop_IT+0x48>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr

080071c2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e041      	b.n	800725a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d106      	bne.n	80071f0 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f839 	bl	8007262 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3304      	adds	r3, #4
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f000 fa16 	bl	8007634 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0208 	bic.w	r2, r2, #8
 8007216:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6819      	ldr	r1, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d020      	beq.n	80072da <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d01b      	beq.n	80072da <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f06f 0202 	mvn.w	r2, #2
 80072aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f003 0303 	and.w	r3, r3, #3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f999 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 80072c6:	e005      	b.n	80072d4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f98b 	bl	80075e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f99c 	bl	800760c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d020      	beq.n	8007326 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01b      	beq.n	8007326 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f06f 0204 	mvn.w	r2, #4
 80072f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f973 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 8007312:	e005      	b.n	8007320 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f965 	bl	80075e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f976 	bl	800760c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d020      	beq.n	8007372 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01b      	beq.n	8007372 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f06f 0208 	mvn.w	r2, #8
 8007342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2204      	movs	r2, #4
 8007348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f94d 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 800735e:	e005      	b.n	800736c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f93f 	bl	80075e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f950 	bl	800760c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b00      	cmp	r3, #0
 800737a:	d020      	beq.n	80073be <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01b      	beq.n	80073be <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f06f 0210 	mvn.w	r2, #16
 800738e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2208      	movs	r2, #8
 8007394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69db      	ldr	r3, [r3, #28]
 800739c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f927 	bl	80075f8 <HAL_TIM_IC_CaptureCallback>
 80073aa:	e005      	b.n	80073b8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f919 	bl	80075e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f92a 	bl	800760c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d007      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f06f 0201 	mvn.w	r2, #1
 80073da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7f9 fbbd 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00c      	beq.n	8007406 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80073fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fab5 	bl	8007970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00c      	beq.n	800742a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d007      	beq.n	800742a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8fb 	bl	8007620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f06f 0220 	mvn.w	r2, #32
 8007446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fa87 	bl	800795c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800744e:	bf00      	nop
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_TIM_ConfigClockSource+0x1c>
 800746e:	2302      	movs	r3, #2
 8007470:	e0b4      	b.n	80075dc <HAL_TIM_ConfigClockSource+0x186>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007490:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007498:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074aa:	d03e      	beq.n	800752a <HAL_TIM_ConfigClockSource+0xd4>
 80074ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074b0:	f200 8087 	bhi.w	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b8:	f000 8086 	beq.w	80075c8 <HAL_TIM_ConfigClockSource+0x172>
 80074bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c0:	d87f      	bhi.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074c2:	2b70      	cmp	r3, #112	@ 0x70
 80074c4:	d01a      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0xa6>
 80074c6:	2b70      	cmp	r3, #112	@ 0x70
 80074c8:	d87b      	bhi.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074ca:	2b60      	cmp	r3, #96	@ 0x60
 80074cc:	d050      	beq.n	8007570 <HAL_TIM_ConfigClockSource+0x11a>
 80074ce:	2b60      	cmp	r3, #96	@ 0x60
 80074d0:	d877      	bhi.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074d2:	2b50      	cmp	r3, #80	@ 0x50
 80074d4:	d03c      	beq.n	8007550 <HAL_TIM_ConfigClockSource+0xfa>
 80074d6:	2b50      	cmp	r3, #80	@ 0x50
 80074d8:	d873      	bhi.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074da:	2b40      	cmp	r3, #64	@ 0x40
 80074dc:	d058      	beq.n	8007590 <HAL_TIM_ConfigClockSource+0x13a>
 80074de:	2b40      	cmp	r3, #64	@ 0x40
 80074e0:	d86f      	bhi.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074e2:	2b30      	cmp	r3, #48	@ 0x30
 80074e4:	d064      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x15a>
 80074e6:	2b30      	cmp	r3, #48	@ 0x30
 80074e8:	d86b      	bhi.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074ea:	2b20      	cmp	r3, #32
 80074ec:	d060      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x15a>
 80074ee:	2b20      	cmp	r3, #32
 80074f0:	d867      	bhi.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d05c      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x15a>
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d05a      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x15a>
 80074fa:	e062      	b.n	80075c2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800750c:	f000 f998 	bl	8007840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800751e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]
      break;
 8007528:	e04f      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800753a:	f000 f981 	bl	8007840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800754c:	609a      	str	r2, [r3, #8]
      break;
 800754e:	e03c      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800755c:	461a      	mov	r2, r3
 800755e:	f000 f8f5 	bl	800774c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2150      	movs	r1, #80	@ 0x50
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f94e 	bl	800780a <TIM_ITRx_SetConfig>
      break;
 800756e:	e02c      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800757c:	461a      	mov	r2, r3
 800757e:	f000 f914 	bl	80077aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2160      	movs	r1, #96	@ 0x60
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f93e 	bl	800780a <TIM_ITRx_SetConfig>
      break;
 800758e:	e01c      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800759c:	461a      	mov	r2, r3
 800759e:	f000 f8d5 	bl	800774c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2140      	movs	r1, #64	@ 0x40
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 f92e 	bl	800780a <TIM_ITRx_SetConfig>
      break;
 80075ae:	e00c      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4619      	mov	r1, r3
 80075ba:	4610      	mov	r0, r2
 80075bc:	f000 f925 	bl	800780a <TIM_ITRx_SetConfig>
      break;
 80075c0:	e003      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
      break;
 80075c6:	e000      	b.n	80075ca <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a3a      	ldr	r2, [pc, #232]	@ (8007730 <TIM_Base_SetConfig+0xfc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d00f      	beq.n	800766c <TIM_Base_SetConfig+0x38>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007652:	d00b      	beq.n	800766c <TIM_Base_SetConfig+0x38>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a37      	ldr	r2, [pc, #220]	@ (8007734 <TIM_Base_SetConfig+0x100>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d007      	beq.n	800766c <TIM_Base_SetConfig+0x38>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a36      	ldr	r2, [pc, #216]	@ (8007738 <TIM_Base_SetConfig+0x104>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_Base_SetConfig+0x38>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a35      	ldr	r2, [pc, #212]	@ (800773c <TIM_Base_SetConfig+0x108>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d108      	bne.n	800767e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a2b      	ldr	r2, [pc, #172]	@ (8007730 <TIM_Base_SetConfig+0xfc>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d01b      	beq.n	80076be <TIM_Base_SetConfig+0x8a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768c:	d017      	beq.n	80076be <TIM_Base_SetConfig+0x8a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a28      	ldr	r2, [pc, #160]	@ (8007734 <TIM_Base_SetConfig+0x100>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d013      	beq.n	80076be <TIM_Base_SetConfig+0x8a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a27      	ldr	r2, [pc, #156]	@ (8007738 <TIM_Base_SetConfig+0x104>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d00f      	beq.n	80076be <TIM_Base_SetConfig+0x8a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a26      	ldr	r2, [pc, #152]	@ (800773c <TIM_Base_SetConfig+0x108>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00b      	beq.n	80076be <TIM_Base_SetConfig+0x8a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a25      	ldr	r2, [pc, #148]	@ (8007740 <TIM_Base_SetConfig+0x10c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <TIM_Base_SetConfig+0x8a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a24      	ldr	r2, [pc, #144]	@ (8007744 <TIM_Base_SetConfig+0x110>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d003      	beq.n	80076be <TIM_Base_SetConfig+0x8a>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a23      	ldr	r2, [pc, #140]	@ (8007748 <TIM_Base_SetConfig+0x114>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d108      	bne.n	80076d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007730 <TIM_Base_SetConfig+0xfc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d103      	bne.n	8007704 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	691a      	ldr	r2, [r3, #16]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b01      	cmp	r3, #1
 8007714:	d105      	bne.n	8007722 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f023 0201 	bic.w	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	611a      	str	r2, [r3, #16]
  }
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40010000 	.word	0x40010000
 8007734:	40000400 	.word	0x40000400
 8007738:	40000800 	.word	0x40000800
 800773c:	40000c00 	.word	0x40000c00
 8007740:	40014000 	.word	0x40014000
 8007744:	40014400 	.word	0x40014400
 8007748:	40014800 	.word	0x40014800

0800774c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	f023 0201 	bic.w	r2, r3, #1
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	4313      	orrs	r3, r2
 8007780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f023 030a 	bic.w	r3, r3, #10
 8007788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	621a      	str	r2, [r3, #32]
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b087      	sub	sp, #28
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f023 0210 	bic.w	r2, r3, #16
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	031b      	lsls	r3, r3, #12
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	4313      	orrs	r3, r2
 80077de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	621a      	str	r2, [r3, #32]
}
 80077fe:	bf00      	nop
 8007800:	371c      	adds	r7, #28
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	f043 0307 	orr.w	r3, r3, #7
 800782c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	609a      	str	r2, [r3, #8]
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800785a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	021a      	lsls	r2, r3, #8
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	431a      	orrs	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4313      	orrs	r3, r2
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	609a      	str	r2, [r3, #8]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007894:	2302      	movs	r3, #2
 8007896:	e050      	b.n	800793a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d018      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e4:	d013      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a18      	ldr	r2, [pc, #96]	@ (800794c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00e      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a16      	ldr	r2, [pc, #88]	@ (8007950 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d009      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a15      	ldr	r2, [pc, #84]	@ (8007954 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d004      	beq.n	800790e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a13      	ldr	r2, [pc, #76]	@ (8007958 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d10c      	bne.n	8007928 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	4313      	orrs	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40010000 	.word	0x40010000
 800794c:	40000400 	.word	0x40000400
 8007950:	40000800 	.word	0x40000800
 8007954:	40000c00 	.word	0x40000c00
 8007958:	40014000 	.word	0x40014000

0800795c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e042      	b.n	8007a1c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7fa fd38 	bl	8002420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2224      	movs	r2, #36	@ 0x24
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fc85 	bl	80082d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695a      	ldr	r2, [r3, #20]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b0ba      	sub	sp, #232	@ 0xe8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10f      	bne.n	8007a8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <HAL_UART_IRQHandler+0x66>
 8007a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fb69 	bl	800815a <UART_Receive_IT>
      return;
 8007a88:	e25b      	b.n	8007f42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80de 	beq.w	8007c50 <HAL_UART_IRQHandler+0x22c>
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007aa4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 80d1 	beq.w	8007c50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xae>
 8007aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aca:	f043 0201 	orr.w	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <HAL_UART_IRQHandler+0xd2>
 8007ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aee:	f043 0202 	orr.w	r2, r3, #2
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <HAL_UART_IRQHandler+0xf6>
 8007b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b12:	f043 0204 	orr.w	r2, r3, #4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d011      	beq.n	8007b4a <HAL_UART_IRQHandler+0x126>
 8007b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d105      	bne.n	8007b3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d005      	beq.n	8007b4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b42:	f043 0208 	orr.w	r2, r3, #8
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 81f2 	beq.w	8007f38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b58:	f003 0320 	and.w	r3, r3, #32
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_UART_IRQHandler+0x14e>
 8007b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b64:	f003 0320 	and.w	r3, r3, #32
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 faf4 	bl	800815a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7c:	2b40      	cmp	r3, #64	@ 0x40
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <HAL_UART_IRQHandler+0x17a>
 8007b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d04f      	beq.n	8007c3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9fc 	bl	8007f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bae:	2b40      	cmp	r3, #64	@ 0x40
 8007bb0:	d141      	bne.n	8007c36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3314      	adds	r3, #20
 8007bb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3314      	adds	r3, #20
 8007bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007bde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007be2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1d9      	bne.n	8007bb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d013      	beq.n	8007c2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8007e04 <HAL_UART_IRQHandler+0x3e0>)
 8007c0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fc f80e 	bl	8003c34 <HAL_DMA_Abort_IT>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d016      	beq.n	8007c4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007c28:	4610      	mov	r0, r2
 8007c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2c:	e00e      	b.n	8007c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f99e 	bl	8007f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c34:	e00a      	b.n	8007c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f99a 	bl	8007f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3c:	e006      	b.n	8007c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f996 	bl	8007f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007c4a:	e175      	b.n	8007f38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	bf00      	nop
    return;
 8007c4e:	e173      	b.n	8007f38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	f040 814f 	bne.w	8007ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8148 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 8141 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c76:	2300      	movs	r3, #0
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	60bb      	str	r3, [r7, #8]
 8007c8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c96:	2b40      	cmp	r3, #64	@ 0x40
 8007c98:	f040 80b6 	bne.w	8007e08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8145 	beq.w	8007f3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	f080 813e 	bcs.w	8007f3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007cc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd2:	f000 8088 	beq.w	8007de6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1d9      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3314      	adds	r3, #20
 8007d28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3314      	adds	r3, #20
 8007d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e1      	bne.n	8007d22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3314      	adds	r3, #20
 8007d64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3314      	adds	r3, #20
 8007d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e3      	bne.n	8007d5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007db6:	f023 0310 	bic.w	r3, r3, #16
 8007dba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007dc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007dca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007dce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e3      	bne.n	8007da4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fb feb7 	bl	8003b54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2202      	movs	r2, #2
 8007dea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f8c1 	bl	8007f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e02:	e09b      	b.n	8007f3c <HAL_UART_IRQHandler+0x518>
 8007e04:	08008063 	.word	0x08008063
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 808e 	beq.w	8007f40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8089 	beq.w	8007f40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	330c      	adds	r3, #12
 8007e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e52:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e3      	bne.n	8007e2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3314      	adds	r3, #20
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	623b      	str	r3, [r7, #32]
   return(result);
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3314      	adds	r3, #20
 8007e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e92:	e841 2300 	strex	r3, r2, [r1]
 8007e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1e3      	bne.n	8007e66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0310 	bic.w	r3, r3, #16
 8007ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	330c      	adds	r3, #12
 8007ecc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007ed0:	61fa      	str	r2, [r7, #28]
 8007ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	69b9      	ldr	r1, [r7, #24]
 8007ed6:	69fa      	ldr	r2, [r7, #28]
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e3      	bne.n	8007eac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f847 	bl	8007f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ef6:	e023      	b.n	8007f40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <HAL_UART_IRQHandler+0x4f4>
 8007f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f8ba 	bl	800808a <UART_Transmit_IT>
    return;
 8007f16:	e014      	b.n	8007f42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00e      	beq.n	8007f42 <HAL_UART_IRQHandler+0x51e>
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d008      	beq.n	8007f42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f8fa 	bl	800812a <UART_EndTransmit_IT>
    return;
 8007f36:	e004      	b.n	8007f42 <HAL_UART_IRQHandler+0x51e>
    return;
 8007f38:	bf00      	nop
 8007f3a:	e002      	b.n	8007f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f3c:	bf00      	nop
 8007f3e:	e000      	b.n	8007f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8007f40:	bf00      	nop
  }
}
 8007f42:	37e8      	adds	r7, #232	@ 0xe8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b095      	sub	sp, #84	@ 0x54
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fc4:	643a      	str	r2, [r7, #64]	@ 0x40
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e5      	bne.n	8007fd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008010:	2b01      	cmp	r3, #1
 8008012:	d119      	bne.n	8008048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	60bb      	str	r3, [r7, #8]
   return(result);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f023 0310 	bic.w	r3, r3, #16
 800802a:	647b      	str	r3, [r7, #68]	@ 0x44
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	330c      	adds	r3, #12
 8008032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008034:	61ba      	str	r2, [r7, #24]
 8008036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6979      	ldr	r1, [r7, #20]
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	613b      	str	r3, [r7, #16]
   return(result);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008056:	bf00      	nop
 8008058:	3754      	adds	r7, #84	@ 0x54
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff ff77 	bl	8007f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b21      	cmp	r3, #33	@ 0x21
 800809c:	d13e      	bne.n	800811c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080a6:	d114      	bne.n	80080d2 <UART_Transmit_IT+0x48>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d110      	bne.n	80080d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	1c9a      	adds	r2, r3, #2
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	621a      	str	r2, [r3, #32]
 80080d0:	e008      	b.n	80080e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	1c59      	adds	r1, r3, #1
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6211      	str	r1, [r2, #32]
 80080dc:	781a      	ldrb	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4619      	mov	r1, r3
 80080f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10f      	bne.n	8008118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7ff fefc 	bl	8007f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b08c      	sub	sp, #48	@ 0x30
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b22      	cmp	r3, #34	@ 0x22
 800816c:	f040 80ae 	bne.w	80082cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008178:	d117      	bne.n	80081aa <UART_Receive_IT+0x50>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d113      	bne.n	80081aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	b29a      	uxth	r2, r3
 800819a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a2:	1c9a      	adds	r2, r3, #2
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80081a8:	e026      	b.n	80081f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081bc:	d007      	beq.n	80081ce <UART_Receive_IT+0x74>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <UART_Receive_IT+0x82>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e008      	b.n	80081ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29b      	uxth	r3, r3
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4619      	mov	r1, r3
 8008206:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008208:	2b00      	cmp	r3, #0
 800820a:	d15d      	bne.n	80082c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0220 	bic.w	r2, r2, #32
 800821a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800822a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695a      	ldr	r2, [r3, #20]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0201 	bic.w	r2, r2, #1
 800823a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824e:	2b01      	cmp	r3, #1
 8008250:	d135      	bne.n	80082be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	613b      	str	r3, [r7, #16]
   return(result);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f023 0310 	bic.w	r3, r3, #16
 800826e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	330c      	adds	r3, #12
 8008276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008278:	623a      	str	r2, [r7, #32]
 800827a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	69f9      	ldr	r1, [r7, #28]
 800827e:	6a3a      	ldr	r2, [r7, #32]
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	61bb      	str	r3, [r7, #24]
   return(result);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e5      	bne.n	8008258 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0310 	and.w	r3, r3, #16
 8008296:	2b10      	cmp	r3, #16
 8008298:	d10a      	bne.n	80082b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fe64 	bl	8007f84 <HAL_UARTEx_RxEventCallback>
 80082bc:	e002      	b.n	80082c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fe4c 	bl	8007f5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e002      	b.n	80082ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	e000      	b.n	80082ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80082cc:	2302      	movs	r3, #2
  }
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3730      	adds	r7, #48	@ 0x30
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082dc:	b0c0      	sub	sp, #256	@ 0x100
 80082de:	af00      	add	r7, sp, #0
 80082e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80082f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082f4:	68d9      	ldr	r1, [r3, #12]
 80082f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	ea40 0301 	orr.w	r3, r0, r1
 8008300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	431a      	orrs	r2, r3
 8008310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	431a      	orrs	r2, r3
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	4313      	orrs	r3, r2
 8008320:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008330:	f021 010c 	bic.w	r1, r1, #12
 8008334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800833e:	430b      	orrs	r3, r1
 8008340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008352:	6999      	ldr	r1, [r3, #24]
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	ea40 0301 	orr.w	r3, r0, r1
 800835e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b8f      	ldr	r3, [pc, #572]	@ (80085a4 <UART_SetConfig+0x2cc>)
 8008368:	429a      	cmp	r2, r3
 800836a:	d005      	beq.n	8008378 <UART_SetConfig+0xa0>
 800836c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	4b8d      	ldr	r3, [pc, #564]	@ (80085a8 <UART_SetConfig+0x2d0>)
 8008374:	429a      	cmp	r2, r3
 8008376:	d104      	bne.n	8008382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008378:	f7fd f9e8 	bl	800574c <HAL_RCC_GetPCLK2Freq>
 800837c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008380:	e003      	b.n	800838a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008382:	f7fd f9cf 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 8008386:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008394:	f040 810c 	bne.w	80085b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800839c:	2200      	movs	r2, #0
 800839e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083aa:	4622      	mov	r2, r4
 80083ac:	462b      	mov	r3, r5
 80083ae:	1891      	adds	r1, r2, r2
 80083b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083b2:	415b      	adcs	r3, r3
 80083b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083ba:	4621      	mov	r1, r4
 80083bc:	eb12 0801 	adds.w	r8, r2, r1
 80083c0:	4629      	mov	r1, r5
 80083c2:	eb43 0901 	adc.w	r9, r3, r1
 80083c6:	f04f 0200 	mov.w	r2, #0
 80083ca:	f04f 0300 	mov.w	r3, #0
 80083ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083da:	4690      	mov	r8, r2
 80083dc:	4699      	mov	r9, r3
 80083de:	4623      	mov	r3, r4
 80083e0:	eb18 0303 	adds.w	r3, r8, r3
 80083e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083e8:	462b      	mov	r3, r5
 80083ea:	eb49 0303 	adc.w	r3, r9, r3
 80083ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80083fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008406:	460b      	mov	r3, r1
 8008408:	18db      	adds	r3, r3, r3
 800840a:	653b      	str	r3, [r7, #80]	@ 0x50
 800840c:	4613      	mov	r3, r2
 800840e:	eb42 0303 	adc.w	r3, r2, r3
 8008412:	657b      	str	r3, [r7, #84]	@ 0x54
 8008414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800841c:	f7f7 ff40 	bl	80002a0 <__aeabi_uldivmod>
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	4b61      	ldr	r3, [pc, #388]	@ (80085ac <UART_SetConfig+0x2d4>)
 8008426:	fba3 2302 	umull	r2, r3, r3, r2
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	011c      	lsls	r4, r3, #4
 800842e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008432:	2200      	movs	r2, #0
 8008434:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008438:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800843c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008440:	4642      	mov	r2, r8
 8008442:	464b      	mov	r3, r9
 8008444:	1891      	adds	r1, r2, r2
 8008446:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008448:	415b      	adcs	r3, r3
 800844a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800844c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008450:	4641      	mov	r1, r8
 8008452:	eb12 0a01 	adds.w	sl, r2, r1
 8008456:	4649      	mov	r1, r9
 8008458:	eb43 0b01 	adc.w	fp, r3, r1
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800846c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008470:	4692      	mov	sl, r2
 8008472:	469b      	mov	fp, r3
 8008474:	4643      	mov	r3, r8
 8008476:	eb1a 0303 	adds.w	r3, sl, r3
 800847a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800847e:	464b      	mov	r3, r9
 8008480:	eb4b 0303 	adc.w	r3, fp, r3
 8008484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008494:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800849c:	460b      	mov	r3, r1
 800849e:	18db      	adds	r3, r3, r3
 80084a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80084a2:	4613      	mov	r3, r2
 80084a4:	eb42 0303 	adc.w	r3, r2, r3
 80084a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084b2:	f7f7 fef5 	bl	80002a0 <__aeabi_uldivmod>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	4b3b      	ldr	r3, [pc, #236]	@ (80085ac <UART_SetConfig+0x2d4>)
 80084be:	fba3 2301 	umull	r2, r3, r3, r1
 80084c2:	095b      	lsrs	r3, r3, #5
 80084c4:	2264      	movs	r2, #100	@ 0x64
 80084c6:	fb02 f303 	mul.w	r3, r2, r3
 80084ca:	1acb      	subs	r3, r1, r3
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80084d2:	4b36      	ldr	r3, [pc, #216]	@ (80085ac <UART_SetConfig+0x2d4>)
 80084d4:	fba3 2302 	umull	r2, r3, r3, r2
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80084e0:	441c      	add	r4, r3
 80084e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80084ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80084f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80084f4:	4642      	mov	r2, r8
 80084f6:	464b      	mov	r3, r9
 80084f8:	1891      	adds	r1, r2, r2
 80084fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80084fc:	415b      	adcs	r3, r3
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008504:	4641      	mov	r1, r8
 8008506:	1851      	adds	r1, r2, r1
 8008508:	6339      	str	r1, [r7, #48]	@ 0x30
 800850a:	4649      	mov	r1, r9
 800850c:	414b      	adcs	r3, r1
 800850e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	f04f 0300 	mov.w	r3, #0
 8008518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800851c:	4659      	mov	r1, fp
 800851e:	00cb      	lsls	r3, r1, #3
 8008520:	4651      	mov	r1, sl
 8008522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008526:	4651      	mov	r1, sl
 8008528:	00ca      	lsls	r2, r1, #3
 800852a:	4610      	mov	r0, r2
 800852c:	4619      	mov	r1, r3
 800852e:	4603      	mov	r3, r0
 8008530:	4642      	mov	r2, r8
 8008532:	189b      	adds	r3, r3, r2
 8008534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008538:	464b      	mov	r3, r9
 800853a:	460a      	mov	r2, r1
 800853c:	eb42 0303 	adc.w	r3, r2, r3
 8008540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008550:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008558:	460b      	mov	r3, r1
 800855a:	18db      	adds	r3, r3, r3
 800855c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800855e:	4613      	mov	r3, r2
 8008560:	eb42 0303 	adc.w	r3, r2, r3
 8008564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800856a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800856e:	f7f7 fe97 	bl	80002a0 <__aeabi_uldivmod>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4b0d      	ldr	r3, [pc, #52]	@ (80085ac <UART_SetConfig+0x2d4>)
 8008578:	fba3 1302 	umull	r1, r3, r3, r2
 800857c:	095b      	lsrs	r3, r3, #5
 800857e:	2164      	movs	r1, #100	@ 0x64
 8008580:	fb01 f303 	mul.w	r3, r1, r3
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	3332      	adds	r3, #50	@ 0x32
 800858a:	4a08      	ldr	r2, [pc, #32]	@ (80085ac <UART_SetConfig+0x2d4>)
 800858c:	fba2 2303 	umull	r2, r3, r2, r3
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	f003 0207 	and.w	r2, r3, #7
 8008596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4422      	add	r2, r4
 800859e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085a0:	e106      	b.n	80087b0 <UART_SetConfig+0x4d8>
 80085a2:	bf00      	nop
 80085a4:	40011000 	.word	0x40011000
 80085a8:	40011400 	.word	0x40011400
 80085ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085b4:	2200      	movs	r2, #0
 80085b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085c2:	4642      	mov	r2, r8
 80085c4:	464b      	mov	r3, r9
 80085c6:	1891      	adds	r1, r2, r2
 80085c8:	6239      	str	r1, [r7, #32]
 80085ca:	415b      	adcs	r3, r3
 80085cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80085ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80085d2:	4641      	mov	r1, r8
 80085d4:	1854      	adds	r4, r2, r1
 80085d6:	4649      	mov	r1, r9
 80085d8:	eb43 0501 	adc.w	r5, r3, r1
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	f04f 0300 	mov.w	r3, #0
 80085e4:	00eb      	lsls	r3, r5, #3
 80085e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80085ea:	00e2      	lsls	r2, r4, #3
 80085ec:	4614      	mov	r4, r2
 80085ee:	461d      	mov	r5, r3
 80085f0:	4643      	mov	r3, r8
 80085f2:	18e3      	adds	r3, r4, r3
 80085f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80085f8:	464b      	mov	r3, r9
 80085fa:	eb45 0303 	adc.w	r3, r5, r3
 80085fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800860e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008612:	f04f 0200 	mov.w	r2, #0
 8008616:	f04f 0300 	mov.w	r3, #0
 800861a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800861e:	4629      	mov	r1, r5
 8008620:	008b      	lsls	r3, r1, #2
 8008622:	4621      	mov	r1, r4
 8008624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008628:	4621      	mov	r1, r4
 800862a:	008a      	lsls	r2, r1, #2
 800862c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008630:	f7f7 fe36 	bl	80002a0 <__aeabi_uldivmod>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4b60      	ldr	r3, [pc, #384]	@ (80087bc <UART_SetConfig+0x4e4>)
 800863a:	fba3 2302 	umull	r2, r3, r3, r2
 800863e:	095b      	lsrs	r3, r3, #5
 8008640:	011c      	lsls	r4, r3, #4
 8008642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008646:	2200      	movs	r2, #0
 8008648:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800864c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008654:	4642      	mov	r2, r8
 8008656:	464b      	mov	r3, r9
 8008658:	1891      	adds	r1, r2, r2
 800865a:	61b9      	str	r1, [r7, #24]
 800865c:	415b      	adcs	r3, r3
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008664:	4641      	mov	r1, r8
 8008666:	1851      	adds	r1, r2, r1
 8008668:	6139      	str	r1, [r7, #16]
 800866a:	4649      	mov	r1, r9
 800866c:	414b      	adcs	r3, r1
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	f04f 0200 	mov.w	r2, #0
 8008674:	f04f 0300 	mov.w	r3, #0
 8008678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800867c:	4659      	mov	r1, fp
 800867e:	00cb      	lsls	r3, r1, #3
 8008680:	4651      	mov	r1, sl
 8008682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008686:	4651      	mov	r1, sl
 8008688:	00ca      	lsls	r2, r1, #3
 800868a:	4610      	mov	r0, r2
 800868c:	4619      	mov	r1, r3
 800868e:	4603      	mov	r3, r0
 8008690:	4642      	mov	r2, r8
 8008692:	189b      	adds	r3, r3, r2
 8008694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008698:	464b      	mov	r3, r9
 800869a:	460a      	mov	r2, r1
 800869c:	eb42 0303 	adc.w	r3, r2, r3
 80086a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086bc:	4649      	mov	r1, r9
 80086be:	008b      	lsls	r3, r1, #2
 80086c0:	4641      	mov	r1, r8
 80086c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c6:	4641      	mov	r1, r8
 80086c8:	008a      	lsls	r2, r1, #2
 80086ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80086ce:	f7f7 fde7 	bl	80002a0 <__aeabi_uldivmod>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	4b38      	ldr	r3, [pc, #224]	@ (80087bc <UART_SetConfig+0x4e4>)
 80086da:	fba3 2301 	umull	r2, r3, r3, r1
 80086de:	095b      	lsrs	r3, r3, #5
 80086e0:	2264      	movs	r2, #100	@ 0x64
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	1acb      	subs	r3, r1, r3
 80086e8:	011b      	lsls	r3, r3, #4
 80086ea:	3332      	adds	r3, #50	@ 0x32
 80086ec:	4a33      	ldr	r2, [pc, #204]	@ (80087bc <UART_SetConfig+0x4e4>)
 80086ee:	fba2 2303 	umull	r2, r3, r2, r3
 80086f2:	095b      	lsrs	r3, r3, #5
 80086f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80086f8:	441c      	add	r4, r3
 80086fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086fe:	2200      	movs	r2, #0
 8008700:	673b      	str	r3, [r7, #112]	@ 0x70
 8008702:	677a      	str	r2, [r7, #116]	@ 0x74
 8008704:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008708:	4642      	mov	r2, r8
 800870a:	464b      	mov	r3, r9
 800870c:	1891      	adds	r1, r2, r2
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	415b      	adcs	r3, r3
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008718:	4641      	mov	r1, r8
 800871a:	1851      	adds	r1, r2, r1
 800871c:	6039      	str	r1, [r7, #0]
 800871e:	4649      	mov	r1, r9
 8008720:	414b      	adcs	r3, r1
 8008722:	607b      	str	r3, [r7, #4]
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	f04f 0300 	mov.w	r3, #0
 800872c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008730:	4659      	mov	r1, fp
 8008732:	00cb      	lsls	r3, r1, #3
 8008734:	4651      	mov	r1, sl
 8008736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800873a:	4651      	mov	r1, sl
 800873c:	00ca      	lsls	r2, r1, #3
 800873e:	4610      	mov	r0, r2
 8008740:	4619      	mov	r1, r3
 8008742:	4603      	mov	r3, r0
 8008744:	4642      	mov	r2, r8
 8008746:	189b      	adds	r3, r3, r2
 8008748:	66bb      	str	r3, [r7, #104]	@ 0x68
 800874a:	464b      	mov	r3, r9
 800874c:	460a      	mov	r2, r1
 800874e:	eb42 0303 	adc.w	r3, r2, r3
 8008752:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	663b      	str	r3, [r7, #96]	@ 0x60
 800875e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800876c:	4649      	mov	r1, r9
 800876e:	008b      	lsls	r3, r1, #2
 8008770:	4641      	mov	r1, r8
 8008772:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008776:	4641      	mov	r1, r8
 8008778:	008a      	lsls	r2, r1, #2
 800877a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800877e:	f7f7 fd8f 	bl	80002a0 <__aeabi_uldivmod>
 8008782:	4602      	mov	r2, r0
 8008784:	460b      	mov	r3, r1
 8008786:	4b0d      	ldr	r3, [pc, #52]	@ (80087bc <UART_SetConfig+0x4e4>)
 8008788:	fba3 1302 	umull	r1, r3, r3, r2
 800878c:	095b      	lsrs	r3, r3, #5
 800878e:	2164      	movs	r1, #100	@ 0x64
 8008790:	fb01 f303 	mul.w	r3, r1, r3
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	3332      	adds	r3, #50	@ 0x32
 800879a:	4a08      	ldr	r2, [pc, #32]	@ (80087bc <UART_SetConfig+0x4e4>)
 800879c:	fba2 2303 	umull	r2, r3, r2, r3
 80087a0:	095b      	lsrs	r3, r3, #5
 80087a2:	f003 020f 	and.w	r2, r3, #15
 80087a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4422      	add	r2, r4
 80087ae:	609a      	str	r2, [r3, #8]
}
 80087b0:	bf00      	nop
 80087b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087b6:	46bd      	mov	sp, r7
 80087b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087bc:	51eb851f 	.word	0x51eb851f

080087c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80087c0:	b084      	sub	sp, #16
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	f107 001c 	add.w	r0, r7, #28
 80087ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80087d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80087d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80087da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80087de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80087e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80087e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80087e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80087e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80087ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80087fa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3714      	adds	r7, #20
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	b004      	add	sp, #16
 8008814:	4770      	bx	lr

08008816 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008852:	b480      	push	{r7}
 8008854:	b083      	sub	sp, #12
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2203      	movs	r2, #3
 800885e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0303 	and.w	r3, r3, #3
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80088a8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80088ae:	431a      	orrs	r2, r3
                       Command->CPSM);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80088b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80088c4:	f023 030f 	bic.w	r3, r3, #15
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	b2db      	uxtb	r3, r3
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	3314      	adds	r3, #20
 8008906:	461a      	mov	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	4413      	add	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
}  
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	685a      	ldr	r2, [r3, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008944:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800894a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008950:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800895c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008968:	2300      	movs	r3, #0

}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b088      	sub	sp, #32
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008984:	2310      	movs	r3, #16
 8008986:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008988:	2340      	movs	r3, #64	@ 0x40
 800898a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008994:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008996:	f107 0308 	add.w	r3, r7, #8
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff ff74 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80089a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089a6:	2110      	movs	r1, #16
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fa19 	bl	8008de0 <SDMMC_GetCmdResp1>
 80089ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089b0:	69fb      	ldr	r3, [r7, #28]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b088      	sub	sp, #32
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80089c8:	2311      	movs	r3, #17
 80089ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089cc:	2340      	movs	r3, #64	@ 0x40
 80089ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff ff52 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80089e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089ea:	2111      	movs	r1, #17
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f9f7 	bl	8008de0 <SDMMC_GetCmdResp1>
 80089f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089f4:	69fb      	ldr	r3, [r7, #28]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3720      	adds	r7, #32
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b088      	sub	sp, #32
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008a0c:	2312      	movs	r3, #18
 8008a0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a10:	2340      	movs	r3, #64	@ 0x40
 8008a12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a14:	2300      	movs	r3, #0
 8008a16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a1e:	f107 0308 	add.w	r3, r7, #8
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7ff ff30 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a2e:	2112      	movs	r1, #18
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f9d5 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008a36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a38:	69fb      	ldr	r3, [r7, #28]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3720      	adds	r7, #32
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b088      	sub	sp, #32
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008a50:	2318      	movs	r3, #24
 8008a52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a54:	2340      	movs	r3, #64	@ 0x40
 8008a56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff ff0e 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a72:	2118      	movs	r1, #24
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f9b3 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008a7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3720      	adds	r7, #32
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b088      	sub	sp, #32
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008a94:	2319      	movs	r3, #25
 8008a96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a98:	2340      	movs	r3, #64	@ 0x40
 8008a9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008aa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008aa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff feec 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ab6:	2119      	movs	r1, #25
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f991 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008abe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ad8:	230c      	movs	r3, #12
 8008ada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008adc:	2340      	movs	r3, #64	@ 0x40
 8008ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ae8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aea:	f107 0308 	add.w	r3, r7, #8
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff feca 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008af6:	4a05      	ldr	r2, [pc, #20]	@ (8008b0c <SDMMC_CmdStopTransfer+0x40>)
 8008af8:	210c      	movs	r1, #12
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f970 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008b00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b02:	69fb      	ldr	r3, [r7, #28]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	05f5e100 	.word	0x05f5e100

08008b10 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b08a      	sub	sp, #40	@ 0x28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008b20:	2307      	movs	r3, #7
 8008b22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b24:	2340      	movs	r3, #64	@ 0x40
 8008b26:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b30:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b32:	f107 0310 	add.w	r3, r7, #16
 8008b36:	4619      	mov	r1, r3
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff fea6 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b42:	2107      	movs	r1, #7
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 f94b 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008b4a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3728      	adds	r7, #40	@ 0x28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b088      	sub	sp, #32
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008b66:	2300      	movs	r3, #0
 8008b68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b74:	f107 0308 	add.w	r3, r7, #8
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7ff fe85 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fb65 	bl	8009250 <SDMMC_GetCmdError>
 8008b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b88:	69fb      	ldr	r3, [r7, #28]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3720      	adds	r7, #32
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b088      	sub	sp, #32
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008b9a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ba4:	2340      	movs	r3, #64	@ 0x40
 8008ba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f7ff fe66 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 faf8 	bl	80091b4 <SDMMC_GetCmdResp7>
 8008bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3720      	adds	r7, #32
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008bde:	2337      	movs	r3, #55	@ 0x37
 8008be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008be2:	2340      	movs	r3, #64	@ 0x40
 8008be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008be6:	2300      	movs	r3, #0
 8008be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bf0:	f107 0308 	add.w	r3, r7, #8
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff fe47 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c00:	2137      	movs	r1, #55	@ 0x37
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f8ec 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008c08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c24:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008c2a:	2329      	movs	r3, #41	@ 0x29
 8008c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c2e:	2340      	movs	r3, #64	@ 0x40
 8008c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c3c:	f107 0308 	add.w	r3, r7, #8
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f7ff fe21 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f9ff 	bl	800904c <SDMMC_GetCmdResp3>
 8008c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c50:	69fb      	ldr	r3, [r7, #28]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3720      	adds	r7, #32
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b088      	sub	sp, #32
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008c68:	2306      	movs	r3, #6
 8008c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c6c:	2340      	movs	r3, #64	@ 0x40
 8008c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c7a:	f107 0308 	add.w	r3, r7, #8
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff fe02 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c8a:	2106      	movs	r1, #6
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f8a7 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c94:	69fb      	ldr	r3, [r7, #28]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3720      	adds	r7, #32
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b088      	sub	sp, #32
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008caa:	2333      	movs	r3, #51	@ 0x33
 8008cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cae:	2340      	movs	r3, #64	@ 0x40
 8008cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cbc:	f107 0308 	add.w	r3, r7, #8
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff fde1 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ccc:	2133      	movs	r1, #51	@ 0x33
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f886 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3720      	adds	r7, #32
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b088      	sub	sp, #32
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008cec:	2302      	movs	r3, #2
 8008cee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008cf0:	23c0      	movs	r3, #192	@ 0xc0
 8008cf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cfe:	f107 0308 	add.w	r3, r7, #8
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff fdc0 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f956 	bl	8008fbc <SDMMC_GetCmdResp2>
 8008d10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d12:	69fb      	ldr	r3, [r7, #28]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b088      	sub	sp, #32
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008d2a:	2309      	movs	r3, #9
 8008d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008d2e:	23c0      	movs	r3, #192	@ 0xc0
 8008d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d32:	2300      	movs	r3, #0
 8008d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d3c:	f107 0308 	add.w	r3, r7, #8
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7ff fda1 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f937 	bl	8008fbc <SDMMC_GetCmdResp2>
 8008d4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d50:	69fb      	ldr	r3, [r7, #28]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3720      	adds	r7, #32
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b088      	sub	sp, #32
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d6c:	2340      	movs	r3, #64	@ 0x40
 8008d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff fd82 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	2103      	movs	r1, #3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f99c 	bl	80090c8 <SDMMC_GetCmdResp6>
 8008d90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d92:	69fb      	ldr	r3, [r7, #28]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3720      	adds	r7, #32
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008daa:	230d      	movs	r3, #13
 8008dac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dae:	2340      	movs	r3, #64	@ 0x40
 8008db0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7ff fd61 	bl	800888a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dcc:	210d      	movs	r1, #13
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f806 	bl	8008de0 <SDMMC_GetCmdResp1>
 8008dd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3720      	adds	r7, #32
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b088      	sub	sp, #32
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	460b      	mov	r3, r1
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008dee:	4b70      	ldr	r3, [pc, #448]	@ (8008fb0 <SDMMC_GetCmdResp1+0x1d0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a70      	ldr	r2, [pc, #448]	@ (8008fb4 <SDMMC_GetCmdResp1+0x1d4>)
 8008df4:	fba2 2303 	umull	r2, r3, r2, r3
 8008df8:	0a5a      	lsrs	r2, r3, #9
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	fb02 f303 	mul.w	r3, r2, r3
 8008e00:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	1e5a      	subs	r2, r3, #1
 8008e06:	61fa      	str	r2, [r7, #28]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008e10:	e0c9      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e16:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0ef      	beq.n	8008e02 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ea      	bne.n	8008e02 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e30:	f003 0304 	and.w	r3, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e3e:	2304      	movs	r3, #4
 8008e40:	e0b1      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2201      	movs	r2, #1
 8008e52:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e0a6      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	22c5      	movs	r2, #197	@ 0xc5
 8008e5c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff fd3d 	bl	80088de <SDIO_GetCommandResponse>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d001      	beq.n	8008e72 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e099      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008e72:	2100      	movs	r1, #0
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f7ff fd3f 	bl	80088f8 <SDIO_GetResponse>
 8008e7a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8008fb8 <SDMMC_GetCmdResp1+0x1d8>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	e08d      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da02      	bge.n	8008e96 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008e90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e94:	e087      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ea0:	2340      	movs	r3, #64	@ 0x40
 8008ea2:	e080      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008eae:	2380      	movs	r3, #128	@ 0x80
 8008eb0:	e079      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008ebc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ec0:	e071      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008ecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ed0:	e069      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ee0:	e061      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008eec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008ef0:	e059      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f00:	e051      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d002      	beq.n	8008f12 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008f10:	e049      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008f1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008f20:	e041      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f30:	e039      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008f3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008f40:	e031      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d002      	beq.n	8008f52 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008f4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008f50:	e029      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008f5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f60:	e021      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008f6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008f70:	e019      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008f7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008f80:	e011      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008f8c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008f90:	e009      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008f9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008fa0:	e001      	b.n	8008fa6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008fa2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3720      	adds	r7, #32
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	2000000c 	.word	0x2000000c
 8008fb4:	10624dd3 	.word	0x10624dd3
 8008fb8:	fdffe008 	.word	0xfdffe008

08008fbc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008fc4:	4b1f      	ldr	r3, [pc, #124]	@ (8009044 <SDMMC_GetCmdResp2+0x88>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8009048 <SDMMC_GetCmdResp2+0x8c>)
 8008fca:	fba2 2303 	umull	r2, r3, r2, r3
 8008fce:	0a5b      	lsrs	r3, r3, #9
 8008fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fd4:	fb02 f303 	mul.w	r3, r2, r3
 8008fd8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	1e5a      	subs	r2, r3, #1
 8008fde:	60fa      	str	r2, [r7, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fe4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008fe8:	e026      	b.n	8009038 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d0ef      	beq.n	8008fda <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1ea      	bne.n	8008fda <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d004      	beq.n	800901a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2204      	movs	r2, #4
 8009014:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009016:	2304      	movs	r3, #4
 8009018:	e00e      	b.n	8009038 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d004      	beq.n	8009030 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800902c:	2301      	movs	r3, #1
 800902e:	e003      	b.n	8009038 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	22c5      	movs	r2, #197	@ 0xc5
 8009034:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	2000000c 	.word	0x2000000c
 8009048:	10624dd3 	.word	0x10624dd3

0800904c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009054:	4b1a      	ldr	r3, [pc, #104]	@ (80090c0 <SDMMC_GetCmdResp3+0x74>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a1a      	ldr	r2, [pc, #104]	@ (80090c4 <SDMMC_GetCmdResp3+0x78>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	0a5b      	lsrs	r3, r3, #9
 8009060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009064:	fb02 f303 	mul.w	r3, r2, r3
 8009068:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	1e5a      	subs	r2, r3, #1
 800906e:	60fa      	str	r2, [r7, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d102      	bne.n	800907a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009074:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009078:	e01b      	b.n	80090b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800907e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0ef      	beq.n	800906a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1ea      	bne.n	800906a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d004      	beq.n	80090aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2204      	movs	r2, #4
 80090a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090a6:	2304      	movs	r3, #4
 80090a8:	e003      	b.n	80090b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	22c5      	movs	r2, #197	@ 0xc5
 80090ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	2000000c 	.word	0x2000000c
 80090c4:	10624dd3 	.word	0x10624dd3

080090c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	460b      	mov	r3, r1
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090d6:	4b35      	ldr	r3, [pc, #212]	@ (80091ac <SDMMC_GetCmdResp6+0xe4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a35      	ldr	r2, [pc, #212]	@ (80091b0 <SDMMC_GetCmdResp6+0xe8>)
 80090dc:	fba2 2303 	umull	r2, r3, r2, r3
 80090e0:	0a5b      	lsrs	r3, r3, #9
 80090e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090e6:	fb02 f303 	mul.w	r3, r2, r3
 80090ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	1e5a      	subs	r2, r3, #1
 80090f0:	61fa      	str	r2, [r7, #28]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d102      	bne.n	80090fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80090fa:	e052      	b.n	80091a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009100:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009108:	2b00      	cmp	r3, #0
 800910a:	d0ef      	beq.n	80090ec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1ea      	bne.n	80090ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	d004      	beq.n	800912c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2204      	movs	r2, #4
 8009126:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009128:	2304      	movs	r3, #4
 800912a:	e03a      	b.n	80091a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800913e:	2301      	movs	r3, #1
 8009140:	e02f      	b.n	80091a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f7ff fbcb 	bl	80088de <SDIO_GetCommandResponse>
 8009148:	4603      	mov	r3, r0
 800914a:	461a      	mov	r2, r3
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	4293      	cmp	r3, r2
 8009150:	d001      	beq.n	8009156 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009152:	2301      	movs	r3, #1
 8009154:	e025      	b.n	80091a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	22c5      	movs	r2, #197	@ 0xc5
 800915a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800915c:	2100      	movs	r1, #0
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f7ff fbca 	bl	80088f8 <SDIO_GetResponse>
 8009164:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	0c1b      	lsrs	r3, r3, #16
 8009174:	b29a      	uxth	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800917a:	2300      	movs	r3, #0
 800917c:	e011      	b.n	80091a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009188:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800918c:	e009      	b.n	80091a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800919c:	e001      	b.n	80091a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800919e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3720      	adds	r7, #32
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	2000000c 	.word	0x2000000c
 80091b0:	10624dd3 	.word	0x10624dd3

080091b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80091bc:	4b22      	ldr	r3, [pc, #136]	@ (8009248 <SDMMC_GetCmdResp7+0x94>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a22      	ldr	r2, [pc, #136]	@ (800924c <SDMMC_GetCmdResp7+0x98>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	0a5b      	lsrs	r3, r3, #9
 80091c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091cc:	fb02 f303 	mul.w	r3, r2, r3
 80091d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	1e5a      	subs	r2, r3, #1
 80091d6:	60fa      	str	r2, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091e0:	e02c      	b.n	800923c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0ef      	beq.n	80091d2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1ea      	bne.n	80091d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009200:	f003 0304 	and.w	r3, r3, #4
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2204      	movs	r2, #4
 800920c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800920e:	2304      	movs	r3, #4
 8009210:	e014      	b.n	800923c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d004      	beq.n	8009228 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009224:	2301      	movs	r3, #1
 8009226:	e009      	b.n	800923c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800922c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2240      	movs	r2, #64	@ 0x40
 8009238:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800923a:	2300      	movs	r3, #0
  
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	2000000c 	.word	0x2000000c
 800924c:	10624dd3 	.word	0x10624dd3

08009250 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009258:	4b11      	ldr	r3, [pc, #68]	@ (80092a0 <SDMMC_GetCmdError+0x50>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a11      	ldr	r2, [pc, #68]	@ (80092a4 <SDMMC_GetCmdError+0x54>)
 800925e:	fba2 2303 	umull	r2, r3, r2, r3
 8009262:	0a5b      	lsrs	r3, r3, #9
 8009264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009268:	fb02 f303 	mul.w	r3, r2, r3
 800926c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1e5a      	subs	r2, r3, #1
 8009272:	60fa      	str	r2, [r7, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009278:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800927c:	e009      	b.n	8009292 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0f1      	beq.n	800926e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	22c5      	movs	r2, #197	@ 0xc5
 800928e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	2000000c 	.word	0x2000000c
 80092a4:	10624dd3 	.word	0x10624dd3

080092a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80092ac:	4904      	ldr	r1, [pc, #16]	@ (80092c0 <MX_FATFS_Init+0x18>)
 80092ae:	4805      	ldr	r0, [pc, #20]	@ (80092c4 <MX_FATFS_Init+0x1c>)
 80092b0:	f002 faca 	bl	800b848 <FATFS_LinkDriver>
 80092b4:	4603      	mov	r3, r0
 80092b6:	461a      	mov	r2, r3
 80092b8:	4b03      	ldr	r3, [pc, #12]	@ (80092c8 <MX_FATFS_Init+0x20>)
 80092ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80092bc:	bf00      	nop
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	2001144c 	.word	0x2001144c
 80092c4:	0800d7c0 	.word	0x0800d7c0
 80092c8:	20011448 	.word	0x20011448

080092cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80092d6:	f000 f89e 	bl	8009416 <BSP_SD_IsDetected>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d001      	beq.n	80092e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e005      	b.n	80092f0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80092e4:	4804      	ldr	r0, [pc, #16]	@ (80092f8 <BSP_SD_Init+0x2c>)
 80092e6:	f7fc fa45 	bl	8005774 <HAL_SD_Init>
 80092ea:	4603      	mov	r3, r0
 80092ec:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80092ee:	79fb      	ldrb	r3, [r7, #7]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000224 	.word	0x20000224

080092fc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af02      	add	r7, sp, #8
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	68f9      	ldr	r1, [r7, #12]
 8009318:	4806      	ldr	r0, [pc, #24]	@ (8009334 <BSP_SD_ReadBlocks+0x38>)
 800931a:	f7fc fadb 	bl	80058d4 <HAL_SD_ReadBlocks>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000224 	.word	0x20000224

08009338 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af02      	add	r7, sp, #8
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	4806      	ldr	r0, [pc, #24]	@ (8009370 <BSP_SD_WriteBlocks+0x38>)
 8009356:	f7fc fca3 	bl	8005ca0 <HAL_SD_WriteBlocks>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009364:	7dfb      	ldrb	r3, [r7, #23]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000224 	.word	0x20000224

08009374 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009378:	4805      	ldr	r0, [pc, #20]	@ (8009390 <BSP_SD_GetCardState+0x1c>)
 800937a:	f7fd fa19 	bl	80067b0 <HAL_SD_GetCardState>
 800937e:	4603      	mov	r3, r0
 8009380:	2b04      	cmp	r3, #4
 8009382:	bf14      	ite	ne
 8009384:	2301      	movne	r3, #1
 8009386:	2300      	moveq	r3, #0
 8009388:	b2db      	uxtb	r3, r3
}
 800938a:	4618      	mov	r0, r3
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20000224 	.word	0x20000224

08009394 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800939c:	6879      	ldr	r1, [r7, #4]
 800939e:	4803      	ldr	r0, [pc, #12]	@ (80093ac <BSP_SD_GetCardInfo+0x18>)
 80093a0:	f7fd f940 	bl	8006624 <HAL_SD_GetCardInfo>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	20000224 	.word	0x20000224

080093b0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80093b8:	f000 f818 	bl	80093ec <BSP_SD_AbortCallback>
}
 80093bc:	bf00      	nop
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80093cc:	f000 f815 	bl	80093fa <BSP_SD_WriteCpltCallback>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80093e0:	f000 f812 	bl	8009408 <BSP_SD_ReadCpltCallback>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0

}
 80093f0:	bf00      	nop
 80093f2:	46bd      	mov	sp, r7
 80093f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f8:	4770      	bx	lr

080093fa <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80093fa:	b480      	push	{r7}
 80093fc:	af00      	add	r7, sp, #0

}
 80093fe:	bf00      	nop
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0

}
 800940c:	bf00      	nop
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800941c:	2301      	movs	r3, #1
 800941e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	b2db      	uxtb	r3, r3
}
 8009424:	4618      	mov	r0, r3
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	4603      	mov	r3, r0
 8009438:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800943a:	4b0b      	ldr	r3, [pc, #44]	@ (8009468 <SD_CheckStatus+0x38>)
 800943c:	2201      	movs	r2, #1
 800943e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009440:	f7ff ff98 	bl	8009374 <BSP_SD_GetCardState>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d107      	bne.n	800945a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800944a:	4b07      	ldr	r3, [pc, #28]	@ (8009468 <SD_CheckStatus+0x38>)
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	f023 0301 	bic.w	r3, r3, #1
 8009454:	b2da      	uxtb	r2, r3
 8009456:	4b04      	ldr	r3, [pc, #16]	@ (8009468 <SD_CheckStatus+0x38>)
 8009458:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800945a:	4b03      	ldr	r3, [pc, #12]	@ (8009468 <SD_CheckStatus+0x38>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000015 	.word	0x20000015

0800946c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009476:	4b0b      	ldr	r3, [pc, #44]	@ (80094a4 <SD_initialize+0x38>)
 8009478:	2201      	movs	r2, #1
 800947a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800947c:	f7ff ff26 	bl	80092cc <BSP_SD_Init>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d107      	bne.n	8009496 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	4618      	mov	r0, r3
 800948a:	f7ff ffd1 	bl	8009430 <SD_CheckStatus>
 800948e:	4603      	mov	r3, r0
 8009490:	461a      	mov	r2, r3
 8009492:	4b04      	ldr	r3, [pc, #16]	@ (80094a4 <SD_initialize+0x38>)
 8009494:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009496:	4b03      	ldr	r3, [pc, #12]	@ (80094a4 <SD_initialize+0x38>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	b2db      	uxtb	r3, r3
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20000015 	.word	0x20000015

080094a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff ffbb 	bl	8009430 <SD_CheckStatus>
 80094ba:	4603      	mov	r3, r0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	607a      	str	r2, [r7, #4]
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	4603      	mov	r3, r0
 80094d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80094d8:	f04f 33ff 	mov.w	r3, #4294967295
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	68b8      	ldr	r0, [r7, #8]
 80094e2:	f7ff ff0b 	bl	80092fc <BSP_SD_ReadBlocks>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d107      	bne.n	80094fc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80094ec:	bf00      	nop
 80094ee:	f7ff ff41 	bl	8009374 <BSP_SD_GetCardState>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1fa      	bne.n	80094ee <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3718      	adds	r7, #24
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b086      	sub	sp, #24
 800950a:	af00      	add	r7, sp, #0
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
 8009512:	4603      	mov	r3, r0
 8009514:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	68b8      	ldr	r0, [r7, #8]
 8009524:	f7ff ff08 	bl	8009338 <BSP_SD_WriteBlocks>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d107      	bne.n	800953e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800952e:	bf00      	nop
 8009530:	f7ff ff20 	bl	8009374 <BSP_SD_GetCardState>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1fa      	bne.n	8009530 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800953e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08c      	sub	sp, #48	@ 0x30
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	603a      	str	r2, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
 8009554:	460b      	mov	r3, r1
 8009556:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800955e:	4b25      	ldr	r3, [pc, #148]	@ (80095f4 <SD_ioctl+0xac>)
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <SD_ioctl+0x28>
 800956c:	2303      	movs	r3, #3
 800956e:	e03c      	b.n	80095ea <SD_ioctl+0xa2>

  switch (cmd)
 8009570:	79bb      	ldrb	r3, [r7, #6]
 8009572:	2b03      	cmp	r3, #3
 8009574:	d834      	bhi.n	80095e0 <SD_ioctl+0x98>
 8009576:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <SD_ioctl+0x34>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	0800958d 	.word	0x0800958d
 8009580:	08009595 	.word	0x08009595
 8009584:	080095ad 	.word	0x080095ad
 8009588:	080095c7 	.word	0x080095c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009592:	e028      	b.n	80095e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009594:	f107 030c 	add.w	r3, r7, #12
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff fefb 	bl	8009394 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800959e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80095aa:	e01c      	b.n	80095e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7ff feef 	bl	8009394 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80095b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80095be:	2300      	movs	r3, #0
 80095c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80095c4:	e00f      	b.n	80095e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80095c6:	f107 030c 	add.w	r3, r7, #12
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff fee2 	bl	8009394 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80095d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d2:	0a5a      	lsrs	r2, r3, #9
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80095de:	e002      	b.n	80095e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80095e0:	2304      	movs	r3, #4
 80095e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80095e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3730      	adds	r7, #48	@ 0x30
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20000015 	.word	0x20000015

080095f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	4a08      	ldr	r2, [pc, #32]	@ (8009628 <disk_status+0x30>)
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	79fa      	ldrb	r2, [r7, #7]
 8009610:	4905      	ldr	r1, [pc, #20]	@ (8009628 <disk_status+0x30>)
 8009612:	440a      	add	r2, r1
 8009614:	7a12      	ldrb	r2, [r2, #8]
 8009616:	4610      	mov	r0, r2
 8009618:	4798      	blx	r3
 800961a:	4603      	mov	r3, r0
 800961c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800961e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20011678 	.word	0x20011678

0800962c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	4603      	mov	r3, r0
 8009634:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800963a:	79fb      	ldrb	r3, [r7, #7]
 800963c:	4a0e      	ldr	r2, [pc, #56]	@ (8009678 <disk_initialize+0x4c>)
 800963e:	5cd3      	ldrb	r3, [r2, r3]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d114      	bne.n	800966e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	4a0c      	ldr	r2, [pc, #48]	@ (8009678 <disk_initialize+0x4c>)
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	79fa      	ldrb	r2, [r7, #7]
 8009652:	4909      	ldr	r1, [pc, #36]	@ (8009678 <disk_initialize+0x4c>)
 8009654:	440a      	add	r2, r1
 8009656:	7a12      	ldrb	r2, [r2, #8]
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	4603      	mov	r3, r0
 800965e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009660:	7bfb      	ldrb	r3, [r7, #15]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	4a03      	ldr	r2, [pc, #12]	@ (8009678 <disk_initialize+0x4c>)
 800966a:	2101      	movs	r1, #1
 800966c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20011678 	.word	0x20011678

0800967c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	4603      	mov	r3, r0
 800968a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	4a0a      	ldr	r2, [pc, #40]	@ (80096b8 <disk_read+0x3c>)
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	689c      	ldr	r4, [r3, #8]
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	4a07      	ldr	r2, [pc, #28]	@ (80096b8 <disk_read+0x3c>)
 800969c:	4413      	add	r3, r2
 800969e:	7a18      	ldrb	r0, [r3, #8]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	68b9      	ldr	r1, [r7, #8]
 80096a6:	47a0      	blx	r4
 80096a8:	4603      	mov	r3, r0
 80096aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd90      	pop	{r4, r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20011678 	.word	0x20011678

080096bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80096bc:	b590      	push	{r4, r7, lr}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60b9      	str	r1, [r7, #8]
 80096c4:	607a      	str	r2, [r7, #4]
 80096c6:	603b      	str	r3, [r7, #0]
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	4a0a      	ldr	r2, [pc, #40]	@ (80096f8 <disk_write+0x3c>)
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	68dc      	ldr	r4, [r3, #12]
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4a07      	ldr	r2, [pc, #28]	@ (80096f8 <disk_write+0x3c>)
 80096dc:	4413      	add	r3, r2
 80096de:	7a18      	ldrb	r0, [r3, #8]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	47a0      	blx	r4
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80096ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd90      	pop	{r4, r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20011678 	.word	0x20011678

080096fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	603a      	str	r2, [r7, #0]
 8009706:	71fb      	strb	r3, [r7, #7]
 8009708:	460b      	mov	r3, r1
 800970a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	4a09      	ldr	r2, [pc, #36]	@ (8009734 <disk_ioctl+0x38>)
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	79fa      	ldrb	r2, [r7, #7]
 800971a:	4906      	ldr	r1, [pc, #24]	@ (8009734 <disk_ioctl+0x38>)
 800971c:	440a      	add	r2, r1
 800971e:	7a10      	ldrb	r0, [r2, #8]
 8009720:	79b9      	ldrb	r1, [r7, #6]
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4798      	blx	r3
 8009726:	4603      	mov	r3, r0
 8009728:	73fb      	strb	r3, [r7, #15]
  return res;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	20011678 	.word	0x20011678

08009738 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3301      	adds	r3, #1
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009748:	89fb      	ldrh	r3, [r7, #14]
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	b21a      	sxth	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	b21b      	sxth	r3, r3
 8009754:	4313      	orrs	r3, r2
 8009756:	b21b      	sxth	r3, r3
 8009758:	81fb      	strh	r3, [r7, #14]
	return rv;
 800975a:	89fb      	ldrh	r3, [r7, #14]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	3303      	adds	r3, #3
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	3202      	adds	r2, #2
 8009780:	7812      	ldrb	r2, [r2, #0]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	021b      	lsls	r3, r3, #8
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	3201      	adds	r2, #1
 800978e:	7812      	ldrb	r2, [r2, #0]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	7812      	ldrb	r2, [r2, #0]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
	return rv;
 80097a0:	68fb      	ldr	r3, [r7, #12]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	1c5a      	adds	r2, r3, #1
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	887a      	ldrh	r2, [r7, #2]
 80097c2:	b2d2      	uxtb	r2, r2
 80097c4:	701a      	strb	r2, [r3, #0]
 80097c6:	887b      	ldrh	r3, [r7, #2]
 80097c8:	0a1b      	lsrs	r3, r3, #8
 80097ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	607a      	str	r2, [r7, #4]
 80097d2:	887a      	ldrh	r2, [r7, #2]
 80097d4:	b2d2      	uxtb	r2, r2
 80097d6:	701a      	strb	r2, [r3, #0]
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	b2d2      	uxtb	r2, r2
 80097f8:	701a      	strb	r2, [r3, #0]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	0a1b      	lsrs	r3, r3, #8
 80097fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	0a1b      	lsrs	r3, r3, #8
 8009810:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	1c5a      	adds	r2, r3, #1
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	b2d2      	uxtb	r2, r2
 800982e:	701a      	strb	r2, [r3, #0]
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	617a      	str	r2, [r7, #20]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	b2d2      	uxtb	r2, r2
 8009856:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3b01      	subs	r3, #1
 800985c:	607b      	str	r3, [r7, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1f3      	bne.n	800984c <mem_set+0x10>
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009872:	b480      	push	{r7}
 8009874:	b089      	sub	sp, #36	@ 0x24
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	61fa      	str	r2, [r7, #28]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	4619      	mov	r1, r3
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	61ba      	str	r2, [r7, #24]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	1acb      	subs	r3, r1, r3
 800989e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	607b      	str	r3, [r7, #4]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <mem_cmp+0x40>
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0eb      	beq.n	800988a <mem_cmp+0x18>

	return r;
 80098b2:	697b      	ldr	r3, [r7, #20]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3724      	adds	r7, #36	@ 0x24
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80098ca:	e002      	b.n	80098d2 <chk_chr+0x12>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3301      	adds	r3, #1
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d005      	beq.n	80098e6 <chk_chr+0x26>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	461a      	mov	r2, r3
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d1f2      	bne.n	80098cc <chk_chr+0xc>
	return *str;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	781b      	ldrb	r3, [r3, #0]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
	...

080098f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	e01f      	b.n	8009948 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009908:	4a41      	ldr	r2, [pc, #260]	@ (8009a10 <inc_lock+0x118>)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	4413      	add	r3, r2
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	429a      	cmp	r2, r3
 8009918:	d113      	bne.n	8009942 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800991a:	4a3d      	ldr	r2, [pc, #244]	@ (8009a10 <inc_lock+0x118>)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	4413      	add	r3, r2
 8009922:	3304      	adds	r3, #4
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800992a:	429a      	cmp	r2, r3
 800992c:	d109      	bne.n	8009942 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800992e:	4a38      	ldr	r2, [pc, #224]	@ (8009a10 <inc_lock+0x118>)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	4413      	add	r3, r2
 8009936:	3308      	adds	r3, #8
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800993e:	429a      	cmp	r2, r3
 8009940:	d006      	beq.n	8009950 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3301      	adds	r3, #1
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d9dc      	bls.n	8009908 <inc_lock+0x10>
 800994e:	e000      	b.n	8009952 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009950:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d132      	bne.n	80099be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009958:	2300      	movs	r3, #0
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	e002      	b.n	8009964 <inc_lock+0x6c>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	3301      	adds	r3, #1
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d806      	bhi.n	8009978 <inc_lock+0x80>
 800996a:	4a29      	ldr	r2, [pc, #164]	@ (8009a10 <inc_lock+0x118>)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	4413      	add	r3, r2
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1f2      	bne.n	800995e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2b02      	cmp	r3, #2
 800997c:	d101      	bne.n	8009982 <inc_lock+0x8a>
 800997e:	2300      	movs	r3, #0
 8009980:	e040      	b.n	8009a04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	4922      	ldr	r1, [pc, #136]	@ (8009a10 <inc_lock+0x118>)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	440b      	add	r3, r1
 800998e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	491e      	ldr	r1, [pc, #120]	@ (8009a10 <inc_lock+0x118>)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	011b      	lsls	r3, r3, #4
 800999a:	440b      	add	r3, r1
 800999c:	3304      	adds	r3, #4
 800999e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	695a      	ldr	r2, [r3, #20]
 80099a4:	491a      	ldr	r1, [pc, #104]	@ (8009a10 <inc_lock+0x118>)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	440b      	add	r3, r1
 80099ac:	3308      	adds	r3, #8
 80099ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80099b0:	4a17      	ldr	r2, [pc, #92]	@ (8009a10 <inc_lock+0x118>)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	4413      	add	r3, r2
 80099b8:	330c      	adds	r3, #12
 80099ba:	2200      	movs	r2, #0
 80099bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <inc_lock+0xe0>
 80099c4:	4a12      	ldr	r2, [pc, #72]	@ (8009a10 <inc_lock+0x118>)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	011b      	lsls	r3, r3, #4
 80099ca:	4413      	add	r3, r2
 80099cc:	330c      	adds	r3, #12
 80099ce:	881b      	ldrh	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <inc_lock+0xe0>
 80099d4:	2300      	movs	r3, #0
 80099d6:	e015      	b.n	8009a04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d108      	bne.n	80099f0 <inc_lock+0xf8>
 80099de:	4a0c      	ldr	r2, [pc, #48]	@ (8009a10 <inc_lock+0x118>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	011b      	lsls	r3, r3, #4
 80099e4:	4413      	add	r3, r2
 80099e6:	330c      	adds	r3, #12
 80099e8:	881b      	ldrh	r3, [r3, #0]
 80099ea:	3301      	adds	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	e001      	b.n	80099f4 <inc_lock+0xfc>
 80099f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099f4:	4906      	ldr	r1, [pc, #24]	@ (8009a10 <inc_lock+0x118>)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	011b      	lsls	r3, r3, #4
 80099fa:	440b      	add	r3, r1
 80099fc:	330c      	adds	r3, #12
 80099fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3301      	adds	r3, #1
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20011458 	.word	0x20011458

08009a14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	607b      	str	r3, [r7, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d825      	bhi.n	8009a74 <dec_lock+0x60>
		n = Files[i].ctr;
 8009a28:	4a17      	ldr	r2, [pc, #92]	@ (8009a88 <dec_lock+0x74>)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	011b      	lsls	r3, r3, #4
 8009a2e:	4413      	add	r3, r2
 8009a30:	330c      	adds	r3, #12
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009a36:	89fb      	ldrh	r3, [r7, #14]
 8009a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a3c:	d101      	bne.n	8009a42 <dec_lock+0x2e>
 8009a3e:	2300      	movs	r3, #0
 8009a40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009a42:	89fb      	ldrh	r3, [r7, #14]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d002      	beq.n	8009a4e <dec_lock+0x3a>
 8009a48:	89fb      	ldrh	r3, [r7, #14]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8009a88 <dec_lock+0x74>)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	4413      	add	r3, r2
 8009a56:	330c      	adds	r3, #12
 8009a58:	89fa      	ldrh	r2, [r7, #14]
 8009a5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009a5c:	89fb      	ldrh	r3, [r7, #14]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d105      	bne.n	8009a6e <dec_lock+0x5a>
 8009a62:	4a09      	ldr	r2, [pc, #36]	@ (8009a88 <dec_lock+0x74>)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	4413      	add	r3, r2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	737b      	strb	r3, [r7, #13]
 8009a72:	e001      	b.n	8009a78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009a74:	2302      	movs	r3, #2
 8009a76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009a78:	7b7b      	ldrb	r3, [r7, #13]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	20011458 	.word	0x20011458

08009a8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009a94:	2300      	movs	r3, #0
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e010      	b.n	8009abc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8009ad0 <clear_lock+0x44>)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	011b      	lsls	r3, r3, #4
 8009aa0:	4413      	add	r3, r2
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d105      	bne.n	8009ab6 <clear_lock+0x2a>
 8009aaa:	4a09      	ldr	r2, [pc, #36]	@ (8009ad0 <clear_lock+0x44>)
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	4413      	add	r3, r2
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	3301      	adds	r3, #1
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d9eb      	bls.n	8009a9a <clear_lock+0xe>
	}
}
 8009ac2:	bf00      	nop
 8009ac4:	bf00      	nop
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	20011458 	.word	0x20011458

08009ad4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d034      	beq.n	8009b52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	7858      	ldrb	r0, [r3, #1]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009af8:	2301      	movs	r3, #1
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	f7ff fdde 	bl	80096bc <disk_write>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	73fb      	strb	r3, [r7, #15]
 8009b0a:	e022      	b.n	8009b52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	1ad2      	subs	r2, r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d217      	bcs.n	8009b52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	789b      	ldrb	r3, [r3, #2]
 8009b26:	613b      	str	r3, [r7, #16]
 8009b28:	e010      	b.n	8009b4c <sync_window+0x78>
					wsect += fs->fsize;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6a1b      	ldr	r3, [r3, #32]
 8009b2e:	697a      	ldr	r2, [r7, #20]
 8009b30:	4413      	add	r3, r2
 8009b32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7858      	ldrb	r0, [r3, #1]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b3e:	2301      	movs	r3, #1
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	f7ff fdbb 	bl	80096bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d8eb      	bhi.n	8009b2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009b66:	2300      	movs	r3, #0
 8009b68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d01b      	beq.n	8009bac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff ffad 	bl	8009ad4 <sync_window>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d113      	bne.n	8009bac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	7858      	ldrb	r0, [r3, #1]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009b8e:	2301      	movs	r3, #1
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	f7ff fd73 	bl	800967c <disk_read>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	3b02      	subs	r3, #2
 8009bc4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	3b02      	subs	r3, #2
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d301      	bcc.n	8009bd6 <clust2sect+0x20>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e008      	b.n	8009be8 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	895b      	ldrh	r3, [r3, #10]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	fb03 f202 	mul.w	r2, r3, r2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009be6:	4413      	add	r3, r2
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d904      	bls.n	8009c14 <get_fat+0x20>
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d302      	bcc.n	8009c1a <get_fat+0x26>
		val = 1;	/* Internal error */
 8009c14:	2301      	movs	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
 8009c18:	e0ba      	b.n	8009d90 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	f000 8082 	beq.w	8009d2e <get_fat+0x13a>
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	f300 80a6 	bgt.w	8009d7c <get_fat+0x188>
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d002      	beq.n	8009c3a <get_fat+0x46>
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d055      	beq.n	8009ce4 <get_fat+0xf0>
 8009c38:	e0a0      	b.n	8009d7c <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	60fb      	str	r3, [r7, #12]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	085b      	lsrs	r3, r3, #1
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	4413      	add	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	899b      	ldrh	r3, [r3, #12]
 8009c50:	4619      	mov	r1, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c58:	4413      	add	r3, r2
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6938      	ldr	r0, [r7, #16]
 8009c5e:	f7ff ff7d 	bl	8009b5c <move_window>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f040 808c 	bne.w	8009d82 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	60fa      	str	r2, [r7, #12]
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	8992      	ldrh	r2, [r2, #12]
 8009c74:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c78:	fb01 f202 	mul.w	r2, r1, r2
 8009c7c:	1a9b      	subs	r3, r3, r2
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	4413      	add	r3, r2
 8009c82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009c86:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	899b      	ldrh	r3, [r3, #12]
 8009c90:	4619      	mov	r1, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c98:	4413      	add	r3, r2
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6938      	ldr	r0, [r7, #16]
 8009c9e:	f7ff ff5d 	bl	8009b5c <move_window>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d16e      	bne.n	8009d86 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	899b      	ldrh	r3, [r3, #12]
 8009cac:	461a      	mov	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cb4:	fb01 f202 	mul.w	r2, r1, r2
 8009cb8:	1a9b      	subs	r3, r3, r2
 8009cba:	693a      	ldr	r2, [r7, #16]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009cc2:	021b      	lsls	r3, r3, #8
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	f003 0301 	and.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <get_fat+0xe6>
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	091b      	lsrs	r3, r3, #4
 8009cd8:	e002      	b.n	8009ce0 <get_fat+0xec>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ce0:	617b      	str	r3, [r7, #20]
			break;
 8009ce2:	e055      	b.n	8009d90 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	899b      	ldrh	r3, [r3, #12]
 8009cec:	085b      	lsrs	r3, r3, #1
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cf8:	4413      	add	r3, r2
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	6938      	ldr	r0, [r7, #16]
 8009cfe:	f7ff ff2d 	bl	8009b5c <move_window>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d140      	bne.n	8009d8a <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	005b      	lsls	r3, r3, #1
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	8992      	ldrh	r2, [r2, #12]
 8009d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d1a:	fb00 f202 	mul.w	r2, r0, r2
 8009d1e:	1a9b      	subs	r3, r3, r2
 8009d20:	440b      	add	r3, r1
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7ff fd08 	bl	8009738 <ld_word>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	617b      	str	r3, [r7, #20]
			break;
 8009d2c:	e030      	b.n	8009d90 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	899b      	ldrh	r3, [r3, #12]
 8009d36:	089b      	lsrs	r3, r3, #2
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d42:	4413      	add	r3, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	6938      	ldr	r0, [r7, #16]
 8009d48:	f7ff ff08 	bl	8009b5c <move_window>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d11d      	bne.n	8009d8e <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	8992      	ldrh	r2, [r2, #12]
 8009d60:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d64:	fb00 f202 	mul.w	r2, r0, r2
 8009d68:	1a9b      	subs	r3, r3, r2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff fcfb 	bl	8009768 <ld_dword>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009d78:	617b      	str	r3, [r7, #20]
			break;
 8009d7a:	e009      	b.n	8009d90 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	e006      	b.n	8009d90 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d82:	bf00      	nop
 8009d84:	e004      	b.n	8009d90 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009d86:	bf00      	nop
 8009d88:	e002      	b.n	8009d90 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009d8a:	bf00      	nop
 8009d8c:	e000      	b.n	8009d90 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009d8e:	bf00      	nop
		}
	}

	return val;
 8009d90:	697b      	ldr	r3, [r7, #20]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009d9a:	b590      	push	{r4, r7, lr}
 8009d9c:	b089      	sub	sp, #36	@ 0x24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	60b9      	str	r1, [r7, #8]
 8009da4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009da6:	2302      	movs	r3, #2
 8009da8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	f240 8109 	bls.w	8009fc4 <put_fat+0x22a>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	f080 8103 	bcs.w	8009fc4 <put_fat+0x22a>
		switch (fs->fs_type) {
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	f000 80b6 	beq.w	8009f34 <put_fat+0x19a>
 8009dc8:	2b03      	cmp	r3, #3
 8009dca:	f300 80fb 	bgt.w	8009fc4 <put_fat+0x22a>
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d003      	beq.n	8009dda <put_fat+0x40>
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	f000 8083 	beq.w	8009ede <put_fat+0x144>
 8009dd8:	e0f4      	b.n	8009fc4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	61bb      	str	r3, [r7, #24]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	085b      	lsrs	r3, r3, #1
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	4413      	add	r3, r2
 8009de6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	899b      	ldrh	r3, [r3, #12]
 8009df0:	4619      	mov	r1, r3
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	fbb3 f3f1 	udiv	r3, r3, r1
 8009df8:	4413      	add	r3, r2
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f7ff fead 	bl	8009b5c <move_window>
 8009e02:	4603      	mov	r3, r0
 8009e04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e06:	7ffb      	ldrb	r3, [r7, #31]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f040 80d4 	bne.w	8009fb6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	1c5a      	adds	r2, r3, #1
 8009e18:	61ba      	str	r2, [r7, #24]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	8992      	ldrh	r2, [r2, #12]
 8009e1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e22:	fb00 f202 	mul.w	r2, r0, r2
 8009e26:	1a9b      	subs	r3, r3, r2
 8009e28:	440b      	add	r3, r1
 8009e2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00d      	beq.n	8009e52 <put_fat+0xb8>
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	b25b      	sxtb	r3, r3
 8009e3c:	f003 030f 	and.w	r3, r3, #15
 8009e40:	b25a      	sxtb	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	011b      	lsls	r3, r3, #4
 8009e48:	b25b      	sxtb	r3, r3
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	e001      	b.n	8009e56 <put_fat+0xbc>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	899b      	ldrh	r3, [r3, #12]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	69bb      	ldr	r3, [r7, #24]
 8009e6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e70:	4413      	add	r3, r2
 8009e72:	4619      	mov	r1, r3
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f7ff fe71 	bl	8009b5c <move_window>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009e7e:	7ffb      	ldrb	r3, [r7, #31]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f040 809a 	bne.w	8009fba <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	899b      	ldrh	r3, [r3, #12]
 8009e90:	461a      	mov	r2, r3
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e98:	fb00 f202 	mul.w	r2, r0, r2
 8009e9c:	1a9b      	subs	r3, r3, r2
 8009e9e:	440b      	add	r3, r1
 8009ea0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d003      	beq.n	8009eb4 <put_fat+0x11a>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	091b      	lsrs	r3, r3, #4
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	e00e      	b.n	8009ed2 <put_fat+0x138>
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	b25b      	sxtb	r3, r3
 8009eba:	f023 030f 	bic.w	r3, r3, #15
 8009ebe:	b25a      	sxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	0a1b      	lsrs	r3, r3, #8
 8009ec4:	b25b      	sxtb	r3, r3
 8009ec6:	f003 030f 	and.w	r3, r3, #15
 8009eca:	b25b      	sxtb	r3, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	b25b      	sxtb	r3, r3
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	70da      	strb	r2, [r3, #3]
			break;
 8009edc:	e072      	b.n	8009fc4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	899b      	ldrh	r3, [r3, #12]
 8009ee6:	085b      	lsrs	r3, r3, #1
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	4619      	mov	r1, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ef2:	4413      	add	r3, r2
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f7ff fe30 	bl	8009b5c <move_window>
 8009efc:	4603      	mov	r3, r0
 8009efe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f00:	7ffb      	ldrb	r3, [r7, #31]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d15b      	bne.n	8009fbe <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	8992      	ldrh	r2, [r2, #12]
 8009f14:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f18:	fb00 f202 	mul.w	r2, r0, r2
 8009f1c:	1a9b      	subs	r3, r3, r2
 8009f1e:	440b      	add	r3, r1
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	b292      	uxth	r2, r2
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fc41 	bl	80097ae <st_word>
			fs->wflag = 1;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	70da      	strb	r2, [r3, #3]
			break;
 8009f32:	e047      	b.n	8009fc4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	899b      	ldrh	r3, [r3, #12]
 8009f3c:	089b      	lsrs	r3, r3, #2
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	4619      	mov	r1, r3
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f48:	4413      	add	r3, r2
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fe05 	bl	8009b5c <move_window>
 8009f52:	4603      	mov	r3, r0
 8009f54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009f56:	7ffb      	ldrb	r3, [r7, #31]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d132      	bne.n	8009fc2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	8992      	ldrh	r2, [r2, #12]
 8009f70:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f74:	fb00 f202 	mul.w	r2, r0, r2
 8009f78:	1a9b      	subs	r3, r3, r2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7ff fbf3 	bl	8009768 <ld_dword>
 8009f82:	4603      	mov	r3, r0
 8009f84:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009f88:	4323      	orrs	r3, r4
 8009f8a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	8992      	ldrh	r2, [r2, #12]
 8009f9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f9e:	fb00 f202 	mul.w	r2, r0, r2
 8009fa2:	1a9b      	subs	r3, r3, r2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7ff fc1b 	bl	80097e4 <st_dword>
			fs->wflag = 1;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	70da      	strb	r2, [r3, #3]
			break;
 8009fb4:	e006      	b.n	8009fc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fb6:	bf00      	nop
 8009fb8:	e004      	b.n	8009fc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fba:	bf00      	nop
 8009fbc:	e002      	b.n	8009fc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fbe:	bf00      	nop
 8009fc0:	e000      	b.n	8009fc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009fc2:	bf00      	nop
		}
	}
	return res;
 8009fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3724      	adds	r7, #36	@ 0x24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd90      	pop	{r4, r7, pc}

08009fce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b088      	sub	sp, #32
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10d      	bne.n	800a000 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d004      	beq.n	8009ffa <create_chain+0x2c>
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	69db      	ldr	r3, [r3, #28]
 8009ff4:	69ba      	ldr	r2, [r7, #24]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d31b      	bcc.n	800a032 <create_chain+0x64>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	e018      	b.n	800a032 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff fdf6 	bl	8009bf4 <get_fat>
 800a008:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d801      	bhi.n	800a014 <create_chain+0x46>
 800a010:	2301      	movs	r3, #1
 800a012:	e070      	b.n	800a0f6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d101      	bne.n	800a020 <create_chain+0x52>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	e06a      	b.n	800a0f6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	69db      	ldr	r3, [r3, #28]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	429a      	cmp	r2, r3
 800a028:	d201      	bcs.n	800a02e <create_chain+0x60>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	e063      	b.n	800a0f6 <create_chain+0x128>
		scl = clst;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	3301      	adds	r3, #1
 800a03a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	429a      	cmp	r2, r3
 800a044:	d307      	bcc.n	800a056 <create_chain+0x88>
				ncl = 2;
 800a046:	2302      	movs	r3, #2
 800a048:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a04a:	69fa      	ldr	r2, [r7, #28]
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d901      	bls.n	800a056 <create_chain+0x88>
 800a052:	2300      	movs	r3, #0
 800a054:	e04f      	b.n	800a0f6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a056:	69f9      	ldr	r1, [r7, #28]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7ff fdcb 	bl	8009bf4 <get_fat>
 800a05e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00e      	beq.n	800a084 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d003      	beq.n	800a074 <create_chain+0xa6>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a072:	d101      	bne.n	800a078 <create_chain+0xaa>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	e03e      	b.n	800a0f6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a078:	69fa      	ldr	r2, [r7, #28]
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d1da      	bne.n	800a036 <create_chain+0x68>
 800a080:	2300      	movs	r3, #0
 800a082:	e038      	b.n	800a0f6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a084:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a086:	f04f 32ff 	mov.w	r2, #4294967295
 800a08a:	69f9      	ldr	r1, [r7, #28]
 800a08c:	6938      	ldr	r0, [r7, #16]
 800a08e:	f7ff fe84 	bl	8009d9a <put_fat>
 800a092:	4603      	mov	r3, r0
 800a094:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a096:	7dfb      	ldrb	r3, [r7, #23]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d109      	bne.n	800a0b0 <create_chain+0xe2>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d006      	beq.n	800a0b0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6938      	ldr	r0, [r7, #16]
 800a0a8:	f7ff fe77 	bl	8009d9a <put_fat>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a0b0:	7dfb      	ldrb	r3, [r7, #23]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d116      	bne.n	800a0e4 <create_chain+0x116>
		fs->last_clst = ncl;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	69fa      	ldr	r2, [r7, #28]
 800a0ba:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	699a      	ldr	r2, [r3, #24]
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	3b02      	subs	r3, #2
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d804      	bhi.n	800a0d4 <create_chain+0x106>
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	1e5a      	subs	r2, r3, #1
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	791b      	ldrb	r3, [r3, #4]
 800a0d8:	f043 0301 	orr.w	r3, r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	711a      	strb	r2, [r3, #4]
 800a0e2:	e007      	b.n	800a0f4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d102      	bne.n	800a0f0 <create_chain+0x122>
 800a0ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ee:	e000      	b.n	800a0f2 <create_chain+0x124>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a0f4:	69fb      	ldr	r3, [r7, #28]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3720      	adds	r7, #32
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b086      	sub	sp, #24
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a114:	d204      	bcs.n	800a120 <dir_sdi+0x22>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	f003 031f 	and.w	r3, r3, #31
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a120:	2302      	movs	r3, #2
 800a122:	e071      	b.n	800a208 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d106      	bne.n	800a144 <dir_sdi+0x46>
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d902      	bls.n	800a144 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a142:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10c      	bne.n	800a164 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	095b      	lsrs	r3, r3, #5
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	8912      	ldrh	r2, [r2, #8]
 800a152:	4293      	cmp	r3, r2
 800a154:	d301      	bcc.n	800a15a <dir_sdi+0x5c>
 800a156:	2302      	movs	r3, #2
 800a158:	e056      	b.n	800a208 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	61da      	str	r2, [r3, #28]
 800a162:	e02d      	b.n	800a1c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	895b      	ldrh	r3, [r3, #10]
 800a168:	461a      	mov	r2, r3
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	899b      	ldrh	r3, [r3, #12]
 800a16e:	fb02 f303 	mul.w	r3, r2, r3
 800a172:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a174:	e019      	b.n	800a1aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6979      	ldr	r1, [r7, #20]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff fd3a 	bl	8009bf4 <get_fat>
 800a180:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d101      	bne.n	800a18e <dir_sdi+0x90>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e03c      	b.n	800a208 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d904      	bls.n	800a19e <dir_sdi+0xa0>
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d301      	bcc.n	800a1a2 <dir_sdi+0xa4>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e032      	b.n	800a208 <dir_sdi+0x10a>
			ofs -= csz;
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d2e1      	bcs.n	800a176 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a1b2:	6979      	ldr	r1, [r7, #20]
 800a1b4:	6938      	ldr	r0, [r7, #16]
 800a1b6:	f7ff fcfe 	bl	8009bb6 <clust2sect>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <dir_sdi+0xd4>
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e01a      	b.n	800a208 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	69da      	ldr	r2, [r3, #28]
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	899b      	ldrh	r3, [r3, #12]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1e2:	441a      	add	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	899b      	ldrh	r3, [r3, #12]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1fa:	fb00 f202 	mul.w	r2, r0, r2
 800a1fe:	1a9b      	subs	r3, r3, r2
 800a200:	18ca      	adds	r2, r1, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	3320      	adds	r3, #32
 800a226:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <dir_next+0x28>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a236:	d301      	bcc.n	800a23c <dir_next+0x2c>
 800a238:	2304      	movs	r3, #4
 800a23a:	e0bb      	b.n	800a3b4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	899b      	ldrh	r3, [r3, #12]
 800a240:	461a      	mov	r2, r3
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	fbb3 f1f2 	udiv	r1, r3, r2
 800a248:	fb01 f202 	mul.w	r2, r1, r2
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f040 809d 	bne.w	800a38e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10b      	bne.n	800a27e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	095b      	lsrs	r3, r3, #5
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	8912      	ldrh	r2, [r2, #8]
 800a26e:	4293      	cmp	r3, r2
 800a270:	f0c0 808d 	bcc.w	800a38e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	61da      	str	r2, [r3, #28]
 800a27a:	2304      	movs	r3, #4
 800a27c:	e09a      	b.n	800a3b4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	899b      	ldrh	r3, [r3, #12]
 800a282:	461a      	mov	r2, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	8952      	ldrh	r2, [r2, #10]
 800a28e:	3a01      	subs	r2, #1
 800a290:	4013      	ands	r3, r2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d17b      	bne.n	800a38e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	4619      	mov	r1, r3
 800a29e:	4610      	mov	r0, r2
 800a2a0:	f7ff fca8 	bl	8009bf4 <get_fat>
 800a2a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d801      	bhi.n	800a2b0 <dir_next+0xa0>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e081      	b.n	800a3b4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2b6:	d101      	bne.n	800a2bc <dir_next+0xac>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e07b      	b.n	800a3b4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	697a      	ldr	r2, [r7, #20]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d359      	bcc.n	800a37a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d104      	bne.n	800a2d6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	61da      	str	r2, [r3, #28]
 800a2d2:	2304      	movs	r3, #4
 800a2d4:	e06e      	b.n	800a3b4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	f7ff fe75 	bl	8009fce <create_chain>
 800a2e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <dir_next+0xe0>
 800a2ec:	2307      	movs	r3, #7
 800a2ee:	e061      	b.n	800a3b4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d101      	bne.n	800a2fa <dir_next+0xea>
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	e05c      	b.n	800a3b4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a300:	d101      	bne.n	800a306 <dir_next+0xf6>
 800a302:	2301      	movs	r3, #1
 800a304:	e056      	b.n	800a3b4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7ff fbe4 	bl	8009ad4 <sync_window>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <dir_next+0x106>
 800a312:	2301      	movs	r3, #1
 800a314:	e04e      	b.n	800a3b4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	899b      	ldrh	r3, [r3, #12]
 800a320:	461a      	mov	r2, r3
 800a322:	2100      	movs	r1, #0
 800a324:	f7ff fa8a 	bl	800983c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a328:	2300      	movs	r3, #0
 800a32a:	613b      	str	r3, [r7, #16]
 800a32c:	6979      	ldr	r1, [r7, #20]
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7ff fc41 	bl	8009bb6 <clust2sect>
 800a334:	4602      	mov	r2, r0
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	635a      	str	r2, [r3, #52]	@ 0x34
 800a33a:	e012      	b.n	800a362 <dir_next+0x152>
						fs->wflag = 1;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2201      	movs	r2, #1
 800a340:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f7ff fbc6 	bl	8009ad4 <sync_window>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <dir_next+0x142>
 800a34e:	2301      	movs	r3, #1
 800a350:	e030      	b.n	800a3b4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3301      	adds	r3, #1
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a35c:	1c5a      	adds	r2, r3, #1
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	635a      	str	r2, [r3, #52]	@ 0x34
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	895b      	ldrh	r3, [r3, #10]
 800a366:	461a      	mov	r2, r3
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d3e6      	bcc.n	800a33c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	1ad2      	subs	r2, r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	697a      	ldr	r2, [r7, #20]
 800a37e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a380:	6979      	ldr	r1, [r7, #20]
 800a382:	68f8      	ldr	r0, [r7, #12]
 800a384:	f7ff fc17 	bl	8009bb6 <clust2sect>
 800a388:	4602      	mov	r2, r0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	899b      	ldrh	r3, [r3, #12]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3a6:	fb00 f202 	mul.w	r2, r0, r2
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	18ca      	adds	r2, r1, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3718      	adds	r7, #24
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	331a      	adds	r3, #26
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff f9b4 	bl	8009738 <ld_word>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	781b      	ldrb	r3, [r3, #0]
 800a3d8:	2b03      	cmp	r3, #3
 800a3da:	d109      	bne.n	800a3f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	3314      	adds	r3, #20
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7ff f9a9 	bl	8009738 <ld_word>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	041b      	lsls	r3, r3, #16
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a3fc:	b590      	push	{r4, r7, lr}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	331a      	adds	r3, #26
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff f994 	bl	8009738 <ld_word>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <cmp_lfn+0x1e>
 800a416:	2300      	movs	r3, #0
 800a418:	e059      	b.n	800a4ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a422:	1e5a      	subs	r2, r3, #1
 800a424:	4613      	mov	r3, r2
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a430:	2301      	movs	r3, #1
 800a432:	81fb      	strh	r3, [r7, #14]
 800a434:	2300      	movs	r3, #0
 800a436:	613b      	str	r3, [r7, #16]
 800a438:	e033      	b.n	800a4a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a43a:	4a27      	ldr	r2, [pc, #156]	@ (800a4d8 <cmp_lfn+0xdc>)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	4413      	add	r3, r2
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	461a      	mov	r2, r3
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	4413      	add	r3, r2
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff f975 	bl	8009738 <ld_word>
 800a44e:	4603      	mov	r3, r0
 800a450:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a452:	89fb      	ldrh	r3, [r7, #14]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d01a      	beq.n	800a48e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a45c:	d812      	bhi.n	800a484 <cmp_lfn+0x88>
 800a45e:	89bb      	ldrh	r3, [r7, #12]
 800a460:	4618      	mov	r0, r3
 800a462:	f001 fa3d 	bl	800b8e0 <ff_wtoupper>
 800a466:	4603      	mov	r3, r0
 800a468:	461c      	mov	r4, r3
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	617a      	str	r2, [r7, #20]
 800a470:	005b      	lsls	r3, r3, #1
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	4413      	add	r3, r2
 800a476:	881b      	ldrh	r3, [r3, #0]
 800a478:	4618      	mov	r0, r3
 800a47a:	f001 fa31 	bl	800b8e0 <ff_wtoupper>
 800a47e:	4603      	mov	r3, r0
 800a480:	429c      	cmp	r4, r3
 800a482:	d001      	beq.n	800a488 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a484:	2300      	movs	r3, #0
 800a486:	e022      	b.n	800a4ce <cmp_lfn+0xd2>
			}
			wc = uc;
 800a488:	89bb      	ldrh	r3, [r7, #12]
 800a48a:	81fb      	strh	r3, [r7, #14]
 800a48c:	e006      	b.n	800a49c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a48e:	89bb      	ldrh	r3, [r7, #12]
 800a490:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a494:	4293      	cmp	r3, r2
 800a496:	d001      	beq.n	800a49c <cmp_lfn+0xa0>
 800a498:	2300      	movs	r3, #0
 800a49a:	e018      	b.n	800a4ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	613b      	str	r3, [r7, #16]
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	2b0c      	cmp	r3, #12
 800a4a6:	d9c8      	bls.n	800a43a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00b      	beq.n	800a4cc <cmp_lfn+0xd0>
 800a4b4:	89fb      	ldrh	r3, [r7, #14]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d008      	beq.n	800a4cc <cmp_lfn+0xd0>
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	881b      	ldrh	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d001      	beq.n	800a4cc <cmp_lfn+0xd0>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	e000      	b.n	800a4ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a4cc:	2301      	movs	r3, #1
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	371c      	adds	r7, #28
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd90      	pop	{r4, r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0800d854 	.word	0x0800d854

0800a4dc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	331a      	adds	r3, #26
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7ff f924 	bl	8009738 <ld_word>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <pick_lfn+0x1e>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e04d      	b.n	800a596 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a502:	1e5a      	subs	r2, r3, #1
 800a504:	4613      	mov	r3, r2
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	4413      	add	r3, r2
 800a50e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a510:	2301      	movs	r3, #1
 800a512:	81fb      	strh	r3, [r7, #14]
 800a514:	2300      	movs	r3, #0
 800a516:	613b      	str	r3, [r7, #16]
 800a518:	e028      	b.n	800a56c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a51a:	4a21      	ldr	r2, [pc, #132]	@ (800a5a0 <pick_lfn+0xc4>)
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	4413      	add	r3, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff f905 	bl	8009738 <ld_word>
 800a52e:	4603      	mov	r3, r0
 800a530:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a532:	89fb      	ldrh	r3, [r7, #14]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00f      	beq.n	800a558 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a53c:	d901      	bls.n	800a542 <pick_lfn+0x66>
 800a53e:	2300      	movs	r3, #0
 800a540:	e029      	b.n	800a596 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a542:	89bb      	ldrh	r3, [r7, #12]
 800a544:	81fb      	strh	r3, [r7, #14]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	617a      	str	r2, [r7, #20]
 800a54c:	005b      	lsls	r3, r3, #1
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	89fa      	ldrh	r2, [r7, #14]
 800a554:	801a      	strh	r2, [r3, #0]
 800a556:	e006      	b.n	800a566 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a558:	89bb      	ldrh	r3, [r7, #12]
 800a55a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a55e:	4293      	cmp	r3, r2
 800a560:	d001      	beq.n	800a566 <pick_lfn+0x8a>
 800a562:	2300      	movs	r3, #0
 800a564:	e017      	b.n	800a596 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	3301      	adds	r3, #1
 800a56a:	613b      	str	r3, [r7, #16]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	2b0c      	cmp	r3, #12
 800a570:	d9d3      	bls.n	800a51a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2bfe      	cmp	r3, #254	@ 0xfe
 800a582:	d901      	bls.n	800a588 <pick_lfn+0xac>
 800a584:	2300      	movs	r3, #0
 800a586:	e006      	b.n	800a596 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	4413      	add	r3, r2
 800a590:	2200      	movs	r2, #0
 800a592:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a594:	2301      	movs	r3, #1
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800d854 	.word	0x0800d854

0800a5a4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a5b0:	230b      	movs	r3, #11
 800a5b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	0852      	lsrs	r2, r2, #1
 800a5ba:	01db      	lsls	r3, r3, #7
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	b2da      	uxtb	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	1c59      	adds	r1, r3, #1
 800a5c4:	6079      	str	r1, [r7, #4]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	60bb      	str	r3, [r7, #8]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1ed      	bne.n	800a5b4 <sum_sfn+0x10>
	return sum;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b086      	sub	sp, #24
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a5f0:	2304      	movs	r3, #4
 800a5f2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800a5fa:	23ff      	movs	r3, #255	@ 0xff
 800a5fc:	757b      	strb	r3, [r7, #21]
 800a5fe:	23ff      	movs	r3, #255	@ 0xff
 800a600:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800a602:	e081      	b.n	800a708 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	69db      	ldr	r3, [r3, #28]
 800a608:	4619      	mov	r1, r3
 800a60a:	6938      	ldr	r0, [r7, #16]
 800a60c:	f7ff faa6 	bl	8009b5c <move_window>
 800a610:	4603      	mov	r3, r0
 800a612:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d17c      	bne.n	800a714 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800a622:	7dbb      	ldrb	r3, [r7, #22]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d102      	bne.n	800a62e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a628:	2304      	movs	r3, #4
 800a62a:	75fb      	strb	r3, [r7, #23]
 800a62c:	e077      	b.n	800a71e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	330b      	adds	r3, #11
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a63a:	73fb      	strb	r3, [r7, #15]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7bfa      	ldrb	r2, [r7, #15]
 800a640:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800a642:	7dbb      	ldrb	r3, [r7, #22]
 800a644:	2be5      	cmp	r3, #229	@ 0xe5
 800a646:	d00e      	beq.n	800a666 <dir_read+0x80>
 800a648:	7dbb      	ldrb	r3, [r7, #22]
 800a64a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a64c:	d00b      	beq.n	800a666 <dir_read+0x80>
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	f023 0320 	bic.w	r3, r3, #32
 800a654:	2b08      	cmp	r3, #8
 800a656:	bf0c      	ite	eq
 800a658:	2301      	moveq	r3, #1
 800a65a:	2300      	movne	r3, #0
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	461a      	mov	r2, r3
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	4293      	cmp	r3, r2
 800a664:	d002      	beq.n	800a66c <dir_read+0x86>
				ord = 0xFF;
 800a666:	23ff      	movs	r3, #255	@ 0xff
 800a668:	757b      	strb	r3, [r7, #21]
 800a66a:	e044      	b.n	800a6f6 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
 800a66e:	2b0f      	cmp	r3, #15
 800a670:	d12f      	bne.n	800a6d2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800a672:	7dbb      	ldrb	r3, [r7, #22]
 800a674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00d      	beq.n	800a698 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	7b5b      	ldrb	r3, [r3, #13]
 800a682:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800a684:	7dbb      	ldrb	r3, [r7, #22]
 800a686:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a68a:	75bb      	strb	r3, [r7, #22]
 800a68c:	7dbb      	ldrb	r3, [r7, #22]
 800a68e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	695a      	ldr	r2, [r3, #20]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a698:	7dba      	ldrb	r2, [r7, #22]
 800a69a:	7d7b      	ldrb	r3, [r7, #21]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d115      	bne.n	800a6cc <dir_read+0xe6>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	330d      	adds	r3, #13
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	7d3a      	ldrb	r2, [r7, #20]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d10e      	bne.n	800a6cc <dir_read+0xe6>
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	691a      	ldr	r2, [r3, #16]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	f7ff ff0f 	bl	800a4dc <pick_lfn>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d003      	beq.n	800a6cc <dir_read+0xe6>
 800a6c4:	7d7b      	ldrb	r3, [r7, #21]
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	e000      	b.n	800a6ce <dir_read+0xe8>
 800a6cc:	23ff      	movs	r3, #255	@ 0xff
 800a6ce:	757b      	strb	r3, [r7, #21]
 800a6d0:	e011      	b.n	800a6f6 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800a6d2:	7d7b      	ldrb	r3, [r7, #21]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d109      	bne.n	800a6ec <dir_read+0x106>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7ff ff61 	bl	800a5a4 <sum_sfn>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	7d3b      	ldrb	r3, [r7, #20]
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d015      	beq.n	800a718 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800a6f4:	e010      	b.n	800a718 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7ff fd89 	bl	800a210 <dir_next>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a702:	7dfb      	ldrb	r3, [r7, #23]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <dir_read+0x136>
	while (dp->sect) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	69db      	ldr	r3, [r3, #28]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f47f af79 	bne.w	800a604 <dir_read+0x1e>
 800a712:	e004      	b.n	800a71e <dir_read+0x138>
		if (res != FR_OK) break;
 800a714:	bf00      	nop
 800a716:	e002      	b.n	800a71e <dir_read+0x138>
					break;
 800a718:	bf00      	nop
 800a71a:	e000      	b.n	800a71e <dir_read+0x138>
		if (res != FR_OK) break;
 800a71c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d002      	beq.n	800a72a <dir_read+0x144>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	61da      	str	r2, [r3, #28]
	return res;
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a742:	2100      	movs	r1, #0
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff fcda 	bl	800a0fe <dir_sdi>
 800a74a:	4603      	mov	r3, r0
 800a74c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a74e:	7dfb      	ldrb	r3, [r7, #23]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <dir_find+0x24>
 800a754:	7dfb      	ldrb	r3, [r7, #23]
 800a756:	e0a9      	b.n	800a8ac <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a758:	23ff      	movs	r3, #255	@ 0xff
 800a75a:	753b      	strb	r3, [r7, #20]
 800a75c:	7d3b      	ldrb	r3, [r7, #20]
 800a75e:	757b      	strb	r3, [r7, #21]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f04f 32ff 	mov.w	r2, #4294967295
 800a766:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	4619      	mov	r1, r3
 800a76e:	6938      	ldr	r0, [r7, #16]
 800a770:	f7ff f9f4 	bl	8009b5c <move_window>
 800a774:	4603      	mov	r3, r0
 800a776:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a778:	7dfb      	ldrb	r3, [r7, #23]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 8090 	bne.w	800a8a0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a1b      	ldr	r3, [r3, #32]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a788:	7dbb      	ldrb	r3, [r7, #22]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d102      	bne.n	800a794 <dir_find+0x60>
 800a78e:	2304      	movs	r3, #4
 800a790:	75fb      	strb	r3, [r7, #23]
 800a792:	e08a      	b.n	800a8aa <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a1b      	ldr	r3, [r3, #32]
 800a798:	330b      	adds	r3, #11
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7a0:	73fb      	strb	r3, [r7, #15]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	7bfa      	ldrb	r2, [r7, #15]
 800a7a6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a7a8:	7dbb      	ldrb	r3, [r7, #22]
 800a7aa:	2be5      	cmp	r3, #229	@ 0xe5
 800a7ac:	d007      	beq.n	800a7be <dir_find+0x8a>
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	f003 0308 	and.w	r3, r3, #8
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d009      	beq.n	800a7cc <dir_find+0x98>
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	2b0f      	cmp	r3, #15
 800a7bc:	d006      	beq.n	800a7cc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a7be:	23ff      	movs	r3, #255	@ 0xff
 800a7c0:	757b      	strb	r3, [r7, #21]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a7ca:	e05e      	b.n	800a88a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	2b0f      	cmp	r3, #15
 800a7d0:	d136      	bne.n	800a840 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a7d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d154      	bne.n	800a88a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a7e0:	7dbb      	ldrb	r3, [r7, #22]
 800a7e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1b      	ldr	r3, [r3, #32]
 800a7ee:	7b5b      	ldrb	r3, [r3, #13]
 800a7f0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800a7f2:	7dbb      	ldrb	r3, [r7, #22]
 800a7f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f8:	75bb      	strb	r3, [r7, #22]
 800a7fa:	7dbb      	ldrb	r3, [r7, #22]
 800a7fc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	695a      	ldr	r2, [r3, #20]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800a806:	7dba      	ldrb	r2, [r7, #22]
 800a808:	7d7b      	ldrb	r3, [r7, #21]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d115      	bne.n	800a83a <dir_find+0x106>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	330d      	adds	r3, #13
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	7d3a      	ldrb	r2, [r7, #20]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d10e      	bne.n	800a83a <dir_find+0x106>
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	691a      	ldr	r2, [r3, #16]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	4619      	mov	r1, r3
 800a826:	4610      	mov	r0, r2
 800a828:	f7ff fde8 	bl	800a3fc <cmp_lfn>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <dir_find+0x106>
 800a832:	7d7b      	ldrb	r3, [r7, #21]
 800a834:	3b01      	subs	r3, #1
 800a836:	b2db      	uxtb	r3, r3
 800a838:	e000      	b.n	800a83c <dir_find+0x108>
 800a83a:	23ff      	movs	r3, #255	@ 0xff
 800a83c:	757b      	strb	r3, [r7, #21]
 800a83e:	e024      	b.n	800a88a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a840:	7d7b      	ldrb	r3, [r7, #21]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d109      	bne.n	800a85a <dir_find+0x126>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7ff feaa 	bl	800a5a4 <sum_sfn>
 800a850:	4603      	mov	r3, r0
 800a852:	461a      	mov	r2, r3
 800a854:	7d3b      	ldrb	r3, [r7, #20]
 800a856:	4293      	cmp	r3, r2
 800a858:	d024      	beq.n	800a8a4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <dir_find+0x14a>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a18      	ldr	r0, [r3, #32]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3324      	adds	r3, #36	@ 0x24
 800a870:	220b      	movs	r2, #11
 800a872:	4619      	mov	r1, r3
 800a874:	f7fe fffd 	bl	8009872 <mem_cmp>
 800a878:	4603      	mov	r3, r0
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d014      	beq.n	800a8a8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800a87e:	23ff      	movs	r3, #255	@ 0xff
 800a880:	757b      	strb	r3, [r7, #21]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a88a:	2100      	movs	r1, #0
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff fcbf 	bl	800a210 <dir_next>
 800a892:	4603      	mov	r3, r0
 800a894:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f43f af65 	beq.w	800a768 <dir_find+0x34>
 800a89e:	e004      	b.n	800a8aa <dir_find+0x176>
		if (res != FR_OK) break;
 800a8a0:	bf00      	nop
 800a8a2:	e002      	b.n	800a8aa <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800a8a4:	bf00      	nop
 800a8a6:	e000      	b.n	800a8aa <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800a8a8:	bf00      	nop

	return res;
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3718      	adds	r7, #24
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b088      	sub	sp, #32
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 80ca 	beq.w	800aa68 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8dc:	d032      	beq.n	800a944 <get_fileinfo+0x90>
			i = j = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61bb      	str	r3, [r7, #24]
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a8e6:	e01b      	b.n	800a920 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800a8e8:	89fb      	ldrh	r3, [r7, #14]
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 ffbb 	bl	800b868 <ff_convert>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800a8f6:	89fb      	ldrh	r3, [r7, #14]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <get_fileinfo+0x4e>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	e01a      	b.n	800a938 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	2bfe      	cmp	r3, #254	@ 0xfe
 800a906:	d902      	bls.n	800a90e <get_fileinfo+0x5a>
 800a908:	2300      	movs	r3, #0
 800a90a:	61fb      	str	r3, [r7, #28]
 800a90c:	e014      	b.n	800a938 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	61fa      	str	r2, [r7, #28]
 800a914:	89fa      	ldrh	r2, [r7, #14]
 800a916:	b2d1      	uxtb	r1, r2
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	4413      	add	r3, r2
 800a91c:	460a      	mov	r2, r1
 800a91e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	691a      	ldr	r2, [r3, #16]
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	1c59      	adds	r1, r3, #1
 800a928:	61b9      	str	r1, [r7, #24]
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	4413      	add	r3, r2
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	81fb      	strh	r3, [r7, #14]
 800a932:	89fb      	ldrh	r3, [r7, #14]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1d7      	bne.n	800a8e8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	4413      	add	r3, r2
 800a93e:	3316      	adds	r3, #22
 800a940:	2200      	movs	r2, #0
 800a942:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	61bb      	str	r3, [r7, #24]
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	4413      	add	r3, r2
 800a952:	3316      	adds	r3, #22
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800a958:	e04d      	b.n	800a9f6 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1a      	ldr	r2, [r3, #32]
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	1c59      	adds	r1, r3, #1
 800a962:	61f9      	str	r1, [r7, #28]
 800a964:	4413      	add	r3, r2
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	2b20      	cmp	r3, #32
 800a96e:	d041      	beq.n	800a9f4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a970:	7dfb      	ldrb	r3, [r7, #23]
 800a972:	2b05      	cmp	r3, #5
 800a974:	d101      	bne.n	800a97a <get_fileinfo+0xc6>
 800a976:	23e5      	movs	r3, #229	@ 0xe5
 800a978:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	2b09      	cmp	r3, #9
 800a97e:	d10f      	bne.n	800a9a0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800a980:	89bb      	ldrh	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d105      	bne.n	800a992 <get_fileinfo+0xde>
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	4413      	add	r3, r2
 800a98c:	3316      	adds	r3, #22
 800a98e:	222e      	movs	r2, #46	@ 0x2e
 800a990:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	61ba      	str	r2, [r7, #24]
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	4413      	add	r3, r2
 800a99c:	222e      	movs	r2, #46	@ 0x2e
 800a99e:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	69bb      	ldr	r3, [r7, #24]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	3309      	adds	r3, #9
 800a9a8:	7dfa      	ldrb	r2, [r7, #23]
 800a9aa:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800a9ac:	89bb      	ldrh	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d11c      	bne.n	800a9ec <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800a9b2:	7dfb      	ldrb	r3, [r7, #23]
 800a9b4:	2b40      	cmp	r3, #64	@ 0x40
 800a9b6:	d913      	bls.n	800a9e0 <get_fileinfo+0x12c>
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	2b5a      	cmp	r3, #90	@ 0x5a
 800a9bc:	d810      	bhi.n	800a9e0 <get_fileinfo+0x12c>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	330c      	adds	r3, #12
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	2b08      	cmp	r3, #8
 800a9cc:	d901      	bls.n	800a9d2 <get_fileinfo+0x11e>
 800a9ce:	2310      	movs	r3, #16
 800a9d0:	e000      	b.n	800a9d4 <get_fileinfo+0x120>
 800a9d2:	2308      	movs	r3, #8
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d002      	beq.n	800a9e0 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
 800a9dc:	3320      	adds	r3, #32
 800a9de:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	3316      	adds	r3, #22
 800a9e8:	7dfa      	ldrb	r2, [r7, #23]
 800a9ea:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	61bb      	str	r3, [r7, #24]
 800a9f2:	e000      	b.n	800a9f6 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800a9f4:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	2b0a      	cmp	r3, #10
 800a9fa:	d9ae      	bls.n	800a95a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800a9fc:	89bb      	ldrh	r3, [r7, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10d      	bne.n	800aa1e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	4413      	add	r3, r2
 800aa08:	3316      	adds	r3, #22
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	330c      	adds	r3, #12
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <get_fileinfo+0x16a>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	4413      	add	r3, r2
 800aa24:	3309      	adds	r3, #9
 800aa26:	2200      	movs	r2, #0
 800aa28:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	7ada      	ldrb	r2, [r3, #11]
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a1b      	ldr	r3, [r3, #32]
 800aa38:	331c      	adds	r3, #28
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe fe94 	bl	8009768 <ld_dword>
 800aa40:	4602      	mov	r2, r0
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	3316      	adds	r3, #22
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe fe8b 	bl	8009768 <ld_dword>
 800aa52:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	80da      	strh	r2, [r3, #6]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	0c1b      	lsrs	r3, r3, #16
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	809a      	strh	r2, [r3, #4]
 800aa66:	e000      	b.n	800aa6a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800aa68:	bf00      	nop
}
 800aa6a:	3720      	adds	r7, #32
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b08a      	sub	sp, #40	@ 0x28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	61ba      	str	r2, [r7, #24]
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4413      	add	r3, r2
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800aa9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaa0:	2b1f      	cmp	r3, #31
 800aaa2:	d940      	bls.n	800ab26 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800aaa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaa6:	2b2f      	cmp	r3, #47	@ 0x2f
 800aaa8:	d006      	beq.n	800aab8 <create_name+0x48>
 800aaaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaac:	2b5c      	cmp	r3, #92	@ 0x5c
 800aaae:	d110      	bne.n	800aad2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aab0:	e002      	b.n	800aab8 <create_name+0x48>
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	3301      	adds	r3, #1
 800aab6:	61bb      	str	r3, [r7, #24]
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	4413      	add	r3, r2
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b2f      	cmp	r3, #47	@ 0x2f
 800aac2:	d0f6      	beq.n	800aab2 <create_name+0x42>
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	4413      	add	r3, r2
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b5c      	cmp	r3, #92	@ 0x5c
 800aace:	d0f0      	beq.n	800aab2 <create_name+0x42>
			break;
 800aad0:	e02a      	b.n	800ab28 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2bfe      	cmp	r3, #254	@ 0xfe
 800aad6:	d901      	bls.n	800aadc <create_name+0x6c>
 800aad8:	2306      	movs	r3, #6
 800aada:	e17d      	b.n	800add8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800aadc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800aae2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aae4:	2101      	movs	r1, #1
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 febe 	bl	800b868 <ff_convert>
 800aaec:	4603      	mov	r3, r0
 800aaee:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800aaf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <create_name+0x8a>
 800aaf6:	2306      	movs	r3, #6
 800aaf8:	e16e      	b.n	800add8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800aafa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aafc:	2b7f      	cmp	r3, #127	@ 0x7f
 800aafe:	d809      	bhi.n	800ab14 <create_name+0xa4>
 800ab00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab02:	4619      	mov	r1, r3
 800ab04:	488d      	ldr	r0, [pc, #564]	@ (800ad3c <create_name+0x2cc>)
 800ab06:	f7fe fedb 	bl	80098c0 <chk_chr>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <create_name+0xa4>
 800ab10:	2306      	movs	r3, #6
 800ab12:	e161      	b.n	800add8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	1c5a      	adds	r2, r3, #1
 800ab18:	617a      	str	r2, [r7, #20]
 800ab1a:	005b      	lsls	r3, r3, #1
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ab22:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ab24:	e7b4      	b.n	800aa90 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ab26:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	441a      	add	r2, r3
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ab32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab34:	2b1f      	cmp	r3, #31
 800ab36:	d801      	bhi.n	800ab3c <create_name+0xcc>
 800ab38:	2304      	movs	r3, #4
 800ab3a:	e000      	b.n	800ab3e <create_name+0xce>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ab42:	e011      	b.n	800ab68 <create_name+0xf8>
		w = lfn[di - 1];
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	005b      	lsls	r3, r3, #1
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ab56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab58:	2b20      	cmp	r3, #32
 800ab5a:	d002      	beq.n	800ab62 <create_name+0xf2>
 800ab5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab60:	d106      	bne.n	800ab70 <create_name+0x100>
		di--;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1ea      	bne.n	800ab44 <create_name+0xd4>
 800ab6e:	e000      	b.n	800ab72 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ab70:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	4413      	add	r3, r2
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <create_name+0x118>
 800ab84:	2306      	movs	r3, #6
 800ab86:	e127      	b.n	800add8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3324      	adds	r3, #36	@ 0x24
 800ab8c:	220b      	movs	r2, #11
 800ab8e:	2120      	movs	r1, #32
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7fe fe53 	bl	800983c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ab96:	2300      	movs	r3, #0
 800ab98:	61bb      	str	r3, [r7, #24]
 800ab9a:	e002      	b.n	800aba2 <create_name+0x132>
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	61bb      	str	r3, [r7, #24]
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	4413      	add	r3, r2
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	2b20      	cmp	r3, #32
 800abae:	d0f5      	beq.n	800ab9c <create_name+0x12c>
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	4413      	add	r3, r2
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	2b2e      	cmp	r3, #46	@ 0x2e
 800abbc:	d0ee      	beq.n	800ab9c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d009      	beq.n	800abd8 <create_name+0x168>
 800abc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abc8:	f043 0303 	orr.w	r3, r3, #3
 800abcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800abd0:	e002      	b.n	800abd8 <create_name+0x168>
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	3b01      	subs	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d009      	beq.n	800abf2 <create_name+0x182>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800abe4:	3b01      	subs	r3, #1
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	881b      	ldrh	r3, [r3, #0]
 800abee:	2b2e      	cmp	r3, #46	@ 0x2e
 800abf0:	d1ef      	bne.n	800abd2 <create_name+0x162>

	i = b = 0; ni = 8;
 800abf2:	2300      	movs	r3, #0
 800abf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800abf8:	2300      	movs	r3, #0
 800abfa:	623b      	str	r3, [r7, #32]
 800abfc:	2308      	movs	r3, #8
 800abfe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	61ba      	str	r2, [r7, #24]
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ac10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 8090 	beq.w	800ad38 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ac18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac1a:	2b20      	cmp	r3, #32
 800ac1c:	d006      	beq.n	800ac2c <create_name+0x1bc>
 800ac1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac20:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac22:	d10a      	bne.n	800ac3a <create_name+0x1ca>
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d006      	beq.n	800ac3a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ac2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac30:	f043 0303 	orr.w	r3, r3, #3
 800ac34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac38:	e07d      	b.n	800ad36 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ac3a:	6a3a      	ldr	r2, [r7, #32]
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d203      	bcs.n	800ac4a <create_name+0x1da>
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d123      	bne.n	800ac92 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	2b0b      	cmp	r3, #11
 800ac4e:	d106      	bne.n	800ac5e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ac50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac54:	f043 0303 	orr.w	r3, r3, #3
 800ac58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac5c:	e075      	b.n	800ad4a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d005      	beq.n	800ac72 <create_name+0x202>
 800ac66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac6a:	f043 0303 	orr.w	r3, r3, #3
 800ac6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d866      	bhi.n	800ad48 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	61bb      	str	r3, [r7, #24]
 800ac7e:	2308      	movs	r3, #8
 800ac80:	623b      	str	r3, [r7, #32]
 800ac82:	230b      	movs	r3, #11
 800ac84:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ac86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ac90:	e051      	b.n	800ad36 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ac92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac94:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac96:	d914      	bls.n	800acc2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ac98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 fde3 	bl	800b868 <ff_convert>
 800aca2:	4603      	mov	r3, r0
 800aca4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800aca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d004      	beq.n	800acb6 <create_name+0x246>
 800acac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acae:	3b80      	subs	r3, #128	@ 0x80
 800acb0:	4a23      	ldr	r2, [pc, #140]	@ (800ad40 <create_name+0x2d0>)
 800acb2:	5cd3      	ldrb	r3, [r2, r3]
 800acb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800acb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acba:	f043 0302 	orr.w	r3, r3, #2
 800acbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800acc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <create_name+0x268>
 800acc8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acca:	4619      	mov	r1, r3
 800accc:	481d      	ldr	r0, [pc, #116]	@ (800ad44 <create_name+0x2d4>)
 800acce:	f7fe fdf7 	bl	80098c0 <chk_chr>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d008      	beq.n	800acea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800acd8:	235f      	movs	r3, #95	@ 0x5f
 800acda:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800acdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ace0:	f043 0303 	orr.w	r3, r3, #3
 800ace4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ace8:	e01b      	b.n	800ad22 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800acea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acec:	2b40      	cmp	r3, #64	@ 0x40
 800acee:	d909      	bls.n	800ad04 <create_name+0x294>
 800acf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acf2:	2b5a      	cmp	r3, #90	@ 0x5a
 800acf4:	d806      	bhi.n	800ad04 <create_name+0x294>
					b |= 2;
 800acf6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acfa:	f043 0302 	orr.w	r3, r3, #2
 800acfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ad02:	e00e      	b.n	800ad22 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ad04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad06:	2b60      	cmp	r3, #96	@ 0x60
 800ad08:	d90b      	bls.n	800ad22 <create_name+0x2b2>
 800ad0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad0c:	2b7a      	cmp	r3, #122	@ 0x7a
 800ad0e:	d808      	bhi.n	800ad22 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ad10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad14:	f043 0301 	orr.w	r3, r3, #1
 800ad18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ad1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ad1e:	3b20      	subs	r3, #32
 800ad20:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	623a      	str	r2, [r7, #32]
 800ad28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad2a:	b2d1      	uxtb	r1, r2
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	460a      	mov	r2, r1
 800ad32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ad36:	e763      	b.n	800ac00 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ad38:	bf00      	nop
 800ad3a:	e006      	b.n	800ad4a <create_name+0x2da>
 800ad3c:	0800cfec 	.word	0x0800cfec
 800ad40:	0800d7d4 	.word	0x0800d7d4
 800ad44:	0800cff8 	.word	0x0800cff8
			if (si > di) break;			/* No extension */
 800ad48:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ad50:	2be5      	cmp	r3, #229	@ 0xe5
 800ad52:	d103      	bne.n	800ad5c <create_name+0x2ec>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2205      	movs	r2, #5
 800ad58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ad5c:	69fb      	ldr	r3, [r7, #28]
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d104      	bne.n	800ad6c <create_name+0x2fc>
 800ad62:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ad6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad70:	f003 030c 	and.w	r3, r3, #12
 800ad74:	2b0c      	cmp	r3, #12
 800ad76:	d005      	beq.n	800ad84 <create_name+0x314>
 800ad78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad7c:	f003 0303 	and.w	r3, r3, #3
 800ad80:	2b03      	cmp	r3, #3
 800ad82:	d105      	bne.n	800ad90 <create_name+0x320>
 800ad84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad88:	f043 0302 	orr.w	r3, r3, #2
 800ad8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ad90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d117      	bne.n	800adcc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ad9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d105      	bne.n	800adb4 <create_name+0x344>
 800ada8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adac:	f043 0310 	orr.w	r3, r3, #16
 800adb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800adb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800adb8:	f003 030c 	and.w	r3, r3, #12
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d105      	bne.n	800adcc <create_name+0x35c>
 800adc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adc4:	f043 0308 	orr.w	r3, r3, #8
 800adc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800add2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800add6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800add8:	4618      	mov	r0, r3
 800adda:	3728      	adds	r7, #40	@ 0x28
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800adf4:	e002      	b.n	800adfc <follow_path+0x1c>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	3301      	adds	r3, #1
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae02:	d0f8      	beq.n	800adf6 <follow_path+0x16>
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae0a:	d0f4      	beq.n	800adf6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b1f      	cmp	r3, #31
 800ae18:	d80a      	bhi.n	800ae30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2280      	movs	r2, #128	@ 0x80
 800ae1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ae22:	2100      	movs	r1, #0
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff f96a 	bl	800a0fe <dir_sdi>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75fb      	strb	r3, [r7, #23]
 800ae2e:	e048      	b.n	800aec2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae30:	463b      	mov	r3, r7
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff fe1b 	bl	800aa70 <create_name>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d139      	bne.n	800aeb8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff fc75 	bl	800a734 <dir_find>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00a      	beq.n	800ae72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d12c      	bne.n	800aebc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae62:	7afb      	ldrb	r3, [r7, #11]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d127      	bne.n	800aebc <follow_path+0xdc>
 800ae6c:	2305      	movs	r3, #5
 800ae6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ae70:	e024      	b.n	800aebc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae72:	7afb      	ldrb	r3, [r7, #11]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d121      	bne.n	800aec0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	799b      	ldrb	r3, [r3, #6]
 800ae80:	f003 0310 	and.w	r3, r3, #16
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d102      	bne.n	800ae8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ae88:	2305      	movs	r3, #5
 800ae8a:	75fb      	strb	r3, [r7, #23]
 800ae8c:	e019      	b.n	800aec2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	8992      	ldrh	r2, [r2, #12]
 800ae9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800aea0:	fb00 f202 	mul.w	r2, r0, r2
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	440b      	add	r3, r1
 800aea8:	4619      	mov	r1, r3
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff fa86 	bl	800a3bc <ld_clust>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aeb6:	e7bb      	b.n	800ae30 <follow_path+0x50>
			if (res != FR_OK) break;
 800aeb8:	bf00      	nop
 800aeba:	e002      	b.n	800aec2 <follow_path+0xe2>
				break;
 800aebc:	bf00      	nop
 800aebe:	e000      	b.n	800aec2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aec0:	bf00      	nop
			}
		}
	}

	return res;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aecc:	b480      	push	{r7}
 800aece:	b087      	sub	sp, #28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
 800aed8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d031      	beq.n	800af46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	e002      	b.n	800aef0 <get_ldnumber+0x24>
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	3301      	adds	r3, #1
 800aeee:	617b      	str	r3, [r7, #20]
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	2b1f      	cmp	r3, #31
 800aef6:	d903      	bls.n	800af00 <get_ldnumber+0x34>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	2b3a      	cmp	r3, #58	@ 0x3a
 800aefe:	d1f4      	bne.n	800aeea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	2b3a      	cmp	r3, #58	@ 0x3a
 800af06:	d11c      	bne.n	800af42 <get_ldnumber+0x76>
			tp = *path;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	1c5a      	adds	r2, r3, #1
 800af12:	60fa      	str	r2, [r7, #12]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	3b30      	subs	r3, #48	@ 0x30
 800af18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	2b09      	cmp	r3, #9
 800af1e:	d80e      	bhi.n	800af3e <get_ldnumber+0x72>
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	429a      	cmp	r2, r3
 800af26:	d10a      	bne.n	800af3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d107      	bne.n	800af3e <get_ldnumber+0x72>
					vol = (int)i;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	3301      	adds	r3, #1
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	e002      	b.n	800af48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800af42:	2300      	movs	r3, #0
 800af44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800af46:	693b      	ldr	r3, [r7, #16]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	371c      	adds	r7, #28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	70da      	strb	r2, [r3, #3]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f04f 32ff 	mov.w	r2, #4294967295
 800af6a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7fe fdf4 	bl	8009b5c <move_window>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <check_fs+0x2a>
 800af7a:	2304      	movs	r3, #4
 800af7c:	e038      	b.n	800aff0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3338      	adds	r3, #56	@ 0x38
 800af82:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe fbd6 	bl	8009738 <ld_word>
 800af8c:	4603      	mov	r3, r0
 800af8e:	461a      	mov	r2, r3
 800af90:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800af94:	429a      	cmp	r2, r3
 800af96:	d001      	beq.n	800af9c <check_fs+0x48>
 800af98:	2303      	movs	r3, #3
 800af9a:	e029      	b.n	800aff0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800afa2:	2be9      	cmp	r3, #233	@ 0xe9
 800afa4:	d009      	beq.n	800afba <check_fs+0x66>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800afac:	2beb      	cmp	r3, #235	@ 0xeb
 800afae:	d11e      	bne.n	800afee <check_fs+0x9a>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800afb6:	2b90      	cmp	r3, #144	@ 0x90
 800afb8:	d119      	bne.n	800afee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3338      	adds	r3, #56	@ 0x38
 800afbe:	3336      	adds	r3, #54	@ 0x36
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7fe fbd1 	bl	8009768 <ld_dword>
 800afc6:	4603      	mov	r3, r0
 800afc8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800afcc:	4a0a      	ldr	r2, [pc, #40]	@ (800aff8 <check_fs+0xa4>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d101      	bne.n	800afd6 <check_fs+0x82>
 800afd2:	2300      	movs	r3, #0
 800afd4:	e00c      	b.n	800aff0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3338      	adds	r3, #56	@ 0x38
 800afda:	3352      	adds	r3, #82	@ 0x52
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fe fbc3 	bl	8009768 <ld_dword>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4a05      	ldr	r2, [pc, #20]	@ (800affc <check_fs+0xa8>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d101      	bne.n	800afee <check_fs+0x9a>
 800afea:	2300      	movs	r3, #0
 800afec:	e000      	b.n	800aff0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800afee:	2302      	movs	r3, #2
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	00544146 	.word	0x00544146
 800affc:	33544146 	.word	0x33544146

0800b000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b096      	sub	sp, #88	@ 0x58
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f7ff ff59 	bl	800aecc <get_ldnumber>
 800b01a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	da01      	bge.n	800b026 <find_volume+0x26>
 800b022:	230b      	movs	r3, #11
 800b024:	e265      	b.n	800b4f2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b026:	4a9f      	ldr	r2, [pc, #636]	@ (800b2a4 <find_volume+0x2a4>)
 800b028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b02e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <find_volume+0x3a>
 800b036:	230c      	movs	r3, #12
 800b038:	e25b      	b.n	800b4f2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b03e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b040:	79fb      	ldrb	r3, [r7, #7]
 800b042:	f023 0301 	bic.w	r3, r3, #1
 800b046:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01a      	beq.n	800b086 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b052:	785b      	ldrb	r3, [r3, #1]
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe facf 	bl	80095f8 <disk_status>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d10c      	bne.n	800b086 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b06c:	79fb      	ldrb	r3, [r7, #7]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d007      	beq.n	800b082 <find_volume+0x82>
 800b072:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b07e:	230a      	movs	r3, #10
 800b080:	e237      	b.n	800b4f2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b082:	2300      	movs	r3, #0
 800b084:	e235      	b.n	800b4f2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	2200      	movs	r2, #0
 800b08a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b08c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b092:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	785b      	ldrb	r3, [r3, #1]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fe fac7 	bl	800962c <disk_initialize>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b0a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b0a8:	f003 0301 	and.w	r3, r3, #1
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d001      	beq.n	800b0b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e21e      	b.n	800b4f2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d007      	beq.n	800b0ca <find_volume+0xca>
 800b0ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b0be:	f003 0304 	and.w	r3, r3, #4
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b0c6:	230a      	movs	r3, #10
 800b0c8:	e213      	b.n	800b4f2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0cc:	7858      	ldrb	r0, [r3, #1]
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	2102      	movs	r1, #2
 800b0d6:	f7fe fb11 	bl	80096fc <disk_ioctl>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <find_volume+0xe4>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e206      	b.n	800b4f2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e6:	899b      	ldrh	r3, [r3, #12]
 800b0e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0ec:	d80d      	bhi.n	800b10a <find_volume+0x10a>
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	899b      	ldrh	r3, [r3, #12]
 800b0f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0f6:	d308      	bcc.n	800b10a <find_volume+0x10a>
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fa:	899b      	ldrh	r3, [r3, #12]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b100:	899b      	ldrh	r3, [r3, #12]
 800b102:	3b01      	subs	r3, #1
 800b104:	4013      	ands	r3, r2
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <find_volume+0x10e>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e1f1      	b.n	800b4f2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b112:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b114:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b116:	f7ff ff1d 	bl	800af54 <check_fs>
 800b11a:	4603      	mov	r3, r0
 800b11c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b120:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b124:	2b02      	cmp	r3, #2
 800b126:	d149      	bne.n	800b1bc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b128:	2300      	movs	r3, #0
 800b12a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b12c:	e01e      	b.n	800b16c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b130:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b13c:	4413      	add	r3, r2
 800b13e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b142:	3304      	adds	r3, #4
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d006      	beq.n	800b158 <find_volume+0x158>
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	3308      	adds	r3, #8
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe fb0a 	bl	8009768 <ld_dword>
 800b154:	4602      	mov	r2, r0
 800b156:	e000      	b.n	800b15a <find_volume+0x15a>
 800b158:	2200      	movs	r2, #0
 800b15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	3358      	adds	r3, #88	@ 0x58
 800b160:	443b      	add	r3, r7
 800b162:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b168:	3301      	adds	r3, #1
 800b16a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b16c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d9dd      	bls.n	800b12e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b172:	2300      	movs	r3, #0
 800b174:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <find_volume+0x182>
 800b17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b17e:	3b01      	subs	r3, #1
 800b180:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	3358      	adds	r3, #88	@ 0x58
 800b188:	443b      	add	r3, r7
 800b18a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b18e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b192:	2b00      	cmp	r3, #0
 800b194:	d005      	beq.n	800b1a2 <find_volume+0x1a2>
 800b196:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b198:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b19a:	f7ff fedb 	bl	800af54 <check_fs>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	e000      	b.n	800b1a4 <find_volume+0x1a4>
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b1a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d905      	bls.n	800b1bc <find_volume+0x1bc>
 800b1b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d9e2      	bls.n	800b182 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b1bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1c0:	2b04      	cmp	r3, #4
 800b1c2:	d101      	bne.n	800b1c8 <find_volume+0x1c8>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e194      	b.n	800b4f2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b1c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d901      	bls.n	800b1d4 <find_volume+0x1d4>
 800b1d0:	230d      	movs	r3, #13
 800b1d2:	e18e      	b.n	800b4f2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d6:	3338      	adds	r3, #56	@ 0x38
 800b1d8:	330b      	adds	r3, #11
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe faac 	bl	8009738 <ld_word>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e6:	899b      	ldrh	r3, [r3, #12]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d001      	beq.n	800b1f0 <find_volume+0x1f0>
 800b1ec:	230d      	movs	r3, #13
 800b1ee:	e180      	b.n	800b4f2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f2:	3338      	adds	r3, #56	@ 0x38
 800b1f4:	3316      	adds	r3, #22
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe fa9e 	bl	8009738 <ld_word>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <find_volume+0x214>
 800b206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b208:	3338      	adds	r3, #56	@ 0x38
 800b20a:	3324      	adds	r3, #36	@ 0x24
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe faab 	bl	8009768 <ld_dword>
 800b212:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b216:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b218:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b222:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b226:	789b      	ldrb	r3, [r3, #2]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d005      	beq.n	800b238 <find_volume+0x238>
 800b22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22e:	789b      	ldrb	r3, [r3, #2]
 800b230:	2b02      	cmp	r3, #2
 800b232:	d001      	beq.n	800b238 <find_volume+0x238>
 800b234:	230d      	movs	r3, #13
 800b236:	e15c      	b.n	800b4f2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	789b      	ldrb	r3, [r3, #2]
 800b23c:	461a      	mov	r2, r3
 800b23e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b240:	fb02 f303 	mul.w	r3, r2, r3
 800b244:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b248:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b24c:	461a      	mov	r2, r3
 800b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b250:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b254:	895b      	ldrh	r3, [r3, #10]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d008      	beq.n	800b26c <find_volume+0x26c>
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	895b      	ldrh	r3, [r3, #10]
 800b25e:	461a      	mov	r2, r3
 800b260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b262:	895b      	ldrh	r3, [r3, #10]
 800b264:	3b01      	subs	r3, #1
 800b266:	4013      	ands	r3, r2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <find_volume+0x270>
 800b26c:	230d      	movs	r3, #13
 800b26e:	e140      	b.n	800b4f2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b272:	3338      	adds	r3, #56	@ 0x38
 800b274:	3311      	adds	r3, #17
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe fa5e 	bl	8009738 <ld_word>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b282:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b286:	891b      	ldrh	r3, [r3, #8]
 800b288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b28a:	8992      	ldrh	r2, [r2, #12]
 800b28c:	0952      	lsrs	r2, r2, #5
 800b28e:	b292      	uxth	r2, r2
 800b290:	fbb3 f1f2 	udiv	r1, r3, r2
 800b294:	fb01 f202 	mul.w	r2, r1, r2
 800b298:	1a9b      	subs	r3, r3, r2
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d003      	beq.n	800b2a8 <find_volume+0x2a8>
 800b2a0:	230d      	movs	r3, #13
 800b2a2:	e126      	b.n	800b4f2 <find_volume+0x4f2>
 800b2a4:	20011450 	.word	0x20011450

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2aa:	3338      	adds	r3, #56	@ 0x38
 800b2ac:	3313      	adds	r3, #19
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fa42 	bl	8009738 <ld_word>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b2b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <find_volume+0x2cc>
 800b2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c0:	3338      	adds	r3, #56	@ 0x38
 800b2c2:	3320      	adds	r3, #32
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe fa4f 	bl	8009768 <ld_dword>
 800b2ca:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ce:	3338      	adds	r3, #56	@ 0x38
 800b2d0:	330e      	adds	r3, #14
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe fa30 	bl	8009738 <ld_word>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b2dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <find_volume+0x2e6>
 800b2e2:	230d      	movs	r3, #13
 800b2e4:	e105      	b.n	800b4f2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b2e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b2e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2ea:	4413      	add	r3, r2
 800b2ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2ee:	8911      	ldrh	r1, [r2, #8]
 800b2f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2f2:	8992      	ldrh	r2, [r2, #12]
 800b2f4:	0952      	lsrs	r2, r2, #5
 800b2f6:	b292      	uxth	r2, r2
 800b2f8:	fbb1 f2f2 	udiv	r2, r1, r2
 800b2fc:	b292      	uxth	r2, r2
 800b2fe:	4413      	add	r3, r2
 800b300:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b302:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b306:	429a      	cmp	r2, r3
 800b308:	d201      	bcs.n	800b30e <find_volume+0x30e>
 800b30a:	230d      	movs	r3, #13
 800b30c:	e0f1      	b.n	800b4f2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b30e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b316:	8952      	ldrh	r2, [r2, #10]
 800b318:	fbb3 f3f2 	udiv	r3, r3, r2
 800b31c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	2b00      	cmp	r3, #0
 800b322:	d101      	bne.n	800b328 <find_volume+0x328>
 800b324:	230d      	movs	r3, #13
 800b326:	e0e4      	b.n	800b4f2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800b328:	2303      	movs	r3, #3
 800b32a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b330:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b334:	4293      	cmp	r3, r2
 800b336:	d802      	bhi.n	800b33e <find_volume+0x33e>
 800b338:	2302      	movs	r3, #2
 800b33a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b340:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b344:	4293      	cmp	r3, r2
 800b346:	d802      	bhi.n	800b34e <find_volume+0x34e>
 800b348:	2301      	movs	r3, #1
 800b34a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b350:	1c9a      	adds	r2, r3, #2
 800b352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b354:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800b356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b358:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b35a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b35c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b35e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b360:	441a      	add	r2, r3
 800b362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b364:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800b366:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b36a:	441a      	add	r2, r3
 800b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800b370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b374:	2b03      	cmp	r3, #3
 800b376:	d11e      	bne.n	800b3b6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37a:	3338      	adds	r3, #56	@ 0x38
 800b37c:	332a      	adds	r3, #42	@ 0x2a
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fe f9da 	bl	8009738 <ld_word>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <find_volume+0x38e>
 800b38a:	230d      	movs	r3, #13
 800b38c:	e0b1      	b.n	800b4f2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b390:	891b      	ldrh	r3, [r3, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d001      	beq.n	800b39a <find_volume+0x39a>
 800b396:	230d      	movs	r3, #13
 800b398:	e0ab      	b.n	800b4f2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39c:	3338      	adds	r3, #56	@ 0x38
 800b39e:	332c      	adds	r3, #44	@ 0x2c
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe f9e1 	bl	8009768 <ld_dword>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3aa:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ae:	69db      	ldr	r3, [r3, #28]
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3b4:	e01f      	b.n	800b3f6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3b8:	891b      	ldrh	r3, [r3, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <find_volume+0x3c2>
 800b3be:	230d      	movs	r3, #13
 800b3c0:	e097      	b.n	800b4f2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c8:	441a      	add	r2, r3
 800b3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3cc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b3ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d103      	bne.n	800b3de <find_volume+0x3de>
 800b3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	e00a      	b.n	800b3f4 <find_volume+0x3f4>
 800b3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e0:	69da      	ldr	r2, [r3, #28]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	4413      	add	r3, r2
 800b3e8:	085a      	lsrs	r2, r3, #1
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	f003 0301 	and.w	r3, r3, #1
 800b3f2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b3f4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f8:	6a1a      	ldr	r2, [r3, #32]
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3fc:	899b      	ldrh	r3, [r3, #12]
 800b3fe:	4619      	mov	r1, r3
 800b400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b402:	440b      	add	r3, r1
 800b404:	3b01      	subs	r3, #1
 800b406:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b408:	8989      	ldrh	r1, [r1, #12]
 800b40a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b40e:	429a      	cmp	r2, r3
 800b410:	d201      	bcs.n	800b416 <find_volume+0x416>
 800b412:	230d      	movs	r3, #13
 800b414:	e06d      	b.n	800b4f2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	f04f 32ff 	mov.w	r2, #4294967295
 800b41c:	619a      	str	r2, [r3, #24]
 800b41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b420:	699a      	ldr	r2, [r3, #24]
 800b422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b424:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800b426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b428:	2280      	movs	r2, #128	@ 0x80
 800b42a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b42c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b430:	2b03      	cmp	r3, #3
 800b432:	d149      	bne.n	800b4c8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	3338      	adds	r3, #56	@ 0x38
 800b438:	3330      	adds	r3, #48	@ 0x30
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe f97c 	bl	8009738 <ld_word>
 800b440:	4603      	mov	r3, r0
 800b442:	2b01      	cmp	r3, #1
 800b444:	d140      	bne.n	800b4c8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b448:	3301      	adds	r3, #1
 800b44a:	4619      	mov	r1, r3
 800b44c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b44e:	f7fe fb85 	bl	8009b5c <move_window>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d137      	bne.n	800b4c8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800b458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45a:	2200      	movs	r2, #0
 800b45c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b460:	3338      	adds	r3, #56	@ 0x38
 800b462:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe f966 	bl	8009738 <ld_word>
 800b46c:	4603      	mov	r3, r0
 800b46e:	461a      	mov	r2, r3
 800b470:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b474:	429a      	cmp	r2, r3
 800b476:	d127      	bne.n	800b4c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47a:	3338      	adds	r3, #56	@ 0x38
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fe f973 	bl	8009768 <ld_dword>
 800b482:	4603      	mov	r3, r0
 800b484:	4a1d      	ldr	r2, [pc, #116]	@ (800b4fc <find_volume+0x4fc>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d11e      	bne.n	800b4c8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48c:	3338      	adds	r3, #56	@ 0x38
 800b48e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe f968 	bl	8009768 <ld_dword>
 800b498:	4603      	mov	r3, r0
 800b49a:	4a19      	ldr	r2, [pc, #100]	@ (800b500 <find_volume+0x500>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d113      	bne.n	800b4c8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a2:	3338      	adds	r3, #56	@ 0x38
 800b4a4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7fe f95d 	bl	8009768 <ld_dword>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b6:	3338      	adds	r3, #56	@ 0x38
 800b4b8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7fe f953 	bl	8009768 <ld_dword>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ca:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b4ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b504 <find_volume+0x504>)
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b504 <find_volume+0x504>)
 800b4da:	801a      	strh	r2, [r3, #0]
 800b4dc:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <find_volume+0x504>)
 800b4de:	881a      	ldrh	r2, [r3, #0]
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e6:	4a08      	ldr	r2, [pc, #32]	@ (800b508 <find_volume+0x508>)
 800b4e8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b4ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b4ec:	f7fe face 	bl	8009a8c <clear_lock>
#endif
	return FR_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3758      	adds	r7, #88	@ 0x58
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	41615252 	.word	0x41615252
 800b500:	61417272 	.word	0x61417272
 800b504:	20011454 	.word	0x20011454
 800b508:	20011478 	.word	0x20011478

0800b50c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b516:	2309      	movs	r3, #9
 800b518:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d01c      	beq.n	800b55a <validate+0x4e>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d018      	beq.n	800b55a <validate+0x4e>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d013      	beq.n	800b55a <validate+0x4e>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	889a      	ldrh	r2, [r3, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	88db      	ldrh	r3, [r3, #6]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d10c      	bne.n	800b55a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	785b      	ldrb	r3, [r3, #1]
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe f856 	bl	80095f8 <disk_status>
 800b54c:	4603      	mov	r3, r0
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <validate+0x4e>
			res = FR_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d102      	bne.n	800b566 <validate+0x5a>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	e000      	b.n	800b568 <validate+0x5c>
 800b566:	2300      	movs	r3, #0
 800b568:	683a      	ldr	r2, [r7, #0]
 800b56a:	6013      	str	r3, [r2, #0]
	return res;
 800b56c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b58a:	f107 0310 	add.w	r3, r7, #16
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fc9c 	bl	800aecc <get_ldnumber>
 800b594:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	da01      	bge.n	800b5a0 <f_mount+0x28>
 800b59c:	230b      	movs	r3, #11
 800b59e:	e02b      	b.n	800b5f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b5a0:	4a17      	ldr	r2, [pc, #92]	@ (800b600 <f_mount+0x88>)
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d005      	beq.n	800b5bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b5b0:	69b8      	ldr	r0, [r7, #24]
 800b5b2:	f7fe fa6b 	bl	8009a8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d002      	beq.n	800b5c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	490d      	ldr	r1, [pc, #52]	@ (800b600 <f_mount+0x88>)
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <f_mount+0x66>
 800b5d8:	79fb      	ldrb	r3, [r7, #7]
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d001      	beq.n	800b5e2 <f_mount+0x6a>
 800b5de:	2300      	movs	r3, #0
 800b5e0:	e00a      	b.n	800b5f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b5e2:	f107 010c 	add.w	r1, r7, #12
 800b5e6:	f107 0308 	add.w	r3, r7, #8
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fd07 	bl	800b000 <find_volume>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3720      	adds	r7, #32
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	20011450 	.word	0x20011450

0800b604 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <f_opendir+0x14>
 800b614:	2309      	movs	r3, #9
 800b616:	e064      	b.n	800b6e2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b61c:	f107 010c 	add.w	r1, r7, #12
 800b620:	463b      	mov	r3, r7
 800b622:	2200      	movs	r2, #0
 800b624:	4618      	mov	r0, r3
 800b626:	f7ff fceb 	bl	800b000 <find_volume>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d14f      	bne.n	800b6d4 <f_opendir+0xd0>
		obj->fs = fs;
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f7ff fbce 	bl	800ade0 <follow_path>
 800b644:	4603      	mov	r3, r0
 800b646:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b648:	7dfb      	ldrb	r3, [r7, #23]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d13d      	bne.n	800b6ca <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b654:	b25b      	sxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	db12      	blt.n	800b680 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	799b      	ldrb	r3, [r3, #6]
 800b65e:	f003 0310 	and.w	r3, r3, #16
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a1b      	ldr	r3, [r3, #32]
 800b66c:	4619      	mov	r1, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	f7fe fea4 	bl	800a3bc <ld_clust>
 800b674:	4602      	mov	r2, r0
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	609a      	str	r2, [r3, #8]
 800b67a:	e001      	b.n	800b680 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b67c:	2305      	movs	r3, #5
 800b67e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b680:	7dfb      	ldrb	r3, [r7, #23]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d121      	bne.n	800b6ca <f_opendir+0xc6>
				obj->id = fs->id;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	88da      	ldrh	r2, [r3, #6]
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b68e:	2100      	movs	r1, #0
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fe fd34 	bl	800a0fe <dir_sdi>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d114      	bne.n	800b6ca <f_opendir+0xc6>
					if (obj->sclust) {
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00d      	beq.n	800b6c4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7fe f924 	bl	80098f8 <inc_lock>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d105      	bne.n	800b6ca <f_opendir+0xc6>
 800b6be:	2312      	movs	r3, #18
 800b6c0:	75fb      	strb	r3, [r7, #23]
 800b6c2:	e002      	b.n	800b6ca <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b6ca:	7dfb      	ldrb	r3, [r7, #23]
 800b6cc:	2b04      	cmp	r3, #4
 800b6ce:	d101      	bne.n	800b6d4 <f_opendir+0xd0>
 800b6d0:	2305      	movs	r3, #5
 800b6d2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <f_opendir+0xdc>
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f107 0208 	add.w	r2, r7, #8
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7ff ff06 	bl	800b50c <validate>
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d110      	bne.n	800b72c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d006      	beq.n	800b720 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	4618      	mov	r0, r3
 800b718:	f7fe f97c 	bl	8009a14 <dec_lock>
 800b71c:	4603      	mov	r3, r0
 800b71e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d102      	bne.n	800b72c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f107 0208 	add.w	r2, r7, #8
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff fedf 	bl	800b50c <validate>
 800b74e:	4603      	mov	r3, r0
 800b750:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b752:	7bfb      	ldrb	r3, [r7, #15]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d126      	bne.n	800b7a6 <f_readdir+0x70>
		if (!fno) {
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d106      	bne.n	800b76c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b75e:	2100      	movs	r1, #0
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7fe fccc 	bl	800a0fe <dir_sdi>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]
 800b76a:	e01c      	b.n	800b7a6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b76c:	2100      	movs	r1, #0
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f7fe ff39 	bl	800a5e6 <dir_read>
 800b774:	4603      	mov	r3, r0
 800b776:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b778:	7bfb      	ldrb	r3, [r7, #15]
 800b77a:	2b04      	cmp	r3, #4
 800b77c:	d101      	bne.n	800b782 <f_readdir+0x4c>
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b782:	7bfb      	ldrb	r3, [r7, #15]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10e      	bne.n	800b7a6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b788:	6839      	ldr	r1, [r7, #0]
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff f892 	bl	800a8b4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b790:	2100      	movs	r1, #0
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7fe fd3c 	bl	800a210 <dir_next>
 800b798:	4603      	mov	r3, r0
 800b79a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	d101      	bne.n	800b7a6 <f_readdir+0x70>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b7c6:	4b1f      	ldr	r3, [pc, #124]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b7c8:	7a5b      	ldrb	r3, [r3, #9]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d131      	bne.n	800b834 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b7d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b7d2:	7a5b      	ldrb	r3, [r3, #9]
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	4b1a      	ldr	r3, [pc, #104]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b7da:	2100      	movs	r1, #0
 800b7dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b7de:	4b19      	ldr	r3, [pc, #100]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b7e0:	7a5b      	ldrb	r3, [r3, #9]
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	4a17      	ldr	r2, [pc, #92]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b7ee:	4b15      	ldr	r3, [pc, #84]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b7f0:	7a5b      	ldrb	r3, [r3, #9]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	4b13      	ldr	r3, [pc, #76]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b7f8:	4413      	add	r3, r2
 800b7fa:	79fa      	ldrb	r2, [r7, #7]
 800b7fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b7fe:	4b11      	ldr	r3, [pc, #68]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b800:	7a5b      	ldrb	r3, [r3, #9]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	b2d1      	uxtb	r1, r2
 800b808:	4a0e      	ldr	r2, [pc, #56]	@ (800b844 <FATFS_LinkDriverEx+0x94>)
 800b80a:	7251      	strb	r1, [r2, #9]
 800b80c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b80e:	7dbb      	ldrb	r3, [r7, #22]
 800b810:	3330      	adds	r3, #48	@ 0x30
 800b812:	b2da      	uxtb	r2, r3
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	3301      	adds	r3, #1
 800b81c:	223a      	movs	r2, #58	@ 0x3a
 800b81e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	3302      	adds	r3, #2
 800b824:	222f      	movs	r2, #47	@ 0x2f
 800b826:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	3303      	adds	r3, #3
 800b82c:	2200      	movs	r2, #0
 800b82e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b834:	7dfb      	ldrb	r3, [r7, #23]
}
 800b836:	4618      	mov	r0, r3
 800b838:	371c      	adds	r7, #28
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	20011678 	.word	0x20011678

0800b848 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b852:	2200      	movs	r2, #0
 800b854:	6839      	ldr	r1, [r7, #0]
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff ffaa 	bl	800b7b0 <FATFS_LinkDriverEx>
 800b85c:	4603      	mov	r3, r0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	4603      	mov	r3, r0
 800b870:	6039      	str	r1, [r7, #0]
 800b872:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b874:	88fb      	ldrh	r3, [r7, #6]
 800b876:	2b7f      	cmp	r3, #127	@ 0x7f
 800b878:	d802      	bhi.n	800b880 <ff_convert+0x18>
		c = chr;
 800b87a:	88fb      	ldrh	r3, [r7, #6]
 800b87c:	81fb      	strh	r3, [r7, #14]
 800b87e:	e025      	b.n	800b8cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00b      	beq.n	800b89e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b886:	88fb      	ldrh	r3, [r7, #6]
 800b888:	2bff      	cmp	r3, #255	@ 0xff
 800b88a:	d805      	bhi.n	800b898 <ff_convert+0x30>
 800b88c:	88fb      	ldrh	r3, [r7, #6]
 800b88e:	3b80      	subs	r3, #128	@ 0x80
 800b890:	4a12      	ldr	r2, [pc, #72]	@ (800b8dc <ff_convert+0x74>)
 800b892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b896:	e000      	b.n	800b89a <ff_convert+0x32>
 800b898:	2300      	movs	r3, #0
 800b89a:	81fb      	strh	r3, [r7, #14]
 800b89c:	e016      	b.n	800b8cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b89e:	2300      	movs	r3, #0
 800b8a0:	81fb      	strh	r3, [r7, #14]
 800b8a2:	e009      	b.n	800b8b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b8a4:	89fb      	ldrh	r3, [r7, #14]
 800b8a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b8dc <ff_convert+0x74>)
 800b8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8ac:	88fa      	ldrh	r2, [r7, #6]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d006      	beq.n	800b8c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b8b2:	89fb      	ldrh	r3, [r7, #14]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	81fb      	strh	r3, [r7, #14]
 800b8b8:	89fb      	ldrh	r3, [r7, #14]
 800b8ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8bc:	d9f2      	bls.n	800b8a4 <ff_convert+0x3c>
 800b8be:	e000      	b.n	800b8c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b8c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b8c2:	89fb      	ldrh	r3, [r7, #14]
 800b8c4:	3380      	adds	r3, #128	@ 0x80
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b8cc:	89fb      	ldrh	r3, [r7, #14]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	0800d864 	.word	0x0800d864

0800b8e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8f0:	d201      	bcs.n	800b8f6 <ff_wtoupper+0x16>
 800b8f2:	4b3e      	ldr	r3, [pc, #248]	@ (800b9ec <ff_wtoupper+0x10c>)
 800b8f4:	e000      	b.n	800b8f8 <ff_wtoupper+0x18>
 800b8f6:	4b3e      	ldr	r3, [pc, #248]	@ (800b9f0 <ff_wtoupper+0x110>)
 800b8f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	1c9a      	adds	r2, r3, #2
 800b8fe:	617a      	str	r2, [r7, #20]
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800b904:	8a7b      	ldrh	r3, [r7, #18]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d068      	beq.n	800b9dc <ff_wtoupper+0xfc>
 800b90a:	88fa      	ldrh	r2, [r7, #6]
 800b90c:	8a7b      	ldrh	r3, [r7, #18]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d364      	bcc.n	800b9dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	1c9a      	adds	r2, r3, #2
 800b916:	617a      	str	r2, [r7, #20]
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	823b      	strh	r3, [r7, #16]
 800b91c:	8a3b      	ldrh	r3, [r7, #16]
 800b91e:	0a1b      	lsrs	r3, r3, #8
 800b920:	81fb      	strh	r3, [r7, #14]
 800b922:	8a3b      	ldrh	r3, [r7, #16]
 800b924:	b2db      	uxtb	r3, r3
 800b926:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	8a79      	ldrh	r1, [r7, #18]
 800b92c:	8a3b      	ldrh	r3, [r7, #16]
 800b92e:	440b      	add	r3, r1
 800b930:	429a      	cmp	r2, r3
 800b932:	da49      	bge.n	800b9c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800b934:	89fb      	ldrh	r3, [r7, #14]
 800b936:	2b08      	cmp	r3, #8
 800b938:	d84f      	bhi.n	800b9da <ff_wtoupper+0xfa>
 800b93a:	a201      	add	r2, pc, #4	@ (adr r2, 800b940 <ff_wtoupper+0x60>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b977 	.word	0x0800b977
 800b948:	0800b98d 	.word	0x0800b98d
 800b94c:	0800b995 	.word	0x0800b995
 800b950:	0800b99d 	.word	0x0800b99d
 800b954:	0800b9a5 	.word	0x0800b9a5
 800b958:	0800b9ad 	.word	0x0800b9ad
 800b95c:	0800b9b5 	.word	0x0800b9b5
 800b960:	0800b9bd 	.word	0x0800b9bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800b964:	88fa      	ldrh	r2, [r7, #6]
 800b966:	8a7b      	ldrh	r3, [r7, #18]
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	4413      	add	r3, r2
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	80fb      	strh	r3, [r7, #6]
 800b974:	e027      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800b976:	88fa      	ldrh	r2, [r7, #6]
 800b978:	8a7b      	ldrh	r3, [r7, #18]
 800b97a:	1ad3      	subs	r3, r2, r3
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	b29b      	uxth	r3, r3
 800b984:	88fa      	ldrh	r2, [r7, #6]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	80fb      	strh	r3, [r7, #6]
 800b98a:	e01c      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800b98c:	88fb      	ldrh	r3, [r7, #6]
 800b98e:	3b10      	subs	r3, #16
 800b990:	80fb      	strh	r3, [r7, #6]
 800b992:	e018      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800b994:	88fb      	ldrh	r3, [r7, #6]
 800b996:	3b20      	subs	r3, #32
 800b998:	80fb      	strh	r3, [r7, #6]
 800b99a:	e014      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800b99c:	88fb      	ldrh	r3, [r7, #6]
 800b99e:	3b30      	subs	r3, #48	@ 0x30
 800b9a0:	80fb      	strh	r3, [r7, #6]
 800b9a2:	e010      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800b9a4:	88fb      	ldrh	r3, [r7, #6]
 800b9a6:	3b1a      	subs	r3, #26
 800b9a8:	80fb      	strh	r3, [r7, #6]
 800b9aa:	e00c      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800b9ac:	88fb      	ldrh	r3, [r7, #6]
 800b9ae:	3308      	adds	r3, #8
 800b9b0:	80fb      	strh	r3, [r7, #6]
 800b9b2:	e008      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800b9b4:	88fb      	ldrh	r3, [r7, #6]
 800b9b6:	3b50      	subs	r3, #80	@ 0x50
 800b9b8:	80fb      	strh	r3, [r7, #6]
 800b9ba:	e004      	b.n	800b9c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800b9bc:	88fb      	ldrh	r3, [r7, #6]
 800b9be:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800b9c2:	80fb      	strh	r3, [r7, #6]
 800b9c4:	bf00      	nop
			}
			break;
 800b9c6:	e008      	b.n	800b9da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800b9c8:	89fb      	ldrh	r3, [r7, #14]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d195      	bne.n	800b8fa <ff_wtoupper+0x1a>
 800b9ce:	8a3b      	ldrh	r3, [r7, #16]
 800b9d0:	005b      	lsls	r3, r3, #1
 800b9d2:	697a      	ldr	r2, [r7, #20]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800b9d8:	e78f      	b.n	800b8fa <ff_wtoupper+0x1a>
			break;
 800b9da:	bf00      	nop
	}

	return chr;
 800b9dc:	88fb      	ldrh	r3, [r7, #6]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	371c      	adds	r7, #28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	0800d964 	.word	0x0800d964
 800b9f0:	0800db58 	.word	0x0800db58

0800b9f4 <rand>:
 800b9f4:	4b16      	ldr	r3, [pc, #88]	@ (800ba50 <rand+0x5c>)
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	681c      	ldr	r4, [r3, #0]
 800b9fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b9fc:	b9b3      	cbnz	r3, 800ba2c <rand+0x38>
 800b9fe:	2018      	movs	r0, #24
 800ba00:	f000 fb3a 	bl	800c078 <malloc>
 800ba04:	4602      	mov	r2, r0
 800ba06:	6320      	str	r0, [r4, #48]	@ 0x30
 800ba08:	b920      	cbnz	r0, 800ba14 <rand+0x20>
 800ba0a:	4b12      	ldr	r3, [pc, #72]	@ (800ba54 <rand+0x60>)
 800ba0c:	4812      	ldr	r0, [pc, #72]	@ (800ba58 <rand+0x64>)
 800ba0e:	2152      	movs	r1, #82	@ 0x52
 800ba10:	f000 faca 	bl	800bfa8 <__assert_func>
 800ba14:	4911      	ldr	r1, [pc, #68]	@ (800ba5c <rand+0x68>)
 800ba16:	4b12      	ldr	r3, [pc, #72]	@ (800ba60 <rand+0x6c>)
 800ba18:	e9c0 1300 	strd	r1, r3, [r0]
 800ba1c:	4b11      	ldr	r3, [pc, #68]	@ (800ba64 <rand+0x70>)
 800ba1e:	6083      	str	r3, [r0, #8]
 800ba20:	230b      	movs	r3, #11
 800ba22:	8183      	strh	r3, [r0, #12]
 800ba24:	2100      	movs	r1, #0
 800ba26:	2001      	movs	r0, #1
 800ba28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ba2c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba2e:	480e      	ldr	r0, [pc, #56]	@ (800ba68 <rand+0x74>)
 800ba30:	690b      	ldr	r3, [r1, #16]
 800ba32:	694c      	ldr	r4, [r1, #20]
 800ba34:	4a0d      	ldr	r2, [pc, #52]	@ (800ba6c <rand+0x78>)
 800ba36:	4358      	muls	r0, r3
 800ba38:	fb02 0004 	mla	r0, r2, r4, r0
 800ba3c:	fba3 3202 	umull	r3, r2, r3, r2
 800ba40:	3301      	adds	r3, #1
 800ba42:	eb40 0002 	adc.w	r0, r0, r2
 800ba46:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ba4a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ba4e:	bd10      	pop	{r4, pc}
 800ba50:	20000024 	.word	0x20000024
 800ba54:	0800dc14 	.word	0x0800dc14
 800ba58:	0800dc2b 	.word	0x0800dc2b
 800ba5c:	abcd330e 	.word	0xabcd330e
 800ba60:	e66d1234 	.word	0xe66d1234
 800ba64:	0005deec 	.word	0x0005deec
 800ba68:	5851f42d 	.word	0x5851f42d
 800ba6c:	4c957f2d 	.word	0x4c957f2d

0800ba70 <std>:
 800ba70:	2300      	movs	r3, #0
 800ba72:	b510      	push	{r4, lr}
 800ba74:	4604      	mov	r4, r0
 800ba76:	e9c0 3300 	strd	r3, r3, [r0]
 800ba7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba7e:	6083      	str	r3, [r0, #8]
 800ba80:	8181      	strh	r1, [r0, #12]
 800ba82:	6643      	str	r3, [r0, #100]	@ 0x64
 800ba84:	81c2      	strh	r2, [r0, #14]
 800ba86:	6183      	str	r3, [r0, #24]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	2208      	movs	r2, #8
 800ba8c:	305c      	adds	r0, #92	@ 0x5c
 800ba8e:	f000 f9dd 	bl	800be4c <memset>
 800ba92:	4b0d      	ldr	r3, [pc, #52]	@ (800bac8 <std+0x58>)
 800ba94:	6263      	str	r3, [r4, #36]	@ 0x24
 800ba96:	4b0d      	ldr	r3, [pc, #52]	@ (800bacc <std+0x5c>)
 800ba98:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ba9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bad0 <std+0x60>)
 800ba9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ba9e:	4b0d      	ldr	r3, [pc, #52]	@ (800bad4 <std+0x64>)
 800baa0:	6323      	str	r3, [r4, #48]	@ 0x30
 800baa2:	4b0d      	ldr	r3, [pc, #52]	@ (800bad8 <std+0x68>)
 800baa4:	6224      	str	r4, [r4, #32]
 800baa6:	429c      	cmp	r4, r3
 800baa8:	d006      	beq.n	800bab8 <std+0x48>
 800baaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800baae:	4294      	cmp	r4, r2
 800bab0:	d002      	beq.n	800bab8 <std+0x48>
 800bab2:	33d0      	adds	r3, #208	@ 0xd0
 800bab4:	429c      	cmp	r4, r3
 800bab6:	d105      	bne.n	800bac4 <std+0x54>
 800bab8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800babc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bac0:	f000 ba66 	b.w	800bf90 <__retarget_lock_init_recursive>
 800bac4:	bd10      	pop	{r4, pc}
 800bac6:	bf00      	nop
 800bac8:	0800bc9d 	.word	0x0800bc9d
 800bacc:	0800bcbf 	.word	0x0800bcbf
 800bad0:	0800bcf7 	.word	0x0800bcf7
 800bad4:	0800bd1b 	.word	0x0800bd1b
 800bad8:	20011684 	.word	0x20011684

0800badc <stdio_exit_handler>:
 800badc:	4a02      	ldr	r2, [pc, #8]	@ (800bae8 <stdio_exit_handler+0xc>)
 800bade:	4903      	ldr	r1, [pc, #12]	@ (800baec <stdio_exit_handler+0x10>)
 800bae0:	4803      	ldr	r0, [pc, #12]	@ (800baf0 <stdio_exit_handler+0x14>)
 800bae2:	f000 b869 	b.w	800bbb8 <_fwalk_sglue>
 800bae6:	bf00      	nop
 800bae8:	20000018 	.word	0x20000018
 800baec:	0800cb3d 	.word	0x0800cb3d
 800baf0:	20000028 	.word	0x20000028

0800baf4 <cleanup_stdio>:
 800baf4:	6841      	ldr	r1, [r0, #4]
 800baf6:	4b0c      	ldr	r3, [pc, #48]	@ (800bb28 <cleanup_stdio+0x34>)
 800baf8:	4299      	cmp	r1, r3
 800bafa:	b510      	push	{r4, lr}
 800bafc:	4604      	mov	r4, r0
 800bafe:	d001      	beq.n	800bb04 <cleanup_stdio+0x10>
 800bb00:	f001 f81c 	bl	800cb3c <_fflush_r>
 800bb04:	68a1      	ldr	r1, [r4, #8]
 800bb06:	4b09      	ldr	r3, [pc, #36]	@ (800bb2c <cleanup_stdio+0x38>)
 800bb08:	4299      	cmp	r1, r3
 800bb0a:	d002      	beq.n	800bb12 <cleanup_stdio+0x1e>
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f001 f815 	bl	800cb3c <_fflush_r>
 800bb12:	68e1      	ldr	r1, [r4, #12]
 800bb14:	4b06      	ldr	r3, [pc, #24]	@ (800bb30 <cleanup_stdio+0x3c>)
 800bb16:	4299      	cmp	r1, r3
 800bb18:	d004      	beq.n	800bb24 <cleanup_stdio+0x30>
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb20:	f001 b80c 	b.w	800cb3c <_fflush_r>
 800bb24:	bd10      	pop	{r4, pc}
 800bb26:	bf00      	nop
 800bb28:	20011684 	.word	0x20011684
 800bb2c:	200116ec 	.word	0x200116ec
 800bb30:	20011754 	.word	0x20011754

0800bb34 <global_stdio_init.part.0>:
 800bb34:	b510      	push	{r4, lr}
 800bb36:	4b0b      	ldr	r3, [pc, #44]	@ (800bb64 <global_stdio_init.part.0+0x30>)
 800bb38:	4c0b      	ldr	r4, [pc, #44]	@ (800bb68 <global_stdio_init.part.0+0x34>)
 800bb3a:	4a0c      	ldr	r2, [pc, #48]	@ (800bb6c <global_stdio_init.part.0+0x38>)
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	4620      	mov	r0, r4
 800bb40:	2200      	movs	r2, #0
 800bb42:	2104      	movs	r1, #4
 800bb44:	f7ff ff94 	bl	800ba70 <std>
 800bb48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	2109      	movs	r1, #9
 800bb50:	f7ff ff8e 	bl	800ba70 <std>
 800bb54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb58:	2202      	movs	r2, #2
 800bb5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb5e:	2112      	movs	r1, #18
 800bb60:	f7ff bf86 	b.w	800ba70 <std>
 800bb64:	200117bc 	.word	0x200117bc
 800bb68:	20011684 	.word	0x20011684
 800bb6c:	0800badd 	.word	0x0800badd

0800bb70 <__sfp_lock_acquire>:
 800bb70:	4801      	ldr	r0, [pc, #4]	@ (800bb78 <__sfp_lock_acquire+0x8>)
 800bb72:	f000 ba0e 	b.w	800bf92 <__retarget_lock_acquire_recursive>
 800bb76:	bf00      	nop
 800bb78:	200117c5 	.word	0x200117c5

0800bb7c <__sfp_lock_release>:
 800bb7c:	4801      	ldr	r0, [pc, #4]	@ (800bb84 <__sfp_lock_release+0x8>)
 800bb7e:	f000 ba09 	b.w	800bf94 <__retarget_lock_release_recursive>
 800bb82:	bf00      	nop
 800bb84:	200117c5 	.word	0x200117c5

0800bb88 <__sinit>:
 800bb88:	b510      	push	{r4, lr}
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	f7ff fff0 	bl	800bb70 <__sfp_lock_acquire>
 800bb90:	6a23      	ldr	r3, [r4, #32]
 800bb92:	b11b      	cbz	r3, 800bb9c <__sinit+0x14>
 800bb94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb98:	f7ff bff0 	b.w	800bb7c <__sfp_lock_release>
 800bb9c:	4b04      	ldr	r3, [pc, #16]	@ (800bbb0 <__sinit+0x28>)
 800bb9e:	6223      	str	r3, [r4, #32]
 800bba0:	4b04      	ldr	r3, [pc, #16]	@ (800bbb4 <__sinit+0x2c>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d1f5      	bne.n	800bb94 <__sinit+0xc>
 800bba8:	f7ff ffc4 	bl	800bb34 <global_stdio_init.part.0>
 800bbac:	e7f2      	b.n	800bb94 <__sinit+0xc>
 800bbae:	bf00      	nop
 800bbb0:	0800baf5 	.word	0x0800baf5
 800bbb4:	200117bc 	.word	0x200117bc

0800bbb8 <_fwalk_sglue>:
 800bbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbbc:	4607      	mov	r7, r0
 800bbbe:	4688      	mov	r8, r1
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	2600      	movs	r6, #0
 800bbc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbc8:	f1b9 0901 	subs.w	r9, r9, #1
 800bbcc:	d505      	bpl.n	800bbda <_fwalk_sglue+0x22>
 800bbce:	6824      	ldr	r4, [r4, #0]
 800bbd0:	2c00      	cmp	r4, #0
 800bbd2:	d1f7      	bne.n	800bbc4 <_fwalk_sglue+0xc>
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbda:	89ab      	ldrh	r3, [r5, #12]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d907      	bls.n	800bbf0 <_fwalk_sglue+0x38>
 800bbe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	d003      	beq.n	800bbf0 <_fwalk_sglue+0x38>
 800bbe8:	4629      	mov	r1, r5
 800bbea:	4638      	mov	r0, r7
 800bbec:	47c0      	blx	r8
 800bbee:	4306      	orrs	r6, r0
 800bbf0:	3568      	adds	r5, #104	@ 0x68
 800bbf2:	e7e9      	b.n	800bbc8 <_fwalk_sglue+0x10>

0800bbf4 <sniprintf>:
 800bbf4:	b40c      	push	{r2, r3}
 800bbf6:	b530      	push	{r4, r5, lr}
 800bbf8:	4b17      	ldr	r3, [pc, #92]	@ (800bc58 <sniprintf+0x64>)
 800bbfa:	1e0c      	subs	r4, r1, #0
 800bbfc:	681d      	ldr	r5, [r3, #0]
 800bbfe:	b09d      	sub	sp, #116	@ 0x74
 800bc00:	da08      	bge.n	800bc14 <sniprintf+0x20>
 800bc02:	238b      	movs	r3, #139	@ 0x8b
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0a:	b01d      	add	sp, #116	@ 0x74
 800bc0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc10:	b002      	add	sp, #8
 800bc12:	4770      	bx	lr
 800bc14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bc18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bc1c:	bf14      	ite	ne
 800bc1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bc22:	4623      	moveq	r3, r4
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	9307      	str	r3, [sp, #28]
 800bc28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bc2c:	9002      	str	r0, [sp, #8]
 800bc2e:	9006      	str	r0, [sp, #24]
 800bc30:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bc34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bc36:	ab21      	add	r3, sp, #132	@ 0x84
 800bc38:	a902      	add	r1, sp, #8
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	9301      	str	r3, [sp, #4]
 800bc3e:	f000 fb2d 	bl	800c29c <_svfiprintf_r>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	bfbc      	itt	lt
 800bc46:	238b      	movlt	r3, #139	@ 0x8b
 800bc48:	602b      	strlt	r3, [r5, #0]
 800bc4a:	2c00      	cmp	r4, #0
 800bc4c:	d0dd      	beq.n	800bc0a <sniprintf+0x16>
 800bc4e:	9b02      	ldr	r3, [sp, #8]
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	e7d9      	b.n	800bc0a <sniprintf+0x16>
 800bc56:	bf00      	nop
 800bc58:	20000024 	.word	0x20000024

0800bc5c <siprintf>:
 800bc5c:	b40e      	push	{r1, r2, r3}
 800bc5e:	b500      	push	{lr}
 800bc60:	b09c      	sub	sp, #112	@ 0x70
 800bc62:	ab1d      	add	r3, sp, #116	@ 0x74
 800bc64:	9002      	str	r0, [sp, #8]
 800bc66:	9006      	str	r0, [sp, #24]
 800bc68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bc6c:	4809      	ldr	r0, [pc, #36]	@ (800bc94 <siprintf+0x38>)
 800bc6e:	9107      	str	r1, [sp, #28]
 800bc70:	9104      	str	r1, [sp, #16]
 800bc72:	4909      	ldr	r1, [pc, #36]	@ (800bc98 <siprintf+0x3c>)
 800bc74:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc78:	9105      	str	r1, [sp, #20]
 800bc7a:	6800      	ldr	r0, [r0, #0]
 800bc7c:	9301      	str	r3, [sp, #4]
 800bc7e:	a902      	add	r1, sp, #8
 800bc80:	f000 fb0c 	bl	800c29c <_svfiprintf_r>
 800bc84:	9b02      	ldr	r3, [sp, #8]
 800bc86:	2200      	movs	r2, #0
 800bc88:	701a      	strb	r2, [r3, #0]
 800bc8a:	b01c      	add	sp, #112	@ 0x70
 800bc8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc90:	b003      	add	sp, #12
 800bc92:	4770      	bx	lr
 800bc94:	20000024 	.word	0x20000024
 800bc98:	ffff0208 	.word	0xffff0208

0800bc9c <__sread>:
 800bc9c:	b510      	push	{r4, lr}
 800bc9e:	460c      	mov	r4, r1
 800bca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bca4:	f000 f926 	bl	800bef4 <_read_r>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	bfab      	itete	ge
 800bcac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bcae:	89a3      	ldrhlt	r3, [r4, #12]
 800bcb0:	181b      	addge	r3, r3, r0
 800bcb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bcb6:	bfac      	ite	ge
 800bcb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bcba:	81a3      	strhlt	r3, [r4, #12]
 800bcbc:	bd10      	pop	{r4, pc}

0800bcbe <__swrite>:
 800bcbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	461f      	mov	r7, r3
 800bcc4:	898b      	ldrh	r3, [r1, #12]
 800bcc6:	05db      	lsls	r3, r3, #23
 800bcc8:	4605      	mov	r5, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4616      	mov	r6, r2
 800bcce:	d505      	bpl.n	800bcdc <__swrite+0x1e>
 800bcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f000 f8fa 	bl	800bed0 <_lseek_r>
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bce6:	81a3      	strh	r3, [r4, #12]
 800bce8:	4632      	mov	r2, r6
 800bcea:	463b      	mov	r3, r7
 800bcec:	4628      	mov	r0, r5
 800bcee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf2:	f000 b911 	b.w	800bf18 <_write_r>

0800bcf6 <__sseek>:
 800bcf6:	b510      	push	{r4, lr}
 800bcf8:	460c      	mov	r4, r1
 800bcfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcfe:	f000 f8e7 	bl	800bed0 <_lseek_r>
 800bd02:	1c43      	adds	r3, r0, #1
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	bf15      	itete	ne
 800bd08:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bd0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bd12:	81a3      	strheq	r3, [r4, #12]
 800bd14:	bf18      	it	ne
 800bd16:	81a3      	strhne	r3, [r4, #12]
 800bd18:	bd10      	pop	{r4, pc}

0800bd1a <__sclose>:
 800bd1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1e:	f000 b8c7 	b.w	800beb0 <_close_r>

0800bd22 <__swbuf_r>:
 800bd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd24:	460e      	mov	r6, r1
 800bd26:	4614      	mov	r4, r2
 800bd28:	4605      	mov	r5, r0
 800bd2a:	b118      	cbz	r0, 800bd34 <__swbuf_r+0x12>
 800bd2c:	6a03      	ldr	r3, [r0, #32]
 800bd2e:	b90b      	cbnz	r3, 800bd34 <__swbuf_r+0x12>
 800bd30:	f7ff ff2a 	bl	800bb88 <__sinit>
 800bd34:	69a3      	ldr	r3, [r4, #24]
 800bd36:	60a3      	str	r3, [r4, #8]
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	071a      	lsls	r2, r3, #28
 800bd3c:	d501      	bpl.n	800bd42 <__swbuf_r+0x20>
 800bd3e:	6923      	ldr	r3, [r4, #16]
 800bd40:	b943      	cbnz	r3, 800bd54 <__swbuf_r+0x32>
 800bd42:	4621      	mov	r1, r4
 800bd44:	4628      	mov	r0, r5
 800bd46:	f000 f82b 	bl	800bda0 <__swsetup_r>
 800bd4a:	b118      	cbz	r0, 800bd54 <__swbuf_r+0x32>
 800bd4c:	f04f 37ff 	mov.w	r7, #4294967295
 800bd50:	4638      	mov	r0, r7
 800bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	6922      	ldr	r2, [r4, #16]
 800bd58:	1a98      	subs	r0, r3, r2
 800bd5a:	6963      	ldr	r3, [r4, #20]
 800bd5c:	b2f6      	uxtb	r6, r6
 800bd5e:	4283      	cmp	r3, r0
 800bd60:	4637      	mov	r7, r6
 800bd62:	dc05      	bgt.n	800bd70 <__swbuf_r+0x4e>
 800bd64:	4621      	mov	r1, r4
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 fee8 	bl	800cb3c <_fflush_r>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d1ed      	bne.n	800bd4c <__swbuf_r+0x2a>
 800bd70:	68a3      	ldr	r3, [r4, #8]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	60a3      	str	r3, [r4, #8]
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	1c5a      	adds	r2, r3, #1
 800bd7a:	6022      	str	r2, [r4, #0]
 800bd7c:	701e      	strb	r6, [r3, #0]
 800bd7e:	6962      	ldr	r2, [r4, #20]
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d004      	beq.n	800bd90 <__swbuf_r+0x6e>
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	07db      	lsls	r3, r3, #31
 800bd8a:	d5e1      	bpl.n	800bd50 <__swbuf_r+0x2e>
 800bd8c:	2e0a      	cmp	r6, #10
 800bd8e:	d1df      	bne.n	800bd50 <__swbuf_r+0x2e>
 800bd90:	4621      	mov	r1, r4
 800bd92:	4628      	mov	r0, r5
 800bd94:	f000 fed2 	bl	800cb3c <_fflush_r>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d0d9      	beq.n	800bd50 <__swbuf_r+0x2e>
 800bd9c:	e7d6      	b.n	800bd4c <__swbuf_r+0x2a>
	...

0800bda0 <__swsetup_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4b29      	ldr	r3, [pc, #164]	@ (800be48 <__swsetup_r+0xa8>)
 800bda4:	4605      	mov	r5, r0
 800bda6:	6818      	ldr	r0, [r3, #0]
 800bda8:	460c      	mov	r4, r1
 800bdaa:	b118      	cbz	r0, 800bdb4 <__swsetup_r+0x14>
 800bdac:	6a03      	ldr	r3, [r0, #32]
 800bdae:	b90b      	cbnz	r3, 800bdb4 <__swsetup_r+0x14>
 800bdb0:	f7ff feea 	bl	800bb88 <__sinit>
 800bdb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb8:	0719      	lsls	r1, r3, #28
 800bdba:	d422      	bmi.n	800be02 <__swsetup_r+0x62>
 800bdbc:	06da      	lsls	r2, r3, #27
 800bdbe:	d407      	bmi.n	800bdd0 <__swsetup_r+0x30>
 800bdc0:	2209      	movs	r2, #9
 800bdc2:	602a      	str	r2, [r5, #0]
 800bdc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295
 800bdce:	e033      	b.n	800be38 <__swsetup_r+0x98>
 800bdd0:	0758      	lsls	r0, r3, #29
 800bdd2:	d512      	bpl.n	800bdfa <__swsetup_r+0x5a>
 800bdd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdd6:	b141      	cbz	r1, 800bdea <__swsetup_r+0x4a>
 800bdd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bddc:	4299      	cmp	r1, r3
 800bdde:	d002      	beq.n	800bde6 <__swsetup_r+0x46>
 800bde0:	4628      	mov	r0, r5
 800bde2:	f000 f8ff 	bl	800bfe4 <_free_r>
 800bde6:	2300      	movs	r3, #0
 800bde8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdf0:	81a3      	strh	r3, [r4, #12]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	6063      	str	r3, [r4, #4]
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	89a3      	ldrh	r3, [r4, #12]
 800bdfc:	f043 0308 	orr.w	r3, r3, #8
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	b94b      	cbnz	r3, 800be1a <__swsetup_r+0x7a>
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800be0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be10:	d003      	beq.n	800be1a <__swsetup_r+0x7a>
 800be12:	4621      	mov	r1, r4
 800be14:	4628      	mov	r0, r5
 800be16:	f000 fef1 	bl	800cbfc <__smakebuf_r>
 800be1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be1e:	f013 0201 	ands.w	r2, r3, #1
 800be22:	d00a      	beq.n	800be3a <__swsetup_r+0x9a>
 800be24:	2200      	movs	r2, #0
 800be26:	60a2      	str	r2, [r4, #8]
 800be28:	6962      	ldr	r2, [r4, #20]
 800be2a:	4252      	negs	r2, r2
 800be2c:	61a2      	str	r2, [r4, #24]
 800be2e:	6922      	ldr	r2, [r4, #16]
 800be30:	b942      	cbnz	r2, 800be44 <__swsetup_r+0xa4>
 800be32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800be36:	d1c5      	bne.n	800bdc4 <__swsetup_r+0x24>
 800be38:	bd38      	pop	{r3, r4, r5, pc}
 800be3a:	0799      	lsls	r1, r3, #30
 800be3c:	bf58      	it	pl
 800be3e:	6962      	ldrpl	r2, [r4, #20]
 800be40:	60a2      	str	r2, [r4, #8]
 800be42:	e7f4      	b.n	800be2e <__swsetup_r+0x8e>
 800be44:	2000      	movs	r0, #0
 800be46:	e7f7      	b.n	800be38 <__swsetup_r+0x98>
 800be48:	20000024 	.word	0x20000024

0800be4c <memset>:
 800be4c:	4402      	add	r2, r0
 800be4e:	4603      	mov	r3, r0
 800be50:	4293      	cmp	r3, r2
 800be52:	d100      	bne.n	800be56 <memset+0xa>
 800be54:	4770      	bx	lr
 800be56:	f803 1b01 	strb.w	r1, [r3], #1
 800be5a:	e7f9      	b.n	800be50 <memset+0x4>

0800be5c <strncpy>:
 800be5c:	b510      	push	{r4, lr}
 800be5e:	3901      	subs	r1, #1
 800be60:	4603      	mov	r3, r0
 800be62:	b132      	cbz	r2, 800be72 <strncpy+0x16>
 800be64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be68:	f803 4b01 	strb.w	r4, [r3], #1
 800be6c:	3a01      	subs	r2, #1
 800be6e:	2c00      	cmp	r4, #0
 800be70:	d1f7      	bne.n	800be62 <strncpy+0x6>
 800be72:	441a      	add	r2, r3
 800be74:	2100      	movs	r1, #0
 800be76:	4293      	cmp	r3, r2
 800be78:	d100      	bne.n	800be7c <strncpy+0x20>
 800be7a:	bd10      	pop	{r4, pc}
 800be7c:	f803 1b01 	strb.w	r1, [r3], #1
 800be80:	e7f9      	b.n	800be76 <strncpy+0x1a>

0800be82 <strstr>:
 800be82:	780a      	ldrb	r2, [r1, #0]
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	b96a      	cbnz	r2, 800bea4 <strstr+0x22>
 800be88:	bd70      	pop	{r4, r5, r6, pc}
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d109      	bne.n	800bea2 <strstr+0x20>
 800be8e:	460c      	mov	r4, r1
 800be90:	4605      	mov	r5, r0
 800be92:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0f6      	beq.n	800be88 <strstr+0x6>
 800be9a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800be9e:	429e      	cmp	r6, r3
 800bea0:	d0f7      	beq.n	800be92 <strstr+0x10>
 800bea2:	3001      	adds	r0, #1
 800bea4:	7803      	ldrb	r3, [r0, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1ef      	bne.n	800be8a <strstr+0x8>
 800beaa:	4618      	mov	r0, r3
 800beac:	e7ec      	b.n	800be88 <strstr+0x6>
	...

0800beb0 <_close_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d06      	ldr	r5, [pc, #24]	@ (800becc <_close_r+0x1c>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	f7f6 fbf9 	bl	80026b2 <_close>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_close_r+0x1a>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_close_r+0x1a>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	200117c0 	.word	0x200117c0

0800bed0 <_lseek_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d07      	ldr	r5, [pc, #28]	@ (800bef0 <_lseek_r+0x20>)
 800bed4:	4604      	mov	r4, r0
 800bed6:	4608      	mov	r0, r1
 800bed8:	4611      	mov	r1, r2
 800beda:	2200      	movs	r2, #0
 800bedc:	602a      	str	r2, [r5, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	f7f6 fc0e 	bl	8002700 <_lseek>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_lseek_r+0x1e>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_lseek_r+0x1e>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	200117c0 	.word	0x200117c0

0800bef4 <_read_r>:
 800bef4:	b538      	push	{r3, r4, r5, lr}
 800bef6:	4d07      	ldr	r5, [pc, #28]	@ (800bf14 <_read_r+0x20>)
 800bef8:	4604      	mov	r4, r0
 800befa:	4608      	mov	r0, r1
 800befc:	4611      	mov	r1, r2
 800befe:	2200      	movs	r2, #0
 800bf00:	602a      	str	r2, [r5, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	f7f6 fb9c 	bl	8002640 <_read>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_read_r+0x1e>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_read_r+0x1e>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	200117c0 	.word	0x200117c0

0800bf18 <_write_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	@ (800bf38 <_write_r+0x20>)
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f6 fba7 	bl	800267a <_write>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_write_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_write_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	200117c0 	.word	0x200117c0

0800bf3c <__errno>:
 800bf3c:	4b01      	ldr	r3, [pc, #4]	@ (800bf44 <__errno+0x8>)
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	20000024 	.word	0x20000024

0800bf48 <__libc_init_array>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	4d0d      	ldr	r5, [pc, #52]	@ (800bf80 <__libc_init_array+0x38>)
 800bf4c:	4c0d      	ldr	r4, [pc, #52]	@ (800bf84 <__libc_init_array+0x3c>)
 800bf4e:	1b64      	subs	r4, r4, r5
 800bf50:	10a4      	asrs	r4, r4, #2
 800bf52:	2600      	movs	r6, #0
 800bf54:	42a6      	cmp	r6, r4
 800bf56:	d109      	bne.n	800bf6c <__libc_init_array+0x24>
 800bf58:	4d0b      	ldr	r5, [pc, #44]	@ (800bf88 <__libc_init_array+0x40>)
 800bf5a:	4c0c      	ldr	r4, [pc, #48]	@ (800bf8c <__libc_init_array+0x44>)
 800bf5c:	f000 ff66 	bl	800ce2c <_init>
 800bf60:	1b64      	subs	r4, r4, r5
 800bf62:	10a4      	asrs	r4, r4, #2
 800bf64:	2600      	movs	r6, #0
 800bf66:	42a6      	cmp	r6, r4
 800bf68:	d105      	bne.n	800bf76 <__libc_init_array+0x2e>
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}
 800bf6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf70:	4798      	blx	r3
 800bf72:	3601      	adds	r6, #1
 800bf74:	e7ee      	b.n	800bf54 <__libc_init_array+0xc>
 800bf76:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf7a:	4798      	blx	r3
 800bf7c:	3601      	adds	r6, #1
 800bf7e:	e7f2      	b.n	800bf66 <__libc_init_array+0x1e>
 800bf80:	0800dcfc 	.word	0x0800dcfc
 800bf84:	0800dcfc 	.word	0x0800dcfc
 800bf88:	0800dcfc 	.word	0x0800dcfc
 800bf8c:	0800dd00 	.word	0x0800dd00

0800bf90 <__retarget_lock_init_recursive>:
 800bf90:	4770      	bx	lr

0800bf92 <__retarget_lock_acquire_recursive>:
 800bf92:	4770      	bx	lr

0800bf94 <__retarget_lock_release_recursive>:
 800bf94:	4770      	bx	lr

0800bf96 <strcpy>:
 800bf96:	4603      	mov	r3, r0
 800bf98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf9c:	f803 2b01 	strb.w	r2, [r3], #1
 800bfa0:	2a00      	cmp	r2, #0
 800bfa2:	d1f9      	bne.n	800bf98 <strcpy+0x2>
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <__assert_func>:
 800bfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfaa:	4614      	mov	r4, r2
 800bfac:	461a      	mov	r2, r3
 800bfae:	4b09      	ldr	r3, [pc, #36]	@ (800bfd4 <__assert_func+0x2c>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	68d8      	ldr	r0, [r3, #12]
 800bfb6:	b954      	cbnz	r4, 800bfce <__assert_func+0x26>
 800bfb8:	4b07      	ldr	r3, [pc, #28]	@ (800bfd8 <__assert_func+0x30>)
 800bfba:	461c      	mov	r4, r3
 800bfbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bfc0:	9100      	str	r1, [sp, #0]
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	4905      	ldr	r1, [pc, #20]	@ (800bfdc <__assert_func+0x34>)
 800bfc6:	f000 fde1 	bl	800cb8c <fiprintf>
 800bfca:	f000 fead 	bl	800cd28 <abort>
 800bfce:	4b04      	ldr	r3, [pc, #16]	@ (800bfe0 <__assert_func+0x38>)
 800bfd0:	e7f4      	b.n	800bfbc <__assert_func+0x14>
 800bfd2:	bf00      	nop
 800bfd4:	20000024 	.word	0x20000024
 800bfd8:	0800dcbe 	.word	0x0800dcbe
 800bfdc:	0800dc90 	.word	0x0800dc90
 800bfe0:	0800dc83 	.word	0x0800dc83

0800bfe4 <_free_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	2900      	cmp	r1, #0
 800bfea:	d041      	beq.n	800c070 <_free_r+0x8c>
 800bfec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bff0:	1f0c      	subs	r4, r1, #4
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	bfb8      	it	lt
 800bff6:	18e4      	addlt	r4, r4, r3
 800bff8:	f000 f8e8 	bl	800c1cc <__malloc_lock>
 800bffc:	4a1d      	ldr	r2, [pc, #116]	@ (800c074 <_free_r+0x90>)
 800bffe:	6813      	ldr	r3, [r2, #0]
 800c000:	b933      	cbnz	r3, 800c010 <_free_r+0x2c>
 800c002:	6063      	str	r3, [r4, #4]
 800c004:	6014      	str	r4, [r2, #0]
 800c006:	4628      	mov	r0, r5
 800c008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c00c:	f000 b8e4 	b.w	800c1d8 <__malloc_unlock>
 800c010:	42a3      	cmp	r3, r4
 800c012:	d908      	bls.n	800c026 <_free_r+0x42>
 800c014:	6820      	ldr	r0, [r4, #0]
 800c016:	1821      	adds	r1, r4, r0
 800c018:	428b      	cmp	r3, r1
 800c01a:	bf01      	itttt	eq
 800c01c:	6819      	ldreq	r1, [r3, #0]
 800c01e:	685b      	ldreq	r3, [r3, #4]
 800c020:	1809      	addeq	r1, r1, r0
 800c022:	6021      	streq	r1, [r4, #0]
 800c024:	e7ed      	b.n	800c002 <_free_r+0x1e>
 800c026:	461a      	mov	r2, r3
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	b10b      	cbz	r3, 800c030 <_free_r+0x4c>
 800c02c:	42a3      	cmp	r3, r4
 800c02e:	d9fa      	bls.n	800c026 <_free_r+0x42>
 800c030:	6811      	ldr	r1, [r2, #0]
 800c032:	1850      	adds	r0, r2, r1
 800c034:	42a0      	cmp	r0, r4
 800c036:	d10b      	bne.n	800c050 <_free_r+0x6c>
 800c038:	6820      	ldr	r0, [r4, #0]
 800c03a:	4401      	add	r1, r0
 800c03c:	1850      	adds	r0, r2, r1
 800c03e:	4283      	cmp	r3, r0
 800c040:	6011      	str	r1, [r2, #0]
 800c042:	d1e0      	bne.n	800c006 <_free_r+0x22>
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	6053      	str	r3, [r2, #4]
 800c04a:	4408      	add	r0, r1
 800c04c:	6010      	str	r0, [r2, #0]
 800c04e:	e7da      	b.n	800c006 <_free_r+0x22>
 800c050:	d902      	bls.n	800c058 <_free_r+0x74>
 800c052:	230c      	movs	r3, #12
 800c054:	602b      	str	r3, [r5, #0]
 800c056:	e7d6      	b.n	800c006 <_free_r+0x22>
 800c058:	6820      	ldr	r0, [r4, #0]
 800c05a:	1821      	adds	r1, r4, r0
 800c05c:	428b      	cmp	r3, r1
 800c05e:	bf04      	itt	eq
 800c060:	6819      	ldreq	r1, [r3, #0]
 800c062:	685b      	ldreq	r3, [r3, #4]
 800c064:	6063      	str	r3, [r4, #4]
 800c066:	bf04      	itt	eq
 800c068:	1809      	addeq	r1, r1, r0
 800c06a:	6021      	streq	r1, [r4, #0]
 800c06c:	6054      	str	r4, [r2, #4]
 800c06e:	e7ca      	b.n	800c006 <_free_r+0x22>
 800c070:	bd38      	pop	{r3, r4, r5, pc}
 800c072:	bf00      	nop
 800c074:	200117cc 	.word	0x200117cc

0800c078 <malloc>:
 800c078:	4b02      	ldr	r3, [pc, #8]	@ (800c084 <malloc+0xc>)
 800c07a:	4601      	mov	r1, r0
 800c07c:	6818      	ldr	r0, [r3, #0]
 800c07e:	f000 b825 	b.w	800c0cc <_malloc_r>
 800c082:	bf00      	nop
 800c084:	20000024 	.word	0x20000024

0800c088 <sbrk_aligned>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	4e0f      	ldr	r6, [pc, #60]	@ (800c0c8 <sbrk_aligned+0x40>)
 800c08c:	460c      	mov	r4, r1
 800c08e:	6831      	ldr	r1, [r6, #0]
 800c090:	4605      	mov	r5, r0
 800c092:	b911      	cbnz	r1, 800c09a <sbrk_aligned+0x12>
 800c094:	f000 fe2a 	bl	800ccec <_sbrk_r>
 800c098:	6030      	str	r0, [r6, #0]
 800c09a:	4621      	mov	r1, r4
 800c09c:	4628      	mov	r0, r5
 800c09e:	f000 fe25 	bl	800ccec <_sbrk_r>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d103      	bne.n	800c0ae <sbrk_aligned+0x26>
 800c0a6:	f04f 34ff 	mov.w	r4, #4294967295
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	bd70      	pop	{r4, r5, r6, pc}
 800c0ae:	1cc4      	adds	r4, r0, #3
 800c0b0:	f024 0403 	bic.w	r4, r4, #3
 800c0b4:	42a0      	cmp	r0, r4
 800c0b6:	d0f8      	beq.n	800c0aa <sbrk_aligned+0x22>
 800c0b8:	1a21      	subs	r1, r4, r0
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 fe16 	bl	800ccec <_sbrk_r>
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	d1f2      	bne.n	800c0aa <sbrk_aligned+0x22>
 800c0c4:	e7ef      	b.n	800c0a6 <sbrk_aligned+0x1e>
 800c0c6:	bf00      	nop
 800c0c8:	200117c8 	.word	0x200117c8

0800c0cc <_malloc_r>:
 800c0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	1ccd      	adds	r5, r1, #3
 800c0d2:	f025 0503 	bic.w	r5, r5, #3
 800c0d6:	3508      	adds	r5, #8
 800c0d8:	2d0c      	cmp	r5, #12
 800c0da:	bf38      	it	cc
 800c0dc:	250c      	movcc	r5, #12
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	db01      	blt.n	800c0e8 <_malloc_r+0x1c>
 800c0e4:	42a9      	cmp	r1, r5
 800c0e6:	d904      	bls.n	800c0f2 <_malloc_r+0x26>
 800c0e8:	230c      	movs	r3, #12
 800c0ea:	6033      	str	r3, [r6, #0]
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1c8 <_malloc_r+0xfc>
 800c0f6:	f000 f869 	bl	800c1cc <__malloc_lock>
 800c0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c0fe:	461c      	mov	r4, r3
 800c100:	bb44      	cbnz	r4, 800c154 <_malloc_r+0x88>
 800c102:	4629      	mov	r1, r5
 800c104:	4630      	mov	r0, r6
 800c106:	f7ff ffbf 	bl	800c088 <sbrk_aligned>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	4604      	mov	r4, r0
 800c10e:	d158      	bne.n	800c1c2 <_malloc_r+0xf6>
 800c110:	f8d8 4000 	ldr.w	r4, [r8]
 800c114:	4627      	mov	r7, r4
 800c116:	2f00      	cmp	r7, #0
 800c118:	d143      	bne.n	800c1a2 <_malloc_r+0xd6>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	d04b      	beq.n	800c1b6 <_malloc_r+0xea>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	4639      	mov	r1, r7
 800c122:	4630      	mov	r0, r6
 800c124:	eb04 0903 	add.w	r9, r4, r3
 800c128:	f000 fde0 	bl	800ccec <_sbrk_r>
 800c12c:	4581      	cmp	r9, r0
 800c12e:	d142      	bne.n	800c1b6 <_malloc_r+0xea>
 800c130:	6821      	ldr	r1, [r4, #0]
 800c132:	1a6d      	subs	r5, r5, r1
 800c134:	4629      	mov	r1, r5
 800c136:	4630      	mov	r0, r6
 800c138:	f7ff ffa6 	bl	800c088 <sbrk_aligned>
 800c13c:	3001      	adds	r0, #1
 800c13e:	d03a      	beq.n	800c1b6 <_malloc_r+0xea>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	442b      	add	r3, r5
 800c144:	6023      	str	r3, [r4, #0]
 800c146:	f8d8 3000 	ldr.w	r3, [r8]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	bb62      	cbnz	r2, 800c1a8 <_malloc_r+0xdc>
 800c14e:	f8c8 7000 	str.w	r7, [r8]
 800c152:	e00f      	b.n	800c174 <_malloc_r+0xa8>
 800c154:	6822      	ldr	r2, [r4, #0]
 800c156:	1b52      	subs	r2, r2, r5
 800c158:	d420      	bmi.n	800c19c <_malloc_r+0xd0>
 800c15a:	2a0b      	cmp	r2, #11
 800c15c:	d917      	bls.n	800c18e <_malloc_r+0xc2>
 800c15e:	1961      	adds	r1, r4, r5
 800c160:	42a3      	cmp	r3, r4
 800c162:	6025      	str	r5, [r4, #0]
 800c164:	bf18      	it	ne
 800c166:	6059      	strne	r1, [r3, #4]
 800c168:	6863      	ldr	r3, [r4, #4]
 800c16a:	bf08      	it	eq
 800c16c:	f8c8 1000 	streq.w	r1, [r8]
 800c170:	5162      	str	r2, [r4, r5]
 800c172:	604b      	str	r3, [r1, #4]
 800c174:	4630      	mov	r0, r6
 800c176:	f000 f82f 	bl	800c1d8 <__malloc_unlock>
 800c17a:	f104 000b 	add.w	r0, r4, #11
 800c17e:	1d23      	adds	r3, r4, #4
 800c180:	f020 0007 	bic.w	r0, r0, #7
 800c184:	1ac2      	subs	r2, r0, r3
 800c186:	bf1c      	itt	ne
 800c188:	1a1b      	subne	r3, r3, r0
 800c18a:	50a3      	strne	r3, [r4, r2]
 800c18c:	e7af      	b.n	800c0ee <_malloc_r+0x22>
 800c18e:	6862      	ldr	r2, [r4, #4]
 800c190:	42a3      	cmp	r3, r4
 800c192:	bf0c      	ite	eq
 800c194:	f8c8 2000 	streq.w	r2, [r8]
 800c198:	605a      	strne	r2, [r3, #4]
 800c19a:	e7eb      	b.n	800c174 <_malloc_r+0xa8>
 800c19c:	4623      	mov	r3, r4
 800c19e:	6864      	ldr	r4, [r4, #4]
 800c1a0:	e7ae      	b.n	800c100 <_malloc_r+0x34>
 800c1a2:	463c      	mov	r4, r7
 800c1a4:	687f      	ldr	r7, [r7, #4]
 800c1a6:	e7b6      	b.n	800c116 <_malloc_r+0x4a>
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	d1fb      	bne.n	800c1a8 <_malloc_r+0xdc>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6053      	str	r3, [r2, #4]
 800c1b4:	e7de      	b.n	800c174 <_malloc_r+0xa8>
 800c1b6:	230c      	movs	r3, #12
 800c1b8:	6033      	str	r3, [r6, #0]
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f000 f80c 	bl	800c1d8 <__malloc_unlock>
 800c1c0:	e794      	b.n	800c0ec <_malloc_r+0x20>
 800c1c2:	6005      	str	r5, [r0, #0]
 800c1c4:	e7d6      	b.n	800c174 <_malloc_r+0xa8>
 800c1c6:	bf00      	nop
 800c1c8:	200117cc 	.word	0x200117cc

0800c1cc <__malloc_lock>:
 800c1cc:	4801      	ldr	r0, [pc, #4]	@ (800c1d4 <__malloc_lock+0x8>)
 800c1ce:	f7ff bee0 	b.w	800bf92 <__retarget_lock_acquire_recursive>
 800c1d2:	bf00      	nop
 800c1d4:	200117c4 	.word	0x200117c4

0800c1d8 <__malloc_unlock>:
 800c1d8:	4801      	ldr	r0, [pc, #4]	@ (800c1e0 <__malloc_unlock+0x8>)
 800c1da:	f7ff bedb 	b.w	800bf94 <__retarget_lock_release_recursive>
 800c1de:	bf00      	nop
 800c1e0:	200117c4 	.word	0x200117c4

0800c1e4 <__ssputs_r>:
 800c1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e8:	688e      	ldr	r6, [r1, #8]
 800c1ea:	461f      	mov	r7, r3
 800c1ec:	42be      	cmp	r6, r7
 800c1ee:	680b      	ldr	r3, [r1, #0]
 800c1f0:	4682      	mov	sl, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	4690      	mov	r8, r2
 800c1f6:	d82d      	bhi.n	800c254 <__ssputs_r+0x70>
 800c1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c200:	d026      	beq.n	800c250 <__ssputs_r+0x6c>
 800c202:	6965      	ldr	r5, [r4, #20]
 800c204:	6909      	ldr	r1, [r1, #16]
 800c206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c20a:	eba3 0901 	sub.w	r9, r3, r1
 800c20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c212:	1c7b      	adds	r3, r7, #1
 800c214:	444b      	add	r3, r9
 800c216:	106d      	asrs	r5, r5, #1
 800c218:	429d      	cmp	r5, r3
 800c21a:	bf38      	it	cc
 800c21c:	461d      	movcc	r5, r3
 800c21e:	0553      	lsls	r3, r2, #21
 800c220:	d527      	bpl.n	800c272 <__ssputs_r+0x8e>
 800c222:	4629      	mov	r1, r5
 800c224:	f7ff ff52 	bl	800c0cc <_malloc_r>
 800c228:	4606      	mov	r6, r0
 800c22a:	b360      	cbz	r0, 800c286 <__ssputs_r+0xa2>
 800c22c:	6921      	ldr	r1, [r4, #16]
 800c22e:	464a      	mov	r2, r9
 800c230:	f000 fd6c 	bl	800cd0c <memcpy>
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	6126      	str	r6, [r4, #16]
 800c242:	6165      	str	r5, [r4, #20]
 800c244:	444e      	add	r6, r9
 800c246:	eba5 0509 	sub.w	r5, r5, r9
 800c24a:	6026      	str	r6, [r4, #0]
 800c24c:	60a5      	str	r5, [r4, #8]
 800c24e:	463e      	mov	r6, r7
 800c250:	42be      	cmp	r6, r7
 800c252:	d900      	bls.n	800c256 <__ssputs_r+0x72>
 800c254:	463e      	mov	r6, r7
 800c256:	6820      	ldr	r0, [r4, #0]
 800c258:	4632      	mov	r2, r6
 800c25a:	4641      	mov	r1, r8
 800c25c:	f000 fd0a 	bl	800cc74 <memmove>
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	1b9b      	subs	r3, r3, r6
 800c264:	60a3      	str	r3, [r4, #8]
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	4433      	add	r3, r6
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	2000      	movs	r0, #0
 800c26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c272:	462a      	mov	r2, r5
 800c274:	f000 fd5f 	bl	800cd36 <_realloc_r>
 800c278:	4606      	mov	r6, r0
 800c27a:	2800      	cmp	r0, #0
 800c27c:	d1e0      	bne.n	800c240 <__ssputs_r+0x5c>
 800c27e:	6921      	ldr	r1, [r4, #16]
 800c280:	4650      	mov	r0, sl
 800c282:	f7ff feaf 	bl	800bfe4 <_free_r>
 800c286:	230c      	movs	r3, #12
 800c288:	f8ca 3000 	str.w	r3, [sl]
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e7e9      	b.n	800c26e <__ssputs_r+0x8a>
	...

0800c29c <_svfiprintf_r>:
 800c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	4698      	mov	r8, r3
 800c2a2:	898b      	ldrh	r3, [r1, #12]
 800c2a4:	061b      	lsls	r3, r3, #24
 800c2a6:	b09d      	sub	sp, #116	@ 0x74
 800c2a8:	4607      	mov	r7, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	4614      	mov	r4, r2
 800c2ae:	d510      	bpl.n	800c2d2 <_svfiprintf_r+0x36>
 800c2b0:	690b      	ldr	r3, [r1, #16]
 800c2b2:	b973      	cbnz	r3, 800c2d2 <_svfiprintf_r+0x36>
 800c2b4:	2140      	movs	r1, #64	@ 0x40
 800c2b6:	f7ff ff09 	bl	800c0cc <_malloc_r>
 800c2ba:	6028      	str	r0, [r5, #0]
 800c2bc:	6128      	str	r0, [r5, #16]
 800c2be:	b930      	cbnz	r0, 800c2ce <_svfiprintf_r+0x32>
 800c2c0:	230c      	movs	r3, #12
 800c2c2:	603b      	str	r3, [r7, #0]
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	b01d      	add	sp, #116	@ 0x74
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	2340      	movs	r3, #64	@ 0x40
 800c2d0:	616b      	str	r3, [r5, #20]
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d6:	2320      	movs	r3, #32
 800c2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e0:	2330      	movs	r3, #48	@ 0x30
 800c2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c480 <_svfiprintf_r+0x1e4>
 800c2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2ea:	f04f 0901 	mov.w	r9, #1
 800c2ee:	4623      	mov	r3, r4
 800c2f0:	469a      	mov	sl, r3
 800c2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f6:	b10a      	cbz	r2, 800c2fc <_svfiprintf_r+0x60>
 800c2f8:	2a25      	cmp	r2, #37	@ 0x25
 800c2fa:	d1f9      	bne.n	800c2f0 <_svfiprintf_r+0x54>
 800c2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800c300:	d00b      	beq.n	800c31a <_svfiprintf_r+0x7e>
 800c302:	465b      	mov	r3, fp
 800c304:	4622      	mov	r2, r4
 800c306:	4629      	mov	r1, r5
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ff6b 	bl	800c1e4 <__ssputs_r>
 800c30e:	3001      	adds	r0, #1
 800c310:	f000 80a7 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c316:	445a      	add	r2, fp
 800c318:	9209      	str	r2, [sp, #36]	@ 0x24
 800c31a:	f89a 3000 	ldrb.w	r3, [sl]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 809f 	beq.w	800c462 <_svfiprintf_r+0x1c6>
 800c324:	2300      	movs	r3, #0
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c32e:	f10a 0a01 	add.w	sl, sl, #1
 800c332:	9304      	str	r3, [sp, #16]
 800c334:	9307      	str	r3, [sp, #28]
 800c336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c33c:	4654      	mov	r4, sl
 800c33e:	2205      	movs	r2, #5
 800c340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c344:	484e      	ldr	r0, [pc, #312]	@ (800c480 <_svfiprintf_r+0x1e4>)
 800c346:	f7f3 ff5b 	bl	8000200 <memchr>
 800c34a:	9a04      	ldr	r2, [sp, #16]
 800c34c:	b9d8      	cbnz	r0, 800c386 <_svfiprintf_r+0xea>
 800c34e:	06d0      	lsls	r0, r2, #27
 800c350:	bf44      	itt	mi
 800c352:	2320      	movmi	r3, #32
 800c354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c358:	0711      	lsls	r1, r2, #28
 800c35a:	bf44      	itt	mi
 800c35c:	232b      	movmi	r3, #43	@ 0x2b
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c362:	f89a 3000 	ldrb.w	r3, [sl]
 800c366:	2b2a      	cmp	r3, #42	@ 0x2a
 800c368:	d015      	beq.n	800c396 <_svfiprintf_r+0xfa>
 800c36a:	9a07      	ldr	r2, [sp, #28]
 800c36c:	4654      	mov	r4, sl
 800c36e:	2000      	movs	r0, #0
 800c370:	f04f 0c0a 	mov.w	ip, #10
 800c374:	4621      	mov	r1, r4
 800c376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c37a:	3b30      	subs	r3, #48	@ 0x30
 800c37c:	2b09      	cmp	r3, #9
 800c37e:	d94b      	bls.n	800c418 <_svfiprintf_r+0x17c>
 800c380:	b1b0      	cbz	r0, 800c3b0 <_svfiprintf_r+0x114>
 800c382:	9207      	str	r2, [sp, #28]
 800c384:	e014      	b.n	800c3b0 <_svfiprintf_r+0x114>
 800c386:	eba0 0308 	sub.w	r3, r0, r8
 800c38a:	fa09 f303 	lsl.w	r3, r9, r3
 800c38e:	4313      	orrs	r3, r2
 800c390:	9304      	str	r3, [sp, #16]
 800c392:	46a2      	mov	sl, r4
 800c394:	e7d2      	b.n	800c33c <_svfiprintf_r+0xa0>
 800c396:	9b03      	ldr	r3, [sp, #12]
 800c398:	1d19      	adds	r1, r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	9103      	str	r1, [sp, #12]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	bfbb      	ittet	lt
 800c3a2:	425b      	neglt	r3, r3
 800c3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a8:	9307      	strge	r3, [sp, #28]
 800c3aa:	9307      	strlt	r3, [sp, #28]
 800c3ac:	bfb8      	it	lt
 800c3ae:	9204      	strlt	r2, [sp, #16]
 800c3b0:	7823      	ldrb	r3, [r4, #0]
 800c3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3b4:	d10a      	bne.n	800c3cc <_svfiprintf_r+0x130>
 800c3b6:	7863      	ldrb	r3, [r4, #1]
 800c3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3ba:	d132      	bne.n	800c422 <_svfiprintf_r+0x186>
 800c3bc:	9b03      	ldr	r3, [sp, #12]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	9203      	str	r2, [sp, #12]
 800c3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3c8:	3402      	adds	r4, #2
 800c3ca:	9305      	str	r3, [sp, #20]
 800c3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c490 <_svfiprintf_r+0x1f4>
 800c3d0:	7821      	ldrb	r1, [r4, #0]
 800c3d2:	2203      	movs	r2, #3
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	f7f3 ff13 	bl	8000200 <memchr>
 800c3da:	b138      	cbz	r0, 800c3ec <_svfiprintf_r+0x150>
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	eba0 000a 	sub.w	r0, r0, sl
 800c3e2:	2240      	movs	r2, #64	@ 0x40
 800c3e4:	4082      	lsls	r2, r0
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f0:	4824      	ldr	r0, [pc, #144]	@ (800c484 <_svfiprintf_r+0x1e8>)
 800c3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3f6:	2206      	movs	r2, #6
 800c3f8:	f7f3 ff02 	bl	8000200 <memchr>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d036      	beq.n	800c46e <_svfiprintf_r+0x1d2>
 800c400:	4b21      	ldr	r3, [pc, #132]	@ (800c488 <_svfiprintf_r+0x1ec>)
 800c402:	bb1b      	cbnz	r3, 800c44c <_svfiprintf_r+0x1b0>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	3307      	adds	r3, #7
 800c408:	f023 0307 	bic.w	r3, r3, #7
 800c40c:	3308      	adds	r3, #8
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c412:	4433      	add	r3, r6
 800c414:	9309      	str	r3, [sp, #36]	@ 0x24
 800c416:	e76a      	b.n	800c2ee <_svfiprintf_r+0x52>
 800c418:	fb0c 3202 	mla	r2, ip, r2, r3
 800c41c:	460c      	mov	r4, r1
 800c41e:	2001      	movs	r0, #1
 800c420:	e7a8      	b.n	800c374 <_svfiprintf_r+0xd8>
 800c422:	2300      	movs	r3, #0
 800c424:	3401      	adds	r4, #1
 800c426:	9305      	str	r3, [sp, #20]
 800c428:	4619      	mov	r1, r3
 800c42a:	f04f 0c0a 	mov.w	ip, #10
 800c42e:	4620      	mov	r0, r4
 800c430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c434:	3a30      	subs	r2, #48	@ 0x30
 800c436:	2a09      	cmp	r2, #9
 800c438:	d903      	bls.n	800c442 <_svfiprintf_r+0x1a6>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c6      	beq.n	800c3cc <_svfiprintf_r+0x130>
 800c43e:	9105      	str	r1, [sp, #20]
 800c440:	e7c4      	b.n	800c3cc <_svfiprintf_r+0x130>
 800c442:	fb0c 2101 	mla	r1, ip, r1, r2
 800c446:	4604      	mov	r4, r0
 800c448:	2301      	movs	r3, #1
 800c44a:	e7f0      	b.n	800c42e <_svfiprintf_r+0x192>
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	462a      	mov	r2, r5
 800c452:	4b0e      	ldr	r3, [pc, #56]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c454:	a904      	add	r1, sp, #16
 800c456:	4638      	mov	r0, r7
 800c458:	f3af 8000 	nop.w
 800c45c:	1c42      	adds	r2, r0, #1
 800c45e:	4606      	mov	r6, r0
 800c460:	d1d6      	bne.n	800c410 <_svfiprintf_r+0x174>
 800c462:	89ab      	ldrh	r3, [r5, #12]
 800c464:	065b      	lsls	r3, r3, #25
 800c466:	f53f af2d 	bmi.w	800c2c4 <_svfiprintf_r+0x28>
 800c46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c46c:	e72c      	b.n	800c2c8 <_svfiprintf_r+0x2c>
 800c46e:	ab03      	add	r3, sp, #12
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	462a      	mov	r2, r5
 800c474:	4b05      	ldr	r3, [pc, #20]	@ (800c48c <_svfiprintf_r+0x1f0>)
 800c476:	a904      	add	r1, sp, #16
 800c478:	4638      	mov	r0, r7
 800c47a:	f000 f9bb 	bl	800c7f4 <_printf_i>
 800c47e:	e7ed      	b.n	800c45c <_svfiprintf_r+0x1c0>
 800c480:	0800dcbf 	.word	0x0800dcbf
 800c484:	0800dcc9 	.word	0x0800dcc9
 800c488:	00000000 	.word	0x00000000
 800c48c:	0800c1e5 	.word	0x0800c1e5
 800c490:	0800dcc5 	.word	0x0800dcc5

0800c494 <__sfputc_r>:
 800c494:	6893      	ldr	r3, [r2, #8]
 800c496:	3b01      	subs	r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	b410      	push	{r4}
 800c49c:	6093      	str	r3, [r2, #8]
 800c49e:	da08      	bge.n	800c4b2 <__sfputc_r+0x1e>
 800c4a0:	6994      	ldr	r4, [r2, #24]
 800c4a2:	42a3      	cmp	r3, r4
 800c4a4:	db01      	blt.n	800c4aa <__sfputc_r+0x16>
 800c4a6:	290a      	cmp	r1, #10
 800c4a8:	d103      	bne.n	800c4b2 <__sfputc_r+0x1e>
 800c4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4ae:	f7ff bc38 	b.w	800bd22 <__swbuf_r>
 800c4b2:	6813      	ldr	r3, [r2, #0]
 800c4b4:	1c58      	adds	r0, r3, #1
 800c4b6:	6010      	str	r0, [r2, #0]
 800c4b8:	7019      	strb	r1, [r3, #0]
 800c4ba:	4608      	mov	r0, r1
 800c4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4c0:	4770      	bx	lr

0800c4c2 <__sfputs_r>:
 800c4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4c4:	4606      	mov	r6, r0
 800c4c6:	460f      	mov	r7, r1
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	18d5      	adds	r5, r2, r3
 800c4cc:	42ac      	cmp	r4, r5
 800c4ce:	d101      	bne.n	800c4d4 <__sfputs_r+0x12>
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	e007      	b.n	800c4e4 <__sfputs_r+0x22>
 800c4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d8:	463a      	mov	r2, r7
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f7ff ffda 	bl	800c494 <__sfputc_r>
 800c4e0:	1c43      	adds	r3, r0, #1
 800c4e2:	d1f3      	bne.n	800c4cc <__sfputs_r+0xa>
 800c4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4e8 <_vfiprintf_r>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	b09d      	sub	sp, #116	@ 0x74
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	4698      	mov	r8, r3
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	b118      	cbz	r0, 800c500 <_vfiprintf_r+0x18>
 800c4f8:	6a03      	ldr	r3, [r0, #32]
 800c4fa:	b90b      	cbnz	r3, 800c500 <_vfiprintf_r+0x18>
 800c4fc:	f7ff fb44 	bl	800bb88 <__sinit>
 800c500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c502:	07d9      	lsls	r1, r3, #31
 800c504:	d405      	bmi.n	800c512 <_vfiprintf_r+0x2a>
 800c506:	89ab      	ldrh	r3, [r5, #12]
 800c508:	059a      	lsls	r2, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_vfiprintf_r+0x2a>
 800c50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c50e:	f7ff fd40 	bl	800bf92 <__retarget_lock_acquire_recursive>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	071b      	lsls	r3, r3, #28
 800c516:	d501      	bpl.n	800c51c <_vfiprintf_r+0x34>
 800c518:	692b      	ldr	r3, [r5, #16]
 800c51a:	b99b      	cbnz	r3, 800c544 <_vfiprintf_r+0x5c>
 800c51c:	4629      	mov	r1, r5
 800c51e:	4630      	mov	r0, r6
 800c520:	f7ff fc3e 	bl	800bda0 <__swsetup_r>
 800c524:	b170      	cbz	r0, 800c544 <_vfiprintf_r+0x5c>
 800c526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c528:	07dc      	lsls	r4, r3, #31
 800c52a:	d504      	bpl.n	800c536 <_vfiprintf_r+0x4e>
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	b01d      	add	sp, #116	@ 0x74
 800c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c536:	89ab      	ldrh	r3, [r5, #12]
 800c538:	0598      	lsls	r0, r3, #22
 800c53a:	d4f7      	bmi.n	800c52c <_vfiprintf_r+0x44>
 800c53c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c53e:	f7ff fd29 	bl	800bf94 <__retarget_lock_release_recursive>
 800c542:	e7f3      	b.n	800c52c <_vfiprintf_r+0x44>
 800c544:	2300      	movs	r3, #0
 800c546:	9309      	str	r3, [sp, #36]	@ 0x24
 800c548:	2320      	movs	r3, #32
 800c54a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c552:	2330      	movs	r3, #48	@ 0x30
 800c554:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c704 <_vfiprintf_r+0x21c>
 800c558:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c55c:	f04f 0901 	mov.w	r9, #1
 800c560:	4623      	mov	r3, r4
 800c562:	469a      	mov	sl, r3
 800c564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c568:	b10a      	cbz	r2, 800c56e <_vfiprintf_r+0x86>
 800c56a:	2a25      	cmp	r2, #37	@ 0x25
 800c56c:	d1f9      	bne.n	800c562 <_vfiprintf_r+0x7a>
 800c56e:	ebba 0b04 	subs.w	fp, sl, r4
 800c572:	d00b      	beq.n	800c58c <_vfiprintf_r+0xa4>
 800c574:	465b      	mov	r3, fp
 800c576:	4622      	mov	r2, r4
 800c578:	4629      	mov	r1, r5
 800c57a:	4630      	mov	r0, r6
 800c57c:	f7ff ffa1 	bl	800c4c2 <__sfputs_r>
 800c580:	3001      	adds	r0, #1
 800c582:	f000 80a7 	beq.w	800c6d4 <_vfiprintf_r+0x1ec>
 800c586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c588:	445a      	add	r2, fp
 800c58a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c58c:	f89a 3000 	ldrb.w	r3, [sl]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 809f 	beq.w	800c6d4 <_vfiprintf_r+0x1ec>
 800c596:	2300      	movs	r3, #0
 800c598:	f04f 32ff 	mov.w	r2, #4294967295
 800c59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5a0:	f10a 0a01 	add.w	sl, sl, #1
 800c5a4:	9304      	str	r3, [sp, #16]
 800c5a6:	9307      	str	r3, [sp, #28]
 800c5a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5ae:	4654      	mov	r4, sl
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b6:	4853      	ldr	r0, [pc, #332]	@ (800c704 <_vfiprintf_r+0x21c>)
 800c5b8:	f7f3 fe22 	bl	8000200 <memchr>
 800c5bc:	9a04      	ldr	r2, [sp, #16]
 800c5be:	b9d8      	cbnz	r0, 800c5f8 <_vfiprintf_r+0x110>
 800c5c0:	06d1      	lsls	r1, r2, #27
 800c5c2:	bf44      	itt	mi
 800c5c4:	2320      	movmi	r3, #32
 800c5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5ca:	0713      	lsls	r3, r2, #28
 800c5cc:	bf44      	itt	mi
 800c5ce:	232b      	movmi	r3, #43	@ 0x2b
 800c5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5da:	d015      	beq.n	800c608 <_vfiprintf_r+0x120>
 800c5dc:	9a07      	ldr	r2, [sp, #28]
 800c5de:	4654      	mov	r4, sl
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	f04f 0c0a 	mov.w	ip, #10
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5ec:	3b30      	subs	r3, #48	@ 0x30
 800c5ee:	2b09      	cmp	r3, #9
 800c5f0:	d94b      	bls.n	800c68a <_vfiprintf_r+0x1a2>
 800c5f2:	b1b0      	cbz	r0, 800c622 <_vfiprintf_r+0x13a>
 800c5f4:	9207      	str	r2, [sp, #28]
 800c5f6:	e014      	b.n	800c622 <_vfiprintf_r+0x13a>
 800c5f8:	eba0 0308 	sub.w	r3, r0, r8
 800c5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800c600:	4313      	orrs	r3, r2
 800c602:	9304      	str	r3, [sp, #16]
 800c604:	46a2      	mov	sl, r4
 800c606:	e7d2      	b.n	800c5ae <_vfiprintf_r+0xc6>
 800c608:	9b03      	ldr	r3, [sp, #12]
 800c60a:	1d19      	adds	r1, r3, #4
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	9103      	str	r1, [sp, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	bfbb      	ittet	lt
 800c614:	425b      	neglt	r3, r3
 800c616:	f042 0202 	orrlt.w	r2, r2, #2
 800c61a:	9307      	strge	r3, [sp, #28]
 800c61c:	9307      	strlt	r3, [sp, #28]
 800c61e:	bfb8      	it	lt
 800c620:	9204      	strlt	r2, [sp, #16]
 800c622:	7823      	ldrb	r3, [r4, #0]
 800c624:	2b2e      	cmp	r3, #46	@ 0x2e
 800c626:	d10a      	bne.n	800c63e <_vfiprintf_r+0x156>
 800c628:	7863      	ldrb	r3, [r4, #1]
 800c62a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c62c:	d132      	bne.n	800c694 <_vfiprintf_r+0x1ac>
 800c62e:	9b03      	ldr	r3, [sp, #12]
 800c630:	1d1a      	adds	r2, r3, #4
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	9203      	str	r2, [sp, #12]
 800c636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c63a:	3402      	adds	r4, #2
 800c63c:	9305      	str	r3, [sp, #20]
 800c63e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c714 <_vfiprintf_r+0x22c>
 800c642:	7821      	ldrb	r1, [r4, #0]
 800c644:	2203      	movs	r2, #3
 800c646:	4650      	mov	r0, sl
 800c648:	f7f3 fdda 	bl	8000200 <memchr>
 800c64c:	b138      	cbz	r0, 800c65e <_vfiprintf_r+0x176>
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	eba0 000a 	sub.w	r0, r0, sl
 800c654:	2240      	movs	r2, #64	@ 0x40
 800c656:	4082      	lsls	r2, r0
 800c658:	4313      	orrs	r3, r2
 800c65a:	3401      	adds	r4, #1
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c662:	4829      	ldr	r0, [pc, #164]	@ (800c708 <_vfiprintf_r+0x220>)
 800c664:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c668:	2206      	movs	r2, #6
 800c66a:	f7f3 fdc9 	bl	8000200 <memchr>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d03f      	beq.n	800c6f2 <_vfiprintf_r+0x20a>
 800c672:	4b26      	ldr	r3, [pc, #152]	@ (800c70c <_vfiprintf_r+0x224>)
 800c674:	bb1b      	cbnz	r3, 800c6be <_vfiprintf_r+0x1d6>
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	3307      	adds	r3, #7
 800c67a:	f023 0307 	bic.w	r3, r3, #7
 800c67e:	3308      	adds	r3, #8
 800c680:	9303      	str	r3, [sp, #12]
 800c682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c684:	443b      	add	r3, r7
 800c686:	9309      	str	r3, [sp, #36]	@ 0x24
 800c688:	e76a      	b.n	800c560 <_vfiprintf_r+0x78>
 800c68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c68e:	460c      	mov	r4, r1
 800c690:	2001      	movs	r0, #1
 800c692:	e7a8      	b.n	800c5e6 <_vfiprintf_r+0xfe>
 800c694:	2300      	movs	r3, #0
 800c696:	3401      	adds	r4, #1
 800c698:	9305      	str	r3, [sp, #20]
 800c69a:	4619      	mov	r1, r3
 800c69c:	f04f 0c0a 	mov.w	ip, #10
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a6:	3a30      	subs	r2, #48	@ 0x30
 800c6a8:	2a09      	cmp	r2, #9
 800c6aa:	d903      	bls.n	800c6b4 <_vfiprintf_r+0x1cc>
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d0c6      	beq.n	800c63e <_vfiprintf_r+0x156>
 800c6b0:	9105      	str	r1, [sp, #20]
 800c6b2:	e7c4      	b.n	800c63e <_vfiprintf_r+0x156>
 800c6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e7f0      	b.n	800c6a0 <_vfiprintf_r+0x1b8>
 800c6be:	ab03      	add	r3, sp, #12
 800c6c0:	9300      	str	r3, [sp, #0]
 800c6c2:	462a      	mov	r2, r5
 800c6c4:	4b12      	ldr	r3, [pc, #72]	@ (800c710 <_vfiprintf_r+0x228>)
 800c6c6:	a904      	add	r1, sp, #16
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f3af 8000 	nop.w
 800c6ce:	4607      	mov	r7, r0
 800c6d0:	1c78      	adds	r0, r7, #1
 800c6d2:	d1d6      	bne.n	800c682 <_vfiprintf_r+0x19a>
 800c6d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6d6:	07d9      	lsls	r1, r3, #31
 800c6d8:	d405      	bmi.n	800c6e6 <_vfiprintf_r+0x1fe>
 800c6da:	89ab      	ldrh	r3, [r5, #12]
 800c6dc:	059a      	lsls	r2, r3, #22
 800c6de:	d402      	bmi.n	800c6e6 <_vfiprintf_r+0x1fe>
 800c6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6e2:	f7ff fc57 	bl	800bf94 <__retarget_lock_release_recursive>
 800c6e6:	89ab      	ldrh	r3, [r5, #12]
 800c6e8:	065b      	lsls	r3, r3, #25
 800c6ea:	f53f af1f 	bmi.w	800c52c <_vfiprintf_r+0x44>
 800c6ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6f0:	e71e      	b.n	800c530 <_vfiprintf_r+0x48>
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4b05      	ldr	r3, [pc, #20]	@ (800c710 <_vfiprintf_r+0x228>)
 800c6fa:	a904      	add	r1, sp, #16
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	f000 f879 	bl	800c7f4 <_printf_i>
 800c702:	e7e4      	b.n	800c6ce <_vfiprintf_r+0x1e6>
 800c704:	0800dcbf 	.word	0x0800dcbf
 800c708:	0800dcc9 	.word	0x0800dcc9
 800c70c:	00000000 	.word	0x00000000
 800c710:	0800c4c3 	.word	0x0800c4c3
 800c714:	0800dcc5 	.word	0x0800dcc5

0800c718 <_printf_common>:
 800c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	4616      	mov	r6, r2
 800c71e:	4698      	mov	r8, r3
 800c720:	688a      	ldr	r2, [r1, #8]
 800c722:	690b      	ldr	r3, [r1, #16]
 800c724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c728:	4293      	cmp	r3, r2
 800c72a:	bfb8      	it	lt
 800c72c:	4613      	movlt	r3, r2
 800c72e:	6033      	str	r3, [r6, #0]
 800c730:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c734:	4607      	mov	r7, r0
 800c736:	460c      	mov	r4, r1
 800c738:	b10a      	cbz	r2, 800c73e <_printf_common+0x26>
 800c73a:	3301      	adds	r3, #1
 800c73c:	6033      	str	r3, [r6, #0]
 800c73e:	6823      	ldr	r3, [r4, #0]
 800c740:	0699      	lsls	r1, r3, #26
 800c742:	bf42      	ittt	mi
 800c744:	6833      	ldrmi	r3, [r6, #0]
 800c746:	3302      	addmi	r3, #2
 800c748:	6033      	strmi	r3, [r6, #0]
 800c74a:	6825      	ldr	r5, [r4, #0]
 800c74c:	f015 0506 	ands.w	r5, r5, #6
 800c750:	d106      	bne.n	800c760 <_printf_common+0x48>
 800c752:	f104 0a19 	add.w	sl, r4, #25
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	6832      	ldr	r2, [r6, #0]
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	42ab      	cmp	r3, r5
 800c75e:	dc26      	bgt.n	800c7ae <_printf_common+0x96>
 800c760:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c764:	6822      	ldr	r2, [r4, #0]
 800c766:	3b00      	subs	r3, #0
 800c768:	bf18      	it	ne
 800c76a:	2301      	movne	r3, #1
 800c76c:	0692      	lsls	r2, r2, #26
 800c76e:	d42b      	bmi.n	800c7c8 <_printf_common+0xb0>
 800c770:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c774:	4641      	mov	r1, r8
 800c776:	4638      	mov	r0, r7
 800c778:	47c8      	blx	r9
 800c77a:	3001      	adds	r0, #1
 800c77c:	d01e      	beq.n	800c7bc <_printf_common+0xa4>
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	6922      	ldr	r2, [r4, #16]
 800c782:	f003 0306 	and.w	r3, r3, #6
 800c786:	2b04      	cmp	r3, #4
 800c788:	bf02      	ittt	eq
 800c78a:	68e5      	ldreq	r5, [r4, #12]
 800c78c:	6833      	ldreq	r3, [r6, #0]
 800c78e:	1aed      	subeq	r5, r5, r3
 800c790:	68a3      	ldr	r3, [r4, #8]
 800c792:	bf0c      	ite	eq
 800c794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c798:	2500      	movne	r5, #0
 800c79a:	4293      	cmp	r3, r2
 800c79c:	bfc4      	itt	gt
 800c79e:	1a9b      	subgt	r3, r3, r2
 800c7a0:	18ed      	addgt	r5, r5, r3
 800c7a2:	2600      	movs	r6, #0
 800c7a4:	341a      	adds	r4, #26
 800c7a6:	42b5      	cmp	r5, r6
 800c7a8:	d11a      	bne.n	800c7e0 <_printf_common+0xc8>
 800c7aa:	2000      	movs	r0, #0
 800c7ac:	e008      	b.n	800c7c0 <_printf_common+0xa8>
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	4652      	mov	r2, sl
 800c7b2:	4641      	mov	r1, r8
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	47c8      	blx	r9
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d103      	bne.n	800c7c4 <_printf_common+0xac>
 800c7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7c4:	3501      	adds	r5, #1
 800c7c6:	e7c6      	b.n	800c756 <_printf_common+0x3e>
 800c7c8:	18e1      	adds	r1, r4, r3
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	2030      	movs	r0, #48	@ 0x30
 800c7ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c7d2:	4422      	add	r2, r4
 800c7d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c7d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c7dc:	3302      	adds	r3, #2
 800c7de:	e7c7      	b.n	800c770 <_printf_common+0x58>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	4622      	mov	r2, r4
 800c7e4:	4641      	mov	r1, r8
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	47c8      	blx	r9
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	d0e6      	beq.n	800c7bc <_printf_common+0xa4>
 800c7ee:	3601      	adds	r6, #1
 800c7f0:	e7d9      	b.n	800c7a6 <_printf_common+0x8e>
	...

0800c7f4 <_printf_i>:
 800c7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f8:	7e0f      	ldrb	r7, [r1, #24]
 800c7fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7fc:	2f78      	cmp	r7, #120	@ 0x78
 800c7fe:	4691      	mov	r9, r2
 800c800:	4680      	mov	r8, r0
 800c802:	460c      	mov	r4, r1
 800c804:	469a      	mov	sl, r3
 800c806:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c80a:	d807      	bhi.n	800c81c <_printf_i+0x28>
 800c80c:	2f62      	cmp	r7, #98	@ 0x62
 800c80e:	d80a      	bhi.n	800c826 <_printf_i+0x32>
 800c810:	2f00      	cmp	r7, #0
 800c812:	f000 80d2 	beq.w	800c9ba <_printf_i+0x1c6>
 800c816:	2f58      	cmp	r7, #88	@ 0x58
 800c818:	f000 80b9 	beq.w	800c98e <_printf_i+0x19a>
 800c81c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c820:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c824:	e03a      	b.n	800c89c <_printf_i+0xa8>
 800c826:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c82a:	2b15      	cmp	r3, #21
 800c82c:	d8f6      	bhi.n	800c81c <_printf_i+0x28>
 800c82e:	a101      	add	r1, pc, #4	@ (adr r1, 800c834 <_printf_i+0x40>)
 800c830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c834:	0800c88d 	.word	0x0800c88d
 800c838:	0800c8a1 	.word	0x0800c8a1
 800c83c:	0800c81d 	.word	0x0800c81d
 800c840:	0800c81d 	.word	0x0800c81d
 800c844:	0800c81d 	.word	0x0800c81d
 800c848:	0800c81d 	.word	0x0800c81d
 800c84c:	0800c8a1 	.word	0x0800c8a1
 800c850:	0800c81d 	.word	0x0800c81d
 800c854:	0800c81d 	.word	0x0800c81d
 800c858:	0800c81d 	.word	0x0800c81d
 800c85c:	0800c81d 	.word	0x0800c81d
 800c860:	0800c9a1 	.word	0x0800c9a1
 800c864:	0800c8cb 	.word	0x0800c8cb
 800c868:	0800c95b 	.word	0x0800c95b
 800c86c:	0800c81d 	.word	0x0800c81d
 800c870:	0800c81d 	.word	0x0800c81d
 800c874:	0800c9c3 	.word	0x0800c9c3
 800c878:	0800c81d 	.word	0x0800c81d
 800c87c:	0800c8cb 	.word	0x0800c8cb
 800c880:	0800c81d 	.word	0x0800c81d
 800c884:	0800c81d 	.word	0x0800c81d
 800c888:	0800c963 	.word	0x0800c963
 800c88c:	6833      	ldr	r3, [r6, #0]
 800c88e:	1d1a      	adds	r2, r3, #4
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6032      	str	r2, [r6, #0]
 800c894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c898:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c89c:	2301      	movs	r3, #1
 800c89e:	e09d      	b.n	800c9dc <_printf_i+0x1e8>
 800c8a0:	6833      	ldr	r3, [r6, #0]
 800c8a2:	6820      	ldr	r0, [r4, #0]
 800c8a4:	1d19      	adds	r1, r3, #4
 800c8a6:	6031      	str	r1, [r6, #0]
 800c8a8:	0606      	lsls	r6, r0, #24
 800c8aa:	d501      	bpl.n	800c8b0 <_printf_i+0xbc>
 800c8ac:	681d      	ldr	r5, [r3, #0]
 800c8ae:	e003      	b.n	800c8b8 <_printf_i+0xc4>
 800c8b0:	0645      	lsls	r5, r0, #25
 800c8b2:	d5fb      	bpl.n	800c8ac <_printf_i+0xb8>
 800c8b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c8b8:	2d00      	cmp	r5, #0
 800c8ba:	da03      	bge.n	800c8c4 <_printf_i+0xd0>
 800c8bc:	232d      	movs	r3, #45	@ 0x2d
 800c8be:	426d      	negs	r5, r5
 800c8c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8c4:	4859      	ldr	r0, [pc, #356]	@ (800ca2c <_printf_i+0x238>)
 800c8c6:	230a      	movs	r3, #10
 800c8c8:	e011      	b.n	800c8ee <_printf_i+0xfa>
 800c8ca:	6821      	ldr	r1, [r4, #0]
 800c8cc:	6833      	ldr	r3, [r6, #0]
 800c8ce:	0608      	lsls	r0, r1, #24
 800c8d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c8d4:	d402      	bmi.n	800c8dc <_printf_i+0xe8>
 800c8d6:	0649      	lsls	r1, r1, #25
 800c8d8:	bf48      	it	mi
 800c8da:	b2ad      	uxthmi	r5, r5
 800c8dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c8de:	4853      	ldr	r0, [pc, #332]	@ (800ca2c <_printf_i+0x238>)
 800c8e0:	6033      	str	r3, [r6, #0]
 800c8e2:	bf14      	ite	ne
 800c8e4:	230a      	movne	r3, #10
 800c8e6:	2308      	moveq	r3, #8
 800c8e8:	2100      	movs	r1, #0
 800c8ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8ee:	6866      	ldr	r6, [r4, #4]
 800c8f0:	60a6      	str	r6, [r4, #8]
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	bfa2      	ittt	ge
 800c8f6:	6821      	ldrge	r1, [r4, #0]
 800c8f8:	f021 0104 	bicge.w	r1, r1, #4
 800c8fc:	6021      	strge	r1, [r4, #0]
 800c8fe:	b90d      	cbnz	r5, 800c904 <_printf_i+0x110>
 800c900:	2e00      	cmp	r6, #0
 800c902:	d04b      	beq.n	800c99c <_printf_i+0x1a8>
 800c904:	4616      	mov	r6, r2
 800c906:	fbb5 f1f3 	udiv	r1, r5, r3
 800c90a:	fb03 5711 	mls	r7, r3, r1, r5
 800c90e:	5dc7      	ldrb	r7, [r0, r7]
 800c910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c914:	462f      	mov	r7, r5
 800c916:	42bb      	cmp	r3, r7
 800c918:	460d      	mov	r5, r1
 800c91a:	d9f4      	bls.n	800c906 <_printf_i+0x112>
 800c91c:	2b08      	cmp	r3, #8
 800c91e:	d10b      	bne.n	800c938 <_printf_i+0x144>
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	07df      	lsls	r7, r3, #31
 800c924:	d508      	bpl.n	800c938 <_printf_i+0x144>
 800c926:	6923      	ldr	r3, [r4, #16]
 800c928:	6861      	ldr	r1, [r4, #4]
 800c92a:	4299      	cmp	r1, r3
 800c92c:	bfde      	ittt	le
 800c92e:	2330      	movle	r3, #48	@ 0x30
 800c930:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c934:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c938:	1b92      	subs	r2, r2, r6
 800c93a:	6122      	str	r2, [r4, #16]
 800c93c:	f8cd a000 	str.w	sl, [sp]
 800c940:	464b      	mov	r3, r9
 800c942:	aa03      	add	r2, sp, #12
 800c944:	4621      	mov	r1, r4
 800c946:	4640      	mov	r0, r8
 800c948:	f7ff fee6 	bl	800c718 <_printf_common>
 800c94c:	3001      	adds	r0, #1
 800c94e:	d14a      	bne.n	800c9e6 <_printf_i+0x1f2>
 800c950:	f04f 30ff 	mov.w	r0, #4294967295
 800c954:	b004      	add	sp, #16
 800c956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	f043 0320 	orr.w	r3, r3, #32
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	4833      	ldr	r0, [pc, #204]	@ (800ca30 <_printf_i+0x23c>)
 800c964:	2778      	movs	r7, #120	@ 0x78
 800c966:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c96a:	6823      	ldr	r3, [r4, #0]
 800c96c:	6831      	ldr	r1, [r6, #0]
 800c96e:	061f      	lsls	r7, r3, #24
 800c970:	f851 5b04 	ldr.w	r5, [r1], #4
 800c974:	d402      	bmi.n	800c97c <_printf_i+0x188>
 800c976:	065f      	lsls	r7, r3, #25
 800c978:	bf48      	it	mi
 800c97a:	b2ad      	uxthmi	r5, r5
 800c97c:	6031      	str	r1, [r6, #0]
 800c97e:	07d9      	lsls	r1, r3, #31
 800c980:	bf44      	itt	mi
 800c982:	f043 0320 	orrmi.w	r3, r3, #32
 800c986:	6023      	strmi	r3, [r4, #0]
 800c988:	b11d      	cbz	r5, 800c992 <_printf_i+0x19e>
 800c98a:	2310      	movs	r3, #16
 800c98c:	e7ac      	b.n	800c8e8 <_printf_i+0xf4>
 800c98e:	4827      	ldr	r0, [pc, #156]	@ (800ca2c <_printf_i+0x238>)
 800c990:	e7e9      	b.n	800c966 <_printf_i+0x172>
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	f023 0320 	bic.w	r3, r3, #32
 800c998:	6023      	str	r3, [r4, #0]
 800c99a:	e7f6      	b.n	800c98a <_printf_i+0x196>
 800c99c:	4616      	mov	r6, r2
 800c99e:	e7bd      	b.n	800c91c <_printf_i+0x128>
 800c9a0:	6833      	ldr	r3, [r6, #0]
 800c9a2:	6825      	ldr	r5, [r4, #0]
 800c9a4:	6961      	ldr	r1, [r4, #20]
 800c9a6:	1d18      	adds	r0, r3, #4
 800c9a8:	6030      	str	r0, [r6, #0]
 800c9aa:	062e      	lsls	r6, r5, #24
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	d501      	bpl.n	800c9b4 <_printf_i+0x1c0>
 800c9b0:	6019      	str	r1, [r3, #0]
 800c9b2:	e002      	b.n	800c9ba <_printf_i+0x1c6>
 800c9b4:	0668      	lsls	r0, r5, #25
 800c9b6:	d5fb      	bpl.n	800c9b0 <_printf_i+0x1bc>
 800c9b8:	8019      	strh	r1, [r3, #0]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	4616      	mov	r6, r2
 800c9c0:	e7bc      	b.n	800c93c <_printf_i+0x148>
 800c9c2:	6833      	ldr	r3, [r6, #0]
 800c9c4:	1d1a      	adds	r2, r3, #4
 800c9c6:	6032      	str	r2, [r6, #0]
 800c9c8:	681e      	ldr	r6, [r3, #0]
 800c9ca:	6862      	ldr	r2, [r4, #4]
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	4630      	mov	r0, r6
 800c9d0:	f7f3 fc16 	bl	8000200 <memchr>
 800c9d4:	b108      	cbz	r0, 800c9da <_printf_i+0x1e6>
 800c9d6:	1b80      	subs	r0, r0, r6
 800c9d8:	6060      	str	r0, [r4, #4]
 800c9da:	6863      	ldr	r3, [r4, #4]
 800c9dc:	6123      	str	r3, [r4, #16]
 800c9de:	2300      	movs	r3, #0
 800c9e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9e4:	e7aa      	b.n	800c93c <_printf_i+0x148>
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	47d0      	blx	sl
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d0ad      	beq.n	800c950 <_printf_i+0x15c>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	079b      	lsls	r3, r3, #30
 800c9f8:	d413      	bmi.n	800ca22 <_printf_i+0x22e>
 800c9fa:	68e0      	ldr	r0, [r4, #12]
 800c9fc:	9b03      	ldr	r3, [sp, #12]
 800c9fe:	4298      	cmp	r0, r3
 800ca00:	bfb8      	it	lt
 800ca02:	4618      	movlt	r0, r3
 800ca04:	e7a6      	b.n	800c954 <_printf_i+0x160>
 800ca06:	2301      	movs	r3, #1
 800ca08:	4632      	mov	r2, r6
 800ca0a:	4649      	mov	r1, r9
 800ca0c:	4640      	mov	r0, r8
 800ca0e:	47d0      	blx	sl
 800ca10:	3001      	adds	r0, #1
 800ca12:	d09d      	beq.n	800c950 <_printf_i+0x15c>
 800ca14:	3501      	adds	r5, #1
 800ca16:	68e3      	ldr	r3, [r4, #12]
 800ca18:	9903      	ldr	r1, [sp, #12]
 800ca1a:	1a5b      	subs	r3, r3, r1
 800ca1c:	42ab      	cmp	r3, r5
 800ca1e:	dcf2      	bgt.n	800ca06 <_printf_i+0x212>
 800ca20:	e7eb      	b.n	800c9fa <_printf_i+0x206>
 800ca22:	2500      	movs	r5, #0
 800ca24:	f104 0619 	add.w	r6, r4, #25
 800ca28:	e7f5      	b.n	800ca16 <_printf_i+0x222>
 800ca2a:	bf00      	nop
 800ca2c:	0800dcd0 	.word	0x0800dcd0
 800ca30:	0800dce1 	.word	0x0800dce1

0800ca34 <__sflush_r>:
 800ca34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3c:	0716      	lsls	r6, r2, #28
 800ca3e:	4605      	mov	r5, r0
 800ca40:	460c      	mov	r4, r1
 800ca42:	d454      	bmi.n	800caee <__sflush_r+0xba>
 800ca44:	684b      	ldr	r3, [r1, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	dc02      	bgt.n	800ca50 <__sflush_r+0x1c>
 800ca4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	dd48      	ble.n	800cae2 <__sflush_r+0xae>
 800ca50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	d045      	beq.n	800cae2 <__sflush_r+0xae>
 800ca56:	2300      	movs	r3, #0
 800ca58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca5c:	682f      	ldr	r7, [r5, #0]
 800ca5e:	6a21      	ldr	r1, [r4, #32]
 800ca60:	602b      	str	r3, [r5, #0]
 800ca62:	d030      	beq.n	800cac6 <__sflush_r+0x92>
 800ca64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	0759      	lsls	r1, r3, #29
 800ca6a:	d505      	bpl.n	800ca78 <__sflush_r+0x44>
 800ca6c:	6863      	ldr	r3, [r4, #4]
 800ca6e:	1ad2      	subs	r2, r2, r3
 800ca70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca72:	b10b      	cbz	r3, 800ca78 <__sflush_r+0x44>
 800ca74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca76:	1ad2      	subs	r2, r2, r3
 800ca78:	2300      	movs	r3, #0
 800ca7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca7c:	6a21      	ldr	r1, [r4, #32]
 800ca7e:	4628      	mov	r0, r5
 800ca80:	47b0      	blx	r6
 800ca82:	1c43      	adds	r3, r0, #1
 800ca84:	89a3      	ldrh	r3, [r4, #12]
 800ca86:	d106      	bne.n	800ca96 <__sflush_r+0x62>
 800ca88:	6829      	ldr	r1, [r5, #0]
 800ca8a:	291d      	cmp	r1, #29
 800ca8c:	d82b      	bhi.n	800cae6 <__sflush_r+0xb2>
 800ca8e:	4a2a      	ldr	r2, [pc, #168]	@ (800cb38 <__sflush_r+0x104>)
 800ca90:	410a      	asrs	r2, r1
 800ca92:	07d6      	lsls	r6, r2, #31
 800ca94:	d427      	bmi.n	800cae6 <__sflush_r+0xb2>
 800ca96:	2200      	movs	r2, #0
 800ca98:	6062      	str	r2, [r4, #4]
 800ca9a:	04d9      	lsls	r1, r3, #19
 800ca9c:	6922      	ldr	r2, [r4, #16]
 800ca9e:	6022      	str	r2, [r4, #0]
 800caa0:	d504      	bpl.n	800caac <__sflush_r+0x78>
 800caa2:	1c42      	adds	r2, r0, #1
 800caa4:	d101      	bne.n	800caaa <__sflush_r+0x76>
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	b903      	cbnz	r3, 800caac <__sflush_r+0x78>
 800caaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800caac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caae:	602f      	str	r7, [r5, #0]
 800cab0:	b1b9      	cbz	r1, 800cae2 <__sflush_r+0xae>
 800cab2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cab6:	4299      	cmp	r1, r3
 800cab8:	d002      	beq.n	800cac0 <__sflush_r+0x8c>
 800caba:	4628      	mov	r0, r5
 800cabc:	f7ff fa92 	bl	800bfe4 <_free_r>
 800cac0:	2300      	movs	r3, #0
 800cac2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cac4:	e00d      	b.n	800cae2 <__sflush_r+0xae>
 800cac6:	2301      	movs	r3, #1
 800cac8:	4628      	mov	r0, r5
 800caca:	47b0      	blx	r6
 800cacc:	4602      	mov	r2, r0
 800cace:	1c50      	adds	r0, r2, #1
 800cad0:	d1c9      	bne.n	800ca66 <__sflush_r+0x32>
 800cad2:	682b      	ldr	r3, [r5, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d0c6      	beq.n	800ca66 <__sflush_r+0x32>
 800cad8:	2b1d      	cmp	r3, #29
 800cada:	d001      	beq.n	800cae0 <__sflush_r+0xac>
 800cadc:	2b16      	cmp	r3, #22
 800cade:	d11e      	bne.n	800cb1e <__sflush_r+0xea>
 800cae0:	602f      	str	r7, [r5, #0]
 800cae2:	2000      	movs	r0, #0
 800cae4:	e022      	b.n	800cb2c <__sflush_r+0xf8>
 800cae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caea:	b21b      	sxth	r3, r3
 800caec:	e01b      	b.n	800cb26 <__sflush_r+0xf2>
 800caee:	690f      	ldr	r7, [r1, #16]
 800caf0:	2f00      	cmp	r7, #0
 800caf2:	d0f6      	beq.n	800cae2 <__sflush_r+0xae>
 800caf4:	0793      	lsls	r3, r2, #30
 800caf6:	680e      	ldr	r6, [r1, #0]
 800caf8:	bf08      	it	eq
 800cafa:	694b      	ldreq	r3, [r1, #20]
 800cafc:	600f      	str	r7, [r1, #0]
 800cafe:	bf18      	it	ne
 800cb00:	2300      	movne	r3, #0
 800cb02:	eba6 0807 	sub.w	r8, r6, r7
 800cb06:	608b      	str	r3, [r1, #8]
 800cb08:	f1b8 0f00 	cmp.w	r8, #0
 800cb0c:	dde9      	ble.n	800cae2 <__sflush_r+0xae>
 800cb0e:	6a21      	ldr	r1, [r4, #32]
 800cb10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cb12:	4643      	mov	r3, r8
 800cb14:	463a      	mov	r2, r7
 800cb16:	4628      	mov	r0, r5
 800cb18:	47b0      	blx	r6
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	dc08      	bgt.n	800cb30 <__sflush_r+0xfc>
 800cb1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb30:	4407      	add	r7, r0
 800cb32:	eba8 0800 	sub.w	r8, r8, r0
 800cb36:	e7e7      	b.n	800cb08 <__sflush_r+0xd4>
 800cb38:	dfbffffe 	.word	0xdfbffffe

0800cb3c <_fflush_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	690b      	ldr	r3, [r1, #16]
 800cb40:	4605      	mov	r5, r0
 800cb42:	460c      	mov	r4, r1
 800cb44:	b913      	cbnz	r3, 800cb4c <_fflush_r+0x10>
 800cb46:	2500      	movs	r5, #0
 800cb48:	4628      	mov	r0, r5
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	b118      	cbz	r0, 800cb56 <_fflush_r+0x1a>
 800cb4e:	6a03      	ldr	r3, [r0, #32]
 800cb50:	b90b      	cbnz	r3, 800cb56 <_fflush_r+0x1a>
 800cb52:	f7ff f819 	bl	800bb88 <__sinit>
 800cb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d0f3      	beq.n	800cb46 <_fflush_r+0xa>
 800cb5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb60:	07d0      	lsls	r0, r2, #31
 800cb62:	d404      	bmi.n	800cb6e <_fflush_r+0x32>
 800cb64:	0599      	lsls	r1, r3, #22
 800cb66:	d402      	bmi.n	800cb6e <_fflush_r+0x32>
 800cb68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb6a:	f7ff fa12 	bl	800bf92 <__retarget_lock_acquire_recursive>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	4621      	mov	r1, r4
 800cb72:	f7ff ff5f 	bl	800ca34 <__sflush_r>
 800cb76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb78:	07da      	lsls	r2, r3, #31
 800cb7a:	4605      	mov	r5, r0
 800cb7c:	d4e4      	bmi.n	800cb48 <_fflush_r+0xc>
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	059b      	lsls	r3, r3, #22
 800cb82:	d4e1      	bmi.n	800cb48 <_fflush_r+0xc>
 800cb84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb86:	f7ff fa05 	bl	800bf94 <__retarget_lock_release_recursive>
 800cb8a:	e7dd      	b.n	800cb48 <_fflush_r+0xc>

0800cb8c <fiprintf>:
 800cb8c:	b40e      	push	{r1, r2, r3}
 800cb8e:	b503      	push	{r0, r1, lr}
 800cb90:	4601      	mov	r1, r0
 800cb92:	ab03      	add	r3, sp, #12
 800cb94:	4805      	ldr	r0, [pc, #20]	@ (800cbac <fiprintf+0x20>)
 800cb96:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb9a:	6800      	ldr	r0, [r0, #0]
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	f7ff fca3 	bl	800c4e8 <_vfiprintf_r>
 800cba2:	b002      	add	sp, #8
 800cba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cba8:	b003      	add	sp, #12
 800cbaa:	4770      	bx	lr
 800cbac:	20000024 	.word	0x20000024

0800cbb0 <__swhatbuf_r>:
 800cbb0:	b570      	push	{r4, r5, r6, lr}
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbb8:	2900      	cmp	r1, #0
 800cbba:	b096      	sub	sp, #88	@ 0x58
 800cbbc:	4615      	mov	r5, r2
 800cbbe:	461e      	mov	r6, r3
 800cbc0:	da0d      	bge.n	800cbde <__swhatbuf_r+0x2e>
 800cbc2:	89a3      	ldrh	r3, [r4, #12]
 800cbc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbc8:	f04f 0100 	mov.w	r1, #0
 800cbcc:	bf14      	ite	ne
 800cbce:	2340      	movne	r3, #64	@ 0x40
 800cbd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	6031      	str	r1, [r6, #0]
 800cbd8:	602b      	str	r3, [r5, #0]
 800cbda:	b016      	add	sp, #88	@ 0x58
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
 800cbde:	466a      	mov	r2, sp
 800cbe0:	f000 f862 	bl	800cca8 <_fstat_r>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	dbec      	blt.n	800cbc2 <__swhatbuf_r+0x12>
 800cbe8:	9901      	ldr	r1, [sp, #4]
 800cbea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cbee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbf2:	4259      	negs	r1, r3
 800cbf4:	4159      	adcs	r1, r3
 800cbf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbfa:	e7eb      	b.n	800cbd4 <__swhatbuf_r+0x24>

0800cbfc <__smakebuf_r>:
 800cbfc:	898b      	ldrh	r3, [r1, #12]
 800cbfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc00:	079d      	lsls	r5, r3, #30
 800cc02:	4606      	mov	r6, r0
 800cc04:	460c      	mov	r4, r1
 800cc06:	d507      	bpl.n	800cc18 <__smakebuf_r+0x1c>
 800cc08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	6123      	str	r3, [r4, #16]
 800cc10:	2301      	movs	r3, #1
 800cc12:	6163      	str	r3, [r4, #20]
 800cc14:	b003      	add	sp, #12
 800cc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc18:	ab01      	add	r3, sp, #4
 800cc1a:	466a      	mov	r2, sp
 800cc1c:	f7ff ffc8 	bl	800cbb0 <__swhatbuf_r>
 800cc20:	9f00      	ldr	r7, [sp, #0]
 800cc22:	4605      	mov	r5, r0
 800cc24:	4639      	mov	r1, r7
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7ff fa50 	bl	800c0cc <_malloc_r>
 800cc2c:	b948      	cbnz	r0, 800cc42 <__smakebuf_r+0x46>
 800cc2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc32:	059a      	lsls	r2, r3, #22
 800cc34:	d4ee      	bmi.n	800cc14 <__smakebuf_r+0x18>
 800cc36:	f023 0303 	bic.w	r3, r3, #3
 800cc3a:	f043 0302 	orr.w	r3, r3, #2
 800cc3e:	81a3      	strh	r3, [r4, #12]
 800cc40:	e7e2      	b.n	800cc08 <__smakebuf_r+0xc>
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	6020      	str	r0, [r4, #0]
 800cc46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	9b01      	ldr	r3, [sp, #4]
 800cc4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc52:	b15b      	cbz	r3, 800cc6c <__smakebuf_r+0x70>
 800cc54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f000 f837 	bl	800cccc <_isatty_r>
 800cc5e:	b128      	cbz	r0, 800cc6c <__smakebuf_r+0x70>
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	f023 0303 	bic.w	r3, r3, #3
 800cc66:	f043 0301 	orr.w	r3, r3, #1
 800cc6a:	81a3      	strh	r3, [r4, #12]
 800cc6c:	89a3      	ldrh	r3, [r4, #12]
 800cc6e:	431d      	orrs	r5, r3
 800cc70:	81a5      	strh	r5, [r4, #12]
 800cc72:	e7cf      	b.n	800cc14 <__smakebuf_r+0x18>

0800cc74 <memmove>:
 800cc74:	4288      	cmp	r0, r1
 800cc76:	b510      	push	{r4, lr}
 800cc78:	eb01 0402 	add.w	r4, r1, r2
 800cc7c:	d902      	bls.n	800cc84 <memmove+0x10>
 800cc7e:	4284      	cmp	r4, r0
 800cc80:	4623      	mov	r3, r4
 800cc82:	d807      	bhi.n	800cc94 <memmove+0x20>
 800cc84:	1e43      	subs	r3, r0, #1
 800cc86:	42a1      	cmp	r1, r4
 800cc88:	d008      	beq.n	800cc9c <memmove+0x28>
 800cc8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc92:	e7f8      	b.n	800cc86 <memmove+0x12>
 800cc94:	4402      	add	r2, r0
 800cc96:	4601      	mov	r1, r0
 800cc98:	428a      	cmp	r2, r1
 800cc9a:	d100      	bne.n	800cc9e <memmove+0x2a>
 800cc9c:	bd10      	pop	{r4, pc}
 800cc9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cca6:	e7f7      	b.n	800cc98 <memmove+0x24>

0800cca8 <_fstat_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	4d07      	ldr	r5, [pc, #28]	@ (800ccc8 <_fstat_r+0x20>)
 800ccac:	2300      	movs	r3, #0
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	f7f5 fd08 	bl	80026ca <_fstat>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d102      	bne.n	800ccc4 <_fstat_r+0x1c>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b103      	cbz	r3, 800ccc4 <_fstat_r+0x1c>
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	200117c0 	.word	0x200117c0

0800cccc <_isatty_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	4d06      	ldr	r5, [pc, #24]	@ (800cce8 <_isatty_r+0x1c>)
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f5 fd07 	bl	80026ea <_isatty>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_isatty_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_isatty_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	200117c0 	.word	0x200117c0

0800ccec <_sbrk_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	4d06      	ldr	r5, [pc, #24]	@ (800cd08 <_sbrk_r+0x1c>)
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	4608      	mov	r0, r1
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	f7f5 fd10 	bl	800271c <_sbrk>
 800ccfc:	1c43      	adds	r3, r0, #1
 800ccfe:	d102      	bne.n	800cd06 <_sbrk_r+0x1a>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	b103      	cbz	r3, 800cd06 <_sbrk_r+0x1a>
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	bd38      	pop	{r3, r4, r5, pc}
 800cd08:	200117c0 	.word	0x200117c0

0800cd0c <memcpy>:
 800cd0c:	440a      	add	r2, r1
 800cd0e:	4291      	cmp	r1, r2
 800cd10:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd14:	d100      	bne.n	800cd18 <memcpy+0xc>
 800cd16:	4770      	bx	lr
 800cd18:	b510      	push	{r4, lr}
 800cd1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd22:	4291      	cmp	r1, r2
 800cd24:	d1f9      	bne.n	800cd1a <memcpy+0xe>
 800cd26:	bd10      	pop	{r4, pc}

0800cd28 <abort>:
 800cd28:	b508      	push	{r3, lr}
 800cd2a:	2006      	movs	r0, #6
 800cd2c:	f000 f85a 	bl	800cde4 <raise>
 800cd30:	2001      	movs	r0, #1
 800cd32:	f7f5 fc7a 	bl	800262a <_exit>

0800cd36 <_realloc_r>:
 800cd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3a:	4680      	mov	r8, r0
 800cd3c:	4615      	mov	r5, r2
 800cd3e:	460c      	mov	r4, r1
 800cd40:	b921      	cbnz	r1, 800cd4c <_realloc_r+0x16>
 800cd42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd46:	4611      	mov	r1, r2
 800cd48:	f7ff b9c0 	b.w	800c0cc <_malloc_r>
 800cd4c:	b92a      	cbnz	r2, 800cd5a <_realloc_r+0x24>
 800cd4e:	f7ff f949 	bl	800bfe4 <_free_r>
 800cd52:	2400      	movs	r4, #0
 800cd54:	4620      	mov	r0, r4
 800cd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd5a:	f000 f85f 	bl	800ce1c <_malloc_usable_size_r>
 800cd5e:	4285      	cmp	r5, r0
 800cd60:	4606      	mov	r6, r0
 800cd62:	d802      	bhi.n	800cd6a <_realloc_r+0x34>
 800cd64:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cd68:	d8f4      	bhi.n	800cd54 <_realloc_r+0x1e>
 800cd6a:	4629      	mov	r1, r5
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	f7ff f9ad 	bl	800c0cc <_malloc_r>
 800cd72:	4607      	mov	r7, r0
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d0ec      	beq.n	800cd52 <_realloc_r+0x1c>
 800cd78:	42b5      	cmp	r5, r6
 800cd7a:	462a      	mov	r2, r5
 800cd7c:	4621      	mov	r1, r4
 800cd7e:	bf28      	it	cs
 800cd80:	4632      	movcs	r2, r6
 800cd82:	f7ff ffc3 	bl	800cd0c <memcpy>
 800cd86:	4621      	mov	r1, r4
 800cd88:	4640      	mov	r0, r8
 800cd8a:	f7ff f92b 	bl	800bfe4 <_free_r>
 800cd8e:	463c      	mov	r4, r7
 800cd90:	e7e0      	b.n	800cd54 <_realloc_r+0x1e>

0800cd92 <_raise_r>:
 800cd92:	291f      	cmp	r1, #31
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4605      	mov	r5, r0
 800cd98:	460c      	mov	r4, r1
 800cd9a:	d904      	bls.n	800cda6 <_raise_r+0x14>
 800cd9c:	2316      	movs	r3, #22
 800cd9e:	6003      	str	r3, [r0, #0]
 800cda0:	f04f 30ff 	mov.w	r0, #4294967295
 800cda4:	bd38      	pop	{r3, r4, r5, pc}
 800cda6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cda8:	b112      	cbz	r2, 800cdb0 <_raise_r+0x1e>
 800cdaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdae:	b94b      	cbnz	r3, 800cdc4 <_raise_r+0x32>
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f000 f831 	bl	800ce18 <_getpid_r>
 800cdb6:	4622      	mov	r2, r4
 800cdb8:	4601      	mov	r1, r0
 800cdba:	4628      	mov	r0, r5
 800cdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdc0:	f000 b818 	b.w	800cdf4 <_kill_r>
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d00a      	beq.n	800cdde <_raise_r+0x4c>
 800cdc8:	1c59      	adds	r1, r3, #1
 800cdca:	d103      	bne.n	800cdd4 <_raise_r+0x42>
 800cdcc:	2316      	movs	r3, #22
 800cdce:	6003      	str	r3, [r0, #0]
 800cdd0:	2001      	movs	r0, #1
 800cdd2:	e7e7      	b.n	800cda4 <_raise_r+0x12>
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cdda:	4620      	mov	r0, r4
 800cddc:	4798      	blx	r3
 800cdde:	2000      	movs	r0, #0
 800cde0:	e7e0      	b.n	800cda4 <_raise_r+0x12>
	...

0800cde4 <raise>:
 800cde4:	4b02      	ldr	r3, [pc, #8]	@ (800cdf0 <raise+0xc>)
 800cde6:	4601      	mov	r1, r0
 800cde8:	6818      	ldr	r0, [r3, #0]
 800cdea:	f7ff bfd2 	b.w	800cd92 <_raise_r>
 800cdee:	bf00      	nop
 800cdf0:	20000024 	.word	0x20000024

0800cdf4 <_kill_r>:
 800cdf4:	b538      	push	{r3, r4, r5, lr}
 800cdf6:	4d07      	ldr	r5, [pc, #28]	@ (800ce14 <_kill_r+0x20>)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	4604      	mov	r4, r0
 800cdfc:	4608      	mov	r0, r1
 800cdfe:	4611      	mov	r1, r2
 800ce00:	602b      	str	r3, [r5, #0]
 800ce02:	f7f5 fc02 	bl	800260a <_kill>
 800ce06:	1c43      	adds	r3, r0, #1
 800ce08:	d102      	bne.n	800ce10 <_kill_r+0x1c>
 800ce0a:	682b      	ldr	r3, [r5, #0]
 800ce0c:	b103      	cbz	r3, 800ce10 <_kill_r+0x1c>
 800ce0e:	6023      	str	r3, [r4, #0]
 800ce10:	bd38      	pop	{r3, r4, r5, pc}
 800ce12:	bf00      	nop
 800ce14:	200117c0 	.word	0x200117c0

0800ce18 <_getpid_r>:
 800ce18:	f7f5 bbef 	b.w	80025fa <_getpid>

0800ce1c <_malloc_usable_size_r>:
 800ce1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce20:	1f18      	subs	r0, r3, #4
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	bfbc      	itt	lt
 800ce26:	580b      	ldrlt	r3, [r1, r0]
 800ce28:	18c0      	addlt	r0, r0, r3
 800ce2a:	4770      	bx	lr

0800ce2c <_init>:
 800ce2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce2e:	bf00      	nop
 800ce30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce32:	bc08      	pop	{r3}
 800ce34:	469e      	mov	lr, r3
 800ce36:	4770      	bx	lr

0800ce38 <_fini>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	bf00      	nop
 800ce3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce3e:	bc08      	pop	{r3}
 800ce40:	469e      	mov	lr, r3
 800ce42:	4770      	bx	lr
