
f401_display_encoder_fader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f4c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000868  080060ec  080060ec  000070ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006954  08006954  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006954  08006954  00007954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800695c  0800695c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800695c  0800695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006960  08006960  00007960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006964  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f4c  20000068  080069cc  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fb4  080069cc  00008fb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131f3  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aeb  00000000  00000000  0001b28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001dd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000de8  00000000  00000000  0001ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001772d  00000000  00000000  0001fd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015da9  00000000  00000000  00037445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d0fb  00000000  00000000  0004d1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea2e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a4  00000000  00000000  000ea32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000ef3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060d4 	.word	0x080060d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080060d4 	.word	0x080060d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <displayStrings>:

// Global variables to keep track of the visible portion of the list
static uint8_t first_visible_index = 0;
static uint8_t num_visible_lines = LIST_SECTION_HEIGHT / LINE_HEIGHT;

void displayStrings(I2C_HandleTypeDef *hi2c1, char** strings, uint8_t numStrings, uint8_t cursor_index) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b0a8      	sub	sp, #160	@ 0xa0
 8000574:	af02      	add	r7, sp, #8
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	4611      	mov	r1, r2
 800057c:	461a      	mov	r2, r3
 800057e:	460b      	mov	r3, r1
 8000580:	71fb      	strb	r3, [r7, #7]
 8000582:	4613      	mov	r3, r2
 8000584:	71bb      	strb	r3, [r7, #6]
    // Clear screen
    ssd1306_Fill(Black);
 8000586:	2000      	movs	r0, #0
 8000588:	f000 fec8 	bl	800131c <ssd1306_Fill>

    // Calculate the last visible index based on the first visible index and the number of visible lines
    uint8_t last_visible_index = first_visible_index + num_visible_lines - 1;
 800058c:	4b53      	ldr	r3, [pc, #332]	@ (80006dc <displayStrings+0x16c>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b53      	ldr	r3, [pc, #332]	@ (80006e0 <displayStrings+0x170>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4413      	add	r3, r2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	3b01      	subs	r3, #1
 800059a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    // Ensure cursor is within the visible range
    if (cursor_index < first_visible_index) {
 800059e:	4b4f      	ldr	r3, [pc, #316]	@ (80006dc <displayStrings+0x16c>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d203      	bcs.n	80005b0 <displayStrings+0x40>
        first_visible_index = cursor_index;
 80005a8:	4a4c      	ldr	r2, [pc, #304]	@ (80006dc <displayStrings+0x16c>)
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	7013      	strb	r3, [r2, #0]
 80005ae:	e00d      	b.n	80005cc <displayStrings+0x5c>
    } else if (cursor_index > last_visible_index) {
 80005b0:	79ba      	ldrb	r2, [r7, #6]
 80005b2:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d908      	bls.n	80005cc <displayStrings+0x5c>
        first_visible_index = cursor_index - num_visible_lines + 1;
 80005ba:	4b49      	ldr	r3, [pc, #292]	@ (80006e0 <displayStrings+0x170>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b44      	ldr	r3, [pc, #272]	@ (80006dc <displayStrings+0x16c>)
 80005ca:	701a      	strb	r2, [r3, #0]
    }

    // Write data to list section of the screen
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 80005cc:	4b43      	ldr	r3, [pc, #268]	@ (80006dc <displayStrings+0x16c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80005d4:	e03b      	b.n	800064e <displayStrings+0xde>
        ssd1306_SetCursor(BORDER_WIDTH, (k - first_visible_index) * LINE_HEIGHT + BORDER_WIDTH); // Adjust cursor_index position based on line height
 80005d6:	4b41      	ldr	r3, [pc, #260]	@ (80006dc <displayStrings+0x16c>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	3301      	adds	r3, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fff0 	bl	80015d8 <ssd1306_SetCursor>
        if (k == cursor_index) {
 80005f8:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80005fc:	79bb      	ldrb	r3, [r7, #6]
 80005fe:	429a      	cmp	r2, r3
 8000600:	d115      	bne.n	800062e <displayStrings+0xbe>
            // Write the line with cursor_index
            char line_with_cursor[DISPLAY_WIDTH - BORDER_WIDTH];
            snprintf(line_with_cursor, sizeof(line_with_cursor), "%c %s", CURSOR, strings[k]);
 8000602:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	4413      	add	r3, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f107 0014 	add.w	r0, r7, #20
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	233e      	movs	r3, #62	@ 0x3e
 8000616:	4a33      	ldr	r2, [pc, #204]	@ (80006e4 <displayStrings+0x174>)
 8000618:	217f      	movs	r1, #127	@ 0x7f
 800061a:	f005 f87f 	bl	800571c <sniprintf>
            ssd1306_WriteString(line_with_cursor, Font_7x10, White);
 800061e:	4a32      	ldr	r2, [pc, #200]	@ (80006e8 <displayStrings+0x178>)
 8000620:	f107 0014 	add.w	r0, r7, #20
 8000624:	2301      	movs	r3, #1
 8000626:	ca06      	ldmia	r2, {r1, r2}
 8000628:	f000 ffb0 	bl	800158c <ssd1306_WriteString>
 800062c:	e00a      	b.n	8000644 <displayStrings+0xd4>
        } else {
            ssd1306_WriteString(strings[k], Font_7x10, White);
 800062e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	68ba      	ldr	r2, [r7, #8]
 8000636:	4413      	add	r3, r2
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	4a2b      	ldr	r2, [pc, #172]	@ (80006e8 <displayStrings+0x178>)
 800063c:	2301      	movs	r3, #1
 800063e:	ca06      	ldmia	r2, {r1, r2}
 8000640:	f000 ffa4 	bl	800158c <ssd1306_WriteString>
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 8000644:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000648:	3301      	adds	r3, #1
 800064a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800064e:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	429a      	cmp	r2, r3
 8000656:	d209      	bcs.n	800066c <displayStrings+0xfc>
 8000658:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <displayStrings+0x16c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	4b1f      	ldr	r3, [pc, #124]	@ (80006e0 <displayStrings+0x170>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	440b      	add	r3, r1
 8000668:	429a      	cmp	r2, r3
 800066a:	dbb4      	blt.n	80005d6 <displayStrings+0x66>
        }
    }

    // Draw border around the list section
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800066c:	2300      	movs	r3, #0
 800066e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000672:	e029      	b.n	80006c8 <displayStrings+0x158>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 8000674:	2300      	movs	r3, #0
 8000676:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800067a:	e01c      	b.n	80006b6 <displayStrings+0x146>
            if (j < BORDER_WIDTH || j >= LIST_SECTION_HEIGHT - BORDER_WIDTH || i < BORDER_WIDTH || i >= DISPLAY_WIDTH - BORDER_WIDTH) {
 800067c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000680:	2b00      	cmp	r3, #0
 8000682:	d00b      	beq.n	800069c <displayStrings+0x12c>
 8000684:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8000688:	2b4f      	cmp	r3, #79	@ 0x4f
 800068a:	d807      	bhi.n	800069c <displayStrings+0x12c>
 800068c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000690:	2b00      	cmp	r3, #0
 8000692:	d003      	beq.n	800069c <displayStrings+0x12c>
 8000694:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000698:	2b7e      	cmp	r3, #126	@ 0x7e
 800069a:	d907      	bls.n	80006ac <displayStrings+0x13c>
                ssd1306_DrawPixel(i, j, White);
 800069c:	f897 1095 	ldrb.w	r1, [r7, #149]	@ 0x95
 80006a0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006a4:	2201      	movs	r2, #1
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fe8e 	bl	80013c8 <ssd1306_DrawPixel>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 80006ac:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006b0:	3301      	adds	r3, #1
 80006b2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80006b6:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006ba:	2b50      	cmp	r3, #80	@ 0x50
 80006bc:	d9de      	bls.n	800067c <displayStrings+0x10c>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80006be:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006c2:	3301      	adds	r3, #1
 80006c4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80006c8:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dad1      	bge.n	8000674 <displayStrings+0x104>
            }
        }
    }
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3798      	adds	r7, #152	@ 0x98
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000084 	.word	0x20000084
 80006e0:	20000000 	.word	0x20000000
 80006e4:	080060ec 	.word	0x080060ec
 80006e8:	20000004 	.word	0x20000004

080006ec <renderSelectedFile>:
    if (first_visible_index + num_visible_lines < numStrings) {
        first_visible_index++;
    }
}

void renderSelectedFile(I2C_HandleTypeDef *hi2c1, const char *filename) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    // Clear the selected file section of the screen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	73fb      	strb	r3, [r7, #15]
 80006fa:	e012      	b.n	8000722 <renderSelectedFile+0x36>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 80006fc:	2351      	movs	r3, #81	@ 0x51
 80006fe:	73bb      	strb	r3, [r7, #14]
 8000700:	e008      	b.n	8000714 <renderSelectedFile+0x28>
            ssd1306_DrawPixel(i, j, Black);
 8000702:	7bb9      	ldrb	r1, [r7, #14]
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	2200      	movs	r2, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fe5d 	bl	80013c8 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	3301      	adds	r3, #1
 8000712:	73bb      	strb	r3, [r7, #14]
 8000714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000718:	2b00      	cmp	r3, #0
 800071a:	daf2      	bge.n	8000702 <renderSelectedFile+0x16>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3301      	adds	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000726:	2b00      	cmp	r3, #0
 8000728:	dae8      	bge.n	80006fc <renderSelectedFile+0x10>
        }
    }

    // Write the selected file name in the selected file section
    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + 2); // Adjust Y position for text alignment
 800072a:	2153      	movs	r1, #83	@ 0x53
 800072c:	2000      	movs	r0, #0
 800072e:	f000 ff53 	bl	80015d8 <ssd1306_SetCursor>
    ssd1306_WriteString(filename, Font_7x10, White);
 8000732:	4a05      	ldr	r2, [pc, #20]	@ (8000748 <renderSelectedFile+0x5c>)
 8000734:	2301      	movs	r3, #1
 8000736:	ca06      	ldmia	r2, {r1, r2}
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f000 ff27 	bl	800158c <ssd1306_WriteString>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000004 	.word	0x20000004

0800074c <drawFaderProzent>:
            y0 += sy;
        }
    }
}

void drawFaderProzent(I2C_HandleTypeDef *hi2c1, const char *prozent){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	e012      	b.n	8000782 <drawFaderProzent+0x36>
        for (uint8_t j = LIST_SECTION_HEIGHT + 20; j < DISPLAY_HEIGHT; j++) {
 800075c:	2365      	movs	r3, #101	@ 0x65
 800075e:	73bb      	strb	r3, [r7, #14]
 8000760:	e008      	b.n	8000774 <drawFaderProzent+0x28>
            ssd1306_DrawPixel(i, j, Black);
 8000762:	7bb9      	ldrb	r1, [r7, #14]
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2200      	movs	r2, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fe2d 	bl	80013c8 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT + 20; j < DISPLAY_HEIGHT; j++) {
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	3301      	adds	r3, #1
 8000772:	73bb      	strb	r3, [r7, #14]
 8000774:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000778:	2b00      	cmp	r3, #0
 800077a:	daf2      	bge.n	8000762 <drawFaderProzent+0x16>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	3301      	adds	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000786:	2b00      	cmp	r3, #0
 8000788:	dae8      	bge.n	800075c <drawFaderProzent+0x10>
        }
    }

    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + 20); // Adjust Y position for text alignment
 800078a:	2165      	movs	r1, #101	@ 0x65
 800078c:	2000      	movs	r0, #0
 800078e:	f000 ff23 	bl	80015d8 <ssd1306_SetCursor>
    ssd1306_WriteString(prozent, Font_7x10, White);
 8000792:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <drawFaderProzent+0x5c>)
 8000794:	2301      	movs	r3, #1
 8000796:	ca06      	ldmia	r2, {r1, r2}
 8000798:	6838      	ldr	r0, [r7, #0]
 800079a:	f000 fef7 	bl	800158c <ssd1306_WriteString>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000004 	.word	0x20000004

080007ac <initializeFileManager>:
#include "display.h"

#define MAX_FILES 50
#define MAX_FILENAME_LENGTH 20

void initializeFileManager(FileManager *fm) {
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    fm->num_files = 0;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
    fm->current_file_index = -1;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007c2:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
    fm->cursor_index = -1;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007cc:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <addFile>:

void addFile(FileManager *fm, const char *filename) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
    if (fm->num_files < MAX_FILES) {
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 80007ec:	2b31      	cmp	r3, #49	@ 0x31
 80007ee:	dc1c      	bgt.n	800082a <addFile+0x4e>
        strcpy(fm->files[fm->num_files].filename, filename);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f8d3 23e8 	ldr.w	r2, [r3, #1000]	@ 0x3e8
 80007f6:	4613      	mov	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4413      	add	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	6839      	ldr	r1, [r7, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f005 f811 	bl	800582c <strcpy>
        fm->num_files++;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 8000810:	1c5a      	adds	r2, r3, #1
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f8c3 23e8 	str.w	r2, [r3, #1000]	@ 0x3e8
        if(fm->num_files == 1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 800081e:	2b01      	cmp	r3, #1
 8000820:	d103      	bne.n	800082a <addFile+0x4e>
            fm->cursor_index = 0;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    }
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <cursorUp>:

void cursorUp(FileManager *fm){
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index > 0) {
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8000840:	2b00      	cmp	r3, #0
 8000842:	dd07      	ble.n	8000854 <cursorUp+0x22>
        fm->cursor_index--;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 800084a:	1e5a      	subs	r2, r3, #1
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    } else {
        fm->cursor_index = fm->num_files - 1 ;
    }
}
 8000852:	e006      	b.n	8000862 <cursorUp+0x30>
        fm->cursor_index = fm->num_files - 1 ;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <cursorDown>:

void cursorDown(FileManager *fm){
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index < fm->num_files - 1) {
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	@ 0x3ec
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 8000882:	3b01      	subs	r3, #1
 8000884:	429a      	cmp	r2, r3
 8000886:	da07      	bge.n	8000898 <cursorDown+0x2a>
        fm->cursor_index++;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 800088e:	1c5a      	adds	r2, r3, #1
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
    } else {
        fm->cursor_index = 0;
    }
}
 8000896:	e003      	b.n	80008a0 <cursorDown+0x32>
        fm->cursor_index = 0;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <selectFile>:

void selectFile(FileManager *fm) {
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
    fm->current_file_index = fm->cursor_index;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	@ 0x3ec
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0b4      	sub	sp, #208	@ 0xd0
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f001 f8cf 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f8b9 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 fa79 	bl	8000dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008de:	f000 fa57 	bl	8000d90 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008e2:	f000 fa2b 	bl	8000d3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008e6:	f000 f9a5 	bl	8000c34 <MX_I2C1_Init>
  MX_TIM5_Init();
 80008ea:	f000 f9d1 	bl	8000c90 <MX_TIM5_Init>
  MX_ADC1_Init();
 80008ee:	f000 f919 	bl	8000b24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
 80008f2:	2202      	movs	r2, #2
 80008f4:	4945      	ldr	r1, [pc, #276]	@ (8000a0c <main+0x140>)
 80008f6:	4846      	ldr	r0, [pc, #280]	@ (8000a10 <main+0x144>)
 80008f8:	f001 faa6 	bl	8001e48 <HAL_ADC_Start_DMA>

  // Init lcd using one of the stm32HAL i2c typedefs
  if (ssd1306_Init(&hi2c1) != 0) {
 80008fc:	4845      	ldr	r0, [pc, #276]	@ (8000a14 <main+0x148>)
 80008fe:	f000 fbf5 	bl	80010ec <ssd1306_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <main+0x40>
    Error_Handler();
 8000908:	f000 fbd2 	bl	80010b0 <Error_Handler>
  }
  HAL_Delay(1000);
 800090c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000910:	f001 f922 	bl	8001b58 <HAL_Delay>

  ssd1306_Fill(Black);
 8000914:	2000      	movs	r0, #0
 8000916:	f000 fd01 	bl	800131c <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 800091a:	483e      	ldr	r0, [pc, #248]	@ (8000a14 <main+0x148>)
 800091c:	f000 fd22 	bl	8001364 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000924:	f001 f918 	bl	8001b58 <HAL_Delay>


  initializeFileManager(&fm);
 8000928:	483b      	ldr	r0, [pc, #236]	@ (8000a18 <main+0x14c>)
 800092a:	f7ff ff3f 	bl	80007ac <initializeFileManager>

  // Adding some dummy files
  addFile(&fm, "bird.wav");
 800092e:	493b      	ldr	r1, [pc, #236]	@ (8000a1c <main+0x150>)
 8000930:	4839      	ldr	r0, [pc, #228]	@ (8000a18 <main+0x14c>)
 8000932:	f7ff ff53 	bl	80007dc <addFile>
  addFile(&fm, "child.wav");
 8000936:	493a      	ldr	r1, [pc, #232]	@ (8000a20 <main+0x154>)
 8000938:	4837      	ldr	r0, [pc, #220]	@ (8000a18 <main+0x14c>)
 800093a:	f7ff ff4f 	bl	80007dc <addFile>
  addFile(&fm, "waterfall.wav");
 800093e:	4939      	ldr	r1, [pc, #228]	@ (8000a24 <main+0x158>)
 8000940:	4835      	ldr	r0, [pc, #212]	@ (8000a18 <main+0x14c>)
 8000942:	f7ff ff4b 	bl	80007dc <addFile>
  addFile(&fm, "samba.wav");
 8000946:	4938      	ldr	r1, [pc, #224]	@ (8000a28 <main+0x15c>)
 8000948:	4833      	ldr	r0, [pc, #204]	@ (8000a18 <main+0x14c>)
 800094a:	f7ff ff47 	bl	80007dc <addFile>
  addFile(&fm, "mixer.wav");
 800094e:	4937      	ldr	r1, [pc, #220]	@ (8000a2c <main+0x160>)
 8000950:	4831      	ldr	r0, [pc, #196]	@ (8000a18 <main+0x14c>)
 8000952:	f7ff ff43 	bl	80007dc <addFile>
  addFile(&fm, "disco.wav");
 8000956:	4936      	ldr	r1, [pc, #216]	@ (8000a30 <main+0x164>)
 8000958:	482f      	ldr	r0, [pc, #188]	@ (8000a18 <main+0x14c>)
 800095a:	f7ff ff3f 	bl	80007dc <addFile>
  addFile(&fm, "leon.wav");
 800095e:	4935      	ldr	r1, [pc, #212]	@ (8000a34 <main+0x168>)
 8000960:	482d      	ldr	r0, [pc, #180]	@ (8000a18 <main+0x14c>)
 8000962:	f7ff ff3b 	bl	80007dc <addFile>
  addFile(&fm, "jonas.wav");
 8000966:	4934      	ldr	r1, [pc, #208]	@ (8000a38 <main+0x16c>)
 8000968:	482b      	ldr	r0, [pc, #172]	@ (8000a18 <main+0x14c>)
 800096a:	f7ff ff37 	bl	80007dc <addFile>
  addFile(&fm, "shimi.wav");
 800096e:	4933      	ldr	r1, [pc, #204]	@ (8000a3c <main+0x170>)
 8000970:	4829      	ldr	r0, [pc, #164]	@ (8000a18 <main+0x14c>)
 8000972:	f7ff ff33 	bl	80007dc <addFile>
  addFile(&fm, "bass.wav");
 8000976:	4932      	ldr	r1, [pc, #200]	@ (8000a40 <main+0x174>)
 8000978:	4827      	ldr	r0, [pc, #156]	@ (8000a18 <main+0x14c>)
 800097a:	f7ff ff2f 	bl	80007dc <addFile>
  addFile(&fm, "smooth.wav");
 800097e:	4931      	ldr	r1, [pc, #196]	@ (8000a44 <main+0x178>)
 8000980:	4825      	ldr	r0, [pc, #148]	@ (8000a18 <main+0x14c>)
 8000982:	f7ff ff2b 	bl	80007dc <addFile>
  addFile(&fm, "car.wav");
 8000986:	4930      	ldr	r1, [pc, #192]	@ (8000a48 <main+0x17c>)
 8000988:	4823      	ldr	r0, [pc, #140]	@ (8000a18 <main+0x14c>)
 800098a:	f7ff ff27 	bl	80007dc <addFile>
  while (1)
  { 
	//Start DMA for Read Faders
    // Displaying the files
    char *filenames[MAX_FILES];
    for (int i = 0; i < fm.num_files; i++) {
 800098e:	2300      	movs	r3, #0
 8000990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000994:	e013      	b.n	80009be <main+0xf2>
        filenames[i] = fm.files[i].filename; // Extracting filenames from File structures
 8000996:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <main+0x14c>)
 80009a4:	441a      	add	r2, r3
 80009a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	33d0      	adds	r3, #208	@ 0xd0
 80009ae:	443b      	add	r3, r7
 80009b0:	f843 2cd0 	str.w	r2, [r3, #-208]
    for (int i = 0; i < fm.num_files; i++) {
 80009b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80009b8:	3301      	adds	r3, #1
 80009ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <main+0x14c>)
 80009c0:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 80009c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbe4      	blt.n	8000996 <main+0xca>
    }
    char *currentFileName = fm.files[fm.current_file_index].filename;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <main+0x14c>)
 80009ce:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <main+0x14c>)
 80009dc:	4413      	add	r3, r2
 80009de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

    displayStrings(&hi2c1, filenames, fm.num_files, fm.cursor_index);
 80009e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a18 <main+0x14c>)
 80009e4:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	@ 0x3e8
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <main+0x14c>)
 80009ec:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4639      	mov	r1, r7
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <main+0x148>)
 80009f6:	f7ff fdbb 	bl	8000570 <displayStrings>
    renderSelectedFile(&hi2c1, currentFileName);
 80009fa:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80009fe:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <main+0x148>)
 8000a00:	f7ff fe74 	bl	80006ec <renderSelectedFile>
    // Update display
    ssd1306_UpdateScreen(&hi2c1);
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <main+0x148>)
 8000a06:	f000 fcad 	bl	8001364 <ssd1306_UpdateScreen>
  { 
 8000a0a:	e7c0      	b.n	800098e <main+0xc2>
 8000a0c:	20000610 	.word	0x20000610
 8000a10:	20000088 	.word	0x20000088
 8000a14:	20000130 	.word	0x20000130
 8000a18:	20000214 	.word	0x20000214
 8000a1c:	080060f4 	.word	0x080060f4
 8000a20:	08006100 	.word	0x08006100
 8000a24:	0800610c 	.word	0x0800610c
 8000a28:	0800611c 	.word	0x0800611c
 8000a2c:	08006128 	.word	0x08006128
 8000a30:	08006134 	.word	0x08006134
 8000a34:	08006140 	.word	0x08006140
 8000a38:	0800614c 	.word	0x0800614c
 8000a3c:	08006158 	.word	0x08006158
 8000a40:	08006164 	.word	0x08006164
 8000a44:	08006170 	.word	0x08006170
 8000a48:	0800617c 	.word	0x0800617c

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	@ 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	2230      	movs	r2, #48	@ 0x30
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 feb2 	bl	80057c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	4b29      	ldr	r3, [pc, #164]	@ (8000b1c <SystemClock_Config+0xd0>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a78:	4a28      	ldr	r2, [pc, #160]	@ (8000b1c <SystemClock_Config+0xd0>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a80:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <SystemClock_Config+0xd0>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	4b23      	ldr	r3, [pc, #140]	@ (8000b20 <SystemClock_Config+0xd4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a98:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <SystemClock_Config+0xd4>)
 8000a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b20 <SystemClock_Config+0xd4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aac:	2302      	movs	r3, #2
 8000aae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ac8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ace:	2307      	movs	r3, #7
 8000ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fa02 	bl	8003ee0 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ae2:	f000 fae5 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fc64 	bl	80043d0 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b0e:	f000 facf 	bl	80010b0 <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3750      	adds	r7, #80	@ 0x50
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40007000 	.word	0x40007000

08000b24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	@ 0x30
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fe40 	bl	80057c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b44:	4b37      	ldr	r3, [pc, #220]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b46:	4a38      	ldr	r2, [pc, #224]	@ (8000c28 <MX_ADC1_Init+0x104>)
 8000b48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b4a:	4b36      	ldr	r3, [pc, #216]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b4c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b52:	4b34      	ldr	r3, [pc, #208]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b58:	4b32      	ldr	r3, [pc, #200]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b5e:	4b31      	ldr	r3, [pc, #196]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b72:	4b2c      	ldr	r3, [pc, #176]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b74:	4a2d      	ldr	r2, [pc, #180]	@ (8000c2c <MX_ADC1_Init+0x108>)
 8000b76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b78:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b7e:	4b29      	ldr	r3, [pc, #164]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b84:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8c:	4b25      	ldr	r3, [pc, #148]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b92:	4824      	ldr	r0, [pc, #144]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000b94:	f001 f804 	bl	8001ba0 <HAL_ADC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8000b9e:	f000 fa87 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481b      	ldr	r0, [pc, #108]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000bb6:	f001 fa55 	bl	8002064 <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000bc0:	f000 fa76 	bl	80010b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4814      	ldr	r0, [pc, #80]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000bd4:	f001 fa46 	bl	8002064 <HAL_ADC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000bde:	f000 fa67 	bl	80010b0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000be2:	2306      	movs	r3, #6
 8000be4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_ADC1_Init+0x10c>)
 8000bf8:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c06:	463b      	mov	r3, r7
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <MX_ADC1_Init+0x100>)
 8000c0c:	f001 fcd4 	bl	80025b8 <HAL_ADCEx_InjectedConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000c16:	f000 fa4b 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	3730      	adds	r7, #48	@ 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000088 	.word	0x20000088
 8000c28:	40012000 	.word	0x40012000
 8000c2c:	0f000001 	.word	0x0f000001
 8000c30:	000f0001 	.word	0x000f0001

08000c34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c3a:	4a13      	ldr	r2, [pc, #76]	@ (8000c88 <MX_I2C1_Init+0x54>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c40:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <MX_I2C1_Init+0x58>)
 8000c42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_I2C1_Init+0x50>)
 8000c72:	f002 fc87 	bl	8003584 <HAL_I2C_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c7c:	f000 fa18 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000130 	.word	0x20000130
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	000186a0 	.word	0x000186a0

08000c90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cae:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <MX_TIM5_Init+0xa8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cb4:	2264      	movs	r2, #100	@ 0x64
 8000cb6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8400;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cc0:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000cc4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cd2:	4818      	ldr	r0, [pc, #96]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cd4:	f003 fd9c 	bl	8004810 <HAL_TIM_Base_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000cde:	f000 f9e7 	bl	80010b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4619      	mov	r1, r3
 8000cee:	4811      	ldr	r0, [pc, #68]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000cf0:	f003 ffb9 	bl	8004c66 <HAL_TIM_ConfigClockSource>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 f9d9 	bl	80010b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8000cfe:	2108      	movs	r1, #8
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000d02:	f003 fe66 	bl	80049d2 <HAL_TIM_OnePulse_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000d0c:	f000 f9d0 	bl	80010b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_TIM5_Init+0xa4>)
 8000d1e:	f004 f9b7 	bl	8005090 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000d28:	f000 f9c2 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000184 	.word	0x20000184
 8000d38:	40000c00 	.word	0x40000c00

08000d3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <MX_USART2_UART_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_USART2_UART_Init+0x4c>)
 8000d74:	f004 fa0e 	bl	8005194 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f997 	bl	80010b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200001cc 	.word	0x200001cc
 8000d8c:	40004400 	.word	0x40004400

08000d90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_DMA_Init+0x3c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000dcc <MX_DMA_Init+0x3c>)
 8000da0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_DMA_Init+0x3c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2038      	movs	r0, #56	@ 0x38
 8000db8:	f001 fe6f 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000dbc:	2038      	movs	r0, #56	@ 0x38
 8000dbe:	f001 fe88 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	@ 0x28
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b46      	ldr	r3, [pc, #280]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a45      	ldr	r2, [pc, #276]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b43      	ldr	r3, [pc, #268]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b3f      	ldr	r3, [pc, #252]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b38      	ldr	r3, [pc, #224]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a37      	ldr	r2, [pc, #220]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b35      	ldr	r3, [pc, #212]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b31      	ldr	r3, [pc, #196]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a30      	ldr	r2, [pc, #192]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f04 <MX_GPIO_Init+0x134>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	482b      	ldr	r0, [pc, #172]	@ (8000f08 <MX_GPIO_Init+0x138>)
 8000e5c:	f002 fb60 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e66:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4825      	ldr	r0, [pc, #148]	@ (8000f0c <MX_GPIO_Init+0x13c>)
 8000e78:	f002 f9b6 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_a_clk_in1_Pin enc_switch_in3_Pin */
  GPIO_InitStruct.Pin = enc_a_clk_in1_Pin|enc_switch_in3_Pin;
 8000e7c:	2311      	movs	r3, #17
 8000e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481d      	ldr	r0, [pc, #116]	@ (8000f08 <MX_GPIO_Init+0x138>)
 8000e92:	f002 f9a9 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_b_dt_in2_Pin */
  GPIO_InitStruct.Pin = enc_b_dt_in2_Pin;
 8000e96:	2302      	movs	r3, #2
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(enc_b_dt_in2_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4817      	ldr	r0, [pc, #92]	@ (8000f08 <MX_GPIO_Init+0x138>)
 8000eaa:	f002 f99d 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eae:	2320      	movs	r3, #32
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <MX_GPIO_Init+0x138>)
 8000ec6:	f002 f98f 	bl	80031e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2006      	movs	r0, #6
 8000ed0:	f001 fde3 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f001 fdfc 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f001 fddb 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ee4:	200a      	movs	r0, #10
 8000ee6:	f001 fdf4 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2028      	movs	r0, #40	@ 0x28
 8000ef0:	f001 fdd3 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ef4:	2028      	movs	r0, #40	@ 0x28
 8000ef6:	f001 fdec 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	@ 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020800 	.word	0x40020800

08000f10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]

    // werte Encoder aus Rotor DC Motor aus
    if (GPIO_Pin == enc_a_clk_in1_Pin && !debounce) {
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d129      	bne.n	8000f74 <HAL_GPIO_EXTI_Callback+0x64>
 8000f20:	4b24      	ldr	r3, [pc, #144]	@ (8000fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d022      	beq.n	8000f74 <HAL_GPIO_EXTI_Callback+0x64>
          __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000f2e:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f06f 0201 	mvn.w	r2, #1
 8000f36:	611a      	str	r2, [r3, #16]
          HAL_TIM_Base_Start_IT(&htim5);
 8000f38:	481f      	ldr	r0, [pc, #124]	@ (8000fb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f3a:	f003 fcb9 	bl	80048b0 <HAL_TIM_Base_Start_IT>
          debounce = true;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
       //wenn A High und B High, increment Encoder Count
        if (HAL_GPIO_ReadPin(enc_b_dt_in2_GPIO_Port, enc_b_dt_in2_Pin)) {
 8000f44:	2102      	movs	r1, #2
 8000f46:	481d      	ldr	r0, [pc, #116]	@ (8000fbc <HAL_GPIO_EXTI_Callback+0xac>)
 8000f48:	f002 fad2 	bl	80034f0 <HAL_GPIO_ReadPin>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d008      	beq.n	8000f64 <HAL_GPIO_EXTI_Callback+0x54>
          rotary_enc_count--;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f5a:	6013      	str	r3, [r2, #0]
          cursorDown(&fm);
 8000f5c:	4819      	ldr	r0, [pc, #100]	@ (8000fc4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000f5e:	f7ff fc86 	bl	800086e <cursorDown>
 8000f62:	e007      	b.n	8000f74 <HAL_GPIO_EXTI_Callback+0x64>
        } else {
          // wenn A High und B Low, decrement Encoder Count
            rotary_enc_count++;
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a15      	ldr	r2, [pc, #84]	@ (8000fc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000f6c:	6013      	str	r3, [r2, #0]
            cursorUp(&fm);
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000f70:	f7ff fc5f 	bl	8000832 <cursorUp>
        }
    }

    if(GPIO_Pin == enc_switch_in3_Pin && !debounce){
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	2b10      	cmp	r3, #16
 8000f78:	d117      	bne.n	8000faa <HAL_GPIO_EXTI_Callback+0x9a>
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	f083 0301 	eor.w	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d010      	beq.n	8000faa <HAL_GPIO_EXTI_Callback+0x9a>
      __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000f88:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f06f 0201 	mvn.w	r2, #1
 8000f90:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Start_IT(&htim5);
 8000f92:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000f94:	f003 fc8c 	bl	80048b0 <HAL_TIM_Base_Start_IT>
      debounce = true;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
      switch_push_button =true;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
      selectFile(&fm);
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000fa6:	f7ff fc81 	bl	80008ac <selectFile>
    }
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000060d 	.word	0x2000060d
 8000fb8:	20000184 	.word	0x20000184
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	20000608 	.word	0x20000608
 8000fc4:	20000214 	.word	0x20000214
 8000fc8:	2000060c 	.word	0x2000060c

08000fcc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    // reset debounce flag nach Timer5 elapsed
    if (htim == &htim5) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d105      	bne.n	8000fe8 <HAL_TIM_PeriodElapsedCallback+0x1c>
        HAL_TIM_Base_Stop_IT(&htim5);
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000fde:	f003 fcc9 	bl	8004974 <HAL_TIM_Base_Stop_IT>
        debounce = false;
 8000fe2:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000184 	.word	0x20000184
 8000ff4:	2000060d 	.word	0x2000060d

08000ff8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a21      	ldr	r2, [pc, #132]	@ (800108c <HAL_ADC_ConvCpltCallback+0x94>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d13c      	bne.n	8001084 <HAL_ADC_ConvCpltCallback+0x8c>
		cnt++;
 800100a:	4b21      	ldr	r3, [pc, #132]	@ (8001090 <HAL_ADC_ConvCpltCallback+0x98>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4b1f      	ldr	r3, [pc, #124]	@ (8001090 <HAL_ADC_ConvCpltCallback+0x98>)
 8001014:	701a      	strb	r2, [r3, #0]
		smoothValue[0]+=adcBuffer[0];
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <HAL_ADC_ConvCpltCallback+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a1c      	ldr	r2, [pc, #112]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001022:	6013      	str	r3, [r2, #0]
		smoothValue[1]+=adcBuffer[1];
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <HAL_ADC_ConvCpltCallback+0xa0>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001030:	6053      	str	r3, [r2, #4]
		//HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
		if(cnt == 10){
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_ADC_ConvCpltCallback+0x98>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b0a      	cmp	r3, #10
 8001038:	d124      	bne.n	8001084 <HAL_ADC_ConvCpltCallback+0x8c>
			endValues[0]=smoothValue[0]/10;
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a17      	ldr	r2, [pc, #92]	@ (800109c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001048:	6013      	str	r3, [r2, #0]
			endValues[1]=smoothValue[1]/10;
 800104a:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a13      	ldr	r2, [pc, #76]	@ (800109c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001050:	fba2 2303 	umull	r2, r3, r2, r3
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001058:	6053      	str	r3, [r2, #4]
			smoothValue[0]=0;
 800105a:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
			smoothValue[1]=0;
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
			cnt=0;
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_ADC_ConvCpltCallback+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
		    sprintf(faderProzent, "F1: %lu F2: %lu",endValues[0], endValues[1]);
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	490b      	ldr	r1, [pc, #44]	@ (80010a4 <HAL_ADC_ConvCpltCallback+0xac>)
 8001076:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8001078:	f004 fb84 	bl	8005784 <siprintf>
		    drawFaderProzent(&hi2c1, faderProzent);
 800107c:	490a      	ldr	r1, [pc, #40]	@ (80010a8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800107e:	480b      	ldr	r0, [pc, #44]	@ (80010ac <HAL_ADC_ConvCpltCallback+0xb4>)
 8001080:	f7ff fb64 	bl	800074c <drawFaderProzent>
		}
	}
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40012000 	.word	0x40012000
 8001090:	2000060e 	.word	0x2000060e
 8001094:	20000618 	.word	0x20000618
 8001098:	20000610 	.word	0x20000610
 800109c:	cccccccd 	.word	0xcccccccd
 80010a0:	20000620 	.word	0x20000620
 80010a4:	08006184 	.word	0x08006184
 80010a8:	20000628 	.word	0x20000628
 80010ac:	20000130 	.word	0x20000130

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80010c8:	230a      	movs	r3, #10
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	1cfb      	adds	r3, r7, #3
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2200      	movs	r2, #0
 80010d8:	2178      	movs	r1, #120	@ 0x78
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f002 fb96 	bl	800380c <HAL_I2C_Mem_Write>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 80010f4:	2064      	movs	r0, #100	@ 0x64
 80010f6:	f000 fd2f 	bl	8001b58 <HAL_Delay>
    int status = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]

    // Init LCD

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYOFF);               // 0xAE
 80010fe:	21ae      	movs	r1, #174	@ 0xae
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ffdb 	bl	80010bc <ssd1306_WriteCommand>
 8001106:	4603      	mov	r3, r0
 8001108:	461a      	mov	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYCLOCKDIV);
 8001110:	21d5      	movs	r1, #213	@ 0xd5
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffd2 	bl	80010bc <ssd1306_WriteCommand>
 8001118:	4603      	mov	r3, r0
 800111a:	461a      	mov	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x51); // 0xd5, 0x51,
 8001122:	2151      	movs	r1, #81	@ 0x51
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffc9 	bl	80010bc <ssd1306_WriteCommand>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_MEMORYMODE);
 8001134:	2120      	movs	r1, #32
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffc0 	bl	80010bc <ssd1306_WriteCommand>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
status += ssd1306_WriteCommand(hi2c, 0x00); // 0x00 for Horizontal addressing mode
 8001146:	2100      	movs	r1, #0
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffb7 	bl	80010bc <ssd1306_WriteCommand>
 800114e:	4603      	mov	r3, r0
 8001150:	461a      	mov	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETCONTRAST); 
 8001158:	2181      	movs	r1, #129	@ 0x81
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffae 	bl	80010bc <ssd1306_WriteCommand>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x4F);       // 0x81, 0x4F
 800116a:	214f      	movs	r1, #79	@ 0x4f
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffa5 	bl	80010bc <ssd1306_WriteCommand>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DCDC) ;
 800117c:	21ad      	movs	r1, #173	@ 0xad
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff9c 	bl	80010bc <ssd1306_WriteCommand>
 8001184:	4603      	mov	r3, r0
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8A);               // 0xAD, 0x8A
 800118e:	218a      	movs	r1, #138	@ 0x8a
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff93 	bl	80010bc <ssd1306_WriteCommand>
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4413      	add	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SEGREMAP);                 // 0xA0
 80011a0:	21a0      	movs	r1, #160	@ 0xa0
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff8a 	bl	80010bc <ssd1306_WriteCommand>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4413      	add	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_COMSCANINC);               // 0xC0
 80011b2:	21c0      	movs	r1, #192	@ 0xc0
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff81 	bl	80010bc <ssd1306_WriteCommand>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPSTARTLINE);
 80011c4:	21dc      	movs	r1, #220	@ 0xdc
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff78 	bl	80010bc <ssd1306_WriteCommand>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x0);    // 0xDC 0x00
 80011d6:	2100      	movs	r1, #0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff6f 	bl	80010bc <ssd1306_WriteCommand>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 80011e8:	21d3      	movs	r1, #211	@ 0xd3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff66 	bl	80010bc <ssd1306_WriteCommand>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x60);   // 0xd3, 0x60,
 80011fa:	2160      	movs	r1, #96	@ 0x60
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff5d 	bl	80010bc <ssd1306_WriteCommand>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPRECHARGE); 
 800120c:	21d9      	movs	r1, #217	@ 0xd9
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff54 	bl	80010bc <ssd1306_WriteCommand>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);       // 0xd9, 0x22,
 800121e:	2122      	movs	r1, #34	@ 0x22
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff4b 	bl	80010bc <ssd1306_WriteCommand>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4413      	add	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETVCOMDETECT); 
 8001230:	21db      	movs	r1, #219	@ 0xdb
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ff42 	bl	80010bc <ssd1306_WriteCommand>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x35);      // 0xdb, 0x35,
 8001242:	2135      	movs	r1, #53	@ 0x35
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff39 	bl	80010bc <ssd1306_WriteCommand>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPAGEADDR);                  // 0xb0
 8001254:	21b0      	movs	r1, #176	@ 0xb0
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff30 	bl	80010bc <ssd1306_WriteCommand>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]

    // status += ssd1306_WriteCommand(hi2c, H110X_SETCOMPINS);
    // status += ssd1306_WriteCommand(hi2c,  0x12);             // 0xda, 0x12,
    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYALLON_RESUME); // 0xa4
 8001266:	21a4      	movs	r1, #164	@ 0xa4
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff27 	bl	80010bc <ssd1306_WriteCommand>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_NORMALDISPLAY);       // 0xa6
 8001278:	21a6      	movs	r1, #166	@ 0xa6
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff1e 	bl	80010bc <ssd1306_WriteCommand>
 8001280:	4603      	mov	r3, r0
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 800128a:	21d3      	movs	r1, #211	@ 0xd3
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff15 	bl	80010bc <ssd1306_WriteCommand>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4413      	add	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ff0c 	bl	80010bc <ssd1306_WriteCommand>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETMULTIPLEX);
 80012ae:	21a8      	movs	r1, #168	@ 0xa8
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff03 	bl	80010bc <ssd1306_WriteCommand>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x7F);
 80012c0:	217f      	movs	r1, #127	@ 0x7f
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fefa 	bl	80010bc <ssd1306_WriteCommand>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYON);
 80012d2:	21af      	movs	r1, #175	@ 0xaf
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fef1 	bl	80010bc <ssd1306_WriteCommand>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <ssd1306_Init+0x202>
        return 1;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <ssd1306_Init+0x222>
    }

    // Clear screen
    ssd1306_Fill(Black);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f814 	bl	800131c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f835 	bl	8001364 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <ssd1306_Init+0x22c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001300:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <ssd1306_Init+0x22c>)
 8001302:	2200      	movs	r2, #0
 8001304:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <ssd1306_Init+0x22c>)
 8001308:	2201      	movs	r2, #1
 800130a:	715a      	strb	r2, [r3, #5]

    return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000e5c 	.word	0x20000e5c

0800131c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e00d      	b.n	8001348 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <ssd1306_Fill+0x1a>
 8001332:	2100      	movs	r1, #0
 8001334:	e000      	b.n	8001338 <ssd1306_Fill+0x1c>
 8001336:	21ff      	movs	r1, #255	@ 0xff
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <ssd1306_Fill+0x44>)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	460a      	mov	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3301      	adds	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800134e:	d3ed      	bcc.n	800132c <ssd1306_Fill+0x10>
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	2000065c 	.word	0x2000065c

08001364 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af04      	add	r7, sp, #16
 800136a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 16; i++) {
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e020      	b.n	80013b4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3b50      	subs	r3, #80	@ 0x50
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fe9e 	bl	80010bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fe9a 	bl	80010bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001388:	2110      	movs	r1, #16
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fe96 	bl	80010bc <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <ssd1306_UpdateScreen+0x60>)
 8001396:	4413      	add	r3, r2
 8001398:	2264      	movs	r2, #100	@ 0x64
 800139a:	9202      	str	r2, [sp, #8]
 800139c:	2280      	movs	r2, #128	@ 0x80
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	2240      	movs	r2, #64	@ 0x40
 80013a6:	2178      	movs	r1, #120	@ 0x78
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f002 fa2f 	bl	800380c <HAL_I2C_Mem_Write>
    for (i = 0; i < 16; i++) {
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	3301      	adds	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	d9db      	bls.n	8001372 <ssd1306_UpdateScreen+0xe>
    }
}
 80013ba:	bf00      	nop
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000065c 	.word	0x2000065c

080013c8 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	460b      	mov	r3, r1
 80013d4:	71bb      	strb	r3, [r7, #6]
 80013d6:	4613      	mov	r3, r2
 80013d8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db49      	blt.n	8001476 <ssd1306_DrawPixel+0xae>
 80013e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db45      	blt.n	8001476 <ssd1306_DrawPixel+0xae>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <ssd1306_DrawPixel+0xbc>)
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <ssd1306_DrawPixel+0x38>
    {
        color = (SSD1306_COLOR)!color;
 80013f2:	797b      	ldrb	r3, [r7, #5]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001400:	797b      	ldrb	r3, [r7, #5]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d11a      	bne.n	800143c <ssd1306_DrawPixel+0x74>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001406:	79fa      	ldrb	r2, [r7, #7]
 8001408:	79bb      	ldrb	r3, [r7, #6]
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	b2d8      	uxtb	r0, r3
 800140e:	4603      	mov	r3, r0
 8001410:	01db      	lsls	r3, r3, #7
 8001412:	4413      	add	r3, r2
 8001414:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <ssd1306_DrawPixel+0xc0>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	b25a      	sxtb	r2, r3
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	b25b      	sxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b259      	sxtb	r1, r3
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	4603      	mov	r3, r0
 8001430:	01db      	lsls	r3, r3, #7
 8001432:	4413      	add	r3, r2
 8001434:	b2c9      	uxtb	r1, r1
 8001436:	4a14      	ldr	r2, [pc, #80]	@ (8001488 <ssd1306_DrawPixel+0xc0>)
 8001438:	54d1      	strb	r1, [r2, r3]
 800143a:	e01d      	b.n	8001478 <ssd1306_DrawPixel+0xb0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	4603      	mov	r3, r0
 8001446:	01db      	lsls	r3, r3, #7
 8001448:	4413      	add	r3, r2
 800144a:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <ssd1306_DrawPixel+0xc0>)
 800144c:	5cd3      	ldrb	r3, [r2, r3]
 800144e:	b25a      	sxtb	r2, r3
 8001450:	79bb      	ldrb	r3, [r7, #6]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4013      	ands	r3, r2
 8001464:	b259      	sxtb	r1, r3
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	4603      	mov	r3, r0
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	4413      	add	r3, r2
 800146e:	b2c9      	uxtb	r1, r1
 8001470:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <ssd1306_DrawPixel+0xc0>)
 8001472:	54d1      	strb	r1, [r2, r3]
 8001474:	e000      	b.n	8001478 <ssd1306_DrawPixel+0xb0>
        return;
 8001476:	bf00      	nop
    }
}
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000e5c 	.word	0x20000e5c
 8001488:	2000065c 	.word	0x2000065c

0800148c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	4604      	mov	r4, r0
 8001494:	1d38      	adds	r0, r7, #4
 8001496:	e880 0006 	stmia.w	r0, {r1, r2}
 800149a:	461a      	mov	r2, r3
 800149c:	4623      	mov	r3, r4
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	4613      	mov	r3, r2
 80014a2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80014a4:	4b38      	ldr	r3, [pc, #224]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	793b      	ldrb	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80014b0:	dc06      	bgt.n	80014c0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80014b2:	4b35      	ldr	r3, [pc, #212]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 80014b4:	885b      	ldrh	r3, [r3, #2]
 80014b6:	461a      	mov	r2, r3
 80014b8:	797b      	ldrb	r3, [r7, #5]
 80014ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80014bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80014be:	dd01      	ble.n	80014c4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e05c      	b.n	800157e <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	e04c      	b.n	8001564 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	3b20      	subs	r3, #32
 80014d0:	7979      	ldrb	r1, [r7, #5]
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	4619      	mov	r1, r3
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	440b      	add	r3, r1
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	e034      	b.n	8001554 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80014fa:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b2d8      	uxtb	r0, r3
 8001508:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 800150a:	885b      	ldrh	r3, [r3, #2]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4413      	add	r3, r2
 8001514:	b2db      	uxtb	r3, r3
 8001516:	7bba      	ldrb	r2, [r7, #14]
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff ff55 	bl	80013c8 <ssd1306_DrawPixel>
 800151e:	e016      	b.n	800154e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001520:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 8001530:	885b      	ldrh	r3, [r3, #2]
 8001532:	b2da      	uxtb	r2, r3
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4413      	add	r3, r2
 800153a:	b2d9      	uxtb	r1, r3
 800153c:	7bbb      	ldrb	r3, [r7, #14]
 800153e:	2b00      	cmp	r3, #0
 8001540:	bf0c      	ite	eq
 8001542:	2301      	moveq	r3, #1
 8001544:	2300      	movne	r3, #0
 8001546:	b2db      	uxtb	r3, r3
 8001548:	461a      	mov	r2, r3
 800154a:	f7ff ff3d 	bl	80013c8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3301      	adds	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	793b      	ldrb	r3, [r7, #4]
 8001556:	461a      	mov	r2, r3
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	4293      	cmp	r3, r2
 800155c:	d3c5      	bcc.n	80014ea <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3301      	adds	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	797b      	ldrb	r3, [r7, #5]
 8001566:	461a      	mov	r2, r3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4293      	cmp	r3, r2
 800156c:	d3ad      	bcc.n	80014ca <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	793a      	ldrb	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <ssd1306_WriteChar+0xfc>)
 800157a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	@ 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	20000e5c 	.word	0x20000e5c

0800158c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	1d38      	adds	r0, r7, #4
 8001596:	e880 0006 	stmia.w	r0, {r1, r2}
 800159a:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 800159c:	e012      	b.n	80015c4 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	7818      	ldrb	r0, [r3, #0]
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	1d3a      	adds	r2, r7, #4
 80015a6:	ca06      	ldmia	r2, {r1, r2}
 80015a8:	f7ff ff70 	bl	800148c <ssd1306_WriteChar>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d002      	beq.n	80015be <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	e008      	b.n	80015d0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
    while (*str)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e8      	bne.n	800159e <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	781b      	ldrb	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <ssd1306_SetCursor>:

//
//  Set cursor_index position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <ssd1306_SetCursor+0x2c>)
 80015ee:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <ssd1306_SetCursor+0x2c>)
 80015f6:	805a      	strh	r2, [r3, #2]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	20000e5c 	.word	0x20000e5c

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001616:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <HAL_MspInit+0x4c>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800161c:	6453      	str	r3, [r2, #68]	@ 0x44
 800161e:	4b0d      	ldr	r3, [pc, #52]	@ (8001654 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <HAL_MspInit+0x4c>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001646:	2007      	movs	r0, #7
 8001648:	f001 fa1c 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800

08001658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a33      	ldr	r2, [pc, #204]	@ (8001744 <HAL_ADC_MspInit+0xec>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d15f      	bne.n	800173a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_ADC_MspInit+0xf0>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <HAL_ADC_MspInit+0xf0>)
 8001684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001688:	6453      	str	r3, [r2, #68]	@ 0x44
 800168a:	4b2f      	ldr	r3, [pc, #188]	@ (8001748 <HAL_ADC_MspInit+0xf0>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_ADC_MspInit+0xf0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <HAL_ADC_MspInit+0xf0>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <HAL_ADC_MspInit+0xf0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = FADER_IN1_Pin|FADER_IN2_Pin;
 80016b2:	23c0      	movs	r3, #192	@ 0xc0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b6:	2303      	movs	r3, #3
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4821      	ldr	r0, [pc, #132]	@ (800174c <HAL_ADC_MspInit+0xf4>)
 80016c6:	f001 fd8f 	bl	80031e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	@ (8001754 <HAL_ADC_MspInit+0xfc>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016f2:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 80016fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001700:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800170e:	4810      	ldr	r0, [pc, #64]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 8001710:	f001 f9fa 	bl	8002b08 <HAL_DMA_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800171a:	f7ff fcc9 	bl	80010b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 8001722:	639a      	str	r2, [r3, #56]	@ 0x38
 8001724:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_ADC_MspInit+0xf8>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2012      	movs	r0, #18
 8001730:	f001 f9b3 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001734:	2012      	movs	r0, #18
 8001736:	f001 f9cc 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800173a:	bf00      	nop
 800173c:	3728      	adds	r7, #40	@ 0x28
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40012000 	.word	0x40012000
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000
 8001750:	200000d0 	.word	0x200000d0
 8001754:	40026410 	.word	0x40026410

08001758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <HAL_I2C_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12b      	bne.n	80017d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_I2C_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_I2C_MspInit+0x88>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_I2C_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001796:	23c0      	movs	r3, #192	@ 0xc0
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179e:	2301      	movs	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a6:	2304      	movs	r3, #4
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480c      	ldr	r0, [pc, #48]	@ (80017e4 <HAL_I2C_MspInit+0x8c>)
 80017b2:	f001 fd19 	bl	80031e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_I2C_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_I2C_MspInit+0x88>)
 80017c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_I2C_MspInit+0x88>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	@ 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40005400 	.word	0x40005400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020400 	.word	0x40020400

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <HAL_TIM_Base_MspInit+0x48>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d115      	bne.n	8001826 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <HAL_TIM_Base_MspInit+0x4c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <HAL_TIM_Base_MspInit+0x4c>)
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_TIM_Base_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2032      	movs	r0, #50	@ 0x32
 800181c:	f001 f93d 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001820:	2032      	movs	r0, #50	@ 0x32
 8001822:	f001 f956 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40000c00 	.word	0x40000c00
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <HAL_UART_MspInit+0x84>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d12b      	bne.n	80018b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <HAL_UART_MspInit+0x88>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	4a17      	ldr	r2, [pc, #92]	@ (80018c0 <HAL_UART_MspInit+0x88>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	6413      	str	r3, [r2, #64]	@ 0x40
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_UART_MspInit+0x88>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_UART_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a10      	ldr	r2, [pc, #64]	@ (80018c0 <HAL_UART_MspInit+0x88>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_UART_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001892:	230c      	movs	r3, #12
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <HAL_UART_MspInit+0x8c>)
 80018ae:	f001 fc9b 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40004400 	.word	0x40004400
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <NMI_Handler+0x4>

080018d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <MemManage_Handler+0x4>

080018e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <UsageFault_Handler+0x4>

080018f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191e:	f000 f8fb 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}

08001926 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_a_clk_in1_Pin);
 800192a:	2001      	movs	r0, #1
 800192c:	f001 fe12 	bl	8003554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}

08001934 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_switch_in3_Pin);
 8001938:	2010      	movs	r0, #16
 800193a:	f001 fe0b 	bl	8003554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <ADC_IRQHandler+0x10>)
 800194a:	f000 f96c 	bl	8001c26 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000088 	.word	0x20000088

08001958 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800195c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001960:	f001 fdf8 	bl	8003554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <TIM5_IRQHandler+0x10>)
 800196e:	f003 f88a 	bl	8004a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000184 	.word	0x20000184

0800197c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <DMA2_Stream0_IRQHandler+0x10>)
 8001982:	f001 f9c7 	bl	8002d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200000d0 	.word	0x200000d0

08001990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001998:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <_sbrk+0x5c>)
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <_sbrk+0x60>)
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a4:	4b13      	ldr	r3, [pc, #76]	@ (80019f4 <_sbrk+0x64>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d102      	bne.n	80019b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <_sbrk+0x64>)
 80019ae:	4a12      	ldr	r2, [pc, #72]	@ (80019f8 <_sbrk+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d207      	bcs.n	80019d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c0:	f003 ff08 	bl	80057d4 <__errno>
 80019c4:	4603      	mov	r3, r0
 80019c6:	220c      	movs	r2, #12
 80019c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019ce:	e009      	b.n	80019e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d6:	4b07      	ldr	r3, [pc, #28]	@ (80019f4 <_sbrk+0x64>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <_sbrk+0x64>)
 80019e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e2:	68fb      	ldr	r3, [r7, #12]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20018000 	.word	0x20018000
 80019f0:	00000400 	.word	0x00000400
 80019f4:	20000e64 	.word	0x20000e64
 80019f8:	20000fb8 	.word	0x20000fb8

080019fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <SystemInit+0x20>)
 8001a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <SystemInit+0x20>)
 8001a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a24:	f7ff ffea 	bl	80019fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	@ (8001a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	@ (8001a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f003 fec7 	bl	80057e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7fe ff3b 	bl	80008cc <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a64:	08006964 	.word	0x08006964
  ldr r2, =_sbss
 8001a68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a6c:	20000fb4 	.word	0x20000fb4

08001a70 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <DMA1_Stream0_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 fff1 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff fdae 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 f809 	bl	8002aee <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001af4:	f000 ffd1 	bl	8002a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	20000014 	.word	0x20000014
 8001b14:	20000010 	.word	0x20000010

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000014 	.word	0x20000014
 8001b3c:	20000e68 	.word	0x20000e68

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000e68 	.word	0x20000e68

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000014 	.word	0x20000014

08001ba0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e033      	b.n	8001c1e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fd4a 	bl	8001658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d118      	bne.n	8001c10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001be6:	f023 0302 	bic.w	r3, r3, #2
 8001bea:	f043 0202 	orr.w	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 fb58 	bl	80022a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c02:	f023 0303 	bic.w	r3, r3, #3
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c0e:	e001      	b.n	8001c14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d049      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0xca>
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d046      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d12b      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d127      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c96:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d119      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0220 	bic.w	r2, r2, #32
 8001cba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d105      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff f989 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f06f 0212 	mvn.w	r2, #18
 8001cee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cfe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d057      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x190>
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d054      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d139      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d38:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d12b      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d124      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d11d      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d119      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d80:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d105      	bne.n	8001da6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fbfc 	bl	80025a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 020c 	mvn.w	r2, #12
 8001db4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d017      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x1d6>
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d014      	beq.n	8001dfc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10d      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f925 	bl	800203c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f06f 0201 	mvn.w	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e0a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x218>
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1c:	f043 0202 	orr.w	r2, r3, #2
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f06f 0220 	mvn.w	r2, #32
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f90e 	bl	8002050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0220 	mvn.w	r2, #32
 8001e3c:	601a      	str	r2, [r3, #0]
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
	...

08001e48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Start_DMA+0x1e>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0ce      	b.n	8002004 <HAL_ADC_Start_DMA+0x1bc>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d018      	beq.n	8001eae <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8c:	4b5f      	ldr	r3, [pc, #380]	@ (800200c <HAL_ADC_Start_DMA+0x1c4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5f      	ldr	r2, [pc, #380]	@ (8002010 <HAL_ADC_Start_DMA+0x1c8>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0c9a      	lsrs	r2, r3, #18
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ebc:	d107      	bne.n	8001ece <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ecc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f040 8086 	bne.w	8001fea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d007      	beq.n	8001f10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f1c:	d106      	bne.n	8001f2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f023 0206 	bic.w	r2, r3, #6
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f2a:	e002      	b.n	8001f32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f3a:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <HAL_ADC_Start_DMA+0x1cc>)
 8001f3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f42:	4a35      	ldr	r2, [pc, #212]	@ (8002018 <HAL_ADC_Start_DMA+0x1d0>)
 8001f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f4a:	4a34      	ldr	r2, [pc, #208]	@ (800201c <HAL_ADC_Start_DMA+0x1d4>)
 8001f4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f52:	4a33      	ldr	r2, [pc, #204]	@ (8002020 <HAL_ADC_Start_DMA+0x1d8>)
 8001f54:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001f6e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f7e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	334c      	adds	r3, #76	@ 0x4c
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f000 fe68 	bl	8002c64 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10f      	bne.n	8001fc0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d129      	bne.n	8002002 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	e020      	b.n	8002002 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	@ (8002024 <HAL_ADC_Start_DMA+0x1dc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d11b      	bne.n	8002002 <HAL_ADC_Start_DMA+0x1ba>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d114      	bne.n	8002002 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e00b      	b.n	8002002 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	f043 0201 	orr.w	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000000c 	.word	0x2000000c
 8002010:	431bde83 	.word	0x431bde83
 8002014:	40012300 	.word	0x40012300
 8002018:	080024a1 	.word	0x080024a1
 800201c:	0800255b 	.word	0x0800255b
 8002020:	08002577 	.word	0x08002577
 8002024:	40012000 	.word	0x40012000

08002028 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1c>
 800207c:	2302      	movs	r3, #2
 800207e:	e105      	b.n	800228c <HAL_ADC_ConfigChannel+0x228>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b09      	cmp	r3, #9
 800208e:	d925      	bls.n	80020dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68d9      	ldr	r1, [r3, #12]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	3b1e      	subs	r3, #30
 80020a6:	2207      	movs	r2, #7
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43da      	mvns	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	400a      	ands	r2, r1
 80020b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68d9      	ldr	r1, [r3, #12]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	4603      	mov	r3, r0
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	4403      	add	r3, r0
 80020ce:	3b1e      	subs	r3, #30
 80020d0:	409a      	lsls	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	e022      	b.n	8002122 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6919      	ldr	r1, [r3, #16]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	2207      	movs	r2, #7
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6919      	ldr	r1, [r3, #16]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	4618      	mov	r0, r3
 8002112:	4603      	mov	r3, r0
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4403      	add	r3, r0
 8002118:	409a      	lsls	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b06      	cmp	r3, #6
 8002128:	d824      	bhi.n	8002174 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	3b05      	subs	r3, #5
 800213c:	221f      	movs	r2, #31
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	400a      	ands	r2, r1
 800214a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	3b05      	subs	r3, #5
 8002166:	fa00 f203 	lsl.w	r2, r0, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34
 8002172:	e04c      	b.n	800220e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b0c      	cmp	r3, #12
 800217a:	d824      	bhi.n	80021c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b23      	subs	r3, #35	@ 0x23
 800218e:	221f      	movs	r2, #31
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43da      	mvns	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	400a      	ands	r2, r1
 800219c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	3b23      	subs	r3, #35	@ 0x23
 80021b8:	fa00 f203 	lsl.w	r2, r0, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021c4:	e023      	b.n	800220e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	3b41      	subs	r3, #65	@ 0x41
 80021d8:	221f      	movs	r2, #31
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	400a      	ands	r2, r1
 80021e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3b41      	subs	r3, #65	@ 0x41
 8002202:	fa00 f203 	lsl.w	r2, r0, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800220e:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <HAL_ADC_ConfigChannel+0x234>)
 8002210:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a21      	ldr	r2, [pc, #132]	@ (800229c <HAL_ADC_ConfigChannel+0x238>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d109      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x1cc>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b12      	cmp	r3, #18
 8002222:	d105      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a19      	ldr	r2, [pc, #100]	@ (800229c <HAL_ADC_ConfigChannel+0x238>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d123      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x21e>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d003      	beq.n	800224a <HAL_ADC_ConfigChannel+0x1e6>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b11      	cmp	r3, #17
 8002248:	d11b      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b10      	cmp	r3, #16
 800225c:	d111      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a10      	ldr	r2, [pc, #64]	@ (80022a4 <HAL_ADC_ConfigChannel+0x240>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	0c9a      	lsrs	r2, r3, #18
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002274:	e002      	b.n	800227c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	3b01      	subs	r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f9      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40012300 	.word	0x40012300
 800229c:	40012000 	.word	0x40012000
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	431bde83 	.word	0x431bde83

080022a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b0:	4b79      	ldr	r3, [pc, #484]	@ (8002498 <ADC_Init+0x1f0>)
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	021a      	lsls	r2, r3, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	4a58      	ldr	r2, [pc, #352]	@ (800249c <ADC_Init+0x1f4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d022      	beq.n	8002386 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800234e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6899      	ldr	r1, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e00f      	b.n	80023a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 0202 	bic.w	r2, r2, #2
 80023b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6899      	ldr	r1, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	7e1b      	ldrb	r3, [r3, #24]
 80023c0:	005a      	lsls	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6859      	ldr	r1, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fe:	3b01      	subs	r3, #1
 8002400:	035a      	lsls	r2, r3, #13
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	e007      	b.n	800241c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800242a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	3b01      	subs	r3, #1
 8002438:	051a      	lsls	r2, r3, #20
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800245e:	025a      	lsls	r2, r3, #9
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6899      	ldr	r1, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	029a      	lsls	r2, r3, #10
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012300 	.word	0x40012300
 800249c:	0f000001 	.word	0x0f000001

080024a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d13c      	bne.n	8002534 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d12b      	bne.n	800252c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d127      	bne.n	800252c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d119      	bne.n	800252c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0220 	bic.w	r2, r2, #32
 8002506:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7fe fd63 	bl	8000ff8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002532:	e00e      	b.n	8002552 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fd85 	bl	8002050 <HAL_ADC_ErrorCallback>
}
 8002546:	e004      	b.n	8002552 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4798      	blx	r3
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff fd5d 	bl	8002028 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002582:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2240      	movs	r2, #64	@ 0x40
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f043 0204 	orr.w	r2, r3, #4
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fd5a 	bl	8002050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e17d      	b.n	80028cc <HAL_ADCEx_InjectedConfigChannel+0x314>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b09      	cmp	r3, #9
 80025de:	d925      	bls.n	800262c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68d9      	ldr	r1, [r3, #12]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	3b1e      	subs	r3, #30
 80025f6:	2207      	movs	r2, #7
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43da      	mvns	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	400a      	ands	r2, r1
 8002604:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68d9      	ldr	r1, [r3, #12]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	4603      	mov	r3, r0
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4403      	add	r3, r0
 800261e:	3b1e      	subs	r3, #30
 8002620:	409a      	lsls	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	e022      	b.n	8002672 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6919      	ldr	r1, [r3, #16]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	2207      	movs	r2, #7
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43da      	mvns	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	400a      	ands	r2, r1
 800264e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6919      	ldr	r1, [r3, #16]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	4603      	mov	r3, r0
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4403      	add	r3, r0
 8002668:	409a      	lsls	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002680:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	3b01      	subs	r3, #1
 800268e:	051a      	lsls	r2, r3, #20
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	3303      	adds	r3, #3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	221f      	movs	r2, #31
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43da      	mvns	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	400a      	ands	r2, r1
 80026c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	3303      	adds	r3, #3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	fa00 f203 	lsl.w	r2, r0, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	4a74      	ldr	r2, [pc, #464]	@ (80028d8 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8002718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6899      	ldr	r1, [r3, #8]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800273a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6899      	ldr	r1, [r3, #8]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	609a      	str	r2, [r3, #8]
 800274e:	e00f      	b.n	8002770 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800275e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800276e:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	7d5b      	ldrb	r3, [r3, #21]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	e007      	b.n	800279a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002798:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	7d1b      	ldrb	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	e007      	b.n	80027c4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027c2:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d02e      	beq.n	800282a <HAL_ADCEx_InjectedConfigChannel+0x272>
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d840      	bhi.n	8002852 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d002      	beq.n	80027da <HAL_ADCEx_InjectedConfigChannel+0x222>
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d014      	beq.n	8002802 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80027d8:	e03b      	b.n	8002852 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80027e8:	f023 030f 	bic.w	r3, r3, #15
 80027ec:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6959      	ldr	r1, [r3, #20]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	615a      	str	r2, [r3, #20]
      break;
 8002800:	e03b      	b.n	800287a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002810:	f023 030f 	bic.w	r3, r3, #15
 8002814:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6999      	ldr	r1, [r3, #24]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	619a      	str	r2, [r3, #24]
      break;
 8002828:	e027      	b.n	800287a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002838:	f023 030f 	bic.w	r3, r3, #15
 800283c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
      break;
 8002850:	e013      	b.n	800287a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8002860:	f023 030f 	bic.w	r3, r3, #15
 8002864:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a19      	ldr	r1, [r3, #32]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	621a      	str	r2, [r3, #32]
      break;
 8002878:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800287a:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800287c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a17      	ldr	r2, [pc, #92]	@ (80028e0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d109      	bne.n	800289c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b12      	cmp	r3, #18
 800288e:	d105      	bne.n	800289c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0f      	ldr	r2, [pc, #60]	@ (80028e0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10d      	bne.n	80028c2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d003      	beq.n	80028b6 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d105      	bne.n	80028c2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	000f0001 	.word	0x000f0001
 80028dc:	40012300 	.word	0x40012300
 80028e0:	40012000 	.word	0x40012000

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4907      	ldr	r1, [pc, #28]	@ (8002980 <__NVIC_EnableIRQ+0x38>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000e100 	.word	0xe000e100

08002984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	2b00      	cmp	r3, #0
 8002996:	db0a      	blt.n	80029ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	b2da      	uxtb	r2, r3
 800299c:	490c      	ldr	r1, [pc, #48]	@ (80029d0 <__NVIC_SetPriority+0x4c>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	0112      	lsls	r2, r2, #4
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	440b      	add	r3, r1
 80029a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029ac:	e00a      	b.n	80029c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4908      	ldr	r1, [pc, #32]	@ (80029d4 <__NVIC_SetPriority+0x50>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3b04      	subs	r3, #4
 80029bc:	0112      	lsls	r2, r2, #4
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	440b      	add	r3, r1
 80029c2:	761a      	strb	r2, [r3, #24]
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000e100 	.word	0xe000e100
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	@ 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f1c3 0307 	rsb	r3, r3, #7
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf28      	it	cs
 80029f6:	2304      	movcs	r3, #4
 80029f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	3304      	adds	r3, #4
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d902      	bls.n	8002a08 <NVIC_EncodePriority+0x30>
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	3b03      	subs	r3, #3
 8002a06:	e000      	b.n	8002a0a <NVIC_EncodePriority+0x32>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	43da      	mvns	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2a:	43d9      	mvns	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a30:	4313      	orrs	r3, r2
         );
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3724      	adds	r7, #36	@ 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a64:	f7ff ff8e 	bl	8002984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff29 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff3e 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff8e 	bl	80029d8 <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5d 	bl	8002984 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff31 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff f814 	bl	8001b40 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e099      	b.n	8002c58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b44:	e00f      	b.n	8002b66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b46:	f7fe fffb 	bl	8001b40 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d908      	bls.n	8002b66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e078      	b.n	8002c58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e8      	bne.n	8002b46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4b38      	ldr	r3, [pc, #224]	@ (8002c60 <HAL_DMA_Init+0x158>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d107      	bne.n	8002bd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0307 	bic.w	r3, r3, #7
 8002be6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d117      	bne.n	8002c2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa6f 	bl	80030f0 <DMA_CheckFifoParam>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2240      	movs	r2, #64	@ 0x40
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c26:	2301      	movs	r3, #1
 8002c28:	e016      	b.n	8002c58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa26 	bl	8003084 <DMA_CalcBaseAndBitshift>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	223f      	movs	r2, #63	@ 0x3f
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	f010803f 	.word	0xf010803f

08002c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_DMA_Start_IT+0x26>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e040      	b.n	8002d0c <HAL_DMA_Start_IT+0xa8>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12f      	bne.n	8002cfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f9b8 	bl	8003028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	223f      	movs	r2, #63	@ 0x3f
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0216 	orr.w	r2, r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0208 	orr.w	r2, r2, #8
 8002cea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e005      	b.n	8002d0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
 8002d08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d20:	4b8e      	ldr	r3, [pc, #568]	@ (8002f5c <HAL_DMA_IRQHandler+0x248>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a8e      	ldr	r2, [pc, #568]	@ (8002f60 <HAL_DMA_IRQHandler+0x24c>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	0a9b      	lsrs	r3, r3, #10
 8002d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	2208      	movs	r2, #8
 8002d40:	409a      	lsls	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01a      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d013      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0204 	bic.w	r2, r2, #4
 8002d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	2201      	movs	r2, #1
 8002d86:	409a      	lsls	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00b      	beq.n	8002db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dba:	2204      	movs	r2, #4
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	2204      	movs	r2, #4
 8002dda:	409a      	lsls	r2, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de4:	f043 0204 	orr.w	r2, r3, #4
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	2210      	movs	r2, #16
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d043      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d03c      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0e:	2210      	movs	r2, #16
 8002e10:	409a      	lsls	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d018      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d024      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4798      	blx	r3
 8002e42:	e01f      	b.n	8002e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d01b      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
 8002e54:	e016      	b.n	8002e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0208 	bic.w	r2, r2, #8
 8002e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e88:	2220      	movs	r2, #32
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 808f 	beq.w	8002fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8087 	beq.w	8002fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eaa:	2220      	movs	r2, #32
 8002eac:	409a      	lsls	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d136      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0216 	bic.w	r2, r2, #22
 8002ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <HAL_DMA_IRQHandler+0x1da>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0208 	bic.w	r2, r2, #8
 8002efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	223f      	movs	r2, #63	@ 0x3f
 8002f04:	409a      	lsls	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d07e      	beq.n	8003020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
        }
        return;
 8002f2a:	e079      	b.n	8003020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01d      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d031      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e02c      	b.n	8002fb4 <HAL_DMA_IRQHandler+0x2a0>
 8002f5a:	bf00      	nop
 8002f5c:	2000000c 	.word	0x2000000c
 8002f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d023      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
 8002f74:	e01e      	b.n	8002fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10f      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0210 	bic.w	r2, r2, #16
 8002f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d032      	beq.n	8003022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d022      	beq.n	800300e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2205      	movs	r2, #5
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d307      	bcc.n	8002ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f2      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x2cc>
 8002ffa:	e000      	b.n	8002ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
 800301e:	e000      	b.n	8003022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003020:	bf00      	nop
    }
  }
}
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b40      	cmp	r3, #64	@ 0x40
 8003054:	d108      	bne.n	8003068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003066:	e007      	b.n	8003078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	60da      	str	r2, [r3, #12]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3b10      	subs	r3, #16
 8003094:	4a14      	ldr	r2, [pc, #80]	@ (80030e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800309e:	4a13      	ldr	r2, [pc, #76]	@ (80030ec <DMA_CalcBaseAndBitshift+0x68>)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d909      	bls.n	80030c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	1d1a      	adds	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80030c4:	e007      	b.n	80030d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80030ce:	f023 0303 	bic.w	r3, r3, #3
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	aaaaaaab 	.word	0xaaaaaaab
 80030ec:	08006918 	.word	0x08006918

080030f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11f      	bne.n	800314a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b03      	cmp	r3, #3
 800310e:	d856      	bhi.n	80031be <DMA_CheckFifoParam+0xce>
 8003110:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <DMA_CheckFifoParam+0x28>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	08003129 	.word	0x08003129
 800311c:	0800313b 	.word	0x0800313b
 8003120:	08003129 	.word	0x08003129
 8003124:	080031bf 	.word	0x080031bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d046      	beq.n	80031c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003138:	e043      	b.n	80031c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003142:	d140      	bne.n	80031c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003148:	e03d      	b.n	80031c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003152:	d121      	bne.n	8003198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b03      	cmp	r3, #3
 8003158:	d837      	bhi.n	80031ca <DMA_CheckFifoParam+0xda>
 800315a:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <DMA_CheckFifoParam+0x70>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	08003171 	.word	0x08003171
 8003164:	08003177 	.word	0x08003177
 8003168:	08003171 	.word	0x08003171
 800316c:	08003189 	.word	0x08003189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      break;
 8003174:	e030      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d025      	beq.n	80031ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003186:	e022      	b.n	80031ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003190:	d11f      	bne.n	80031d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003196:	e01c      	b.n	80031d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d903      	bls.n	80031a6 <DMA_CheckFifoParam+0xb6>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d003      	beq.n	80031ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031a4:	e018      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      break;
 80031aa:	e015      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00e      	beq.n	80031d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e00b      	b.n	80031d6 <DMA_CheckFifoParam+0xe6>
      break;
 80031be:	bf00      	nop
 80031c0:	e00a      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
 80031c4:	e008      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      break;
 80031c6:	bf00      	nop
 80031c8:	e006      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      break;
 80031ca:	bf00      	nop
 80031cc:	e004      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      break;
 80031ce:	bf00      	nop
 80031d0:	e002      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80031d2:	bf00      	nop
 80031d4:	e000      	b.n	80031d8 <DMA_CheckFifoParam+0xe8>
      break;
 80031d6:	bf00      	nop
    }
  } 
  
  return status; 
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	@ 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e159      	b.n	80034b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003204:	2201      	movs	r2, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	f040 8148 	bne.w	80034b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 0303 	and.w	r3, r3, #3
 800322a:	2b01      	cmp	r3, #1
 800322c:	d005      	beq.n	800323a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003236:	2b02      	cmp	r3, #2
 8003238:	d130      	bne.n	800329c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 0201 	and.w	r2, r3, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d017      	beq.n	80032d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d123      	bne.n	800332c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	08da      	lsrs	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3208      	adds	r2, #8
 80032ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	220f      	movs	r2, #15
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	08da      	lsrs	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3208      	adds	r2, #8
 8003326:	69b9      	ldr	r1, [r7, #24]
 8003328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0203 	and.w	r2, r3, #3
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80a2 	beq.w	80034b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b57      	ldr	r3, [pc, #348]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 8003378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800337c:	6453      	str	r3, [r2, #68]	@ 0x44
 800337e:	4b54      	ldr	r3, [pc, #336]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800338a:	4a52      	ldr	r2, [pc, #328]	@ (80034d4 <HAL_GPIO_Init+0x2ec>)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a49      	ldr	r2, [pc, #292]	@ (80034d8 <HAL_GPIO_Init+0x2f0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d019      	beq.n	80033ea <HAL_GPIO_Init+0x202>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a48      	ldr	r2, [pc, #288]	@ (80034dc <HAL_GPIO_Init+0x2f4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_GPIO_Init+0x1fe>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a47      	ldr	r2, [pc, #284]	@ (80034e0 <HAL_GPIO_Init+0x2f8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00d      	beq.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <HAL_GPIO_Init+0x2fc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <HAL_GPIO_Init+0x1f6>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a45      	ldr	r2, [pc, #276]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_GPIO_Init+0x1f2>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e008      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033da:	2307      	movs	r3, #7
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033de:	2303      	movs	r3, #3
 80033e0:	e004      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_GPIO_Init+0x204>
 80033ea:	2300      	movs	r3, #0
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	f002 0203 	and.w	r2, r2, #3
 80033f2:	0092      	lsls	r2, r2, #2
 80033f4:	4093      	lsls	r3, r2
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033fc:	4935      	ldr	r1, [pc, #212]	@ (80034d4 <HAL_GPIO_Init+0x2ec>)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800340a:	4b38      	ldr	r3, [pc, #224]	@ (80034ec <HAL_GPIO_Init+0x304>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342e:	4a2f      	ldr	r2, [pc, #188]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003458:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <HAL_GPIO_Init+0x304>)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345e:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003482:	4a1a      	ldr	r2, [pc, #104]	@ (80034ec <HAL_GPIO_Init+0x304>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003488:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <HAL_GPIO_Init+0x304>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ac:	4a0f      	ldr	r2, [pc, #60]	@ (80034ec <HAL_GPIO_Init+0x304>)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	f67f aea2 	bls.w	8003204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40020000 	.word	0x40020000
 80034dc:	40020400 	.word	0x40020400
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020c00 	.word	0x40020c00
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40013c00 	.word	0x40013c00

080034f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e001      	b.n	8003512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800353c:	e003      	b.n	8003546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	041a      	lsls	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800355e:	4b08      	ldr	r3, [pc, #32]	@ (8003580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800356a:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fccc 	bl	8000f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40013c00 	.word	0x40013c00

08003584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e12b      	b.n	80037ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fe f8d4 	bl	8001758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2224      	movs	r2, #36	@ 0x24
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e8:	f001 f8ea 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 80035ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	4a81      	ldr	r2, [pc, #516]	@ (80037f8 <HAL_I2C_Init+0x274>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d807      	bhi.n	8003608 <HAL_I2C_Init+0x84>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a80      	ldr	r2, [pc, #512]	@ (80037fc <HAL_I2C_Init+0x278>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bf94      	ite	ls
 8003600:	2301      	movls	r3, #1
 8003602:	2300      	movhi	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e006      	b.n	8003616 <HAL_I2C_Init+0x92>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a7d      	ldr	r2, [pc, #500]	@ (8003800 <HAL_I2C_Init+0x27c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	bf94      	ite	ls
 8003610:	2301      	movls	r3, #1
 8003612:	2300      	movhi	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e0e7      	b.n	80037ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a78      	ldr	r2, [pc, #480]	@ (8003804 <HAL_I2C_Init+0x280>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0c9b      	lsrs	r3, r3, #18
 8003628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	430a      	orrs	r2, r1
 800363c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a6a      	ldr	r2, [pc, #424]	@ (80037f8 <HAL_I2C_Init+0x274>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d802      	bhi.n	8003658 <HAL_I2C_Init+0xd4>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3301      	adds	r3, #1
 8003656:	e009      	b.n	800366c <HAL_I2C_Init+0xe8>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800365e:	fb02 f303 	mul.w	r3, r2, r3
 8003662:	4a69      	ldr	r2, [pc, #420]	@ (8003808 <HAL_I2C_Init+0x284>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	3301      	adds	r3, #1
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	430b      	orrs	r3, r1
 8003672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800367e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	495c      	ldr	r1, [pc, #368]	@ (80037f8 <HAL_I2C_Init+0x274>)
 8003688:	428b      	cmp	r3, r1
 800368a:	d819      	bhi.n	80036c0 <HAL_I2C_Init+0x13c>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e59      	subs	r1, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fbb1 f3f3 	udiv	r3, r1, r3
 800369a:	1c59      	adds	r1, r3, #1
 800369c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036a0:	400b      	ands	r3, r1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_I2C_Init+0x138>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1e59      	subs	r1, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ba:	e051      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 80036bc:	2304      	movs	r3, #4
 80036be:	e04f      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d111      	bne.n	80036ec <HAL_I2C_Init+0x168>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	1e58      	subs	r0, r3, #1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6859      	ldr	r1, [r3, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	440b      	add	r3, r1
 80036d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036da:	3301      	adds	r3, #1
 80036dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e012      	b.n	8003712 <HAL_I2C_Init+0x18e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e58      	subs	r0, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	0099      	lsls	r1, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003702:	3301      	adds	r3, #1
 8003704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf0c      	ite	eq
 800370c:	2301      	moveq	r3, #1
 800370e:	2300      	movne	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Init+0x196>
 8003716:	2301      	movs	r3, #1
 8003718:	e022      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10e      	bne.n	8003740 <HAL_I2C_Init+0x1bc>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1e58      	subs	r0, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6859      	ldr	r1, [r3, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	440b      	add	r3, r1
 8003730:	fbb0 f3f3 	udiv	r3, r0, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800373e:	e00f      	b.n	8003760 <HAL_I2C_Init+0x1dc>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1e58      	subs	r0, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	0099      	lsls	r1, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	fbb0 f3f3 	udiv	r3, r0, r3
 8003756:	3301      	adds	r3, #1
 8003758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	6809      	ldr	r1, [r1, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800378e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6911      	ldr	r1, [r2, #16]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	4311      	orrs	r1, r2
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	000186a0 	.word	0x000186a0
 80037fc:	001e847f 	.word	0x001e847f
 8003800:	003d08ff 	.word	0x003d08ff
 8003804:	431bde83 	.word	0x431bde83
 8003808:	10624dd3 	.word	0x10624dd3

0800380c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af02      	add	r7, sp, #8
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4603      	mov	r3, r0
 800381c:	817b      	strh	r3, [r7, #10]
 800381e:	460b      	mov	r3, r1
 8003820:	813b      	strh	r3, [r7, #8]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003826:	f7fe f98b 	bl	8001b40 <HAL_GetTick>
 800382a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	f040 80d9 	bne.w	80039ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	2319      	movs	r3, #25
 8003840:	2201      	movs	r2, #1
 8003842:	496d      	ldr	r1, [pc, #436]	@ (80039f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f971 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
 8003852:	e0cc      	b.n	80039ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_I2C_Mem_Write+0x56>
 800385e:	2302      	movs	r3, #2
 8003860:	e0c5      	b.n	80039ee <HAL_I2C_Mem_Write+0x1e2>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d007      	beq.n	8003888 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2221      	movs	r2, #33	@ 0x21
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a3a      	ldr	r2, [r7, #32]
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a4d      	ldr	r2, [pc, #308]	@ (80039fc <HAL_I2C_Mem_Write+0x1f0>)
 80038c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ca:	88f8      	ldrh	r0, [r7, #6]
 80038cc:	893a      	ldrh	r2, [r7, #8]
 80038ce:	8979      	ldrh	r1, [r7, #10]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4603      	mov	r3, r0
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 f890 	bl	8003a00 <I2C_RequestMemoryWrite>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d052      	beq.n	800398c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e081      	b.n	80039ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fa36 	bl	8003d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d107      	bne.n	8003912 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e06b      	b.n	80039ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b04      	cmp	r3, #4
 8003952:	d11b      	bne.n	800398c <HAL_I2C_Mem_Write+0x180>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	d017      	beq.n	800398c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1aa      	bne.n	80038ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fa29 	bl	8003df0 <I2C_WaitOnBTFFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00d      	beq.n	80039c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d107      	bne.n	80039bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e016      	b.n	80039ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	00100002 	.word	0x00100002
 80039fc:	ffff0000 	.word	0xffff0000

08003a00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4603      	mov	r3, r0
 8003a10:	817b      	strh	r3, [r7, #10]
 8003a12:	460b      	mov	r3, r1
 8003a14:	813b      	strh	r3, [r7, #8]
 8003a16:	4613      	mov	r3, r2
 8003a18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f878 	bl	8003b2c <I2C_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a50:	d103      	bne.n	8003a5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e05f      	b.n	8003b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a5e:	897b      	ldrh	r3, [r7, #10]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	6a3a      	ldr	r2, [r7, #32]
 8003a72:	492d      	ldr	r1, [pc, #180]	@ (8003b28 <I2C_RequestMemoryWrite+0x128>)
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f8d3 	bl	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e04c      	b.n	8003b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	617b      	str	r3, [r7, #20]
 8003a98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a9c:	6a39      	ldr	r1, [r7, #32]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f95e 	bl	8003d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d107      	bne.n	8003ac2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e02b      	b.n	8003b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ac6:	88fb      	ldrh	r3, [r7, #6]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003acc:	893b      	ldrh	r3, [r7, #8]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	e021      	b.n	8003b1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ad8:	893b      	ldrh	r3, [r7, #8]
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ae8:	6a39      	ldr	r1, [r7, #32]
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f938 	bl	8003d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d107      	bne.n	8003b0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e005      	b.n	8003b1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b12:	893b      	ldrh	r3, [r7, #8]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	00010002 	.word	0x00010002

08003b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b3c:	e048      	b.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b44:	d044      	beq.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fd fffb 	bl	8001b40 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d139      	bne.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	0c1b      	lsrs	r3, r3, #16
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10d      	bne.n	8003b82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	43da      	mvns	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bf0c      	ite	eq
 8003b78:	2301      	moveq	r3, #1
 8003b7a:	2300      	movne	r3, #0
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	e00c      	b.n	8003b9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d116      	bne.n	8003bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e023      	b.n	8003c18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d10d      	bne.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	43da      	mvns	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	4013      	ands	r3, r2
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	bf0c      	ite	eq
 8003bec:	2301      	moveq	r3, #1
 8003bee:	2300      	movne	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	e00c      	b.n	8003c10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	79fb      	ldrb	r3, [r7, #7]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d093      	beq.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c2e:	e071      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3e:	d123      	bne.n	8003c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f043 0204 	orr.w	r2, r3, #4
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e067      	b.n	8003d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c8e:	d041      	beq.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c90:	f7fd ff56 	bl	8001b40 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d302      	bcc.n	8003ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d136      	bne.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0c1b      	lsrs	r3, r3, #16
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10c      	bne.n	8003cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e00b      	b.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	43da      	mvns	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d016      	beq.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e021      	b.n	8003d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10c      	bne.n	8003d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	43da      	mvns	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e00b      	b.n	8003d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f af6d 	bne.w	8003c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d6c:	e034      	b.n	8003dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f886 	bl	8003e80 <I2C_IsAcknowledgeFailed>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e034      	b.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d84:	d028      	beq.n	8003dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d86:	f7fd fedb 	bl	8001b40 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d302      	bcc.n	8003d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11d      	bne.n	8003dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da6:	2b80      	cmp	r3, #128	@ 0x80
 8003da8:	d016      	beq.n	8003dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e007      	b.n	8003de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de2:	2b80      	cmp	r3, #128	@ 0x80
 8003de4:	d1c3      	bne.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dfc:	e034      	b.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f83e 	bl	8003e80 <I2C_IsAcknowledgeFailed>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e034      	b.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e14:	d028      	beq.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e16:	f7fd fe93 	bl	8001b40 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d302      	bcc.n	8003e2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d11d      	bne.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d016      	beq.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e007      	b.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d1c3      	bne.n	8003dfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e96:	d11b      	bne.n	8003ed0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ea0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
	...

08003ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e267      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d075      	beq.n	8003fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003efe:	4b88      	ldr	r3, [pc, #544]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d00c      	beq.n	8003f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f0a:	4b85      	ldr	r3, [pc, #532]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d112      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f16:	4b82      	ldr	r3, [pc, #520]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f22:	d10b      	bne.n	8003f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f24:	4b7e      	ldr	r3, [pc, #504]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d05b      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x108>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d157      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e242      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f44:	d106      	bne.n	8003f54 <HAL_RCC_OscConfig+0x74>
 8003f46:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e01d      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x98>
 8003f5e:	4b70      	ldr	r3, [pc, #448]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a6f      	ldr	r2, [pc, #444]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a6c      	ldr	r2, [pc, #432]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e00b      	b.n	8003f90 <HAL_RCC_OscConfig+0xb0>
 8003f78:	4b69      	ldr	r3, [pc, #420]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a68      	ldr	r2, [pc, #416]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f82:	6013      	str	r3, [r2, #0]
 8003f84:	4b66      	ldr	r3, [pc, #408]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a65      	ldr	r2, [pc, #404]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d013      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fd fdd2 	bl	8001b40 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fd fdce 	bl	8001b40 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	@ 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e207      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0xc0>
 8003fbe:	e014      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fdbe 	bl	8001b40 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fd fdba 	bl	8001b40 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e1f3      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fda:	4b51      	ldr	r3, [pc, #324]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xe8>
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d063      	beq.n	80040be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004002:	4b47      	ldr	r3, [pc, #284]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800400a:	2b08      	cmp	r3, #8
 800400c:	d11c      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400e:	4b44      	ldr	r3, [pc, #272]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401a:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d001      	beq.n	8004032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e1c7      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004032:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4937      	ldr	r1, [pc, #220]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004042:	4313      	orrs	r3, r2
 8004044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	e03a      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d020      	beq.n	8004092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004050:	4b34      	ldr	r3, [pc, #208]	@ (8004124 <HAL_RCC_OscConfig+0x244>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004056:	f7fd fd73 	bl	8001b40 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800405e:	f7fd fd6f 	bl	8001b40 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1a8      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0f0      	beq.n	800405e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b28      	ldr	r3, [pc, #160]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4925      	ldr	r1, [pc, #148]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 800408c:	4313      	orrs	r3, r2
 800408e:	600b      	str	r3, [r1, #0]
 8004090:	e015      	b.n	80040be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004092:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_OscConfig+0x244>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd fd52 	bl	8001b40 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040a0:	f7fd fd4e 	bl	8001b40 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e187      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d036      	beq.n	8004138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040d2:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <HAL_RCC_OscConfig+0x248>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd fd32 	bl	8001b40 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e0:	f7fd fd2e 	bl	8001b40 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e167      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCC_OscConfig+0x240>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x200>
 80040fe:	e01b      	b.n	8004138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004100:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <HAL_RCC_OscConfig+0x248>)
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7fd fd1b 	bl	8001b40 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410c:	e00e      	b.n	800412c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410e:	f7fd fd17 	bl	8001b40 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d907      	bls.n	800412c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e150      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004120:	40023800 	.word	0x40023800
 8004124:	42470000 	.word	0x42470000
 8004128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	4b88      	ldr	r3, [pc, #544]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1ea      	bne.n	800410e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8097 	beq.w	8004274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b81      	ldr	r3, [pc, #516]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10f      	bne.n	8004176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	4b7d      	ldr	r3, [pc, #500]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	4a7c      	ldr	r2, [pc, #496]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004164:	6413      	str	r3, [r2, #64]	@ 0x40
 8004166:	4b7a      	ldr	r3, [pc, #488]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b77      	ldr	r3, [pc, #476]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004182:	4b74      	ldr	r3, [pc, #464]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a73      	ldr	r2, [pc, #460]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7fd fcd7 	bl	8001b40 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fd fcd3 	bl	8001b40 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e10c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <HAL_RCC_OscConfig+0x474>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x2ea>
 80041bc:	4b64      	ldr	r3, [pc, #400]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c0:	4a63      	ldr	r2, [pc, #396]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041c8:	e01c      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b05      	cmp	r3, #5
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x30c>
 80041d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80041de:	4b5c      	ldr	r3, [pc, #368]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80041ea:	e00b      	b.n	8004204 <HAL_RCC_OscConfig+0x324>
 80041ec:	4b58      	ldr	r3, [pc, #352]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f0:	4a57      	ldr	r2, [pc, #348]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80041f8:	4b55      	ldr	r3, [pc, #340]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fc:	4a54      	ldr	r2, [pc, #336]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d015      	beq.n	8004238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fc98 	bl	8001b40 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	e00a      	b.n	800422a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004214:	f7fd fc94 	bl	8001b40 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0cb      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800422a:	4b49      	ldr	r3, [pc, #292]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ee      	beq.n	8004214 <HAL_RCC_OscConfig+0x334>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004238:	f7fd fc82 	bl	8001b40 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fd fc7e 	bl	8001b40 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0b5      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004256:	4b3e      	ldr	r3, [pc, #248]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ee      	bne.n	8004240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004268:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	4a38      	ldr	r2, [pc, #224]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800426e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004272:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 80a1 	beq.w	80043c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427e:	4b34      	ldr	r3, [pc, #208]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b08      	cmp	r3, #8
 8004288:	d05c      	beq.n	8004344 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d141      	bne.n	8004316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <HAL_RCC_OscConfig+0x478>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fd fc52 	bl	8001b40 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fd fc4e 	bl	8001b40 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e087      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b2:	4b27      	ldr	r3, [pc, #156]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	3b01      	subs	r3, #1
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	491b      	ldr	r1, [pc, #108]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_RCC_OscConfig+0x478>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ee:	f7fd fc27 	bl	8001b40 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f4:	e008      	b.n	8004308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042f6:	f7fd fc23 	bl	8001b40 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e05c      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004308:	4b11      	ldr	r3, [pc, #68]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0f0      	beq.n	80042f6 <HAL_RCC_OscConfig+0x416>
 8004314:	e054      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b10      	ldr	r3, [pc, #64]	@ (8004358 <HAL_RCC_OscConfig+0x478>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fd fc10 	bl	8001b40 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fd fc0c 	bl	8001b40 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e045      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_RCC_OscConfig+0x470>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x444>
 8004342:	e03d      	b.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e038      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
 8004350:	40023800 	.word	0x40023800
 8004354:	40007000 	.word	0x40007000
 8004358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x4ec>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d028      	beq.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d121      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d11a      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800438c:	4013      	ands	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004394:	4293      	cmp	r3, r2
 8004396:	d111      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	3b01      	subs	r3, #1
 80043a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d001      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800

080043d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0cc      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e4:	4b68      	ldr	r3, [pc, #416]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0307 	and.w	r3, r3, #7
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d90c      	bls.n	800440c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f2:	4b65      	ldr	r3, [pc, #404]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b63      	ldr	r3, [pc, #396]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b8      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b59      	ldr	r3, [pc, #356]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a58      	ldr	r2, [pc, #352]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800442a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800442e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800443c:	4b53      	ldr	r3, [pc, #332]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	4a52      	ldr	r2, [pc, #328]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004448:	4b50      	ldr	r3, [pc, #320]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	494d      	ldr	r1, [pc, #308]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d044      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d107      	bne.n	800447e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	4b47      	ldr	r3, [pc, #284]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d119      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e07f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d003      	beq.n	800448e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448a:	2b03      	cmp	r3, #3
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448e:	4b3f      	ldr	r3, [pc, #252]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449e:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e067      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ae:	4b37      	ldr	r3, [pc, #220]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f023 0203 	bic.w	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4934      	ldr	r1, [pc, #208]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044c0:	f7fd fb3e 	bl	8001b40 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	e00a      	b.n	80044de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c8:	f7fd fb3a 	bl	8001b40 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e04f      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044de:	4b2b      	ldr	r3, [pc, #172]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 020c 	and.w	r2, r3, #12
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d1eb      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044f0:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d20c      	bcs.n	8004518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b22      	ldr	r3, [pc, #136]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b20      	ldr	r3, [pc, #128]	@ (8004588 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e032      	b.n	800457e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4916      	ldr	r1, [pc, #88]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004542:	4b12      	ldr	r3, [pc, #72]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	490e      	ldr	r1, [pc, #56]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004556:	f000 f821 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800455a:	4602      	mov	r2, r0
 800455c:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	490a      	ldr	r1, [pc, #40]	@ (8004590 <HAL_RCC_ClockConfig+0x1c0>)
 8004568:	5ccb      	ldrb	r3, [r1, r3]
 800456a:	fa22 f303 	lsr.w	r3, r2, r3
 800456e:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fd fa9e 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00
 800458c:	40023800 	.word	0x40023800
 8004590:	08006900 	.word	0x08006900
 8004594:	2000000c 	.word	0x2000000c
 8004598:	20000010 	.word	0x20000010

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b094      	sub	sp, #80	@ 0x50
 80045a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045a8:	2300      	movs	r3, #0
 80045aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045ac:	2300      	movs	r3, #0
 80045ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b4:	4b79      	ldr	r3, [pc, #484]	@ (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d00d      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x40>
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	f200 80e1 	bhi.w	8004788 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ce:	e0db      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b73      	ldr	r3, [pc, #460]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80045d4:	e0db      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d6:	4b73      	ldr	r3, [pc, #460]	@ (80047a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80045d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045da:	e0d8      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045dc:	4b6f      	ldr	r3, [pc, #444]	@ (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e6:	4b6d      	ldr	r3, [pc, #436]	@ (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d063      	beq.n	80046ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b6a      	ldr	r3, [pc, #424]	@ (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	2200      	movs	r2, #0
 80045fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004604:	633b      	str	r3, [r7, #48]	@ 0x30
 8004606:	2300      	movs	r3, #0
 8004608:	637b      	str	r3, [r7, #52]	@ 0x34
 800460a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800460e:	4622      	mov	r2, r4
 8004610:	462b      	mov	r3, r5
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f04f 0100 	mov.w	r1, #0
 800461a:	0159      	lsls	r1, r3, #5
 800461c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004620:	0150      	lsls	r0, r2, #5
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4621      	mov	r1, r4
 8004628:	1a51      	subs	r1, r2, r1
 800462a:	6139      	str	r1, [r7, #16]
 800462c:	4629      	mov	r1, r5
 800462e:	eb63 0301 	sbc.w	r3, r3, r1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004640:	4659      	mov	r1, fp
 8004642:	018b      	lsls	r3, r1, #6
 8004644:	4651      	mov	r1, sl
 8004646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800464a:	4651      	mov	r1, sl
 800464c:	018a      	lsls	r2, r1, #6
 800464e:	4651      	mov	r1, sl
 8004650:	ebb2 0801 	subs.w	r8, r2, r1
 8004654:	4659      	mov	r1, fp
 8004656:	eb63 0901 	sbc.w	r9, r3, r1
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800466a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800466e:	4690      	mov	r8, r2
 8004670:	4699      	mov	r9, r3
 8004672:	4623      	mov	r3, r4
 8004674:	eb18 0303 	adds.w	r3, r8, r3
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	462b      	mov	r3, r5
 800467c:	eb49 0303 	adc.w	r3, r9, r3
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800468e:	4629      	mov	r1, r5
 8004690:	024b      	lsls	r3, r1, #9
 8004692:	4621      	mov	r1, r4
 8004694:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004698:	4621      	mov	r1, r4
 800469a:	024a      	lsls	r2, r1, #9
 800469c:	4610      	mov	r0, r2
 800469e:	4619      	mov	r1, r3
 80046a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a2:	2200      	movs	r2, #0
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80046ac:	f7fb fde8 	bl	8000280 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4613      	mov	r3, r2
 80046b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b8:	e058      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ba:	4b38      	ldr	r3, [pc, #224]	@ (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	2200      	movs	r2, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	4611      	mov	r1, r2
 80046c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ca:	623b      	str	r3, [r7, #32]
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	f04f 0100 	mov.w	r1, #0
 80046e0:	0159      	lsls	r1, r3, #5
 80046e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e6:	0150      	lsls	r0, r2, #5
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4641      	mov	r1, r8
 80046ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004704:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004708:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800470c:	ebb2 040a 	subs.w	r4, r2, sl
 8004710:	eb63 050b 	sbc.w	r5, r3, fp
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	00eb      	lsls	r3, r5, #3
 800471e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004722:	00e2      	lsls	r2, r4, #3
 8004724:	4614      	mov	r4, r2
 8004726:	461d      	mov	r5, r3
 8004728:	4643      	mov	r3, r8
 800472a:	18e3      	adds	r3, r4, r3
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	464b      	mov	r3, r9
 8004730:	eb45 0303 	adc.w	r3, r5, r3
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004742:	4629      	mov	r1, r5
 8004744:	028b      	lsls	r3, r1, #10
 8004746:	4621      	mov	r1, r4
 8004748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800474c:	4621      	mov	r1, r4
 800474e:	028a      	lsls	r2, r1, #10
 8004750:	4610      	mov	r0, r2
 8004752:	4619      	mov	r1, r3
 8004754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004756:	2200      	movs	r2, #0
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004760:	f7fb fd8e 	bl	8000280 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4613      	mov	r3, r2
 800476a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800476c:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <HAL_RCC_GetSysClockFreq+0x200>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	3301      	adds	r3, #1
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800477c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800477e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004786:	e002      	b.n	800478e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800478a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800478c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800478e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004790:	4618      	mov	r0, r3
 8004792:	3750      	adds	r7, #80	@ 0x50
 8004794:	46bd      	mov	sp, r7
 8004796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	00f42400 	.word	0x00f42400
 80047a4:	007a1200 	.word	0x007a1200

080047a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ac:	4b03      	ldr	r3, [pc, #12]	@ (80047bc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ae:	681b      	ldr	r3, [r3, #0]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	2000000c 	.word	0x2000000c

080047c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047c4:	f7ff fff0 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047c8:	4602      	mov	r2, r0
 80047ca:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	0a9b      	lsrs	r3, r3, #10
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	4903      	ldr	r1, [pc, #12]	@ (80047e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d6:	5ccb      	ldrb	r3, [r1, r3]
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40023800 	.word	0x40023800
 80047e4:	08006910 	.word	0x08006910

080047e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047ec:	f7ff ffdc 	bl	80047a8 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0b5b      	lsrs	r3, r3, #13
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4903      	ldr	r1, [pc, #12]	@ (800480c <HAL_RCC_GetPCLK2Freq+0x24>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40023800 	.word	0x40023800
 800480c:	08006910 	.word	0x08006910

08004810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e041      	b.n	80048a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc ffd6 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f000 faf8 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
	...

080048b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d001      	beq.n	80048c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e044      	b.n	8004952 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004960 <HAL_TIM_Base_Start_IT+0xb0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d018      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x6c>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f2:	d013      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x6c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004964 <HAL_TIM_Base_Start_IT+0xb4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d00e      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x6c>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a19      	ldr	r2, [pc, #100]	@ (8004968 <HAL_TIM_Base_Start_IT+0xb8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d009      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x6c>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a17      	ldr	r2, [pc, #92]	@ (800496c <HAL_TIM_Base_Start_IT+0xbc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_TIM_Base_Start_IT+0x6c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a16      	ldr	r2, [pc, #88]	@ (8004970 <HAL_TIM_Base_Start_IT+0xc0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d111      	bne.n	8004940 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b06      	cmp	r3, #6
 800492c:	d010      	beq.n	8004950 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f042 0201 	orr.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493e:	e007      	b.n	8004950 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40014000 	.word	0x40014000

08004974 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004996:	4013      	ands	r3, r2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10f      	bne.n	80049bc <HAL_TIM_Base_Stop_IT+0x48>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6a1a      	ldr	r2, [r3, #32]
 80049a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_Base_Stop_IT+0x48>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e041      	b.n	8004a6a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f839 	bl	8004a72 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f000 fa16 	bl	8004e44 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0208 	bic.w	r2, r2, #8
 8004a26:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01b      	beq.n	8004aea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0202 	mvn.w	r2, #2
 8004aba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f999 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004ad6:	e005      	b.n	8004ae4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f98b 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f99c 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d020      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01b      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f06f 0204 	mvn.w	r2, #4
 8004b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f973 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004b22:	e005      	b.n	8004b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f965 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f976 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d020      	beq.n	8004b82 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d01b      	beq.n	8004b82 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f06f 0208 	mvn.w	r2, #8
 8004b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2204      	movs	r2, #4
 8004b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69db      	ldr	r3, [r3, #28]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f94d 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004b6e:	e005      	b.n	8004b7c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f93f 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f950 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d020      	beq.n	8004bce <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01b      	beq.n	8004bce <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0210 	mvn.w	r2, #16
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f927 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004bba:	e005      	b.n	8004bc8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f919 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f92a 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f06f 0201 	mvn.w	r2, #1
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7fc f9ed 	bl	8000fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 fab5 	bl	8005180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00c      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f8fb 	bl	8004e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00c      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0220 	mvn.w	r2, #32
 8004c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa87 	bl	800516c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c66:	b580      	push	{r7, lr}
 8004c68:	b084      	sub	sp, #16
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_ConfigClockSource+0x1c>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0b4      	b.n	8004dec <HAL_TIM_ConfigClockSource+0x186>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004ca0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ca8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cba:	d03e      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0xd4>
 8004cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cc0:	f200 8087 	bhi.w	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cc8:	f000 8086 	beq.w	8004dd8 <HAL_TIM_ConfigClockSource+0x172>
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd0:	d87f      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd2:	2b70      	cmp	r3, #112	@ 0x70
 8004cd4:	d01a      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xa6>
 8004cd6:	2b70      	cmp	r3, #112	@ 0x70
 8004cd8:	d87b      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cda:	2b60      	cmp	r3, #96	@ 0x60
 8004cdc:	d050      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0x11a>
 8004cde:	2b60      	cmp	r3, #96	@ 0x60
 8004ce0:	d877      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce2:	2b50      	cmp	r3, #80	@ 0x50
 8004ce4:	d03c      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0xfa>
 8004ce6:	2b50      	cmp	r3, #80	@ 0x50
 8004ce8:	d873      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	d058      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x13a>
 8004cee:	2b40      	cmp	r3, #64	@ 0x40
 8004cf0:	d86f      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf2:	2b30      	cmp	r3, #48	@ 0x30
 8004cf4:	d064      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8004cf6:	2b30      	cmp	r3, #48	@ 0x30
 8004cf8:	d86b      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d060      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d867      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d05c      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d05a      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0x15a>
 8004d0a:	e062      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	f000 f998 	bl	8005050 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]
      break;
 8004d38:	e04f      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d4a:	f000 f981 	bl	8005050 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d5c:	609a      	str	r2, [r3, #8]
      break;
 8004d5e:	e03c      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f000 f8f5 	bl	8004f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2150      	movs	r1, #80	@ 0x50
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f94e 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e02c      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f000 f914 	bl	8004fba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2160      	movs	r1, #96	@ 0x60
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f93e 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004d9e:	e01c      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dac:	461a      	mov	r2, r3
 8004dae:	f000 f8d5 	bl	8004f5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2140      	movs	r1, #64	@ 0x40
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f92e 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e00c      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4610      	mov	r0, r2
 8004dcc:	f000 f925 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e003      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd6:	e000      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3a      	ldr	r2, [pc, #232]	@ (8004f40 <TIM_Base_SetConfig+0xfc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00f      	beq.n	8004e7c <TIM_Base_SetConfig+0x38>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e62:	d00b      	beq.n	8004e7c <TIM_Base_SetConfig+0x38>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a37      	ldr	r2, [pc, #220]	@ (8004f44 <TIM_Base_SetConfig+0x100>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d007      	beq.n	8004e7c <TIM_Base_SetConfig+0x38>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a36      	ldr	r2, [pc, #216]	@ (8004f48 <TIM_Base_SetConfig+0x104>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d003      	beq.n	8004e7c <TIM_Base_SetConfig+0x38>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a35      	ldr	r2, [pc, #212]	@ (8004f4c <TIM_Base_SetConfig+0x108>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d108      	bne.n	8004e8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2b      	ldr	r2, [pc, #172]	@ (8004f40 <TIM_Base_SetConfig+0xfc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01b      	beq.n	8004ece <TIM_Base_SetConfig+0x8a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9c:	d017      	beq.n	8004ece <TIM_Base_SetConfig+0x8a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a28      	ldr	r2, [pc, #160]	@ (8004f44 <TIM_Base_SetConfig+0x100>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <TIM_Base_SetConfig+0x8a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a27      	ldr	r2, [pc, #156]	@ (8004f48 <TIM_Base_SetConfig+0x104>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_Base_SetConfig+0x8a>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	@ (8004f4c <TIM_Base_SetConfig+0x108>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_Base_SetConfig+0x8a>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a25      	ldr	r2, [pc, #148]	@ (8004f50 <TIM_Base_SetConfig+0x10c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_Base_SetConfig+0x8a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a24      	ldr	r2, [pc, #144]	@ (8004f54 <TIM_Base_SetConfig+0x110>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_Base_SetConfig+0x8a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a23      	ldr	r2, [pc, #140]	@ (8004f58 <TIM_Base_SetConfig+0x114>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d108      	bne.n	8004ee0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a0e      	ldr	r2, [pc, #56]	@ (8004f40 <TIM_Base_SetConfig+0xfc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d103      	bne.n	8004f14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d105      	bne.n	8004f32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f023 0201 	bic.w	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	611a      	str	r2, [r3, #16]
  }
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	40010000 	.word	0x40010000
 8004f44:	40000400 	.word	0x40000400
 8004f48:	40000800 	.word	0x40000800
 8004f4c:	40000c00 	.word	0x40000c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800

08004f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 030a 	bic.w	r3, r3, #10
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f023 0210 	bic.w	r2, r3, #16
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	031b      	lsls	r3, r3, #12
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ff6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	f043 0307 	orr.w	r3, r3, #7
 800503c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	bf00      	nop
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800506a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	431a      	orrs	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e050      	b.n	800514a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d018      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f4:	d013      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a18      	ldr	r2, [pc, #96]	@ (800515c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00e      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a16      	ldr	r2, [pc, #88]	@ (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d009      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a15      	ldr	r2, [pc, #84]	@ (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a13      	ldr	r2, [pc, #76]	@ (8005168 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d10c      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	4313      	orrs	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40014000 	.word	0x40014000

0800516c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e042      	b.n	800522c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fc fb3c 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	@ 0x24
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f82b 	bl	8005234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800520c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005238:	b0c0      	sub	sp, #256	@ 0x100
 800523a:	af00      	add	r7, sp, #0
 800523c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	68d9      	ldr	r1, [r3, #12]
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	ea40 0301 	orr.w	r3, r0, r1
 800525c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	431a      	orrs	r2, r3
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	431a      	orrs	r2, r3
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	4313      	orrs	r3, r2
 800527c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800528c:	f021 010c 	bic.w	r1, r1, #12
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800529a:	430b      	orrs	r3, r1
 800529c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ae:	6999      	ldr	r1, [r3, #24]
 80052b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	ea40 0301 	orr.w	r3, r0, r1
 80052ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005500 <UART_SetConfig+0x2cc>)
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d005      	beq.n	80052d4 <UART_SetConfig+0xa0>
 80052c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005504 <UART_SetConfig+0x2d0>)
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d104      	bne.n	80052de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d4:	f7ff fa88 	bl	80047e8 <HAL_RCC_GetPCLK2Freq>
 80052d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80052dc:	e003      	b.n	80052e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052de:	f7ff fa6f 	bl	80047c0 <HAL_RCC_GetPCLK1Freq>
 80052e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052f0:	f040 810c 	bne.w	800550c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f8:	2200      	movs	r2, #0
 80052fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80052fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005306:	4622      	mov	r2, r4
 8005308:	462b      	mov	r3, r5
 800530a:	1891      	adds	r1, r2, r2
 800530c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800530e:	415b      	adcs	r3, r3
 8005310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005316:	4621      	mov	r1, r4
 8005318:	eb12 0801 	adds.w	r8, r2, r1
 800531c:	4629      	mov	r1, r5
 800531e:	eb43 0901 	adc.w	r9, r3, r1
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800532e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005336:	4690      	mov	r8, r2
 8005338:	4699      	mov	r9, r3
 800533a:	4623      	mov	r3, r4
 800533c:	eb18 0303 	adds.w	r3, r8, r3
 8005340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005344:	462b      	mov	r3, r5
 8005346:	eb49 0303 	adc.w	r3, r9, r3
 800534a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800535a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800535e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005362:	460b      	mov	r3, r1
 8005364:	18db      	adds	r3, r3, r3
 8005366:	653b      	str	r3, [r7, #80]	@ 0x50
 8005368:	4613      	mov	r3, r2
 800536a:	eb42 0303 	adc.w	r3, r2, r3
 800536e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005378:	f7fa ff82 	bl	8000280 <__aeabi_uldivmod>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4b61      	ldr	r3, [pc, #388]	@ (8005508 <UART_SetConfig+0x2d4>)
 8005382:	fba3 2302 	umull	r2, r3, r3, r2
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	011c      	lsls	r4, r3, #4
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538e:	2200      	movs	r2, #0
 8005390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005394:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800539c:	4642      	mov	r2, r8
 800539e:	464b      	mov	r3, r9
 80053a0:	1891      	adds	r1, r2, r2
 80053a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80053a4:	415b      	adcs	r3, r3
 80053a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80053ac:	4641      	mov	r1, r8
 80053ae:	eb12 0a01 	adds.w	sl, r2, r1
 80053b2:	4649      	mov	r1, r9
 80053b4:	eb43 0b01 	adc.w	fp, r3, r1
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053cc:	4692      	mov	sl, r2
 80053ce:	469b      	mov	fp, r3
 80053d0:	4643      	mov	r3, r8
 80053d2:	eb1a 0303 	adds.w	r3, sl, r3
 80053d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053da:	464b      	mov	r3, r9
 80053dc:	eb4b 0303 	adc.w	r3, fp, r3
 80053e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80053f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80053f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80053f8:	460b      	mov	r3, r1
 80053fa:	18db      	adds	r3, r3, r3
 80053fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80053fe:	4613      	mov	r3, r2
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	647b      	str	r3, [r7, #68]	@ 0x44
 8005406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800540a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800540e:	f7fa ff37 	bl	8000280 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4611      	mov	r1, r2
 8005418:	4b3b      	ldr	r3, [pc, #236]	@ (8005508 <UART_SetConfig+0x2d4>)
 800541a:	fba3 2301 	umull	r2, r3, r3, r1
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2264      	movs	r2, #100	@ 0x64
 8005422:	fb02 f303 	mul.w	r3, r2, r3
 8005426:	1acb      	subs	r3, r1, r3
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800542e:	4b36      	ldr	r3, [pc, #216]	@ (8005508 <UART_SetConfig+0x2d4>)
 8005430:	fba3 2302 	umull	r2, r3, r3, r2
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800543c:	441c      	add	r4, r3
 800543e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005442:	2200      	movs	r2, #0
 8005444:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005448:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800544c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005450:	4642      	mov	r2, r8
 8005452:	464b      	mov	r3, r9
 8005454:	1891      	adds	r1, r2, r2
 8005456:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005458:	415b      	adcs	r3, r3
 800545a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800545c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005460:	4641      	mov	r1, r8
 8005462:	1851      	adds	r1, r2, r1
 8005464:	6339      	str	r1, [r7, #48]	@ 0x30
 8005466:	4649      	mov	r1, r9
 8005468:	414b      	adcs	r3, r1
 800546a:	637b      	str	r3, [r7, #52]	@ 0x34
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005478:	4659      	mov	r1, fp
 800547a:	00cb      	lsls	r3, r1, #3
 800547c:	4651      	mov	r1, sl
 800547e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005482:	4651      	mov	r1, sl
 8005484:	00ca      	lsls	r2, r1, #3
 8005486:	4610      	mov	r0, r2
 8005488:	4619      	mov	r1, r3
 800548a:	4603      	mov	r3, r0
 800548c:	4642      	mov	r2, r8
 800548e:	189b      	adds	r3, r3, r2
 8005490:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005494:	464b      	mov	r3, r9
 8005496:	460a      	mov	r2, r1
 8005498:	eb42 0303 	adc.w	r3, r2, r3
 800549c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80054b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054b4:	460b      	mov	r3, r1
 80054b6:	18db      	adds	r3, r3, r3
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ba:	4613      	mov	r3, r2
 80054bc:	eb42 0303 	adc.w	r3, r2, r3
 80054c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80054ca:	f7fa fed9 	bl	8000280 <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005508 <UART_SetConfig+0x2d4>)
 80054d4:	fba3 1302 	umull	r1, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	2164      	movs	r1, #100	@ 0x64
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	3332      	adds	r3, #50	@ 0x32
 80054e6:	4a08      	ldr	r2, [pc, #32]	@ (8005508 <UART_SetConfig+0x2d4>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	f003 0207 	and.w	r2, r3, #7
 80054f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4422      	add	r2, r4
 80054fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054fc:	e106      	b.n	800570c <UART_SetConfig+0x4d8>
 80054fe:	bf00      	nop
 8005500:	40011000 	.word	0x40011000
 8005504:	40011400 	.word	0x40011400
 8005508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800550c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005510:	2200      	movs	r2, #0
 8005512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005516:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800551a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800551e:	4642      	mov	r2, r8
 8005520:	464b      	mov	r3, r9
 8005522:	1891      	adds	r1, r2, r2
 8005524:	6239      	str	r1, [r7, #32]
 8005526:	415b      	adcs	r3, r3
 8005528:	627b      	str	r3, [r7, #36]	@ 0x24
 800552a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800552e:	4641      	mov	r1, r8
 8005530:	1854      	adds	r4, r2, r1
 8005532:	4649      	mov	r1, r9
 8005534:	eb43 0501 	adc.w	r5, r3, r1
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	00eb      	lsls	r3, r5, #3
 8005542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005546:	00e2      	lsls	r2, r4, #3
 8005548:	4614      	mov	r4, r2
 800554a:	461d      	mov	r5, r3
 800554c:	4643      	mov	r3, r8
 800554e:	18e3      	adds	r3, r4, r3
 8005550:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005554:	464b      	mov	r3, r9
 8005556:	eb45 0303 	adc.w	r3, r5, r3
 800555a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800556a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800557a:	4629      	mov	r1, r5
 800557c:	008b      	lsls	r3, r1, #2
 800557e:	4621      	mov	r1, r4
 8005580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005584:	4621      	mov	r1, r4
 8005586:	008a      	lsls	r2, r1, #2
 8005588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800558c:	f7fa fe78 	bl	8000280 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4b60      	ldr	r3, [pc, #384]	@ (8005718 <UART_SetConfig+0x4e4>)
 8005596:	fba3 2302 	umull	r2, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	011c      	lsls	r4, r3, #4
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80055ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80055b0:	4642      	mov	r2, r8
 80055b2:	464b      	mov	r3, r9
 80055b4:	1891      	adds	r1, r2, r2
 80055b6:	61b9      	str	r1, [r7, #24]
 80055b8:	415b      	adcs	r3, r3
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c0:	4641      	mov	r1, r8
 80055c2:	1851      	adds	r1, r2, r1
 80055c4:	6139      	str	r1, [r7, #16]
 80055c6:	4649      	mov	r1, r9
 80055c8:	414b      	adcs	r3, r1
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055d8:	4659      	mov	r1, fp
 80055da:	00cb      	lsls	r3, r1, #3
 80055dc:	4651      	mov	r1, sl
 80055de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e2:	4651      	mov	r1, sl
 80055e4:	00ca      	lsls	r2, r1, #3
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	4642      	mov	r2, r8
 80055ee:	189b      	adds	r3, r3, r2
 80055f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80055f4:	464b      	mov	r3, r9
 80055f6:	460a      	mov	r2, r1
 80055f8:	eb42 0303 	adc.w	r3, r2, r3
 80055fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	67bb      	str	r3, [r7, #120]	@ 0x78
 800560a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005618:	4649      	mov	r1, r9
 800561a:	008b      	lsls	r3, r1, #2
 800561c:	4641      	mov	r1, r8
 800561e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005622:	4641      	mov	r1, r8
 8005624:	008a      	lsls	r2, r1, #2
 8005626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800562a:	f7fa fe29 	bl	8000280 <__aeabi_uldivmod>
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	4611      	mov	r1, r2
 8005634:	4b38      	ldr	r3, [pc, #224]	@ (8005718 <UART_SetConfig+0x4e4>)
 8005636:	fba3 2301 	umull	r2, r3, r3, r1
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	2264      	movs	r2, #100	@ 0x64
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	1acb      	subs	r3, r1, r3
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	3332      	adds	r3, #50	@ 0x32
 8005648:	4a33      	ldr	r2, [pc, #204]	@ (8005718 <UART_SetConfig+0x4e4>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005654:	441c      	add	r4, r3
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565a:	2200      	movs	r2, #0
 800565c:	673b      	str	r3, [r7, #112]	@ 0x70
 800565e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	1891      	adds	r1, r2, r2
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	415b      	adcs	r3, r3
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005674:	4641      	mov	r1, r8
 8005676:	1851      	adds	r1, r2, r1
 8005678:	6039      	str	r1, [r7, #0]
 800567a:	4649      	mov	r1, r9
 800567c:	414b      	adcs	r3, r1
 800567e:	607b      	str	r3, [r7, #4]
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800568c:	4659      	mov	r1, fp
 800568e:	00cb      	lsls	r3, r1, #3
 8005690:	4651      	mov	r1, sl
 8005692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005696:	4651      	mov	r1, sl
 8005698:	00ca      	lsls	r2, r1, #3
 800569a:	4610      	mov	r0, r2
 800569c:	4619      	mov	r1, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	4642      	mov	r2, r8
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056a6:	464b      	mov	r3, r9
 80056a8:	460a      	mov	r2, r1
 80056aa:	eb42 0303 	adc.w	r3, r2, r3
 80056ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80056ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80056c8:	4649      	mov	r1, r9
 80056ca:	008b      	lsls	r3, r1, #2
 80056cc:	4641      	mov	r1, r8
 80056ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d2:	4641      	mov	r1, r8
 80056d4:	008a      	lsls	r2, r1, #2
 80056d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80056da:	f7fa fdd1 	bl	8000280 <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005718 <UART_SetConfig+0x4e4>)
 80056e4:	fba3 1302 	umull	r1, r3, r3, r2
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	2164      	movs	r1, #100	@ 0x64
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	3332      	adds	r3, #50	@ 0x32
 80056f6:	4a08      	ldr	r2, [pc, #32]	@ (8005718 <UART_SetConfig+0x4e4>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4422      	add	r2, r4
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005712:	46bd      	mov	sp, r7
 8005714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005718:	51eb851f 	.word	0x51eb851f

0800571c <sniprintf>:
 800571c:	b40c      	push	{r2, r3}
 800571e:	b530      	push	{r4, r5, lr}
 8005720:	4b17      	ldr	r3, [pc, #92]	@ (8005780 <sniprintf+0x64>)
 8005722:	1e0c      	subs	r4, r1, #0
 8005724:	681d      	ldr	r5, [r3, #0]
 8005726:	b09d      	sub	sp, #116	@ 0x74
 8005728:	da08      	bge.n	800573c <sniprintf+0x20>
 800572a:	238b      	movs	r3, #139	@ 0x8b
 800572c:	602b      	str	r3, [r5, #0]
 800572e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005732:	b01d      	add	sp, #116	@ 0x74
 8005734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005738:	b002      	add	sp, #8
 800573a:	4770      	bx	lr
 800573c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005740:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005744:	bf14      	ite	ne
 8005746:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800574a:	4623      	moveq	r3, r4
 800574c:	9304      	str	r3, [sp, #16]
 800574e:	9307      	str	r3, [sp, #28]
 8005750:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005754:	9002      	str	r0, [sp, #8]
 8005756:	9006      	str	r0, [sp, #24]
 8005758:	f8ad 3016 	strh.w	r3, [sp, #22]
 800575c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800575e:	ab21      	add	r3, sp, #132	@ 0x84
 8005760:	a902      	add	r1, sp, #8
 8005762:	4628      	mov	r0, r5
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	f000 f9bd 	bl	8005ae4 <_svfiprintf_r>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	bfbc      	itt	lt
 800576e:	238b      	movlt	r3, #139	@ 0x8b
 8005770:	602b      	strlt	r3, [r5, #0]
 8005772:	2c00      	cmp	r4, #0
 8005774:	d0dd      	beq.n	8005732 <sniprintf+0x16>
 8005776:	9b02      	ldr	r3, [sp, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	e7d9      	b.n	8005732 <sniprintf+0x16>
 800577e:	bf00      	nop
 8005780:	20000018 	.word	0x20000018

08005784 <siprintf>:
 8005784:	b40e      	push	{r1, r2, r3}
 8005786:	b500      	push	{lr}
 8005788:	b09c      	sub	sp, #112	@ 0x70
 800578a:	ab1d      	add	r3, sp, #116	@ 0x74
 800578c:	9002      	str	r0, [sp, #8]
 800578e:	9006      	str	r0, [sp, #24]
 8005790:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005794:	4809      	ldr	r0, [pc, #36]	@ (80057bc <siprintf+0x38>)
 8005796:	9107      	str	r1, [sp, #28]
 8005798:	9104      	str	r1, [sp, #16]
 800579a:	4909      	ldr	r1, [pc, #36]	@ (80057c0 <siprintf+0x3c>)
 800579c:	f853 2b04 	ldr.w	r2, [r3], #4
 80057a0:	9105      	str	r1, [sp, #20]
 80057a2:	6800      	ldr	r0, [r0, #0]
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	a902      	add	r1, sp, #8
 80057a8:	f000 f99c 	bl	8005ae4 <_svfiprintf_r>
 80057ac:	9b02      	ldr	r3, [sp, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	b01c      	add	sp, #112	@ 0x70
 80057b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b8:	b003      	add	sp, #12
 80057ba:	4770      	bx	lr
 80057bc:	20000018 	.word	0x20000018
 80057c0:	ffff0208 	.word	0xffff0208

080057c4 <memset>:
 80057c4:	4402      	add	r2, r0
 80057c6:	4603      	mov	r3, r0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d100      	bne.n	80057ce <memset+0xa>
 80057cc:	4770      	bx	lr
 80057ce:	f803 1b01 	strb.w	r1, [r3], #1
 80057d2:	e7f9      	b.n	80057c8 <memset+0x4>

080057d4 <__errno>:
 80057d4:	4b01      	ldr	r3, [pc, #4]	@ (80057dc <__errno+0x8>)
 80057d6:	6818      	ldr	r0, [r3, #0]
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000018 	.word	0x20000018

080057e0 <__libc_init_array>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4d0d      	ldr	r5, [pc, #52]	@ (8005818 <__libc_init_array+0x38>)
 80057e4:	4c0d      	ldr	r4, [pc, #52]	@ (800581c <__libc_init_array+0x3c>)
 80057e6:	1b64      	subs	r4, r4, r5
 80057e8:	10a4      	asrs	r4, r4, #2
 80057ea:	2600      	movs	r6, #0
 80057ec:	42a6      	cmp	r6, r4
 80057ee:	d109      	bne.n	8005804 <__libc_init_array+0x24>
 80057f0:	4d0b      	ldr	r5, [pc, #44]	@ (8005820 <__libc_init_array+0x40>)
 80057f2:	4c0c      	ldr	r4, [pc, #48]	@ (8005824 <__libc_init_array+0x44>)
 80057f4:	f000 fc6e 	bl	80060d4 <_init>
 80057f8:	1b64      	subs	r4, r4, r5
 80057fa:	10a4      	asrs	r4, r4, #2
 80057fc:	2600      	movs	r6, #0
 80057fe:	42a6      	cmp	r6, r4
 8005800:	d105      	bne.n	800580e <__libc_init_array+0x2e>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	f855 3b04 	ldr.w	r3, [r5], #4
 8005808:	4798      	blx	r3
 800580a:	3601      	adds	r6, #1
 800580c:	e7ee      	b.n	80057ec <__libc_init_array+0xc>
 800580e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005812:	4798      	blx	r3
 8005814:	3601      	adds	r6, #1
 8005816:	e7f2      	b.n	80057fe <__libc_init_array+0x1e>
 8005818:	0800695c 	.word	0x0800695c
 800581c:	0800695c 	.word	0x0800695c
 8005820:	0800695c 	.word	0x0800695c
 8005824:	08006960 	.word	0x08006960

08005828 <__retarget_lock_acquire_recursive>:
 8005828:	4770      	bx	lr

0800582a <__retarget_lock_release_recursive>:
 800582a:	4770      	bx	lr

0800582c <strcpy>:
 800582c:	4603      	mov	r3, r0
 800582e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005832:	f803 2b01 	strb.w	r2, [r3], #1
 8005836:	2a00      	cmp	r2, #0
 8005838:	d1f9      	bne.n	800582e <strcpy+0x2>
 800583a:	4770      	bx	lr

0800583c <_free_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4605      	mov	r5, r0
 8005840:	2900      	cmp	r1, #0
 8005842:	d041      	beq.n	80058c8 <_free_r+0x8c>
 8005844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005848:	1f0c      	subs	r4, r1, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	bfb8      	it	lt
 800584e:	18e4      	addlt	r4, r4, r3
 8005850:	f000 f8e0 	bl	8005a14 <__malloc_lock>
 8005854:	4a1d      	ldr	r2, [pc, #116]	@ (80058cc <_free_r+0x90>)
 8005856:	6813      	ldr	r3, [r2, #0]
 8005858:	b933      	cbnz	r3, 8005868 <_free_r+0x2c>
 800585a:	6063      	str	r3, [r4, #4]
 800585c:	6014      	str	r4, [r2, #0]
 800585e:	4628      	mov	r0, r5
 8005860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005864:	f000 b8dc 	b.w	8005a20 <__malloc_unlock>
 8005868:	42a3      	cmp	r3, r4
 800586a:	d908      	bls.n	800587e <_free_r+0x42>
 800586c:	6820      	ldr	r0, [r4, #0]
 800586e:	1821      	adds	r1, r4, r0
 8005870:	428b      	cmp	r3, r1
 8005872:	bf01      	itttt	eq
 8005874:	6819      	ldreq	r1, [r3, #0]
 8005876:	685b      	ldreq	r3, [r3, #4]
 8005878:	1809      	addeq	r1, r1, r0
 800587a:	6021      	streq	r1, [r4, #0]
 800587c:	e7ed      	b.n	800585a <_free_r+0x1e>
 800587e:	461a      	mov	r2, r3
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	b10b      	cbz	r3, 8005888 <_free_r+0x4c>
 8005884:	42a3      	cmp	r3, r4
 8005886:	d9fa      	bls.n	800587e <_free_r+0x42>
 8005888:	6811      	ldr	r1, [r2, #0]
 800588a:	1850      	adds	r0, r2, r1
 800588c:	42a0      	cmp	r0, r4
 800588e:	d10b      	bne.n	80058a8 <_free_r+0x6c>
 8005890:	6820      	ldr	r0, [r4, #0]
 8005892:	4401      	add	r1, r0
 8005894:	1850      	adds	r0, r2, r1
 8005896:	4283      	cmp	r3, r0
 8005898:	6011      	str	r1, [r2, #0]
 800589a:	d1e0      	bne.n	800585e <_free_r+0x22>
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	6053      	str	r3, [r2, #4]
 80058a2:	4408      	add	r0, r1
 80058a4:	6010      	str	r0, [r2, #0]
 80058a6:	e7da      	b.n	800585e <_free_r+0x22>
 80058a8:	d902      	bls.n	80058b0 <_free_r+0x74>
 80058aa:	230c      	movs	r3, #12
 80058ac:	602b      	str	r3, [r5, #0]
 80058ae:	e7d6      	b.n	800585e <_free_r+0x22>
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	1821      	adds	r1, r4, r0
 80058b4:	428b      	cmp	r3, r1
 80058b6:	bf04      	itt	eq
 80058b8:	6819      	ldreq	r1, [r3, #0]
 80058ba:	685b      	ldreq	r3, [r3, #4]
 80058bc:	6063      	str	r3, [r4, #4]
 80058be:	bf04      	itt	eq
 80058c0:	1809      	addeq	r1, r1, r0
 80058c2:	6021      	streq	r1, [r4, #0]
 80058c4:	6054      	str	r4, [r2, #4]
 80058c6:	e7ca      	b.n	800585e <_free_r+0x22>
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
 80058ca:	bf00      	nop
 80058cc:	20000fb0 	.word	0x20000fb0

080058d0 <sbrk_aligned>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005910 <sbrk_aligned+0x40>)
 80058d4:	460c      	mov	r4, r1
 80058d6:	6831      	ldr	r1, [r6, #0]
 80058d8:	4605      	mov	r5, r0
 80058da:	b911      	cbnz	r1, 80058e2 <sbrk_aligned+0x12>
 80058dc:	f000 fba6 	bl	800602c <_sbrk_r>
 80058e0:	6030      	str	r0, [r6, #0]
 80058e2:	4621      	mov	r1, r4
 80058e4:	4628      	mov	r0, r5
 80058e6:	f000 fba1 	bl	800602c <_sbrk_r>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	d103      	bne.n	80058f6 <sbrk_aligned+0x26>
 80058ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80058f2:	4620      	mov	r0, r4
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
 80058f6:	1cc4      	adds	r4, r0, #3
 80058f8:	f024 0403 	bic.w	r4, r4, #3
 80058fc:	42a0      	cmp	r0, r4
 80058fe:	d0f8      	beq.n	80058f2 <sbrk_aligned+0x22>
 8005900:	1a21      	subs	r1, r4, r0
 8005902:	4628      	mov	r0, r5
 8005904:	f000 fb92 	bl	800602c <_sbrk_r>
 8005908:	3001      	adds	r0, #1
 800590a:	d1f2      	bne.n	80058f2 <sbrk_aligned+0x22>
 800590c:	e7ef      	b.n	80058ee <sbrk_aligned+0x1e>
 800590e:	bf00      	nop
 8005910:	20000fac 	.word	0x20000fac

08005914 <_malloc_r>:
 8005914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005918:	1ccd      	adds	r5, r1, #3
 800591a:	f025 0503 	bic.w	r5, r5, #3
 800591e:	3508      	adds	r5, #8
 8005920:	2d0c      	cmp	r5, #12
 8005922:	bf38      	it	cc
 8005924:	250c      	movcc	r5, #12
 8005926:	2d00      	cmp	r5, #0
 8005928:	4606      	mov	r6, r0
 800592a:	db01      	blt.n	8005930 <_malloc_r+0x1c>
 800592c:	42a9      	cmp	r1, r5
 800592e:	d904      	bls.n	800593a <_malloc_r+0x26>
 8005930:	230c      	movs	r3, #12
 8005932:	6033      	str	r3, [r6, #0]
 8005934:	2000      	movs	r0, #0
 8005936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a10 <_malloc_r+0xfc>
 800593e:	f000 f869 	bl	8005a14 <__malloc_lock>
 8005942:	f8d8 3000 	ldr.w	r3, [r8]
 8005946:	461c      	mov	r4, r3
 8005948:	bb44      	cbnz	r4, 800599c <_malloc_r+0x88>
 800594a:	4629      	mov	r1, r5
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff ffbf 	bl	80058d0 <sbrk_aligned>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	4604      	mov	r4, r0
 8005956:	d158      	bne.n	8005a0a <_malloc_r+0xf6>
 8005958:	f8d8 4000 	ldr.w	r4, [r8]
 800595c:	4627      	mov	r7, r4
 800595e:	2f00      	cmp	r7, #0
 8005960:	d143      	bne.n	80059ea <_malloc_r+0xd6>
 8005962:	2c00      	cmp	r4, #0
 8005964:	d04b      	beq.n	80059fe <_malloc_r+0xea>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	4639      	mov	r1, r7
 800596a:	4630      	mov	r0, r6
 800596c:	eb04 0903 	add.w	r9, r4, r3
 8005970:	f000 fb5c 	bl	800602c <_sbrk_r>
 8005974:	4581      	cmp	r9, r0
 8005976:	d142      	bne.n	80059fe <_malloc_r+0xea>
 8005978:	6821      	ldr	r1, [r4, #0]
 800597a:	1a6d      	subs	r5, r5, r1
 800597c:	4629      	mov	r1, r5
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff ffa6 	bl	80058d0 <sbrk_aligned>
 8005984:	3001      	adds	r0, #1
 8005986:	d03a      	beq.n	80059fe <_malloc_r+0xea>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	442b      	add	r3, r5
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	f8d8 3000 	ldr.w	r3, [r8]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	bb62      	cbnz	r2, 80059f0 <_malloc_r+0xdc>
 8005996:	f8c8 7000 	str.w	r7, [r8]
 800599a:	e00f      	b.n	80059bc <_malloc_r+0xa8>
 800599c:	6822      	ldr	r2, [r4, #0]
 800599e:	1b52      	subs	r2, r2, r5
 80059a0:	d420      	bmi.n	80059e4 <_malloc_r+0xd0>
 80059a2:	2a0b      	cmp	r2, #11
 80059a4:	d917      	bls.n	80059d6 <_malloc_r+0xc2>
 80059a6:	1961      	adds	r1, r4, r5
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	6025      	str	r5, [r4, #0]
 80059ac:	bf18      	it	ne
 80059ae:	6059      	strne	r1, [r3, #4]
 80059b0:	6863      	ldr	r3, [r4, #4]
 80059b2:	bf08      	it	eq
 80059b4:	f8c8 1000 	streq.w	r1, [r8]
 80059b8:	5162      	str	r2, [r4, r5]
 80059ba:	604b      	str	r3, [r1, #4]
 80059bc:	4630      	mov	r0, r6
 80059be:	f000 f82f 	bl	8005a20 <__malloc_unlock>
 80059c2:	f104 000b 	add.w	r0, r4, #11
 80059c6:	1d23      	adds	r3, r4, #4
 80059c8:	f020 0007 	bic.w	r0, r0, #7
 80059cc:	1ac2      	subs	r2, r0, r3
 80059ce:	bf1c      	itt	ne
 80059d0:	1a1b      	subne	r3, r3, r0
 80059d2:	50a3      	strne	r3, [r4, r2]
 80059d4:	e7af      	b.n	8005936 <_malloc_r+0x22>
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	42a3      	cmp	r3, r4
 80059da:	bf0c      	ite	eq
 80059dc:	f8c8 2000 	streq.w	r2, [r8]
 80059e0:	605a      	strne	r2, [r3, #4]
 80059e2:	e7eb      	b.n	80059bc <_malloc_r+0xa8>
 80059e4:	4623      	mov	r3, r4
 80059e6:	6864      	ldr	r4, [r4, #4]
 80059e8:	e7ae      	b.n	8005948 <_malloc_r+0x34>
 80059ea:	463c      	mov	r4, r7
 80059ec:	687f      	ldr	r7, [r7, #4]
 80059ee:	e7b6      	b.n	800595e <_malloc_r+0x4a>
 80059f0:	461a      	mov	r2, r3
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d1fb      	bne.n	80059f0 <_malloc_r+0xdc>
 80059f8:	2300      	movs	r3, #0
 80059fa:	6053      	str	r3, [r2, #4]
 80059fc:	e7de      	b.n	80059bc <_malloc_r+0xa8>
 80059fe:	230c      	movs	r3, #12
 8005a00:	6033      	str	r3, [r6, #0]
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f80c 	bl	8005a20 <__malloc_unlock>
 8005a08:	e794      	b.n	8005934 <_malloc_r+0x20>
 8005a0a:	6005      	str	r5, [r0, #0]
 8005a0c:	e7d6      	b.n	80059bc <_malloc_r+0xa8>
 8005a0e:	bf00      	nop
 8005a10:	20000fb0 	.word	0x20000fb0

08005a14 <__malloc_lock>:
 8005a14:	4801      	ldr	r0, [pc, #4]	@ (8005a1c <__malloc_lock+0x8>)
 8005a16:	f7ff bf07 	b.w	8005828 <__retarget_lock_acquire_recursive>
 8005a1a:	bf00      	nop
 8005a1c:	20000fa8 	.word	0x20000fa8

08005a20 <__malloc_unlock>:
 8005a20:	4801      	ldr	r0, [pc, #4]	@ (8005a28 <__malloc_unlock+0x8>)
 8005a22:	f7ff bf02 	b.w	800582a <__retarget_lock_release_recursive>
 8005a26:	bf00      	nop
 8005a28:	20000fa8 	.word	0x20000fa8

08005a2c <__ssputs_r>:
 8005a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a30:	688e      	ldr	r6, [r1, #8]
 8005a32:	461f      	mov	r7, r3
 8005a34:	42be      	cmp	r6, r7
 8005a36:	680b      	ldr	r3, [r1, #0]
 8005a38:	4682      	mov	sl, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	4690      	mov	r8, r2
 8005a3e:	d82d      	bhi.n	8005a9c <__ssputs_r+0x70>
 8005a40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a48:	d026      	beq.n	8005a98 <__ssputs_r+0x6c>
 8005a4a:	6965      	ldr	r5, [r4, #20]
 8005a4c:	6909      	ldr	r1, [r1, #16]
 8005a4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a52:	eba3 0901 	sub.w	r9, r3, r1
 8005a56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a5a:	1c7b      	adds	r3, r7, #1
 8005a5c:	444b      	add	r3, r9
 8005a5e:	106d      	asrs	r5, r5, #1
 8005a60:	429d      	cmp	r5, r3
 8005a62:	bf38      	it	cc
 8005a64:	461d      	movcc	r5, r3
 8005a66:	0553      	lsls	r3, r2, #21
 8005a68:	d527      	bpl.n	8005aba <__ssputs_r+0x8e>
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	f7ff ff52 	bl	8005914 <_malloc_r>
 8005a70:	4606      	mov	r6, r0
 8005a72:	b360      	cbz	r0, 8005ace <__ssputs_r+0xa2>
 8005a74:	6921      	ldr	r1, [r4, #16]
 8005a76:	464a      	mov	r2, r9
 8005a78:	f000 fae8 	bl	800604c <memcpy>
 8005a7c:	89a3      	ldrh	r3, [r4, #12]
 8005a7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	6126      	str	r6, [r4, #16]
 8005a8a:	6165      	str	r5, [r4, #20]
 8005a8c:	444e      	add	r6, r9
 8005a8e:	eba5 0509 	sub.w	r5, r5, r9
 8005a92:	6026      	str	r6, [r4, #0]
 8005a94:	60a5      	str	r5, [r4, #8]
 8005a96:	463e      	mov	r6, r7
 8005a98:	42be      	cmp	r6, r7
 8005a9a:	d900      	bls.n	8005a9e <__ssputs_r+0x72>
 8005a9c:	463e      	mov	r6, r7
 8005a9e:	6820      	ldr	r0, [r4, #0]
 8005aa0:	4632      	mov	r2, r6
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	f000 faa8 	bl	8005ff8 <memmove>
 8005aa8:	68a3      	ldr	r3, [r4, #8]
 8005aaa:	1b9b      	subs	r3, r3, r6
 8005aac:	60a3      	str	r3, [r4, #8]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	4433      	add	r3, r6
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	462a      	mov	r2, r5
 8005abc:	f000 fad4 	bl	8006068 <_realloc_r>
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d1e0      	bne.n	8005a88 <__ssputs_r+0x5c>
 8005ac6:	6921      	ldr	r1, [r4, #16]
 8005ac8:	4650      	mov	r0, sl
 8005aca:	f7ff feb7 	bl	800583c <_free_r>
 8005ace:	230c      	movs	r3, #12
 8005ad0:	f8ca 3000 	str.w	r3, [sl]
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ae0:	e7e9      	b.n	8005ab6 <__ssputs_r+0x8a>
	...

08005ae4 <_svfiprintf_r>:
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	4698      	mov	r8, r3
 8005aea:	898b      	ldrh	r3, [r1, #12]
 8005aec:	061b      	lsls	r3, r3, #24
 8005aee:	b09d      	sub	sp, #116	@ 0x74
 8005af0:	4607      	mov	r7, r0
 8005af2:	460d      	mov	r5, r1
 8005af4:	4614      	mov	r4, r2
 8005af6:	d510      	bpl.n	8005b1a <_svfiprintf_r+0x36>
 8005af8:	690b      	ldr	r3, [r1, #16]
 8005afa:	b973      	cbnz	r3, 8005b1a <_svfiprintf_r+0x36>
 8005afc:	2140      	movs	r1, #64	@ 0x40
 8005afe:	f7ff ff09 	bl	8005914 <_malloc_r>
 8005b02:	6028      	str	r0, [r5, #0]
 8005b04:	6128      	str	r0, [r5, #16]
 8005b06:	b930      	cbnz	r0, 8005b16 <_svfiprintf_r+0x32>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	603b      	str	r3, [r7, #0]
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b10:	b01d      	add	sp, #116	@ 0x74
 8005b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b16:	2340      	movs	r3, #64	@ 0x40
 8005b18:	616b      	str	r3, [r5, #20]
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b1e:	2320      	movs	r3, #32
 8005b20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b28:	2330      	movs	r3, #48	@ 0x30
 8005b2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005cc8 <_svfiprintf_r+0x1e4>
 8005b2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b32:	f04f 0901 	mov.w	r9, #1
 8005b36:	4623      	mov	r3, r4
 8005b38:	469a      	mov	sl, r3
 8005b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b3e:	b10a      	cbz	r2, 8005b44 <_svfiprintf_r+0x60>
 8005b40:	2a25      	cmp	r2, #37	@ 0x25
 8005b42:	d1f9      	bne.n	8005b38 <_svfiprintf_r+0x54>
 8005b44:	ebba 0b04 	subs.w	fp, sl, r4
 8005b48:	d00b      	beq.n	8005b62 <_svfiprintf_r+0x7e>
 8005b4a:	465b      	mov	r3, fp
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	4638      	mov	r0, r7
 8005b52:	f7ff ff6b 	bl	8005a2c <__ssputs_r>
 8005b56:	3001      	adds	r0, #1
 8005b58:	f000 80a7 	beq.w	8005caa <_svfiprintf_r+0x1c6>
 8005b5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b5e:	445a      	add	r2, fp
 8005b60:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b62:	f89a 3000 	ldrb.w	r3, [sl]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f000 809f 	beq.w	8005caa <_svfiprintf_r+0x1c6>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b76:	f10a 0a01 	add.w	sl, sl, #1
 8005b7a:	9304      	str	r3, [sp, #16]
 8005b7c:	9307      	str	r3, [sp, #28]
 8005b7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b82:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b84:	4654      	mov	r4, sl
 8005b86:	2205      	movs	r2, #5
 8005b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b8c:	484e      	ldr	r0, [pc, #312]	@ (8005cc8 <_svfiprintf_r+0x1e4>)
 8005b8e:	f7fa fb27 	bl	80001e0 <memchr>
 8005b92:	9a04      	ldr	r2, [sp, #16]
 8005b94:	b9d8      	cbnz	r0, 8005bce <_svfiprintf_r+0xea>
 8005b96:	06d0      	lsls	r0, r2, #27
 8005b98:	bf44      	itt	mi
 8005b9a:	2320      	movmi	r3, #32
 8005b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ba0:	0711      	lsls	r1, r2, #28
 8005ba2:	bf44      	itt	mi
 8005ba4:	232b      	movmi	r3, #43	@ 0x2b
 8005ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005baa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bb0:	d015      	beq.n	8005bde <_svfiprintf_r+0xfa>
 8005bb2:	9a07      	ldr	r2, [sp, #28]
 8005bb4:	4654      	mov	r4, sl
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f04f 0c0a 	mov.w	ip, #10
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bc2:	3b30      	subs	r3, #48	@ 0x30
 8005bc4:	2b09      	cmp	r3, #9
 8005bc6:	d94b      	bls.n	8005c60 <_svfiprintf_r+0x17c>
 8005bc8:	b1b0      	cbz	r0, 8005bf8 <_svfiprintf_r+0x114>
 8005bca:	9207      	str	r2, [sp, #28]
 8005bcc:	e014      	b.n	8005bf8 <_svfiprintf_r+0x114>
 8005bce:	eba0 0308 	sub.w	r3, r0, r8
 8005bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	46a2      	mov	sl, r4
 8005bdc:	e7d2      	b.n	8005b84 <_svfiprintf_r+0xa0>
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	1d19      	adds	r1, r3, #4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	9103      	str	r1, [sp, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bfbb      	ittet	lt
 8005bea:	425b      	neglt	r3, r3
 8005bec:	f042 0202 	orrlt.w	r2, r2, #2
 8005bf0:	9307      	strge	r3, [sp, #28]
 8005bf2:	9307      	strlt	r3, [sp, #28]
 8005bf4:	bfb8      	it	lt
 8005bf6:	9204      	strlt	r2, [sp, #16]
 8005bf8:	7823      	ldrb	r3, [r4, #0]
 8005bfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bfc:	d10a      	bne.n	8005c14 <_svfiprintf_r+0x130>
 8005bfe:	7863      	ldrb	r3, [r4, #1]
 8005c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c02:	d132      	bne.n	8005c6a <_svfiprintf_r+0x186>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	1d1a      	adds	r2, r3, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	9203      	str	r2, [sp, #12]
 8005c0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c10:	3402      	adds	r4, #2
 8005c12:	9305      	str	r3, [sp, #20]
 8005c14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005cd8 <_svfiprintf_r+0x1f4>
 8005c18:	7821      	ldrb	r1, [r4, #0]
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	4650      	mov	r0, sl
 8005c1e:	f7fa fadf 	bl	80001e0 <memchr>
 8005c22:	b138      	cbz	r0, 8005c34 <_svfiprintf_r+0x150>
 8005c24:	9b04      	ldr	r3, [sp, #16]
 8005c26:	eba0 000a 	sub.w	r0, r0, sl
 8005c2a:	2240      	movs	r2, #64	@ 0x40
 8005c2c:	4082      	lsls	r2, r0
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	3401      	adds	r4, #1
 8005c32:	9304      	str	r3, [sp, #16]
 8005c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c38:	4824      	ldr	r0, [pc, #144]	@ (8005ccc <_svfiprintf_r+0x1e8>)
 8005c3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c3e:	2206      	movs	r2, #6
 8005c40:	f7fa face 	bl	80001e0 <memchr>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d036      	beq.n	8005cb6 <_svfiprintf_r+0x1d2>
 8005c48:	4b21      	ldr	r3, [pc, #132]	@ (8005cd0 <_svfiprintf_r+0x1ec>)
 8005c4a:	bb1b      	cbnz	r3, 8005c94 <_svfiprintf_r+0x1b0>
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	3307      	adds	r3, #7
 8005c50:	f023 0307 	bic.w	r3, r3, #7
 8005c54:	3308      	adds	r3, #8
 8005c56:	9303      	str	r3, [sp, #12]
 8005c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c5a:	4433      	add	r3, r6
 8005c5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c5e:	e76a      	b.n	8005b36 <_svfiprintf_r+0x52>
 8005c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c64:	460c      	mov	r4, r1
 8005c66:	2001      	movs	r0, #1
 8005c68:	e7a8      	b.n	8005bbc <_svfiprintf_r+0xd8>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	3401      	adds	r4, #1
 8005c6e:	9305      	str	r3, [sp, #20]
 8005c70:	4619      	mov	r1, r3
 8005c72:	f04f 0c0a 	mov.w	ip, #10
 8005c76:	4620      	mov	r0, r4
 8005c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c7c:	3a30      	subs	r2, #48	@ 0x30
 8005c7e:	2a09      	cmp	r2, #9
 8005c80:	d903      	bls.n	8005c8a <_svfiprintf_r+0x1a6>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0c6      	beq.n	8005c14 <_svfiprintf_r+0x130>
 8005c86:	9105      	str	r1, [sp, #20]
 8005c88:	e7c4      	b.n	8005c14 <_svfiprintf_r+0x130>
 8005c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c8e:	4604      	mov	r4, r0
 8005c90:	2301      	movs	r3, #1
 8005c92:	e7f0      	b.n	8005c76 <_svfiprintf_r+0x192>
 8005c94:	ab03      	add	r3, sp, #12
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	462a      	mov	r2, r5
 8005c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd4 <_svfiprintf_r+0x1f0>)
 8005c9c:	a904      	add	r1, sp, #16
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	f3af 8000 	nop.w
 8005ca4:	1c42      	adds	r2, r0, #1
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	d1d6      	bne.n	8005c58 <_svfiprintf_r+0x174>
 8005caa:	89ab      	ldrh	r3, [r5, #12]
 8005cac:	065b      	lsls	r3, r3, #25
 8005cae:	f53f af2d 	bmi.w	8005b0c <_svfiprintf_r+0x28>
 8005cb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cb4:	e72c      	b.n	8005b10 <_svfiprintf_r+0x2c>
 8005cb6:	ab03      	add	r3, sp, #12
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	462a      	mov	r2, r5
 8005cbc:	4b05      	ldr	r3, [pc, #20]	@ (8005cd4 <_svfiprintf_r+0x1f0>)
 8005cbe:	a904      	add	r1, sp, #16
 8005cc0:	4638      	mov	r0, r7
 8005cc2:	f000 f879 	bl	8005db8 <_printf_i>
 8005cc6:	e7ed      	b.n	8005ca4 <_svfiprintf_r+0x1c0>
 8005cc8:	08006920 	.word	0x08006920
 8005ccc:	0800692a 	.word	0x0800692a
 8005cd0:	00000000 	.word	0x00000000
 8005cd4:	08005a2d 	.word	0x08005a2d
 8005cd8:	08006926 	.word	0x08006926

08005cdc <_printf_common>:
 8005cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce0:	4616      	mov	r6, r2
 8005ce2:	4698      	mov	r8, r3
 8005ce4:	688a      	ldr	r2, [r1, #8]
 8005ce6:	690b      	ldr	r3, [r1, #16]
 8005ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cec:	4293      	cmp	r3, r2
 8005cee:	bfb8      	it	lt
 8005cf0:	4613      	movlt	r3, r2
 8005cf2:	6033      	str	r3, [r6, #0]
 8005cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	b10a      	cbz	r2, 8005d02 <_printf_common+0x26>
 8005cfe:	3301      	adds	r3, #1
 8005d00:	6033      	str	r3, [r6, #0]
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	0699      	lsls	r1, r3, #26
 8005d06:	bf42      	ittt	mi
 8005d08:	6833      	ldrmi	r3, [r6, #0]
 8005d0a:	3302      	addmi	r3, #2
 8005d0c:	6033      	strmi	r3, [r6, #0]
 8005d0e:	6825      	ldr	r5, [r4, #0]
 8005d10:	f015 0506 	ands.w	r5, r5, #6
 8005d14:	d106      	bne.n	8005d24 <_printf_common+0x48>
 8005d16:	f104 0a19 	add.w	sl, r4, #25
 8005d1a:	68e3      	ldr	r3, [r4, #12]
 8005d1c:	6832      	ldr	r2, [r6, #0]
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	dc26      	bgt.n	8005d72 <_printf_common+0x96>
 8005d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	3b00      	subs	r3, #0
 8005d2c:	bf18      	it	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	0692      	lsls	r2, r2, #26
 8005d32:	d42b      	bmi.n	8005d8c <_printf_common+0xb0>
 8005d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d38:	4641      	mov	r1, r8
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	47c8      	blx	r9
 8005d3e:	3001      	adds	r0, #1
 8005d40:	d01e      	beq.n	8005d80 <_printf_common+0xa4>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	6922      	ldr	r2, [r4, #16]
 8005d46:	f003 0306 	and.w	r3, r3, #6
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf02      	ittt	eq
 8005d4e:	68e5      	ldreq	r5, [r4, #12]
 8005d50:	6833      	ldreq	r3, [r6, #0]
 8005d52:	1aed      	subeq	r5, r5, r3
 8005d54:	68a3      	ldr	r3, [r4, #8]
 8005d56:	bf0c      	ite	eq
 8005d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d5c:	2500      	movne	r5, #0
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	bfc4      	itt	gt
 8005d62:	1a9b      	subgt	r3, r3, r2
 8005d64:	18ed      	addgt	r5, r5, r3
 8005d66:	2600      	movs	r6, #0
 8005d68:	341a      	adds	r4, #26
 8005d6a:	42b5      	cmp	r5, r6
 8005d6c:	d11a      	bne.n	8005da4 <_printf_common+0xc8>
 8005d6e:	2000      	movs	r0, #0
 8005d70:	e008      	b.n	8005d84 <_printf_common+0xa8>
 8005d72:	2301      	movs	r3, #1
 8005d74:	4652      	mov	r2, sl
 8005d76:	4641      	mov	r1, r8
 8005d78:	4638      	mov	r0, r7
 8005d7a:	47c8      	blx	r9
 8005d7c:	3001      	adds	r0, #1
 8005d7e:	d103      	bne.n	8005d88 <_printf_common+0xac>
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d88:	3501      	adds	r5, #1
 8005d8a:	e7c6      	b.n	8005d1a <_printf_common+0x3e>
 8005d8c:	18e1      	adds	r1, r4, r3
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	2030      	movs	r0, #48	@ 0x30
 8005d92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d96:	4422      	add	r2, r4
 8005d98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005da0:	3302      	adds	r3, #2
 8005da2:	e7c7      	b.n	8005d34 <_printf_common+0x58>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4622      	mov	r2, r4
 8005da8:	4641      	mov	r1, r8
 8005daa:	4638      	mov	r0, r7
 8005dac:	47c8      	blx	r9
 8005dae:	3001      	adds	r0, #1
 8005db0:	d0e6      	beq.n	8005d80 <_printf_common+0xa4>
 8005db2:	3601      	adds	r6, #1
 8005db4:	e7d9      	b.n	8005d6a <_printf_common+0x8e>
	...

08005db8 <_printf_i>:
 8005db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbc:	7e0f      	ldrb	r7, [r1, #24]
 8005dbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dc0:	2f78      	cmp	r7, #120	@ 0x78
 8005dc2:	4691      	mov	r9, r2
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	469a      	mov	sl, r3
 8005dca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dce:	d807      	bhi.n	8005de0 <_printf_i+0x28>
 8005dd0:	2f62      	cmp	r7, #98	@ 0x62
 8005dd2:	d80a      	bhi.n	8005dea <_printf_i+0x32>
 8005dd4:	2f00      	cmp	r7, #0
 8005dd6:	f000 80d2 	beq.w	8005f7e <_printf_i+0x1c6>
 8005dda:	2f58      	cmp	r7, #88	@ 0x58
 8005ddc:	f000 80b9 	beq.w	8005f52 <_printf_i+0x19a>
 8005de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005de4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005de8:	e03a      	b.n	8005e60 <_printf_i+0xa8>
 8005dea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dee:	2b15      	cmp	r3, #21
 8005df0:	d8f6      	bhi.n	8005de0 <_printf_i+0x28>
 8005df2:	a101      	add	r1, pc, #4	@ (adr r1, 8005df8 <_printf_i+0x40>)
 8005df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005df8:	08005e51 	.word	0x08005e51
 8005dfc:	08005e65 	.word	0x08005e65
 8005e00:	08005de1 	.word	0x08005de1
 8005e04:	08005de1 	.word	0x08005de1
 8005e08:	08005de1 	.word	0x08005de1
 8005e0c:	08005de1 	.word	0x08005de1
 8005e10:	08005e65 	.word	0x08005e65
 8005e14:	08005de1 	.word	0x08005de1
 8005e18:	08005de1 	.word	0x08005de1
 8005e1c:	08005de1 	.word	0x08005de1
 8005e20:	08005de1 	.word	0x08005de1
 8005e24:	08005f65 	.word	0x08005f65
 8005e28:	08005e8f 	.word	0x08005e8f
 8005e2c:	08005f1f 	.word	0x08005f1f
 8005e30:	08005de1 	.word	0x08005de1
 8005e34:	08005de1 	.word	0x08005de1
 8005e38:	08005f87 	.word	0x08005f87
 8005e3c:	08005de1 	.word	0x08005de1
 8005e40:	08005e8f 	.word	0x08005e8f
 8005e44:	08005de1 	.word	0x08005de1
 8005e48:	08005de1 	.word	0x08005de1
 8005e4c:	08005f27 	.word	0x08005f27
 8005e50:	6833      	ldr	r3, [r6, #0]
 8005e52:	1d1a      	adds	r2, r3, #4
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6032      	str	r2, [r6, #0]
 8005e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e60:	2301      	movs	r3, #1
 8005e62:	e09d      	b.n	8005fa0 <_printf_i+0x1e8>
 8005e64:	6833      	ldr	r3, [r6, #0]
 8005e66:	6820      	ldr	r0, [r4, #0]
 8005e68:	1d19      	adds	r1, r3, #4
 8005e6a:	6031      	str	r1, [r6, #0]
 8005e6c:	0606      	lsls	r6, r0, #24
 8005e6e:	d501      	bpl.n	8005e74 <_printf_i+0xbc>
 8005e70:	681d      	ldr	r5, [r3, #0]
 8005e72:	e003      	b.n	8005e7c <_printf_i+0xc4>
 8005e74:	0645      	lsls	r5, r0, #25
 8005e76:	d5fb      	bpl.n	8005e70 <_printf_i+0xb8>
 8005e78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e7c:	2d00      	cmp	r5, #0
 8005e7e:	da03      	bge.n	8005e88 <_printf_i+0xd0>
 8005e80:	232d      	movs	r3, #45	@ 0x2d
 8005e82:	426d      	negs	r5, r5
 8005e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e88:	4859      	ldr	r0, [pc, #356]	@ (8005ff0 <_printf_i+0x238>)
 8005e8a:	230a      	movs	r3, #10
 8005e8c:	e011      	b.n	8005eb2 <_printf_i+0xfa>
 8005e8e:	6821      	ldr	r1, [r4, #0]
 8005e90:	6833      	ldr	r3, [r6, #0]
 8005e92:	0608      	lsls	r0, r1, #24
 8005e94:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e98:	d402      	bmi.n	8005ea0 <_printf_i+0xe8>
 8005e9a:	0649      	lsls	r1, r1, #25
 8005e9c:	bf48      	it	mi
 8005e9e:	b2ad      	uxthmi	r5, r5
 8005ea0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ea2:	4853      	ldr	r0, [pc, #332]	@ (8005ff0 <_printf_i+0x238>)
 8005ea4:	6033      	str	r3, [r6, #0]
 8005ea6:	bf14      	ite	ne
 8005ea8:	230a      	movne	r3, #10
 8005eaa:	2308      	moveq	r3, #8
 8005eac:	2100      	movs	r1, #0
 8005eae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eb2:	6866      	ldr	r6, [r4, #4]
 8005eb4:	60a6      	str	r6, [r4, #8]
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	bfa2      	ittt	ge
 8005eba:	6821      	ldrge	r1, [r4, #0]
 8005ebc:	f021 0104 	bicge.w	r1, r1, #4
 8005ec0:	6021      	strge	r1, [r4, #0]
 8005ec2:	b90d      	cbnz	r5, 8005ec8 <_printf_i+0x110>
 8005ec4:	2e00      	cmp	r6, #0
 8005ec6:	d04b      	beq.n	8005f60 <_printf_i+0x1a8>
 8005ec8:	4616      	mov	r6, r2
 8005eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ece:	fb03 5711 	mls	r7, r3, r1, r5
 8005ed2:	5dc7      	ldrb	r7, [r0, r7]
 8005ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ed8:	462f      	mov	r7, r5
 8005eda:	42bb      	cmp	r3, r7
 8005edc:	460d      	mov	r5, r1
 8005ede:	d9f4      	bls.n	8005eca <_printf_i+0x112>
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d10b      	bne.n	8005efc <_printf_i+0x144>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	07df      	lsls	r7, r3, #31
 8005ee8:	d508      	bpl.n	8005efc <_printf_i+0x144>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	6861      	ldr	r1, [r4, #4]
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	bfde      	ittt	le
 8005ef2:	2330      	movle	r3, #48	@ 0x30
 8005ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ef8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005efc:	1b92      	subs	r2, r2, r6
 8005efe:	6122      	str	r2, [r4, #16]
 8005f00:	f8cd a000 	str.w	sl, [sp]
 8005f04:	464b      	mov	r3, r9
 8005f06:	aa03      	add	r2, sp, #12
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	f7ff fee6 	bl	8005cdc <_printf_common>
 8005f10:	3001      	adds	r0, #1
 8005f12:	d14a      	bne.n	8005faa <_printf_i+0x1f2>
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f18:	b004      	add	sp, #16
 8005f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	f043 0320 	orr.w	r3, r3, #32
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	4833      	ldr	r0, [pc, #204]	@ (8005ff4 <_printf_i+0x23c>)
 8005f28:	2778      	movs	r7, #120	@ 0x78
 8005f2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	6831      	ldr	r1, [r6, #0]
 8005f32:	061f      	lsls	r7, r3, #24
 8005f34:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f38:	d402      	bmi.n	8005f40 <_printf_i+0x188>
 8005f3a:	065f      	lsls	r7, r3, #25
 8005f3c:	bf48      	it	mi
 8005f3e:	b2ad      	uxthmi	r5, r5
 8005f40:	6031      	str	r1, [r6, #0]
 8005f42:	07d9      	lsls	r1, r3, #31
 8005f44:	bf44      	itt	mi
 8005f46:	f043 0320 	orrmi.w	r3, r3, #32
 8005f4a:	6023      	strmi	r3, [r4, #0]
 8005f4c:	b11d      	cbz	r5, 8005f56 <_printf_i+0x19e>
 8005f4e:	2310      	movs	r3, #16
 8005f50:	e7ac      	b.n	8005eac <_printf_i+0xf4>
 8005f52:	4827      	ldr	r0, [pc, #156]	@ (8005ff0 <_printf_i+0x238>)
 8005f54:	e7e9      	b.n	8005f2a <_printf_i+0x172>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	f023 0320 	bic.w	r3, r3, #32
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	e7f6      	b.n	8005f4e <_printf_i+0x196>
 8005f60:	4616      	mov	r6, r2
 8005f62:	e7bd      	b.n	8005ee0 <_printf_i+0x128>
 8005f64:	6833      	ldr	r3, [r6, #0]
 8005f66:	6825      	ldr	r5, [r4, #0]
 8005f68:	6961      	ldr	r1, [r4, #20]
 8005f6a:	1d18      	adds	r0, r3, #4
 8005f6c:	6030      	str	r0, [r6, #0]
 8005f6e:	062e      	lsls	r6, r5, #24
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	d501      	bpl.n	8005f78 <_printf_i+0x1c0>
 8005f74:	6019      	str	r1, [r3, #0]
 8005f76:	e002      	b.n	8005f7e <_printf_i+0x1c6>
 8005f78:	0668      	lsls	r0, r5, #25
 8005f7a:	d5fb      	bpl.n	8005f74 <_printf_i+0x1bc>
 8005f7c:	8019      	strh	r1, [r3, #0]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	4616      	mov	r6, r2
 8005f84:	e7bc      	b.n	8005f00 <_printf_i+0x148>
 8005f86:	6833      	ldr	r3, [r6, #0]
 8005f88:	1d1a      	adds	r2, r3, #4
 8005f8a:	6032      	str	r2, [r6, #0]
 8005f8c:	681e      	ldr	r6, [r3, #0]
 8005f8e:	6862      	ldr	r2, [r4, #4]
 8005f90:	2100      	movs	r1, #0
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7fa f924 	bl	80001e0 <memchr>
 8005f98:	b108      	cbz	r0, 8005f9e <_printf_i+0x1e6>
 8005f9a:	1b80      	subs	r0, r0, r6
 8005f9c:	6060      	str	r0, [r4, #4]
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	6123      	str	r3, [r4, #16]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa8:	e7aa      	b.n	8005f00 <_printf_i+0x148>
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	4632      	mov	r2, r6
 8005fae:	4649      	mov	r1, r9
 8005fb0:	4640      	mov	r0, r8
 8005fb2:	47d0      	blx	sl
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d0ad      	beq.n	8005f14 <_printf_i+0x15c>
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	079b      	lsls	r3, r3, #30
 8005fbc:	d413      	bmi.n	8005fe6 <_printf_i+0x22e>
 8005fbe:	68e0      	ldr	r0, [r4, #12]
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	4298      	cmp	r0, r3
 8005fc4:	bfb8      	it	lt
 8005fc6:	4618      	movlt	r0, r3
 8005fc8:	e7a6      	b.n	8005f18 <_printf_i+0x160>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	4632      	mov	r2, r6
 8005fce:	4649      	mov	r1, r9
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	47d0      	blx	sl
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d09d      	beq.n	8005f14 <_printf_i+0x15c>
 8005fd8:	3501      	adds	r5, #1
 8005fda:	68e3      	ldr	r3, [r4, #12]
 8005fdc:	9903      	ldr	r1, [sp, #12]
 8005fde:	1a5b      	subs	r3, r3, r1
 8005fe0:	42ab      	cmp	r3, r5
 8005fe2:	dcf2      	bgt.n	8005fca <_printf_i+0x212>
 8005fe4:	e7eb      	b.n	8005fbe <_printf_i+0x206>
 8005fe6:	2500      	movs	r5, #0
 8005fe8:	f104 0619 	add.w	r6, r4, #25
 8005fec:	e7f5      	b.n	8005fda <_printf_i+0x222>
 8005fee:	bf00      	nop
 8005ff0:	08006931 	.word	0x08006931
 8005ff4:	08006942 	.word	0x08006942

08005ff8 <memmove>:
 8005ff8:	4288      	cmp	r0, r1
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	eb01 0402 	add.w	r4, r1, r2
 8006000:	d902      	bls.n	8006008 <memmove+0x10>
 8006002:	4284      	cmp	r4, r0
 8006004:	4623      	mov	r3, r4
 8006006:	d807      	bhi.n	8006018 <memmove+0x20>
 8006008:	1e43      	subs	r3, r0, #1
 800600a:	42a1      	cmp	r1, r4
 800600c:	d008      	beq.n	8006020 <memmove+0x28>
 800600e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006016:	e7f8      	b.n	800600a <memmove+0x12>
 8006018:	4402      	add	r2, r0
 800601a:	4601      	mov	r1, r0
 800601c:	428a      	cmp	r2, r1
 800601e:	d100      	bne.n	8006022 <memmove+0x2a>
 8006020:	bd10      	pop	{r4, pc}
 8006022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800602a:	e7f7      	b.n	800601c <memmove+0x24>

0800602c <_sbrk_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d06      	ldr	r5, [pc, #24]	@ (8006048 <_sbrk_r+0x1c>)
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	f7fb fcaa 	bl	8001990 <_sbrk>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_sbrk_r+0x1a>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_sbrk_r+0x1a>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20000fa4 	.word	0x20000fa4

0800604c <memcpy>:
 800604c:	440a      	add	r2, r1
 800604e:	4291      	cmp	r1, r2
 8006050:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006054:	d100      	bne.n	8006058 <memcpy+0xc>
 8006056:	4770      	bx	lr
 8006058:	b510      	push	{r4, lr}
 800605a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006062:	4291      	cmp	r1, r2
 8006064:	d1f9      	bne.n	800605a <memcpy+0xe>
 8006066:	bd10      	pop	{r4, pc}

08006068 <_realloc_r>:
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	4680      	mov	r8, r0
 800606e:	4615      	mov	r5, r2
 8006070:	460c      	mov	r4, r1
 8006072:	b921      	cbnz	r1, 800607e <_realloc_r+0x16>
 8006074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	4611      	mov	r1, r2
 800607a:	f7ff bc4b 	b.w	8005914 <_malloc_r>
 800607e:	b92a      	cbnz	r2, 800608c <_realloc_r+0x24>
 8006080:	f7ff fbdc 	bl	800583c <_free_r>
 8006084:	2400      	movs	r4, #0
 8006086:	4620      	mov	r0, r4
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	f000 f81a 	bl	80060c4 <_malloc_usable_size_r>
 8006090:	4285      	cmp	r5, r0
 8006092:	4606      	mov	r6, r0
 8006094:	d802      	bhi.n	800609c <_realloc_r+0x34>
 8006096:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800609a:	d8f4      	bhi.n	8006086 <_realloc_r+0x1e>
 800609c:	4629      	mov	r1, r5
 800609e:	4640      	mov	r0, r8
 80060a0:	f7ff fc38 	bl	8005914 <_malloc_r>
 80060a4:	4607      	mov	r7, r0
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d0ec      	beq.n	8006084 <_realloc_r+0x1c>
 80060aa:	42b5      	cmp	r5, r6
 80060ac:	462a      	mov	r2, r5
 80060ae:	4621      	mov	r1, r4
 80060b0:	bf28      	it	cs
 80060b2:	4632      	movcs	r2, r6
 80060b4:	f7ff ffca 	bl	800604c <memcpy>
 80060b8:	4621      	mov	r1, r4
 80060ba:	4640      	mov	r0, r8
 80060bc:	f7ff fbbe 	bl	800583c <_free_r>
 80060c0:	463c      	mov	r4, r7
 80060c2:	e7e0      	b.n	8006086 <_realloc_r+0x1e>

080060c4 <_malloc_usable_size_r>:
 80060c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060c8:	1f18      	subs	r0, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfbc      	itt	lt
 80060ce:	580b      	ldrlt	r3, [r1, r0]
 80060d0:	18c0      	addlt	r0, r0, r3
 80060d2:	4770      	bx	lr

080060d4 <_init>:
 80060d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d6:	bf00      	nop
 80060d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060da:	bc08      	pop	{r3}
 80060dc:	469e      	mov	lr, r3
 80060de:	4770      	bx	lr

080060e0 <_fini>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr
