
f401_display_encoder_fader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dae8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0800dc88  0800dc88  0000ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb38  0800eb38  00010074  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb38  0800eb38  0000fb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb40  0800eb40  00010074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb40  0800eb40  0000fb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb44  0800eb44  0000fb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800eb48  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011804  20000074  0800ebbc  00010074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011878  0800ebbc  00010878  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002005b  00000000  00000000  000100a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004790  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c5  00000000  00000000  00036490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c5a0  00000000  00000000  00037a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000273a5  00000000  00000000  00053ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a81c0  00000000  00000000  0007b39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012355a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000817c  00000000  00000000  001235a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0012b71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dc70 	.word	0x0800dc70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800dc70 	.word	0x0800dc70

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <displayStrings>:
 * @param[in] numStrings Total number of strings in the array.
 * @param[in] cursor_index Index of the currently selected string, which will be highlighted on the display.
 *
 * @note Ensure that the `strings` array is correctly populated and `numStrings` reflects the actual number of valid strings. The display dimensions and font sizes should be configured to match the display hardware.
 */
void displayStrings(I2C_HandleTypeDef *hi2c1, char** strings, uint8_t numStrings, uint8_t cursor_index) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b0a8      	sub	sp, #160	@ 0xa0
 8000594:	af02      	add	r7, sp, #8
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	4611      	mov	r1, r2
 800059c:	461a      	mov	r2, r3
 800059e:	460b      	mov	r3, r1
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	4613      	mov	r3, r2
 80005a4:	71bb      	strb	r3, [r7, #6]
    // Clear screen
    ssd1306_Fill(Black);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 fb94 	bl	8001cd4 <ssd1306_Fill>

    // Calculate the last visible index based on the first visible index and the number of visible lines
    uint8_t last_visible_index = first_visible_index + num_visible_lines - 1;
 80005ac:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <displayStrings+0x16c>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4b53      	ldr	r3, [pc, #332]	@ (8000700 <displayStrings+0x170>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4413      	add	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	3b01      	subs	r3, #1
 80005ba:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    // Ensure cursor is within the visible range
    if (cursor_index < first_visible_index) {
 80005be:	4b4f      	ldr	r3, [pc, #316]	@ (80006fc <displayStrings+0x16c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	79ba      	ldrb	r2, [r7, #6]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d203      	bcs.n	80005d0 <displayStrings+0x40>
        first_visible_index = cursor_index;
 80005c8:	4a4c      	ldr	r2, [pc, #304]	@ (80006fc <displayStrings+0x16c>)
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	7013      	strb	r3, [r2, #0]
 80005ce:	e00d      	b.n	80005ec <displayStrings+0x5c>
    } else if (cursor_index > last_visible_index) {
 80005d0:	79ba      	ldrb	r2, [r7, #6]
 80005d2:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d908      	bls.n	80005ec <displayStrings+0x5c>
        first_visible_index = cursor_index - num_visible_lines + 1;
 80005da:	4b49      	ldr	r3, [pc, #292]	@ (8000700 <displayStrings+0x170>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b44      	ldr	r3, [pc, #272]	@ (80006fc <displayStrings+0x16c>)
 80005ea:	701a      	strb	r2, [r3, #0]
    }

    // Write data to list section of the screen
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 80005ec:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <displayStrings+0x16c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80005f4:	e03b      	b.n	800066e <displayStrings+0xde>
        ssd1306_SetCursor(BORDER_WIDTH, (k - first_visible_index) * LINE_HEIGHT + BORDER_WIDTH); // Adjust cursor_index position based on line height
 80005f6:	4b41      	ldr	r3, [pc, #260]	@ (80006fc <displayStrings+0x16c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	b2db      	uxtb	r3, r3
 8000602:	461a      	mov	r2, r3
 8000604:	0092      	lsls	r2, r2, #2
 8000606:	4413      	add	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	2001      	movs	r0, #1
 8000614:	f001 fcbc 	bl	8001f90 <ssd1306_SetCursor>
        if (k == cursor_index) {
 8000618:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	429a      	cmp	r2, r3
 8000620:	d115      	bne.n	800064e <displayStrings+0xbe>
            // Write the line with cursor_index
            char line_with_cursor[DISPLAY_WIDTH - BORDER_WIDTH];
            snprintf(line_with_cursor, sizeof(line_with_cursor), "%c %s", CURSOR, strings[k]);
 8000622:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	68ba      	ldr	r2, [r7, #8]
 800062a:	4413      	add	r3, r2
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f107 0014 	add.w	r0, r7, #20
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	233e      	movs	r3, #62	@ 0x3e
 8000636:	4a33      	ldr	r2, [pc, #204]	@ (8000704 <displayStrings+0x174>)
 8000638:	217f      	movs	r1, #127	@ 0x7f
 800063a:	f00c f9fd 	bl	800ca38 <sniprintf>
            ssd1306_WriteString(line_with_cursor, Font_7x10, White);
 800063e:	4a32      	ldr	r2, [pc, #200]	@ (8000708 <displayStrings+0x178>)
 8000640:	f107 0014 	add.w	r0, r7, #20
 8000644:	2301      	movs	r3, #1
 8000646:	ca06      	ldmia	r2, {r1, r2}
 8000648:	f001 fc7c 	bl	8001f44 <ssd1306_WriteString>
 800064c:	e00a      	b.n	8000664 <displayStrings+0xd4>
        } else {
            ssd1306_WriteString(strings[k], Font_7x10, White);
 800064e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	68ba      	ldr	r2, [r7, #8]
 8000656:	4413      	add	r3, r2
 8000658:	6818      	ldr	r0, [r3, #0]
 800065a:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <displayStrings+0x178>)
 800065c:	2301      	movs	r3, #1
 800065e:	ca06      	ldmia	r2, {r1, r2}
 8000660:	f001 fc70 	bl	8001f44 <ssd1306_WriteString>
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 8000664:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000668:	3301      	adds	r3, #1
 800066a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800066e:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	429a      	cmp	r2, r3
 8000676:	d209      	bcs.n	800068c <displayStrings+0xfc>
 8000678:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <displayStrings+0x16c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <displayStrings+0x170>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	440b      	add	r3, r1
 8000688:	429a      	cmp	r2, r3
 800068a:	dbb4      	blt.n	80005f6 <displayStrings+0x66>
        }
    }

    // Draw border around the list section
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800068c:	2300      	movs	r3, #0
 800068e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000692:	e029      	b.n	80006e8 <displayStrings+0x158>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 800069a:	e01c      	b.n	80006d6 <displayStrings+0x146>
            if (j < BORDER_WIDTH || j >= LIST_SECTION_HEIGHT - BORDER_WIDTH || i < BORDER_WIDTH || i >= DISPLAY_WIDTH - BORDER_WIDTH) {
 800069c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00b      	beq.n	80006bc <displayStrings+0x12c>
 80006a4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006a8:	2b4f      	cmp	r3, #79	@ 0x4f
 80006aa:	d807      	bhi.n	80006bc <displayStrings+0x12c>
 80006ac:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d003      	beq.n	80006bc <displayStrings+0x12c>
 80006b4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80006ba:	d907      	bls.n	80006cc <displayStrings+0x13c>
                ssd1306_DrawPixel(i, j, White);
 80006bc:	f897 1095 	ldrb.w	r1, [r7, #149]	@ 0x95
 80006c0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006c4:	2201      	movs	r2, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fb5a 	bl	8001d80 <ssd1306_DrawPixel>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 80006cc:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006d0:	3301      	adds	r3, #1
 80006d2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80006d6:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006da:	2b50      	cmp	r3, #80	@ 0x50
 80006dc:	d9de      	bls.n	800069c <displayStrings+0x10c>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80006de:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006e2:	3301      	adds	r3, #1
 80006e4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80006e8:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dad1      	bge.n	8000694 <displayStrings+0x104>
            }
        }
    }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3798      	adds	r7, #152	@ 0x98
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000090 	.word	0x20000090
 8000700:	20000000 	.word	0x20000000
 8000704:	0800dc88 	.word	0x0800dc88
 8000708:	20000004 	.word	0x20000004

0800070c <renderSelectedFile>:
 * @param[in] filename Pointer to a null-terminated string representing the name of the selected file to be displayed.
 *
 * @note Ensure that the `filename` is properly null-terminated and that the display dimensions 
 * and font settings are configured correctly to match the hardware.
 */
void renderSelectedFile(I2C_HandleTypeDef *hi2c1, const char *filename) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    // Clear the selected file section of the screen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
 800071a:	e012      	b.n	8000742 <renderSelectedFile+0x36>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 800071c:	2351      	movs	r3, #81	@ 0x51
 800071e:	73bb      	strb	r3, [r7, #14]
 8000720:	e008      	b.n	8000734 <renderSelectedFile+0x28>
            ssd1306_DrawPixel(i, j, Black);
 8000722:	7bb9      	ldrb	r1, [r7, #14]
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2200      	movs	r2, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fb29 	bl	8001d80 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 800072e:	7bbb      	ldrb	r3, [r7, #14]
 8000730:	3301      	adds	r3, #1
 8000732:	73bb      	strb	r3, [r7, #14]
 8000734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000738:	2b00      	cmp	r3, #0
 800073a:	daf2      	bge.n	8000722 <renderSelectedFile+0x16>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	3301      	adds	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000746:	2b00      	cmp	r3, #0
 8000748:	dae8      	bge.n	800071c <renderSelectedFile+0x10>
        }
    }

    // Write the selected file name in the selected file section
    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + 2); // Adjust Y position for text alignment
 800074a:	2153      	movs	r1, #83	@ 0x53
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fc1f 	bl	8001f90 <ssd1306_SetCursor>
    ssd1306_WriteString(filename, Font_7x10, White);
 8000752:	4a05      	ldr	r2, [pc, #20]	@ (8000768 <renderSelectedFile+0x5c>)
 8000754:	2301      	movs	r3, #1
 8000756:	ca06      	ldmia	r2, {r1, r2}
 8000758:	6838      	ldr	r0, [r7, #0]
 800075a:	f001 fbf3 	bl	8001f44 <ssd1306_WriteString>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000004 	.word	0x20000004

0800076c <drawFaderProzent>:
        }
    }
}

//
void drawFaderProzent(I2C_HandleTypeDef *hi2c1, const char *prozent, int multiplikator){
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
    // Clear the selected file section of the screen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 8000778:	2300      	movs	r3, #0
 800077a:	75fb      	strb	r3, [r7, #23]
 800077c:	e019      	b.n	80007b2 <drawFaderProzent+0x46>
        for (uint8_t j = LIST_SECTION_HEIGHT + (18 * multiplikator); j < DISPLAY_HEIGHT; j++) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	00d2      	lsls	r2, r2, #3
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	3351      	adds	r3, #81	@ 0x51
 800078e:	75bb      	strb	r3, [r7, #22]
 8000790:	e008      	b.n	80007a4 <drawFaderProzent+0x38>
            ssd1306_DrawPixel(i, j, Black);
 8000792:	7db9      	ldrb	r1, [r7, #22]
 8000794:	7dfb      	ldrb	r3, [r7, #23]
 8000796:	2200      	movs	r2, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f001 faf1 	bl	8001d80 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT + (18 * multiplikator); j < DISPLAY_HEIGHT; j++) {
 800079e:	7dbb      	ldrb	r3, [r7, #22]
 80007a0:	3301      	adds	r3, #1
 80007a2:	75bb      	strb	r3, [r7, #22]
 80007a4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	daf2      	bge.n	8000792 <drawFaderProzent+0x26>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	3301      	adds	r3, #1
 80007b0:	75fb      	strb	r3, [r7, #23]
 80007b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dae1      	bge.n	800077e <drawFaderProzent+0x12>
        }
    }
    // Write the selected file name in the selected file section
    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + (18 * multiplikator)); // Adjust Y position for text alignment
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	00d2      	lsls	r2, r2, #3
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3351      	adds	r3, #81	@ 0x51
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	2000      	movs	r0, #0
 80007d0:	f001 fbde 	bl	8001f90 <ssd1306_SetCursor>
    ssd1306_WriteString(prozent, Font_7x10, White);
 80007d4:	4a04      	ldr	r2, [pc, #16]	@ (80007e8 <drawFaderProzent+0x7c>)
 80007d6:	2301      	movs	r3, #1
 80007d8:	ca06      	ldmia	r2, {r1, r2}
 80007da:	68b8      	ldr	r0, [r7, #8]
 80007dc:	f001 fbb2 	bl	8001f44 <ssd1306_WriteString>
}
 80007e0:	bf00      	nop
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000004 	.word	0x20000004

080007ec <addFile>:
 * @param[in] classes Array of float values representing the file's class percentages.
 *
 * @note Ensure that the `FileManager` has sufficient capacity in the `files[]` array to accommodate new files.
 */

void addFile(FileManager *fm, const char *filename, const float *classes){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
    if (fm->num_files < MAX_FILES) {
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80007fe:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 8000802:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000806:	da45      	bge.n	8000894 <addFile+0xa8>
        strcpy(fm->files[fm->num_files].filename, filename);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800080e:	f8d3 2b9c 	ldr.w	r2, [r3, #2972]	@ 0xb9c
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	011b      	lsls	r3, r3, #4
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	4413      	add	r3, r2
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	4618      	mov	r0, r3
 8000822:	f00c fada 	bl	800cdda <strcpy>
        for(int i = 0; i < MAX_CLASSES; i++){
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e017      	b.n	800085c <addFile+0x70>
            fm->files[fm->num_files].classes[i] = classes[i];        }
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 800083a:	f8d2 2b9c 	ldr.w	r2, [r2, #2972]	@ 0xb9c
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	68f8      	ldr	r0, [r7, #12]
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	3308      	adds	r3, #8
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4403      	add	r3, r0
 8000854:	6019      	str	r1, [r3, #0]
        for(int i = 0; i < MAX_CLASSES; i++){
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	2b03      	cmp	r3, #3
 8000860:	dde4      	ble.n	800082c <addFile+0x40>
        fm->num_files++;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000868:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 800086c:	3301      	adds	r3, #1
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000874:	f8c2 3b9c 	str.w	r3, [r2, #2972]	@ 0xb9c
        if(fm->num_files == 1)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800087e:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 8000882:	2b01      	cmp	r3, #1
 8000884:	d106      	bne.n	8000894 <addFile+0xa8>
            fm->cursor_index = 0;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800088c:	461a      	mov	r2, r3
 800088e:	2300      	movs	r3, #0
 8000890:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
    }
}
 8000894:	bf00      	nop
 8000896:	3718      	adds	r7, #24
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <cursorUp>:
 * structure to move the cursor visually higher on the LCD display. 
 *  
 * @param[in] fm Pointer to the `FileManager` structure whose `cursor_index` is to be decremented.
 *
*/
void cursorUp(FileManager *fm){
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index > 0) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008aa:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd0b      	ble.n	80008ca <cursorUp+0x2e>
        fm->cursor_index--;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008b8:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 80008bc:	3b01      	subs	r3, #1
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 80008c4:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
    } else {
        fm->cursor_index = fm->num_matched_files - 1 ;
    }
}
 80008c8:	e00a      	b.n	80008e0 <cursorUp+0x44>
        fm->cursor_index = fm->num_matched_files - 1 ;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008d0:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 80008d4:	3b01      	subs	r3, #1
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 80008dc:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <cursorDown>:
 * structure to move the cursor visually lower on the LCD display. 
 *  
 * @param[in] fm Pointer to the `FileManager` structure whose `cursor_index` is to be incremented.
 *
*/
void cursorDown(FileManager *fm){
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index < fm->num_matched_files - 1) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80008fa:	f8d3 2ba4 	ldr.w	r2, [r3, #2980]	@ 0xba4
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000904:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000908:	3b01      	subs	r3, #1
 800090a:	429a      	cmp	r2, r3
 800090c:	da0b      	bge.n	8000926 <cursorDown+0x3a>
        fm->cursor_index++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000914:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 8000918:	3301      	adds	r3, #1
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000920:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
    } else {
        fm->cursor_index = 0;
    }
}
 8000924:	e006      	b.n	8000934 <cursorDown+0x48>
        fm->cursor_index = 0;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800092c:	461a      	mov	r2, r3
 800092e:	2300      	movs	r3, #0
 8000930:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <safeCurrentFileName>:
 * @param[in] fm Pointer to the `FileManager` structure from which the filename is retrieved and stored.
 *
 * @note Ensure that `cursor_index` is within the valid range of indices in the `shownFiles` array to avoid out-of-bounds access. 
 * The `current_cursor_filename` should have sufficient space allocated to store the filename.
 */
void safeCurrentFileName(FileManager *fm){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	strcpy(fm->current_cursor_filename, fm->shownFiles[fm->cursor_index].filename);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f503 423b 	add.w	r2, r3, #47872	@ 0xbb00
 800094e:	3280      	adds	r2, #128	@ 0x80
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000956:	f8d3 1ba4 	ldr.w	r1, [r3, #2980]	@ 0xba4
 800095a:	460b      	mov	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	440b      	add	r3, r1
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8000966:	3340      	adds	r3, #64	@ 0x40
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	440b      	add	r3, r1
 800096c:	4619      	mov	r1, r3
 800096e:	4610      	mov	r0, r2
 8000970:	f00c fa33 	bl	800cdda <strcpy>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <setCursor>:
 *   - The `cursor_index` is set to the last position in the list.
 * 
 * @param[in] fm Pointer to the `FileManager` structure used to adjust the cursor position.
 */

void setCursor(FileManager *fm){
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	int res = NOT_EXISTS;
 8000984:	f04f 33ff 	mov.w	r3, #4294967295
 8000988:	60bb      	str	r3, [r7, #8]
	//If no file match with the fader settings
	if( fm->num_matched_files == 0){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000990:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d107      	bne.n	80009a8 <setCursor+0x2c>
		fm->cursor_index = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800099e:	461a      	mov	r2, r3
 80009a0:	2300      	movs	r3, #0
 80009a2:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
		return;
 80009a6:	e060      	b.n	8000a6a <setCursor+0xee>
	}
	//If the current current_cursor_filename match with one of the shownFiles on a position in array
	//set the cursor with the position
	for(int i = 0; i < fm->num_matched_files; i++){
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e027      	b.n	80009fe <setCursor+0x82>
		res = strcmp(fm->current_cursor_filename, fm->shownFiles[i].filename);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f503 423b 	add.w	r2, r3, #47872	@ 0xbb00
 80009b4:	3280      	adds	r2, #128	@ 0x80
 80009b6:	68f9      	ldr	r1, [r7, #12]
 80009b8:	460b      	mov	r3, r1
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	440b      	add	r3, r1
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 80009c4:	3340      	adds	r3, #64	@ 0x40
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	440b      	add	r3, r1
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f7ff fc07 	bl	80001e0 <strcmp>
 80009d2:	60b8      	str	r0, [r7, #8]
		if(res == EXISTS){
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10e      	bne.n	80009f8 <setCursor+0x7c>
			fm->cursor_index = i;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80009e0:	461a      	mov	r2, r3
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
			fm->current_file_index = i;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f8c2 3ba8 	str.w	r3, [r2, #2984]	@ 0xba8
			return;
 80009f6:	e038      	b.n	8000a6a <setCursor+0xee>
	for(int i = 0; i < fm->num_matched_files; i++){
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3301      	adds	r3, #1
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a04:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dbcf      	blt.n	80009ae <setCursor+0x32>
		}
	}
	//If the file is not exists anymore in shownFiles set the current_cursor_filename with the name
	//of the file on the same position that the current_file_index is.
	if (fm->num_matched_files >= fm->cursor_index){
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a14:	f8d3 2ba0 	ldr.w	r2, [r3, #2976]	@ 0xba0
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a1e:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 8000a22:	429a      	cmp	r2, r3
 8000a24:	db16      	blt.n	8000a54 <setCursor+0xd8>
		strcpy(fm->current_cursor_filename, fm->shownFiles[fm->current_file_index].filename);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f503 423b 	add.w	r2, r3, #47872	@ 0xbb00
 8000a2c:	3280      	adds	r2, #128	@ 0x80
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a34:	f8d3 1ba8 	ldr.w	r1, [r3, #2984]	@ 0xba8
 8000a38:	460b      	mov	r3, r1
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	440b      	add	r3, r1
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8000a44:	3340      	adds	r3, #64	@ 0x40
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	440b      	add	r3, r1
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	f00c f9c4 	bl	800cdda <strcpy>
 8000a52:	e00a      	b.n	8000a6a <setCursor+0xee>
	}
	else {
		// when cursor_index is bigger than the list set him as the end position of the list
		fm->cursor_index = fm->num_matched_files - 1;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a5a:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000a66:	f8c2 3ba4 	str.w	r3, [r2, #2980]	@ 0xba4
	}
}
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <selectFile>:
 * This allows the file at the cursor position to be marked as the selected file, which can then be processed or displayed as needed.
 *
 * @param[in] fm Pointer to the `FileManager` structure in which the `current_file_index` will be set to the value of `cursor_index`.
 */

void selectFile(FileManager *fm) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	fm->current_file_index = fm->cursor_index;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000a7e:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000a88:	f8c2 3ba8 	str.w	r3, [r2, #2984]	@ 0xba8
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <HAL_GPIO_EXTI_Callback>:
 *   - Select the file and debounce the encoder switch using Timer5 and the debounce flag.
 *
 * @param[in] GPIO_pin The GPIO pin signals from the MCU related to the encoder and switch.
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]

    // Change the cnt the Position of Cursor and debounce the encoder with &tim5
    if (GPIO_Pin == enc_a_clk_in1_Pin && !debounce) {
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d129      	bne.n	8000afc <HAL_GPIO_EXTI_Callback+0x64>
 8000aa8:	4b25      	ldr	r3, [pc, #148]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	f083 0301 	eor.w	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d022      	beq.n	8000afc <HAL_GPIO_EXTI_Callback+0x64>
          __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000ab6:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f06f 0201 	mvn.w	r2, #1
 8000abe:	611a      	str	r2, [r3, #16]
          HAL_TIM_Base_Start_IT(&htim5);
 8000ac0:	4820      	ldr	r0, [pc, #128]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000ac2:	f007 fa0f 	bl	8007ee4 <HAL_TIM_Base_Start_IT>
          debounce = true;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
       //wenn A High und B High, decrement Encoder Count and increment the cursor position of the display
        if (HAL_GPIO_ReadPin(enc_b_dt_in2_GPIO_Port, enc_b_dt_in2_Pin)) {
 8000acc:	2102      	movs	r1, #2
 8000ace:	481e      	ldr	r0, [pc, #120]	@ (8000b48 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000ad0:	f003 fde8 	bl	80046a4 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d008      	beq.n	8000aec <HAL_GPIO_EXTI_Callback+0x54>
          rotary_enc_count--;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000ae2:	6013      	str	r3, [r2, #0]
          cursorDown(&fm);
 8000ae4:	481a      	ldr	r0, [pc, #104]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000ae6:	f7ff ff01 	bl	80008ec <cursorDown>
 8000aea:	e007      	b.n	8000afc <HAL_GPIO_EXTI_Callback+0x64>
        } else {
          // wenn A High und B Low, increment Encoder Count and decrement the cursor position of the display
            rotary_enc_count++;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	3301      	adds	r3, #1
 8000af2:	4a16      	ldr	r2, [pc, #88]	@ (8000b4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8000af4:	6013      	str	r3, [r2, #0]
            cursorUp(&fm);
 8000af6:	4816      	ldr	r0, [pc, #88]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000af8:	f7ff fed0 	bl	800089c <cursorUp>
        }
    }
    // If the switch is pushed selectFile and debounce the encoder with &tim5
    if(GPIO_Pin == enc_switch_in3_Pin && !debounce){
 8000afc:	88fb      	ldrh	r3, [r7, #6]
 8000afe:	2b10      	cmp	r3, #16
 8000b00:	d11a      	bne.n	8000b38 <HAL_GPIO_EXTI_Callback+0xa0>
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	f083 0301 	eor.w	r3, r3, #1
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d013      	beq.n	8000b38 <HAL_GPIO_EXTI_Callback+0xa0>
      __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f06f 0201 	mvn.w	r2, #1
 8000b18:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Start_IT(&htim5);
 8000b1a:	480a      	ldr	r0, [pc, #40]	@ (8000b44 <HAL_GPIO_EXTI_Callback+0xac>)
 8000b1c:	f007 f9e2 	bl	8007ee4 <HAL_TIM_Base_Start_IT>
      debounce = true;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	701a      	strb	r2, [r3, #0]
      switch_push_button =true;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
      selectFile(&fm);
 8000b2c:	4808      	ldr	r0, [pc, #32]	@ (8000b50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000b2e:	f7ff ff9f 	bl	8000a70 <selectFile>
      init = false;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
    }
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000099 	.word	0x20000099
 8000b44:	20000458 	.word	0x20000458
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	20000094 	.word	0x20000094
 8000b50:	200004e8 	.word	0x200004e8
 8000b54:	20000098 	.word	0x20000098
 8000b58:	2000009a 	.word	0x2000009a

08000b5c <HAL_TIM_PeriodElapsedCallback>:
 * - Sets a new timer for the next refresh interval.
 *
 * @param[in] htim Pointer to the TIM_HandleTypeDef structure for the current timer.
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    // reset debounce flag nach Timer5 elapsed
    if (htim == &htim5) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d105      	bne.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x1c>
        HAL_TIM_Base_Stop_IT(&htim5);
 8000b6c:	480f      	ldr	r0, [pc, #60]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b6e:	f007 fa1b 	bl	8007fa8 <HAL_TIM_Base_Stop_IT>
        debounce = false;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
    }
    // stop timer set flags for dma and screen update and set a new timer for new refresh interval
    if (htim == &htim3){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d110      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x46>
        HAL_TIM_Base_Stop_IT(&htim3);
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b82:	f007 fa11 	bl	8007fa8 <HAL_TIM_Base_Stop_IT>
    	updateScreenFlag = true;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
    	adcDmaFlag = true;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f06f 0201 	mvn.w	r2, #1
 8000b9a:	611a      	str	r2, [r3, #16]
        HAL_TIM_Base_Start_IT(&htim3);
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b9e:	f007 f9a1 	bl	8007ee4 <HAL_TIM_Base_Start_IT>
    }
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000458 	.word	0x20000458
 8000bb0:	20000099 	.word	0x20000099
 8000bb4:	20000410 	.word	0x20000410
 8000bb8:	20010cc9 	.word	0x20010cc9
 8000bbc:	20010cc8 	.word	0x20010cc8

08000bc0 <HAL_ADC_ConvCpltCallback>:
 * - Initializes the character array that will be shown on the display.
 *
 * @param[in] hadc Pointer to the ADC handle structure.
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{	// Calculation of the smooth values for alle channels od the ADC
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8000cbc <HAL_ADC_ConvCpltCallback+0xfc>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d16f      	bne.n	8000cb2 <HAL_ADC_ConvCpltCallback+0xf2>
		cnt++;
 8000bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b39      	ldr	r3, [pc, #228]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000bdc:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < NUM_CHANNELS; i++){
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	e00f      	b.n	8000c04 <HAL_ADC_ConvCpltCallback+0x44>
			smoothValue[i]+=adcBuffer[i];
 8000be4:	4a37      	ldr	r2, [pc, #220]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bec:	4936      	ldr	r1, [pc, #216]	@ (8000cc8 <HAL_ADC_ConvCpltCallback+0x108>)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf4:	441a      	add	r2, r3
 8000bf6:	4933      	ldr	r1, [pc, #204]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_CHANNELS; i++){
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	ddec      	ble.n	8000be4 <HAL_ADC_ConvCpltCallback+0x24>
		}
		// Calculation of the average values for the diplay and the compare operations
		if(cnt >= SMOOTHING_HEIGHT){
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d94d      	bls.n	8000cb2 <HAL_ADC_ConvCpltCallback+0xf2>
			HAL_ADC_Stop_DMA(&hadc1);
 8000c16:	482d      	ldr	r0, [pc, #180]	@ (8000ccc <HAL_ADC_ConvCpltCallback+0x10c>)
 8000c18:	f002 f9f4 	bl	8003004 <HAL_ADC_Stop_DMA>
			for(int j = 0; j < NUM_CHANNELS; j++){
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	e02f      	b.n	8000c82 <HAL_ADC_ConvCpltCallback+0xc2>
				//Shown values
				currentClassPercentADC[j]=(smoothValue[j]/SMOOTHING_HEIGHT)/41;
 8000c22:	4a28      	ldr	r2, [pc, #160]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	4a29      	ldr	r2, [pc, #164]	@ (8000cd0 <HAL_ADC_ConvCpltCallback+0x110>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	0c5b      	lsrs	r3, r3, #17
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	4a27      	ldr	r2, [pc, #156]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	4413      	add	r3, r2
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
				//Compare values for the Sortalgorythm
				fm.fader_Class[j] = ((smoothValue[j]/SMOOTHING_HEIGHT)/4096.0f);
 8000c3e:	4a21      	ldr	r2, [pc, #132]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c46:	4a24      	ldr	r2, [pc, #144]	@ (8000cd8 <HAL_ADC_ConvCpltCallback+0x118>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0b5b      	lsrs	r3, r3, #13
 8000c4e:	ee07 3a90 	vmov	s15, r3
 8000c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c56:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000cdc <HAL_ADC_ConvCpltCallback+0x11c>
 8000c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5e:	4a20      	ldr	r2, [pc, #128]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x120>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8000c66:	332a      	adds	r3, #42	@ 0x2a
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	edc3 7a00 	vstr	s15, [r3]
				smoothValue[j]=0;
 8000c72:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2100      	movs	r1, #0
 8000c78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 0; j < NUM_CHANNELS; j++){
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60bb      	str	r3, [r7, #8]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	ddcc      	ble.n	8000c22 <HAL_ADC_ConvCpltCallback+0x62>
			}
			cnt=0;
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	801a      	strh	r2, [r3, #0]
			//Initialisation of the char array that are shown on Display
			sprintf(faderProzent[0], "F1: %u F2: %u",currentClassPercentADC[0], currentClassPercentADC[1]);
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	4912      	ldr	r1, [pc, #72]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x124>)
 8000c9a:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x128>)
 8000c9c:	f00b ff00 	bl	800caa0 <siprintf>
			sprintf(faderProzent[1], "F3: %u F4: %u",currentClassPercentADC[2], currentClassPercentADC[3]);
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000ca8:	78db      	ldrb	r3, [r3, #3]
 8000caa:	4910      	ldr	r1, [pc, #64]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x12c>)
 8000cac:	4810      	ldr	r0, [pc, #64]	@ (8000cf0 <HAL_ADC_ConvCpltCallback+0x130>)
 8000cae:	f00b fef7 	bl	800caa0 <siprintf>
		}
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40012000 	.word	0x40012000
 8000cc0:	2000009c 	.word	0x2000009c
 8000cc4:	200000a0 	.word	0x200000a0
 8000cc8:	20010ccc 	.word	0x20010ccc
 8000ccc:	20000128 	.word	0x20000128
 8000cd0:	1b47afc9 	.word	0x1b47afc9
 8000cd4:	200000bc 	.word	0x200000bc
 8000cd8:	45e7b273 	.word	0x45e7b273
 8000cdc:	45800000 	.word	0x45800000
 8000ce0:	200004e8 	.word	0x200004e8
 8000ce4:	0800dc90 	.word	0x0800dc90
 8000ce8:	200000c4 	.word	0x200000c4
 8000cec:	0800dca0 	.word	0x0800dca0
 8000cf0:	200000f6 	.word	0x200000f6

08000cf4 <screenInit>:
 * This function initializes the LCD-Display, fills it with black, and updates the screen. It also
 * initializes the file manager with file names and assigns random class percentages for system tests.
 * 
 * @param[in] fileNames Array of file names to be added to the file manager.
 */
void screenInit(char (*fileNames)[MAX_FILENAME_LENGTH]){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	f5ad 5dfb 	sub.w	sp, sp, #8032	@ 0x1f60
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8000d00:	f6a3 735c 	subw	r3, r3, #3932	@ 0xf5c
 8000d04:	6018      	str	r0, [r3, #0]
  if (ssd1306_Init(&hi2c1) != 0) {
 8000d06:	4865      	ldr	r0, [pc, #404]	@ (8000e9c <screenInit+0x1a8>)
 8000d08:	f000 fecc 	bl	8001aa4 <ssd1306_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <screenInit+0x22>
  	Error_Handler();
 8000d12:	f000 fea9 	bl	8001a68 <Error_Handler>
  }
  HAL_Delay(1000);
 8000d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d1a:	f001 ff0b 	bl	8002b34 <HAL_Delay>

  ssd1306_Fill(Black);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 ffd8 	bl	8001cd4 <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 8000d24:	485d      	ldr	r0, [pc, #372]	@ (8000e9c <screenInit+0x1a8>)
 8000d26:	f000 fff9 	bl	8001d1c <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8000d2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d2e:	f001 ff01 	bl	8002b34 <HAL_Delay>

  init = true;
 8000d32:	4b5b      	ldr	r3, [pc, #364]	@ (8000ea0 <screenInit+0x1ac>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
  //Initialisation of the Class Percentage for System Tests with random Values between 0.0-1.0
  float fileClasses[MAX_FILES][MAX_CLASSES];

  for (int i = 0; i < MAX_FILES; ++i) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000d3e:	f102 021c 	add.w	r2, r2, #28
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e061      	b.n	8000e0a <screenInit+0x116>
      for (int j = 0; j < MAX_CLASSES; ++j) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000d4c:	f102 0218 	add.w	r2, r2, #24
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e048      	b.n	8000de6 <screenInit+0xf2>
          // Generiere eine Zufallszahl zwischen 0 und 1000 (für zwei Nachkommastellen)
          int random_value = rand() % 1001;
 8000d54:	f00b fd70 	bl	800c838 <rand>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a52      	ldr	r2, [pc, #328]	@ (8000ea4 <screenInit+0x1b0>)
 8000d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d60:	1211      	asrs	r1, r2, #8
 8000d62:	17da      	asrs	r2, r3, #31
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 8000d6a:	fb01 f202 	mul.w	r2, r1, r2
 8000d6e:	1a9b      	subs	r3, r3, r2
 8000d70:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000d74:	f102 0210 	add.w	r2, r2, #16
 8000d78:	6013      	str	r3, [r2, #0]
          float random_float = (float)random_value / 1000.0f; // Skaliere auf den Bereich 0.0 - 1.0
 8000d7a:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000d7e:	f103 0310 	add.w	r3, r3, #16
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d8c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8000ea8 <screenInit+0x1b4>
 8000d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d94:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000d98:	f103 030c 	add.w	r3, r3, #12
 8000d9c:	edc3 7a00 	vstr	s15, [r3]

          // Setze den Wert im Array
          fileClasses[i][j] = random_float;
 8000da0:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8000da4:	f6a3 7254 	subw	r2, r3, #3924	@ 0xf54
 8000da8:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000dac:	f103 031c 	add.w	r3, r3, #28
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	0099      	lsls	r1, r3, #2
 8000db4:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000db8:	f103 0318 	add.w	r3, r3, #24
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	440b      	add	r3, r1
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000dc8:	f102 020c 	add.w	r2, r2, #12
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	601a      	str	r2, [r3, #0]
      for (int j = 0; j < MAX_CLASSES; ++j) {
 8000dd0:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000dd4:	f103 0318 	add.w	r3, r3, #24
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000de0:	f102 0218 	add.w	r2, r2, #24
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000dea:	f103 0318 	add.w	r3, r3, #24
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	ddaf      	ble.n	8000d54 <screenInit+0x60>
  for (int i = 0; i < MAX_FILES; ++i) {
 8000df4:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000df8:	f103 031c 	add.w	r3, r3, #28
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e04:	f102 021c 	add.w	r2, r2, #28
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e0e:	f103 031c 	add.w	r3, r3, #28
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e18:	db95      	blt.n	8000d46 <screenInit+0x52>
      }
  }
  // Add Files to the Filemanger
  for (int i = 1; i < MAX_FILES; i++) {
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e20:	f102 0214 	add.w	r2, r2, #20
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e028      	b.n	8000e7a <screenInit+0x186>
      addFile(&fm, fileNames[i], fileClasses[i]);
 8000e28:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e2c:	f103 0314 	add.w	r3, r3, #20
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4613      	mov	r3, r2
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f507 6376 	add.w	r3, r7, #3936	@ 0xf60
 8000e40:	f6a3 735c 	subw	r3, r3, #3932	@ 0xf5c
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	1899      	adds	r1, r3, r2
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	3b14      	subs	r3, #20
 8000e4e:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e52:	f102 0214 	add.w	r2, r2, #20
 8000e56:	6812      	ldr	r2, [r2, #0]
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4813      	ldr	r0, [pc, #76]	@ (8000eac <screenInit+0x1b8>)
 8000e60:	f7ff fcc4 	bl	80007ec <addFile>
  for (int i = 1; i < MAX_FILES; i++) {
 8000e64:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e68:	f103 0314 	add.w	r3, r3, #20
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	f507 52fa 	add.w	r2, r7, #8000	@ 0x1f40
 8000e74:	f102 0214 	add.w	r2, r2, #20
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	f507 53fa 	add.w	r3, r7, #8000	@ 0x1f40
 8000e7e:	f103 0314 	add.w	r3, r3, #20
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e88:	dbce      	blt.n	8000e28 <screenInit+0x134>
  }
  sortFiles();
 8000e8a:	f000 f811 	bl	8000eb0 <sortFiles>
  updateScreen();
 8000e8e:	f000 f8cb 	bl	8001028 <updateScreen>
}
 8000e92:	bf00      	nop
 8000e94:	f507 57fb 	add.w	r7, r7, #8032	@ 0x1f60
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001d0 	.word	0x200001d0
 8000ea0:	2000009a 	.word	0x2000009a
 8000ea4:	4178749f 	.word	0x4178749f
 8000ea8:	447a0000 	.word	0x447a0000
 8000eac:	200004e8 	.word	0x200004e8

08000eb0 <sortFiles>:
 * - Compares the newly added filenames with the existing ones.
 * - Adds files from the existing file list to the `shownFiles` in the file manager.
 *
 * @param[in] void
 */
void sortFiles(void){
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
	char* compareFile;
	char* shownFile;
	int res;
	//Comparsion of the fileclasses and the fader settings
	//whether the class is fullfilled with a threashold of 0.1
	for(int i = 0; i < MAX_FILES; i++){
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
 8000eba:	e0a3      	b.n	8001004 <sortFiles+0x154>
		classFulfilled = true;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		fileExists = true;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		for(int j = 0; j < MAX_CLASSES; j++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
 8000ecc:	e02c      	b.n	8000f28 <sortFiles+0x78>
			classForWav = fm.files[i].classes[j];
 8000ece:	4953      	ldr	r1, [pc, #332]	@ (800101c <sortFiles+0x16c>)
 8000ed0:	6a3a      	ldr	r2, [r7, #32]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	4413      	add	r3, r2
 8000ede:	3308      	adds	r3, #8
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	617b      	str	r3, [r7, #20]
			classFromFader = fm.fader_Class[j];
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800101c <sortFiles+0x16c>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f503 533b 	add.w	r3, r3, #11968	@ 0x2ec0
 8000ef0:	332a      	adds	r3, #42	@ 0x2a
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
			if(fabsf(classForWav-classFromFader) > THREASHOLD){
 8000efc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f00:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f08:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001020 <sortFiles+0x170>
 8000f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	dd03      	ble.n	8000f22 <sortFiles+0x72>
				classFulfilled = false;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8000f20:	e005      	b.n	8000f2e <sortFiles+0x7e>
		for(int j = 0; j < MAX_CLASSES; j++){
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3301      	adds	r3, #1
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	ddcf      	ble.n	8000ece <sortFiles+0x1e>
			}
		}
		//Comparsion of the allready added filenames und the new one
		if(classFulfilled){
 8000f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d032      	beq.n	8000f9c <sortFiles+0xec>
			fileExists = false;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			compareFile = fm.files[i].filename;
 8000f3c:	6a3a      	ldr	r2, [r7, #32]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4a35      	ldr	r2, [pc, #212]	@ (800101c <sortFiles+0x16c>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
			for(int k = 0; k<fm.num_matched_files; k++){
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	e01c      	b.n	8000f8c <sortFiles+0xdc>
				shownFile = fm.shownFiles[k].filename;
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8000f60:	3340      	adds	r3, #64	@ 0x40
 8000f62:	4a2e      	ldr	r2, [pc, #184]	@ (800101c <sortFiles+0x16c>)
 8000f64:	4413      	add	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
				res = strcmp(compareFile, shownFile);
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f7ff f938 	bl	80001e0 <strcmp>
 8000f70:	6078      	str	r0, [r7, #4]
				if(res == EXISTS){
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <sortFiles+0xd6>
					fileExists = true;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					res = -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	607b      	str	r3, [r7, #4]
					break;
 8000f84:	e00a      	b.n	8000f9c <sortFiles+0xec>
			for(int k = 0; k<fm.num_matched_files; k++){
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <sortFiles+0x16c>)
 8000f8e:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000f92:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	dbda      	blt.n	8000f52 <sortFiles+0xa2>
				}
			}
		}
		//Add of the file from all existing files to the filemanegers shownFiles
		if(!fileExists){
 8000f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d029      	beq.n	8000ffe <sortFiles+0x14e>
			fm.shownFiles[fm.num_matched_files] = fm.files[i];
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <sortFiles+0x16c>)
 8000fac:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000fb0:	f8d3 2ba0 	ldr.w	r2, [r3, #2976]	@ 0xba0
 8000fb4:	4919      	ldr	r1, [pc, #100]	@ (800101c <sortFiles+0x16c>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f503 42bb 	add.w	r2, r3, #23936	@ 0x5d80
 8000fc4:	3240      	adds	r2, #64	@ 0x40
 8000fc6:	4815      	ldr	r0, [pc, #84]	@ (800101c <sortFiles+0x16c>)
 8000fc8:	6a39      	ldr	r1, [r7, #32]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	440b      	add	r3, r1
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	4403      	add	r3, r0
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			fm.num_matched_files++;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <sortFiles+0x16c>)
 8000fea:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8000fee:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a09      	ldr	r2, [pc, #36]	@ (800101c <sortFiles+0x16c>)
 8000ff6:	f502 4230 	add.w	r2, r2, #45056	@ 0xb000
 8000ffa:	f8c2 3ba0 	str.w	r3, [r2, #2976]	@ 0xba0
	for(int i = 0; i < MAX_FILES; i++){
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	3301      	adds	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800100a:	f6ff af57 	blt.w	8000ebc <sortFiles+0xc>
		}
	}
	sortFilesFlag = false;
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <sortFiles+0x174>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	@ 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bdb0      	pop	{r4, r5, r7, pc}
 800101c:	200004e8 	.word	0x200004e8
 8001020:	3dcccccd 	.word	0x3dcccccd
 8001024:	2000009b 	.word	0x2000009b

08001028 <updateScreen>:
 * - Display the currently selected filename.
 * - Shows the fader settings on the display.
 *
 * @note The function relies on global variables and external functions to interact with the display.
 */
void updateScreen(void){
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 6dfb 	sub.w	sp, sp, #2008	@ 0x7d8
 800102e:	af00      	add	r7, sp, #0
	char *filenames[MAX_FILES];
	char *currentFileName;
	for (int i = 0; i < fm.num_files; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 8001036:	e017      	b.n	8001068 <updateScreen+0x40>
		filenames[i] = fm.shownFiles[i].filename; // Extracting filenames from File structures
 8001038:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 8001048:	3340      	adds	r3, #64	@ 0x40
 800104a:	4a2b      	ldr	r2, [pc, #172]	@ (80010f8 <updateScreen+0xd0>)
 800104c:	1899      	adds	r1, r3, r2
 800104e:	f507 63fb 	add.w	r3, r7, #2008	@ 0x7d8
 8001052:	f5a3 63fb 	sub.w	r3, r3, #2008	@ 0x7d8
 8001056:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 800105a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < fm.num_files; i++) {
 800105e:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	@ 0x7d0
 8001062:	3301      	adds	r3, #1
 8001064:	f8c7 37d0 	str.w	r3, [r7, #2000]	@ 0x7d0
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <updateScreen+0xd0>)
 800106a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800106e:	f8d3 3b9c 	ldr.w	r3, [r3, #2972]	@ 0xb9c
 8001072:	f8d7 27d0 	ldr.w	r2, [r7, #2000]	@ 0x7d0
 8001076:	429a      	cmp	r2, r3
 8001078:	dbde      	blt.n	8001038 <updateScreen+0x10>
	}
	//Case if the init is not fullfiled
	if(init){
 800107a:	4b20      	ldr	r3, [pc, #128]	@ (80010fc <updateScreen+0xd4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <updateScreen+0x62>
		currentFileName = "";
 8001082:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <updateScreen+0xd8>)
 8001084:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8001088:	e00f      	b.n	80010aa <updateScreen+0x82>
	}
	else{
	//To display the chosen filename
	currentFileName = fm.shownFiles[fm.current_file_index].filename;
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <updateScreen+0xd0>)
 800108c:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 8001090:	f8d3 2ba8 	ldr.w	r2, [r3, #2984]	@ 0xba8
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	f503 43bb 	add.w	r3, r3, #23936	@ 0x5d80
 80010a0:	3340      	adds	r3, #64	@ 0x40
 80010a2:	4a15      	ldr	r2, [pc, #84]	@ (80010f8 <updateScreen+0xd0>)
 80010a4:	4413      	add	r3, r2
 80010a6:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
	}
	//To show all filenames in the showFiles Array
	displayStrings(&hi2c1, filenames, fm.num_matched_files, fm.cursor_index);
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <updateScreen+0xd0>)
 80010ac:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80010b0:	f8d3 3ba0 	ldr.w	r3, [r3, #2976]	@ 0xba0
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <updateScreen+0xd0>)
 80010b8:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 80010bc:	f8d3 3ba4 	ldr.w	r3, [r3, #2980]	@ 0xba4
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4639      	mov	r1, r7
 80010c4:	480f      	ldr	r0, [pc, #60]	@ (8001104 <updateScreen+0xdc>)
 80010c6:	f7ff fa63 	bl	8000590 <displayStrings>
	//To display the chosen filename
	renderSelectedFile(&hi2c1, currentFileName);
 80010ca:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	@ 0x7d4
 80010ce:	480d      	ldr	r0, [pc, #52]	@ (8001104 <updateScreen+0xdc>)
 80010d0:	f7ff fb1c 	bl	800070c <renderSelectedFile>
	//Show the Fader Settings on Display
	drawFaderProzent(&hi2c1, faderProzent[0], 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	490c      	ldr	r1, [pc, #48]	@ (8001108 <updateScreen+0xe0>)
 80010d8:	480a      	ldr	r0, [pc, #40]	@ (8001104 <updateScreen+0xdc>)
 80010da:	f7ff fb47 	bl	800076c <drawFaderProzent>
	drawFaderProzent(&hi2c1, faderProzent[1], 2);
 80010de:	2202      	movs	r2, #2
 80010e0:	490a      	ldr	r1, [pc, #40]	@ (800110c <updateScreen+0xe4>)
 80010e2:	4808      	ldr	r0, [pc, #32]	@ (8001104 <updateScreen+0xdc>)
 80010e4:	f7ff fb42 	bl	800076c <drawFaderProzent>


	// Update display
	ssd1306_UpdateScreen(&hi2c1);
 80010e8:	4806      	ldr	r0, [pc, #24]	@ (8001104 <updateScreen+0xdc>)
 80010ea:	f000 fe17 	bl	8001d1c <ssd1306_UpdateScreen>
}
 80010ee:	bf00      	nop
 80010f0:	f507 67fb 	add.w	r7, r7, #2008	@ 0x7d8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200004e8 	.word	0x200004e8
 80010fc:	2000009a 	.word	0x2000009a
 8001100:	0800dcb0 	.word	0x0800dcb0
 8001104:	200001d0 	.word	0x200001d0
 8001108:	200000c4 	.word	0x200000c4
 800110c:	200000f6 	.word	0x200000f6

08001110 <compareADCValues>:
 * - Sets a flag to indicate that the file list needs to be sorted.
 * - Saves the current filename and clears the `shownFiles` array if a change is detected.
 *
 * @note This function uses global variables for fader settings and file management.
 */
void compareADCValues(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	bool faderSettingsChanged= false;
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]
    //Compare the current und the past fader settings
	for(int i = 0; i < NUM_CHANNELS; i++){
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	e01a      	b.n	8001156 <compareADCValues+0x46>
		if(pastClassPercentADC[i] != currentClassPercentADC[i]){
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <compareADCValues+0x68>)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	4413      	add	r3, r2
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4914      	ldr	r1, [pc, #80]	@ (800117c <compareADCValues+0x6c>)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	440b      	add	r3, r1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d00d      	beq.n	8001150 <compareADCValues+0x40>
			pastClassPercentADC[i] = currentClassPercentADC[i];
 8001134:	4a11      	ldr	r2, [pc, #68]	@ (800117c <compareADCValues+0x6c>)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4413      	add	r3, r2
 800113a:	7819      	ldrb	r1, [r3, #0]
 800113c:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <compareADCValues+0x68>)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	460a      	mov	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
			faderSettingsChanged = true;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
			sortFilesFlag = true;
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <compareADCValues+0x70>)
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_CHANNELS; i++){
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b04      	cmp	r3, #4
 800115a:	dde1      	ble.n	8001120 <compareADCValues+0x10>
		}
	}
	//The current filename get safed and the shownFiles array get cleared
	if(faderSettingsChanged){
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <compareADCValues+0x60>
		safeCurrentFileName(&fm);
 8001162:	4808      	ldr	r0, [pc, #32]	@ (8001184 <compareADCValues+0x74>)
 8001164:	f7ff fbec 	bl	8000940 <safeCurrentFileName>
		resetShownFiles();
 8001168:	f000 f80e 	bl	8001188 <resetShownFiles>
		faderSettingsChanged = false;
 800116c:	2300      	movs	r3, #0
 800116e:	71fb      	strb	r3, [r7, #7]
	}
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200000b4 	.word	0x200000b4
 800117c:	200000bc 	.word	0x200000bc
 8001180:	2000009b 	.word	0x2000009b
 8001184:	200004e8 	.word	0x200004e8

08001188 <resetShownFiles>:
 * - Sets the memory area of `fm.shownFiles` to zero using `memset`.
 * - Resets the `num_matched_files` field to 0.
 *
 * @note This function is used to clear the list of files currently displayed on the screen.
 */
void resetShownFiles(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    memset(fm.shownFiles, 0, sizeof(fm.shownFiles)); // Setzt den gesamten Speicherbereich auf 0
 800118c:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 8001190:	2100      	movs	r1, #0
 8001192:	4806      	ldr	r0, [pc, #24]	@ (80011ac <resetShownFiles+0x24>)
 8001194:	f00b fd7c 	bl	800cc90 <memset>
    fm.num_matched_files = 0;
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <resetShownFiles+0x28>)
 800119a:	f503 4330 	add.w	r3, r3, #45056	@ 0xb000
 800119e:	461a      	mov	r2, r3
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c2 3ba0 	str.w	r3, [r2, #2976]	@ 0xba0
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200062a8 	.word	0x200062a8
 80011b0:	200004e8 	.word	0x200004e8

080011b4 <listFiles>:
 * @param[in] path The directory path on the SD card to search for files.
 *
 * @note This function assumes that `fileNamesSDCard` and `fileCount` are global variables and that `MAX_FILES` and `MAX_FILENAME_LENGTH` are defined constants.
 */
void listFiles(const char *path)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    // Open the Directory
    fres = f_opendir(&dir, "/SamplePool");
 80011bc:	492a      	ldr	r1, [pc, #168]	@ (8001268 <listFiles+0xb4>)
 80011be:	482b      	ldr	r0, [pc, #172]	@ (800126c <listFiles+0xb8>)
 80011c0:	f00b f942 	bl	800c448 <f_opendir>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <listFiles+0xbc>)
 80011ca:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK)
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <listFiles+0xbc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d145      	bne.n	8001260 <listFiles+0xac>
    {
        while (fileCount < MAX_FILES)
 80011d4:	e03c      	b.n	8001250 <listFiles+0x9c>
        {
            // Read the entry in the directory
            fres = f_readdir(&dir, &fno);
 80011d6:	4927      	ldr	r1, [pc, #156]	@ (8001274 <listFiles+0xc0>)
 80011d8:	4824      	ldr	r0, [pc, #144]	@ (800126c <listFiles+0xb8>)
 80011da:	f00b f9ce 	bl	800c57a <f_readdir>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <listFiles+0xbc>)
 80011e4:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK || fno.fname[0] == 0) break;
 80011e6:	4b22      	ldr	r3, [pc, #136]	@ (8001270 <listFiles+0xbc>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d135      	bne.n	800125a <listFiles+0xa6>
 80011ee:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <listFiles+0xc0>)
 80011f0:	7d9b      	ldrb	r3, [r3, #22]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d031      	beq.n	800125a <listFiles+0xa6>

            // Check whether it a file
            if (!(fno.fattrib & AM_DIR))
 80011f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <listFiles+0xc0>)
 80011f8:	7a1b      	ldrb	r3, [r3, #8]
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d126      	bne.n	8001250 <listFiles+0x9c>
            {
                // It is a file
                char *fileName = fno.fname;
 8001202:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <listFiles+0xc4>)
 8001204:	60fb      	str	r3, [r7, #12]

                // Check whether the file have a extension .wav
                if (strstr(fileName, ".wav") != NULL)
 8001206:	491d      	ldr	r1, [pc, #116]	@ (800127c <listFiles+0xc8>)
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f00b fd5c 	bl	800ccc6 <strstr>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01d      	beq.n	8001250 <listFiles+0x9c>
                {
                    // File with extension .wav get Safed
                    strncpy(fileNamesSDCard[fileCount + 1], fileName, MAX_FILENAME_LENGTH - 1);
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <listFiles+0xcc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	4613      	mov	r3, r2
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <listFiles+0xd0>)
 8001224:	4413      	add	r3, r2
 8001226:	221d      	movs	r2, #29
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f00b fd38 	bl	800cca0 <strncpy>
                    fileNamesSDCard[fileCount][MAX_FILENAME_LENGTH - 1] = '\0'; // Null-terminieren
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <listFiles+0xcc>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4913      	ldr	r1, [pc, #76]	@ (8001284 <listFiles+0xd0>)
 8001236:	4613      	mov	r3, r2
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	440b      	add	r3, r1
 8001240:	331d      	adds	r3, #29
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
                    fileCount++;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <listFiles+0xcc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a0c      	ldr	r2, [pc, #48]	@ (8001280 <listFiles+0xcc>)
 800124e:	6013      	str	r3, [r2, #0]
        while (fileCount < MAX_FILES)
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <listFiles+0xcc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001258:	dbbd      	blt.n	80011d6 <listFiles+0x22>
                }
            }
        }
        f_closedir(&dir);
 800125a:	4804      	ldr	r0, [pc, #16]	@ (800126c <listFiles+0xb8>)
 800125c:	f00b f967 	bl	800c52e <f_closedir>
    }
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800dcb4 	.word	0x0800dcb4
 800126c:	2000d1f8 	.word	0x2000d1f8
 8001270:	2000d1f4 	.word	0x2000d1f4
 8001274:	2000c0a4 	.word	0x2000c0a4
 8001278:	2000c0ba 	.word	0x2000c0ba
 800127c:	0800dcc0 	.word	0x0800dcc0
 8001280:	20010cc4 	.word	0x20010cc4
 8001284:	2000d22c 	.word	0x2000d22c

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128c:	f001 fbe0 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001290:	f000 f872 	bl	8001378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001294:	f000 fb3a 	bl	800190c <MX_GPIO_Init>
  MX_DMA_Init();
 8001298:	f000 faf2 	bl	8001880 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800129c:	f000 fac6 	bl	800182c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012a0:	f000 f98a 	bl	80015b8 <MX_I2C1_Init>
  MX_TIM5_Init();
 80012a4:	f000 fa6c 	bl	8001780 <MX_TIM5_Init>
  MX_ADC1_Init();
 80012a8:	f000 f8d2 	bl	8001450 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012ac:	f000 fa10 	bl	80016d0 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 80012b0:	f000 f9de 	bl	8001670 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80012b4:	f008 ff1a 	bl	800a0ec <MX_FATFS_Init>
  MX_I2S2_Init();
 80012b8:	f000 f9ac 	bl	8001614 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */
  //Start DMA for Read Faders
  HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
 80012bc:	2205      	movs	r2, #5
 80012be:	4922      	ldr	r1, [pc, #136]	@ (8001348 <main+0xc0>)
 80012c0:	4822      	ldr	r0, [pc, #136]	@ (800134c <main+0xc4>)
 80012c2:	f001 fdaf 	bl	8002e24 <HAL_ADC_Start_DMA>


  //Open the file system
  fres = f_mount(&FatFs, SDPath, 1); //1=mount now
 80012c6:	2201      	movs	r2, #1
 80012c8:	4921      	ldr	r1, [pc, #132]	@ (8001350 <main+0xc8>)
 80012ca:	4822      	ldr	r0, [pc, #136]	@ (8001354 <main+0xcc>)
 80012cc:	f00b f876 	bl	800c3bc <f_mount>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <main+0xd0>)
 80012d6:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 80012d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <main+0xd0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <main+0x5c>
      //uart_printf("f_mount error (%i)\r\n", fres);
      while(1);
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <main+0x58>
  }
  //creatFileManagerFile();

  //Get all File Names from SD
  listFiles("/");
 80012e4:	481d      	ldr	r0, [pc, #116]	@ (800135c <main+0xd4>)
 80012e6:	f7ff ff65 	bl	80011b4 <listFiles>
  if (fres != FR_OK) {
      //uart_printf("f_mount error (%i)\r\n", fres);
      while(1);
  }*/
  // Init lcd with the Filename from SD Card
  screenInit(fileNamesSDCard);
 80012ea:	481d      	ldr	r0, [pc, #116]	@ (8001360 <main+0xd8>)
 80012ec:	f7ff fd02 	bl	8000cf4 <screenInit>

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80012f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001364 <main+0xdc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f06f 0201 	mvn.w	r2, #1
 80012f8:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 80012fa:	481a      	ldr	r0, [pc, #104]	@ (8001364 <main+0xdc>)
 80012fc:	f006 fdf2 	bl	8007ee4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { 
	if(updateScreenFlag){
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <main+0xe0>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0fb      	beq.n	8001300 <main+0x78>
		compareADCValues();
 8001308:	f7ff ff02 	bl	8001110 <compareADCValues>
		updateScreenFlag = false;
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <main+0xe0>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]

		if(sortFilesFlag == true){
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <main+0xe4>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <main+0xa2>
		sortFiles();
 800131a:	f7ff fdc9 	bl	8000eb0 <sortFiles>
		setCursor(&fm);
 800131e:	4814      	ldr	r0, [pc, #80]	@ (8001370 <main+0xe8>)
 8001320:	f7ff fb2c 	bl	800097c <setCursor>
		sortFilesFlag = false;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <main+0xe4>)
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
		}
		updateScreen();
 800132a:	f7ff fe7d 	bl	8001028 <updateScreen>
		//writeFileManagerOnSD();
		//readFileManagerFromSD();
		if(adcDmaFlag){
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <main+0xec>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0e4      	beq.n	8001300 <main+0x78>
	    HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
 8001336:	2205      	movs	r2, #5
 8001338:	4903      	ldr	r1, [pc, #12]	@ (8001348 <main+0xc0>)
 800133a:	4804      	ldr	r0, [pc, #16]	@ (800134c <main+0xc4>)
 800133c:	f001 fd72 	bl	8002e24 <HAL_ADC_Start_DMA>
	    adcDmaFlag = false;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <main+0xec>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
	if(updateScreenFlag){
 8001346:	e7db      	b.n	8001300 <main+0x78>
 8001348:	20010ccc 	.word	0x20010ccc
 800134c:	20000128 	.word	0x20000128
 8001350:	200114f4 	.word	0x200114f4
 8001354:	2000c1bc 	.word	0x2000c1bc
 8001358:	2000d1f4 	.word	0x2000d1f4
 800135c:	0800dd88 	.word	0x0800dd88
 8001360:	2000d22c 	.word	0x2000d22c
 8001364:	20000410 	.word	0x20000410
 8001368:	20010cc9 	.word	0x20010cc9
 800136c:	2000009b 	.word	0x2000009b
 8001370:	200004e8 	.word	0x200004e8
 8001374:	20010cc8 	.word	0x20010cc8

08001378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b094      	sub	sp, #80	@ 0x50
 800137c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137e:	f107 0320 	add.w	r3, r7, #32
 8001382:	2230      	movs	r2, #48	@ 0x30
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f00b fc82 	bl	800cc90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b29      	ldr	r3, [pc, #164]	@ (8001448 <SystemClock_Config+0xd0>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	4a28      	ldr	r2, [pc, #160]	@ (8001448 <SystemClock_Config+0xd0>)
 80013a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ac:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <SystemClock_Config+0xd0>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	4b23      	ldr	r3, [pc, #140]	@ (800144c <SystemClock_Config+0xd4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013c4:	4a21      	ldr	r2, [pc, #132]	@ (800144c <SystemClock_Config+0xd4>)
 80013c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b1f      	ldr	r3, [pc, #124]	@ (800144c <SystemClock_Config+0xd4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e0:	2310      	movs	r3, #16
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e8:	2300      	movs	r3, #0
 80013ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013ec:	2310      	movs	r3, #16
 80013ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013f6:	2304      	movs	r3, #4
 80013f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013fa:	2307      	movs	r3, #7
 80013fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	4618      	mov	r0, r3
 8001404:	f004 faf2 	bl	80059ec <HAL_RCC_OscConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800140e:	f000 fb2b 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001416:	2302      	movs	r3, #2
 8001418:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001422:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	2102      	movs	r1, #2
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fd54 	bl	8005edc <HAL_RCC_ClockConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800143a:	f000 fb15 	bl	8001a68 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3750      	adds	r7, #80	@ 0x50
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	@ 0x30
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	f107 0320 	add.w	r3, r7, #32
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001464:	463b      	mov	r3, r7
 8001466:	2220      	movs	r2, #32
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f00b fc10 	bl	800cc90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001470:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <MX_ADC1_Init+0x158>)
 8001472:	4a4e      	ldr	r2, [pc, #312]	@ (80015ac <MX_ADC1_Init+0x15c>)
 8001474:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001476:	4b4c      	ldr	r3, [pc, #304]	@ (80015a8 <MX_ADC1_Init+0x158>)
 8001478:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800147c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147e:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <MX_ADC1_Init+0x158>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001484:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <MX_ADC1_Init+0x158>)
 8001486:	2201      	movs	r2, #1
 8001488:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800148a:	4b47      	ldr	r3, [pc, #284]	@ (80015a8 <MX_ADC1_Init+0x158>)
 800148c:	2201      	movs	r2, #1
 800148e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001490:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <MX_ADC1_Init+0x158>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001498:	4b43      	ldr	r3, [pc, #268]	@ (80015a8 <MX_ADC1_Init+0x158>)
 800149a:	2200      	movs	r2, #0
 800149c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149e:	4b42      	ldr	r3, [pc, #264]	@ (80015a8 <MX_ADC1_Init+0x158>)
 80014a0:	4a43      	ldr	r2, [pc, #268]	@ (80015b0 <MX_ADC1_Init+0x160>)
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a4:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <MX_ADC1_Init+0x158>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <MX_ADC1_Init+0x158>)
 80014ac:	2205      	movs	r2, #5
 80014ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <MX_ADC1_Init+0x158>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <MX_ADC1_Init+0x158>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014be:	483a      	ldr	r0, [pc, #232]	@ (80015a8 <MX_ADC1_Init+0x158>)
 80014c0:	f001 fb5c 	bl	8002b7c <HAL_ADC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80014ca:	f000 facd 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014ce:	2306      	movs	r3, #6
 80014d0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014da:	f107 0320 	add.w	r3, r7, #32
 80014de:	4619      	mov	r1, r3
 80014e0:	4831      	ldr	r0, [pc, #196]	@ (80015a8 <MX_ADC1_Init+0x158>)
 80014e2:	f001 fe07 	bl	80030f4 <HAL_ADC_ConfigChannel>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80014ec:	f000 fabc 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014f0:	2307      	movs	r3, #7
 80014f2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	4619      	mov	r1, r3
 80014fe:	482a      	ldr	r0, [pc, #168]	@ (80015a8 <MX_ADC1_Init+0x158>)
 8001500:	f001 fdf8 	bl	80030f4 <HAL_ADC_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800150a:	f000 faad 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800150e:	2308      	movs	r3, #8
 8001510:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8001512:	2303      	movs	r3, #3
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001516:	f107 0320 	add.w	r3, r7, #32
 800151a:	4619      	mov	r1, r3
 800151c:	4822      	ldr	r0, [pc, #136]	@ (80015a8 <MX_ADC1_Init+0x158>)
 800151e:	f001 fde9 	bl	80030f4 <HAL_ADC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001528:	f000 fa9e 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800152c:	2309      	movs	r3, #9
 800152e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8001530:	2304      	movs	r3, #4
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001534:	f107 0320 	add.w	r3, r7, #32
 8001538:	4619      	mov	r1, r3
 800153a:	481b      	ldr	r0, [pc, #108]	@ (80015a8 <MX_ADC1_Init+0x158>)
 800153c:	f001 fdda 	bl	80030f4 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001546:	f000 fa8f 	bl	8001a68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800154a:	230a      	movs	r3, #10
 800154c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800154e:	2305      	movs	r3, #5
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	4619      	mov	r1, r3
 8001558:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <MX_ADC1_Init+0x158>)
 800155a:	f001 fdcb 	bl	80030f4 <HAL_ADC_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001564:	f000 fa80 	bl	8001a68 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001568:	2306      	movs	r3, #6
 800156a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800157c:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <MX_ADC1_Init+0x164>)
 800157e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_ADC1_Init+0x158>)
 8001592:	f002 f859 	bl	8003648 <HAL_ADCEx_InjectedConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 800159c:	f000 fa64 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3730      	adds	r7, #48	@ 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000128 	.word	0x20000128
 80015ac:	40012000 	.word	0x40012000
 80015b0:	0f000001 	.word	0x0f000001
 80015b4:	000f0001 	.word	0x000f0001

080015b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015be:	4a13      	ldr	r2, [pc, #76]	@ (800160c <MX_I2C1_Init+0x54>)
 80015c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015c4:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <MX_I2C1_Init+0x58>)
 80015c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_I2C1_Init+0x50>)
 80015f6:	f003 f89f 	bl	8004738 <HAL_I2C_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001600:	f000 fa32 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200001d0 	.word	0x200001d0
 800160c:	40005400 	.word	0x40005400
 8001610:	000186a0 	.word	0x000186a0

08001614 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <MX_I2S2_Init+0x54>)
 800161a:	4a14      	ldr	r2, [pc, #80]	@ (800166c <MX_I2S2_Init+0x58>)
 800161c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_I2S2_Init+0x54>)
 8001620:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001624:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_I2S2_Init+0x54>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800162c:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_I2S2_Init+0x54>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <MX_I2S2_Init+0x54>)
 8001634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001638:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <MX_I2S2_Init+0x54>)
 800163c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001640:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_I2S2_Init+0x54>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <MX_I2S2_Init+0x54>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800164e:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <MX_I2S2_Init+0x54>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	@ (8001668 <MX_I2S2_Init+0x54>)
 8001656:	f003 fd1d 	bl	8005094 <HAL_I2S_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8001660:	f000 fa02 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000224 	.word	0x20000224
 800166c:	40003800 	.word	0x40003800

08001670 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	@ (80016cc <MX_SDIO_SD_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001686:	4b10      	ldr	r3, [pc, #64]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 800169e:	480a      	ldr	r0, [pc, #40]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 80016a0:	f004 ff8a 	bl	80065b8 <HAL_SD_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80016aa:	f000 f9dd 	bl	8001a68 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80016ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016b2:	4805      	ldr	r0, [pc, #20]	@ (80016c8 <MX_SDIO_SD_Init+0x58>)
 80016b4:	f005 ff04 	bl	80074c0 <HAL_SD_ConfigWideBusOperation>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80016be:	f000 f9d3 	bl	8001a68 <Error_Handler>
  }

  /* USER CODE END SDIO_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002cc 	.word	0x200002cc
 80016cc:	40012c00 	.word	0x40012c00

080016d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ec:	4b22      	ldr	r3, [pc, #136]	@ (8001778 <MX_TIM3_Init+0xa8>)
 80016ee:	4a23      	ldr	r2, [pc, #140]	@ (800177c <MX_TIM3_Init+0xac>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 80016f2:	4b21      	ldr	r3, [pc, #132]	@ (8001778 <MX_TIM3_Init+0xa8>)
 80016f4:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 80016f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <MX_TIM3_Init+0xa8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001700:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <MX_TIM3_Init+0xa8>)
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_TIM3_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <MX_TIM3_Init+0xa8>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001714:	4818      	ldr	r0, [pc, #96]	@ (8001778 <MX_TIM3_Init+0xa8>)
 8001716:	f006 fb95 	bl	8007e44 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001720:	f000 f9a2 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4619      	mov	r1, r3
 8001730:	4811      	ldr	r0, [pc, #68]	@ (8001778 <MX_TIM3_Init+0xa8>)
 8001732:	f006 fdb2 	bl	800829a <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800173c:	f000 f994 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8001740:	2108      	movs	r1, #8
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <MX_TIM3_Init+0xa8>)
 8001744:	f006 fc5f 	bl	8008006 <HAL_TIM_OnePulse_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800174e:	f000 f98b 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4619      	mov	r1, r3
 800175e:	4806      	ldr	r0, [pc, #24]	@ (8001778 <MX_TIM3_Init+0xa8>)
 8001760:	f006 ffb0 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800176a:	f000 f97d 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000410 	.word	0x20000410
 800177c:	40000400 	.word	0x40000400

08001780 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800179c:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <MX_TIM5_Init+0xa4>)
 800179e:	4a22      	ldr	r2, [pc, #136]	@ (8001828 <MX_TIM5_Init+0xa8>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017a4:	2264      	movs	r2, #100	@ 0x64
 80017a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8400;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017b0:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80017b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017bc:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017c2:	4818      	ldr	r0, [pc, #96]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017c4:	f006 fb3e 	bl	8007e44 <HAL_TIM_Base_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80017ce:	f000 f94b 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	4619      	mov	r1, r3
 80017de:	4811      	ldr	r0, [pc, #68]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017e0:	f006 fd5b 	bl	800829a <HAL_TIM_ConfigClockSource>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80017ea:	f000 f93d 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 80017ee:	2108      	movs	r1, #8
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <MX_TIM5_Init+0xa4>)
 80017f2:	f006 fc08 	bl	8008006 <HAL_TIM_OnePulse_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80017fc:	f000 f934 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	@ (8001824 <MX_TIM5_Init+0xa4>)
 800180e:	f006 ff59 	bl	80086c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001818:	f000 f926 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000458 	.word	0x20000458
 8001828:	40000c00 	.word	0x40000c00

0800182c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 8001832:	4a12      	ldr	r2, [pc, #72]	@ (800187c <MX_USART2_UART_Init+0x50>)
 8001834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 8001838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800183c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183e:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800184a:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001850:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 8001852:	220c      	movs	r2, #12
 8001854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_USART2_UART_Init+0x4c>)
 8001864:	f006 ffb0 	bl	80087c8 <HAL_UART_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800186e:	f000 f8fb 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200004a0 	.word	0x200004a0
 800187c:	40004400 	.word	0x40004400

08001880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <MX_DMA_Init+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a1e      	ldr	r2, [pc, #120]	@ (8001908 <MX_DMA_Init+0x88>)
 8001890:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <MX_DMA_Init+0x88>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <MX_DMA_Init+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <MX_DMA_Init+0x88>)
 80018ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <MX_DMA_Init+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	200f      	movs	r0, #15
 80018c4:	f002 f931 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018c8:	200f      	movs	r0, #15
 80018ca:	f002 f94a 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	2038      	movs	r0, #56	@ 0x38
 80018d4:	f002 f929 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018d8:	2038      	movs	r0, #56	@ 0x38
 80018da:	f002 f942 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	203b      	movs	r0, #59	@ 0x3b
 80018e4:	f002 f921 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018e8:	203b      	movs	r0, #59	@ 0x3b
 80018ea:	f002 f93a 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2045      	movs	r0, #69	@ 0x45
 80018f4:	f002 f919 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80018f8:	2045      	movs	r0, #69	@ 0x45
 80018fa:	f002 f932 	bl	8003b62 <HAL_NVIC_EnableIRQ>

}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b4d      	ldr	r3, [pc, #308]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a5c <MX_GPIO_Init+0x150>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b46      	ldr	r3, [pc, #280]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a45      	ldr	r2, [pc, #276]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b43      	ldr	r3, [pc, #268]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a3e      	ldr	r2, [pc, #248]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a5c <MX_GPIO_Init+0x150>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <MX_GPIO_Init+0x150>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a37      	ldr	r2, [pc, #220]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b35      	ldr	r3, [pc, #212]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b31      	ldr	r3, [pc, #196]	@ (8001a5c <MX_GPIO_Init+0x150>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a30      	ldr	r2, [pc, #192]	@ (8001a5c <MX_GPIO_Init+0x150>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a5c <MX_GPIO_Init+0x150>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2120      	movs	r1, #32
 80019b2:	482b      	ldr	r0, [pc, #172]	@ (8001a60 <MX_GPIO_Init+0x154>)
 80019b4:	f002 fe8e 	bl	80046d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4825      	ldr	r0, [pc, #148]	@ (8001a64 <MX_GPIO_Init+0x158>)
 80019d0:	f002 fce4 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_a_clk_in1_Pin enc_switch_in3_Pin */
  GPIO_InitStruct.Pin = enc_a_clk_in1_Pin|enc_switch_in3_Pin;
 80019d4:	2311      	movs	r3, #17
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019de:	2301      	movs	r3, #1
 80019e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	481d      	ldr	r0, [pc, #116]	@ (8001a60 <MX_GPIO_Init+0x154>)
 80019ea:	f002 fcd7 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_b_dt_in2_Pin */
  GPIO_InitStruct.Pin = enc_b_dt_in2_Pin;
 80019ee:	2302      	movs	r3, #2
 80019f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(enc_b_dt_in2_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 0314 	add.w	r3, r7, #20
 80019fe:	4619      	mov	r1, r3
 8001a00:	4817      	ldr	r0, [pc, #92]	@ (8001a60 <MX_GPIO_Init+0x154>)
 8001a02:	f002 fccb 	bl	800439c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a06:	2320      	movs	r3, #32
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4810      	ldr	r0, [pc, #64]	@ (8001a60 <MX_GPIO_Init+0x154>)
 8001a1e:	f002 fcbd 	bl	800439c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2006      	movs	r0, #6
 8001a28:	f002 f87f 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a2c:	2006      	movs	r0, #6
 8001a2e:	f002 f898 	bl	8003b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	200a      	movs	r0, #10
 8001a38:	f002 f877 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	f002 f890 	bl	8003b62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2028      	movs	r0, #40	@ 0x28
 8001a48:	f002 f86f 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a4c:	2028      	movs	r0, #40	@ 0x28
 8001a4e:	f002 f888 	bl	8003b62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	@ 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000
 8001a64:	40020800 	.word	0x40020800

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001a80:	230a      	movs	r3, #10
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	2301      	movs	r3, #1
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	1cfb      	adds	r3, r7, #3
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2178      	movs	r1, #120	@ 0x78
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f002 ff94 	bl	80049c0 <HAL_I2C_Mem_Write>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001aac:	2064      	movs	r0, #100	@ 0x64
 8001aae:	f001 f841 	bl	8002b34 <HAL_Delay>
    int status = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]

    // Init LCD

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYOFF);               // 0xAE
 8001ab6:	21ae      	movs	r1, #174	@ 0xae
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffdb 	bl	8001a74 <ssd1306_WriteCommand>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYCLOCKDIV);
 8001ac8:	21d5      	movs	r1, #213	@ 0xd5
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffd2 	bl	8001a74 <ssd1306_WriteCommand>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x51); // 0xd5, 0x51,
 8001ada:	2151      	movs	r1, #81	@ 0x51
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffc9 	bl	8001a74 <ssd1306_WriteCommand>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_MEMORYMODE);
 8001aec:	2120      	movs	r1, #32
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ffc0 	bl	8001a74 <ssd1306_WriteCommand>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
status += ssd1306_WriteCommand(hi2c, 0x00); // 0x00 for Horizontal addressing mode
 8001afe:	2100      	movs	r1, #0
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ffb7 	bl	8001a74 <ssd1306_WriteCommand>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETCONTRAST); 
 8001b10:	2181      	movs	r1, #129	@ 0x81
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffae 	bl	8001a74 <ssd1306_WriteCommand>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x4F);       // 0x81, 0x4F
 8001b22:	214f      	movs	r1, #79	@ 0x4f
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffa5 	bl	8001a74 <ssd1306_WriteCommand>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DCDC) ;
 8001b34:	21ad      	movs	r1, #173	@ 0xad
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ff9c 	bl	8001a74 <ssd1306_WriteCommand>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8A);               // 0xAD, 0x8A
 8001b46:	218a      	movs	r1, #138	@ 0x8a
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff93 	bl	8001a74 <ssd1306_WriteCommand>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SEGREMAP);                 // 0xA0
 8001b58:	21a0      	movs	r1, #160	@ 0xa0
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ff8a 	bl	8001a74 <ssd1306_WriteCommand>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_COMSCANINC);               // 0xC0
 8001b6a:	21c0      	movs	r1, #192	@ 0xc0
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff81 	bl	8001a74 <ssd1306_WriteCommand>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPSTARTLINE);
 8001b7c:	21dc      	movs	r1, #220	@ 0xdc
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ff78 	bl	8001a74 <ssd1306_WriteCommand>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x0);    // 0xDC 0x00
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff6f 	bl	8001a74 <ssd1306_WriteCommand>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 8001ba0:	21d3      	movs	r1, #211	@ 0xd3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ff66 	bl	8001a74 <ssd1306_WriteCommand>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x60);   // 0xd3, 0x60,
 8001bb2:	2160      	movs	r1, #96	@ 0x60
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff5d 	bl	8001a74 <ssd1306_WriteCommand>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPRECHARGE); 
 8001bc4:	21d9      	movs	r1, #217	@ 0xd9
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff54 	bl	8001a74 <ssd1306_WriteCommand>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);       // 0xd9, 0x22,
 8001bd6:	2122      	movs	r1, #34	@ 0x22
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff4b 	bl	8001a74 <ssd1306_WriteCommand>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETVCOMDETECT); 
 8001be8:	21db      	movs	r1, #219	@ 0xdb
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff42 	bl	8001a74 <ssd1306_WriteCommand>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x35);      // 0xdb, 0x35,
 8001bfa:	2135      	movs	r1, #53	@ 0x35
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff39 	bl	8001a74 <ssd1306_WriteCommand>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPAGEADDR);                  // 0xb0
 8001c0c:	21b0      	movs	r1, #176	@ 0xb0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff30 	bl	8001a74 <ssd1306_WriteCommand>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]

    // status += ssd1306_WriteCommand(hi2c, H110X_SETCOMPINS);
    // status += ssd1306_WriteCommand(hi2c,  0x12);             // 0xda, 0x12,
    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYALLON_RESUME); // 0xa4
 8001c1e:	21a4      	movs	r1, #164	@ 0xa4
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ff27 	bl	8001a74 <ssd1306_WriteCommand>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_NORMALDISPLAY);       // 0xa6
 8001c30:	21a6      	movs	r1, #166	@ 0xa6
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff1e 	bl	8001a74 <ssd1306_WriteCommand>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 8001c42:	21d3      	movs	r1, #211	@ 0xd3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ff15 	bl	8001a74 <ssd1306_WriteCommand>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);
 8001c54:	2100      	movs	r1, #0
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff0c 	bl	8001a74 <ssd1306_WriteCommand>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETMULTIPLEX);
 8001c66:	21a8      	movs	r1, #168	@ 0xa8
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff03 	bl	8001a74 <ssd1306_WriteCommand>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x7F);
 8001c78:	217f      	movs	r1, #127	@ 0x7f
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fefa 	bl	8001a74 <ssd1306_WriteCommand>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYON);
 8001c8a:	21af      	movs	r1, #175	@ 0xaf
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fef1 	bl	8001a74 <ssd1306_WriteCommand>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <ssd1306_Init+0x202>
        return 1;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <ssd1306_Init+0x222>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 f814 	bl	8001cd4 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f835 	bl	8001d1c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <ssd1306_Init+0x22c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <ssd1306_Init+0x22c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001cbe:	4b04      	ldr	r3, [pc, #16]	@ (8001cd0 <ssd1306_Init+0x22c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	715a      	strb	r2, [r3, #5]

    return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200114e0 	.word	0x200114e0

08001cd4 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e00d      	b.n	8001d00 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <ssd1306_Fill+0x1a>
 8001cea:	2100      	movs	r1, #0
 8001cec:	e000      	b.n	8001cf0 <ssd1306_Fill+0x1c>
 8001cee:	21ff      	movs	r1, #255	@ 0xff
 8001cf0:	4a09      	ldr	r2, [pc, #36]	@ (8001d18 <ssd1306_Fill+0x44>)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d06:	d3ed      	bcc.n	8001ce4 <ssd1306_Fill+0x10>
    }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20010ce0 	.word	0x20010ce0

08001d1c <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af04      	add	r7, sp, #16
 8001d22:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 16; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e020      	b.n	8001d6c <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	3b50      	subs	r3, #80	@ 0x50
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4619      	mov	r1, r3
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fe9e 	bl	8001a74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001d38:	2100      	movs	r1, #0
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fe9a 	bl	8001a74 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001d40:	2110      	movs	r1, #16
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fe96 	bl	8001a74 <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	01db      	lsls	r3, r3, #7
 8001d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d7c <ssd1306_UpdateScreen+0x60>)
 8001d4e:	4413      	add	r3, r2
 8001d50:	2264      	movs	r2, #100	@ 0x64
 8001d52:	9202      	str	r2, [sp, #8]
 8001d54:	2280      	movs	r2, #128	@ 0x80
 8001d56:	9201      	str	r2, [sp, #4]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	2240      	movs	r2, #64	@ 0x40
 8001d5e:	2178      	movs	r1, #120	@ 0x78
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f002 fe2d 	bl	80049c0 <HAL_I2C_Mem_Write>
    for (i = 0; i < 16; i++) {
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	d9db      	bls.n	8001d2a <ssd1306_UpdateScreen+0xe>
    }
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20010ce0 	.word	0x20010ce0

08001d80 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	71bb      	strb	r3, [r7, #6]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db49      	blt.n	8001e2e <ssd1306_DrawPixel+0xae>
 8001d9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	db45      	blt.n	8001e2e <ssd1306_DrawPixel+0xae>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001da2:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <ssd1306_DrawPixel+0xbc>)
 8001da4:	791b      	ldrb	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <ssd1306_DrawPixel+0x38>
    {
        color = (SSD1306_COLOR)!color;
 8001daa:	797b      	ldrb	r3, [r7, #5]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001db8:	797b      	ldrb	r3, [r7, #5]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d11a      	bne.n	8001df4 <ssd1306_DrawPixel+0x74>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	79bb      	ldrb	r3, [r7, #6]
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	b2d8      	uxtb	r0, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	01db      	lsls	r3, r3, #7
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e40 <ssd1306_DrawPixel+0xc0>)
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	4313      	orrs	r3, r2
 8001de2:	b259      	sxtb	r1, r3
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	4603      	mov	r3, r0
 8001de8:	01db      	lsls	r3, r3, #7
 8001dea:	4413      	add	r3, r2
 8001dec:	b2c9      	uxtb	r1, r1
 8001dee:	4a14      	ldr	r2, [pc, #80]	@ (8001e40 <ssd1306_DrawPixel+0xc0>)
 8001df0:	54d1      	strb	r1, [r2, r3]
 8001df2:	e01d      	b.n	8001e30 <ssd1306_DrawPixel+0xb0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001df4:	79fa      	ldrb	r2, [r7, #7]
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	b2d8      	uxtb	r0, r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	01db      	lsls	r3, r3, #7
 8001e00:	4413      	add	r3, r2
 8001e02:	4a0f      	ldr	r2, [pc, #60]	@ (8001e40 <ssd1306_DrawPixel+0xc0>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	b25a      	sxtb	r2, r3
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	2101      	movs	r1, #1
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	b259      	sxtb	r1, r3
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	4603      	mov	r3, r0
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	4413      	add	r3, r2
 8001e26:	b2c9      	uxtb	r1, r1
 8001e28:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <ssd1306_DrawPixel+0xc0>)
 8001e2a:	54d1      	strb	r1, [r2, r3]
 8001e2c:	e000      	b.n	8001e30 <ssd1306_DrawPixel+0xb0>
        return;
 8001e2e:	bf00      	nop
    }
}
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	200114e0 	.word	0x200114e0
 8001e40:	20010ce0 	.word	0x20010ce0

08001e44 <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	1d38      	adds	r0, r7, #4
 8001e4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001e52:	461a      	mov	r2, r3
 8001e54:	4623      	mov	r3, r4
 8001e56:	73fb      	strb	r3, [r7, #15]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e5c:	4b38      	ldr	r3, [pc, #224]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	793b      	ldrb	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e68:	dc06      	bgt.n	8001e78 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001e6a:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001e6c:	885b      	ldrh	r3, [r3, #2]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	797b      	ldrb	r3, [r7, #5]
 8001e72:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001e74:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e76:	dd01      	ble.n	8001e7c <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e05c      	b.n	8001f36 <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	e04c      	b.n	8001f1c <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	3b20      	subs	r3, #32
 8001e88:	7979      	ldrb	r1, [r7, #5]
 8001e8a:	fb01 f303 	mul.w	r3, r1, r3
 8001e8e:	4619      	mov	r1, r3
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	440b      	add	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	e034      	b.n	8001f0c <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001eb2:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b2d8      	uxtb	r0, r3
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	7bba      	ldrb	r2, [r7, #14]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7ff ff55 	bl	8001d80 <ssd1306_DrawPixel>
 8001ed6:	e016      	b.n	8001f06 <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2d8      	uxtb	r0, r3
 8001ee6:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001ee8:	885b      	ldrh	r3, [r3, #2]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2d9      	uxtb	r1, r3
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf0c      	ite	eq
 8001efa:	2301      	moveq	r3, #1
 8001efc:	2300      	movne	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff ff3d 	bl	8001d80 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	793b      	ldrb	r3, [r7, #4]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d3c5      	bcc.n	8001ea2 <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	797b      	ldrb	r3, [r7, #5]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d3ad      	bcc.n	8001e82 <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	793a      	ldrb	r2, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <ssd1306_WriteChar+0xfc>)
 8001f32:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	@ 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200114e0 	.word	0x200114e0

08001f44 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	1d38      	adds	r0, r7, #4
 8001f4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f52:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001f54:	e012      	b.n	8001f7c <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	7818      	ldrb	r0, [r3, #0]
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	1d3a      	adds	r2, r7, #4
 8001f5e:	ca06      	ldmia	r2, {r1, r2}
 8001f60:	f7ff ff70 	bl	8001e44 <ssd1306_WriteChar>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d002      	beq.n	8001f76 <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	e008      	b.n	8001f88 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1e8      	bne.n	8001f56 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	781b      	ldrb	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ssd1306_SetCursor>:

//
//  Set cursor_index position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <ssd1306_SetCursor+0x2c>)
 8001fa6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001fa8:	79bb      	ldrb	r3, [r7, #6]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <ssd1306_SetCursor+0x2c>)
 8001fae:	805a      	strh	r2, [r3, #2]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	200114e0 	.word	0x200114e0

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b14      	ldr	r3, [pc, #80]	@ (800201c <HAL_MspInit+0x5c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a13      	ldr	r2, [pc, #76]	@ (800201c <HAL_MspInit+0x5c>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <HAL_MspInit+0x5c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_MspInit+0x5c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a0c      	ldr	r2, [pc, #48]	@ (800201c <HAL_MspInit+0x5c>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_MspInit+0x5c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ffe:	2007      	movs	r0, #7
 8002000:	f001 fd88 	bl	8003b14 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2051      	movs	r0, #81	@ 0x51
 800200a:	f001 fd8e 	bl	8003b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800200e:	2051      	movs	r0, #81	@ 0x51
 8002010:	f001 fda7 	bl	8003b62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	@ 0x30
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a4d      	ldr	r2, [pc, #308]	@ (8002174 <HAL_ADC_MspInit+0x154>)
 800203e:	4293      	cmp	r3, r2
 8002040:	f040 8094 	bne.w	800216c <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	4a4a      	ldr	r2, [pc, #296]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 800204e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002052:	6453      	str	r3, [r2, #68]	@ 0x44
 8002054:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 8002056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	4b44      	ldr	r3, [pc, #272]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	4a43      	ldr	r2, [pc, #268]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	4b3d      	ldr	r3, [pc, #244]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 8002082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002084:	4a3c      	ldr	r2, [pc, #240]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6313      	str	r3, [r2, #48]	@ 0x30
 800208c:	4b3a      	ldr	r3, [pc, #232]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	4a35      	ldr	r2, [pc, #212]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a8:	4b33      	ldr	r3, [pc, #204]	@ (8002178 <HAL_ADC_MspInit+0x158>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = FADER_IN5_Pin;
 80020b4:	2301      	movs	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b8:	2303      	movs	r3, #3
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FADER_IN5_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	482d      	ldr	r0, [pc, #180]	@ (800217c <HAL_ADC_MspInit+0x15c>)
 80020c8:	f002 f968 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FADER_IN1_Pin|FADER_IN2_Pin;
 80020cc:	23c0      	movs	r3, #192	@ 0xc0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d0:	2303      	movs	r3, #3
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4828      	ldr	r0, [pc, #160]	@ (8002180 <HAL_ADC_MspInit+0x160>)
 80020e0:	f002 f95c 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FADER_IN3_Pin|FADER_IN4_Pin;
 80020e4:	2303      	movs	r3, #3
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e8:	2303      	movs	r3, #3
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	4823      	ldr	r0, [pc, #140]	@ (8002184 <HAL_ADC_MspInit+0x164>)
 80020f8:	f002 f950 	bl	800439c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020fc:	4b22      	ldr	r3, [pc, #136]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 80020fe:	4a23      	ldr	r2, [pc, #140]	@ (800218c <HAL_ADC_MspInit+0x16c>)
 8002100:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002102:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002104:	2200      	movs	r2, #0
 8002106:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002108:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800210e:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002114:	4b1c      	ldr	r3, [pc, #112]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002116:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800211a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 800211e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002122:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002124:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002126:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800212a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 800212e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002132:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800213a:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 800213c:	2200      	movs	r2, #0
 800213e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002140:	4811      	ldr	r0, [pc, #68]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002142:	f001 fd29 	bl	8003b98 <HAL_DMA_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800214c:	f7ff fc8c 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002154:	639a      	str	r2, [r3, #56]	@ 0x38
 8002156:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <HAL_ADC_MspInit+0x168>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2012      	movs	r0, #18
 8002162:	f001 fce2 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002166:	2012      	movs	r0, #18
 8002168:	f001 fcfb 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	3730      	adds	r7, #48	@ 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40012000 	.word	0x40012000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020800 	.word	0x40020800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	20000170 	.word	0x20000170
 800218c:	40026410 	.word	0x40026410

08002190 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a19      	ldr	r2, [pc, #100]	@ (8002214 <HAL_I2C_MspInit+0x84>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d12b      	bne.n	800220a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_I2C_MspInit+0x88>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <HAL_I2C_MspInit+0x88>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <HAL_I2C_MspInit+0x88>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021ce:	23c0      	movs	r3, #192	@ 0xc0
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d2:	2312      	movs	r3, #18
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d6:	2301      	movs	r3, #1
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021de:	2304      	movs	r3, #4
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <HAL_I2C_MspInit+0x8c>)
 80021ea:	f002 f8d7 	bl	800439c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_I2C_MspInit+0x88>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HAL_I2C_MspInit+0x88>)
 80021f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_I2C_MspInit+0x88>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	@ 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40005400 	.word	0x40005400
 8002218:	40023800 	.word	0x40023800
 800221c:	40020400 	.word	0x40020400

08002220 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b090      	sub	sp, #64	@ 0x40
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a55      	ldr	r2, [pc, #340]	@ (80023a4 <HAL_I2S_MspInit+0x184>)
 800224e:	4293      	cmp	r3, r2
 8002250:	f040 80a3 	bne.w	800239a <HAL_I2S_MspInit+0x17a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002258:	23c0      	movs	r3, #192	@ 0xc0
 800225a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800225c:	2302      	movs	r3, #2
 800225e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	4618      	mov	r0, r3
 8002266:	f004 f859 	bl	800631c <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8002270:	f7ff fbfa 	bl	8001a68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	4b4b      	ldr	r3, [pc, #300]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	4a4a      	ldr	r2, [pc, #296]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 800227e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002282:	6413      	str	r3, [r2, #64]	@ 0x40
 8002284:	4b48      	ldr	r3, [pc, #288]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	4b44      	ldr	r3, [pc, #272]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	4a43      	ldr	r2, [pc, #268]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a0:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	2300      	movs	r3, #0
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	4a3c      	ldr	r2, [pc, #240]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80022bc:	4b3a      	ldr	r3, [pc, #232]	@ (80023a8 <HAL_I2S_MspInit+0x188>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c8:	2308      	movs	r3, #8
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022d8:	2305      	movs	r3, #5
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022e0:	4619      	mov	r1, r3
 80022e2:	4832      	ldr	r0, [pc, #200]	@ (80023ac <HAL_I2S_MspInit+0x18c>)
 80022e4:	f002 f85a 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80022e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022fa:	2305      	movs	r3, #5
 80022fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002302:	4619      	mov	r1, r3
 8002304:	482a      	ldr	r0, [pc, #168]	@ (80023b0 <HAL_I2S_MspInit+0x190>)
 8002306:	f002 f849 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800230a:	2340      	movs	r3, #64	@ 0x40
 800230c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230e:	2302      	movs	r3, #2
 8002310:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800231a:	2305      	movs	r3, #5
 800231c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002322:	4619      	mov	r1, r3
 8002324:	4821      	ldr	r0, [pc, #132]	@ (80023ac <HAL_I2S_MspInit+0x18c>)
 8002326:	f002 f839 	bl	800439c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800232a:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 800232c:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <HAL_I2S_MspInit+0x198>)
 800232e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002330:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002336:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002338:	2240      	movs	r2, #64	@ 0x40
 800233a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002348:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 800234c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002350:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002352:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002354:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002358:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800235a:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 800235c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002360:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002362:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002368:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800236e:	4811      	ldr	r0, [pc, #68]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002370:	f001 fc12 	bl	8003b98 <HAL_DMA_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2S_MspInit+0x15e>
    {
      Error_Handler();
 800237a:	f7ff fb75 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a0c      	ldr	r2, [pc, #48]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002382:	639a      	str	r2, [r3, #56]	@ 0x38
 8002384:	4a0b      	ldr	r2, [pc, #44]	@ (80023b4 <HAL_I2S_MspInit+0x194>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2024      	movs	r0, #36	@ 0x24
 8002390:	f001 fbcb 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002394:	2024      	movs	r0, #36	@ 0x24
 8002396:	f001 fbe4 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3740      	adds	r7, #64	@ 0x40
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40003800 	.word	0x40003800
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020400 	.word	0x40020400
 80023b4:	2000026c 	.word	0x2000026c
 80023b8:	40026070 	.word	0x40026070

080023bc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	@ 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a70      	ldr	r2, [pc, #448]	@ (800259c <HAL_SD_MspInit+0x1e0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	f040 80da 	bne.w	8002594 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	4b6e      	ldr	r3, [pc, #440]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	4a6d      	ldr	r2, [pc, #436]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 80023ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f0:	4b6b      	ldr	r3, [pc, #428]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 80023f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	4b67      	ldr	r3, [pc, #412]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002404:	4a66      	ldr	r2, [pc, #408]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6313      	str	r3, [r2, #48]	@ 0x30
 800240c:	4b64      	ldr	r3, [pc, #400]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	4b60      	ldr	r3, [pc, #384]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	4a5f      	ldr	r2, [pc, #380]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	6313      	str	r3, [r2, #48]	@ 0x30
 8002428:	4b5d      	ldr	r3, [pc, #372]	@ (80025a0 <HAL_SD_MspInit+0x1e4>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002434:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800243e:	2301      	movs	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002446:	230c      	movs	r3, #12
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	4854      	ldr	r0, [pc, #336]	@ (80025a4 <HAL_SD_MspInit+0x1e8>)
 8002452:	f001 ffa3 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002456:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800245a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002468:	230c      	movs	r3, #12
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	484c      	ldr	r0, [pc, #304]	@ (80025a4 <HAL_SD_MspInit+0x1e8>)
 8002474:	f001 ff92 	bl	800439c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002478:	2304      	movs	r3, #4
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002480:	2301      	movs	r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002488:	230c      	movs	r3, #12
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4845      	ldr	r0, [pc, #276]	@ (80025a8 <HAL_SD_MspInit+0x1ec>)
 8002494:	f001 ff82 	bl	800439c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002498:	4b44      	ldr	r3, [pc, #272]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 800249a:	4a45      	ldr	r2, [pc, #276]	@ (80025b0 <HAL_SD_MspInit+0x1f4>)
 800249c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800249e:	4b43      	ldr	r3, [pc, #268]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024a4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a6:	4b41      	ldr	r3, [pc, #260]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	4b3f      	ldr	r3, [pc, #252]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024b2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ba:	4b3c      	ldr	r3, [pc, #240]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024c2:	4b3a      	ldr	r3, [pc, #232]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024c8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80024ca:	4b38      	ldr	r3, [pc, #224]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024cc:	2220      	movs	r2, #32
 80024ce:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024d0:	4b36      	ldr	r3, [pc, #216]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024d6:	4b35      	ldr	r3, [pc, #212]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024d8:	2204      	movs	r2, #4
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024dc:	4b33      	ldr	r3, [pc, #204]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024de:	2203      	movs	r2, #3
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80024ea:	4b30      	ldr	r3, [pc, #192]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80024f2:	482e      	ldr	r0, [pc, #184]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 80024f4:	f001 fb50 	bl	8003b98 <HAL_DMA_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80024fe:	f7ff fab3 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a29      	ldr	r2, [pc, #164]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
 8002508:	4a28      	ldr	r2, [pc, #160]	@ (80025ac <HAL_SD_MspInit+0x1f0>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800250e:	4b29      	ldr	r3, [pc, #164]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002510:	4a29      	ldr	r2, [pc, #164]	@ (80025b8 <HAL_SD_MspInit+0x1fc>)
 8002512:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002514:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002516:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800251a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800251c:	4b25      	ldr	r3, [pc, #148]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 800251e:	2240      	movs	r2, #64	@ 0x40
 8002520:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002524:	2200      	movs	r2, #0
 8002526:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002528:	4b22      	ldr	r3, [pc, #136]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 800252a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800252e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002530:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002532:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002536:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002538:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 800253a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800253e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002540:	4b1c      	ldr	r3, [pc, #112]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002542:	2220      	movs	r2, #32
 8002544:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002546:	4b1b      	ldr	r3, [pc, #108]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 800254e:	2204      	movs	r2, #4
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002552:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002554:	2203      	movs	r2, #3
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002558:	4b16      	ldr	r3, [pc, #88]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 800255a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800255e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002560:	4b14      	ldr	r3, [pc, #80]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002562:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002568:	4812      	ldr	r0, [pc, #72]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 800256a:	f001 fb15 	bl	8003b98 <HAL_DMA_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002574:	f7ff fa78 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 800257c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800257e:	4a0d      	ldr	r2, [pc, #52]	@ (80025b4 <HAL_SD_MspInit+0x1f8>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	2031      	movs	r0, #49	@ 0x31
 800258a:	f001 face 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800258e:	2031      	movs	r0, #49	@ 0x31
 8002590:	f001 fae7 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002594:	bf00      	nop
 8002596:	3728      	adds	r7, #40	@ 0x28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020c00 	.word	0x40020c00
 80025ac:	20000350 	.word	0x20000350
 80025b0:	40026458 	.word	0x40026458
 80025b4:	200003b0 	.word	0x200003b0
 80025b8:	400264a0 	.word	0x400264a0

080025bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <HAL_TIM_Base_MspInit+0x80>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d116      	bne.n	80025fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <HAL_TIM_Base_MspInit+0x84>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002640 <HAL_TIM_Base_MspInit+0x84>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <HAL_TIM_Base_MspInit+0x84>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	201d      	movs	r0, #29
 80025f0:	f001 fa9b 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025f4:	201d      	movs	r0, #29
 80025f6:	f001 fab4 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80025fa:	e01a      	b.n	8002632 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a10      	ldr	r2, [pc, #64]	@ (8002644 <HAL_TIM_Base_MspInit+0x88>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d115      	bne.n	8002632 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b0d      	ldr	r3, [pc, #52]	@ (8002640 <HAL_TIM_Base_MspInit+0x84>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <HAL_TIM_Base_MspInit+0x84>)
 8002610:	f043 0308 	orr.w	r3, r3, #8
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_TIM_Base_MspInit+0x84>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	2032      	movs	r0, #50	@ 0x32
 8002628:	f001 fa7f 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800262c:	2032      	movs	r0, #50	@ 0x32
 800262e:	f001 fa98 	bl	8003b62 <HAL_NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40000400 	.word	0x40000400
 8002640:	40023800 	.word	0x40023800
 8002644:	40000c00 	.word	0x40000c00

08002648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_UART_MspInit+0x94>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d133      	bne.n	80026d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b1c      	ldr	r3, [pc, #112]	@ (80026e0 <HAL_UART_MspInit+0x98>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a1b      	ldr	r2, [pc, #108]	@ (80026e0 <HAL_UART_MspInit+0x98>)
 8002674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_UART_MspInit+0x98>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_UART_MspInit+0x98>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a14      	ldr	r2, [pc, #80]	@ (80026e0 <HAL_UART_MspInit+0x98>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_UART_MspInit+0x98>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026a2:	230c      	movs	r3, #12
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b2:	2307      	movs	r3, #7
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4809      	ldr	r0, [pc, #36]	@ (80026e4 <HAL_UART_MspInit+0x9c>)
 80026be:	f001 fe6d 	bl	800439c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	2026      	movs	r0, #38	@ 0x26
 80026c8:	f001 fa2f 	bl	8003b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026cc:	2026      	movs	r0, #38	@ 0x26
 80026ce:	f001 fa48 	bl	8003b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026d2:	bf00      	nop
 80026d4:	3728      	adds	r7, #40	@ 0x28
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40004400 	.word	0x40004400
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026ec:	bf00      	nop
 80026ee:	e7fd      	b.n	80026ec <NMI_Handler+0x4>

080026f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <HardFault_Handler+0x4>

080026f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <MemManage_Handler+0x4>

08002700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <BusFault_Handler+0x4>

08002708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <UsageFault_Handler+0x4>

08002710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273e:	f000 f9d9 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}

08002746 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_a_clk_in1_Pin);
 800274a:	2001      	movs	r0, #1
 800274c:	f001 ffdc 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_switch_in3_Pin);
 8002758:	2010      	movs	r0, #16
 800275a:	f001 ffd5 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <DMA1_Stream4_IRQHandler+0x10>)
 800276a:	f001 fbad 	bl	8003ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000026c 	.word	0x2000026c

08002778 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <ADC_IRQHandler+0x10>)
 800277e:	f000 fa40 	bl	8002c02 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000128 	.word	0x20000128

0800278c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002790:	4802      	ldr	r0, [pc, #8]	@ (800279c <TIM3_IRQHandler+0x10>)
 8002792:	f005 fc92 	bl	80080ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000410 	.word	0x20000410

080027a0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 80027a4:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <SPI2_IRQHandler+0x10>)
 80027a6:	f002 fdb5 	bl	8005314 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000224 	.word	0x20000224

080027b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <USART2_IRQHandler+0x10>)
 80027ba:	f006 f855 	bl	8008868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200004a0 	.word	0x200004a0

080027c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027d0:	f001 ff9a 	bl	8004708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <SDIO_IRQHandler+0x10>)
 80027de:	f004 fb0f 	bl	8006e00 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200002cc 	.word	0x200002cc

080027ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80027f0:	4802      	ldr	r0, [pc, #8]	@ (80027fc <TIM5_IRQHandler+0x10>)
 80027f2:	f005 fc62 	bl	80080ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000458 	.word	0x20000458

08002800 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002804:	4802      	ldr	r0, [pc, #8]	@ (8002810 <DMA2_Stream0_IRQHandler+0x10>)
 8002806:	f001 fb5f 	bl	8003ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000170 	.word	0x20000170

08002814 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002818:	4802      	ldr	r0, [pc, #8]	@ (8002824 <DMA2_Stream3_IRQHandler+0x10>)
 800281a:	f001 fb55 	bl	8003ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000350 	.word	0x20000350

08002828 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800282c:	4802      	ldr	r0, [pc, #8]	@ (8002838 <DMA2_Stream6_IRQHandler+0x10>)
 800282e:	f001 fb4b 	bl	8003ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200003b0 	.word	0x200003b0

0800283c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  return 1;
 800284e:	2301      	movs	r3, #1
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_kill>:

int _kill(int pid, int sig)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002864:	f00a fa8c 	bl	800cd80 <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	2216      	movs	r2, #22
 800286c:	601a      	str	r2, [r3, #0]
  return -1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <_exit>:

void _exit (int status)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002882:	f04f 31ff 	mov.w	r1, #4294967295
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffe7 	bl	800285a <_kill>
  while (1) {}    /* Make sure we hang here */
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <_exit+0x12>

08002890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	e00a      	b.n	80028b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028a2:	f3af 8000 	nop.w
 80028a6:	4601      	mov	r1, r0
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	60ba      	str	r2, [r7, #8]
 80028ae:	b2ca      	uxtb	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	3301      	adds	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	dbf0      	blt.n	80028a2 <_read+0x12>
  }

  return len;
 80028c0:	687b      	ldr	r3, [r7, #4]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e009      	b.n	80028f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	60ba      	str	r2, [r7, #8]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3301      	adds	r3, #1
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	dbf1      	blt.n	80028dc <_write+0x12>
  }
  return len;
 80028f8:	687b      	ldr	r3, [r7, #4]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <_close>:

int _close(int file)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800292a:	605a      	str	r2, [r3, #4]
  return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <_isatty>:

int _isatty(int file)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <_sbrk+0x5c>)
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <_sbrk+0x60>)
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <_sbrk+0x64>)
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <_sbrk+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d207      	bcs.n	80029ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800299c:	f00a f9f0 	bl	800cd80 <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	e009      	b.n	80029c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <_sbrk+0x64>)
 80029bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20018000 	.word	0x20018000
 80029cc:	00000400 	.word	0x00000400
 80029d0:	200114e8 	.word	0x200114e8
 80029d4:	20011878 	.word	0x20011878

080029d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <SystemInit+0x20>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <SystemInit+0x20>)
 80029e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a00:	f7ff ffea 	bl	80029d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a04:	480c      	ldr	r0, [pc, #48]	@ (8002a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a06:	490d      	ldr	r1, [pc, #52]	@ (8002a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a08:	4a0d      	ldr	r2, [pc, #52]	@ (8002a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a0c:	e002      	b.n	8002a14 <LoopCopyDataInit>

08002a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a12:	3304      	adds	r3, #4

08002a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a18:	d3f9      	bcc.n	8002a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a20:	e001      	b.n	8002a26 <LoopFillZerobss>

08002a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a24:	3204      	adds	r2, #4

08002a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a28:	d3fb      	bcc.n	8002a22 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f00a f9af 	bl	800cd8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7fe fc2b 	bl	8001288 <main>
  bx  lr    
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002a40:	0800eb48 	.word	0x0800eb48
  ldr r2, =_sbss
 8002a44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002a48:	20011878 	.word	0x20011878

08002a4c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <DMA1_Stream0_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	@ (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	@ (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	@ (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f001 f84b 	bl	8003b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fa9c 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 f863 	bl	8003b7e <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f001 f82b 	bl	8003b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	@ (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000000c 	.word	0x2000000c
 8002aec:	20000014 	.word	0x20000014
 8002af0:	20000010 	.word	0x20000010

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000014 	.word	0x20000014
 8002b18:	200114ec 	.word	0x200114ec

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200114ec 	.word	0x200114ec

08002b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff ffee 	bl	8002b1c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d005      	beq.n	8002b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_Delay+0x44>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5a:	bf00      	nop
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d8f7      	bhi.n	8002b5c <HAL_Delay+0x28>
  {
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000014 	.word	0x20000014

08002b7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e033      	b.n	8002bfa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fa40 	bl	8002020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bc2:	f023 0302 	bic.w	r3, r3, #2
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fbb2 	bl	8003338 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bea:	e001      	b.n	8002bf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d049      	beq.n	8002ccc <HAL_ADC_IRQHandler+0xca>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d046      	beq.n	8002ccc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d12b      	bne.n	8002cbc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d127      	bne.n	8002cbc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d119      	bne.n	8002cbc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0220 	bic.w	r2, r2, #32
 8002c96:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fd ff7f 	bl	8000bc0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0212 	mvn.w	r2, #18
 8002cca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cda:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d057      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x190>
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d054      	beq.n	8002d92 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d139      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d12b      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d124      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11d      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d119      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d5c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fc56 	bl	8003634 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 020c 	mvn.w	r2, #12
 8002d90:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x1d6>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d014      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10d      	bne.n	8002dd8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f97f 	bl	80030cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0201 	mvn.w	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002de6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d015      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x218>
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d012      	beq.n	8002e1a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	f043 0202 	orr.w	r2, r3, #2
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0220 	mvn.w	r2, #32
 8002e08:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f968 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0220 	mvn.w	r2, #32
 8002e18:	601a      	str	r2, [r3, #0]
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Start_DMA+0x1e>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0ce      	b.n	8002fe0 <HAL_ADC_Start_DMA+0x1bc>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d018      	beq.n	8002e8a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e68:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe8 <HAL_ADC_Start_DMA+0x1c4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8002fec <HAL_ADC_Start_DMA+0x1c8>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	0c9a      	lsrs	r2, r3, #18
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e7c:	e002      	b.n	8002e84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e98:	d107      	bne.n	8002eaa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 8086 	bne.w	8002fc6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ee4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ef8:	d106      	bne.n	8002f08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	f023 0206 	bic.w	r2, r3, #6
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f06:	e002      	b.n	8002f0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f16:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_ADC_Start_DMA+0x1cc>)
 8002f18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1e:	4a35      	ldr	r2, [pc, #212]	@ (8002ff4 <HAL_ADC_Start_DMA+0x1d0>)
 8002f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	4a34      	ldr	r2, [pc, #208]	@ (8002ff8 <HAL_ADC_Start_DMA+0x1d4>)
 8002f28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2e:	4a33      	ldr	r2, [pc, #204]	@ (8002ffc <HAL_ADC_Start_DMA+0x1d8>)
 8002f30:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002f4a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f5a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	334c      	adds	r3, #76	@ 0x4c
 8002f66:	4619      	mov	r1, r3
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f000 fec2 	bl	8003cf4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d129      	bne.n	8002fde <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	e020      	b.n	8002fde <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <HAL_ADC_Start_DMA+0x1dc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d11b      	bne.n	8002fde <HAL_ADC_Start_DMA+0x1ba>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d114      	bne.n	8002fde <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	e00b      	b.n	8002fde <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f043 0210 	orr.w	r2, r3, #16
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	2000000c 	.word	0x2000000c
 8002fec:	431bde83 	.word	0x431bde83
 8002ff0:	40012300 	.word	0x40012300
 8002ff4:	08003531 	.word	0x08003531
 8002ff8:	080035eb 	.word	0x080035eb
 8002ffc:	08003607 	.word	0x08003607
 8003000:	40012000 	.word	0x40012000

08003004 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_ADC_Stop_DMA+0x1a>
 800301a:	2302      	movs	r3, #2
 800301c:	e048      	b.n	80030b0 <HAL_ADC_Stop_DMA+0xac>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0201 	bic.w	r2, r2, #1
 8003034:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d130      	bne.n	80030a6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003052:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d10f      	bne.n	8003082 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fe9c 	bl	8003da4 <HAL_DMA_Abort>
 800306c:	4603      	mov	r3, r0
 800306e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8003090:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e105      	b.n	800331c <HAL_ADC_ConfigChannel+0x228>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b09      	cmp	r3, #9
 800311e:	d925      	bls.n	800316c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	2207      	movs	r2, #7
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43da      	mvns	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	400a      	ands	r2, r1
 8003144:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68d9      	ldr	r1, [r3, #12]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	4618      	mov	r0, r3
 8003158:	4603      	mov	r3, r0
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4403      	add	r3, r0
 800315e:	3b1e      	subs	r3, #30
 8003160:	409a      	lsls	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	60da      	str	r2, [r3, #12]
 800316a:	e022      	b.n	80031b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6919      	ldr	r1, [r3, #16]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4613      	mov	r3, r2
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4413      	add	r3, r2
 8003180:	2207      	movs	r2, #7
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	400a      	ands	r2, r1
 800318e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4403      	add	r3, r0
 80031a8:	409a      	lsls	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d824      	bhi.n	8003204 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	3b05      	subs	r3, #5
 80031cc:	221f      	movs	r2, #31
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	400a      	ands	r2, r1
 80031da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	3b05      	subs	r3, #5
 80031f6:	fa00 f203 	lsl.w	r2, r0, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	635a      	str	r2, [r3, #52]	@ 0x34
 8003202:	e04c      	b.n	800329e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	d824      	bhi.n	8003256 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	3b23      	subs	r3, #35	@ 0x23
 800321e:	221f      	movs	r2, #31
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43da      	mvns	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	400a      	ands	r2, r1
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b23      	subs	r3, #35	@ 0x23
 8003248:	fa00 f203 	lsl.w	r2, r0, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
 8003254:	e023      	b.n	800329e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	3b41      	subs	r3, #65	@ 0x41
 8003268:	221f      	movs	r2, #31
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	400a      	ands	r2, r1
 8003276:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	3b41      	subs	r3, #65	@ 0x41
 8003292:	fa00 f203 	lsl.w	r2, r0, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800329e:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <HAL_ADC_ConfigChannel+0x234>)
 80032a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a21      	ldr	r2, [pc, #132]	@ (800332c <HAL_ADC_ConfigChannel+0x238>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d109      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x1cc>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d105      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	@ (800332c <HAL_ADC_ConfigChannel+0x238>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d123      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b10      	cmp	r3, #16
 80032d0:	d003      	beq.n	80032da <HAL_ADC_ConfigChannel+0x1e6>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b11      	cmp	r3, #17
 80032d8:	d11b      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d111      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ee:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <HAL_ADC_ConfigChannel+0x23c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a10      	ldr	r2, [pc, #64]	@ (8003334 <HAL_ADC_ConfigChannel+0x240>)
 80032f4:	fba2 2303 	umull	r2, r3, r2, r3
 80032f8:	0c9a      	lsrs	r2, r3, #18
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003304:	e002      	b.n	800330c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3b01      	subs	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f9      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012300 	.word	0x40012300
 800332c:	40012000 	.word	0x40012000
 8003330:	2000000c 	.word	0x2000000c
 8003334:	431bde83 	.word	0x431bde83

08003338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003340:	4b79      	ldr	r3, [pc, #484]	@ (8003528 <ADC_Init+0x1f0>)
 8003342:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800336c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	021a      	lsls	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6899      	ldr	r1, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ca:	4a58      	ldr	r2, [pc, #352]	@ (800352c <ADC_Init+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e00f      	b.n	8003436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003434:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0202 	bic.w	r2, r2, #2
 8003444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e1b      	ldrb	r3, [r3, #24]
 8003450:	005a      	lsls	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003472:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	3b01      	subs	r3, #1
 8003490:	035a      	lsls	r2, r3, #13
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e007      	b.n	80034ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	051a      	lsls	r2, r3, #20
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034ee:	025a      	lsls	r2, r3, #9
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	029a      	lsls	r2, r3, #10
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012300 	.word	0x40012300
 800352c:	0f000001 	.word	0x0f000001

08003530 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003546:	2b00      	cmp	r3, #0
 8003548:	d13c      	bne.n	80035c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d12b      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003568:	2b00      	cmp	r3, #0
 800356a:	d127      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003584:	2b00      	cmp	r3, #0
 8003586:	d119      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0220 	bic.w	r2, r2, #32
 8003596:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7fd faff 	bl	8000bc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035c2:	e00e      	b.n	80035e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fd85 	bl	80030e0 <HAL_ADC_ErrorCallback>
}
 80035d6:	e004      	b.n	80035e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
}
 80035e2:	bf00      	nop
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fd5d 	bl	80030b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003612:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2240      	movs	r2, #64	@ 0x40
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff fd5a 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800362c:	bf00      	nop
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_ADCEx_InjectedConfigChannel+0x18>
 800365c:	2302      	movs	r3, #2
 800365e:	e17d      	b.n	800395c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b09      	cmp	r3, #9
 800366e:	d925      	bls.n	80036bc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68d9      	ldr	r1, [r3, #12]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	b29b      	uxth	r3, r3
 800367c:	461a      	mov	r2, r3
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	3b1e      	subs	r3, #30
 8003686:	2207      	movs	r2, #7
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43da      	mvns	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	400a      	ands	r2, r1
 8003694:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68d9      	ldr	r1, [r3, #12]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	4603      	mov	r3, r0
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4403      	add	r3, r0
 80036ae:	3b1e      	subs	r3, #30
 80036b0:	409a      	lsls	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	e022      	b.n	8003702 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6919      	ldr	r1, [r3, #16]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	2207      	movs	r2, #7
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43da      	mvns	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	400a      	ands	r2, r1
 80036de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6919      	ldr	r1, [r3, #16]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	4618      	mov	r0, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4403      	add	r3, r0
 80036f8:	409a      	lsls	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003710:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	3b01      	subs	r3, #1
 800371e:	051a      	lsls	r2, r3, #20
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	3303      	adds	r3, #3
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	221f      	movs	r2, #31
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43da      	mvns	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	400a      	ands	r2, r1
 8003758:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	4618      	mov	r0, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3303      	adds	r3, #3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	fa00 f203 	lsl.w	r2, r0, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a74      	ldr	r2, [pc, #464]	@ (8003968 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d022      	beq.n	80037e0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80037a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6899      	ldr	r1, [r3, #8]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699a      	ldr	r2, [r3, #24]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80037ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	e00f      	b.n	8003800 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80037ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80037fe:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	7d5b      	ldrb	r3, [r3, #21]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	e007      	b.n	800382a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003828:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	7d1b      	ldrb	r3, [r3, #20]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	e007      	b.n	8003854 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003852:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d02e      	beq.n	80038ba <HAL_ADCEx_InjectedConfigChannel+0x272>
 800385c:	2b03      	cmp	r3, #3
 800385e:	d840      	bhi.n	80038e2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8003860:	2b01      	cmp	r3, #1
 8003862:	d002      	beq.n	800386a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8003864:	2b02      	cmp	r3, #2
 8003866:	d014      	beq.n	8003892 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8003868:	e03b      	b.n	80038e2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003878:	f023 030f 	bic.w	r3, r3, #15
 800387c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6959      	ldr	r1, [r3, #20]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	615a      	str	r2, [r3, #20]
      break;
 8003890:	e03b      	b.n	800390a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80038a0:	f023 030f 	bic.w	r3, r3, #15
 80038a4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6999      	ldr	r1, [r3, #24]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	619a      	str	r2, [r3, #24]
      break;
 80038b8:	e027      	b.n	800390a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80038c8:	f023 030f 	bic.w	r3, r3, #15
 80038cc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69d9      	ldr	r1, [r3, #28]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	61da      	str	r2, [r3, #28]
      break;
 80038e0:	e013      	b.n	800390a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80038f0:	f023 030f 	bic.w	r3, r3, #15
 80038f4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a19      	ldr	r1, [r3, #32]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	621a      	str	r2, [r3, #32]
      break;
 8003908:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800390a:	4b18      	ldr	r3, [pc, #96]	@ (800396c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800390c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a17      	ldr	r2, [pc, #92]	@ (8003970 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b12      	cmp	r3, #18
 800391e:	d105      	bne.n	800392c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0f      	ldr	r2, [pc, #60]	@ (8003970 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b10      	cmp	r3, #16
 800393c:	d003      	beq.n	8003946 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b11      	cmp	r3, #17
 8003944:	d105      	bne.n	8003952 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	000f0001 	.word	0x000f0001
 800396c:	40012300 	.word	0x40012300
 8003970:	40012000 	.word	0x40012000

08003974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800399c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c0:	4b04      	ldr	r3, [pc, #16]	@ (80039d4 <__NVIC_GetPriorityGrouping+0x18>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0307 	and.w	r3, r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	db0b      	blt.n	8003a02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	f003 021f 	and.w	r2, r3, #31
 80039f0:	4907      	ldr	r1, [pc, #28]	@ (8003a10 <__NVIC_EnableIRQ+0x38>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	095b      	lsrs	r3, r3, #5
 80039f8:	2001      	movs	r0, #1
 80039fa:	fa00 f202 	lsl.w	r2, r0, r2
 80039fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	e000e100 	.word	0xe000e100

08003a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	490c      	ldr	r1, [pc, #48]	@ (8003a60 <__NVIC_SetPriority+0x4c>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a3c:	e00a      	b.n	8003a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4908      	ldr	r1, [pc, #32]	@ (8003a64 <__NVIC_SetPriority+0x50>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	440b      	add	r3, r1
 8003a52:	761a      	strb	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	@ 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f1c3 0307 	rsb	r3, r3, #7
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	bf28      	it	cs
 8003a86:	2304      	movcs	r3, #4
 8003a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d902      	bls.n	8003a98 <NVIC_EncodePriority+0x30>
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	3b03      	subs	r3, #3
 8003a96:	e000      	b.n	8003a9a <NVIC_EncodePriority+0x32>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	401a      	ands	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aba:	43d9      	mvns	r1, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac0:	4313      	orrs	r3, r2
         );
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3724      	adds	r7, #36	@ 0x24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae0:	d301      	bcc.n	8003ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e00f      	b.n	8003b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b10 <SysTick_Config+0x40>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aee:	210f      	movs	r1, #15
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	f7ff ff8e 	bl	8003a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <SysTick_Config+0x40>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003afe:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <SysTick_Config+0x40>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	e000e010 	.word	0xe000e010

08003b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ff29 	bl	8003974 <__NVIC_SetPriorityGrouping>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b086      	sub	sp, #24
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	4603      	mov	r3, r0
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b3c:	f7ff ff3e 	bl	80039bc <__NVIC_GetPriorityGrouping>
 8003b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	6978      	ldr	r0, [r7, #20]
 8003b48:	f7ff ff8e 	bl	8003a68 <NVIC_EncodePriority>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff5d 	bl	8003a14 <__NVIC_SetPriority>
}
 8003b5a:	bf00      	nop
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff31 	bl	80039d8 <__NVIC_EnableIRQ>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff ffa2 	bl	8003ad0 <SysTick_Config>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7fe ffba 	bl	8002b1c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e099      	b.n	8003ce8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd4:	e00f      	b.n	8003bf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bd6:	f7fe ffa1 	bl	8002b1c <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b05      	cmp	r3, #5
 8003be2:	d908      	bls.n	8003bf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2203      	movs	r2, #3
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e078      	b.n	8003ce8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e8      	bne.n	8003bd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4b38      	ldr	r3, [pc, #224]	@ (8003cf0 <HAL_DMA_Init+0x158>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d107      	bne.n	8003c60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0307 	bic.w	r3, r3, #7
 8003c76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d117      	bne.n	8003cba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fb01 	bl	80042a4 <DMA_CheckFifoParam>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2240      	movs	r2, #64	@ 0x40
 8003cac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e016      	b.n	8003ce8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fab8 	bl	8004238 <DMA_CalcBaseAndBitshift>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	223f      	movs	r2, #63	@ 0x3f
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	f010803f 	.word	0xf010803f

08003cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_DMA_Start_IT+0x26>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e040      	b.n	8003d9c <HAL_DMA_Start_IT+0xa8>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d12f      	bne.n	8003d8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa4a 	bl	80041dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d4c:	223f      	movs	r2, #63	@ 0x3f
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0216 	orr.w	r2, r2, #22
 8003d62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0208 	orr.w	r2, r2, #8
 8003d7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e005      	b.n	8003d9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
 8003d98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003db2:	f7fe feb3 	bl	8002b1c <HAL_GetTick>
 8003db6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d008      	beq.n	8003dd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2280      	movs	r2, #128	@ 0x80
 8003dc8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e052      	b.n	8003e7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0216 	bic.w	r2, r2, #22
 8003de4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003df4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_DMA_Abort+0x62>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0208 	bic.w	r2, r2, #8
 8003e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e26:	e013      	b.n	8003e50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e28:	f7fe fe78 	bl	8002b1c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b05      	cmp	r3, #5
 8003e34:	d90c      	bls.n	8003e50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2203      	movs	r2, #3
 8003e40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e015      	b.n	8003e7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e4      	bne.n	8003e28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e62:	223f      	movs	r2, #63	@ 0x3f
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d004      	beq.n	8003ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	@ 0x80
 8003e9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00c      	b.n	8003ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2205      	movs	r2, #5
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0201 	bic.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ed4:	4b8e      	ldr	r3, [pc, #568]	@ (8004110 <HAL_DMA_IRQHandler+0x248>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8004114 <HAL_DMA_IRQHandler+0x24c>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0a9b      	lsrs	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d01a      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0204 	bic.w	r2, r2, #4
 8003f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	2208      	movs	r2, #8
 8003f22:	409a      	lsls	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f38:	2201      	movs	r2, #1
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d012      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f56:	2201      	movs	r2, #1
 8003f58:	409a      	lsls	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	2204      	movs	r2, #4
 8003f70:	409a      	lsls	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00b      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	409a      	lsls	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f98:	f043 0204 	orr.w	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	409a      	lsls	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d043      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d03c      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d018      	beq.n	800400a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d108      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d024      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
 8003ff6:	e01f      	b.n	8004038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	4798      	blx	r3
 8004008:	e016      	b.n	8004038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d107      	bne.n	8004028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0208 	bic.w	r2, r2, #8
 8004026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403c:	2220      	movs	r2, #32
 800403e:	409a      	lsls	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 808f 	beq.w	8004168 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0310 	and.w	r3, r3, #16
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8087 	beq.w	8004168 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800405e:	2220      	movs	r2, #32
 8004060:	409a      	lsls	r2, r3
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b05      	cmp	r3, #5
 8004070:	d136      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0216 	bic.w	r2, r2, #22
 8004080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <HAL_DMA_IRQHandler+0x1da>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0208 	bic.w	r2, r2, #8
 80040b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b6:	223f      	movs	r2, #63	@ 0x3f
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d07e      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
        }
        return;
 80040de:	e079      	b.n	80041d4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01d      	beq.n	800412a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10d      	bne.n	8004118 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	2b00      	cmp	r3, #0
 8004102:	d031      	beq.n	8004168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
 800410c:	e02c      	b.n	8004168 <HAL_DMA_IRQHandler+0x2a0>
 800410e:	bf00      	nop
 8004110:	2000000c 	.word	0x2000000c
 8004114:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
 8004128:	e01e      	b.n	8004168 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10f      	bne.n	8004158 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0210 	bic.w	r2, r2, #16
 8004146:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416c:	2b00      	cmp	r3, #0
 800416e:	d032      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d022      	beq.n	80041c2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2205      	movs	r2, #5
 8004180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3301      	adds	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	429a      	cmp	r2, r3
 800419e:	d307      	bcc.n	80041b0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f2      	bne.n	8004194 <HAL_DMA_IRQHandler+0x2cc>
 80041ae:	e000      	b.n	80041b2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80041b0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	4798      	blx	r3
 80041d2:	e000      	b.n	80041d6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80041d4:	bf00      	nop
    }
  }
}
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b40      	cmp	r3, #64	@ 0x40
 8004208:	d108      	bne.n	800421c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800421a:	e007      	b.n	800422c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	60da      	str	r2, [r3, #12]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3b10      	subs	r3, #16
 8004248:	4a14      	ldr	r2, [pc, #80]	@ (800429c <DMA_CalcBaseAndBitshift+0x64>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	091b      	lsrs	r3, r3, #4
 8004250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004252:	4a13      	ldr	r2, [pc, #76]	@ (80042a0 <DMA_CalcBaseAndBitshift+0x68>)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d909      	bls.n	800427a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	659a      	str	r2, [r3, #88]	@ 0x58
 8004278:	e007      	b.n	800428a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004282:	f023 0303 	bic.w	r3, r3, #3
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	aaaaaaab 	.word	0xaaaaaaab
 80042a0:	0800e5fc 	.word	0x0800e5fc

080042a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d11f      	bne.n	80042fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d856      	bhi.n	8004372 <DMA_CheckFifoParam+0xce>
 80042c4:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <DMA_CheckFifoParam+0x28>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042ef 	.word	0x080042ef
 80042d4:	080042dd 	.word	0x080042dd
 80042d8:	08004373 	.word	0x08004373
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d046      	beq.n	8004376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ec:	e043      	b.n	8004376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042f6:	d140      	bne.n	800437a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fc:	e03d      	b.n	800437a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004306:	d121      	bne.n	800434c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b03      	cmp	r3, #3
 800430c:	d837      	bhi.n	800437e <DMA_CheckFifoParam+0xda>
 800430e:	a201      	add	r2, pc, #4	@ (adr r2, 8004314 <DMA_CheckFifoParam+0x70>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004325 	.word	0x08004325
 8004318:	0800432b 	.word	0x0800432b
 800431c:	08004325 	.word	0x08004325
 8004320:	0800433d 	.word	0x0800433d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
      break;
 8004328:	e030      	b.n	800438c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d025      	beq.n	8004382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800433a:	e022      	b.n	8004382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004340:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004344:	d11f      	bne.n	8004386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800434a:	e01c      	b.n	8004386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d903      	bls.n	800435a <DMA_CheckFifoParam+0xb6>
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b03      	cmp	r3, #3
 8004356:	d003      	beq.n	8004360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004358:	e018      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
      break;
 800435e:	e015      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
      break;
 8004370:	e00b      	b.n	800438a <DMA_CheckFifoParam+0xe6>
      break;
 8004372:	bf00      	nop
 8004374:	e00a      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 8004376:	bf00      	nop
 8004378:	e008      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 800437a:	bf00      	nop
 800437c:	e006      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 800437e:	bf00      	nop
 8004380:	e004      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;   
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <DMA_CheckFifoParam+0xe8>
      break;
 800438a:	bf00      	nop
    }
  } 
  
  return status; 
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800439c:	b480      	push	{r7}
 800439e:	b089      	sub	sp, #36	@ 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	e159      	b.n	800466c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043b8:	2201      	movs	r2, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f040 8148 	bne.w	8004666 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d005      	beq.n	80043ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d130      	bne.n	8004450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	2203      	movs	r2, #3
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4013      	ands	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004424:	2201      	movs	r2, #1
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 0201 	and.w	r2, r3, #1
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b03      	cmp	r3, #3
 800445a:	d017      	beq.n	800448c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0303 	and.w	r3, r3, #3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d123      	bne.n	80044e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	08da      	lsrs	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3208      	adds	r2, #8
 80044a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	220f      	movs	r2, #15
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0307 	and.w	r3, r3, #7
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	08da      	lsrs	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3208      	adds	r2, #8
 80044da:	69b9      	ldr	r1, [r7, #24]
 80044dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2203      	movs	r2, #3
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 0203 	and.w	r2, r3, #3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	005b      	lsls	r3, r3, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4313      	orrs	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80a2 	beq.w	8004666 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b57      	ldr	r3, [pc, #348]	@ (8004684 <HAL_GPIO_Init+0x2e8>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	4a56      	ldr	r2, [pc, #344]	@ (8004684 <HAL_GPIO_Init+0x2e8>)
 800452c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004530:	6453      	str	r3, [r2, #68]	@ 0x44
 8004532:	4b54      	ldr	r3, [pc, #336]	@ (8004684 <HAL_GPIO_Init+0x2e8>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800453e:	4a52      	ldr	r2, [pc, #328]	@ (8004688 <HAL_GPIO_Init+0x2ec>)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	3302      	adds	r3, #2
 8004546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	220f      	movs	r2, #15
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a49      	ldr	r2, [pc, #292]	@ (800468c <HAL_GPIO_Init+0x2f0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d019      	beq.n	800459e <HAL_GPIO_Init+0x202>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a48      	ldr	r2, [pc, #288]	@ (8004690 <HAL_GPIO_Init+0x2f4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <HAL_GPIO_Init+0x1fe>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a47      	ldr	r2, [pc, #284]	@ (8004694 <HAL_GPIO_Init+0x2f8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00d      	beq.n	8004596 <HAL_GPIO_Init+0x1fa>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a46      	ldr	r2, [pc, #280]	@ (8004698 <HAL_GPIO_Init+0x2fc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d007      	beq.n	8004592 <HAL_GPIO_Init+0x1f6>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a45      	ldr	r2, [pc, #276]	@ (800469c <HAL_GPIO_Init+0x300>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <HAL_GPIO_Init+0x1f2>
 800458a:	2304      	movs	r3, #4
 800458c:	e008      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 800458e:	2307      	movs	r3, #7
 8004590:	e006      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 8004592:	2303      	movs	r3, #3
 8004594:	e004      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 8004596:	2302      	movs	r3, #2
 8004598:	e002      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <HAL_GPIO_Init+0x204>
 800459e:	2300      	movs	r3, #0
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	f002 0203 	and.w	r2, r2, #3
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	4093      	lsls	r3, r2
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b0:	4935      	ldr	r1, [pc, #212]	@ (8004688 <HAL_GPIO_Init+0x2ec>)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	089b      	lsrs	r3, r3, #2
 80045b6:	3302      	adds	r3, #2
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045be:	4b38      	ldr	r3, [pc, #224]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045e2:	4a2f      	ldr	r2, [pc, #188]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e8:	4b2d      	ldr	r3, [pc, #180]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800460c:	4a24      	ldr	r2, [pc, #144]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004612:	4b23      	ldr	r3, [pc, #140]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004636:	4a1a      	ldr	r2, [pc, #104]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800463c:	4b18      	ldr	r3, [pc, #96]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004660:	4a0f      	ldr	r2, [pc, #60]	@ (80046a0 <HAL_GPIO_Init+0x304>)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3301      	adds	r3, #1
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	2b0f      	cmp	r3, #15
 8004670:	f67f aea2 	bls.w	80043b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	3724      	adds	r7, #36	@ 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	40013800 	.word	0x40013800
 800468c:	40020000 	.word	0x40020000
 8004690:	40020400 	.word	0x40020400
 8004694:	40020800 	.word	0x40020800
 8004698:	40020c00 	.word	0x40020c00
 800469c:	40021000 	.word	0x40021000
 80046a0:	40013c00 	.word	0x40013c00

080046a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	887b      	ldrh	r3, [r7, #2]
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
 80046c0:	e001      	b.n	80046c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	807b      	strh	r3, [r7, #2]
 80046e0:	4613      	mov	r3, r2
 80046e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e4:	787b      	ldrb	r3, [r7, #1]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ea:	887a      	ldrh	r2, [r7, #2]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046f0:	e003      	b.n	80046fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	041a      	lsls	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	619a      	str	r2, [r3, #24]
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004712:	4b08      	ldr	r3, [pc, #32]	@ (8004734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d006      	beq.n	800472c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800471e:	4a05      	ldr	r2, [pc, #20]	@ (8004734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004720:	88fb      	ldrh	r3, [r7, #6]
 8004722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004724:	88fb      	ldrh	r3, [r7, #6]
 8004726:	4618      	mov	r0, r3
 8004728:	f7fc f9b6 	bl	8000a98 <HAL_GPIO_EXTI_Callback>
  }
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40013c00 	.word	0x40013c00

08004738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e12b      	b.n	80049a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd fd16 	bl	8002190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2224      	movs	r2, #36	@ 0x24
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0201 	bic.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800478a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800479a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800479c:	f001 fd96 	bl	80062cc <HAL_RCC_GetPCLK1Freq>
 80047a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4a81      	ldr	r2, [pc, #516]	@ (80049ac <HAL_I2C_Init+0x274>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d807      	bhi.n	80047bc <HAL_I2C_Init+0x84>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4a80      	ldr	r2, [pc, #512]	@ (80049b0 <HAL_I2C_Init+0x278>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bf94      	ite	ls
 80047b4:	2301      	movls	r3, #1
 80047b6:	2300      	movhi	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e006      	b.n	80047ca <HAL_I2C_Init+0x92>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a7d      	ldr	r2, [pc, #500]	@ (80049b4 <HAL_I2C_Init+0x27c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	bf94      	ite	ls
 80047c4:	2301      	movls	r3, #1
 80047c6:	2300      	movhi	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e0e7      	b.n	80049a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a78      	ldr	r2, [pc, #480]	@ (80049b8 <HAL_I2C_Init+0x280>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0c9b      	lsrs	r3, r3, #18
 80047dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a6a      	ldr	r2, [pc, #424]	@ (80049ac <HAL_I2C_Init+0x274>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d802      	bhi.n	800480c <HAL_I2C_Init+0xd4>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	3301      	adds	r3, #1
 800480a:	e009      	b.n	8004820 <HAL_I2C_Init+0xe8>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	4a69      	ldr	r2, [pc, #420]	@ (80049bc <HAL_I2C_Init+0x284>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	099b      	lsrs	r3, r3, #6
 800481e:	3301      	adds	r3, #1
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	430b      	orrs	r3, r1
 8004826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004832:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	495c      	ldr	r1, [pc, #368]	@ (80049ac <HAL_I2C_Init+0x274>)
 800483c:	428b      	cmp	r3, r1
 800483e:	d819      	bhi.n	8004874 <HAL_I2C_Init+0x13c>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e59      	subs	r1, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	fbb1 f3f3 	udiv	r3, r1, r3
 800484e:	1c59      	adds	r1, r3, #1
 8004850:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004854:	400b      	ands	r3, r1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_I2C_Init+0x138>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1e59      	subs	r1, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	fbb1 f3f3 	udiv	r3, r1, r3
 8004868:	3301      	adds	r3, #1
 800486a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486e:	e051      	b.n	8004914 <HAL_I2C_Init+0x1dc>
 8004870:	2304      	movs	r3, #4
 8004872:	e04f      	b.n	8004914 <HAL_I2C_Init+0x1dc>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d111      	bne.n	80048a0 <HAL_I2C_Init+0x168>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1e58      	subs	r0, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6859      	ldr	r1, [r3, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	440b      	add	r3, r1
 800488a:	fbb0 f3f3 	udiv	r3, r0, r3
 800488e:	3301      	adds	r3, #1
 8004890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	e012      	b.n	80048c6 <HAL_I2C_Init+0x18e>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	1e58      	subs	r0, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6859      	ldr	r1, [r3, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	0099      	lsls	r1, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048b6:	3301      	adds	r3, #1
 80048b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Init+0x196>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e022      	b.n	8004914 <HAL_I2C_Init+0x1dc>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10e      	bne.n	80048f4 <HAL_I2C_Init+0x1bc>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1e58      	subs	r0, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6859      	ldr	r1, [r3, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	440b      	add	r3, r1
 80048e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048f2:	e00f      	b.n	8004914 <HAL_I2C_Init+0x1dc>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1e58      	subs	r0, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6859      	ldr	r1, [r3, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	0099      	lsls	r1, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	fbb0 f3f3 	udiv	r3, r0, r3
 800490a:	3301      	adds	r3, #1
 800490c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004910:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	6809      	ldr	r1, [r1, #0]
 8004918:	4313      	orrs	r3, r2
 800491a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004942:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6911      	ldr	r1, [r2, #16]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68d2      	ldr	r2, [r2, #12]
 800494e:	4311      	orrs	r1, r2
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6812      	ldr	r2, [r2, #0]
 8004954:	430b      	orrs	r3, r1
 8004956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	000186a0 	.word	0x000186a0
 80049b0:	001e847f 	.word	0x001e847f
 80049b4:	003d08ff 	.word	0x003d08ff
 80049b8:	431bde83 	.word	0x431bde83
 80049bc:	10624dd3 	.word	0x10624dd3

080049c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	4603      	mov	r3, r0
 80049d0:	817b      	strh	r3, [r7, #10]
 80049d2:	460b      	mov	r3, r1
 80049d4:	813b      	strh	r3, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049da:	f7fe f89f 	bl	8002b1c <HAL_GetTick>
 80049de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	f040 80d9 	bne.w	8004ba0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	2319      	movs	r3, #25
 80049f4:	2201      	movs	r2, #1
 80049f6:	496d      	ldr	r1, [pc, #436]	@ (8004bac <HAL_I2C_Mem_Write+0x1ec>)
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f971 	bl	8004ce0 <I2C_WaitOnFlagUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
 8004a06:	e0cc      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_I2C_Mem_Write+0x56>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e0c5      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d007      	beq.n	8004a3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2221      	movs	r2, #33	@ 0x21
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2240      	movs	r2, #64	@ 0x40
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a3a      	ldr	r2, [r7, #32]
 8004a66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a4d      	ldr	r2, [pc, #308]	@ (8004bb0 <HAL_I2C_Mem_Write+0x1f0>)
 8004a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a7e:	88f8      	ldrh	r0, [r7, #6]
 8004a80:	893a      	ldrh	r2, [r7, #8]
 8004a82:	8979      	ldrh	r1, [r7, #10]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f890 	bl	8004bb4 <I2C_RequestMemoryWrite>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d052      	beq.n	8004b40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e081      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fa36 	bl	8004f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00d      	beq.n	8004aca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d107      	bne.n	8004ac6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06b      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d11b      	bne.n	8004b40 <HAL_I2C_Mem_Write+0x180>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d017      	beq.n	8004b40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1aa      	bne.n	8004a9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fa29 	bl	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00d      	beq.n	8004b74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d107      	bne.n	8004b70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e016      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	00100002 	.word	0x00100002
 8004bb0:	ffff0000 	.word	0xffff0000

08004bb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	817b      	strh	r3, [r7, #10]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	813b      	strh	r3, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f878 	bl	8004ce0 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c04:	d103      	bne.n	8004c0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e05f      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	492d      	ldr	r1, [pc, #180]	@ (8004cdc <I2C_RequestMemoryWrite+0x128>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f8d3 	bl	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e04c      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f95e 	bl	8004f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d107      	bne.n	8004c76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e02b      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c80:	893b      	ldrh	r3, [r7, #8]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e021      	b.n	8004cd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f938 	bl	8004f14 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e005      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc6:	893b      	ldrh	r3, [r7, #8]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	00010002 	.word	0x00010002

08004ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf0:	e048      	b.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf8:	d044      	beq.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfa:	f7fd ff0f 	bl	8002b1c <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d302      	bcc.n	8004d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d139      	bne.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d10d      	bne.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	43da      	mvns	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	e00c      	b.n	8004d50 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	43da      	mvns	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4013      	ands	r3, r2
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d116      	bne.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	f043 0220 	orr.w	r2, r3, #32
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e023      	b.n	8004dcc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10d      	bne.n	8004daa <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	43da      	mvns	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bf0c      	ite	eq
 8004da0:	2301      	moveq	r3, #1
 8004da2:	2300      	movne	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	461a      	mov	r2, r3
 8004da8:	e00c      	b.n	8004dc4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	43da      	mvns	r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4013      	ands	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d093      	beq.n	8004cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
 8004de0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004de2:	e071      	b.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df2:	d123      	bne.n	8004e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	f043 0204 	orr.w	r2, r3, #4
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e067      	b.n	8004f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d041      	beq.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e44:	f7fd fe6a 	bl	8002b1c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d302      	bcc.n	8004e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d136      	bne.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d10c      	bne.n	8004e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	e00b      	b.n	8004e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	43da      	mvns	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e021      	b.n	8004f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d10c      	bne.n	8004eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	43da      	mvns	r2, r3
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4013      	ands	r3, r2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e00b      	b.n	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bf14      	ite	ne
 8004efe:	2301      	movne	r3, #1
 8004f00:	2300      	moveq	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f47f af6d 	bne.w	8004de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f20:	e034      	b.n	8004f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f000 f886 	bl	8005034 <I2C_IsAcknowledgeFailed>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e034      	b.n	8004f9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d028      	beq.n	8004f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f3a:	f7fd fdef 	bl	8002b1c <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d302      	bcc.n	8004f50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d11d      	bne.n	8004f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5a:	2b80      	cmp	r3, #128	@ 0x80
 8004f5c:	d016      	beq.n	8004f8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e007      	b.n	8004f9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	2b80      	cmp	r3, #128	@ 0x80
 8004f98:	d1c3      	bne.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb0:	e034      	b.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f83e 	bl	8005034 <I2C_IsAcknowledgeFailed>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e034      	b.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d028      	beq.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fca:	f7fd fda7 	bl	8002b1c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d302      	bcc.n	8004fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d11d      	bne.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d016      	beq.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e007      	b.n	800502c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b04      	cmp	r3, #4
 8005028:	d1c3      	bne.n	8004fb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d11b      	bne.n	8005084 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005054:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	f043 0204 	orr.w	r2, r3, #4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
	...

08005094 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e128      	b.n	80052f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a90      	ldr	r2, [pc, #576]	@ (8005300 <HAL_I2S_Init+0x26c>)
 80050be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fd f8ad 	bl	8002220 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80050dc:	f023 030f 	bic.w	r3, r3, #15
 80050e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2202      	movs	r2, #2
 80050e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d060      	beq.n	80051b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80050fa:	2310      	movs	r3, #16
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e001      	b.n	8005104 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005100:	2320      	movs	r3, #32
 8005102:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b20      	cmp	r3, #32
 800510a:	d802      	bhi.n	8005112 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005112:	2001      	movs	r0, #1
 8005114:	f001 f9f0 	bl	80064f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005118:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005122:	d125      	bne.n	8005170 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	fbb2 f2f3 	udiv	r2, r2, r3
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	461a      	mov	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	3305      	adds	r3, #5
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e01f      	b.n	800518e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	fbb2 f2f3 	udiv	r2, r2, r3
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	461a      	mov	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	3305      	adds	r3, #5
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	e00e      	b.n	800518e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	fbb2 f2f3 	udiv	r2, r2, r3
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	461a      	mov	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	3305      	adds	r3, #5
 800518c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4a5c      	ldr	r2, [pc, #368]	@ (8005304 <HAL_I2S_Init+0x270>)
 8005192:	fba2 2303 	umull	r2, r3, r2, r3
 8005196:	08db      	lsrs	r3, r3, #3
 8005198:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	021b      	lsls	r3, r3, #8
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e003      	b.n	80051bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80051b4:	2302      	movs	r3, #2
 80051b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d902      	bls.n	80051c8 <HAL_I2S_Init+0x134>
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2bff      	cmp	r3, #255	@ 0xff
 80051c6:	d907      	bls.n	80051d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051cc:	f043 0210 	orr.w	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e08f      	b.n	80052f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	ea42 0103 	orr.w	r1, r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80051f6:	f023 030f 	bic.w	r3, r3, #15
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6851      	ldr	r1, [r2, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	4311      	orrs	r1, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68d2      	ldr	r2, [r2, #12]
 8005208:	4311      	orrs	r1, r2
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6992      	ldr	r2, [r2, #24]
 800520e:	430a      	orrs	r2, r1
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800521a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d161      	bne.n	80052e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a38      	ldr	r2, [pc, #224]	@ (8005308 <HAL_I2S_Init+0x274>)
 8005228:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a37      	ldr	r2, [pc, #220]	@ (800530c <HAL_I2S_Init+0x278>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_I2S_Init+0x1a4>
 8005234:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <HAL_I2S_Init+0x27c>)
 8005236:	e001      	b.n	800523c <HAL_I2S_Init+0x1a8>
 8005238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	4932      	ldr	r1, [pc, #200]	@ (800530c <HAL_I2S_Init+0x278>)
 8005244:	428a      	cmp	r2, r1
 8005246:	d101      	bne.n	800524c <HAL_I2S_Init+0x1b8>
 8005248:	4a31      	ldr	r2, [pc, #196]	@ (8005310 <HAL_I2S_Init+0x27c>)
 800524a:	e001      	b.n	8005250 <HAL_I2S_Init+0x1bc>
 800524c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005250:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005254:	f023 030f 	bic.w	r3, r3, #15
 8005258:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2b      	ldr	r2, [pc, #172]	@ (800530c <HAL_I2S_Init+0x278>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d101      	bne.n	8005268 <HAL_I2S_Init+0x1d4>
 8005264:	4b2a      	ldr	r3, [pc, #168]	@ (8005310 <HAL_I2S_Init+0x27c>)
 8005266:	e001      	b.n	800526c <HAL_I2S_Init+0x1d8>
 8005268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800526c:	2202      	movs	r2, #2
 800526e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a25      	ldr	r2, [pc, #148]	@ (800530c <HAL_I2S_Init+0x278>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d101      	bne.n	800527e <HAL_I2S_Init+0x1ea>
 800527a:	4b25      	ldr	r3, [pc, #148]	@ (8005310 <HAL_I2S_Init+0x27c>)
 800527c:	e001      	b.n	8005282 <HAL_I2S_Init+0x1ee>
 800527e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800528e:	d003      	beq.n	8005298 <HAL_I2S_Init+0x204>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	e001      	b.n	80052a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80052a0:	2300      	movs	r3, #0
 80052a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052b8:	4313      	orrs	r3, r2
 80052ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	897b      	ldrh	r3, [r7, #10]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80052d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a0d      	ldr	r2, [pc, #52]	@ (800530c <HAL_I2S_Init+0x278>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d101      	bne.n	80052e0 <HAL_I2S_Init+0x24c>
 80052dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <HAL_I2S_Init+0x27c>)
 80052de:	e001      	b.n	80052e4 <HAL_I2S_Init+0x250>
 80052e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052e4:	897a      	ldrh	r2, [r7, #10]
 80052e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	08005423 	.word	0x08005423
 8005304:	cccccccd 	.word	0xcccccccd
 8005308:	08005539 	.word	0x08005539
 800530c:	40003800 	.word	0x40003800
 8005310:	40003400 	.word	0x40003400

08005314 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	4798      	blx	r3
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10e      	bne.n	80053bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ffb8 	bl	800532c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	b292      	uxth	r2, r2
 80053d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053de:	1c9a      	adds	r2, r3, #2
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10e      	bne.n	800541a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800540a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff93 	bl	8005340 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b086      	sub	sp, #24
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b04      	cmp	r3, #4
 800543c:	d13a      	bne.n	80054b4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d109      	bne.n	800545c <I2S_IRQHandler+0x3a>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005452:	2b40      	cmp	r3, #64	@ 0x40
 8005454:	d102      	bne.n	800545c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ffb4 	bl	80053c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d126      	bne.n	80054b4 <I2S_IRQHandler+0x92>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b20      	cmp	r3, #32
 8005472:	d11f      	bne.n	80054b4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005482:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005484:	2300      	movs	r3, #0
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	f043 0202 	orr.w	r2, r3, #2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ff50 	bl	8005354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d136      	bne.n	800552e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d109      	bne.n	80054de <I2S_IRQHandler+0xbc>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d4:	2b80      	cmp	r3, #128	@ 0x80
 80054d6:	d102      	bne.n	80054de <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff45 	bl	8005368 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b08      	cmp	r3, #8
 80054e6:	d122      	bne.n	800552e <I2S_IRQHandler+0x10c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d11b      	bne.n	800552e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005504:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005520:	f043 0204 	orr.w	r2, r3, #4
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff ff13 	bl	8005354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800552e:	bf00      	nop
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b088      	sub	sp, #32
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a92      	ldr	r2, [pc, #584]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d101      	bne.n	8005556 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005552:	4b92      	ldr	r3, [pc, #584]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005554:	e001      	b.n	800555a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005556:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a8b      	ldr	r2, [pc, #556]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005570:	4b8a      	ldr	r3, [pc, #552]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005572:	e001      	b.n	8005578 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005574:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005584:	d004      	beq.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f040 8099 	bne.w	80056c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b02      	cmp	r3, #2
 8005598:	d107      	bne.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f925 	bl	80057f4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d107      	bne.n	80055c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9c8 	bl	8005954 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d13a      	bne.n	8005644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d035      	beq.n	8005644 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d101      	bne.n	80055e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80055e2:	4b6e      	ldr	r3, [pc, #440]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055e4:	e001      	b.n	80055ea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80055e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4969      	ldr	r1, [pc, #420]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055f2:	428b      	cmp	r3, r1
 80055f4:	d101      	bne.n	80055fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80055f6:	4b69      	ldr	r3, [pc, #420]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055f8:	e001      	b.n	80055fe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80055fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005602:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005612:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005636:	f043 0202 	orr.w	r2, r3, #2
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe88 	bl	8005354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b08      	cmp	r3, #8
 800564c:	f040 80c3 	bne.w	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 80bd 	beq.w	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800566a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a49      	ldr	r2, [pc, #292]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d101      	bne.n	800567a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005676:	4b49      	ldr	r3, [pc, #292]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005678:	e001      	b.n	800567e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800567a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4944      	ldr	r1, [pc, #272]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005686:	428b      	cmp	r3, r1
 8005688:	d101      	bne.n	800568e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800568a:	4b44      	ldr	r3, [pc, #272]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800568c:	e001      	b.n	8005692 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800568e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005692:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005696:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005698:	2300      	movs	r3, #0
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]
 80056a4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b2:	f043 0204 	orr.w	r2, r3, #4
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fe4a 	bl	8005354 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056c0:	e089      	b.n	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d107      	bne.n	80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f8be 	bl	8005858 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f8fd 	bl	80058f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fc:	2b40      	cmp	r3, #64	@ 0x40
 80056fe:	d12f      	bne.n	8005760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d02a      	beq.n	8005760 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005718:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1e      	ldr	r2, [pc, #120]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005724:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005726:	e001      	b.n	800572c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005728:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4919      	ldr	r1, [pc, #100]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005734:	428b      	cmp	r3, r1
 8005736:	d101      	bne.n	800573c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005738:	4b18      	ldr	r3, [pc, #96]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800573a:	e001      	b.n	8005740 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800573c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005740:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005744:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005752:	f043 0202 	orr.w	r2, r3, #2
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fdfa 	bl	8005354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b08      	cmp	r3, #8
 8005768:	d136      	bne.n	80057d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d031      	beq.n	80057d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a07      	ldr	r2, [pc, #28]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d101      	bne.n	8005782 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800577e:	4b07      	ldr	r3, [pc, #28]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005780:	e001      	b.n	8005786 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005782:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4902      	ldr	r1, [pc, #8]	@ (8005798 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800578e:	428b      	cmp	r3, r1
 8005790:	d106      	bne.n	80057a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005792:	4b02      	ldr	r3, [pc, #8]	@ (800579c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005794:	e006      	b.n	80057a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005796:	bf00      	nop
 8005798:	40003800 	.word	0x40003800
 800579c:	40003400 	.word	0x40003400
 80057a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685a      	ldr	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fdc0 	bl	8005354 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057d4:	e000      	b.n	80057d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80057d6:	bf00      	nop
}
 80057d8:	bf00      	nop
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005800:	1c99      	adds	r1, r3, #2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6251      	str	r1, [r2, #36]	@ 0x24
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d113      	bne.n	800584e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005834:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7ff ffc9 	bl	80057e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
	...

08005858 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	1c99      	adds	r1, r3, #2
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6251      	str	r1, [r2, #36]	@ 0x24
 800586a:	8819      	ldrh	r1, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1d      	ldr	r2, [pc, #116]	@ (80058e8 <I2SEx_TxISR_I2SExt+0x90>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d101      	bne.n	800587a <I2SEx_TxISR_I2SExt+0x22>
 8005876:	4b1d      	ldr	r3, [pc, #116]	@ (80058ec <I2SEx_TxISR_I2SExt+0x94>)
 8005878:	e001      	b.n	800587e <I2SEx_TxISR_I2SExt+0x26>
 800587a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800587e:	460a      	mov	r2, r1
 8005880:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d121      	bne.n	80058de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a12      	ldr	r2, [pc, #72]	@ (80058e8 <I2SEx_TxISR_I2SExt+0x90>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d101      	bne.n	80058a8 <I2SEx_TxISR_I2SExt+0x50>
 80058a4:	4b11      	ldr	r3, [pc, #68]	@ (80058ec <I2SEx_TxISR_I2SExt+0x94>)
 80058a6:	e001      	b.n	80058ac <I2SEx_TxISR_I2SExt+0x54>
 80058a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	490d      	ldr	r1, [pc, #52]	@ (80058e8 <I2SEx_TxISR_I2SExt+0x90>)
 80058b4:	428b      	cmp	r3, r1
 80058b6:	d101      	bne.n	80058bc <I2SEx_TxISR_I2SExt+0x64>
 80058b8:	4b0c      	ldr	r3, [pc, #48]	@ (80058ec <I2SEx_TxISR_I2SExt+0x94>)
 80058ba:	e001      	b.n	80058c0 <I2SEx_TxISR_I2SExt+0x68>
 80058bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff ff81 	bl	80057e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40003800 	.word	0x40003800
 80058ec:	40003400 	.word	0x40003400

080058f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68d8      	ldr	r0, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005902:	1c99      	adds	r1, r3, #2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005908:	b282      	uxth	r2, r0
 800590a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d113      	bne.n	800594c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005932:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff ff4a 	bl	80057e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a20      	ldr	r2, [pc, #128]	@ (80059e4 <I2SEx_RxISR_I2SExt+0x90>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <I2SEx_RxISR_I2SExt+0x16>
 8005966:	4b20      	ldr	r3, [pc, #128]	@ (80059e8 <I2SEx_RxISR_I2SExt+0x94>)
 8005968:	e001      	b.n	800596e <I2SEx_RxISR_I2SExt+0x1a>
 800596a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800596e:	68d8      	ldr	r0, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005974:	1c99      	adds	r1, r3, #2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800597a:	b282      	uxth	r2, r0
 800597c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d121      	bne.n	80059da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a12      	ldr	r2, [pc, #72]	@ (80059e4 <I2SEx_RxISR_I2SExt+0x90>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <I2SEx_RxISR_I2SExt+0x50>
 80059a0:	4b11      	ldr	r3, [pc, #68]	@ (80059e8 <I2SEx_RxISR_I2SExt+0x94>)
 80059a2:	e001      	b.n	80059a8 <I2SEx_RxISR_I2SExt+0x54>
 80059a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	490d      	ldr	r1, [pc, #52]	@ (80059e4 <I2SEx_RxISR_I2SExt+0x90>)
 80059b0:	428b      	cmp	r3, r1
 80059b2:	d101      	bne.n	80059b8 <I2SEx_RxISR_I2SExt+0x64>
 80059b4:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <I2SEx_RxISR_I2SExt+0x94>)
 80059b6:	e001      	b.n	80059bc <I2SEx_RxISR_I2SExt+0x68>
 80059b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d106      	bne.n	80059da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff ff03 	bl	80057e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40003800 	.word	0x40003800
 80059e8:	40003400 	.word	0x40003400

080059ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e267      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d075      	beq.n	8005af6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a0a:	4b88      	ldr	r3, [pc, #544]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d00c      	beq.n	8005a30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a16:	4b85      	ldr	r3, [pc, #532]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d112      	bne.n	8005a48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a22:	4b82      	ldr	r3, [pc, #520]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a2e:	d10b      	bne.n	8005a48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a30:	4b7e      	ldr	r3, [pc, #504]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d05b      	beq.n	8005af4 <HAL_RCC_OscConfig+0x108>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d157      	bne.n	8005af4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e242      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a50:	d106      	bne.n	8005a60 <HAL_RCC_OscConfig+0x74>
 8005a52:	4b76      	ldr	r3, [pc, #472]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a75      	ldr	r2, [pc, #468]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e01d      	b.n	8005a9c <HAL_RCC_OscConfig+0xb0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a68:	d10c      	bne.n	8005a84 <HAL_RCC_OscConfig+0x98>
 8005a6a:	4b70      	ldr	r3, [pc, #448]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a74:	6013      	str	r3, [r2, #0]
 8005a76:	4b6d      	ldr	r3, [pc, #436]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6c      	ldr	r2, [pc, #432]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e00b      	b.n	8005a9c <HAL_RCC_OscConfig+0xb0>
 8005a84:	4b69      	ldr	r3, [pc, #420]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a68      	ldr	r2, [pc, #416]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4b66      	ldr	r3, [pc, #408]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a65      	ldr	r2, [pc, #404]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005a96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d013      	beq.n	8005acc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa4:	f7fd f83a 	bl	8002b1c <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aac:	f7fd f836 	bl	8002b1c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b64      	cmp	r3, #100	@ 0x64
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e207      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005abe:	4b5b      	ldr	r3, [pc, #364]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0f0      	beq.n	8005aac <HAL_RCC_OscConfig+0xc0>
 8005aca:	e014      	b.n	8005af6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005acc:	f7fd f826 	bl	8002b1c <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad2:	e008      	b.n	8005ae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad4:	f7fd f822 	bl	8002b1c <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b64      	cmp	r3, #100	@ 0x64
 8005ae0:	d901      	bls.n	8005ae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e1f3      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae6:	4b51      	ldr	r3, [pc, #324]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f0      	bne.n	8005ad4 <HAL_RCC_OscConfig+0xe8>
 8005af2:	e000      	b.n	8005af6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d063      	beq.n	8005bca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b02:	4b4a      	ldr	r3, [pc, #296]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b0e:	4b47      	ldr	r3, [pc, #284]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d11c      	bne.n	8005b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b1a:	4b44      	ldr	r3, [pc, #272]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d116      	bne.n	8005b54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b26:	4b41      	ldr	r3, [pc, #260]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_RCC_OscConfig+0x152>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d001      	beq.n	8005b3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e1c7      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	4937      	ldr	r1, [pc, #220]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b52:	e03a      	b.n	8005bca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d020      	beq.n	8005b9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b5c:	4b34      	ldr	r3, [pc, #208]	@ (8005c30 <HAL_RCC_OscConfig+0x244>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b62:	f7fc ffdb 	bl	8002b1c <HAL_GetTick>
 8005b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6a:	f7fc ffd7 	bl	8002b1c <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e1a8      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0f0      	beq.n	8005b6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b88:	4b28      	ldr	r3, [pc, #160]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4925      	ldr	r1, [pc, #148]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	600b      	str	r3, [r1, #0]
 8005b9c:	e015      	b.n	8005bca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b9e:	4b24      	ldr	r3, [pc, #144]	@ (8005c30 <HAL_RCC_OscConfig+0x244>)
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fc ffba 	bl	8002b1c <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bac:	f7fc ffb6 	bl	8002b1c <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e187      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f0      	bne.n	8005bac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d036      	beq.n	8005c44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d016      	beq.n	8005c0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bde:	4b15      	ldr	r3, [pc, #84]	@ (8005c34 <HAL_RCC_OscConfig+0x248>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be4:	f7fc ff9a 	bl	8002b1c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bec:	f7fc ff96 	bl	8002b1c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e167      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_RCC_OscConfig+0x240>)
 8005c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x200>
 8005c0a:	e01b      	b.n	8005c44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c0c:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <HAL_RCC_OscConfig+0x248>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c12:	f7fc ff83 	bl	8002b1c <HAL_GetTick>
 8005c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c18:	e00e      	b.n	8005c38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c1a:	f7fc ff7f 	bl	8002b1c <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d907      	bls.n	8005c38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e150      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	42470000 	.word	0x42470000
 8005c34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c38:	4b88      	ldr	r3, [pc, #544]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1ea      	bne.n	8005c1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8097 	beq.w	8005d80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c52:	2300      	movs	r3, #0
 8005c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c56:	4b81      	ldr	r3, [pc, #516]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10f      	bne.n	8005c82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	4b7d      	ldr	r3, [pc, #500]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c72:	4b7a      	ldr	r3, [pc, #488]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c7a:	60bb      	str	r3, [r7, #8]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c82:	4b77      	ldr	r3, [pc, #476]	@ (8005e60 <HAL_RCC_OscConfig+0x474>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d118      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c8e:	4b74      	ldr	r3, [pc, #464]	@ (8005e60 <HAL_RCC_OscConfig+0x474>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a73      	ldr	r2, [pc, #460]	@ (8005e60 <HAL_RCC_OscConfig+0x474>)
 8005c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c9a:	f7fc ff3f 	bl	8002b1c <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ca2:	f7fc ff3b 	bl	8002b1c <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e10c      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e60 <HAL_RCC_OscConfig+0x474>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d106      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x2ea>
 8005cc8:	4b64      	ldr	r3, [pc, #400]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ccc:	4a63      	ldr	r2, [pc, #396]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cd4:	e01c      	b.n	8005d10 <HAL_RCC_OscConfig+0x324>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d10c      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x30c>
 8005cde:	4b5f      	ldr	r3, [pc, #380]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005ce4:	f043 0304 	orr.w	r3, r3, #4
 8005ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cea:	4b5c      	ldr	r3, [pc, #368]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	4a5b      	ldr	r2, [pc, #364]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005cf0:	f043 0301 	orr.w	r3, r3, #1
 8005cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cf6:	e00b      	b.n	8005d10 <HAL_RCC_OscConfig+0x324>
 8005cf8:	4b58      	ldr	r3, [pc, #352]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfc:	4a57      	ldr	r2, [pc, #348]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005cfe:	f023 0301 	bic.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d04:	4b55      	ldr	r3, [pc, #340]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d08:	4a54      	ldr	r2, [pc, #336]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005d0a:	f023 0304 	bic.w	r3, r3, #4
 8005d0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d015      	beq.n	8005d44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d18:	f7fc ff00 	bl	8002b1c <HAL_GetTick>
 8005d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1e:	e00a      	b.n	8005d36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d20:	f7fc fefc 	bl	8002b1c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0cb      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d36:	4b49      	ldr	r3, [pc, #292]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0ee      	beq.n	8005d20 <HAL_RCC_OscConfig+0x334>
 8005d42:	e014      	b.n	8005d6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d44:	f7fc feea 	bl	8002b1c <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d4c:	f7fc fee6 	bl	8002b1c <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e0b5      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d62:	4b3e      	ldr	r3, [pc, #248]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1ee      	bne.n	8005d4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d105      	bne.n	8005d80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d74:	4b39      	ldr	r3, [pc, #228]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d78:	4a38      	ldr	r2, [pc, #224]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 80a1 	beq.w	8005ecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d8a:	4b34      	ldr	r3, [pc, #208]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 030c 	and.w	r3, r3, #12
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d05c      	beq.n	8005e50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d141      	bne.n	8005e22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d9e:	4b31      	ldr	r3, [pc, #196]	@ (8005e64 <HAL_RCC_OscConfig+0x478>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da4:	f7fc feba 	bl	8002b1c <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dac:	f7fc feb6 	bl	8002b1c <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e087      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dbe:	4b27      	ldr	r3, [pc, #156]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1f0      	bne.n	8005dac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	019b      	lsls	r3, r3, #6
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	3b01      	subs	r3, #1
 8005de4:	041b      	lsls	r3, r3, #16
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dec:	061b      	lsls	r3, r3, #24
 8005dee:	491b      	ldr	r1, [pc, #108]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e64 <HAL_RCC_OscConfig+0x478>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfa:	f7fc fe8f 	bl	8002b1c <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e02:	f7fc fe8b 	bl	8002b1c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e05c      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e14:	4b11      	ldr	r3, [pc, #68]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x416>
 8005e20:	e054      	b.n	8005ecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e22:	4b10      	ldr	r3, [pc, #64]	@ (8005e64 <HAL_RCC_OscConfig+0x478>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e28:	f7fc fe78 	bl	8002b1c <HAL_GetTick>
 8005e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e30:	f7fc fe74 	bl	8002b1c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e045      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e42:	4b06      	ldr	r3, [pc, #24]	@ (8005e5c <HAL_RCC_OscConfig+0x470>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x444>
 8005e4e:	e03d      	b.n	8005ecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e038      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	40007000 	.word	0x40007000
 8005e64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e68:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <HAL_RCC_OscConfig+0x4ec>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d028      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d121      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d11a      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e98:	4013      	ands	r3, r2
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d111      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d107      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e000      	b.n	8005ece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800

08005edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0cc      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef0:	4b68      	ldr	r3, [pc, #416]	@ (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d90c      	bls.n	8005f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efe:	4b65      	ldr	r3, [pc, #404]	@ (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f06:	4b63      	ldr	r3, [pc, #396]	@ (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0b8      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d020      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f30:	4b59      	ldr	r3, [pc, #356]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4a58      	ldr	r2, [pc, #352]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f48:	4b53      	ldr	r3, [pc, #332]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	4a52      	ldr	r2, [pc, #328]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f54:	4b50      	ldr	r3, [pc, #320]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	494d      	ldr	r1, [pc, #308]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d044      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d107      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7a:	4b47      	ldr	r3, [pc, #284]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d119      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e07f      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d003      	beq.n	8005f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e06f      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005faa:	4b3b      	ldr	r3, [pc, #236]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e067      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fba:	4b37      	ldr	r3, [pc, #220]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 0203 	bic.w	r2, r3, #3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4934      	ldr	r1, [pc, #208]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fcc:	f7fc fda6 	bl	8002b1c <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd4:	f7fc fda2 	bl	8002b1c <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e04f      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	4b2b      	ldr	r3, [pc, #172]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 020c 	and.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d1eb      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b25      	ldr	r3, [pc, #148]	@ (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d20c      	bcs.n	8006024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b22      	ldr	r3, [pc, #136]	@ (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006012:	4b20      	ldr	r3, [pc, #128]	@ (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e032      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006030:	4b19      	ldr	r3, [pc, #100]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4916      	ldr	r1, [pc, #88]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800604e:	4b12      	ldr	r3, [pc, #72]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	490e      	ldr	r1, [pc, #56]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	4313      	orrs	r3, r2
 8006060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006062:	f000 f821 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8006066:	4602      	mov	r2, r0
 8006068:	4b0b      	ldr	r3, [pc, #44]	@ (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	490a      	ldr	r1, [pc, #40]	@ (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8006074:	5ccb      	ldrb	r3, [r1, r3]
 8006076:	fa22 f303 	lsr.w	r3, r2, r3
 800607a:	4a09      	ldr	r2, [pc, #36]	@ (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800607e:	4b09      	ldr	r3, [pc, #36]	@ (80060a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fc fd06 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40023c00 	.word	0x40023c00
 8006098:	40023800 	.word	0x40023800
 800609c:	0800e5e4 	.word	0x0800e5e4
 80060a0:	2000000c 	.word	0x2000000c
 80060a4:	20000010 	.word	0x20000010

080060a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060ac:	b094      	sub	sp, #80	@ 0x50
 80060ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060b4:	2300      	movs	r3, #0
 80060b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b8:	2300      	movs	r3, #0
 80060ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060c0:	4b79      	ldr	r3, [pc, #484]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d00d      	beq.n	80060e8 <HAL_RCC_GetSysClockFreq+0x40>
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	f200 80e1 	bhi.w	8006294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0x34>
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d003      	beq.n	80060e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80060da:	e0db      	b.n	8006294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060dc:	4b73      	ldr	r3, [pc, #460]	@ (80062ac <HAL_RCC_GetSysClockFreq+0x204>)
 80060de:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80060e0:	e0db      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060e2:	4b73      	ldr	r3, [pc, #460]	@ (80062b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80060e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060e6:	e0d8      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e8:	4b6f      	ldr	r3, [pc, #444]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060f2:	4b6d      	ldr	r3, [pc, #436]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d063      	beq.n	80061c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fe:	4b6a      	ldr	r3, [pc, #424]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	099b      	lsrs	r3, r3, #6
 8006104:	2200      	movs	r2, #0
 8006106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006108:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800610a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006110:	633b      	str	r3, [r7, #48]	@ 0x30
 8006112:	2300      	movs	r3, #0
 8006114:	637b      	str	r3, [r7, #52]	@ 0x34
 8006116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800611a:	4622      	mov	r2, r4
 800611c:	462b      	mov	r3, r5
 800611e:	f04f 0000 	mov.w	r0, #0
 8006122:	f04f 0100 	mov.w	r1, #0
 8006126:	0159      	lsls	r1, r3, #5
 8006128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800612c:	0150      	lsls	r0, r2, #5
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4621      	mov	r1, r4
 8006134:	1a51      	subs	r1, r2, r1
 8006136:	6139      	str	r1, [r7, #16]
 8006138:	4629      	mov	r1, r5
 800613a:	eb63 0301 	sbc.w	r3, r3, r1
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800614c:	4659      	mov	r1, fp
 800614e:	018b      	lsls	r3, r1, #6
 8006150:	4651      	mov	r1, sl
 8006152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006156:	4651      	mov	r1, sl
 8006158:	018a      	lsls	r2, r1, #6
 800615a:	4651      	mov	r1, sl
 800615c:	ebb2 0801 	subs.w	r8, r2, r1
 8006160:	4659      	mov	r1, fp
 8006162:	eb63 0901 	sbc.w	r9, r3, r1
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800617a:	4690      	mov	r8, r2
 800617c:	4699      	mov	r9, r3
 800617e:	4623      	mov	r3, r4
 8006180:	eb18 0303 	adds.w	r3, r8, r3
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	462b      	mov	r3, r5
 8006188:	eb49 0303 	adc.w	r3, r9, r3
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800619a:	4629      	mov	r1, r5
 800619c:	024b      	lsls	r3, r1, #9
 800619e:	4621      	mov	r1, r4
 80061a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061a4:	4621      	mov	r1, r4
 80061a6:	024a      	lsls	r2, r1, #9
 80061a8:	4610      	mov	r0, r2
 80061aa:	4619      	mov	r1, r3
 80061ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ae:	2200      	movs	r2, #0
 80061b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061b8:	f7fa f872 	bl	80002a0 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4613      	mov	r3, r2
 80061c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061c4:	e058      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c6:	4b38      	ldr	r3, [pc, #224]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	099b      	lsrs	r3, r3, #6
 80061cc:	2200      	movs	r2, #0
 80061ce:	4618      	mov	r0, r3
 80061d0:	4611      	mov	r1, r2
 80061d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061d6:	623b      	str	r3, [r7, #32]
 80061d8:	2300      	movs	r3, #0
 80061da:	627b      	str	r3, [r7, #36]	@ 0x24
 80061dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	f04f 0000 	mov.w	r0, #0
 80061e8:	f04f 0100 	mov.w	r1, #0
 80061ec:	0159      	lsls	r1, r3, #5
 80061ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061f2:	0150      	lsls	r0, r2, #5
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4641      	mov	r1, r8
 80061fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80061fe:	4649      	mov	r1, r9
 8006200:	eb63 0b01 	sbc.w	fp, r3, r1
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006218:	ebb2 040a 	subs.w	r4, r2, sl
 800621c:	eb63 050b 	sbc.w	r5, r3, fp
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	00eb      	lsls	r3, r5, #3
 800622a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800622e:	00e2      	lsls	r2, r4, #3
 8006230:	4614      	mov	r4, r2
 8006232:	461d      	mov	r5, r3
 8006234:	4643      	mov	r3, r8
 8006236:	18e3      	adds	r3, r4, r3
 8006238:	603b      	str	r3, [r7, #0]
 800623a:	464b      	mov	r3, r9
 800623c:	eb45 0303 	adc.w	r3, r5, r3
 8006240:	607b      	str	r3, [r7, #4]
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800624e:	4629      	mov	r1, r5
 8006250:	028b      	lsls	r3, r1, #10
 8006252:	4621      	mov	r1, r4
 8006254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006258:	4621      	mov	r1, r4
 800625a:	028a      	lsls	r2, r1, #10
 800625c:	4610      	mov	r0, r2
 800625e:	4619      	mov	r1, r3
 8006260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006262:	2200      	movs	r2, #0
 8006264:	61bb      	str	r3, [r7, #24]
 8006266:	61fa      	str	r2, [r7, #28]
 8006268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800626c:	f7fa f818 	bl	80002a0 <__aeabi_uldivmod>
 8006270:	4602      	mov	r2, r0
 8006272:	460b      	mov	r3, r1
 8006274:	4613      	mov	r3, r2
 8006276:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006278:	4b0b      	ldr	r3, [pc, #44]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	0c1b      	lsrs	r3, r3, #16
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	3301      	adds	r3, #1
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006288:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800628a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006290:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006292:	e002      	b.n	800629a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006294:	4b05      	ldr	r3, [pc, #20]	@ (80062ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800629a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800629c:	4618      	mov	r0, r3
 800629e:	3750      	adds	r7, #80	@ 0x50
 80062a0:	46bd      	mov	sp, r7
 80062a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062a6:	bf00      	nop
 80062a8:	40023800 	.word	0x40023800
 80062ac:	00f42400 	.word	0x00f42400
 80062b0:	007a1200 	.word	0x007a1200

080062b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b8:	4b03      	ldr	r3, [pc, #12]	@ (80062c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ba:	681b      	ldr	r3, [r3, #0]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	2000000c 	.word	0x2000000c

080062cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80062d0:	f7ff fff0 	bl	80062b4 <HAL_RCC_GetHCLKFreq>
 80062d4:	4602      	mov	r2, r0
 80062d6:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	0a9b      	lsrs	r3, r3, #10
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	4903      	ldr	r1, [pc, #12]	@ (80062f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062e2:	5ccb      	ldrb	r3, [r1, r3]
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40023800 	.word	0x40023800
 80062f0:	0800e5f4 	.word	0x0800e5f4

080062f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062f8:	f7ff ffdc 	bl	80062b4 <HAL_RCC_GetHCLKFreq>
 80062fc:	4602      	mov	r2, r0
 80062fe:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	0b5b      	lsrs	r3, r3, #13
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	4903      	ldr	r1, [pc, #12]	@ (8006318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006310:	4618      	mov	r0, r3
 8006312:	bd80      	pop	{r7, pc}
 8006314:	40023800 	.word	0x40023800
 8006318:	0800e5f4 	.word	0x0800e5f4

0800631c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d105      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006340:	2b00      	cmp	r3, #0
 8006342:	d035      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006344:	4b67      	ldr	r3, [pc, #412]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800634a:	f7fc fbe7 	bl	8002b1c <HAL_GetTick>
 800634e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006350:	e008      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006352:	f7fc fbe3 	bl	8002b1c <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e0ba      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006364:	4b60      	ldr	r3, [pc, #384]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f0      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	019a      	lsls	r2, r3, #6
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	071b      	lsls	r3, r3, #28
 800637c:	495a      	ldr	r1, [pc, #360]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800637e:	4313      	orrs	r3, r2
 8006380:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006384:	4b57      	ldr	r3, [pc, #348]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800638a:	f7fc fbc7 	bl	8002b1c <HAL_GetTick>
 800638e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006392:	f7fc fbc3 	bl	8002b1c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e09a      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063a4:	4b50      	ldr	r3, [pc, #320]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8083 	beq.w	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	4b49      	ldr	r3, [pc, #292]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	4a48      	ldr	r2, [pc, #288]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80063ce:	4b46      	ldr	r3, [pc, #280]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063da:	4b44      	ldr	r3, [pc, #272]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a43      	ldr	r2, [pc, #268]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063e6:	f7fc fb99 	bl	8002b1c <HAL_GetTick>
 80063ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063ec:	e008      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063ee:	f7fc fb95 	bl	8002b1c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d901      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e06c      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006400:	4b3a      	ldr	r3, [pc, #232]	@ (80064ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0f0      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800640c:	4b36      	ldr	r3, [pc, #216]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006410:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006414:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d02f      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	d028      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800642a:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800642c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006432:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006434:	4b2e      	ldr	r3, [pc, #184]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800643a:	4b2d      	ldr	r3, [pc, #180]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006440:	4a29      	ldr	r2, [pc, #164]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006446:	4b28      	ldr	r3, [pc, #160]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d114      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006452:	f7fc fb63 	bl	8002b1c <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006458:	e00a      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800645a:	f7fc fb5f 	bl	8002b1c <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006468:	4293      	cmp	r3, r2
 800646a:	d901      	bls.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e034      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006470:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0ee      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006488:	d10d      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800648a:	4b17      	ldr	r3, [pc, #92]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800649a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800649e:	4912      	ldr	r1, [pc, #72]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]
 80064a4:	e005      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80064a6:	4b10      	ldr	r3, [pc, #64]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4a0f      	ldr	r2, [pc, #60]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064ac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80064b0:	6093      	str	r3, [r2, #8]
 80064b2:	4b0d      	ldr	r3, [pc, #52]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064b4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064be:	490a      	ldr	r1, [pc, #40]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7c1a      	ldrb	r2, [r3, #16]
 80064d4:	4b07      	ldr	r3, [pc, #28]	@ (80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80064d6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	42470068 	.word	0x42470068
 80064e8:	40023800 	.word	0x40023800
 80064ec:	40007000 	.word	0x40007000
 80064f0:	42470e40 	.word	0x42470e40
 80064f4:	424711e0 	.word	0x424711e0

080064f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d13f      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006516:	4b24      	ldr	r3, [pc, #144]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d006      	beq.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800652c:	d12f      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800652e:	4b1f      	ldr	r3, [pc, #124]	@ (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006530:	617b      	str	r3, [r7, #20]
          break;
 8006532:	e02f      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006534:	4b1c      	ldr	r3, [pc, #112]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800653c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006540:	d108      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006542:	4b19      	ldr	r3, [pc, #100]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800654a:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	e007      	b.n	8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006554:	4b14      	ldr	r3, [pc, #80]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800655c:	4a15      	ldr	r2, [pc, #84]	@ (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006564:	4b10      	ldr	r3, [pc, #64]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800656a:	099b      	lsrs	r3, r3, #6
 800656c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	fb02 f303 	mul.w	r3, r2, r3
 8006576:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800657a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800657e:	0f1b      	lsrs	r3, r3, #28
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	fbb2 f3f3 	udiv	r3, r2, r3
 800658a:	617b      	str	r3, [r7, #20]
          break;
 800658c:	e002      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
          break;
 8006592:	bf00      	nop
        }
      }
      break;
 8006594:	e000      	b.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006596:	bf00      	nop
    }
  }
  return frequency;
 8006598:	697b      	ldr	r3, [r7, #20]
}
 800659a:	4618      	mov	r0, r3
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	00bb8000 	.word	0x00bb8000
 80065b0:	007a1200 	.word	0x007a1200
 80065b4:	00f42400 	.word	0x00f42400

080065b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e022      	b.n	8006610 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fb feed 	bl	80023bc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2203      	movs	r2, #3
 80065e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f814 	bl	8006618 <HAL_SD_InitCard>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e00a      	b.n	8006610 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006618:	b5b0      	push	{r4, r5, r7, lr}
 800661a:	b08e      	sub	sp, #56	@ 0x38
 800661c:	af04      	add	r7, sp, #16
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006620:	2300      	movs	r3, #0
 8006622:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800662c:	2300      	movs	r3, #0
 800662e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006634:	2376      	movs	r3, #118	@ 0x76
 8006636:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681d      	ldr	r5, [r3, #0]
 800663c:	466c      	mov	r4, sp
 800663e:	f107 0314 	add.w	r3, r7, #20
 8006642:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800664a:	f107 0308 	add.w	r3, r7, #8
 800664e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006650:	4628      	mov	r0, r5
 8006652:	f002 ffd7 	bl	8009604 <SDIO_Init>
 8006656:	4603      	mov	r3, r0
 8006658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e04f      	b.n	8006708 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006668:	4b29      	ldr	r3, [pc, #164]	@ (8006710 <HAL_SD_InitCard+0xf8>)
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f003 f80f 	bl	8009696 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006678:	4b25      	ldr	r3, [pc, #148]	@ (8006710 <HAL_SD_InitCard+0xf8>)
 800667a:	2201      	movs	r2, #1
 800667c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800667e:	2002      	movs	r0, #2
 8006680:	f7fc fa58 	bl	8002b34 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f911 	bl	80078ac <SD_PowerON>
 800668a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e02e      	b.n	8006708 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 f830 	bl	8007710 <SD_InitCard>
 80066b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00b      	beq.n	80066d0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e01b      	b.n	8006708 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80066d8:	4618      	mov	r0, r3
 80066da:	f003 f86e 	bl	80097ba <SDMMC_CmdBlockLength>
 80066de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00f      	beq.n	8006706 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006714 <HAL_SD_InitCard+0xfc>)
 80066ec:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	431a      	orrs	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3728      	adds	r7, #40	@ 0x28
 800670c:	46bd      	mov	sp, r7
 800670e:	bdb0      	pop	{r4, r5, r7, pc}
 8006710:	422580a0 	.word	0x422580a0
 8006714:	004005ff 	.word	0x004005ff

08006718 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b092      	sub	sp, #72	@ 0x48
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006726:	f7fc f9f9 	bl	8002b1c <HAL_GetTick>
 800672a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e1c5      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	f040 81b8 	bne.w	8006ac8 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800675e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	441a      	add	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006768:	429a      	cmp	r2, r3
 800676a:	d907      	bls.n	800677c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006770:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e1ac      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2203      	movs	r2, #3
 8006780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006790:	2b01      	cmp	r3, #1
 8006792:	d002      	beq.n	800679a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	025b      	lsls	r3, r3, #9
 8006798:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	025b      	lsls	r3, r3, #9
 80067a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80067a6:	2390      	movs	r3, #144	@ 0x90
 80067a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80067aa:	2302      	movs	r3, #2
 80067ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f107 0214 	add.w	r2, r7, #20
 80067be:	4611      	mov	r1, r2
 80067c0:	4618      	mov	r0, r3
 80067c2:	f002 ffce 	bl	8009762 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d90a      	bls.n	80067e2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2202      	movs	r2, #2
 80067d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067d8:	4618      	mov	r0, r3
 80067da:	f003 f832 	bl	8009842 <SDMMC_CmdReadMultiBlock>
 80067de:	6478      	str	r0, [r7, #68]	@ 0x44
 80067e0:	e009      	b.n	80067f6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067ee:	4618      	mov	r0, r3
 80067f0:	f003 f805 	bl	80097fe <SDMMC_CmdReadSingleBlock>
 80067f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80067f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d012      	beq.n	8006822 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a7e      	ldr	r2, [pc, #504]	@ (80069fc <HAL_SD_ReadBlocks+0x2e4>)
 8006802:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680a:	431a      	orrs	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e159      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006826:	e061      	b.n	80068ec <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d03c      	beq.n	80068b0 <HAL_SD_ReadBlocks+0x198>
 8006836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d039      	beq.n	80068b0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800683c:	2300      	movs	r3, #0
 800683e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006840:	e033      	b.n	80068aa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f002 ff07 	bl	800965a <SDIO_ReadFIFO>
 800684c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	b2da      	uxtb	r2, r3
 8006852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006854:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006858:	3301      	adds	r3, #1
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800685c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685e:	3b01      	subs	r3, #1
 8006860:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006864:	0a1b      	lsrs	r3, r3, #8
 8006866:	b2da      	uxtb	r2, r3
 8006868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800686c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686e:	3301      	adds	r3, #1
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006874:	3b01      	subs	r3, #1
 8006876:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687a:	0c1b      	lsrs	r3, r3, #16
 800687c:	b2da      	uxtb	r2, r3
 800687e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006880:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006884:	3301      	adds	r3, #1
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800688a:	3b01      	subs	r3, #1
 800688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	0e1b      	lsrs	r3, r3, #24
 8006892:	b2da      	uxtb	r2, r3
 8006894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006896:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	3301      	adds	r3, #1
 800689c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800689e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a0:	3b01      	subs	r3, #1
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80068a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068a6:	3301      	adds	r3, #1
 80068a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ac:	2b07      	cmp	r3, #7
 80068ae:	d9c8      	bls.n	8006842 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80068b0:	f7fc f934 	bl	8002b1c <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80068bc:	429a      	cmp	r2, r3
 80068be:	d902      	bls.n	80068c6 <HAL_SD_ReadBlocks+0x1ae>
 80068c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d112      	bne.n	80068ec <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a4c      	ldr	r2, [pc, #304]	@ (80069fc <HAL_SD_ReadBlocks+0x2e4>)
 80068cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e0f4      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f2:	f240 332a 	movw	r3, #810	@ 0x32a
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d095      	beq.n	8006828 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d022      	beq.n	8006950 <HAL_SD_ReadBlocks+0x238>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d91f      	bls.n	8006950 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006914:	2b03      	cmp	r3, #3
 8006916:	d01b      	beq.n	8006950 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f002 fff7 	bl	8009910 <SDMMC_CmdStopTransfer>
 8006922:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006926:	2b00      	cmp	r3, #0
 8006928:	d012      	beq.n	8006950 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a33      	ldr	r2, [pc, #204]	@ (80069fc <HAL_SD_ReadBlocks+0x2e4>)
 8006930:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006938:	431a      	orrs	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0c2      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006956:	f003 0308 	and.w	r3, r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_SD_ReadBlocks+0x254>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006968:	2b00      	cmp	r3, #0
 800696a:	d012      	beq.n	8006992 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a22      	ldr	r2, [pc, #136]	@ (80069fc <HAL_SD_ReadBlocks+0x2e4>)
 8006972:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006978:	f043 0208 	orr.w	r2, r3, #8
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e0a1      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d012      	beq.n	80069c6 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a15      	ldr	r2, [pc, #84]	@ (80069fc <HAL_SD_ReadBlocks+0x2e4>)
 80069a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	f043 0202 	orr.w	r2, r3, #2
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e087      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d064      	beq.n	8006a9e <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a08      	ldr	r2, [pc, #32]	@ (80069fc <HAL_SD_ReadBlocks+0x2e4>)
 80069da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e06d      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
 80069fa:	bf00      	nop
 80069fc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 fe28 	bl	800965a <SDIO_ReadFIFO>
 8006a0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a12:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a16:	3301      	adds	r3, #1
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a28:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a32:	3b01      	subs	r3, #1
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a38:	0c1b      	lsrs	r3, r3, #16
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a42:	3301      	adds	r3, #1
 8006a44:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	0e1b      	lsrs	r3, r3, #24
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a54:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a58:	3301      	adds	r3, #1
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a62:	f7fc f85b 	bl	8002b1c <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d902      	bls.n	8006a78 <HAL_SD_ReadBlocks+0x360>
 8006a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d112      	bne.n	8006a9e <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a18      	ldr	r2, [pc, #96]	@ (8006ae0 <HAL_SD_ReadBlocks+0x3c8>)
 8006a7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a84:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e01b      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <HAL_SD_ReadBlocks+0x39a>
 8006aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1a6      	bne.n	8006a00 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006aba:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e006      	b.n	8006ad6 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006acc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
  }
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3748      	adds	r7, #72	@ 0x48
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	004005ff 	.word	0x004005ff

08006ae4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b092      	sub	sp, #72	@ 0x48
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006af2:	f7fc f813 	bl	8002b1c <HAL_GetTick>
 8006af6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d107      	bne.n	8006b16 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e16d      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	f040 8160 	bne.w	8006de4 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	441a      	add	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d907      	bls.n	8006b48 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e154      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2200      	movs	r2, #0
 8006b56:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d002      	beq.n	8006b66 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	025b      	lsls	r3, r3, #9
 8006b64:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	025b      	lsls	r3, r3, #9
 8006b70:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006b72:	2390      	movs	r3, #144	@ 0x90
 8006b74:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006b76:	2300      	movs	r3, #0
 8006b78:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f107 0218 	add.w	r2, r7, #24
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f002 fde8 	bl	8009762 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d90a      	bls.n	8006bae <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f002 fe90 	bl	80098ca <SDMMC_CmdWriteMultiBlock>
 8006baa:	6478      	str	r0, [r7, #68]	@ 0x44
 8006bac:	e009      	b.n	8006bc2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2210      	movs	r2, #16
 8006bb2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f002 fe63 	bl	8009886 <SDMMC_CmdWriteSingleBlock>
 8006bc0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d012      	beq.n	8006bee <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a8b      	ldr	r2, [pc, #556]	@ (8006dfc <HAL_SD_WriteBlocks+0x318>)
 8006bce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e101      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006bf2:	e065      	b.n	8006cc0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d040      	beq.n	8006c84 <HAL_SD_WriteBlocks+0x1a0>
 8006c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d03d      	beq.n	8006c84 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006c08:	2300      	movs	r3, #0
 8006c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c0c:	e037      	b.n	8006c7e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c16:	3301      	adds	r3, #1
 8006c18:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	021a      	lsls	r2, r3, #8
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c2e:	3301      	adds	r3, #1
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c34:	3b01      	subs	r3, #1
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	041a      	lsls	r2, r3, #16
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c46:	3301      	adds	r3, #1
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	061a      	lsls	r2, r3, #24
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c5e:	3301      	adds	r3, #1
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c64:	3b01      	subs	r3, #1
 8006c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f107 0214 	add.w	r2, r7, #20
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f002 fcfe 	bl	8009674 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c80:	2b07      	cmp	r3, #7
 8006c82:	d9c4      	bls.n	8006c0e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006c84:	f7fb ff4a 	bl	8002b1c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d902      	bls.n	8006c9a <HAL_SD_WriteBlocks+0x1b6>
 8006c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d112      	bne.n	8006cc0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a57      	ldr	r2, [pc, #348]	@ (8006dfc <HAL_SD_WriteBlocks+0x318>)
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e098      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cc6:	f240 331a 	movw	r3, #794	@ 0x31a
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d091      	beq.n	8006bf4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d022      	beq.n	8006d24 <HAL_SD_WriteBlocks+0x240>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d91f      	bls.n	8006d24 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d01b      	beq.n	8006d24 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f002 fe0d 	bl	8009910 <SDMMC_CmdStopTransfer>
 8006cf6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d012      	beq.n	8006d24 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3e      	ldr	r2, [pc, #248]	@ (8006dfc <HAL_SD_WriteBlocks+0x318>)
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e066      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2a:	f003 0308 	and.w	r3, r3, #8
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <HAL_SD_WriteBlocks+0x25c>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a2d      	ldr	r2, [pc, #180]	@ (8006dfc <HAL_SD_WriteBlocks+0x318>)
 8006d46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4c:	f043 0208 	orr.w	r2, r3, #8
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e045      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d012      	beq.n	8006d9a <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a20      	ldr	r2, [pc, #128]	@ (8006dfc <HAL_SD_WriteBlocks+0x318>)
 8006d7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	f043 0202 	orr.w	r2, r3, #2
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e02b      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d012      	beq.n	8006dce <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a13      	ldr	r2, [pc, #76]	@ (8006dfc <HAL_SD_WriteBlocks+0x318>)
 8006dae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db4:	f043 0210 	orr.w	r2, r3, #16
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e011      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006dd6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e006      	b.n	8006df2 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3748      	adds	r7, #72	@ 0x48
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	004005ff 	.word	0x004005ff

08006e00 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_SD_IRQHandler+0x2e>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 ff66 	bl	8007cf8 <SD_Read_IT>
 8006e2c:	e165      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 808f 	beq.w	8006f5c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e46:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8006e56:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006e5a:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d039      	beq.n	8006eea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d104      	bne.n	8006e8a <HAL_SD_IRQHandler+0x8a>
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d011      	beq.n	8006eae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f002 fd3e 	bl	8009910 <SDMMC_CmdStopTransfer>
 8006e94:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f92f 	bl	800710c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006eb6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <HAL_SD_IRQHandler+0xda>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f003 f99e 	bl	800a21c <HAL_SD_RxCpltCallback>
 8006ee0:	e10b      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f003 f990 	bl	800a208 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ee8:	e107      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8102 	beq.w	80070fa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d011      	beq.n	8006f24 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f002 fd03 	bl	8009910 <SDMMC_CmdStopTransfer>
 8006f0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d008      	beq.n	8006f24 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f8f4 	bl	800710c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 80e5 	bne.w	80070fa <HAL_SD_IRQHandler+0x2fa>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f040 80df 	bne.w	80070fa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0208 	bic.w	r2, r2, #8
 8006f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f003 f957 	bl	800a208 <HAL_SD_TxCpltCallback>
}
 8006f5a:	e0ce      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <HAL_SD_IRQHandler+0x17c>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 ff10 	bl	8007d9a <SD_Write_IT>
 8006f7a:	e0be      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f82:	f240 233a 	movw	r3, #570	@ 0x23a
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80b6 	beq.w	80070fa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa0:	f043 0202 	orr.w	r2, r3, #2
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d005      	beq.n	8006fc2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	f043 0208 	orr.w	r2, r3, #8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd4:	f043 0220 	orr.w	r2, r3, #32
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fee:	f043 0210 	orr.w	r2, r3, #16
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007008:	f043 0208 	orr.w	r2, r3, #8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f240 723a 	movw	r2, #1850	@ 0x73a
 8007018:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	6812      	ldr	r2, [r2, #0]
 8007024:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8007028:	f023 0302 	bic.w	r3, r3, #2
 800702c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f002 fc6c 	bl	8009910 <SDMMC_CmdStopTransfer>
 8007038:	4602      	mov	r2, r0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	431a      	orrs	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f003 0308 	and.w	r3, r3, #8
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f855 	bl	800710c <HAL_SD_ErrorCallback>
}
 8007062:	e04a      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d045      	beq.n	80070fa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f003 0310 	and.w	r3, r3, #16
 8007074:	2b00      	cmp	r3, #0
 8007076:	d104      	bne.n	8007082 <HAL_SD_IRQHandler+0x282>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d011      	beq.n	80070a6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	4a1f      	ldr	r2, [pc, #124]	@ (8007104 <HAL_SD_IRQHandler+0x304>)
 8007088:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708e:	4618      	mov	r0, r3
 8007090:	f7fc fef8 	bl	8003e84 <HAL_DMA_Abort_IT>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d02f      	beq.n	80070fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fac8 	bl	8007634 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80070a4:	e029      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <HAL_SD_IRQHandler+0x2ba>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d011      	beq.n	80070de <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	4a12      	ldr	r2, [pc, #72]	@ (8007108 <HAL_SD_IRQHandler+0x308>)
 80070c0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fc fedc 	bl	8003e84 <HAL_DMA_Abort_IT>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d013      	beq.n	80070fa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 fae3 	bl	80076a2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80070dc:	e00d      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f003 f87e 	bl	800a1f4 <HAL_SD_AbortCallback>
}
 80070f8:	e7ff      	b.n	80070fa <HAL_SD_IRQHandler+0x2fa>
 80070fa:	bf00      	nop
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	08007635 	.word	0x08007635
 8007108:	080076a3 	.word	0x080076a3

0800710c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800712e:	0f9b      	lsrs	r3, r3, #30
 8007130:	b2da      	uxtb	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800713a:	0e9b      	lsrs	r3, r3, #26
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	b2da      	uxtb	r2, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800714c:	0e1b      	lsrs	r3, r3, #24
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	b2da      	uxtb	r2, r3
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800715e:	0c1b      	lsrs	r3, r3, #16
 8007160:	b2da      	uxtb	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800716a:	0a1b      	lsrs	r3, r3, #8
 800716c:	b2da      	uxtb	r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007176:	b2da      	uxtb	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007180:	0d1b      	lsrs	r3, r3, #20
 8007182:	b29a      	uxth	r2, r3
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800718c:	0c1b      	lsrs	r3, r3, #16
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	b2da      	uxtb	r2, r3
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800719e:	0bdb      	lsrs	r3, r3, #15
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071b0:	0b9b      	lsrs	r3, r3, #14
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071c2:	0b5b      	lsrs	r3, r3, #13
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	b2da      	uxtb	r2, r3
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071d4:	0b1b      	lsrs	r3, r3, #12
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2200      	movs	r2, #0
 80071e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d163      	bne.n	80072b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071f4:	009a      	lsls	r2, r3, #2
 80071f6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80071fa:	4013      	ands	r3, r2
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007200:	0f92      	lsrs	r2, r2, #30
 8007202:	431a      	orrs	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720c:	0edb      	lsrs	r3, r3, #27
 800720e:	b2db      	uxtb	r3, r3
 8007210:	f003 0307 	and.w	r3, r3, #7
 8007214:	b2da      	uxtb	r2, r3
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800721e:	0e1b      	lsrs	r3, r3, #24
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0307 	and.w	r3, r3, #7
 8007226:	b2da      	uxtb	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007230:	0d5b      	lsrs	r3, r3, #21
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	b2da      	uxtb	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007242:	0c9b      	lsrs	r3, r3, #18
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	b2da      	uxtb	r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007254:	0bdb      	lsrs	r3, r3, #15
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	b2da      	uxtb	r2, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	7e1b      	ldrb	r3, [r3, #24]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	3302      	adds	r3, #2
 8007278:	2201      	movs	r2, #1
 800727a:	fa02 f303 	lsl.w	r3, r2, r3
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007282:	fb03 f202 	mul.w	r2, r3, r2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	7a1b      	ldrb	r3, [r3, #8]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	2201      	movs	r2, #1
 8007296:	409a      	lsls	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80072a4:	0a52      	lsrs	r2, r2, #9
 80072a6:	fb03 f202 	mul.w	r2, r3, r2
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80072b6:	e031      	b.n	800731c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d11d      	bne.n	80072fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80072c4:	041b      	lsls	r3, r3, #16
 80072c6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ce:	0c1b      	lsrs	r3, r3, #16
 80072d0:	431a      	orrs	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	3301      	adds	r3, #1
 80072dc:	029a      	lsls	r2, r3, #10
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072f0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80072fa:	e00f      	b.n	800731c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a58      	ldr	r2, [pc, #352]	@ (8007464 <HAL_SD_GetCardCSD+0x344>)
 8007302:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007308:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e09d      	b.n	8007458 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007320:	0b9b      	lsrs	r3, r3, #14
 8007322:	b2db      	uxtb	r3, r3
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	b2da      	uxtb	r2, r3
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007332:	09db      	lsrs	r3, r3, #7
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800733a:	b2da      	uxtb	r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800734a:	b2da      	uxtb	r2, r3
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007354:	0fdb      	lsrs	r3, r3, #31
 8007356:	b2da      	uxtb	r2, r3
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007360:	0f5b      	lsrs	r3, r3, #29
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	b2da      	uxtb	r2, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007372:	0e9b      	lsrs	r3, r3, #26
 8007374:	b2db      	uxtb	r3, r3
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	b2da      	uxtb	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007384:	0d9b      	lsrs	r3, r3, #22
 8007386:	b2db      	uxtb	r3, r3
 8007388:	f003 030f 	and.w	r3, r3, #15
 800738c:	b2da      	uxtb	r2, r3
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007396:	0d5b      	lsrs	r3, r3, #21
 8007398:	b2db      	uxtb	r3, r3
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c6:	0bdb      	lsrs	r3, r3, #15
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073da:	0b9b      	lsrs	r3, r3, #14
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ee:	0b5b      	lsrs	r3, r3, #13
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007402:	0b1b      	lsrs	r3, r3, #12
 8007404:	b2db      	uxtb	r3, r3
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	b2da      	uxtb	r2, r3
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007416:	0a9b      	lsrs	r3, r3, #10
 8007418:	b2db      	uxtb	r3, r3
 800741a:	f003 0303 	and.w	r3, r3, #3
 800741e:	b2da      	uxtb	r2, r3
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	b2da      	uxtb	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743e:	085b      	lsrs	r3, r3, #1
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007446:	b2da      	uxtb	r2, r3
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	004005ff 	.word	0x004005ff

08007468 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80074c0:	b5b0      	push	{r4, r5, r7, lr}
 80074c2:	b08e      	sub	sp, #56	@ 0x38
 80074c4:	af04      	add	r7, sp, #16
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2203      	movs	r2, #3
 80074d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d02e      	beq.n	800753e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e6:	d106      	bne.n	80074f6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80074f4:	e029      	b.n	800754a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074fc:	d10a      	bne.n	8007514 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa8a 	bl	8007a18 <SD_WideBus_Enable>
 8007504:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	639a      	str	r2, [r3, #56]	@ 0x38
 8007512:	e01a      	b.n	800754a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10a      	bne.n	8007530 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fac7 	bl	8007aae <SD_WideBus_Disable>
 8007520:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	639a      	str	r2, [r3, #56]	@ 0x38
 800752e:	e00c      	b.n	800754a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	639a      	str	r2, [r3, #56]	@ 0x38
 800753c:	e005      	b.n	800754a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007558:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007568:	e01f      	b.n	80075aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681d      	ldr	r5, [r3, #0]
 8007590:	466c      	mov	r4, sp
 8007592:	f107 0314 	add.w	r3, r7, #20
 8007596:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800759a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800759e:	f107 0308 	add.w	r3, r7, #8
 80075a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075a4:	4628      	mov	r0, r5
 80075a6:	f002 f82d 	bl	8009604 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80075b2:	4618      	mov	r0, r3
 80075b4:	f002 f901 	bl	80097ba <SDMMC_CmdBlockLength>
 80075b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00c      	beq.n	80075da <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a0a      	ldr	r2, [pc, #40]	@ (80075f0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 80075e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3728      	adds	r7, #40	@ 0x28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bdb0      	pop	{r4, r5, r7, pc}
 80075ee:	bf00      	nop
 80075f0:	004005ff 	.word	0x004005ff

080075f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007600:	f107 030c 	add.w	r3, r7, #12
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9de 	bl	80079c8 <SD_SendStatus>
 800760c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	431a      	orrs	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	0a5b      	lsrs	r3, r3, #9
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800762a:	693b      	ldr	r3, [r7, #16]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f240 523a 	movw	r2, #1338	@ 0x53a
 800764a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff ffd1 	bl	80075f4 <HAL_SD_GetCardState>
 8007652:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b06      	cmp	r3, #6
 8007666:	d002      	beq.n	800766e <SD_DMATxAbort+0x3a>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b05      	cmp	r3, #5
 800766c:	d10a      	bne.n	8007684 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4618      	mov	r0, r3
 8007674:	f002 f94c 	bl	8009910 <SDMMC_CmdStopTransfer>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767e:	431a      	orrs	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f002 fdb1 	bl	800a1f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007692:	e002      	b.n	800769a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7ff fd39 	bl	800710c <HAL_SD_ErrorCallback>
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ae:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80076b8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f7ff ff9a 	bl	80075f4 <HAL_SD_GetCardState>
 80076c0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b06      	cmp	r3, #6
 80076d4:	d002      	beq.n	80076dc <SD_DMARxAbort+0x3a>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b05      	cmp	r3, #5
 80076da:	d10a      	bne.n	80076f2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f002 f915 	bl	8009910 <SDMMC_CmdStopTransfer>
 80076e6:	4602      	mov	r2, r0
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	431a      	orrs	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d103      	bne.n	8007702 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f002 fd7a 	bl	800a1f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007700:	e002      	b.n	8007708 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f7ff fd02 	bl	800710c <HAL_SD_ErrorCallback>
}
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007710:	b5b0      	push	{r4, r5, r7, lr}
 8007712:	b094      	sub	sp, #80	@ 0x50
 8007714:	af04      	add	r7, sp, #16
 8007716:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f001 ffc6 	bl	80096b2 <SDIO_GetPowerState>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800772c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007730:	e0b8      	b.n	80078a4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007736:	2b03      	cmp	r3, #3
 8007738:	d02f      	beq.n	800779a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f002 f9f0 	bl	8009b24 <SDMMC_CmdSendCID>
 8007744:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <SD_InitCard+0x40>
    {
      return errorstate;
 800774c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800774e:	e0a9      	b.n	80078a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f001 fff0 	bl	800973c <SDIO_GetResponse>
 800775c:	4602      	mov	r2, r0
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2104      	movs	r1, #4
 8007768:	4618      	mov	r0, r3
 800776a:	f001 ffe7 	bl	800973c <SDIO_GetResponse>
 800776e:	4602      	mov	r2, r0
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2108      	movs	r1, #8
 800777a:	4618      	mov	r0, r3
 800777c:	f001 ffde 	bl	800973c <SDIO_GetResponse>
 8007780:	4602      	mov	r2, r0
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	210c      	movs	r1, #12
 800778c:	4618      	mov	r0, r3
 800778e:	f001 ffd5 	bl	800973c <SDIO_GetResponse>
 8007792:	4602      	mov	r2, r0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d00d      	beq.n	80077be <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f107 020e 	add.w	r2, r7, #14
 80077aa:	4611      	mov	r1, r2
 80077ac:	4618      	mov	r0, r3
 80077ae:	f002 f9f6 	bl	8009b9e <SDMMC_CmdSetRelAdd>
 80077b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <SD_InitCard+0xae>
    {
      return errorstate;
 80077ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077bc:	e072      	b.n	80078a4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d036      	beq.n	8007834 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80077c6:	89fb      	ldrh	r3, [r7, #14]
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f002 f9c0 	bl	8009b60 <SDMMC_CmdSendCSD>
 80077e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <SD_InitCard+0xdc>
    {
      return errorstate;
 80077e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ea:	e05b      	b.n	80078a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 ffa2 	bl	800973c <SDIO_GetResponse>
 80077f8:	4602      	mov	r2, r0
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2104      	movs	r1, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f001 ff99 	bl	800973c <SDIO_GetResponse>
 800780a:	4602      	mov	r2, r0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2108      	movs	r1, #8
 8007816:	4618      	mov	r0, r3
 8007818:	f001 ff90 	bl	800973c <SDIO_GetResponse>
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	210c      	movs	r1, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f001 ff87 	bl	800973c <SDIO_GetResponse>
 800782e:	4602      	mov	r2, r0
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2104      	movs	r1, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f001 ff7e 	bl	800973c <SDIO_GetResponse>
 8007840:	4603      	mov	r3, r0
 8007842:	0d1a      	lsrs	r2, r3, #20
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007848:	f107 0310 	add.w	r3, r7, #16
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff fc66 	bl	8007120 <HAL_SD_GetCardCSD>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800785a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800785e:	e021      	b.n	80078a4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	2200      	movs	r2, #0
 800786c:	461c      	mov	r4, r3
 800786e:	4615      	mov	r5, r2
 8007870:	4622      	mov	r2, r4
 8007872:	462b      	mov	r3, r5
 8007874:	4608      	mov	r0, r1
 8007876:	f002 f86d 	bl	8009954 <SDMMC_CmdSelDesel>
 800787a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800787c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <SD_InitCard+0x176>
  {
    return errorstate;
 8007882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007884:	e00e      	b.n	80078a4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681d      	ldr	r5, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	466c      	mov	r4, sp
 800788e:	f103 0210 	add.w	r2, r3, #16
 8007892:	ca07      	ldmia	r2, {r0, r1, r2}
 8007894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007898:	3304      	adds	r3, #4
 800789a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800789c:	4628      	mov	r0, r5
 800789e:	f001 feb1 	bl	8009604 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3740      	adds	r7, #64	@ 0x40
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bdb0      	pop	{r4, r5, r7, pc}

080078ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f002 f868 	bl	800999a <SDMMC_CmdGoIdleState>
 80078ca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	e072      	b.n	80079bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4618      	mov	r0, r3
 80078dc:	f002 f87b 	bl	80099d6 <SDMMC_CmdOperCond>
 80078e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f002 f851 	bl	800999a <SDMMC_CmdGoIdleState>
 80078f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <SD_PowerON+0x5e>
    {
      return errorstate;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	e05b      	b.n	80079bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800790e:	2b01      	cmp	r3, #1
 8007910:	d137      	bne.n	8007982 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2100      	movs	r1, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f002 f87b 	bl	8009a14 <SDMMC_CmdAppCommand>
 800791e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02d      	beq.n	8007982 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007926:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800792a:	e047      	b.n	80079bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f002 f86e 	bl	8009a14 <SDMMC_CmdAppCommand>
 8007938:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <SD_PowerON+0x98>
    {
      return errorstate;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	e03b      	b.n	80079bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	491e      	ldr	r1, [pc, #120]	@ (80079c4 <SD_PowerON+0x118>)
 800794a:	4618      	mov	r0, r3
 800794c:	f002 f884 	bl	8009a58 <SDMMC_CmdAppOperCommand>
 8007950:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007958:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800795c:	e02e      	b.n	80079bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2100      	movs	r1, #0
 8007964:	4618      	mov	r0, r3
 8007966:	f001 fee9 	bl	800973c <SDIO_GetResponse>
 800796a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	0fdb      	lsrs	r3, r3, #31
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <SD_PowerON+0xcc>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <SD_PowerON+0xce>
 8007978:	2300      	movs	r3, #0
 800797a:	613b      	str	r3, [r7, #16]

    count++;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	3301      	adds	r3, #1
 8007980:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007988:	4293      	cmp	r3, r2
 800798a:	d802      	bhi.n	8007992 <SD_PowerON+0xe6>
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0cc      	beq.n	800792c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007998:	4293      	cmp	r3, r2
 800799a:	d902      	bls.n	80079a2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800799c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80079a0:	e00c      	b.n	80079bc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	645a      	str	r2, [r3, #68]	@ 0x44
 80079b2:	e002      	b.n	80079ba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	c1100000 	.word	0xc1100000

080079c8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80079d8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80079dc:	e018      	b.n	8007a10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e6:	041b      	lsls	r3, r3, #16
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f002 f8f8 	bl	8009be0 <SDMMC_CmdSendStatus>
 80079f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <SD_SendStatus+0x34>
  {
    return errorstate;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	e009      	b.n	8007a10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 fe9a 	bl	800973c <SDIO_GetResponse>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]
 8007a24:	2300      	movs	r3, #0
 8007a26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 fe84 	bl	800973c <SDIO_GetResponse>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a3e:	d102      	bne.n	8007a46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007a44:	e02f      	b.n	8007aa6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a46:	f107 030c 	add.w	r3, r7, #12
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f879 	bl	8007b44 <SD_FindSCR>
 8007a52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	e023      	b.n	8007aa6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01c      	beq.n	8007aa2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a70:	041b      	lsls	r3, r3, #16
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f001 ffcd 	bl	8009a14 <SDMMC_CmdAppCommand>
 8007a7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	e00f      	b.n	8007aa6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f002 f806 	bl	8009a9e <SDMMC_CmdBusWidth>
 8007a92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	e003      	b.n	8007aa6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e001      	b.n	8007aa6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007aa2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b086      	sub	sp, #24
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	2300      	movs	r3, #0
 8007abc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f001 fe39 	bl	800973c <SDIO_GetResponse>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ad4:	d102      	bne.n	8007adc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ad6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007ada:	e02f      	b.n	8007b3c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007adc:	f107 030c 	add.w	r3, r7, #12
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f82e 	bl	8007b44 <SD_FindSCR>
 8007ae8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	e023      	b.n	8007b3c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d01c      	beq.n	8007b38 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b06:	041b      	lsls	r3, r3, #16
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	f001 ff82 	bl	8009a14 <SDMMC_CmdAppCommand>
 8007b10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	e00f      	b.n	8007b3c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 ffbb 	bl	8009a9e <SDMMC_CmdBusWidth>
 8007b28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	e003      	b.n	8007b3c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	e001      	b.n	8007b3c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b38:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b08f      	sub	sp, #60	@ 0x3c
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b4e:	f7fa ffe5 	bl	8002b1c <HAL_GetTick>
 8007b52:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60bb      	str	r3, [r7, #8]
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2108      	movs	r1, #8
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 fe25 	bl	80097ba <SDMMC_CmdBlockLength>
 8007b70:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	e0b9      	b.n	8007cf0 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f001 ff43 	bl	8009a14 <SDMMC_CmdAppCommand>
 8007b8e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b98:	e0aa      	b.n	8007cf0 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007ba0:	2308      	movs	r3, #8
 8007ba2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007ba4:	2330      	movs	r3, #48	@ 0x30
 8007ba6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007ba8:	2302      	movs	r3, #2
 8007baa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f107 0210 	add.w	r2, r7, #16
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 fdcf 	bl	8009762 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f001 ff8a 	bl	8009ae2 <SDMMC_CmdSendSCR>
 8007bce:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02a      	beq.n	8007c2c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	e08a      	b.n	8007cf0 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00f      	beq.n	8007c08 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6819      	ldr	r1, [r3, #0]
 8007bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	f107 0208 	add.w	r2, r7, #8
 8007bf4:	18d4      	adds	r4, r2, r3
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	f001 fd2f 	bl	800965a <SDIO_ReadFIFO>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	6023      	str	r3, [r4, #0]
      index++;
 8007c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c02:	3301      	adds	r3, #1
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c06:	e006      	b.n	8007c16 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d012      	beq.n	8007c3c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007c16:	f7fa ff81 	bl	8002b1c <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d102      	bne.n	8007c2c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007c2a:	e061      	b.n	8007cf0 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c32:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0cf      	beq.n	8007bda <SD_FindSCR+0x96>
 8007c3a:	e000      	b.n	8007c3e <SD_FindSCR+0xfa>
      break;
 8007c3c:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c44:	f003 0308 	and.w	r3, r3, #8
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <SD_FindSCR+0x116>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2208      	movs	r2, #8
 8007c60:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c62:	2308      	movs	r3, #8
 8007c64:	e044      	b.n	8007cf0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e037      	b.n	8007cf0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c86:	f003 0320 	and.w	r3, r3, #32
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2220      	movs	r2, #32
 8007c94:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c96:	2320      	movs	r3, #32
 8007c98:	e02a      	b.n	8007cf0 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007ca2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	061a      	lsls	r2, r3, #24
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007cb0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cba:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	0e1b      	lsrs	r3, r3, #24
 8007cc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc4:	601a      	str	r2, [r3, #0]
    scr++;
 8007cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc8:	3304      	adds	r3, #4
 8007cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	061a      	lsls	r2, r3, #24
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007cd8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	0a1b      	lsrs	r3, r3, #8
 8007cde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ce2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	0e1b      	lsrs	r3, r3, #24
 8007ce8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cec:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	373c      	adds	r7, #60	@ 0x3c
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd90      	pop	{r4, r7, pc}

08007cf8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d04:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d03f      	beq.n	8007d92 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	e033      	b.n	8007d80 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 fc9c 	bl	800965a <SDIO_ReadFIFO>
 8007d22:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	0a1b      	lsrs	r3, r3, #8
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	3301      	adds	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	0c1b      	lsrs	r3, r3, #16
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	3b01      	subs	r3, #1
 8007d62:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	0e1b      	lsrs	r3, r3, #24
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b07      	cmp	r3, #7
 8007d84:	d9c8      	bls.n	8007d18 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8007d92:	bf00      	nop
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d043      	beq.n	8007e3c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e037      	b.n	8007e2a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	021a      	lsls	r2, r3, #8
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	041a      	lsls	r2, r3, #16
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3301      	adds	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	061a      	lsls	r2, r3, #24
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f107 0208 	add.w	r2, r7, #8
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f001 fc28 	bl	8009674 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	3301      	adds	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b07      	cmp	r3, #7
 8007e2e:	d9c4      	bls.n	8007dba <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e041      	b.n	8007eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fa fba6 	bl	80025bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f000 faf8 	bl	8008478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d001      	beq.n	8007efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e044      	b.n	8007f86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f042 0201 	orr.w	r2, r2, #1
 8007f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1e      	ldr	r2, [pc, #120]	@ (8007f94 <HAL_TIM_Base_Start_IT+0xb0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d018      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x6c>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f26:	d013      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x6c>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8007f98 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x6c>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a19      	ldr	r2, [pc, #100]	@ (8007f9c <HAL_TIM_Base_Start_IT+0xb8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x6c>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a17      	ldr	r2, [pc, #92]	@ (8007fa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <HAL_TIM_Base_Start_IT+0x6c>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a16      	ldr	r2, [pc, #88]	@ (8007fa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d111      	bne.n	8007f74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d010      	beq.n	8007f84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f042 0201 	orr.w	r2, r2, #1
 8007f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f72:	e007      	b.n	8007f84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40000400 	.word	0x40000400
 8007f9c:	40000800 	.word	0x40000800
 8007fa0:	40000c00 	.word	0x40000c00
 8007fa4:	40014000 	.word	0x40014000

08007fa8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 0201 	bic.w	r2, r2, #1
 8007fbe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6a1a      	ldr	r2, [r3, #32]
 8007fc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10f      	bne.n	8007ff0 <HAL_TIM_Base_Stop_IT+0x48>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d107      	bne.n	8007ff0 <HAL_TIM_Base_Stop_IT+0x48>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e041      	b.n	800809e <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f839 	bl	80080a6 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f000 fa16 	bl	8008478 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0208 	bic.w	r2, r2, #8
 800805a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	6819      	ldr	r1, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	683a      	ldr	r2, [r7, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr

080080ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d020      	beq.n	800811e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01b      	beq.n	800811e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f06f 0202 	mvn.w	r2, #2
 80080ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d003      	beq.n	800810c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f999 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 800810a:	e005      	b.n	8008118 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f98b 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f99c 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d020      	beq.n	800816a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f003 0304 	and.w	r3, r3, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01b      	beq.n	800816a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f06f 0204 	mvn.w	r2, #4
 800813a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f973 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 8008156:	e005      	b.n	8008164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f965 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f976 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d020      	beq.n	80081b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01b      	beq.n	80081b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f06f 0208 	mvn.w	r2, #8
 8008186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2204      	movs	r2, #4
 800818c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f94d 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 80081a2:	e005      	b.n	80081b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f93f 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f950 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d020      	beq.n	8008202 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d01b      	beq.n	8008202 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f06f 0210 	mvn.w	r2, #16
 80081d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2208      	movs	r2, #8
 80081d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f927 	bl	800843c <HAL_TIM_IC_CaptureCallback>
 80081ee:	e005      	b.n	80081fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f919 	bl	8008428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f92a 	bl	8008450 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00c      	beq.n	8008226 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d007      	beq.n	8008226 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f06f 0201 	mvn.w	r2, #1
 800821e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7f8 fc9b 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00c      	beq.n	800824a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fab5 	bl	80087b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00c      	beq.n	800826e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f8fb 	bl	8008464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00c      	beq.n	8008292 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f06f 0220 	mvn.w	r2, #32
 800828a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fa87 	bl	80087a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d101      	bne.n	80082b6 <HAL_TIM_ConfigClockSource+0x1c>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e0b4      	b.n	8008420 <HAL_TIM_ConfigClockSource+0x186>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80082d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082ee:	d03e      	beq.n	800836e <HAL_TIM_ConfigClockSource+0xd4>
 80082f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082f4:	f200 8087 	bhi.w	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 80082f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082fc:	f000 8086 	beq.w	800840c <HAL_TIM_ConfigClockSource+0x172>
 8008300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008304:	d87f      	bhi.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 8008306:	2b70      	cmp	r3, #112	@ 0x70
 8008308:	d01a      	beq.n	8008340 <HAL_TIM_ConfigClockSource+0xa6>
 800830a:	2b70      	cmp	r3, #112	@ 0x70
 800830c:	d87b      	bhi.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 800830e:	2b60      	cmp	r3, #96	@ 0x60
 8008310:	d050      	beq.n	80083b4 <HAL_TIM_ConfigClockSource+0x11a>
 8008312:	2b60      	cmp	r3, #96	@ 0x60
 8008314:	d877      	bhi.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 8008316:	2b50      	cmp	r3, #80	@ 0x50
 8008318:	d03c      	beq.n	8008394 <HAL_TIM_ConfigClockSource+0xfa>
 800831a:	2b50      	cmp	r3, #80	@ 0x50
 800831c:	d873      	bhi.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 800831e:	2b40      	cmp	r3, #64	@ 0x40
 8008320:	d058      	beq.n	80083d4 <HAL_TIM_ConfigClockSource+0x13a>
 8008322:	2b40      	cmp	r3, #64	@ 0x40
 8008324:	d86f      	bhi.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 8008326:	2b30      	cmp	r3, #48	@ 0x30
 8008328:	d064      	beq.n	80083f4 <HAL_TIM_ConfigClockSource+0x15a>
 800832a:	2b30      	cmp	r3, #48	@ 0x30
 800832c:	d86b      	bhi.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 800832e:	2b20      	cmp	r3, #32
 8008330:	d060      	beq.n	80083f4 <HAL_TIM_ConfigClockSource+0x15a>
 8008332:	2b20      	cmp	r3, #32
 8008334:	d867      	bhi.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d05c      	beq.n	80083f4 <HAL_TIM_ConfigClockSource+0x15a>
 800833a:	2b10      	cmp	r3, #16
 800833c:	d05a      	beq.n	80083f4 <HAL_TIM_ConfigClockSource+0x15a>
 800833e:	e062      	b.n	8008406 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008350:	f000 f998 	bl	8008684 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008362:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	609a      	str	r2, [r3, #8]
      break;
 800836c:	e04f      	b.n	800840e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800837e:	f000 f981 	bl	8008684 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008390:	609a      	str	r2, [r3, #8]
      break;
 8008392:	e03c      	b.n	800840e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083a0:	461a      	mov	r2, r3
 80083a2:	f000 f8f5 	bl	8008590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2150      	movs	r1, #80	@ 0x50
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 f94e 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 80083b2:	e02c      	b.n	800840e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083c0:	461a      	mov	r2, r3
 80083c2:	f000 f914 	bl	80085ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2160      	movs	r1, #96	@ 0x60
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 f93e 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 80083d2:	e01c      	b.n	800840e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083e0:	461a      	mov	r2, r3
 80083e2:	f000 f8d5 	bl	8008590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2140      	movs	r1, #64	@ 0x40
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 f92e 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 80083f2:	e00c      	b.n	800840e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f000 f925 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 8008404:	e003      	b.n	800840e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	73fb      	strb	r3, [r7, #15]
      break;
 800840a:	e000      	b.n	800840e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800840c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800841e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a3a      	ldr	r2, [pc, #232]	@ (8008574 <TIM_Base_SetConfig+0xfc>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00f      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008496:	d00b      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a37      	ldr	r2, [pc, #220]	@ (8008578 <TIM_Base_SetConfig+0x100>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d007      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a36      	ldr	r2, [pc, #216]	@ (800857c <TIM_Base_SetConfig+0x104>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d003      	beq.n	80084b0 <TIM_Base_SetConfig+0x38>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a35      	ldr	r2, [pc, #212]	@ (8008580 <TIM_Base_SetConfig+0x108>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d108      	bne.n	80084c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a2b      	ldr	r2, [pc, #172]	@ (8008574 <TIM_Base_SetConfig+0xfc>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d01b      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084d0:	d017      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a28      	ldr	r2, [pc, #160]	@ (8008578 <TIM_Base_SetConfig+0x100>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d013      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a27      	ldr	r2, [pc, #156]	@ (800857c <TIM_Base_SetConfig+0x104>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00f      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a26      	ldr	r2, [pc, #152]	@ (8008580 <TIM_Base_SetConfig+0x108>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d00b      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a25      	ldr	r2, [pc, #148]	@ (8008584 <TIM_Base_SetConfig+0x10c>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d007      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a24      	ldr	r2, [pc, #144]	@ (8008588 <TIM_Base_SetConfig+0x110>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d003      	beq.n	8008502 <TIM_Base_SetConfig+0x8a>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a23      	ldr	r2, [pc, #140]	@ (800858c <TIM_Base_SetConfig+0x114>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d108      	bne.n	8008514 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4313      	orrs	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a0e      	ldr	r2, [pc, #56]	@ (8008574 <TIM_Base_SetConfig+0xfc>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d103      	bne.n	8008548 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b01      	cmp	r3, #1
 8008558:	d105      	bne.n	8008566 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f023 0201 	bic.w	r2, r3, #1
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	611a      	str	r2, [r3, #16]
  }
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40010000 	.word	0x40010000
 8008578:	40000400 	.word	0x40000400
 800857c:	40000800 	.word	0x40000800
 8008580:	40000c00 	.word	0x40000c00
 8008584:	40014000 	.word	0x40014000
 8008588:	40014400 	.word	0x40014400
 800858c:	40014800 	.word	0x40014800

08008590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f023 0201 	bic.w	r2, r3, #1
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f023 030a 	bic.w	r3, r3, #10
 80085cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	621a      	str	r2, [r3, #32]
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b087      	sub	sp, #28
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6a1b      	ldr	r3, [r3, #32]
 8008604:	f023 0210 	bic.w	r2, r3, #16
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	031b      	lsls	r3, r3, #12
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800862a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800864e:	b480      	push	{r7}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	f043 0307 	orr.w	r3, r3, #7
 8008670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	609a      	str	r2, [r3, #8]
}
 8008678:	bf00      	nop
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800869e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	021a      	lsls	r2, r3, #8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	431a      	orrs	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	609a      	str	r2, [r3, #8]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086d8:	2302      	movs	r3, #2
 80086da:	e050      	b.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a1c      	ldr	r2, [pc, #112]	@ (800878c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d018      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008728:	d013      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a18      	ldr	r2, [pc, #96]	@ (8008790 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00e      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a16      	ldr	r2, [pc, #88]	@ (8008794 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d009      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a15      	ldr	r2, [pc, #84]	@ (8008798 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d004      	beq.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a13      	ldr	r2, [pc, #76]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d10c      	bne.n	800876c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	4313      	orrs	r3, r2
 8008762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68ba      	ldr	r2, [r7, #8]
 800876a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	40010000 	.word	0x40010000
 8008790:	40000400 	.word	0x40000400
 8008794:	40000800 	.word	0x40000800
 8008798:	40000c00 	.word	0x40000c00
 800879c:	40014000 	.word	0x40014000

080087a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e042      	b.n	8008860 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7f9 ff2a 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2224      	movs	r2, #36	@ 0x24
 80087f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800880a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fc85 	bl	800911c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691a      	ldr	r2, [r3, #16]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	695a      	ldr	r2, [r3, #20]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68da      	ldr	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2220      	movs	r2, #32
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b0ba      	sub	sp, #232	@ 0xe8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800888e:	2300      	movs	r3, #0
 8008890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008894:	2300      	movs	r3, #0
 8008896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800889a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80088a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10f      	bne.n	80088ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <HAL_UART_IRQHandler+0x66>
 80088ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fb69 	bl	8008f9e <UART_Receive_IT>
      return;
 80088cc:	e25b      	b.n	8008d86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80de 	beq.w	8008a94 <HAL_UART_IRQHandler+0x22c>
 80088d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 80d1 	beq.w	8008a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00b      	beq.n	8008916 <HAL_UART_IRQHandler+0xae>
 80088fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890e:	f043 0201 	orr.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <HAL_UART_IRQHandler+0xd2>
 8008922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008932:	f043 0202 	orr.w	r2, r3, #2
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HAL_UART_IRQHandler+0xf6>
 8008946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008956:	f043 0204 	orr.w	r2, r3, #4
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d011      	beq.n	800898e <HAL_UART_IRQHandler+0x126>
 800896a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008986:	f043 0208 	orr.w	r2, r3, #8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 81f2 	beq.w	8008d7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d008      	beq.n	80089b6 <HAL_UART_IRQHandler+0x14e>
 80089a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a8:	f003 0320 	and.w	r3, r3, #32
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 faf4 	bl	8008f9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c0:	2b40      	cmp	r3, #64	@ 0x40
 80089c2:	bf0c      	ite	eq
 80089c4:	2301      	moveq	r3, #1
 80089c6:	2300      	movne	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d103      	bne.n	80089e2 <HAL_UART_IRQHandler+0x17a>
 80089da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d04f      	beq.n	8008a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f9fc 	bl	8008de0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f2:	2b40      	cmp	r3, #64	@ 0x40
 80089f4:	d141      	bne.n	8008a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3314      	adds	r3, #20
 80089fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3314      	adds	r3, #20
 8008a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1d9      	bne.n	80089f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d013      	beq.n	8008a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c48 <HAL_UART_IRQHandler+0x3e0>)
 8008a50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fb fa14 	bl	8003e84 <HAL_DMA_Abort_IT>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d016      	beq.n	8008a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a70:	e00e      	b.n	8008a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f99e 	bl	8008db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a78:	e00a      	b.n	8008a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f99a 	bl	8008db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	e006      	b.n	8008a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f996 	bl	8008db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008a8e:	e175      	b.n	8008d7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	bf00      	nop
    return;
 8008a92:	e173      	b.n	8008d7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	f040 814f 	bne.w	8008d3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 8148 	beq.w	8008d3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8141 	beq.w	8008d3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60bb      	str	r3, [r7, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	60bb      	str	r3, [r7, #8]
 8008ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ada:	2b40      	cmp	r3, #64	@ 0x40
 8008adc:	f040 80b6 	bne.w	8008c4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8145 	beq.w	8008d80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008afe:	429a      	cmp	r2, r3
 8008b00:	f080 813e 	bcs.w	8008d80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b16:	f000 8088 	beq.w	8008c2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	330c      	adds	r3, #12
 8008b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	330c      	adds	r3, #12
 8008b42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1d9      	bne.n	8008b1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3314      	adds	r3, #20
 8008b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e1      	bne.n	8008b66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e3      	bne.n	8008ba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	330c      	adds	r3, #12
 8008bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bfa:	f023 0310 	bic.w	r3, r3, #16
 8008bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	330c      	adds	r3, #12
 8008c08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e3      	bne.n	8008be8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fb f8bd 	bl	8003da4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f8c1 	bl	8008dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c46:	e09b      	b.n	8008d80 <HAL_UART_IRQHandler+0x518>
 8008c48:	08008ea7 	.word	0x08008ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 808e 	beq.w	8008d84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 8089 	beq.w	8008d84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	330c      	adds	r3, #12
 8008c78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	330c      	adds	r3, #12
 8008c92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008c96:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e3      	bne.n	8008c72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3314      	adds	r3, #20
 8008cb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cba:	6a3b      	ldr	r3, [r7, #32]
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3314      	adds	r3, #20
 8008cca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008cce:	633a      	str	r2, [r7, #48]	@ 0x30
 8008cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e3      	bne.n	8008caa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	330c      	adds	r3, #12
 8008cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0310 	bic.w	r3, r3, #16
 8008d06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d14:	61fa      	str	r2, [r7, #28]
 8008d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	69b9      	ldr	r1, [r7, #24]
 8008d1a:	69fa      	ldr	r2, [r7, #28]
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	617b      	str	r3, [r7, #20]
   return(result);
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e3      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f847 	bl	8008dc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d3a:	e023      	b.n	8008d84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d009      	beq.n	8008d5c <HAL_UART_IRQHandler+0x4f4>
 8008d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f8ba 	bl	8008ece <UART_Transmit_IT>
    return;
 8008d5a:	e014      	b.n	8008d86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00e      	beq.n	8008d86 <HAL_UART_IRQHandler+0x51e>
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d008      	beq.n	8008d86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f8fa 	bl	8008f6e <UART_EndTransmit_IT>
    return;
 8008d7a:	e004      	b.n	8008d86 <HAL_UART_IRQHandler+0x51e>
    return;
 8008d7c:	bf00      	nop
 8008d7e:	e002      	b.n	8008d86 <HAL_UART_IRQHandler+0x51e>
      return;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <HAL_UART_IRQHandler+0x51e>
      return;
 8008d84:	bf00      	nop
  }
}
 8008d86:	37e8      	adds	r7, #232	@ 0xe8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b095      	sub	sp, #84	@ 0x54
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	330c      	adds	r3, #12
 8008dee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	330c      	adds	r3, #12
 8008e06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e08:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e5      	bne.n	8008de8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	e853 3f00 	ldrex	r3, [r3]
 8008e2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f023 0301 	bic.w	r3, r3, #1
 8008e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	3314      	adds	r3, #20
 8008e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e44:	e841 2300 	strex	r3, r2, [r1]
 8008e48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e5      	bne.n	8008e1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d119      	bne.n	8008e8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	f023 0310 	bic.w	r3, r3, #16
 8008e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	330c      	adds	r3, #12
 8008e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e78:	61ba      	str	r2, [r7, #24]
 8008e7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6979      	ldr	r1, [r7, #20]
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	613b      	str	r3, [r7, #16]
   return(result);
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e5      	bne.n	8008e58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e9a:	bf00      	nop
 8008e9c:	3754      	adds	r7, #84	@ 0x54
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f7ff ff77 	bl	8008db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec6:	bf00      	nop
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b21      	cmp	r3, #33	@ 0x21
 8008ee0:	d13e      	bne.n	8008f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eea:	d114      	bne.n	8008f16 <UART_Transmit_IT+0x48>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d110      	bne.n	8008f16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	1c9a      	adds	r2, r3, #2
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	621a      	str	r2, [r3, #32]
 8008f14:	e008      	b.n	8008f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	1c59      	adds	r1, r3, #1
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6211      	str	r1, [r2, #32]
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	4619      	mov	r1, r3
 8008f36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10f      	bne.n	8008f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e000      	b.n	8008f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f60:	2302      	movs	r3, #2
  }
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b082      	sub	sp, #8
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff fefc 	bl	8008d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b08c      	sub	sp, #48	@ 0x30
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b22      	cmp	r3, #34	@ 0x22
 8008fb0:	f040 80ae 	bne.w	8009110 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fbc:	d117      	bne.n	8008fee <UART_Receive_IT+0x50>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d113      	bne.n	8008fee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe6:	1c9a      	adds	r2, r3, #2
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fec:	e026      	b.n	800903c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009000:	d007      	beq.n	8009012 <UART_Receive_IT+0x74>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <UART_Receive_IT+0x82>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	e008      	b.n	8009032 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	b2db      	uxtb	r3, r3
 8009028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800902c:	b2da      	uxtb	r2, r3
 800902e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009030:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009040:	b29b      	uxth	r3, r3
 8009042:	3b01      	subs	r3, #1
 8009044:	b29b      	uxth	r3, r3
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	4619      	mov	r1, r3
 800904a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800904c:	2b00      	cmp	r3, #0
 800904e:	d15d      	bne.n	800910c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 0220 	bic.w	r2, r2, #32
 800905e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800906e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	695a      	ldr	r2, [r3, #20]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009092:	2b01      	cmp	r3, #1
 8009094:	d135      	bne.n	8009102 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	330c      	adds	r3, #12
 80090a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	613b      	str	r3, [r7, #16]
   return(result);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	330c      	adds	r3, #12
 80090ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090bc:	623a      	str	r2, [r7, #32]
 80090be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	69f9      	ldr	r1, [r7, #28]
 80090c2:	6a3a      	ldr	r2, [r7, #32]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e5      	bne.n	800909c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0310 	and.w	r3, r3, #16
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d10a      	bne.n	80090f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	60fb      	str	r3, [r7, #12]
 80090f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff fe64 	bl	8008dc8 <HAL_UARTEx_RxEventCallback>
 8009100:	e002      	b.n	8009108 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fe4c 	bl	8008da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	e002      	b.n	8009112 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	e000      	b.n	8009112 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009110:	2302      	movs	r3, #2
  }
}
 8009112:	4618      	mov	r0, r3
 8009114:	3730      	adds	r7, #48	@ 0x30
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800911c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009120:	b0c0      	sub	sp, #256	@ 0x100
 8009122:	af00      	add	r7, sp, #0
 8009124:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009138:	68d9      	ldr	r1, [r3, #12]
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	ea40 0301 	orr.w	r3, r0, r1
 8009144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914a:	689a      	ldr	r2, [r3, #8]
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	431a      	orrs	r2, r3
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	431a      	orrs	r2, r3
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	4313      	orrs	r3, r2
 8009164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009174:	f021 010c 	bic.w	r1, r1, #12
 8009178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009182:	430b      	orrs	r3, r1
 8009184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009196:	6999      	ldr	r1, [r3, #24]
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	ea40 0301 	orr.w	r3, r0, r1
 80091a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b8f      	ldr	r3, [pc, #572]	@ (80093e8 <UART_SetConfig+0x2cc>)
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d005      	beq.n	80091bc <UART_SetConfig+0xa0>
 80091b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	4b8d      	ldr	r3, [pc, #564]	@ (80093ec <UART_SetConfig+0x2d0>)
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d104      	bne.n	80091c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091bc:	f7fd f89a 	bl	80062f4 <HAL_RCC_GetPCLK2Freq>
 80091c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80091c4:	e003      	b.n	80091ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091c6:	f7fd f881 	bl	80062cc <HAL_RCC_GetPCLK1Freq>
 80091ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091d8:	f040 810c 	bne.w	80093f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80091ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80091ee:	4622      	mov	r2, r4
 80091f0:	462b      	mov	r3, r5
 80091f2:	1891      	adds	r1, r2, r2
 80091f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80091f6:	415b      	adcs	r3, r3
 80091f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091fe:	4621      	mov	r1, r4
 8009200:	eb12 0801 	adds.w	r8, r2, r1
 8009204:	4629      	mov	r1, r5
 8009206:	eb43 0901 	adc.w	r9, r3, r1
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800921a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800921e:	4690      	mov	r8, r2
 8009220:	4699      	mov	r9, r3
 8009222:	4623      	mov	r3, r4
 8009224:	eb18 0303 	adds.w	r3, r8, r3
 8009228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800922c:	462b      	mov	r3, r5
 800922e:	eb49 0303 	adc.w	r3, r9, r3
 8009232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009242:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800924a:	460b      	mov	r3, r1
 800924c:	18db      	adds	r3, r3, r3
 800924e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009250:	4613      	mov	r3, r2
 8009252:	eb42 0303 	adc.w	r3, r2, r3
 8009256:	657b      	str	r3, [r7, #84]	@ 0x54
 8009258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800925c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009260:	f7f7 f81e 	bl	80002a0 <__aeabi_uldivmod>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4b61      	ldr	r3, [pc, #388]	@ (80093f0 <UART_SetConfig+0x2d4>)
 800926a:	fba3 2302 	umull	r2, r3, r3, r2
 800926e:	095b      	lsrs	r3, r3, #5
 8009270:	011c      	lsls	r4, r3, #4
 8009272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009276:	2200      	movs	r2, #0
 8009278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800927c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009284:	4642      	mov	r2, r8
 8009286:	464b      	mov	r3, r9
 8009288:	1891      	adds	r1, r2, r2
 800928a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800928c:	415b      	adcs	r3, r3
 800928e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009294:	4641      	mov	r1, r8
 8009296:	eb12 0a01 	adds.w	sl, r2, r1
 800929a:	4649      	mov	r1, r9
 800929c:	eb43 0b01 	adc.w	fp, r3, r1
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	f04f 0300 	mov.w	r3, #0
 80092a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092b4:	4692      	mov	sl, r2
 80092b6:	469b      	mov	fp, r3
 80092b8:	4643      	mov	r3, r8
 80092ba:	eb1a 0303 	adds.w	r3, sl, r3
 80092be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092c2:	464b      	mov	r3, r9
 80092c4:	eb4b 0303 	adc.w	r3, fp, r3
 80092c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80092dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80092e0:	460b      	mov	r3, r1
 80092e2:	18db      	adds	r3, r3, r3
 80092e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80092e6:	4613      	mov	r3, r2
 80092e8:	eb42 0303 	adc.w	r3, r2, r3
 80092ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80092ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80092f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80092f6:	f7f6 ffd3 	bl	80002a0 <__aeabi_uldivmod>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4611      	mov	r1, r2
 8009300:	4b3b      	ldr	r3, [pc, #236]	@ (80093f0 <UART_SetConfig+0x2d4>)
 8009302:	fba3 2301 	umull	r2, r3, r3, r1
 8009306:	095b      	lsrs	r3, r3, #5
 8009308:	2264      	movs	r2, #100	@ 0x64
 800930a:	fb02 f303 	mul.w	r3, r2, r3
 800930e:	1acb      	subs	r3, r1, r3
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009316:	4b36      	ldr	r3, [pc, #216]	@ (80093f0 <UART_SetConfig+0x2d4>)
 8009318:	fba3 2302 	umull	r2, r3, r3, r2
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009324:	441c      	add	r4, r3
 8009326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800932a:	2200      	movs	r2, #0
 800932c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009330:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009338:	4642      	mov	r2, r8
 800933a:	464b      	mov	r3, r9
 800933c:	1891      	adds	r1, r2, r2
 800933e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009340:	415b      	adcs	r3, r3
 8009342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009348:	4641      	mov	r1, r8
 800934a:	1851      	adds	r1, r2, r1
 800934c:	6339      	str	r1, [r7, #48]	@ 0x30
 800934e:	4649      	mov	r1, r9
 8009350:	414b      	adcs	r3, r1
 8009352:	637b      	str	r3, [r7, #52]	@ 0x34
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	f04f 0300 	mov.w	r3, #0
 800935c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009360:	4659      	mov	r1, fp
 8009362:	00cb      	lsls	r3, r1, #3
 8009364:	4651      	mov	r1, sl
 8009366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800936a:	4651      	mov	r1, sl
 800936c:	00ca      	lsls	r2, r1, #3
 800936e:	4610      	mov	r0, r2
 8009370:	4619      	mov	r1, r3
 8009372:	4603      	mov	r3, r0
 8009374:	4642      	mov	r2, r8
 8009376:	189b      	adds	r3, r3, r2
 8009378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800937c:	464b      	mov	r3, r9
 800937e:	460a      	mov	r2, r1
 8009380:	eb42 0303 	adc.w	r3, r2, r3
 8009384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009394:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800939c:	460b      	mov	r3, r1
 800939e:	18db      	adds	r3, r3, r3
 80093a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093a2:	4613      	mov	r3, r2
 80093a4:	eb42 0303 	adc.w	r3, r2, r3
 80093a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80093ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80093b2:	f7f6 ff75 	bl	80002a0 <__aeabi_uldivmod>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <UART_SetConfig+0x2d4>)
 80093bc:	fba3 1302 	umull	r1, r3, r3, r2
 80093c0:	095b      	lsrs	r3, r3, #5
 80093c2:	2164      	movs	r1, #100	@ 0x64
 80093c4:	fb01 f303 	mul.w	r3, r1, r3
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	3332      	adds	r3, #50	@ 0x32
 80093ce:	4a08      	ldr	r2, [pc, #32]	@ (80093f0 <UART_SetConfig+0x2d4>)
 80093d0:	fba2 2303 	umull	r2, r3, r2, r3
 80093d4:	095b      	lsrs	r3, r3, #5
 80093d6:	f003 0207 	and.w	r2, r3, #7
 80093da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4422      	add	r2, r4
 80093e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093e4:	e106      	b.n	80095f4 <UART_SetConfig+0x4d8>
 80093e6:	bf00      	nop
 80093e8:	40011000 	.word	0x40011000
 80093ec:	40011400 	.word	0x40011400
 80093f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009406:	4642      	mov	r2, r8
 8009408:	464b      	mov	r3, r9
 800940a:	1891      	adds	r1, r2, r2
 800940c:	6239      	str	r1, [r7, #32]
 800940e:	415b      	adcs	r3, r3
 8009410:	627b      	str	r3, [r7, #36]	@ 0x24
 8009412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009416:	4641      	mov	r1, r8
 8009418:	1854      	adds	r4, r2, r1
 800941a:	4649      	mov	r1, r9
 800941c:	eb43 0501 	adc.w	r5, r3, r1
 8009420:	f04f 0200 	mov.w	r2, #0
 8009424:	f04f 0300 	mov.w	r3, #0
 8009428:	00eb      	lsls	r3, r5, #3
 800942a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800942e:	00e2      	lsls	r2, r4, #3
 8009430:	4614      	mov	r4, r2
 8009432:	461d      	mov	r5, r3
 8009434:	4643      	mov	r3, r8
 8009436:	18e3      	adds	r3, r4, r3
 8009438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800943c:	464b      	mov	r3, r9
 800943e:	eb45 0303 	adc.w	r3, r5, r3
 8009442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009456:	f04f 0200 	mov.w	r2, #0
 800945a:	f04f 0300 	mov.w	r3, #0
 800945e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009462:	4629      	mov	r1, r5
 8009464:	008b      	lsls	r3, r1, #2
 8009466:	4621      	mov	r1, r4
 8009468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800946c:	4621      	mov	r1, r4
 800946e:	008a      	lsls	r2, r1, #2
 8009470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009474:	f7f6 ff14 	bl	80002a0 <__aeabi_uldivmod>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	4b60      	ldr	r3, [pc, #384]	@ (8009600 <UART_SetConfig+0x4e4>)
 800947e:	fba3 2302 	umull	r2, r3, r3, r2
 8009482:	095b      	lsrs	r3, r3, #5
 8009484:	011c      	lsls	r4, r3, #4
 8009486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800948a:	2200      	movs	r2, #0
 800948c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009498:	4642      	mov	r2, r8
 800949a:	464b      	mov	r3, r9
 800949c:	1891      	adds	r1, r2, r2
 800949e:	61b9      	str	r1, [r7, #24]
 80094a0:	415b      	adcs	r3, r3
 80094a2:	61fb      	str	r3, [r7, #28]
 80094a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094a8:	4641      	mov	r1, r8
 80094aa:	1851      	adds	r1, r2, r1
 80094ac:	6139      	str	r1, [r7, #16]
 80094ae:	4649      	mov	r1, r9
 80094b0:	414b      	adcs	r3, r1
 80094b2:	617b      	str	r3, [r7, #20]
 80094b4:	f04f 0200 	mov.w	r2, #0
 80094b8:	f04f 0300 	mov.w	r3, #0
 80094bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094c0:	4659      	mov	r1, fp
 80094c2:	00cb      	lsls	r3, r1, #3
 80094c4:	4651      	mov	r1, sl
 80094c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ca:	4651      	mov	r1, sl
 80094cc:	00ca      	lsls	r2, r1, #3
 80094ce:	4610      	mov	r0, r2
 80094d0:	4619      	mov	r1, r3
 80094d2:	4603      	mov	r3, r0
 80094d4:	4642      	mov	r2, r8
 80094d6:	189b      	adds	r3, r3, r2
 80094d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094dc:	464b      	mov	r3, r9
 80094de:	460a      	mov	r2, r1
 80094e0:	eb42 0303 	adc.w	r3, r2, r3
 80094e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009500:	4649      	mov	r1, r9
 8009502:	008b      	lsls	r3, r1, #2
 8009504:	4641      	mov	r1, r8
 8009506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800950a:	4641      	mov	r1, r8
 800950c:	008a      	lsls	r2, r1, #2
 800950e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009512:	f7f6 fec5 	bl	80002a0 <__aeabi_uldivmod>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4611      	mov	r1, r2
 800951c:	4b38      	ldr	r3, [pc, #224]	@ (8009600 <UART_SetConfig+0x4e4>)
 800951e:	fba3 2301 	umull	r2, r3, r3, r1
 8009522:	095b      	lsrs	r3, r3, #5
 8009524:	2264      	movs	r2, #100	@ 0x64
 8009526:	fb02 f303 	mul.w	r3, r2, r3
 800952a:	1acb      	subs	r3, r1, r3
 800952c:	011b      	lsls	r3, r3, #4
 800952e:	3332      	adds	r3, #50	@ 0x32
 8009530:	4a33      	ldr	r2, [pc, #204]	@ (8009600 <UART_SetConfig+0x4e4>)
 8009532:	fba2 2303 	umull	r2, r3, r2, r3
 8009536:	095b      	lsrs	r3, r3, #5
 8009538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800953c:	441c      	add	r4, r3
 800953e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009542:	2200      	movs	r2, #0
 8009544:	673b      	str	r3, [r7, #112]	@ 0x70
 8009546:	677a      	str	r2, [r7, #116]	@ 0x74
 8009548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800954c:	4642      	mov	r2, r8
 800954e:	464b      	mov	r3, r9
 8009550:	1891      	adds	r1, r2, r2
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	415b      	adcs	r3, r3
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800955c:	4641      	mov	r1, r8
 800955e:	1851      	adds	r1, r2, r1
 8009560:	6039      	str	r1, [r7, #0]
 8009562:	4649      	mov	r1, r9
 8009564:	414b      	adcs	r3, r1
 8009566:	607b      	str	r3, [r7, #4]
 8009568:	f04f 0200 	mov.w	r2, #0
 800956c:	f04f 0300 	mov.w	r3, #0
 8009570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009574:	4659      	mov	r1, fp
 8009576:	00cb      	lsls	r3, r1, #3
 8009578:	4651      	mov	r1, sl
 800957a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800957e:	4651      	mov	r1, sl
 8009580:	00ca      	lsls	r2, r1, #3
 8009582:	4610      	mov	r0, r2
 8009584:	4619      	mov	r1, r3
 8009586:	4603      	mov	r3, r0
 8009588:	4642      	mov	r2, r8
 800958a:	189b      	adds	r3, r3, r2
 800958c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800958e:	464b      	mov	r3, r9
 8009590:	460a      	mov	r2, r1
 8009592:	eb42 0303 	adc.w	r3, r2, r3
 8009596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80095a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80095b0:	4649      	mov	r1, r9
 80095b2:	008b      	lsls	r3, r1, #2
 80095b4:	4641      	mov	r1, r8
 80095b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095ba:	4641      	mov	r1, r8
 80095bc:	008a      	lsls	r2, r1, #2
 80095be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80095c2:	f7f6 fe6d 	bl	80002a0 <__aeabi_uldivmod>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009600 <UART_SetConfig+0x4e4>)
 80095cc:	fba3 1302 	umull	r1, r3, r3, r2
 80095d0:	095b      	lsrs	r3, r3, #5
 80095d2:	2164      	movs	r1, #100	@ 0x64
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	3332      	adds	r3, #50	@ 0x32
 80095de:	4a08      	ldr	r2, [pc, #32]	@ (8009600 <UART_SetConfig+0x4e4>)
 80095e0:	fba2 2303 	umull	r2, r3, r2, r3
 80095e4:	095b      	lsrs	r3, r3, #5
 80095e6:	f003 020f 	and.w	r2, r3, #15
 80095ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4422      	add	r2, r4
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80095fa:	46bd      	mov	sp, r7
 80095fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009600:	51eb851f 	.word	0x51eb851f

08009604 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009604:	b084      	sub	sp, #16
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	f107 001c 	add.w	r0, r7, #28
 8009612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800961a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800961c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800961e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009622:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8009626:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800962a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800962e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800963e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	431a      	orrs	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	b004      	add	sp, #16
 8009658:	4770      	bx	lr

0800965a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2203      	movs	r2, #3
 80096a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0303 	and.w	r3, r3, #3
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b085      	sub	sp, #20
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096ec:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80096f2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80096f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009708:	f023 030f 	bic.w	r3, r3, #15
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	b2db      	uxtb	r3, r3
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	3314      	adds	r3, #20
 800974a:	461a      	mov	r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	4413      	add	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
}  
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009788:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800978e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009794:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0

}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b088      	sub	sp, #32
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80097c8:	2310      	movs	r3, #16
 80097ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097cc:	2340      	movs	r3, #64	@ 0x40
 80097ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097d0:	2300      	movs	r3, #0
 80097d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097da:	f107 0308 	add.w	r3, r7, #8
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff74 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80097e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097ea:	2110      	movs	r1, #16
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fa19 	bl	8009c24 <SDMMC_GetCmdResp1>
 80097f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097f4:	69fb      	ldr	r3, [r7, #28]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3720      	adds	r7, #32
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b088      	sub	sp, #32
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800980c:	2311      	movs	r3, #17
 800980e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009810:	2340      	movs	r3, #64	@ 0x40
 8009812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009814:	2300      	movs	r3, #0
 8009816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009818:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800981c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800981e:	f107 0308 	add.w	r3, r7, #8
 8009822:	4619      	mov	r1, r3
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ff52 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800982a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800982e:	2111      	movs	r1, #17
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f9f7 	bl	8009c24 <SDMMC_GetCmdResp1>
 8009836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009838:	69fb      	ldr	r3, [r7, #28]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3720      	adds	r7, #32
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b088      	sub	sp, #32
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009850:	2312      	movs	r3, #18
 8009852:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009854:	2340      	movs	r3, #64	@ 0x40
 8009856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800985c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009860:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009862:	f107 0308 	add.w	r3, r7, #8
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff ff30 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800986e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009872:	2112      	movs	r1, #18
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f9d5 	bl	8009c24 <SDMMC_GetCmdResp1>
 800987a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800987c:	69fb      	ldr	r3, [r7, #28]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b088      	sub	sp, #32
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009894:	2318      	movs	r3, #24
 8009896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009898:	2340      	movs	r3, #64	@ 0x40
 800989a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff ff0e 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80098b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098b6:	2118      	movs	r1, #24
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f9b3 	bl	8009c24 <SDMMC_GetCmdResp1>
 80098be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098c0:	69fb      	ldr	r3, [r7, #28]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b088      	sub	sp, #32
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80098d8:	2319      	movs	r3, #25
 80098da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098dc:	2340      	movs	r3, #64	@ 0x40
 80098de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098ea:	f107 0308 	add.w	r3, r7, #8
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f7ff feec 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098fa:	2119      	movs	r1, #25
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f991 	bl	8009c24 <SDMMC_GetCmdResp1>
 8009902:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009904:	69fb      	ldr	r3, [r7, #28]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b088      	sub	sp, #32
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800991c:	230c      	movs	r3, #12
 800991e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009920:	2340      	movs	r3, #64	@ 0x40
 8009922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009924:	2300      	movs	r3, #0
 8009926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800992c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800992e:	f107 0308 	add.w	r3, r7, #8
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff feca 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800993a:	4a05      	ldr	r2, [pc, #20]	@ (8009950 <SDMMC_CmdStopTransfer+0x40>)
 800993c:	210c      	movs	r1, #12
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f970 	bl	8009c24 <SDMMC_GetCmdResp1>
 8009944:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009946:	69fb      	ldr	r3, [r7, #28]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3720      	adds	r7, #32
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	05f5e100 	.word	0x05f5e100

08009954 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08a      	sub	sp, #40	@ 0x28
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009964:	2307      	movs	r3, #7
 8009966:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009968:	2340      	movs	r3, #64	@ 0x40
 800996a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800996c:	2300      	movs	r3, #0
 800996e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009974:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009976:	f107 0310 	add.w	r3, r7, #16
 800997a:	4619      	mov	r1, r3
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7ff fea6 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009986:	2107      	movs	r1, #7
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f94b 	bl	8009c24 <SDMMC_GetCmdResp1>
 800998e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009992:	4618      	mov	r0, r3
 8009994:	3728      	adds	r7, #40	@ 0x28
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b088      	sub	sp, #32
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80099aa:	2300      	movs	r3, #0
 80099ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099ae:	2300      	movs	r3, #0
 80099b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099b8:	f107 0308 	add.w	r3, r7, #8
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff fe85 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fb65 	bl	800a094 <SDMMC_GetCmdError>
 80099ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099cc:	69fb      	ldr	r3, [r7, #28]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3720      	adds	r7, #32
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b088      	sub	sp, #32
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80099de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80099e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80099e4:	2308      	movs	r3, #8
 80099e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099e8:	2340      	movs	r3, #64	@ 0x40
 80099ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099f6:	f107 0308 	add.w	r3, r7, #8
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff fe66 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 faf8 	bl	8009ff8 <SDMMC_GetCmdResp7>
 8009a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a0a:	69fb      	ldr	r3, [r7, #28]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3720      	adds	r7, #32
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b088      	sub	sp, #32
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a22:	2337      	movs	r3, #55	@ 0x37
 8009a24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a26:	2340      	movs	r3, #64	@ 0x40
 8009a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff fe47 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a44:	2137      	movs	r1, #55	@ 0x37
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f8ec 	bl	8009c24 <SDMMC_GetCmdResp1>
 8009a4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a6e:	2329      	movs	r3, #41	@ 0x29
 8009a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a72:	2340      	movs	r3, #64	@ 0x40
 8009a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a76:	2300      	movs	r3, #0
 8009a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fe21 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f9ff 	bl	8009e90 <SDMMC_GetCmdResp3>
 8009a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a94:	69fb      	ldr	r3, [r7, #28]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b088      	sub	sp, #32
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009aac:	2306      	movs	r3, #6
 8009aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ab0:	2340      	movs	r3, #64	@ 0x40
 8009ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009abc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009abe:	f107 0308 	add.w	r3, r7, #8
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fe02 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ace:	2106      	movs	r1, #6
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8a7 	bl	8009c24 <SDMMC_GetCmdResp1>
 8009ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad8:	69fb      	ldr	r3, [r7, #28]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3720      	adds	r7, #32
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b088      	sub	sp, #32
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009aee:	2333      	movs	r3, #51	@ 0x33
 8009af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009af2:	2340      	movs	r3, #64	@ 0x40
 8009af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009afe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff fde1 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b10:	2133      	movs	r1, #51	@ 0x33
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f886 	bl	8009c24 <SDMMC_GetCmdResp1>
 8009b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b30:	2302      	movs	r3, #2
 8009b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b34:	23c0      	movs	r3, #192	@ 0xc0
 8009b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b42:	f107 0308 	add.w	r3, r7, #8
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff fdc0 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f956 	bl	8009e00 <SDMMC_GetCmdResp2>
 8009b54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b56:	69fb      	ldr	r3, [r7, #28]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b088      	sub	sp, #32
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b6e:	2309      	movs	r3, #9
 8009b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b72:	23c0      	movs	r3, #192	@ 0xc0
 8009b74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b76:	2300      	movs	r3, #0
 8009b78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b80:	f107 0308 	add.w	r3, r7, #8
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff fda1 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f937 	bl	8009e00 <SDMMC_GetCmdResp2>
 8009b92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b94:	69fb      	ldr	r3, [r7, #28]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3720      	adds	r7, #32
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b088      	sub	sp, #32
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009bac:	2303      	movs	r3, #3
 8009bae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bb0:	2340      	movs	r3, #64	@ 0x40
 8009bb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bbe:	f107 0308 	add.w	r3, r7, #8
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff fd82 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	2103      	movs	r1, #3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f99c 	bl	8009f0c <SDMMC_GetCmdResp6>
 8009bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009bee:	230d      	movs	r3, #13
 8009bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bf2:	2340      	movs	r3, #64	@ 0x40
 8009bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fd61 	bl	80096ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c10:	210d      	movs	r1, #13
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f806 	bl	8009c24 <SDMMC_GetCmdResp1>
 8009c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c32:	4b70      	ldr	r3, [pc, #448]	@ (8009df4 <SDMMC_GetCmdResp1+0x1d0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a70      	ldr	r2, [pc, #448]	@ (8009df8 <SDMMC_GetCmdResp1+0x1d4>)
 8009c38:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3c:	0a5a      	lsrs	r2, r3, #9
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
 8009c44:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	1e5a      	subs	r2, r3, #1
 8009c4a:	61fa      	str	r2, [r7, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009c54:	e0c9      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c5a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c5c:	69bb      	ldr	r3, [r7, #24]
 8009c5e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0ef      	beq.n	8009c46 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1ea      	bne.n	8009c46 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c82:	2304      	movs	r3, #4
 8009c84:	e0b1      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d004      	beq.n	8009c9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e0a6      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	22c5      	movs	r2, #197	@ 0xc5
 8009ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7ff fd3d 	bl	8009722 <SDIO_GetCommandResponse>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	461a      	mov	r2, r3
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d001      	beq.n	8009cb6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e099      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f7ff fd3f 	bl	800973c <SDIO_GetResponse>
 8009cbe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8009dfc <SDMMC_GetCmdResp1+0x1d8>)
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	e08d      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	da02      	bge.n	8009cda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009cd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009cd8:	e087      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009ce4:	2340      	movs	r3, #64	@ 0x40
 8009ce6:	e080      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009cf2:	2380      	movs	r3, #128	@ 0x80
 8009cf4:	e079      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d04:	e071      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d002      	beq.n	8009d16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d14:	e069      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d24:	e061      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d30:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d34:	e059      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d44:	e051      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d002      	beq.n	8009d56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009d54:	e049      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d002      	beq.n	8009d66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d64:	e041      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d74:	e039      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009d84:	e031      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009d94:	e029      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009da0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009da4:	e021      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009db0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009db4:	e019      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009dc0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009dc4:	e011      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009dd0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009dd4:	e009      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f003 0308 	and.w	r3, r3, #8
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009de0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009de4:	e001      	b.n	8009dea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009de6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	2000000c 	.word	0x2000000c
 8009df8:	10624dd3 	.word	0x10624dd3
 8009dfc:	fdffe008 	.word	0xfdffe008

08009e00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e08:	4b1f      	ldr	r3, [pc, #124]	@ (8009e88 <SDMMC_GetCmdResp2+0x88>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009e8c <SDMMC_GetCmdResp2+0x8c>)
 8009e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e12:	0a5b      	lsrs	r3, r3, #9
 8009e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e18:	fb02 f303 	mul.w	r3, r2, r3
 8009e1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	1e5a      	subs	r2, r3, #1
 8009e22:	60fa      	str	r2, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e2c:	e026      	b.n	8009e7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0ef      	beq.n	8009e1e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1ea      	bne.n	8009e1e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2204      	movs	r2, #4
 8009e58:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	e00e      	b.n	8009e7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d004      	beq.n	8009e74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e003      	b.n	8009e7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	22c5      	movs	r2, #197	@ 0xc5
 8009e78:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	2000000c 	.word	0x2000000c
 8009e8c:	10624dd3 	.word	0x10624dd3

08009e90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e98:	4b1a      	ldr	r3, [pc, #104]	@ (8009f04 <SDMMC_GetCmdResp3+0x74>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8009f08 <SDMMC_GetCmdResp3+0x78>)
 8009e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea2:	0a5b      	lsrs	r3, r3, #9
 8009ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ea8:	fb02 f303 	mul.w	r3, r2, r3
 8009eac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1e5a      	subs	r2, r3, #1
 8009eb2:	60fa      	str	r2, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eb8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009ebc:	e01b      	b.n	8009ef6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ec2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d0ef      	beq.n	8009eae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1ea      	bne.n	8009eae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eea:	2304      	movs	r3, #4
 8009eec:	e003      	b.n	8009ef6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	22c5      	movs	r2, #197	@ 0xc5
 8009ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3714      	adds	r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	2000000c 	.word	0x2000000c
 8009f08:	10624dd3 	.word	0x10624dd3

08009f0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b088      	sub	sp, #32
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	460b      	mov	r3, r1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f1a:	4b35      	ldr	r3, [pc, #212]	@ (8009ff0 <SDMMC_GetCmdResp6+0xe4>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a35      	ldr	r2, [pc, #212]	@ (8009ff4 <SDMMC_GetCmdResp6+0xe8>)
 8009f20:	fba2 2303 	umull	r2, r3, r2, r3
 8009f24:	0a5b      	lsrs	r3, r3, #9
 8009f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f2a:	fb02 f303 	mul.w	r3, r2, r3
 8009f2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	1e5a      	subs	r2, r3, #1
 8009f34:	61fa      	str	r2, [r7, #28]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f3e:	e052      	b.n	8009fe6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0ef      	beq.n	8009f30 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1ea      	bne.n	8009f30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f5e:	f003 0304 	and.w	r3, r3, #4
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d004      	beq.n	8009f70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2204      	movs	r2, #4
 8009f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f6c:	2304      	movs	r3, #4
 8009f6e:	e03a      	b.n	8009fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f74:	f003 0301 	and.w	r3, r3, #1
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e02f      	b.n	8009fe6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f7ff fbcb 	bl	8009722 <SDIO_GetCommandResponse>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	461a      	mov	r2, r3
 8009f90:	7afb      	ldrb	r3, [r7, #11]
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d001      	beq.n	8009f9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e025      	b.n	8009fe6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	22c5      	movs	r2, #197	@ 0xc5
 8009f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7ff fbca 	bl	800973c <SDIO_GetResponse>
 8009fa8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d106      	bne.n	8009fc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	0c1b      	lsrs	r3, r3, #16
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e011      	b.n	8009fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fcc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009fd0:	e009      	b.n	8009fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fe0:	e001      	b.n	8009fe6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009fe2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	2000000c 	.word	0x2000000c
 8009ff4:	10624dd3 	.word	0x10624dd3

08009ff8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a000:	4b22      	ldr	r3, [pc, #136]	@ (800a08c <SDMMC_GetCmdResp7+0x94>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a22      	ldr	r2, [pc, #136]	@ (800a090 <SDMMC_GetCmdResp7+0x98>)
 800a006:	fba2 2303 	umull	r2, r3, r2, r3
 800a00a:	0a5b      	lsrs	r3, r3, #9
 800a00c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a010:	fb02 f303 	mul.w	r3, r2, r3
 800a014:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	1e5a      	subs	r2, r3, #1
 800a01a:	60fa      	str	r2, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d102      	bne.n	800a026 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a020:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a024:	e02c      	b.n	800a080 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0ef      	beq.n	800a016 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1ea      	bne.n	800a016 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a044:	f003 0304 	and.w	r3, r3, #4
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2204      	movs	r2, #4
 800a050:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a052:	2304      	movs	r3, #4
 800a054:	e014      	b.n	800a080 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d004      	beq.n	800a06c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a068:	2301      	movs	r3, #1
 800a06a:	e009      	b.n	800a080 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2240      	movs	r2, #64	@ 0x40
 800a07c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a07e:	2300      	movs	r3, #0
  
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	2000000c 	.word	0x2000000c
 800a090:	10624dd3 	.word	0x10624dd3

0800a094 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a09c:	4b11      	ldr	r3, [pc, #68]	@ (800a0e4 <SDMMC_GetCmdError+0x50>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a11      	ldr	r2, [pc, #68]	@ (800a0e8 <SDMMC_GetCmdError+0x54>)
 800a0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a6:	0a5b      	lsrs	r3, r3, #9
 800a0a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0ac:	fb02 f303 	mul.w	r3, r2, r3
 800a0b0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	60fa      	str	r2, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d102      	bne.n	800a0c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a0c0:	e009      	b.n	800a0d6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0f1      	beq.n	800a0b2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	22c5      	movs	r2, #197	@ 0xc5
 800a0d2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	2000000c 	.word	0x2000000c
 800a0e8:	10624dd3 	.word	0x10624dd3

0800a0ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0f0:	4904      	ldr	r1, [pc, #16]	@ (800a104 <MX_FATFS_Init+0x18>)
 800a0f2:	4805      	ldr	r0, [pc, #20]	@ (800a108 <MX_FATFS_Init+0x1c>)
 800a0f4:	f002 faca 	bl	800c68c <FATFS_LinkDriver>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4b03      	ldr	r3, [pc, #12]	@ (800a10c <MX_FATFS_Init+0x20>)
 800a0fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a100:	bf00      	nop
 800a102:	bd80      	pop	{r7, pc}
 800a104:	200114f4 	.word	0x200114f4
 800a108:	0800e604 	.word	0x0800e604
 800a10c:	200114f0 	.word	0x200114f0

0800a110 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a11a:	f000 f89e 	bl	800a25a <BSP_SD_IsDetected>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b01      	cmp	r3, #1
 800a122:	d001      	beq.n	800a128 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e005      	b.n	800a134 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a128:	4804      	ldr	r0, [pc, #16]	@ (800a13c <BSP_SD_Init+0x2c>)
 800a12a:	f7fc fa45 	bl	80065b8 <HAL_SD_Init>
 800a12e:	4603      	mov	r3, r0
 800a130:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800a132:	79fb      	ldrb	r3, [r7, #7]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	200002cc 	.word	0x200002cc

0800a140 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af02      	add	r7, sp, #8
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	68f9      	ldr	r1, [r7, #12]
 800a15c:	4806      	ldr	r0, [pc, #24]	@ (800a178 <BSP_SD_ReadBlocks+0x38>)
 800a15e:	f7fc fadb 	bl	8006718 <HAL_SD_ReadBlocks>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a16c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	200002cc 	.word	0x200002cc

0800a17c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af02      	add	r7, sp, #8
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
 800a188:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	68f9      	ldr	r1, [r7, #12]
 800a198:	4806      	ldr	r0, [pc, #24]	@ (800a1b4 <BSP_SD_WriteBlocks+0x38>)
 800a19a:	f7fc fca3 	bl	8006ae4 <HAL_SD_WriteBlocks>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	200002cc 	.word	0x200002cc

0800a1b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a1bc:	4805      	ldr	r0, [pc, #20]	@ (800a1d4 <BSP_SD_GetCardState+0x1c>)
 800a1be:	f7fd fa19 	bl	80075f4 <HAL_SD_GetCardState>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	bf14      	ite	ne
 800a1c8:	2301      	movne	r3, #1
 800a1ca:	2300      	moveq	r3, #0
 800a1cc:	b2db      	uxtb	r3, r3
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200002cc 	.word	0x200002cc

0800a1d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	4803      	ldr	r0, [pc, #12]	@ (800a1f0 <BSP_SD_GetCardInfo+0x18>)
 800a1e4:	f7fd f940 	bl	8007468 <HAL_SD_GetCardInfo>
}
 800a1e8:	bf00      	nop
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	200002cc 	.word	0x200002cc

0800a1f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a1fc:	f000 f818 	bl	800a230 <BSP_SD_AbortCallback>
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a210:	f000 f815 	bl	800a23e <BSP_SD_WriteCpltCallback>
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a224:	f000 f812 	bl	800a24c <BSP_SD_ReadCpltCallback>
}
 800a228:	bf00      	nop
 800a22a:	3708      	adds	r7, #8
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0

}
 800a234:	bf00      	nop
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800a23e:	b480      	push	{r7}
 800a240:	af00      	add	r7, sp, #0

}
 800a242:	bf00      	nop
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800a24c:	b480      	push	{r7}
 800a24e:	af00      	add	r7, sp, #0

}
 800a250:	bf00      	nop
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a260:	2301      	movs	r3, #1
 800a262:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	b2db      	uxtb	r3, r3
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a27e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <SD_CheckStatus+0x38>)
 800a280:	2201      	movs	r2, #1
 800a282:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a284:	f7ff ff98 	bl	800a1b8 <BSP_SD_GetCardState>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d107      	bne.n	800a29e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a28e:	4b07      	ldr	r3, [pc, #28]	@ (800a2ac <SD_CheckStatus+0x38>)
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b2db      	uxtb	r3, r3
 800a294:	f023 0301 	bic.w	r3, r3, #1
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	4b04      	ldr	r3, [pc, #16]	@ (800a2ac <SD_CheckStatus+0x38>)
 800a29c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a29e:	4b03      	ldr	r3, [pc, #12]	@ (800a2ac <SD_CheckStatus+0x38>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	b2db      	uxtb	r3, r3
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000015 	.word	0x20000015

0800a2b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a2e8 <SD_initialize+0x38>)
 800a2bc:	2201      	movs	r2, #1
 800a2be:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a2c0:	f7ff ff26 	bl	800a110 <BSP_SD_Init>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d107      	bne.n	800a2da <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a2ca:	79fb      	ldrb	r3, [r7, #7]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff ffd1 	bl	800a274 <SD_CheckStatus>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4b04      	ldr	r3, [pc, #16]	@ (800a2e8 <SD_initialize+0x38>)
 800a2d8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a2da:	4b03      	ldr	r3, [pc, #12]	@ (800a2e8 <SD_initialize+0x38>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	b2db      	uxtb	r3, r3
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	20000015 	.word	0x20000015

0800a2ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a2f6:	79fb      	ldrb	r3, [r7, #7]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7ff ffbb 	bl	800a274 <SD_CheckStatus>
 800a2fe:	4603      	mov	r3, r0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
 800a312:	603b      	str	r3, [r7, #0]
 800a314:	4603      	mov	r3, r0
 800a316:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a31c:	f04f 33ff 	mov.w	r3, #4294967295
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	68b8      	ldr	r0, [r7, #8]
 800a326:	f7ff ff0b 	bl	800a140 <BSP_SD_ReadBlocks>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d107      	bne.n	800a340 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a330:	bf00      	nop
 800a332:	f7ff ff41 	bl	800a1b8 <BSP_SD_GetCardState>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1fa      	bne.n	800a332 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a340:	7dfb      	ldrb	r3, [r7, #23]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3718      	adds	r7, #24
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b086      	sub	sp, #24
 800a34e:	af00      	add	r7, sp, #0
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a35e:	f04f 33ff 	mov.w	r3, #4294967295
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	68b8      	ldr	r0, [r7, #8]
 800a368:	f7ff ff08 	bl	800a17c <BSP_SD_WriteBlocks>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d107      	bne.n	800a382 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a372:	bf00      	nop
 800a374:	f7ff ff20 	bl	800a1b8 <BSP_SD_GetCardState>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1fa      	bne.n	800a374 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a382:	7dfb      	ldrb	r3, [r7, #23]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08c      	sub	sp, #48	@ 0x30
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	603a      	str	r2, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
 800a398:	460b      	mov	r3, r1
 800a39a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a3a2:	4b25      	ldr	r3, [pc, #148]	@ (800a438 <SD_ioctl+0xac>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <SD_ioctl+0x28>
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e03c      	b.n	800a42e <SD_ioctl+0xa2>

  switch (cmd)
 800a3b4:	79bb      	ldrb	r3, [r7, #6]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d834      	bhi.n	800a424 <SD_ioctl+0x98>
 800a3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c0 <SD_ioctl+0x34>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a3d1 	.word	0x0800a3d1
 800a3c4:	0800a3d9 	.word	0x0800a3d9
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a40b 	.word	0x0800a40b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a3d6:	e028      	b.n	800a42a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3d8:	f107 030c 	add.w	r3, r7, #12
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f7ff fefb 	bl	800a1d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a3e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a3ee:	e01c      	b.n	800a42a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3f0:	f107 030c 	add.w	r3, r7, #12
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff feef 	bl	800a1d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a408:	e00f      	b.n	800a42a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a40a:	f107 030c 	add.w	r3, r7, #12
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fee2 	bl	800a1d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a416:	0a5a      	lsrs	r2, r3, #9
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a422:	e002      	b.n	800a42a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a424:	2304      	movs	r3, #4
 800a426:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a42a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3730      	adds	r7, #48	@ 0x30
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000015 	.word	0x20000015

0800a43c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	4603      	mov	r3, r0
 800a444:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a446:	79fb      	ldrb	r3, [r7, #7]
 800a448:	4a08      	ldr	r2, [pc, #32]	@ (800a46c <disk_status+0x30>)
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	79fa      	ldrb	r2, [r7, #7]
 800a454:	4905      	ldr	r1, [pc, #20]	@ (800a46c <disk_status+0x30>)
 800a456:	440a      	add	r2, r1
 800a458:	7a12      	ldrb	r2, [r2, #8]
 800a45a:	4610      	mov	r0, r2
 800a45c:	4798      	blx	r3
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a462:	7bfb      	ldrb	r3, [r7, #15]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	20011720 	.word	0x20011720

0800a470 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a47e:	79fb      	ldrb	r3, [r7, #7]
 800a480:	4a0e      	ldr	r2, [pc, #56]	@ (800a4bc <disk_initialize+0x4c>)
 800a482:	5cd3      	ldrb	r3, [r2, r3]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d114      	bne.n	800a4b2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	4a0c      	ldr	r2, [pc, #48]	@ (800a4bc <disk_initialize+0x4c>)
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	79fa      	ldrb	r2, [r7, #7]
 800a496:	4909      	ldr	r1, [pc, #36]	@ (800a4bc <disk_initialize+0x4c>)
 800a498:	440a      	add	r2, r1
 800a49a:	7a12      	ldrb	r2, [r2, #8]
 800a49c:	4610      	mov	r0, r2
 800a49e:	4798      	blx	r3
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d103      	bne.n	800a4b2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	4a03      	ldr	r2, [pc, #12]	@ (800a4bc <disk_initialize+0x4c>)
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	20011720 	.word	0x20011720

0800a4c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a4c0:	b590      	push	{r4, r7, lr}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	607a      	str	r2, [r7, #4]
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a4d0:	7bfb      	ldrb	r3, [r7, #15]
 800a4d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a4fc <disk_read+0x3c>)
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	689c      	ldr	r4, [r3, #8]
 800a4dc:	7bfb      	ldrb	r3, [r7, #15]
 800a4de:	4a07      	ldr	r2, [pc, #28]	@ (800a4fc <disk_read+0x3c>)
 800a4e0:	4413      	add	r3, r2
 800a4e2:	7a18      	ldrb	r0, [r3, #8]
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	68b9      	ldr	r1, [r7, #8]
 800a4ea:	47a0      	blx	r4
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd90      	pop	{r4, r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20011720 	.word	0x20011720

0800a500 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a500:	b590      	push	{r4, r7, lr}
 800a502:	b087      	sub	sp, #28
 800a504:	af00      	add	r7, sp, #0
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	607a      	str	r2, [r7, #4]
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	4603      	mov	r3, r0
 800a50e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a510:	7bfb      	ldrb	r3, [r7, #15]
 800a512:	4a0a      	ldr	r2, [pc, #40]	@ (800a53c <disk_write+0x3c>)
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	68dc      	ldr	r4, [r3, #12]
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	4a07      	ldr	r2, [pc, #28]	@ (800a53c <disk_write+0x3c>)
 800a520:	4413      	add	r3, r2
 800a522:	7a18      	ldrb	r0, [r3, #8]
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	68b9      	ldr	r1, [r7, #8]
 800a52a:	47a0      	blx	r4
 800a52c:	4603      	mov	r3, r0
 800a52e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
}
 800a532:	4618      	mov	r0, r3
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	bd90      	pop	{r4, r7, pc}
 800a53a:	bf00      	nop
 800a53c:	20011720 	.word	0x20011720

0800a540 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	603a      	str	r2, [r7, #0]
 800a54a:	71fb      	strb	r3, [r7, #7]
 800a54c:	460b      	mov	r3, r1
 800a54e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	4a09      	ldr	r2, [pc, #36]	@ (800a578 <disk_ioctl+0x38>)
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	79fa      	ldrb	r2, [r7, #7]
 800a55e:	4906      	ldr	r1, [pc, #24]	@ (800a578 <disk_ioctl+0x38>)
 800a560:	440a      	add	r2, r1
 800a562:	7a10      	ldrb	r0, [r2, #8]
 800a564:	79b9      	ldrb	r1, [r7, #6]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	4798      	blx	r3
 800a56a:	4603      	mov	r3, r0
 800a56c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a56e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	20011720 	.word	0x20011720

0800a57c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3301      	adds	r3, #1
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a58c:	89fb      	ldrh	r3, [r7, #14]
 800a58e:	021b      	lsls	r3, r3, #8
 800a590:	b21a      	sxth	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	b21b      	sxth	r3, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	b21b      	sxth	r3, r3
 800a59c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a59e:	89fb      	ldrh	r3, [r7, #14]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3303      	adds	r3, #3
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	3202      	adds	r2, #2
 800a5c4:	7812      	ldrb	r2, [r2, #0]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	3201      	adds	r2, #1
 800a5d2:	7812      	ldrb	r2, [r2, #0]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	021b      	lsls	r3, r3, #8
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	7812      	ldrb	r2, [r2, #0]
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	1c5a      	adds	r2, r3, #1
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	887a      	ldrh	r2, [r7, #2]
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	887b      	ldrh	r3, [r7, #2]
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	607a      	str	r2, [r7, #4]
 800a616:	887a      	ldrh	r2, [r7, #2]
 800a618:	b2d2      	uxtb	r2, r2
 800a61a:	701a      	strb	r2, [r3, #0]
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	683a      	ldr	r2, [r7, #0]
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	0a1b      	lsrs	r3, r3, #8
 800a642:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	607a      	str	r2, [r7, #4]
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	b2d2      	uxtb	r2, r2
 800a64e:	701a      	strb	r2, [r3, #0]
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	0a1b      	lsrs	r3, r3, #8
 800a654:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	b2d2      	uxtb	r2, r2
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	0a1b      	lsrs	r3, r3, #8
 800a666:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	b2d2      	uxtb	r2, r2
 800a672:	701a      	strb	r2, [r3, #0]
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr

0800a680 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a680:	b480      	push	{r7}
 800a682:	b087      	sub	sp, #28
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	617a      	str	r2, [r7, #20]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	607b      	str	r3, [r7, #4]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1f3      	bne.n	800a690 <mem_set+0x10>
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a6b6:	b480      	push	{r7}
 800a6b8:	b089      	sub	sp, #36	@ 0x24
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	61fa      	str	r2, [r7, #28]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	61ba      	str	r2, [r7, #24]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	1acb      	subs	r3, r1, r3
 800a6e2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <mem_cmp+0x40>
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0eb      	beq.n	800a6ce <mem_cmp+0x18>

	return r;
 800a6f6:	697b      	ldr	r3, [r7, #20]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3724      	adds	r7, #36	@ 0x24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a70e:	e002      	b.n	800a716 <chk_chr+0x12>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3301      	adds	r3, #1
 800a714:	607b      	str	r3, [r7, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d005      	beq.n	800a72a <chk_chr+0x26>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	4293      	cmp	r3, r2
 800a728:	d1f2      	bne.n	800a710 <chk_chr+0xc>
	return *str;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	781b      	ldrb	r3, [r3, #0]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
	...

0800a73c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	e01f      	b.n	800a78c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a74c:	4a41      	ldr	r2, [pc, #260]	@ (800a854 <inc_lock+0x118>)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	011b      	lsls	r3, r3, #4
 800a752:	4413      	add	r3, r2
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d113      	bne.n	800a786 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a75e:	4a3d      	ldr	r2, [pc, #244]	@ (800a854 <inc_lock+0x118>)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	011b      	lsls	r3, r3, #4
 800a764:	4413      	add	r3, r2
 800a766:	3304      	adds	r3, #4
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a76e:	429a      	cmp	r2, r3
 800a770:	d109      	bne.n	800a786 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a772:	4a38      	ldr	r2, [pc, #224]	@ (800a854 <inc_lock+0x118>)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	011b      	lsls	r3, r3, #4
 800a778:	4413      	add	r3, r2
 800a77a:	3308      	adds	r3, #8
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a782:	429a      	cmp	r2, r3
 800a784:	d006      	beq.n	800a794 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3301      	adds	r3, #1
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d9dc      	bls.n	800a74c <inc_lock+0x10>
 800a792:	e000      	b.n	800a796 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a794:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d132      	bne.n	800a802 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	e002      	b.n	800a7a8 <inc_lock+0x6c>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d806      	bhi.n	800a7bc <inc_lock+0x80>
 800a7ae:	4a29      	ldr	r2, [pc, #164]	@ (800a854 <inc_lock+0x118>)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	4413      	add	r3, r2
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1f2      	bne.n	800a7a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d101      	bne.n	800a7c6 <inc_lock+0x8a>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e040      	b.n	800a848 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	4922      	ldr	r1, [pc, #136]	@ (800a854 <inc_lock+0x118>)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	011b      	lsls	r3, r3, #4
 800a7d0:	440b      	add	r3, r1
 800a7d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	689a      	ldr	r2, [r3, #8]
 800a7d8:	491e      	ldr	r1, [pc, #120]	@ (800a854 <inc_lock+0x118>)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	011b      	lsls	r3, r3, #4
 800a7de:	440b      	add	r3, r1
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	491a      	ldr	r1, [pc, #104]	@ (800a854 <inc_lock+0x118>)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	440b      	add	r3, r1
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a7f4:	4a17      	ldr	r2, [pc, #92]	@ (800a854 <inc_lock+0x118>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	011b      	lsls	r3, r3, #4
 800a7fa:	4413      	add	r3, r2
 800a7fc:	330c      	adds	r3, #12
 800a7fe:	2200      	movs	r2, #0
 800a800:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d009      	beq.n	800a81c <inc_lock+0xe0>
 800a808:	4a12      	ldr	r2, [pc, #72]	@ (800a854 <inc_lock+0x118>)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	4413      	add	r3, r2
 800a810:	330c      	adds	r3, #12
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <inc_lock+0xe0>
 800a818:	2300      	movs	r3, #0
 800a81a:	e015      	b.n	800a848 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d108      	bne.n	800a834 <inc_lock+0xf8>
 800a822:	4a0c      	ldr	r2, [pc, #48]	@ (800a854 <inc_lock+0x118>)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	4413      	add	r3, r2
 800a82a:	330c      	adds	r3, #12
 800a82c:	881b      	ldrh	r3, [r3, #0]
 800a82e:	3301      	adds	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	e001      	b.n	800a838 <inc_lock+0xfc>
 800a834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a838:	4906      	ldr	r1, [pc, #24]	@ (800a854 <inc_lock+0x118>)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	011b      	lsls	r3, r3, #4
 800a83e:	440b      	add	r3, r1
 800a840:	330c      	adds	r3, #12
 800a842:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3301      	adds	r3, #1
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	20011500 	.word	0x20011500

0800a858 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3b01      	subs	r3, #1
 800a864:	607b      	str	r3, [r7, #4]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d825      	bhi.n	800a8b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800a86c:	4a17      	ldr	r2, [pc, #92]	@ (800a8cc <dec_lock+0x74>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	4413      	add	r3, r2
 800a874:	330c      	adds	r3, #12
 800a876:	881b      	ldrh	r3, [r3, #0]
 800a878:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a87a:	89fb      	ldrh	r3, [r7, #14]
 800a87c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a880:	d101      	bne.n	800a886 <dec_lock+0x2e>
 800a882:	2300      	movs	r3, #0
 800a884:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a886:	89fb      	ldrh	r3, [r7, #14]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <dec_lock+0x3a>
 800a88c:	89fb      	ldrh	r3, [r7, #14]
 800a88e:	3b01      	subs	r3, #1
 800a890:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a892:	4a0e      	ldr	r2, [pc, #56]	@ (800a8cc <dec_lock+0x74>)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	4413      	add	r3, r2
 800a89a:	330c      	adds	r3, #12
 800a89c:	89fa      	ldrh	r2, [r7, #14]
 800a89e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a8a0:	89fb      	ldrh	r3, [r7, #14]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d105      	bne.n	800a8b2 <dec_lock+0x5a>
 800a8a6:	4a09      	ldr	r2, [pc, #36]	@ (800a8cc <dec_lock+0x74>)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	4413      	add	r3, r2
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	737b      	strb	r3, [r7, #13]
 800a8b6:	e001      	b.n	800a8bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a8bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20011500 	.word	0x20011500

0800a8d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a8d8:	2300      	movs	r3, #0
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	e010      	b.n	800a900 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a8de:	4a0d      	ldr	r2, [pc, #52]	@ (800a914 <clear_lock+0x44>)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	4413      	add	r3, r2
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d105      	bne.n	800a8fa <clear_lock+0x2a>
 800a8ee:	4a09      	ldr	r2, [pc, #36]	@ (800a914 <clear_lock+0x44>)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	011b      	lsls	r3, r3, #4
 800a8f4:	4413      	add	r3, r2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d9eb      	bls.n	800a8de <clear_lock+0xe>
	}
}
 800a906:	bf00      	nop
 800a908:	bf00      	nop
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20011500 	.word	0x20011500

0800a918 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b086      	sub	sp, #24
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	78db      	ldrb	r3, [r3, #3]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d034      	beq.n	800a996 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a930:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	7858      	ldrb	r0, [r3, #1]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a93c:	2301      	movs	r3, #1
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	f7ff fdde 	bl	800a500 <disk_write>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d002      	beq.n	800a950 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	73fb      	strb	r3, [r7, #15]
 800a94e:	e022      	b.n	800a996 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	1ad2      	subs	r2, r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	429a      	cmp	r2, r3
 800a964:	d217      	bcs.n	800a996 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	789b      	ldrb	r3, [r3, #2]
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	e010      	b.n	800a990 <sync_window+0x78>
					wsect += fs->fsize;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	4413      	add	r3, r2
 800a976:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7858      	ldrb	r0, [r3, #1]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a982:	2301      	movs	r3, #1
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	f7ff fdbb 	bl	800a500 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	613b      	str	r3, [r7, #16]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d8eb      	bhi.n	800a96e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d01b      	beq.n	800a9f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7ff ffad 	bl	800a918 <sync_window>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d113      	bne.n	800a9f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	7858      	ldrb	r0, [r3, #1]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	683a      	ldr	r2, [r7, #0]
 800a9d6:	f7ff fd73 	bl	800a4c0 <disk_read>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b083      	sub	sp, #12
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	3b02      	subs	r3, #2
 800aa08:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	3b02      	subs	r3, #2
 800aa10:	683a      	ldr	r2, [r7, #0]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d301      	bcc.n	800aa1a <clust2sect+0x20>
 800aa16:	2300      	movs	r3, #0
 800aa18:	e008      	b.n	800aa2c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	895b      	ldrh	r3, [r3, #10]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	fb03 f202 	mul.w	r2, r3, r2
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa2a:	4413      	add	r3, r2
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d904      	bls.n	800aa58 <get_fat+0x20>
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d302      	bcc.n	800aa5e <get_fat+0x26>
		val = 1;	/* Internal error */
 800aa58:	2301      	movs	r3, #1
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	e0ba      	b.n	800abd4 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aa5e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa62:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	f000 8082 	beq.w	800ab72 <get_fat+0x13a>
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	f300 80a6 	bgt.w	800abc0 <get_fat+0x188>
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d002      	beq.n	800aa7e <get_fat+0x46>
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d055      	beq.n	800ab28 <get_fat+0xf0>
 800aa7c:	e0a0      	b.n	800abc0 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	085b      	lsrs	r3, r3, #1
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	4413      	add	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	899b      	ldrh	r3, [r3, #12]
 800aa94:	4619      	mov	r1, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa9c:	4413      	add	r3, r2
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6938      	ldr	r0, [r7, #16]
 800aaa2:	f7ff ff7d 	bl	800a9a0 <move_window>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f040 808c 	bne.w	800abc6 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	60fa      	str	r2, [r7, #12]
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	8992      	ldrh	r2, [r2, #12]
 800aab8:	fbb3 f1f2 	udiv	r1, r3, r2
 800aabc:	fb01 f202 	mul.w	r2, r1, r2
 800aac0:	1a9b      	subs	r3, r3, r2
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	4413      	add	r3, r2
 800aac6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aaca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	899b      	ldrh	r3, [r3, #12]
 800aad4:	4619      	mov	r1, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	fbb3 f3f1 	udiv	r3, r3, r1
 800aadc:	4413      	add	r3, r2
 800aade:	4619      	mov	r1, r3
 800aae0:	6938      	ldr	r0, [r7, #16]
 800aae2:	f7ff ff5d 	bl	800a9a0 <move_window>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d16e      	bne.n	800abca <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	899b      	ldrh	r3, [r3, #12]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaf8:	fb01 f202 	mul.w	r2, r1, r2
 800aafc:	1a9b      	subs	r3, r3, r2
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	4413      	add	r3, r2
 800ab02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab06:	021b      	lsls	r3, r3, #8
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <get_fat+0xe6>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	091b      	lsrs	r3, r3, #4
 800ab1c:	e002      	b.n	800ab24 <get_fat+0xec>
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab24:	617b      	str	r3, [r7, #20]
			break;
 800ab26:	e055      	b.n	800abd4 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	899b      	ldrh	r3, [r3, #12]
 800ab30:	085b      	lsrs	r3, r3, #1
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4619      	mov	r1, r3
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab3c:	4413      	add	r3, r2
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6938      	ldr	r0, [r7, #16]
 800ab42:	f7ff ff2d 	bl	800a9a0 <move_window>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d140      	bne.n	800abce <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	8992      	ldrh	r2, [r2, #12]
 800ab5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab5e:	fb00 f202 	mul.w	r2, r0, r2
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	440b      	add	r3, r1
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7ff fd08 	bl	800a57c <ld_word>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	617b      	str	r3, [r7, #20]
			break;
 800ab70:	e030      	b.n	800abd4 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	899b      	ldrh	r3, [r3, #12]
 800ab7a:	089b      	lsrs	r3, r3, #2
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	4619      	mov	r1, r3
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab86:	4413      	add	r3, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	6938      	ldr	r0, [r7, #16]
 800ab8c:	f7ff ff08 	bl	800a9a0 <move_window>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d11d      	bne.n	800abd2 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	8992      	ldrh	r2, [r2, #12]
 800aba4:	fbb3 f0f2 	udiv	r0, r3, r2
 800aba8:	fb00 f202 	mul.w	r2, r0, r2
 800abac:	1a9b      	subs	r3, r3, r2
 800abae:	440b      	add	r3, r1
 800abb0:	4618      	mov	r0, r3
 800abb2:	f7ff fcfb 	bl	800a5ac <ld_dword>
 800abb6:	4603      	mov	r3, r0
 800abb8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800abbc:	617b      	str	r3, [r7, #20]
			break;
 800abbe:	e009      	b.n	800abd4 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800abc0:	2301      	movs	r3, #1
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	e006      	b.n	800abd4 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abc6:	bf00      	nop
 800abc8:	e004      	b.n	800abd4 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abca:	bf00      	nop
 800abcc:	e002      	b.n	800abd4 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800abce:	bf00      	nop
 800abd0:	e000      	b.n	800abd4 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abd2:	bf00      	nop
		}
	}

	return val;
 800abd4:	697b      	ldr	r3, [r7, #20]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800abde:	b590      	push	{r4, r7, lr}
 800abe0:	b089      	sub	sp, #36	@ 0x24
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800abea:	2302      	movs	r3, #2
 800abec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	f240 8109 	bls.w	800ae08 <put_fat+0x22a>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	f080 8103 	bcs.w	800ae08 <put_fat+0x22a>
		switch (fs->fs_type) {
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	f000 80b6 	beq.w	800ad78 <put_fat+0x19a>
 800ac0c:	2b03      	cmp	r3, #3
 800ac0e:	f300 80fb 	bgt.w	800ae08 <put_fat+0x22a>
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d003      	beq.n	800ac1e <put_fat+0x40>
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	f000 8083 	beq.w	800ad22 <put_fat+0x144>
 800ac1c:	e0f4      	b.n	800ae08 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	61bb      	str	r3, [r7, #24]
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	085b      	lsrs	r3, r3, #1
 800ac26:	69ba      	ldr	r2, [r7, #24]
 800ac28:	4413      	add	r3, r2
 800ac2a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	899b      	ldrh	r3, [r3, #12]
 800ac34:	4619      	mov	r1, r3
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7ff fead 	bl	800a9a0 <move_window>
 800ac46:	4603      	mov	r3, r0
 800ac48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac4a:	7ffb      	ldrb	r3, [r7, #31]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f040 80d4 	bne.w	800adfa <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	61ba      	str	r2, [r7, #24]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	8992      	ldrh	r2, [r2, #12]
 800ac62:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac66:	fb00 f202 	mul.w	r2, r0, r2
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	440b      	add	r3, r1
 800ac6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00d      	beq.n	800ac96 <put_fat+0xb8>
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	b25b      	sxtb	r3, r3
 800ac80:	f003 030f 	and.w	r3, r3, #15
 800ac84:	b25a      	sxtb	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	011b      	lsls	r3, r3, #4
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	b25b      	sxtb	r3, r3
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	e001      	b.n	800ac9a <put_fat+0xbc>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2201      	movs	r2, #1
 800aca2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	899b      	ldrh	r3, [r3, #12]
 800acac:	4619      	mov	r1, r3
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	fbb3 f3f1 	udiv	r3, r3, r1
 800acb4:	4413      	add	r3, r2
 800acb6:	4619      	mov	r1, r3
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7ff fe71 	bl	800a9a0 <move_window>
 800acbe:	4603      	mov	r3, r0
 800acc0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acc2:	7ffb      	ldrb	r3, [r7, #31]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f040 809a 	bne.w	800adfe <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	899b      	ldrh	r3, [r3, #12]
 800acd4:	461a      	mov	r2, r3
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	fbb3 f0f2 	udiv	r0, r3, r2
 800acdc:	fb00 f202 	mul.w	r2, r0, r2
 800ace0:	1a9b      	subs	r3, r3, r2
 800ace2:	440b      	add	r3, r1
 800ace4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <put_fat+0x11a>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	091b      	lsrs	r3, r3, #4
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	e00e      	b.n	800ad16 <put_fat+0x138>
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	b25b      	sxtb	r3, r3
 800acfe:	f023 030f 	bic.w	r3, r3, #15
 800ad02:	b25a      	sxtb	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b25b      	sxtb	r3, r3
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	b25b      	sxtb	r3, r3
 800ad10:	4313      	orrs	r3, r2
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	70da      	strb	r2, [r3, #3]
			break;
 800ad20:	e072      	b.n	800ae08 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	899b      	ldrh	r3, [r3, #12]
 800ad2a:	085b      	lsrs	r3, r3, #1
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad36:	4413      	add	r3, r2
 800ad38:	4619      	mov	r1, r3
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	f7ff fe30 	bl	800a9a0 <move_window>
 800ad40:	4603      	mov	r3, r0
 800ad42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad44:	7ffb      	ldrb	r3, [r7, #31]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d15b      	bne.n	800ae02 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	005b      	lsls	r3, r3, #1
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	8992      	ldrh	r2, [r2, #12]
 800ad58:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad5c:	fb00 f202 	mul.w	r2, r0, r2
 800ad60:	1a9b      	subs	r3, r3, r2
 800ad62:	440b      	add	r3, r1
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	b292      	uxth	r2, r2
 800ad68:	4611      	mov	r1, r2
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7ff fc41 	bl	800a5f2 <st_word>
			fs->wflag = 1;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2201      	movs	r2, #1
 800ad74:	70da      	strb	r2, [r3, #3]
			break;
 800ad76:	e047      	b.n	800ae08 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	899b      	ldrh	r3, [r3, #12]
 800ad80:	089b      	lsrs	r3, r3, #2
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	4619      	mov	r1, r3
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad8c:	4413      	add	r3, r2
 800ad8e:	4619      	mov	r1, r3
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7ff fe05 	bl	800a9a0 <move_window>
 800ad96:	4603      	mov	r3, r0
 800ad98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad9a:	7ffb      	ldrb	r3, [r7, #31]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d132      	bne.n	800ae06 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	8992      	ldrh	r2, [r2, #12]
 800adb4:	fbb3 f0f2 	udiv	r0, r3, r2
 800adb8:	fb00 f202 	mul.w	r2, r0, r2
 800adbc:	1a9b      	subs	r3, r3, r2
 800adbe:	440b      	add	r3, r1
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fbf3 	bl	800a5ac <ld_dword>
 800adc6:	4603      	mov	r3, r0
 800adc8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800adcc:	4323      	orrs	r3, r4
 800adce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	8992      	ldrh	r2, [r2, #12]
 800adde:	fbb3 f0f2 	udiv	r0, r3, r2
 800ade2:	fb00 f202 	mul.w	r2, r0, r2
 800ade6:	1a9b      	subs	r3, r3, r2
 800ade8:	440b      	add	r3, r1
 800adea:	6879      	ldr	r1, [r7, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fc1b 	bl	800a628 <st_dword>
			fs->wflag = 1;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2201      	movs	r2, #1
 800adf6:	70da      	strb	r2, [r3, #3]
			break;
 800adf8:	e006      	b.n	800ae08 <put_fat+0x22a>
			if (res != FR_OK) break;
 800adfa:	bf00      	nop
 800adfc:	e004      	b.n	800ae08 <put_fat+0x22a>
			if (res != FR_OK) break;
 800adfe:	bf00      	nop
 800ae00:	e002      	b.n	800ae08 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ae02:	bf00      	nop
 800ae04:	e000      	b.n	800ae08 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ae06:	bf00      	nop
		}
	}
	return res;
 800ae08:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3724      	adds	r7, #36	@ 0x24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd90      	pop	{r4, r7, pc}

0800ae12 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b088      	sub	sp, #32
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10d      	bne.n	800ae44 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d004      	beq.n	800ae3e <create_chain+0x2c>
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	69ba      	ldr	r2, [r7, #24]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d31b      	bcc.n	800ae76 <create_chain+0x64>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	61bb      	str	r3, [r7, #24]
 800ae42:	e018      	b.n	800ae76 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ae44:	6839      	ldr	r1, [r7, #0]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff fdf6 	bl	800aa38 <get_fat>
 800ae4c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d801      	bhi.n	800ae58 <create_chain+0x46>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e070      	b.n	800af3a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5e:	d101      	bne.n	800ae64 <create_chain+0x52>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	e06a      	b.n	800af3a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d201      	bcs.n	800ae72 <create_chain+0x60>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	e063      	b.n	800af3a <create_chain+0x128>
		scl = clst;
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	69fa      	ldr	r2, [r7, #28]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d307      	bcc.n	800ae9a <create_chain+0x88>
				ncl = 2;
 800ae8a:	2302      	movs	r3, #2
 800ae8c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d901      	bls.n	800ae9a <create_chain+0x88>
 800ae96:	2300      	movs	r3, #0
 800ae98:	e04f      	b.n	800af3a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ae9a:	69f9      	ldr	r1, [r7, #28]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff fdcb 	bl	800aa38 <get_fat>
 800aea2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00e      	beq.n	800aec8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d003      	beq.n	800aeb8 <create_chain+0xa6>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb6:	d101      	bne.n	800aebc <create_chain+0xaa>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	e03e      	b.n	800af3a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d1da      	bne.n	800ae7a <create_chain+0x68>
 800aec4:	2300      	movs	r3, #0
 800aec6:	e038      	b.n	800af3a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aec8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aeca:	f04f 32ff 	mov.w	r2, #4294967295
 800aece:	69f9      	ldr	r1, [r7, #28]
 800aed0:	6938      	ldr	r0, [r7, #16]
 800aed2:	f7ff fe84 	bl	800abde <put_fat>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d109      	bne.n	800aef4 <create_chain+0xe2>
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d006      	beq.n	800aef4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6938      	ldr	r0, [r7, #16]
 800aeec:	f7ff fe77 	bl	800abde <put_fat>
 800aef0:	4603      	mov	r3, r0
 800aef2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d116      	bne.n	800af28 <create_chain+0x116>
		fs->last_clst = ncl;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	699a      	ldr	r2, [r3, #24]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	3b02      	subs	r3, #2
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d804      	bhi.n	800af18 <create_chain+0x106>
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	1e5a      	subs	r2, r3, #1
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	791b      	ldrb	r3, [r3, #4]
 800af1c:	f043 0301 	orr.w	r3, r3, #1
 800af20:	b2da      	uxtb	r2, r3
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	711a      	strb	r2, [r3, #4]
 800af26:	e007      	b.n	800af38 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800af28:	7dfb      	ldrb	r3, [r7, #23]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d102      	bne.n	800af34 <create_chain+0x122>
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295
 800af32:	e000      	b.n	800af36 <create_chain+0x124>
 800af34:	2301      	movs	r3, #1
 800af36:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800af38:	69fb      	ldr	r3, [r7, #28]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b086      	sub	sp, #24
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af58:	d204      	bcs.n	800af64 <dir_sdi+0x22>
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	f003 031f 	and.w	r3, r3, #31
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <dir_sdi+0x26>
		return FR_INT_ERR;
 800af64:	2302      	movs	r3, #2
 800af66:	e071      	b.n	800b04c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d106      	bne.n	800af88 <dir_sdi+0x46>
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2b02      	cmp	r3, #2
 800af80:	d902      	bls.n	800af88 <dir_sdi+0x46>
		clst = fs->dirbase;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10c      	bne.n	800afa8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	095b      	lsrs	r3, r3, #5
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	8912      	ldrh	r2, [r2, #8]
 800af96:	4293      	cmp	r3, r2
 800af98:	d301      	bcc.n	800af9e <dir_sdi+0x5c>
 800af9a:	2302      	movs	r3, #2
 800af9c:	e056      	b.n	800b04c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	61da      	str	r2, [r3, #28]
 800afa6:	e02d      	b.n	800b004 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	895b      	ldrh	r3, [r3, #10]
 800afac:	461a      	mov	r2, r3
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	899b      	ldrh	r3, [r3, #12]
 800afb2:	fb02 f303 	mul.w	r3, r2, r3
 800afb6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800afb8:	e019      	b.n	800afee <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6979      	ldr	r1, [r7, #20]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fd3a 	bl	800aa38 <get_fat>
 800afc4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afcc:	d101      	bne.n	800afd2 <dir_sdi+0x90>
 800afce:	2301      	movs	r3, #1
 800afd0:	e03c      	b.n	800b04c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d904      	bls.n	800afe2 <dir_sdi+0xa0>
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d301      	bcc.n	800afe6 <dir_sdi+0xa4>
 800afe2:	2302      	movs	r3, #2
 800afe4:	e032      	b.n	800b04c <dir_sdi+0x10a>
			ofs -= csz;
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d2e1      	bcs.n	800afba <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800aff6:	6979      	ldr	r1, [r7, #20]
 800aff8:	6938      	ldr	r0, [r7, #16]
 800affa:	f7ff fcfe 	bl	800a9fa <clust2sect>
 800affe:	4602      	mov	r2, r0
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <dir_sdi+0xd4>
 800b012:	2302      	movs	r3, #2
 800b014:	e01a      	b.n	800b04c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	69da      	ldr	r2, [r3, #28]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	899b      	ldrh	r3, [r3, #12]
 800b01e:	4619      	mov	r1, r3
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	fbb3 f3f1 	udiv	r3, r3, r1
 800b026:	441a      	add	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	899b      	ldrh	r3, [r3, #12]
 800b036:	461a      	mov	r2, r3
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b03e:	fb00 f202 	mul.w	r2, r0, r2
 800b042:	1a9b      	subs	r3, r3, r2
 800b044:	18ca      	adds	r2, r1, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	3320      	adds	r3, #32
 800b06a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	69db      	ldr	r3, [r3, #28]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d003      	beq.n	800b07c <dir_next+0x28>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b07a:	d301      	bcc.n	800b080 <dir_next+0x2c>
 800b07c:	2304      	movs	r3, #4
 800b07e:	e0bb      	b.n	800b1f8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	899b      	ldrh	r3, [r3, #12]
 800b084:	461a      	mov	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	fbb3 f1f2 	udiv	r1, r3, r2
 800b08c:	fb01 f202 	mul.w	r2, r1, r2
 800b090:	1a9b      	subs	r3, r3, r2
 800b092:	2b00      	cmp	r3, #0
 800b094:	f040 809d 	bne.w	800b1d2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10b      	bne.n	800b0c2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	095b      	lsrs	r3, r3, #5
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	8912      	ldrh	r2, [r2, #8]
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	f0c0 808d 	bcc.w	800b1d2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	61da      	str	r2, [r3, #28]
 800b0be:	2304      	movs	r3, #4
 800b0c0:	e09a      	b.n	800b1f8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	899b      	ldrh	r3, [r3, #12]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	8952      	ldrh	r2, [r2, #10]
 800b0d2:	3a01      	subs	r2, #1
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d17b      	bne.n	800b1d2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	f7ff fca8 	bl	800aa38 <get_fat>
 800b0e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d801      	bhi.n	800b0f4 <dir_next+0xa0>
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	e081      	b.n	800b1f8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fa:	d101      	bne.n	800b100 <dir_next+0xac>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e07b      	b.n	800b1f8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	429a      	cmp	r2, r3
 800b108:	d359      	bcc.n	800b1be <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d104      	bne.n	800b11a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	61da      	str	r2, [r3, #28]
 800b116:	2304      	movs	r3, #4
 800b118:	e06e      	b.n	800b1f8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f7ff fe75 	bl	800ae12 <create_chain>
 800b128:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <dir_next+0xe0>
 800b130:	2307      	movs	r3, #7
 800b132:	e061      	b.n	800b1f8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d101      	bne.n	800b13e <dir_next+0xea>
 800b13a:	2302      	movs	r3, #2
 800b13c:	e05c      	b.n	800b1f8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	d101      	bne.n	800b14a <dir_next+0xf6>
 800b146:	2301      	movs	r3, #1
 800b148:	e056      	b.n	800b1f8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7ff fbe4 	bl	800a918 <sync_window>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <dir_next+0x106>
 800b156:	2301      	movs	r3, #1
 800b158:	e04e      	b.n	800b1f8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	899b      	ldrh	r3, [r3, #12]
 800b164:	461a      	mov	r2, r3
 800b166:	2100      	movs	r1, #0
 800b168:	f7ff fa8a 	bl	800a680 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b16c:	2300      	movs	r3, #0
 800b16e:	613b      	str	r3, [r7, #16]
 800b170:	6979      	ldr	r1, [r7, #20]
 800b172:	68f8      	ldr	r0, [r7, #12]
 800b174:	f7ff fc41 	bl	800a9fa <clust2sect>
 800b178:	4602      	mov	r2, r0
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b17e:	e012      	b.n	800b1a6 <dir_next+0x152>
						fs->wflag = 1;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2201      	movs	r2, #1
 800b184:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff fbc6 	bl	800a918 <sync_window>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d001      	beq.n	800b196 <dir_next+0x142>
 800b192:	2301      	movs	r3, #1
 800b194:	e030      	b.n	800b1f8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3301      	adds	r3, #1
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	635a      	str	r2, [r3, #52]	@ 0x34
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	895b      	ldrh	r3, [r3, #10]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d3e6      	bcc.n	800b180 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	1ad2      	subs	r2, r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b1c4:	6979      	ldr	r1, [r7, #20]
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7ff fc17 	bl	800a9fa <clust2sect>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	899b      	ldrh	r3, [r3, #12]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1ea:	fb00 f202 	mul.w	r2, r0, r2
 800b1ee:	1a9b      	subs	r3, r3, r2
 800b1f0:	18ca      	adds	r2, r1, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b1f6:	2300      	movs	r3, #0
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3718      	adds	r7, #24
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	331a      	adds	r3, #26
 800b20e:	4618      	mov	r0, r3
 800b210:	f7ff f9b4 	bl	800a57c <ld_word>
 800b214:	4603      	mov	r3, r0
 800b216:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d109      	bne.n	800b234 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	3314      	adds	r3, #20
 800b224:	4618      	mov	r0, r3
 800b226:	f7ff f9a9 	bl	800a57c <ld_word>
 800b22a:	4603      	mov	r3, r0
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b234:	68fb      	ldr	r3, [r7, #12]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
	...

0800b240 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b087      	sub	sp, #28
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	331a      	adds	r3, #26
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff f994 	bl	800a57c <ld_word>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <cmp_lfn+0x1e>
 800b25a:	2300      	movs	r3, #0
 800b25c:	e059      	b.n	800b312 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b266:	1e5a      	subs	r2, r3, #1
 800b268:	4613      	mov	r3, r2
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b274:	2301      	movs	r3, #1
 800b276:	81fb      	strh	r3, [r7, #14]
 800b278:	2300      	movs	r3, #0
 800b27a:	613b      	str	r3, [r7, #16]
 800b27c:	e033      	b.n	800b2e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b27e:	4a27      	ldr	r2, [pc, #156]	@ (800b31c <cmp_lfn+0xdc>)
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	4413      	add	r3, r2
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	461a      	mov	r2, r3
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	4413      	add	r3, r2
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7ff f975 	bl	800a57c <ld_word>
 800b292:	4603      	mov	r3, r0
 800b294:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b296:	89fb      	ldrh	r3, [r7, #14]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01a      	beq.n	800b2d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b2a0:	d812      	bhi.n	800b2c8 <cmp_lfn+0x88>
 800b2a2:	89bb      	ldrh	r3, [r7, #12]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f001 fa3d 	bl	800c724 <ff_wtoupper>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	461c      	mov	r4, r3
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	1c5a      	adds	r2, r3, #1
 800b2b2:	617a      	str	r2, [r7, #20]
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f001 fa31 	bl	800c724 <ff_wtoupper>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	429c      	cmp	r4, r3
 800b2c6:	d001      	beq.n	800b2cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e022      	b.n	800b312 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b2cc:	89bb      	ldrh	r3, [r7, #12]
 800b2ce:	81fb      	strh	r3, [r7, #14]
 800b2d0:	e006      	b.n	800b2e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b2d2:	89bb      	ldrh	r3, [r7, #12]
 800b2d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d001      	beq.n	800b2e0 <cmp_lfn+0xa0>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e018      	b.n	800b312 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	613b      	str	r3, [r7, #16]
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	2b0c      	cmp	r3, #12
 800b2ea:	d9c8      	bls.n	800b27e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00b      	beq.n	800b310 <cmp_lfn+0xd0>
 800b2f8:	89fb      	ldrh	r3, [r7, #14]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d008      	beq.n	800b310 <cmp_lfn+0xd0>
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <cmp_lfn+0xd0>
 800b30c:	2300      	movs	r3, #0
 800b30e:	e000      	b.n	800b312 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b310:	2301      	movs	r3, #1
}
 800b312:	4618      	mov	r0, r3
 800b314:	371c      	adds	r7, #28
 800b316:	46bd      	mov	sp, r7
 800b318:	bd90      	pop	{r4, r7, pc}
 800b31a:	bf00      	nop
 800b31c:	0800e698 	.word	0x0800e698

0800b320 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	331a      	adds	r3, #26
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff f924 	bl	800a57c <ld_word>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d001      	beq.n	800b33e <pick_lfn+0x1e>
 800b33a:	2300      	movs	r3, #0
 800b33c:	e04d      	b.n	800b3da <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b346:	1e5a      	subs	r2, r3, #1
 800b348:	4613      	mov	r3, r2
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b354:	2301      	movs	r3, #1
 800b356:	81fb      	strh	r3, [r7, #14]
 800b358:	2300      	movs	r3, #0
 800b35a:	613b      	str	r3, [r7, #16]
 800b35c:	e028      	b.n	800b3b0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b35e:	4a21      	ldr	r2, [pc, #132]	@ (800b3e4 <pick_lfn+0xc4>)
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	4413      	add	r3, r2
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	4413      	add	r3, r2
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7ff f905 	bl	800a57c <ld_word>
 800b372:	4603      	mov	r3, r0
 800b374:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b376:	89fb      	ldrh	r3, [r7, #14]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00f      	beq.n	800b39c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2bfe      	cmp	r3, #254	@ 0xfe
 800b380:	d901      	bls.n	800b386 <pick_lfn+0x66>
 800b382:	2300      	movs	r3, #0
 800b384:	e029      	b.n	800b3da <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b386:	89bb      	ldrh	r3, [r7, #12]
 800b388:	81fb      	strh	r3, [r7, #14]
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	1c5a      	adds	r2, r3, #1
 800b38e:	617a      	str	r2, [r7, #20]
 800b390:	005b      	lsls	r3, r3, #1
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	4413      	add	r3, r2
 800b396:	89fa      	ldrh	r2, [r7, #14]
 800b398:	801a      	strh	r2, [r3, #0]
 800b39a:	e006      	b.n	800b3aa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b39c:	89bb      	ldrh	r3, [r7, #12]
 800b39e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d001      	beq.n	800b3aa <pick_lfn+0x8a>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e017      	b.n	800b3da <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2b0c      	cmp	r3, #12
 800b3b4:	d9d3      	bls.n	800b35e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00a      	beq.n	800b3d8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2bfe      	cmp	r3, #254	@ 0xfe
 800b3c6:	d901      	bls.n	800b3cc <pick_lfn+0xac>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	e006      	b.n	800b3da <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	005b      	lsls	r3, r3, #1
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b3d8:	2301      	movs	r3, #1
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800e698 	.word	0x0800e698

0800b3e8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b085      	sub	sp, #20
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b3f4:	230b      	movs	r3, #11
 800b3f6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b3f8:	7bfb      	ldrb	r3, [r7, #15]
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	0852      	lsrs	r2, r2, #1
 800b3fe:	01db      	lsls	r3, r3, #7
 800b400:	4313      	orrs	r3, r2
 800b402:	b2da      	uxtb	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	1c59      	adds	r1, r3, #1
 800b408:	6079      	str	r1, [r7, #4]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	4413      	add	r3, r2
 800b40e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3b01      	subs	r3, #1
 800b414:	60bb      	str	r3, [r7, #8]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1ed      	bne.n	800b3f8 <sum_sfn+0x10>
	return sum;
 800b41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3714      	adds	r7, #20
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b086      	sub	sp, #24
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b434:	2304      	movs	r3, #4
 800b436:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b43e:	23ff      	movs	r3, #255	@ 0xff
 800b440:	757b      	strb	r3, [r7, #21]
 800b442:	23ff      	movs	r3, #255	@ 0xff
 800b444:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b446:	e081      	b.n	800b54c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	69db      	ldr	r3, [r3, #28]
 800b44c:	4619      	mov	r1, r3
 800b44e:	6938      	ldr	r0, [r7, #16]
 800b450:	f7ff faa6 	bl	800a9a0 <move_window>
 800b454:	4603      	mov	r3, r0
 800b456:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b458:	7dfb      	ldrb	r3, [r7, #23]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d17c      	bne.n	800b558 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b466:	7dbb      	ldrb	r3, [r7, #22]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d102      	bne.n	800b472 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b46c:	2304      	movs	r3, #4
 800b46e:	75fb      	strb	r3, [r7, #23]
 800b470:	e077      	b.n	800b562 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	330b      	adds	r3, #11
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b47e:	73fb      	strb	r3, [r7, #15]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7bfa      	ldrb	r2, [r7, #15]
 800b484:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b486:	7dbb      	ldrb	r3, [r7, #22]
 800b488:	2be5      	cmp	r3, #229	@ 0xe5
 800b48a:	d00e      	beq.n	800b4aa <dir_read+0x80>
 800b48c:	7dbb      	ldrb	r3, [r7, #22]
 800b48e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b490:	d00b      	beq.n	800b4aa <dir_read+0x80>
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	f023 0320 	bic.w	r3, r3, #32
 800b498:	2b08      	cmp	r3, #8
 800b49a:	bf0c      	ite	eq
 800b49c:	2301      	moveq	r3, #1
 800b49e:	2300      	movne	r3, #0
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d002      	beq.n	800b4b0 <dir_read+0x86>
				ord = 0xFF;
 800b4aa:	23ff      	movs	r3, #255	@ 0xff
 800b4ac:	757b      	strb	r3, [r7, #21]
 800b4ae:	e044      	b.n	800b53a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	2b0f      	cmp	r3, #15
 800b4b4:	d12f      	bne.n	800b516 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b4b6:	7dbb      	ldrb	r3, [r7, #22]
 800b4b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00d      	beq.n	800b4dc <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	7b5b      	ldrb	r3, [r3, #13]
 800b4c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b4c8:	7dbb      	ldrb	r3, [r7, #22]
 800b4ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4ce:	75bb      	strb	r3, [r7, #22]
 800b4d0:	7dbb      	ldrb	r3, [r7, #22]
 800b4d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	695a      	ldr	r2, [r3, #20]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b4dc:	7dba      	ldrb	r2, [r7, #22]
 800b4de:	7d7b      	ldrb	r3, [r7, #21]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d115      	bne.n	800b510 <dir_read+0xe6>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	330d      	adds	r3, #13
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	7d3a      	ldrb	r2, [r7, #20]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d10e      	bne.n	800b510 <dir_read+0xe6>
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	691a      	ldr	r2, [r3, #16]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7ff ff0f 	bl	800b320 <pick_lfn>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d003      	beq.n	800b510 <dir_read+0xe6>
 800b508:	7d7b      	ldrb	r3, [r7, #21]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	e000      	b.n	800b512 <dir_read+0xe8>
 800b510:	23ff      	movs	r3, #255	@ 0xff
 800b512:	757b      	strb	r3, [r7, #21]
 800b514:	e011      	b.n	800b53a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b516:	7d7b      	ldrb	r3, [r7, #21]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d109      	bne.n	800b530 <dir_read+0x106>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	4618      	mov	r0, r3
 800b522:	f7ff ff61 	bl	800b3e8 <sum_sfn>
 800b526:	4603      	mov	r3, r0
 800b528:	461a      	mov	r2, r3
 800b52a:	7d3b      	ldrb	r3, [r7, #20]
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d015      	beq.n	800b55c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f04f 32ff 	mov.w	r2, #4294967295
 800b536:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800b538:	e010      	b.n	800b55c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b53a:	2100      	movs	r1, #0
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fd89 	bl	800b054 <dir_next>
 800b542:	4603      	mov	r3, r0
 800b544:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d109      	bne.n	800b560 <dir_read+0x136>
	while (dp->sect) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	2b00      	cmp	r3, #0
 800b552:	f47f af79 	bne.w	800b448 <dir_read+0x1e>
 800b556:	e004      	b.n	800b562 <dir_read+0x138>
		if (res != FR_OK) break;
 800b558:	bf00      	nop
 800b55a:	e002      	b.n	800b562 <dir_read+0x138>
					break;
 800b55c:	bf00      	nop
 800b55e:	e000      	b.n	800b562 <dir_read+0x138>
		if (res != FR_OK) break;
 800b560:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <dir_read+0x144>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	61da      	str	r2, [r3, #28]
	return res;
 800b56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b586:	2100      	movs	r1, #0
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff fcda 	bl	800af42 <dir_sdi>
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b592:	7dfb      	ldrb	r3, [r7, #23]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <dir_find+0x24>
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	e0a9      	b.n	800b6f0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b59c:	23ff      	movs	r3, #255	@ 0xff
 800b59e:	753b      	strb	r3, [r7, #20]
 800b5a0:	7d3b      	ldrb	r3, [r7, #20]
 800b5a2:	757b      	strb	r3, [r7, #21]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5aa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	69db      	ldr	r3, [r3, #28]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6938      	ldr	r0, [r7, #16]
 800b5b4:	f7ff f9f4 	bl	800a9a0 <move_window>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	f040 8090 	bne.w	800b6e4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a1b      	ldr	r3, [r3, #32]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b5cc:	7dbb      	ldrb	r3, [r7, #22]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <dir_find+0x60>
 800b5d2:	2304      	movs	r3, #4
 800b5d4:	75fb      	strb	r3, [r7, #23]
 800b5d6:	e08a      	b.n	800b6ee <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a1b      	ldr	r3, [r3, #32]
 800b5dc:	330b      	adds	r3, #11
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5e4:	73fb      	strb	r3, [r7, #15]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b5ec:	7dbb      	ldrb	r3, [r7, #22]
 800b5ee:	2be5      	cmp	r3, #229	@ 0xe5
 800b5f0:	d007      	beq.n	800b602 <dir_find+0x8a>
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	f003 0308 	and.w	r3, r3, #8
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d009      	beq.n	800b610 <dir_find+0x98>
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	2b0f      	cmp	r3, #15
 800b600:	d006      	beq.n	800b610 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b602:	23ff      	movs	r3, #255	@ 0xff
 800b604:	757b      	strb	r3, [r7, #21]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f04f 32ff 	mov.w	r2, #4294967295
 800b60c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b60e:	e05e      	b.n	800b6ce <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b610:	7bfb      	ldrb	r3, [r7, #15]
 800b612:	2b0f      	cmp	r3, #15
 800b614:	d136      	bne.n	800b684 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b61c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d154      	bne.n	800b6ce <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b624:	7dbb      	ldrb	r3, [r7, #22]
 800b626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00d      	beq.n	800b64a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	7b5b      	ldrb	r3, [r3, #13]
 800b634:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b636:	7dbb      	ldrb	r3, [r7, #22]
 800b638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b63c:	75bb      	strb	r3, [r7, #22]
 800b63e:	7dbb      	ldrb	r3, [r7, #22]
 800b640:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	695a      	ldr	r2, [r3, #20]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b64a:	7dba      	ldrb	r2, [r7, #22]
 800b64c:	7d7b      	ldrb	r3, [r7, #21]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d115      	bne.n	800b67e <dir_find+0x106>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	330d      	adds	r3, #13
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	7d3a      	ldrb	r2, [r7, #20]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d10e      	bne.n	800b67e <dir_find+0x106>
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	691a      	ldr	r2, [r3, #16]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	4619      	mov	r1, r3
 800b66a:	4610      	mov	r0, r2
 800b66c:	f7ff fde8 	bl	800b240 <cmp_lfn>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <dir_find+0x106>
 800b676:	7d7b      	ldrb	r3, [r7, #21]
 800b678:	3b01      	subs	r3, #1
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	e000      	b.n	800b680 <dir_find+0x108>
 800b67e:	23ff      	movs	r3, #255	@ 0xff
 800b680:	757b      	strb	r3, [r7, #21]
 800b682:	e024      	b.n	800b6ce <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b684:	7d7b      	ldrb	r3, [r7, #21]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d109      	bne.n	800b69e <dir_find+0x126>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff feaa 	bl	800b3e8 <sum_sfn>
 800b694:	4603      	mov	r3, r0
 800b696:	461a      	mov	r2, r3
 800b698:	7d3b      	ldrb	r3, [r7, #20]
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d024      	beq.n	800b6e8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b6a4:	f003 0301 	and.w	r3, r3, #1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <dir_find+0x14a>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a18      	ldr	r0, [r3, #32]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3324      	adds	r3, #36	@ 0x24
 800b6b4:	220b      	movs	r2, #11
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	f7fe fffd 	bl	800a6b6 <mem_cmp>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d014      	beq.n	800b6ec <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b6c2:	23ff      	movs	r3, #255	@ 0xff
 800b6c4:	757b      	strb	r3, [r7, #21]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6cc:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7ff fcbf 	bl	800b054 <dir_next>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f43f af65 	beq.w	800b5ac <dir_find+0x34>
 800b6e2:	e004      	b.n	800b6ee <dir_find+0x176>
		if (res != FR_OK) break;
 800b6e4:	bf00      	nop
 800b6e6:	e002      	b.n	800b6ee <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b6e8:	bf00      	nop
 800b6ea:	e000      	b.n	800b6ee <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b6ec:	bf00      	nop

	return res;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2200      	movs	r2, #0
 800b70c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	69db      	ldr	r3, [r3, #28]
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 80ca 	beq.w	800b8ac <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b720:	d032      	beq.n	800b788 <get_fileinfo+0x90>
			i = j = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	61bb      	str	r3, [r7, #24]
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b72a:	e01b      	b.n	800b764 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b72c:	89fb      	ldrh	r3, [r7, #14]
 800b72e:	2100      	movs	r1, #0
 800b730:	4618      	mov	r0, r3
 800b732:	f000 ffbb 	bl	800c6ac <ff_convert>
 800b736:	4603      	mov	r3, r0
 800b738:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b73a:	89fb      	ldrh	r3, [r7, #14]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d102      	bne.n	800b746 <get_fileinfo+0x4e>
 800b740:	2300      	movs	r3, #0
 800b742:	61fb      	str	r3, [r7, #28]
 800b744:	e01a      	b.n	800b77c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	2bfe      	cmp	r3, #254	@ 0xfe
 800b74a:	d902      	bls.n	800b752 <get_fileinfo+0x5a>
 800b74c:	2300      	movs	r3, #0
 800b74e:	61fb      	str	r3, [r7, #28]
 800b750:	e014      	b.n	800b77c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	1c5a      	adds	r2, r3, #1
 800b756:	61fa      	str	r2, [r7, #28]
 800b758:	89fa      	ldrh	r2, [r7, #14]
 800b75a:	b2d1      	uxtb	r1, r2
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	4413      	add	r3, r2
 800b760:	460a      	mov	r2, r1
 800b762:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	691a      	ldr	r2, [r3, #16]
 800b768:	69bb      	ldr	r3, [r7, #24]
 800b76a:	1c59      	adds	r1, r3, #1
 800b76c:	61b9      	str	r1, [r7, #24]
 800b76e:	005b      	lsls	r3, r3, #1
 800b770:	4413      	add	r3, r2
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	81fb      	strh	r3, [r7, #14]
 800b776:	89fb      	ldrh	r3, [r7, #14]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1d7      	bne.n	800b72c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	4413      	add	r3, r2
 800b782:	3316      	adds	r3, #22
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	61bb      	str	r3, [r7, #24]
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	4413      	add	r3, r2
 800b796:	3316      	adds	r3, #22
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b79c:	e04d      	b.n	800b83a <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1a      	ldr	r2, [r3, #32]
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	1c59      	adds	r1, r3, #1
 800b7a6:	61f9      	str	r1, [r7, #28]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	2b20      	cmp	r3, #32
 800b7b2:	d041      	beq.n	800b838 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b7b4:	7dfb      	ldrb	r3, [r7, #23]
 800b7b6:	2b05      	cmp	r3, #5
 800b7b8:	d101      	bne.n	800b7be <get_fileinfo+0xc6>
 800b7ba:	23e5      	movs	r3, #229	@ 0xe5
 800b7bc:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	2b09      	cmp	r3, #9
 800b7c2:	d10f      	bne.n	800b7e4 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800b7c4:	89bb      	ldrh	r3, [r7, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d105      	bne.n	800b7d6 <get_fileinfo+0xde>
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	3316      	adds	r3, #22
 800b7d2:	222e      	movs	r2, #46	@ 0x2e
 800b7d4:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	61ba      	str	r2, [r7, #24]
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	4413      	add	r3, r2
 800b7e0:	222e      	movs	r2, #46	@ 0x2e
 800b7e2:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	3309      	adds	r3, #9
 800b7ec:	7dfa      	ldrb	r2, [r7, #23]
 800b7ee:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b7f0:	89bb      	ldrh	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d11c      	bne.n	800b830 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b7f6:	7dfb      	ldrb	r3, [r7, #23]
 800b7f8:	2b40      	cmp	r3, #64	@ 0x40
 800b7fa:	d913      	bls.n	800b824 <get_fileinfo+0x12c>
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b5a      	cmp	r3, #90	@ 0x5a
 800b800:	d810      	bhi.n	800b824 <get_fileinfo+0x12c>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	330c      	adds	r3, #12
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	461a      	mov	r2, r3
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	2b08      	cmp	r3, #8
 800b810:	d901      	bls.n	800b816 <get_fileinfo+0x11e>
 800b812:	2310      	movs	r3, #16
 800b814:	e000      	b.n	800b818 <get_fileinfo+0x120>
 800b816:	2308      	movs	r3, #8
 800b818:	4013      	ands	r3, r2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d002      	beq.n	800b824 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800b81e:	7dfb      	ldrb	r3, [r7, #23]
 800b820:	3320      	adds	r3, #32
 800b822:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	4413      	add	r3, r2
 800b82a:	3316      	adds	r3, #22
 800b82c:	7dfa      	ldrb	r2, [r7, #23]
 800b82e:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	3301      	adds	r3, #1
 800b834:	61bb      	str	r3, [r7, #24]
 800b836:	e000      	b.n	800b83a <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b838:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	2b0a      	cmp	r3, #10
 800b83e:	d9ae      	bls.n	800b79e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b840:	89bb      	ldrh	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10d      	bne.n	800b862 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	4413      	add	r3, r2
 800b84c:	3316      	adds	r3, #22
 800b84e:	2200      	movs	r2, #0
 800b850:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	330c      	adds	r3, #12
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <get_fileinfo+0x16a>
 800b85e:	2300      	movs	r3, #0
 800b860:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	4413      	add	r3, r2
 800b868:	3309      	adds	r3, #9
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	7ada      	ldrb	r2, [r3, #11]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a1b      	ldr	r3, [r3, #32]
 800b87c:	331c      	adds	r3, #28
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fe94 	bl	800a5ac <ld_dword>
 800b884:	4602      	mov	r2, r0
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a1b      	ldr	r3, [r3, #32]
 800b88e:	3316      	adds	r3, #22
 800b890:	4618      	mov	r0, r3
 800b892:	f7fe fe8b 	bl	800a5ac <ld_dword>
 800b896:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	80da      	strh	r2, [r3, #6]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	0c1b      	lsrs	r3, r3, #16
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	809a      	strh	r2, [r3, #4]
 800b8aa:	e000      	b.n	800b8ae <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b8ac:	bf00      	nop
}
 800b8ae:	3720      	adds	r7, #32
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08a      	sub	sp, #40	@ 0x28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	613b      	str	r3, [r7, #16]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	60fb      	str	r3, [r7, #12]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	1c5a      	adds	r2, r3, #1
 800b8d8:	61ba      	str	r2, [r7, #24]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	4413      	add	r3, r2
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b8e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8e4:	2b1f      	cmp	r3, #31
 800b8e6:	d940      	bls.n	800b96a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b8e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8ea:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8ec:	d006      	beq.n	800b8fc <create_name+0x48>
 800b8ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b8f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b8f2:	d110      	bne.n	800b916 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b8f4:	e002      	b.n	800b8fc <create_name+0x48>
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	61bb      	str	r3, [r7, #24]
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	4413      	add	r3, r2
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	2b2f      	cmp	r3, #47	@ 0x2f
 800b906:	d0f6      	beq.n	800b8f6 <create_name+0x42>
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	4413      	add	r3, r2
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	2b5c      	cmp	r3, #92	@ 0x5c
 800b912:	d0f0      	beq.n	800b8f6 <create_name+0x42>
			break;
 800b914:	e02a      	b.n	800b96c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2bfe      	cmp	r3, #254	@ 0xfe
 800b91a:	d901      	bls.n	800b920 <create_name+0x6c>
 800b91c:	2306      	movs	r3, #6
 800b91e:	e17d      	b.n	800bc1c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b920:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b922:	b2db      	uxtb	r3, r3
 800b924:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b928:	2101      	movs	r1, #1
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 febe 	bl	800c6ac <ff_convert>
 800b930:	4603      	mov	r3, r0
 800b932:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b934:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <create_name+0x8a>
 800b93a:	2306      	movs	r3, #6
 800b93c:	e16e      	b.n	800bc1c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b93e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b940:	2b7f      	cmp	r3, #127	@ 0x7f
 800b942:	d809      	bhi.n	800b958 <create_name+0xa4>
 800b944:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b946:	4619      	mov	r1, r3
 800b948:	488d      	ldr	r0, [pc, #564]	@ (800bb80 <create_name+0x2cc>)
 800b94a:	f7fe fedb 	bl	800a704 <chk_chr>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <create_name+0xa4>
 800b954:	2306      	movs	r3, #6
 800b956:	e161      	b.n	800bc1c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	617a      	str	r2, [r7, #20]
 800b95e:	005b      	lsls	r3, r3, #1
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	4413      	add	r3, r2
 800b964:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b966:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b968:	e7b4      	b.n	800b8d4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b96a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	441a      	add	r2, r3
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b976:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b978:	2b1f      	cmp	r3, #31
 800b97a:	d801      	bhi.n	800b980 <create_name+0xcc>
 800b97c:	2304      	movs	r3, #4
 800b97e:	e000      	b.n	800b982 <create_name+0xce>
 800b980:	2300      	movs	r3, #0
 800b982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b986:	e011      	b.n	800b9ac <create_name+0xf8>
		w = lfn[di - 1];
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b98e:	3b01      	subs	r3, #1
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	4413      	add	r3, r2
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b99a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b99c:	2b20      	cmp	r3, #32
 800b99e:	d002      	beq.n	800b9a6 <create_name+0xf2>
 800b9a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9a4:	d106      	bne.n	800b9b4 <create_name+0x100>
		di--;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1ea      	bne.n	800b988 <create_name+0xd4>
 800b9b2:	e000      	b.n	800b9b6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b9b4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	005b      	lsls	r3, r3, #1
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	4413      	add	r3, r2
 800b9be:	2200      	movs	r2, #0
 800b9c0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <create_name+0x118>
 800b9c8:	2306      	movs	r3, #6
 800b9ca:	e127      	b.n	800bc1c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3324      	adds	r3, #36	@ 0x24
 800b9d0:	220b      	movs	r2, #11
 800b9d2:	2120      	movs	r1, #32
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f7fe fe53 	bl	800a680 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b9da:	2300      	movs	r3, #0
 800b9dc:	61bb      	str	r3, [r7, #24]
 800b9de:	e002      	b.n	800b9e6 <create_name+0x132>
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	61bb      	str	r3, [r7, #24]
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	2b20      	cmp	r3, #32
 800b9f2:	d0f5      	beq.n	800b9e0 <create_name+0x12c>
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	005b      	lsls	r3, r3, #1
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	881b      	ldrh	r3, [r3, #0]
 800b9fe:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba00:	d0ee      	beq.n	800b9e0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d009      	beq.n	800ba1c <create_name+0x168>
 800ba08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba0c:	f043 0303 	orr.w	r3, r3, #3
 800ba10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ba14:	e002      	b.n	800ba1c <create_name+0x168>
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d009      	beq.n	800ba36 <create_name+0x182>
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	881b      	ldrh	r3, [r3, #0]
 800ba32:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba34:	d1ef      	bne.n	800ba16 <create_name+0x162>

	i = b = 0; ni = 8;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	623b      	str	r3, [r7, #32]
 800ba40:	2308      	movs	r3, #8
 800ba42:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ba44:	69bb      	ldr	r3, [r7, #24]
 800ba46:	1c5a      	adds	r2, r3, #1
 800ba48:	61ba      	str	r2, [r7, #24]
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	68fa      	ldr	r2, [r7, #12]
 800ba4e:	4413      	add	r3, r2
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ba54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8090 	beq.w	800bb7c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ba5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba5e:	2b20      	cmp	r3, #32
 800ba60:	d006      	beq.n	800ba70 <create_name+0x1bc>
 800ba62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba66:	d10a      	bne.n	800ba7e <create_name+0x1ca>
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d006      	beq.n	800ba7e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ba70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba74:	f043 0303 	orr.w	r3, r3, #3
 800ba78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ba7c:	e07d      	b.n	800bb7a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ba7e:	6a3a      	ldr	r2, [r7, #32]
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d203      	bcs.n	800ba8e <create_name+0x1da>
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d123      	bne.n	800bad6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	2b0b      	cmp	r3, #11
 800ba92:	d106      	bne.n	800baa2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ba94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba98:	f043 0303 	orr.w	r3, r3, #3
 800ba9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800baa0:	e075      	b.n	800bb8e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800baa2:	69ba      	ldr	r2, [r7, #24]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d005      	beq.n	800bab6 <create_name+0x202>
 800baaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800baae:	f043 0303 	orr.w	r3, r3, #3
 800bab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800bab6:	69ba      	ldr	r2, [r7, #24]
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	429a      	cmp	r2, r3
 800babc:	d866      	bhi.n	800bb8c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	61bb      	str	r3, [r7, #24]
 800bac2:	2308      	movs	r3, #8
 800bac4:	623b      	str	r3, [r7, #32]
 800bac6:	230b      	movs	r3, #11
 800bac8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800baca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bad4:	e051      	b.n	800bb7a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bad8:	2b7f      	cmp	r3, #127	@ 0x7f
 800bada:	d914      	bls.n	800bb06 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800badc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bade:	2100      	movs	r1, #0
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fde3 	bl	800c6ac <ff_convert>
 800bae6:	4603      	mov	r3, r0
 800bae8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800baea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800baec:	2b00      	cmp	r3, #0
 800baee:	d004      	beq.n	800bafa <create_name+0x246>
 800baf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800baf2:	3b80      	subs	r3, #128	@ 0x80
 800baf4:	4a23      	ldr	r2, [pc, #140]	@ (800bb84 <create_name+0x2d0>)
 800baf6:	5cd3      	ldrb	r3, [r2, r3]
 800baf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bafa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bafe:	f043 0302 	orr.w	r3, r3, #2
 800bb02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bb06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d007      	beq.n	800bb1c <create_name+0x268>
 800bb0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb0e:	4619      	mov	r1, r3
 800bb10:	481d      	ldr	r0, [pc, #116]	@ (800bb88 <create_name+0x2d4>)
 800bb12:	f7fe fdf7 	bl	800a704 <chk_chr>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d008      	beq.n	800bb2e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bb1c:	235f      	movs	r3, #95	@ 0x5f
 800bb1e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bb20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb24:	f043 0303 	orr.w	r3, r3, #3
 800bb28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb2c:	e01b      	b.n	800bb66 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bb2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb30:	2b40      	cmp	r3, #64	@ 0x40
 800bb32:	d909      	bls.n	800bb48 <create_name+0x294>
 800bb34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb36:	2b5a      	cmp	r3, #90	@ 0x5a
 800bb38:	d806      	bhi.n	800bb48 <create_name+0x294>
					b |= 2;
 800bb3a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb3e:	f043 0302 	orr.w	r3, r3, #2
 800bb42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bb46:	e00e      	b.n	800bb66 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bb48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb4a:	2b60      	cmp	r3, #96	@ 0x60
 800bb4c:	d90b      	bls.n	800bb66 <create_name+0x2b2>
 800bb4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb50:	2b7a      	cmp	r3, #122	@ 0x7a
 800bb52:	d808      	bhi.n	800bb66 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bb54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bb58:	f043 0301 	orr.w	r3, r3, #1
 800bb5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bb60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb62:	3b20      	subs	r3, #32
 800bb64:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	623a      	str	r2, [r7, #32]
 800bb6c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bb6e:	b2d1      	uxtb	r1, r2
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	4413      	add	r3, r2
 800bb74:	460a      	mov	r2, r1
 800bb76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bb7a:	e763      	b.n	800ba44 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bb7c:	bf00      	nop
 800bb7e:	e006      	b.n	800bb8e <create_name+0x2da>
 800bb80:	0800de30 	.word	0x0800de30
 800bb84:	0800e618 	.word	0x0800e618
 800bb88:	0800de3c 	.word	0x0800de3c
			if (si > di) break;			/* No extension */
 800bb8c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bb94:	2be5      	cmp	r3, #229	@ 0xe5
 800bb96:	d103      	bne.n	800bba0 <create_name+0x2ec>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2205      	movs	r2, #5
 800bb9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	2b08      	cmp	r3, #8
 800bba4:	d104      	bne.n	800bbb0 <create_name+0x2fc>
 800bba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bbb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbb4:	f003 030c 	and.w	r3, r3, #12
 800bbb8:	2b0c      	cmp	r3, #12
 800bbba:	d005      	beq.n	800bbc8 <create_name+0x314>
 800bbbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbc0:	f003 0303 	and.w	r3, r3, #3
 800bbc4:	2b03      	cmp	r3, #3
 800bbc6:	d105      	bne.n	800bbd4 <create_name+0x320>
 800bbc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbcc:	f043 0302 	orr.w	r3, r3, #2
 800bbd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d117      	bne.n	800bc10 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bbe0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d105      	bne.n	800bbf8 <create_name+0x344>
 800bbec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbf0:	f043 0310 	orr.w	r3, r3, #16
 800bbf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bbf8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbfc:	f003 030c 	and.w	r3, r3, #12
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	d105      	bne.n	800bc10 <create_name+0x35c>
 800bc04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc08:	f043 0308 	orr.w	r3, r3, #8
 800bc0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bc16:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800bc1a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3728      	adds	r7, #40	@ 0x28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bc38:	e002      	b.n	800bc40 <follow_path+0x1c>
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	603b      	str	r3, [r7, #0]
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc46:	d0f8      	beq.n	800bc3a <follow_path+0x16>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc4e:	d0f4      	beq.n	800bc3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	2200      	movs	r2, #0
 800bc54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b1f      	cmp	r3, #31
 800bc5c:	d80a      	bhi.n	800bc74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2280      	movs	r2, #128	@ 0x80
 800bc62:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bc66:	2100      	movs	r1, #0
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff f96a 	bl	800af42 <dir_sdi>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	75fb      	strb	r3, [r7, #23]
 800bc72:	e048      	b.n	800bd06 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc74:	463b      	mov	r3, r7
 800bc76:	4619      	mov	r1, r3
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff fe1b 	bl	800b8b4 <create_name>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d139      	bne.n	800bcfc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7ff fc75 	bl	800b578 <dir_find>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bc98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d00a      	beq.n	800bcb6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	2b04      	cmp	r3, #4
 800bca4:	d12c      	bne.n	800bd00 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bca6:	7afb      	ldrb	r3, [r7, #11]
 800bca8:	f003 0304 	and.w	r3, r3, #4
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d127      	bne.n	800bd00 <follow_path+0xdc>
 800bcb0:	2305      	movs	r3, #5
 800bcb2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bcb4:	e024      	b.n	800bd00 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	f003 0304 	and.w	r3, r3, #4
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d121      	bne.n	800bd04 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	799b      	ldrb	r3, [r3, #6]
 800bcc4:	f003 0310 	and.w	r3, r3, #16
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d102      	bne.n	800bcd2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bccc:	2305      	movs	r3, #5
 800bcce:	75fb      	strb	r3, [r7, #23]
 800bcd0:	e019      	b.n	800bd06 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	8992      	ldrh	r2, [r2, #12]
 800bce0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bce4:	fb00 f202 	mul.w	r2, r0, r2
 800bce8:	1a9b      	subs	r3, r3, r2
 800bcea:	440b      	add	r3, r1
 800bcec:	4619      	mov	r1, r3
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff fa86 	bl	800b200 <ld_clust>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bcfa:	e7bb      	b.n	800bc74 <follow_path+0x50>
			if (res != FR_OK) break;
 800bcfc:	bf00      	nop
 800bcfe:	e002      	b.n	800bd06 <follow_path+0xe2>
				break;
 800bd00:	bf00      	nop
 800bd02:	e000      	b.n	800bd06 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bd04:	bf00      	nop
			}
		}
	}

	return res;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3718      	adds	r7, #24
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b087      	sub	sp, #28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d031      	beq.n	800bd8a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	617b      	str	r3, [r7, #20]
 800bd2c:	e002      	b.n	800bd34 <get_ldnumber+0x24>
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	3301      	adds	r3, #1
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	2b1f      	cmp	r3, #31
 800bd3a:	d903      	bls.n	800bd44 <get_ldnumber+0x34>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd42:	d1f4      	bne.n	800bd2e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	2b3a      	cmp	r3, #58	@ 0x3a
 800bd4a:	d11c      	bne.n	800bd86 <get_ldnumber+0x76>
			tp = *path;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	1c5a      	adds	r2, r3, #1
 800bd56:	60fa      	str	r2, [r7, #12]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	3b30      	subs	r3, #48	@ 0x30
 800bd5c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b09      	cmp	r3, #9
 800bd62:	d80e      	bhi.n	800bd82 <get_ldnumber+0x72>
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d10a      	bne.n	800bd82 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d107      	bne.n	800bd82 <get_ldnumber+0x72>
					vol = (int)i;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	617b      	str	r3, [r7, #20]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	e002      	b.n	800bd8c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bd86:	2300      	movs	r3, #0
 800bd88:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bd8a:	693b      	ldr	r3, [r7, #16]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	371c      	adds	r7, #28
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	70da      	strb	r2, [r3, #3]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bdae:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7fe fdf4 	bl	800a9a0 <move_window>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d001      	beq.n	800bdc2 <check_fs+0x2a>
 800bdbe:	2304      	movs	r3, #4
 800bdc0:	e038      	b.n	800be34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	3338      	adds	r3, #56	@ 0x38
 800bdc6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fbd6 	bl	800a57c <ld_word>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d001      	beq.n	800bde0 <check_fs+0x48>
 800bddc:	2303      	movs	r3, #3
 800bdde:	e029      	b.n	800be34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bde6:	2be9      	cmp	r3, #233	@ 0xe9
 800bde8:	d009      	beq.n	800bdfe <check_fs+0x66>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bdf0:	2beb      	cmp	r3, #235	@ 0xeb
 800bdf2:	d11e      	bne.n	800be32 <check_fs+0x9a>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800bdfa:	2b90      	cmp	r3, #144	@ 0x90
 800bdfc:	d119      	bne.n	800be32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3338      	adds	r3, #56	@ 0x38
 800be02:	3336      	adds	r3, #54	@ 0x36
 800be04:	4618      	mov	r0, r3
 800be06:	f7fe fbd1 	bl	800a5ac <ld_dword>
 800be0a:	4603      	mov	r3, r0
 800be0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800be10:	4a0a      	ldr	r2, [pc, #40]	@ (800be3c <check_fs+0xa4>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d101      	bne.n	800be1a <check_fs+0x82>
 800be16:	2300      	movs	r3, #0
 800be18:	e00c      	b.n	800be34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	3338      	adds	r3, #56	@ 0x38
 800be1e:	3352      	adds	r3, #82	@ 0x52
 800be20:	4618      	mov	r0, r3
 800be22:	f7fe fbc3 	bl	800a5ac <ld_dword>
 800be26:	4603      	mov	r3, r0
 800be28:	4a05      	ldr	r2, [pc, #20]	@ (800be40 <check_fs+0xa8>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d101      	bne.n	800be32 <check_fs+0x9a>
 800be2e:	2300      	movs	r3, #0
 800be30:	e000      	b.n	800be34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800be32:	2302      	movs	r3, #2
}
 800be34:	4618      	mov	r0, r3
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	00544146 	.word	0x00544146
 800be40:	33544146 	.word	0x33544146

0800be44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b096      	sub	sp, #88	@ 0x58
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	4613      	mov	r3, r2
 800be50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2200      	movs	r2, #0
 800be56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f7ff ff59 	bl	800bd10 <get_ldnumber>
 800be5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800be60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be62:	2b00      	cmp	r3, #0
 800be64:	da01      	bge.n	800be6a <find_volume+0x26>
 800be66:	230b      	movs	r3, #11
 800be68:	e265      	b.n	800c336 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800be6a:	4a9f      	ldr	r2, [pc, #636]	@ (800c0e8 <find_volume+0x2a4>)
 800be6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be72:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800be74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be76:	2b00      	cmp	r3, #0
 800be78:	d101      	bne.n	800be7e <find_volume+0x3a>
 800be7a:	230c      	movs	r3, #12
 800be7c:	e25b      	b.n	800c336 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	f023 0301 	bic.w	r3, r3, #1
 800be8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d01a      	beq.n	800beca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800be94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be96:	785b      	ldrb	r3, [r3, #1]
 800be98:	4618      	mov	r0, r3
 800be9a:	f7fe facf 	bl	800a43c <disk_status>
 800be9e:	4603      	mov	r3, r0
 800bea0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bea4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10c      	bne.n	800beca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800beb0:	79fb      	ldrb	r3, [r7, #7]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d007      	beq.n	800bec6 <find_volume+0x82>
 800beb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800beba:	f003 0304 	and.w	r3, r3, #4
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bec2:	230a      	movs	r3, #10
 800bec4:	e237      	b.n	800c336 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800bec6:	2300      	movs	r3, #0
 800bec8:	e235      	b.n	800c336 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800beca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800becc:	2200      	movs	r2, #0
 800bece:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beda:	785b      	ldrb	r3, [r3, #1]
 800bedc:	4618      	mov	r0, r3
 800bede:	f7fe fac7 	bl	800a470 <disk_initialize>
 800bee2:	4603      	mov	r3, r0
 800bee4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bee8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bef4:	2303      	movs	r3, #3
 800bef6:	e21e      	b.n	800c336 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d007      	beq.n	800bf0e <find_volume+0xca>
 800befe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bf02:	f003 0304 	and.w	r3, r3, #4
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d001      	beq.n	800bf0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bf0a:	230a      	movs	r3, #10
 800bf0c:	e213      	b.n	800c336 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	7858      	ldrb	r0, [r3, #1]
 800bf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf14:	330c      	adds	r3, #12
 800bf16:	461a      	mov	r2, r3
 800bf18:	2102      	movs	r1, #2
 800bf1a:	f7fe fb11 	bl	800a540 <disk_ioctl>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d001      	beq.n	800bf28 <find_volume+0xe4>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e206      	b.n	800c336 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2a:	899b      	ldrh	r3, [r3, #12]
 800bf2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf30:	d80d      	bhi.n	800bf4e <find_volume+0x10a>
 800bf32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf34:	899b      	ldrh	r3, [r3, #12]
 800bf36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf3a:	d308      	bcc.n	800bf4e <find_volume+0x10a>
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3e:	899b      	ldrh	r3, [r3, #12]
 800bf40:	461a      	mov	r2, r3
 800bf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf44:	899b      	ldrh	r3, [r3, #12]
 800bf46:	3b01      	subs	r3, #1
 800bf48:	4013      	ands	r3, r2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <find_volume+0x10e>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e1f1      	b.n	800c336 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bf56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bf58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bf5a:	f7ff ff1d 	bl	800bd98 <check_fs>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bf64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf68:	2b02      	cmp	r3, #2
 800bf6a:	d149      	bne.n	800c000 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf70:	e01e      	b.n	800bfb0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bf72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf74:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800bf78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bf80:	4413      	add	r3, r2
 800bf82:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf86:	3304      	adds	r3, #4
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d006      	beq.n	800bf9c <find_volume+0x158>
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf90:	3308      	adds	r3, #8
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fe fb0a 	bl	800a5ac <ld_dword>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	e000      	b.n	800bf9e <find_volume+0x15a>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	3358      	adds	r3, #88	@ 0x58
 800bfa4:	443b      	add	r3, r7
 800bfa6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bfaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfac:	3301      	adds	r3, #1
 800bfae:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d9dd      	bls.n	800bf72 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bfba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <find_volume+0x182>
 800bfc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bfc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	3358      	adds	r3, #88	@ 0x58
 800bfcc:	443b      	add	r3, r7
 800bfce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bfd2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bfd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d005      	beq.n	800bfe6 <find_volume+0x1a2>
 800bfda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bfdc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bfde:	f7ff fedb 	bl	800bd98 <check_fs>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	e000      	b.n	800bfe8 <find_volume+0x1a4>
 800bfe6:	2303      	movs	r3, #3
 800bfe8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bfec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d905      	bls.n	800c000 <find_volume+0x1bc>
 800bff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bff6:	3301      	adds	r3, #1
 800bff8:	643b      	str	r3, [r7, #64]	@ 0x40
 800bffa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	d9e2      	bls.n	800bfc6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c000:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c004:	2b04      	cmp	r3, #4
 800c006:	d101      	bne.n	800c00c <find_volume+0x1c8>
 800c008:	2301      	movs	r3, #1
 800c00a:	e194      	b.n	800c336 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c00c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c010:	2b01      	cmp	r3, #1
 800c012:	d901      	bls.n	800c018 <find_volume+0x1d4>
 800c014:	230d      	movs	r3, #13
 800c016:	e18e      	b.n	800c336 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01a:	3338      	adds	r3, #56	@ 0x38
 800c01c:	330b      	adds	r3, #11
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe faac 	bl	800a57c <ld_word>
 800c024:	4603      	mov	r3, r0
 800c026:	461a      	mov	r2, r3
 800c028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02a:	899b      	ldrh	r3, [r3, #12]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d001      	beq.n	800c034 <find_volume+0x1f0>
 800c030:	230d      	movs	r3, #13
 800c032:	e180      	b.n	800c336 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c036:	3338      	adds	r3, #56	@ 0x38
 800c038:	3316      	adds	r3, #22
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fa9e 	bl	800a57c <ld_word>
 800c040:	4603      	mov	r3, r0
 800c042:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d106      	bne.n	800c058 <find_volume+0x214>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c04c:	3338      	adds	r3, #56	@ 0x38
 800c04e:	3324      	adds	r3, #36	@ 0x24
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe faab 	bl	800a5ac <ld_dword>
 800c056:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c05a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c05c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c060:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c066:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06a:	789b      	ldrb	r3, [r3, #2]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d005      	beq.n	800c07c <find_volume+0x238>
 800c070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c072:	789b      	ldrb	r3, [r3, #2]
 800c074:	2b02      	cmp	r3, #2
 800c076:	d001      	beq.n	800c07c <find_volume+0x238>
 800c078:	230d      	movs	r3, #13
 800c07a:	e15c      	b.n	800c336 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c07e:	789b      	ldrb	r3, [r3, #2]
 800c080:	461a      	mov	r2, r3
 800c082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c084:	fb02 f303 	mul.w	r3, r2, r3
 800c088:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c08c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c090:	461a      	mov	r2, r3
 800c092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c094:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c098:	895b      	ldrh	r3, [r3, #10]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d008      	beq.n	800c0b0 <find_volume+0x26c>
 800c09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a0:	895b      	ldrh	r3, [r3, #10]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0a6:	895b      	ldrh	r3, [r3, #10]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d001      	beq.n	800c0b4 <find_volume+0x270>
 800c0b0:	230d      	movs	r3, #13
 800c0b2:	e140      	b.n	800c336 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b6:	3338      	adds	r3, #56	@ 0x38
 800c0b8:	3311      	adds	r3, #17
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fe fa5e 	bl	800a57c <ld_word>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ca:	891b      	ldrh	r3, [r3, #8]
 800c0cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ce:	8992      	ldrh	r2, [r2, #12]
 800c0d0:	0952      	lsrs	r2, r2, #5
 800c0d2:	b292      	uxth	r2, r2
 800c0d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0d8:	fb01 f202 	mul.w	r2, r1, r2
 800c0dc:	1a9b      	subs	r3, r3, r2
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d003      	beq.n	800c0ec <find_volume+0x2a8>
 800c0e4:	230d      	movs	r3, #13
 800c0e6:	e126      	b.n	800c336 <find_volume+0x4f2>
 800c0e8:	200114f8 	.word	0x200114f8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0ee:	3338      	adds	r3, #56	@ 0x38
 800c0f0:	3313      	adds	r3, #19
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fe fa42 	bl	800a57c <ld_word>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c0fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <find_volume+0x2cc>
 800c102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c104:	3338      	adds	r3, #56	@ 0x38
 800c106:	3320      	adds	r3, #32
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fa4f 	bl	800a5ac <ld_dword>
 800c10e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c112:	3338      	adds	r3, #56	@ 0x38
 800c114:	330e      	adds	r3, #14
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fa30 	bl	800a57c <ld_word>
 800c11c:	4603      	mov	r3, r0
 800c11e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c120:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <find_volume+0x2e6>
 800c126:	230d      	movs	r3, #13
 800c128:	e105      	b.n	800c336 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c12a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c12c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c12e:	4413      	add	r3, r2
 800c130:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c132:	8911      	ldrh	r1, [r2, #8]
 800c134:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c136:	8992      	ldrh	r2, [r2, #12]
 800c138:	0952      	lsrs	r2, r2, #5
 800c13a:	b292      	uxth	r2, r2
 800c13c:	fbb1 f2f2 	udiv	r2, r1, r2
 800c140:	b292      	uxth	r2, r2
 800c142:	4413      	add	r3, r2
 800c144:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d201      	bcs.n	800c152 <find_volume+0x30e>
 800c14e:	230d      	movs	r3, #13
 800c150:	e0f1      	b.n	800c336 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c152:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c15a:	8952      	ldrh	r2, [r2, #10]
 800c15c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c160:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <find_volume+0x328>
 800c168:	230d      	movs	r3, #13
 800c16a:	e0e4      	b.n	800c336 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c16c:	2303      	movs	r3, #3
 800c16e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c174:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c178:	4293      	cmp	r3, r2
 800c17a:	d802      	bhi.n	800c182 <find_volume+0x33e>
 800c17c:	2302      	movs	r3, #2
 800c17e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c184:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c188:	4293      	cmp	r3, r2
 800c18a:	d802      	bhi.n	800c192 <find_volume+0x34e>
 800c18c:	2301      	movs	r3, #1
 800c18e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c194:	1c9a      	adds	r2, r3, #2
 800c196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c198:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c19e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c1a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1a4:	441a      	add	r2, r3
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c1aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ae:	441a      	add	r2, r3
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c1b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d11e      	bne.n	800c1fa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1be:	3338      	adds	r3, #56	@ 0x38
 800c1c0:	332a      	adds	r3, #42	@ 0x2a
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fe f9da 	bl	800a57c <ld_word>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <find_volume+0x38e>
 800c1ce:	230d      	movs	r3, #13
 800c1d0:	e0b1      	b.n	800c336 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d4:	891b      	ldrh	r3, [r3, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <find_volume+0x39a>
 800c1da:	230d      	movs	r3, #13
 800c1dc:	e0ab      	b.n	800c336 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e0:	3338      	adds	r3, #56	@ 0x38
 800c1e2:	332c      	adds	r3, #44	@ 0x2c
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7fe f9e1 	bl	800a5ac <ld_dword>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ee:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f2:	69db      	ldr	r3, [r3, #28]
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1f8:	e01f      	b.n	800c23a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fc:	891b      	ldrh	r3, [r3, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <find_volume+0x3c2>
 800c202:	230d      	movs	r3, #13
 800c204:	e097      	b.n	800c336 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c20a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c20c:	441a      	add	r2, r3
 800c20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c210:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c212:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c216:	2b02      	cmp	r3, #2
 800c218:	d103      	bne.n	800c222 <find_volume+0x3de>
 800c21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	e00a      	b.n	800c238 <find_volume+0x3f4>
 800c222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c224:	69da      	ldr	r2, [r3, #28]
 800c226:	4613      	mov	r3, r2
 800c228:	005b      	lsls	r3, r3, #1
 800c22a:	4413      	add	r3, r2
 800c22c:	085a      	lsrs	r2, r3, #1
 800c22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c230:	69db      	ldr	r3, [r3, #28]
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c238:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c23c:	6a1a      	ldr	r2, [r3, #32]
 800c23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c240:	899b      	ldrh	r3, [r3, #12]
 800c242:	4619      	mov	r1, r3
 800c244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c246:	440b      	add	r3, r1
 800c248:	3b01      	subs	r3, #1
 800c24a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c24c:	8989      	ldrh	r1, [r1, #12]
 800c24e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c252:	429a      	cmp	r2, r3
 800c254:	d201      	bcs.n	800c25a <find_volume+0x416>
 800c256:	230d      	movs	r3, #13
 800c258:	e06d      	b.n	800c336 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25c:	f04f 32ff 	mov.w	r2, #4294967295
 800c260:	619a      	str	r2, [r3, #24]
 800c262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c264:	699a      	ldr	r2, [r3, #24]
 800c266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c268:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	2280      	movs	r2, #128	@ 0x80
 800c26e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c270:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c274:	2b03      	cmp	r3, #3
 800c276:	d149      	bne.n	800c30c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27a:	3338      	adds	r3, #56	@ 0x38
 800c27c:	3330      	adds	r3, #48	@ 0x30
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fe f97c 	bl	800a57c <ld_word>
 800c284:	4603      	mov	r3, r0
 800c286:	2b01      	cmp	r3, #1
 800c288:	d140      	bne.n	800c30c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c28a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c28c:	3301      	adds	r3, #1
 800c28e:	4619      	mov	r1, r3
 800c290:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c292:	f7fe fb85 	bl	800a9a0 <move_window>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d137      	bne.n	800c30c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29e:	2200      	movs	r2, #0
 800c2a0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a4:	3338      	adds	r3, #56	@ 0x38
 800c2a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fe f966 	bl	800a57c <ld_word>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d127      	bne.n	800c30c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2be:	3338      	adds	r3, #56	@ 0x38
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7fe f973 	bl	800a5ac <ld_dword>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c340 <find_volume+0x4fc>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d11e      	bne.n	800c30c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d0:	3338      	adds	r3, #56	@ 0x38
 800c2d2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe f968 	bl	800a5ac <ld_dword>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	4a19      	ldr	r2, [pc, #100]	@ (800c344 <find_volume+0x500>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d113      	bne.n	800c30c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e6:	3338      	adds	r3, #56	@ 0x38
 800c2e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe f95d 	bl	800a5ac <ld_dword>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fa:	3338      	adds	r3, #56	@ 0x38
 800c2fc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c300:	4618      	mov	r0, r3
 800c302:	f7fe f953 	bl	800a5ac <ld_dword>
 800c306:	4602      	mov	r2, r0
 800c308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c312:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c314:	4b0c      	ldr	r3, [pc, #48]	@ (800c348 <find_volume+0x504>)
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	3301      	adds	r3, #1
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	4b0a      	ldr	r3, [pc, #40]	@ (800c348 <find_volume+0x504>)
 800c31e:	801a      	strh	r2, [r3, #0]
 800c320:	4b09      	ldr	r3, [pc, #36]	@ (800c348 <find_volume+0x504>)
 800c322:	881a      	ldrh	r2, [r3, #0]
 800c324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c326:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32a:	4a08      	ldr	r2, [pc, #32]	@ (800c34c <find_volume+0x508>)
 800c32c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c32e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c330:	f7fe face 	bl	800a8d0 <clear_lock>
#endif
	return FR_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3758      	adds	r7, #88	@ 0x58
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	41615252 	.word	0x41615252
 800c344:	61417272 	.word	0x61417272
 800c348:	200114fc 	.word	0x200114fc
 800c34c:	20011520 	.word	0x20011520

0800c350 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c35a:	2309      	movs	r3, #9
 800c35c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d01c      	beq.n	800c39e <validate+0x4e>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d018      	beq.n	800c39e <validate+0x4e>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d013      	beq.n	800c39e <validate+0x4e>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	889a      	ldrh	r2, [r3, #4]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	88db      	ldrh	r3, [r3, #6]
 800c380:	429a      	cmp	r2, r3
 800c382:	d10c      	bne.n	800c39e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	785b      	ldrb	r3, [r3, #1]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fe f856 	bl	800a43c <disk_status>
 800c390:	4603      	mov	r3, r0
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d101      	bne.n	800c39e <validate+0x4e>
			res = FR_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d102      	bne.n	800c3aa <validate+0x5a>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	e000      	b.n	800c3ac <validate+0x5c>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	683a      	ldr	r2, [r7, #0]
 800c3ae:	6013      	str	r3, [r2, #0]
	return res;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c3ce:	f107 0310 	add.w	r3, r7, #16
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff fc9c 	bl	800bd10 <get_ldnumber>
 800c3d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	da01      	bge.n	800c3e4 <f_mount+0x28>
 800c3e0:	230b      	movs	r3, #11
 800c3e2:	e02b      	b.n	800c43c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c3e4:	4a17      	ldr	r2, [pc, #92]	@ (800c444 <f_mount+0x88>)
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d005      	beq.n	800c400 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c3f4:	69b8      	ldr	r0, [r7, #24]
 800c3f6:	f7fe fa6b 	bl	800a8d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2200      	movs	r2, #0
 800c40a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	490d      	ldr	r1, [pc, #52]	@ (800c444 <f_mount+0x88>)
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <f_mount+0x66>
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d001      	beq.n	800c426 <f_mount+0x6a>
 800c422:	2300      	movs	r3, #0
 800c424:	e00a      	b.n	800c43c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c426:	f107 010c 	add.w	r1, r7, #12
 800c42a:	f107 0308 	add.w	r3, r7, #8
 800c42e:	2200      	movs	r2, #0
 800c430:	4618      	mov	r0, r3
 800c432:	f7ff fd07 	bl	800be44 <find_volume>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3720      	adds	r7, #32
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	200114f8 	.word	0x200114f8

0800c448 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d101      	bne.n	800c45c <f_opendir+0x14>
 800c458:	2309      	movs	r3, #9
 800c45a:	e064      	b.n	800c526 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c460:	f107 010c 	add.w	r1, r7, #12
 800c464:	463b      	mov	r3, r7
 800c466:	2200      	movs	r2, #0
 800c468:	4618      	mov	r0, r3
 800c46a:	f7ff fceb 	bl	800be44 <find_volume>
 800c46e:	4603      	mov	r3, r0
 800c470:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c472:	7dfb      	ldrb	r3, [r7, #23]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d14f      	bne.n	800c518 <f_opendir+0xd0>
		obj->fs = fs;
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff fbce 	bl	800bc24 <follow_path>
 800c488:	4603      	mov	r3, r0
 800c48a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d13d      	bne.n	800c50e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c498:	b25b      	sxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	db12      	blt.n	800c4c4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	799b      	ldrb	r3, [r3, #6]
 800c4a2:	f003 0310 	and.w	r3, r3, #16
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00a      	beq.n	800c4c0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6a1b      	ldr	r3, [r3, #32]
 800c4b0:	4619      	mov	r1, r3
 800c4b2:	4610      	mov	r0, r2
 800c4b4:	f7fe fea4 	bl	800b200 <ld_clust>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	609a      	str	r2, [r3, #8]
 800c4be:	e001      	b.n	800c4c4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c4c0:	2305      	movs	r3, #5
 800c4c2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d121      	bne.n	800c50e <f_opendir+0xc6>
				obj->id = fs->id;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	88da      	ldrh	r2, [r3, #6]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7fe fd34 	bl	800af42 <dir_sdi>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d114      	bne.n	800c50e <f_opendir+0xc6>
					if (obj->sclust) {
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00d      	beq.n	800c508 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c4ec:	2100      	movs	r1, #0
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7fe f924 	bl	800a73c <inc_lock>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d105      	bne.n	800c50e <f_opendir+0xc6>
 800c502:	2312      	movs	r3, #18
 800c504:	75fb      	strb	r3, [r7, #23]
 800c506:	e002      	b.n	800c50e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2200      	movs	r2, #0
 800c50c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c50e:	7dfb      	ldrb	r3, [r7, #23]
 800c510:	2b04      	cmp	r3, #4
 800c512:	d101      	bne.n	800c518 <f_opendir+0xd0>
 800c514:	2305      	movs	r3, #5
 800c516:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c518:	7dfb      	ldrb	r3, [r7, #23]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d002      	beq.n	800c524 <f_opendir+0xdc>
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2200      	movs	r2, #0
 800c522:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c524:	7dfb      	ldrb	r3, [r7, #23]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f107 0208 	add.w	r2, r7, #8
 800c53c:	4611      	mov	r1, r2
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff ff06 	bl	800c350 <validate>
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d110      	bne.n	800c570 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d006      	beq.n	800c564 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe f97c 	bl	800a858 <dec_lock>
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d102      	bne.n	800c570 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2200      	movs	r2, #0
 800c56e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c570:	7bfb      	ldrb	r3, [r7, #15]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f107 0208 	add.w	r2, r7, #8
 800c58a:	4611      	mov	r1, r2
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fedf 	bl	800c350 <validate>
 800c592:	4603      	mov	r3, r0
 800c594:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d126      	bne.n	800c5ea <f_readdir+0x70>
		if (!fno) {
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7fe fccc 	bl	800af42 <dir_sdi>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	73fb      	strb	r3, [r7, #15]
 800c5ae:	e01c      	b.n	800c5ea <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7fe ff39 	bl	800b42a <dir_read>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c5bc:	7bfb      	ldrb	r3, [r7, #15]
 800c5be:	2b04      	cmp	r3, #4
 800c5c0:	d101      	bne.n	800c5c6 <f_readdir+0x4c>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10e      	bne.n	800c5ea <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f7ff f892 	bl	800b6f8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c5d4:	2100      	movs	r1, #0
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7fe fd3c 	bl	800b054 <dir_next>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	d101      	bne.n	800c5ea <f_readdir+0x70>
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	4613      	mov	r3, r2
 800c600:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c602:	2301      	movs	r3, #1
 800c604:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c606:	2300      	movs	r3, #0
 800c608:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c60a:	4b1f      	ldr	r3, [pc, #124]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c60c:	7a5b      	ldrb	r3, [r3, #9]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d131      	bne.n	800c678 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c614:	4b1c      	ldr	r3, [pc, #112]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c616:	7a5b      	ldrb	r3, [r3, #9]
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	461a      	mov	r2, r3
 800c61c:	4b1a      	ldr	r3, [pc, #104]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c61e:	2100      	movs	r1, #0
 800c620:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c622:	4b19      	ldr	r3, [pc, #100]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c624:	7a5b      	ldrb	r3, [r3, #9]
 800c626:	b2db      	uxtb	r3, r3
 800c628:	4a17      	ldr	r2, [pc, #92]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	68fa      	ldr	r2, [r7, #12]
 800c630:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c632:	4b15      	ldr	r3, [pc, #84]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c634:	7a5b      	ldrb	r3, [r3, #9]
 800c636:	b2db      	uxtb	r3, r3
 800c638:	461a      	mov	r2, r3
 800c63a:	4b13      	ldr	r3, [pc, #76]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c63c:	4413      	add	r3, r2
 800c63e:	79fa      	ldrb	r2, [r7, #7]
 800c640:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c642:	4b11      	ldr	r3, [pc, #68]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c644:	7a5b      	ldrb	r3, [r3, #9]
 800c646:	b2db      	uxtb	r3, r3
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	b2d1      	uxtb	r1, r2
 800c64c:	4a0e      	ldr	r2, [pc, #56]	@ (800c688 <FATFS_LinkDriverEx+0x94>)
 800c64e:	7251      	strb	r1, [r2, #9]
 800c650:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c652:	7dbb      	ldrb	r3, [r7, #22]
 800c654:	3330      	adds	r3, #48	@ 0x30
 800c656:	b2da      	uxtb	r2, r3
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	3301      	adds	r3, #1
 800c660:	223a      	movs	r2, #58	@ 0x3a
 800c662:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	3302      	adds	r3, #2
 800c668:	222f      	movs	r2, #47	@ 0x2f
 800c66a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	3303      	adds	r3, #3
 800c670:	2200      	movs	r2, #0
 800c672:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c678:	7dfb      	ldrb	r3, [r7, #23]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	20011720 	.word	0x20011720

0800c68c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c696:	2200      	movs	r2, #0
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff ffaa 	bl	800c5f4 <FATFS_LinkDriverEx>
 800c6a0:	4603      	mov	r3, r0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
	...

0800c6ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c6b8:	88fb      	ldrh	r3, [r7, #6]
 800c6ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6bc:	d802      	bhi.n	800c6c4 <ff_convert+0x18>
		c = chr;
 800c6be:	88fb      	ldrh	r3, [r7, #6]
 800c6c0:	81fb      	strh	r3, [r7, #14]
 800c6c2:	e025      	b.n	800c710 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00b      	beq.n	800c6e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c6ca:	88fb      	ldrh	r3, [r7, #6]
 800c6cc:	2bff      	cmp	r3, #255	@ 0xff
 800c6ce:	d805      	bhi.n	800c6dc <ff_convert+0x30>
 800c6d0:	88fb      	ldrh	r3, [r7, #6]
 800c6d2:	3b80      	subs	r3, #128	@ 0x80
 800c6d4:	4a12      	ldr	r2, [pc, #72]	@ (800c720 <ff_convert+0x74>)
 800c6d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6da:	e000      	b.n	800c6de <ff_convert+0x32>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	81fb      	strh	r3, [r7, #14]
 800c6e0:	e016      	b.n	800c710 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	81fb      	strh	r3, [r7, #14]
 800c6e6:	e009      	b.n	800c6fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c6e8:	89fb      	ldrh	r3, [r7, #14]
 800c6ea:	4a0d      	ldr	r2, [pc, #52]	@ (800c720 <ff_convert+0x74>)
 800c6ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6f0:	88fa      	ldrh	r2, [r7, #6]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d006      	beq.n	800c704 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c6f6:	89fb      	ldrh	r3, [r7, #14]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	81fb      	strh	r3, [r7, #14]
 800c6fc:	89fb      	ldrh	r3, [r7, #14]
 800c6fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800c700:	d9f2      	bls.n	800c6e8 <ff_convert+0x3c>
 800c702:	e000      	b.n	800c706 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c704:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c706:	89fb      	ldrh	r3, [r7, #14]
 800c708:	3380      	adds	r3, #128	@ 0x80
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c710:	89fb      	ldrh	r3, [r7, #14]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	0800e6a8 	.word	0x0800e6a8

0800c724 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c72e:	88fb      	ldrh	r3, [r7, #6]
 800c730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c734:	d201      	bcs.n	800c73a <ff_wtoupper+0x16>
 800c736:	4b3e      	ldr	r3, [pc, #248]	@ (800c830 <ff_wtoupper+0x10c>)
 800c738:	e000      	b.n	800c73c <ff_wtoupper+0x18>
 800c73a:	4b3e      	ldr	r3, [pc, #248]	@ (800c834 <ff_wtoupper+0x110>)
 800c73c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	1c9a      	adds	r2, r3, #2
 800c742:	617a      	str	r2, [r7, #20]
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c748:	8a7b      	ldrh	r3, [r7, #18]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d068      	beq.n	800c820 <ff_wtoupper+0xfc>
 800c74e:	88fa      	ldrh	r2, [r7, #6]
 800c750:	8a7b      	ldrh	r3, [r7, #18]
 800c752:	429a      	cmp	r2, r3
 800c754:	d364      	bcc.n	800c820 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	1c9a      	adds	r2, r3, #2
 800c75a:	617a      	str	r2, [r7, #20]
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	823b      	strh	r3, [r7, #16]
 800c760:	8a3b      	ldrh	r3, [r7, #16]
 800c762:	0a1b      	lsrs	r3, r3, #8
 800c764:	81fb      	strh	r3, [r7, #14]
 800c766:	8a3b      	ldrh	r3, [r7, #16]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c76c:	88fa      	ldrh	r2, [r7, #6]
 800c76e:	8a79      	ldrh	r1, [r7, #18]
 800c770:	8a3b      	ldrh	r3, [r7, #16]
 800c772:	440b      	add	r3, r1
 800c774:	429a      	cmp	r2, r3
 800c776:	da49      	bge.n	800c80c <ff_wtoupper+0xe8>
			switch (cmd) {
 800c778:	89fb      	ldrh	r3, [r7, #14]
 800c77a:	2b08      	cmp	r3, #8
 800c77c:	d84f      	bhi.n	800c81e <ff_wtoupper+0xfa>
 800c77e:	a201      	add	r2, pc, #4	@ (adr r2, 800c784 <ff_wtoupper+0x60>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c7a9 	.word	0x0800c7a9
 800c788:	0800c7bb 	.word	0x0800c7bb
 800c78c:	0800c7d1 	.word	0x0800c7d1
 800c790:	0800c7d9 	.word	0x0800c7d9
 800c794:	0800c7e1 	.word	0x0800c7e1
 800c798:	0800c7e9 	.word	0x0800c7e9
 800c79c:	0800c7f1 	.word	0x0800c7f1
 800c7a0:	0800c7f9 	.word	0x0800c7f9
 800c7a4:	0800c801 	.word	0x0800c801
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c7a8:	88fa      	ldrh	r2, [r7, #6]
 800c7aa:	8a7b      	ldrh	r3, [r7, #18]
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	005b      	lsls	r3, r3, #1
 800c7b0:	697a      	ldr	r2, [r7, #20]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	80fb      	strh	r3, [r7, #6]
 800c7b8:	e027      	b.n	800c80a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c7ba:	88fa      	ldrh	r2, [r7, #6]
 800c7bc:	8a7b      	ldrh	r3, [r7, #18]
 800c7be:	1ad3      	subs	r3, r2, r3
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	88fa      	ldrh	r2, [r7, #6]
 800c7ca:	1ad3      	subs	r3, r2, r3
 800c7cc:	80fb      	strh	r3, [r7, #6]
 800c7ce:	e01c      	b.n	800c80a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c7d0:	88fb      	ldrh	r3, [r7, #6]
 800c7d2:	3b10      	subs	r3, #16
 800c7d4:	80fb      	strh	r3, [r7, #6]
 800c7d6:	e018      	b.n	800c80a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c7d8:	88fb      	ldrh	r3, [r7, #6]
 800c7da:	3b20      	subs	r3, #32
 800c7dc:	80fb      	strh	r3, [r7, #6]
 800c7de:	e014      	b.n	800c80a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c7e0:	88fb      	ldrh	r3, [r7, #6]
 800c7e2:	3b30      	subs	r3, #48	@ 0x30
 800c7e4:	80fb      	strh	r3, [r7, #6]
 800c7e6:	e010      	b.n	800c80a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c7e8:	88fb      	ldrh	r3, [r7, #6]
 800c7ea:	3b1a      	subs	r3, #26
 800c7ec:	80fb      	strh	r3, [r7, #6]
 800c7ee:	e00c      	b.n	800c80a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c7f0:	88fb      	ldrh	r3, [r7, #6]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	80fb      	strh	r3, [r7, #6]
 800c7f6:	e008      	b.n	800c80a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c7f8:	88fb      	ldrh	r3, [r7, #6]
 800c7fa:	3b50      	subs	r3, #80	@ 0x50
 800c7fc:	80fb      	strh	r3, [r7, #6]
 800c7fe:	e004      	b.n	800c80a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c800:	88fb      	ldrh	r3, [r7, #6]
 800c802:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800c806:	80fb      	strh	r3, [r7, #6]
 800c808:	bf00      	nop
			}
			break;
 800c80a:	e008      	b.n	800c81e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c80c:	89fb      	ldrh	r3, [r7, #14]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d195      	bne.n	800c73e <ff_wtoupper+0x1a>
 800c812:	8a3b      	ldrh	r3, [r7, #16]
 800c814:	005b      	lsls	r3, r3, #1
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	4413      	add	r3, r2
 800c81a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c81c:	e78f      	b.n	800c73e <ff_wtoupper+0x1a>
			break;
 800c81e:	bf00      	nop
	}

	return chr;
 800c820:	88fb      	ldrh	r3, [r7, #6]
}
 800c822:	4618      	mov	r0, r3
 800c824:	371c      	adds	r7, #28
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	0800e7a8 	.word	0x0800e7a8
 800c834:	0800e99c 	.word	0x0800e99c

0800c838 <rand>:
 800c838:	4b16      	ldr	r3, [pc, #88]	@ (800c894 <rand+0x5c>)
 800c83a:	b510      	push	{r4, lr}
 800c83c:	681c      	ldr	r4, [r3, #0]
 800c83e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c840:	b9b3      	cbnz	r3, 800c870 <rand+0x38>
 800c842:	2018      	movs	r0, #24
 800c844:	f000 fb3a 	bl	800cebc <malloc>
 800c848:	4602      	mov	r2, r0
 800c84a:	6320      	str	r0, [r4, #48]	@ 0x30
 800c84c:	b920      	cbnz	r0, 800c858 <rand+0x20>
 800c84e:	4b12      	ldr	r3, [pc, #72]	@ (800c898 <rand+0x60>)
 800c850:	4812      	ldr	r0, [pc, #72]	@ (800c89c <rand+0x64>)
 800c852:	2152      	movs	r1, #82	@ 0x52
 800c854:	f000 faca 	bl	800cdec <__assert_func>
 800c858:	4911      	ldr	r1, [pc, #68]	@ (800c8a0 <rand+0x68>)
 800c85a:	4b12      	ldr	r3, [pc, #72]	@ (800c8a4 <rand+0x6c>)
 800c85c:	e9c0 1300 	strd	r1, r3, [r0]
 800c860:	4b11      	ldr	r3, [pc, #68]	@ (800c8a8 <rand+0x70>)
 800c862:	6083      	str	r3, [r0, #8]
 800c864:	230b      	movs	r3, #11
 800c866:	8183      	strh	r3, [r0, #12]
 800c868:	2100      	movs	r1, #0
 800c86a:	2001      	movs	r0, #1
 800c86c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c870:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c872:	480e      	ldr	r0, [pc, #56]	@ (800c8ac <rand+0x74>)
 800c874:	690b      	ldr	r3, [r1, #16]
 800c876:	694c      	ldr	r4, [r1, #20]
 800c878:	4a0d      	ldr	r2, [pc, #52]	@ (800c8b0 <rand+0x78>)
 800c87a:	4358      	muls	r0, r3
 800c87c:	fb02 0004 	mla	r0, r2, r4, r0
 800c880:	fba3 3202 	umull	r3, r2, r3, r2
 800c884:	3301      	adds	r3, #1
 800c886:	eb40 0002 	adc.w	r0, r0, r2
 800c88a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c88e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c892:	bd10      	pop	{r4, pc}
 800c894:	20000024 	.word	0x20000024
 800c898:	0800ea58 	.word	0x0800ea58
 800c89c:	0800ea6f 	.word	0x0800ea6f
 800c8a0:	abcd330e 	.word	0xabcd330e
 800c8a4:	e66d1234 	.word	0xe66d1234
 800c8a8:	0005deec 	.word	0x0005deec
 800c8ac:	5851f42d 	.word	0x5851f42d
 800c8b0:	4c957f2d 	.word	0x4c957f2d

0800c8b4 <std>:
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	b510      	push	{r4, lr}
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8c2:	6083      	str	r3, [r0, #8]
 800c8c4:	8181      	strh	r1, [r0, #12]
 800c8c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c8c8:	81c2      	strh	r2, [r0, #14]
 800c8ca:	6183      	str	r3, [r0, #24]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	2208      	movs	r2, #8
 800c8d0:	305c      	adds	r0, #92	@ 0x5c
 800c8d2:	f000 f9dd 	bl	800cc90 <memset>
 800c8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c90c <std+0x58>)
 800c8d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c8da:	4b0d      	ldr	r3, [pc, #52]	@ (800c910 <std+0x5c>)
 800c8dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c8de:	4b0d      	ldr	r3, [pc, #52]	@ (800c914 <std+0x60>)
 800c8e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c918 <std+0x64>)
 800c8e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800c8e6:	4b0d      	ldr	r3, [pc, #52]	@ (800c91c <std+0x68>)
 800c8e8:	6224      	str	r4, [r4, #32]
 800c8ea:	429c      	cmp	r4, r3
 800c8ec:	d006      	beq.n	800c8fc <std+0x48>
 800c8ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c8f2:	4294      	cmp	r4, r2
 800c8f4:	d002      	beq.n	800c8fc <std+0x48>
 800c8f6:	33d0      	adds	r3, #208	@ 0xd0
 800c8f8:	429c      	cmp	r4, r3
 800c8fa:	d105      	bne.n	800c908 <std+0x54>
 800c8fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c904:	f000 ba66 	b.w	800cdd4 <__retarget_lock_init_recursive>
 800c908:	bd10      	pop	{r4, pc}
 800c90a:	bf00      	nop
 800c90c:	0800cae1 	.word	0x0800cae1
 800c910:	0800cb03 	.word	0x0800cb03
 800c914:	0800cb3b 	.word	0x0800cb3b
 800c918:	0800cb5f 	.word	0x0800cb5f
 800c91c:	2001172c 	.word	0x2001172c

0800c920 <stdio_exit_handler>:
 800c920:	4a02      	ldr	r2, [pc, #8]	@ (800c92c <stdio_exit_handler+0xc>)
 800c922:	4903      	ldr	r1, [pc, #12]	@ (800c930 <stdio_exit_handler+0x10>)
 800c924:	4803      	ldr	r0, [pc, #12]	@ (800c934 <stdio_exit_handler+0x14>)
 800c926:	f000 b869 	b.w	800c9fc <_fwalk_sglue>
 800c92a:	bf00      	nop
 800c92c:	20000018 	.word	0x20000018
 800c930:	0800d981 	.word	0x0800d981
 800c934:	20000028 	.word	0x20000028

0800c938 <cleanup_stdio>:
 800c938:	6841      	ldr	r1, [r0, #4]
 800c93a:	4b0c      	ldr	r3, [pc, #48]	@ (800c96c <cleanup_stdio+0x34>)
 800c93c:	4299      	cmp	r1, r3
 800c93e:	b510      	push	{r4, lr}
 800c940:	4604      	mov	r4, r0
 800c942:	d001      	beq.n	800c948 <cleanup_stdio+0x10>
 800c944:	f001 f81c 	bl	800d980 <_fflush_r>
 800c948:	68a1      	ldr	r1, [r4, #8]
 800c94a:	4b09      	ldr	r3, [pc, #36]	@ (800c970 <cleanup_stdio+0x38>)
 800c94c:	4299      	cmp	r1, r3
 800c94e:	d002      	beq.n	800c956 <cleanup_stdio+0x1e>
 800c950:	4620      	mov	r0, r4
 800c952:	f001 f815 	bl	800d980 <_fflush_r>
 800c956:	68e1      	ldr	r1, [r4, #12]
 800c958:	4b06      	ldr	r3, [pc, #24]	@ (800c974 <cleanup_stdio+0x3c>)
 800c95a:	4299      	cmp	r1, r3
 800c95c:	d004      	beq.n	800c968 <cleanup_stdio+0x30>
 800c95e:	4620      	mov	r0, r4
 800c960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c964:	f001 b80c 	b.w	800d980 <_fflush_r>
 800c968:	bd10      	pop	{r4, pc}
 800c96a:	bf00      	nop
 800c96c:	2001172c 	.word	0x2001172c
 800c970:	20011794 	.word	0x20011794
 800c974:	200117fc 	.word	0x200117fc

0800c978 <global_stdio_init.part.0>:
 800c978:	b510      	push	{r4, lr}
 800c97a:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a8 <global_stdio_init.part.0+0x30>)
 800c97c:	4c0b      	ldr	r4, [pc, #44]	@ (800c9ac <global_stdio_init.part.0+0x34>)
 800c97e:	4a0c      	ldr	r2, [pc, #48]	@ (800c9b0 <global_stdio_init.part.0+0x38>)
 800c980:	601a      	str	r2, [r3, #0]
 800c982:	4620      	mov	r0, r4
 800c984:	2200      	movs	r2, #0
 800c986:	2104      	movs	r1, #4
 800c988:	f7ff ff94 	bl	800c8b4 <std>
 800c98c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c990:	2201      	movs	r2, #1
 800c992:	2109      	movs	r1, #9
 800c994:	f7ff ff8e 	bl	800c8b4 <std>
 800c998:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c99c:	2202      	movs	r2, #2
 800c99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9a2:	2112      	movs	r1, #18
 800c9a4:	f7ff bf86 	b.w	800c8b4 <std>
 800c9a8:	20011864 	.word	0x20011864
 800c9ac:	2001172c 	.word	0x2001172c
 800c9b0:	0800c921 	.word	0x0800c921

0800c9b4 <__sfp_lock_acquire>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	@ (800c9bc <__sfp_lock_acquire+0x8>)
 800c9b6:	f000 ba0e 	b.w	800cdd6 <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	2001186d 	.word	0x2001186d

0800c9c0 <__sfp_lock_release>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	@ (800c9c8 <__sfp_lock_release+0x8>)
 800c9c2:	f000 ba09 	b.w	800cdd8 <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	2001186d 	.word	0x2001186d

0800c9cc <__sinit>:
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	f7ff fff0 	bl	800c9b4 <__sfp_lock_acquire>
 800c9d4:	6a23      	ldr	r3, [r4, #32]
 800c9d6:	b11b      	cbz	r3, 800c9e0 <__sinit+0x14>
 800c9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9dc:	f7ff bff0 	b.w	800c9c0 <__sfp_lock_release>
 800c9e0:	4b04      	ldr	r3, [pc, #16]	@ (800c9f4 <__sinit+0x28>)
 800c9e2:	6223      	str	r3, [r4, #32]
 800c9e4:	4b04      	ldr	r3, [pc, #16]	@ (800c9f8 <__sinit+0x2c>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1f5      	bne.n	800c9d8 <__sinit+0xc>
 800c9ec:	f7ff ffc4 	bl	800c978 <global_stdio_init.part.0>
 800c9f0:	e7f2      	b.n	800c9d8 <__sinit+0xc>
 800c9f2:	bf00      	nop
 800c9f4:	0800c939 	.word	0x0800c939
 800c9f8:	20011864 	.word	0x20011864

0800c9fc <_fwalk_sglue>:
 800c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca00:	4607      	mov	r7, r0
 800ca02:	4688      	mov	r8, r1
 800ca04:	4614      	mov	r4, r2
 800ca06:	2600      	movs	r6, #0
 800ca08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ca10:	d505      	bpl.n	800ca1e <_fwalk_sglue+0x22>
 800ca12:	6824      	ldr	r4, [r4, #0]
 800ca14:	2c00      	cmp	r4, #0
 800ca16:	d1f7      	bne.n	800ca08 <_fwalk_sglue+0xc>
 800ca18:	4630      	mov	r0, r6
 800ca1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca1e:	89ab      	ldrh	r3, [r5, #12]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d907      	bls.n	800ca34 <_fwalk_sglue+0x38>
 800ca24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca28:	3301      	adds	r3, #1
 800ca2a:	d003      	beq.n	800ca34 <_fwalk_sglue+0x38>
 800ca2c:	4629      	mov	r1, r5
 800ca2e:	4638      	mov	r0, r7
 800ca30:	47c0      	blx	r8
 800ca32:	4306      	orrs	r6, r0
 800ca34:	3568      	adds	r5, #104	@ 0x68
 800ca36:	e7e9      	b.n	800ca0c <_fwalk_sglue+0x10>

0800ca38 <sniprintf>:
 800ca38:	b40c      	push	{r2, r3}
 800ca3a:	b530      	push	{r4, r5, lr}
 800ca3c:	4b17      	ldr	r3, [pc, #92]	@ (800ca9c <sniprintf+0x64>)
 800ca3e:	1e0c      	subs	r4, r1, #0
 800ca40:	681d      	ldr	r5, [r3, #0]
 800ca42:	b09d      	sub	sp, #116	@ 0x74
 800ca44:	da08      	bge.n	800ca58 <sniprintf+0x20>
 800ca46:	238b      	movs	r3, #139	@ 0x8b
 800ca48:	602b      	str	r3, [r5, #0]
 800ca4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4e:	b01d      	add	sp, #116	@ 0x74
 800ca50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca54:	b002      	add	sp, #8
 800ca56:	4770      	bx	lr
 800ca58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ca5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca60:	bf14      	ite	ne
 800ca62:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ca66:	4623      	moveq	r3, r4
 800ca68:	9304      	str	r3, [sp, #16]
 800ca6a:	9307      	str	r3, [sp, #28]
 800ca6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ca70:	9002      	str	r0, [sp, #8]
 800ca72:	9006      	str	r0, [sp, #24]
 800ca74:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ca78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ca7a:	ab21      	add	r3, sp, #132	@ 0x84
 800ca7c:	a902      	add	r1, sp, #8
 800ca7e:	4628      	mov	r0, r5
 800ca80:	9301      	str	r3, [sp, #4]
 800ca82:	f000 fb2d 	bl	800d0e0 <_svfiprintf_r>
 800ca86:	1c43      	adds	r3, r0, #1
 800ca88:	bfbc      	itt	lt
 800ca8a:	238b      	movlt	r3, #139	@ 0x8b
 800ca8c:	602b      	strlt	r3, [r5, #0]
 800ca8e:	2c00      	cmp	r4, #0
 800ca90:	d0dd      	beq.n	800ca4e <sniprintf+0x16>
 800ca92:	9b02      	ldr	r3, [sp, #8]
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
 800ca98:	e7d9      	b.n	800ca4e <sniprintf+0x16>
 800ca9a:	bf00      	nop
 800ca9c:	20000024 	.word	0x20000024

0800caa0 <siprintf>:
 800caa0:	b40e      	push	{r1, r2, r3}
 800caa2:	b500      	push	{lr}
 800caa4:	b09c      	sub	sp, #112	@ 0x70
 800caa6:	ab1d      	add	r3, sp, #116	@ 0x74
 800caa8:	9002      	str	r0, [sp, #8]
 800caaa:	9006      	str	r0, [sp, #24]
 800caac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cab0:	4809      	ldr	r0, [pc, #36]	@ (800cad8 <siprintf+0x38>)
 800cab2:	9107      	str	r1, [sp, #28]
 800cab4:	9104      	str	r1, [sp, #16]
 800cab6:	4909      	ldr	r1, [pc, #36]	@ (800cadc <siprintf+0x3c>)
 800cab8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cabc:	9105      	str	r1, [sp, #20]
 800cabe:	6800      	ldr	r0, [r0, #0]
 800cac0:	9301      	str	r3, [sp, #4]
 800cac2:	a902      	add	r1, sp, #8
 800cac4:	f000 fb0c 	bl	800d0e0 <_svfiprintf_r>
 800cac8:	9b02      	ldr	r3, [sp, #8]
 800caca:	2200      	movs	r2, #0
 800cacc:	701a      	strb	r2, [r3, #0]
 800cace:	b01c      	add	sp, #112	@ 0x70
 800cad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cad4:	b003      	add	sp, #12
 800cad6:	4770      	bx	lr
 800cad8:	20000024 	.word	0x20000024
 800cadc:	ffff0208 	.word	0xffff0208

0800cae0 <__sread>:
 800cae0:	b510      	push	{r4, lr}
 800cae2:	460c      	mov	r4, r1
 800cae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae8:	f000 f926 	bl	800cd38 <_read_r>
 800caec:	2800      	cmp	r0, #0
 800caee:	bfab      	itete	ge
 800caf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800caf2:	89a3      	ldrhlt	r3, [r4, #12]
 800caf4:	181b      	addge	r3, r3, r0
 800caf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cafa:	bfac      	ite	ge
 800cafc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cafe:	81a3      	strhlt	r3, [r4, #12]
 800cb00:	bd10      	pop	{r4, pc}

0800cb02 <__swrite>:
 800cb02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb06:	461f      	mov	r7, r3
 800cb08:	898b      	ldrh	r3, [r1, #12]
 800cb0a:	05db      	lsls	r3, r3, #23
 800cb0c:	4605      	mov	r5, r0
 800cb0e:	460c      	mov	r4, r1
 800cb10:	4616      	mov	r6, r2
 800cb12:	d505      	bpl.n	800cb20 <__swrite+0x1e>
 800cb14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb18:	2302      	movs	r3, #2
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f000 f8fa 	bl	800cd14 <_lseek_r>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cb2a:	81a3      	strh	r3, [r4, #12]
 800cb2c:	4632      	mov	r2, r6
 800cb2e:	463b      	mov	r3, r7
 800cb30:	4628      	mov	r0, r5
 800cb32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb36:	f000 b911 	b.w	800cd5c <_write_r>

0800cb3a <__sseek>:
 800cb3a:	b510      	push	{r4, lr}
 800cb3c:	460c      	mov	r4, r1
 800cb3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb42:	f000 f8e7 	bl	800cd14 <_lseek_r>
 800cb46:	1c43      	adds	r3, r0, #1
 800cb48:	89a3      	ldrh	r3, [r4, #12]
 800cb4a:	bf15      	itete	ne
 800cb4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb56:	81a3      	strheq	r3, [r4, #12]
 800cb58:	bf18      	it	ne
 800cb5a:	81a3      	strhne	r3, [r4, #12]
 800cb5c:	bd10      	pop	{r4, pc}

0800cb5e <__sclose>:
 800cb5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb62:	f000 b8c7 	b.w	800ccf4 <_close_r>

0800cb66 <__swbuf_r>:
 800cb66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb68:	460e      	mov	r6, r1
 800cb6a:	4614      	mov	r4, r2
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	b118      	cbz	r0, 800cb78 <__swbuf_r+0x12>
 800cb70:	6a03      	ldr	r3, [r0, #32]
 800cb72:	b90b      	cbnz	r3, 800cb78 <__swbuf_r+0x12>
 800cb74:	f7ff ff2a 	bl	800c9cc <__sinit>
 800cb78:	69a3      	ldr	r3, [r4, #24]
 800cb7a:	60a3      	str	r3, [r4, #8]
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	071a      	lsls	r2, r3, #28
 800cb80:	d501      	bpl.n	800cb86 <__swbuf_r+0x20>
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	b943      	cbnz	r3, 800cb98 <__swbuf_r+0x32>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f000 f82b 	bl	800cbe4 <__swsetup_r>
 800cb8e:	b118      	cbz	r0, 800cb98 <__swbuf_r+0x32>
 800cb90:	f04f 37ff 	mov.w	r7, #4294967295
 800cb94:	4638      	mov	r0, r7
 800cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb98:	6823      	ldr	r3, [r4, #0]
 800cb9a:	6922      	ldr	r2, [r4, #16]
 800cb9c:	1a98      	subs	r0, r3, r2
 800cb9e:	6963      	ldr	r3, [r4, #20]
 800cba0:	b2f6      	uxtb	r6, r6
 800cba2:	4283      	cmp	r3, r0
 800cba4:	4637      	mov	r7, r6
 800cba6:	dc05      	bgt.n	800cbb4 <__swbuf_r+0x4e>
 800cba8:	4621      	mov	r1, r4
 800cbaa:	4628      	mov	r0, r5
 800cbac:	f000 fee8 	bl	800d980 <_fflush_r>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d1ed      	bne.n	800cb90 <__swbuf_r+0x2a>
 800cbb4:	68a3      	ldr	r3, [r4, #8]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	60a3      	str	r3, [r4, #8]
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	1c5a      	adds	r2, r3, #1
 800cbbe:	6022      	str	r2, [r4, #0]
 800cbc0:	701e      	strb	r6, [r3, #0]
 800cbc2:	6962      	ldr	r2, [r4, #20]
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d004      	beq.n	800cbd4 <__swbuf_r+0x6e>
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	07db      	lsls	r3, r3, #31
 800cbce:	d5e1      	bpl.n	800cb94 <__swbuf_r+0x2e>
 800cbd0:	2e0a      	cmp	r6, #10
 800cbd2:	d1df      	bne.n	800cb94 <__swbuf_r+0x2e>
 800cbd4:	4621      	mov	r1, r4
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f000 fed2 	bl	800d980 <_fflush_r>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d0d9      	beq.n	800cb94 <__swbuf_r+0x2e>
 800cbe0:	e7d6      	b.n	800cb90 <__swbuf_r+0x2a>
	...

0800cbe4 <__swsetup_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4b29      	ldr	r3, [pc, #164]	@ (800cc8c <__swsetup_r+0xa8>)
 800cbe8:	4605      	mov	r5, r0
 800cbea:	6818      	ldr	r0, [r3, #0]
 800cbec:	460c      	mov	r4, r1
 800cbee:	b118      	cbz	r0, 800cbf8 <__swsetup_r+0x14>
 800cbf0:	6a03      	ldr	r3, [r0, #32]
 800cbf2:	b90b      	cbnz	r3, 800cbf8 <__swsetup_r+0x14>
 800cbf4:	f7ff feea 	bl	800c9cc <__sinit>
 800cbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfc:	0719      	lsls	r1, r3, #28
 800cbfe:	d422      	bmi.n	800cc46 <__swsetup_r+0x62>
 800cc00:	06da      	lsls	r2, r3, #27
 800cc02:	d407      	bmi.n	800cc14 <__swsetup_r+0x30>
 800cc04:	2209      	movs	r2, #9
 800cc06:	602a      	str	r2, [r5, #0]
 800cc08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc0c:	81a3      	strh	r3, [r4, #12]
 800cc0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc12:	e033      	b.n	800cc7c <__swsetup_r+0x98>
 800cc14:	0758      	lsls	r0, r3, #29
 800cc16:	d512      	bpl.n	800cc3e <__swsetup_r+0x5a>
 800cc18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc1a:	b141      	cbz	r1, 800cc2e <__swsetup_r+0x4a>
 800cc1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc20:	4299      	cmp	r1, r3
 800cc22:	d002      	beq.n	800cc2a <__swsetup_r+0x46>
 800cc24:	4628      	mov	r0, r5
 800cc26:	f000 f8ff 	bl	800ce28 <_free_r>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc2e:	89a3      	ldrh	r3, [r4, #12]
 800cc30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cc34:	81a3      	strh	r3, [r4, #12]
 800cc36:	2300      	movs	r3, #0
 800cc38:	6063      	str	r3, [r4, #4]
 800cc3a:	6923      	ldr	r3, [r4, #16]
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	89a3      	ldrh	r3, [r4, #12]
 800cc40:	f043 0308 	orr.w	r3, r3, #8
 800cc44:	81a3      	strh	r3, [r4, #12]
 800cc46:	6923      	ldr	r3, [r4, #16]
 800cc48:	b94b      	cbnz	r3, 800cc5e <__swsetup_r+0x7a>
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cc50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc54:	d003      	beq.n	800cc5e <__swsetup_r+0x7a>
 800cc56:	4621      	mov	r1, r4
 800cc58:	4628      	mov	r0, r5
 800cc5a:	f000 fef1 	bl	800da40 <__smakebuf_r>
 800cc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc62:	f013 0201 	ands.w	r2, r3, #1
 800cc66:	d00a      	beq.n	800cc7e <__swsetup_r+0x9a>
 800cc68:	2200      	movs	r2, #0
 800cc6a:	60a2      	str	r2, [r4, #8]
 800cc6c:	6962      	ldr	r2, [r4, #20]
 800cc6e:	4252      	negs	r2, r2
 800cc70:	61a2      	str	r2, [r4, #24]
 800cc72:	6922      	ldr	r2, [r4, #16]
 800cc74:	b942      	cbnz	r2, 800cc88 <__swsetup_r+0xa4>
 800cc76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cc7a:	d1c5      	bne.n	800cc08 <__swsetup_r+0x24>
 800cc7c:	bd38      	pop	{r3, r4, r5, pc}
 800cc7e:	0799      	lsls	r1, r3, #30
 800cc80:	bf58      	it	pl
 800cc82:	6962      	ldrpl	r2, [r4, #20]
 800cc84:	60a2      	str	r2, [r4, #8]
 800cc86:	e7f4      	b.n	800cc72 <__swsetup_r+0x8e>
 800cc88:	2000      	movs	r0, #0
 800cc8a:	e7f7      	b.n	800cc7c <__swsetup_r+0x98>
 800cc8c:	20000024 	.word	0x20000024

0800cc90 <memset>:
 800cc90:	4402      	add	r2, r0
 800cc92:	4603      	mov	r3, r0
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d100      	bne.n	800cc9a <memset+0xa>
 800cc98:	4770      	bx	lr
 800cc9a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc9e:	e7f9      	b.n	800cc94 <memset+0x4>

0800cca0 <strncpy>:
 800cca0:	b510      	push	{r4, lr}
 800cca2:	3901      	subs	r1, #1
 800cca4:	4603      	mov	r3, r0
 800cca6:	b132      	cbz	r2, 800ccb6 <strncpy+0x16>
 800cca8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ccac:	f803 4b01 	strb.w	r4, [r3], #1
 800ccb0:	3a01      	subs	r2, #1
 800ccb2:	2c00      	cmp	r4, #0
 800ccb4:	d1f7      	bne.n	800cca6 <strncpy+0x6>
 800ccb6:	441a      	add	r2, r3
 800ccb8:	2100      	movs	r1, #0
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d100      	bne.n	800ccc0 <strncpy+0x20>
 800ccbe:	bd10      	pop	{r4, pc}
 800ccc0:	f803 1b01 	strb.w	r1, [r3], #1
 800ccc4:	e7f9      	b.n	800ccba <strncpy+0x1a>

0800ccc6 <strstr>:
 800ccc6:	780a      	ldrb	r2, [r1, #0]
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	b96a      	cbnz	r2, 800cce8 <strstr+0x22>
 800cccc:	bd70      	pop	{r4, r5, r6, pc}
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d109      	bne.n	800cce6 <strstr+0x20>
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	4605      	mov	r5, r0
 800ccd6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d0f6      	beq.n	800cccc <strstr+0x6>
 800ccde:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cce2:	429e      	cmp	r6, r3
 800cce4:	d0f7      	beq.n	800ccd6 <strstr+0x10>
 800cce6:	3001      	adds	r0, #1
 800cce8:	7803      	ldrb	r3, [r0, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1ef      	bne.n	800ccce <strstr+0x8>
 800ccee:	4618      	mov	r0, r3
 800ccf0:	e7ec      	b.n	800cccc <strstr+0x6>
	...

0800ccf4 <_close_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4d06      	ldr	r5, [pc, #24]	@ (800cd10 <_close_r+0x1c>)
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	4608      	mov	r0, r1
 800ccfe:	602b      	str	r3, [r5, #0]
 800cd00:	f7f5 fdff 	bl	8002902 <_close>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	d102      	bne.n	800cd0e <_close_r+0x1a>
 800cd08:	682b      	ldr	r3, [r5, #0]
 800cd0a:	b103      	cbz	r3, 800cd0e <_close_r+0x1a>
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	20011868 	.word	0x20011868

0800cd14 <_lseek_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4d07      	ldr	r5, [pc, #28]	@ (800cd34 <_lseek_r+0x20>)
 800cd18:	4604      	mov	r4, r0
 800cd1a:	4608      	mov	r0, r1
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	2200      	movs	r2, #0
 800cd20:	602a      	str	r2, [r5, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	f7f5 fe14 	bl	8002950 <_lseek>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	d102      	bne.n	800cd32 <_lseek_r+0x1e>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	b103      	cbz	r3, 800cd32 <_lseek_r+0x1e>
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	bd38      	pop	{r3, r4, r5, pc}
 800cd34:	20011868 	.word	0x20011868

0800cd38 <_read_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d07      	ldr	r5, [pc, #28]	@ (800cd58 <_read_r+0x20>)
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	4608      	mov	r0, r1
 800cd40:	4611      	mov	r1, r2
 800cd42:	2200      	movs	r2, #0
 800cd44:	602a      	str	r2, [r5, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	f7f5 fda2 	bl	8002890 <_read>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d102      	bne.n	800cd56 <_read_r+0x1e>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	b103      	cbz	r3, 800cd56 <_read_r+0x1e>
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	20011868 	.word	0x20011868

0800cd5c <_write_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d07      	ldr	r5, [pc, #28]	@ (800cd7c <_write_r+0x20>)
 800cd60:	4604      	mov	r4, r0
 800cd62:	4608      	mov	r0, r1
 800cd64:	4611      	mov	r1, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	602a      	str	r2, [r5, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f7f5 fdad 	bl	80028ca <_write>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_write_r+0x1e>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_write_r+0x1e>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	20011868 	.word	0x20011868

0800cd80 <__errno>:
 800cd80:	4b01      	ldr	r3, [pc, #4]	@ (800cd88 <__errno+0x8>)
 800cd82:	6818      	ldr	r0, [r3, #0]
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	20000024 	.word	0x20000024

0800cd8c <__libc_init_array>:
 800cd8c:	b570      	push	{r4, r5, r6, lr}
 800cd8e:	4d0d      	ldr	r5, [pc, #52]	@ (800cdc4 <__libc_init_array+0x38>)
 800cd90:	4c0d      	ldr	r4, [pc, #52]	@ (800cdc8 <__libc_init_array+0x3c>)
 800cd92:	1b64      	subs	r4, r4, r5
 800cd94:	10a4      	asrs	r4, r4, #2
 800cd96:	2600      	movs	r6, #0
 800cd98:	42a6      	cmp	r6, r4
 800cd9a:	d109      	bne.n	800cdb0 <__libc_init_array+0x24>
 800cd9c:	4d0b      	ldr	r5, [pc, #44]	@ (800cdcc <__libc_init_array+0x40>)
 800cd9e:	4c0c      	ldr	r4, [pc, #48]	@ (800cdd0 <__libc_init_array+0x44>)
 800cda0:	f000 ff66 	bl	800dc70 <_init>
 800cda4:	1b64      	subs	r4, r4, r5
 800cda6:	10a4      	asrs	r4, r4, #2
 800cda8:	2600      	movs	r6, #0
 800cdaa:	42a6      	cmp	r6, r4
 800cdac:	d105      	bne.n	800cdba <__libc_init_array+0x2e>
 800cdae:	bd70      	pop	{r4, r5, r6, pc}
 800cdb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdb4:	4798      	blx	r3
 800cdb6:	3601      	adds	r6, #1
 800cdb8:	e7ee      	b.n	800cd98 <__libc_init_array+0xc>
 800cdba:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdbe:	4798      	blx	r3
 800cdc0:	3601      	adds	r6, #1
 800cdc2:	e7f2      	b.n	800cdaa <__libc_init_array+0x1e>
 800cdc4:	0800eb40 	.word	0x0800eb40
 800cdc8:	0800eb40 	.word	0x0800eb40
 800cdcc:	0800eb40 	.word	0x0800eb40
 800cdd0:	0800eb44 	.word	0x0800eb44

0800cdd4 <__retarget_lock_init_recursive>:
 800cdd4:	4770      	bx	lr

0800cdd6 <__retarget_lock_acquire_recursive>:
 800cdd6:	4770      	bx	lr

0800cdd8 <__retarget_lock_release_recursive>:
 800cdd8:	4770      	bx	lr

0800cdda <strcpy>:
 800cdda:	4603      	mov	r3, r0
 800cddc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cde0:	f803 2b01 	strb.w	r2, [r3], #1
 800cde4:	2a00      	cmp	r2, #0
 800cde6:	d1f9      	bne.n	800cddc <strcpy+0x2>
 800cde8:	4770      	bx	lr
	...

0800cdec <__assert_func>:
 800cdec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cdee:	4614      	mov	r4, r2
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	4b09      	ldr	r3, [pc, #36]	@ (800ce18 <__assert_func+0x2c>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4605      	mov	r5, r0
 800cdf8:	68d8      	ldr	r0, [r3, #12]
 800cdfa:	b954      	cbnz	r4, 800ce12 <__assert_func+0x26>
 800cdfc:	4b07      	ldr	r3, [pc, #28]	@ (800ce1c <__assert_func+0x30>)
 800cdfe:	461c      	mov	r4, r3
 800ce00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce04:	9100      	str	r1, [sp, #0]
 800ce06:	462b      	mov	r3, r5
 800ce08:	4905      	ldr	r1, [pc, #20]	@ (800ce20 <__assert_func+0x34>)
 800ce0a:	f000 fde1 	bl	800d9d0 <fiprintf>
 800ce0e:	f000 fead 	bl	800db6c <abort>
 800ce12:	4b04      	ldr	r3, [pc, #16]	@ (800ce24 <__assert_func+0x38>)
 800ce14:	e7f4      	b.n	800ce00 <__assert_func+0x14>
 800ce16:	bf00      	nop
 800ce18:	20000024 	.word	0x20000024
 800ce1c:	0800eb02 	.word	0x0800eb02
 800ce20:	0800ead4 	.word	0x0800ead4
 800ce24:	0800eac7 	.word	0x0800eac7

0800ce28 <_free_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	2900      	cmp	r1, #0
 800ce2e:	d041      	beq.n	800ceb4 <_free_r+0x8c>
 800ce30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce34:	1f0c      	subs	r4, r1, #4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	bfb8      	it	lt
 800ce3a:	18e4      	addlt	r4, r4, r3
 800ce3c:	f000 f8e8 	bl	800d010 <__malloc_lock>
 800ce40:	4a1d      	ldr	r2, [pc, #116]	@ (800ceb8 <_free_r+0x90>)
 800ce42:	6813      	ldr	r3, [r2, #0]
 800ce44:	b933      	cbnz	r3, 800ce54 <_free_r+0x2c>
 800ce46:	6063      	str	r3, [r4, #4]
 800ce48:	6014      	str	r4, [r2, #0]
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce50:	f000 b8e4 	b.w	800d01c <__malloc_unlock>
 800ce54:	42a3      	cmp	r3, r4
 800ce56:	d908      	bls.n	800ce6a <_free_r+0x42>
 800ce58:	6820      	ldr	r0, [r4, #0]
 800ce5a:	1821      	adds	r1, r4, r0
 800ce5c:	428b      	cmp	r3, r1
 800ce5e:	bf01      	itttt	eq
 800ce60:	6819      	ldreq	r1, [r3, #0]
 800ce62:	685b      	ldreq	r3, [r3, #4]
 800ce64:	1809      	addeq	r1, r1, r0
 800ce66:	6021      	streq	r1, [r4, #0]
 800ce68:	e7ed      	b.n	800ce46 <_free_r+0x1e>
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	b10b      	cbz	r3, 800ce74 <_free_r+0x4c>
 800ce70:	42a3      	cmp	r3, r4
 800ce72:	d9fa      	bls.n	800ce6a <_free_r+0x42>
 800ce74:	6811      	ldr	r1, [r2, #0]
 800ce76:	1850      	adds	r0, r2, r1
 800ce78:	42a0      	cmp	r0, r4
 800ce7a:	d10b      	bne.n	800ce94 <_free_r+0x6c>
 800ce7c:	6820      	ldr	r0, [r4, #0]
 800ce7e:	4401      	add	r1, r0
 800ce80:	1850      	adds	r0, r2, r1
 800ce82:	4283      	cmp	r3, r0
 800ce84:	6011      	str	r1, [r2, #0]
 800ce86:	d1e0      	bne.n	800ce4a <_free_r+0x22>
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	6053      	str	r3, [r2, #4]
 800ce8e:	4408      	add	r0, r1
 800ce90:	6010      	str	r0, [r2, #0]
 800ce92:	e7da      	b.n	800ce4a <_free_r+0x22>
 800ce94:	d902      	bls.n	800ce9c <_free_r+0x74>
 800ce96:	230c      	movs	r3, #12
 800ce98:	602b      	str	r3, [r5, #0]
 800ce9a:	e7d6      	b.n	800ce4a <_free_r+0x22>
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	1821      	adds	r1, r4, r0
 800cea0:	428b      	cmp	r3, r1
 800cea2:	bf04      	itt	eq
 800cea4:	6819      	ldreq	r1, [r3, #0]
 800cea6:	685b      	ldreq	r3, [r3, #4]
 800cea8:	6063      	str	r3, [r4, #4]
 800ceaa:	bf04      	itt	eq
 800ceac:	1809      	addeq	r1, r1, r0
 800ceae:	6021      	streq	r1, [r4, #0]
 800ceb0:	6054      	str	r4, [r2, #4]
 800ceb2:	e7ca      	b.n	800ce4a <_free_r+0x22>
 800ceb4:	bd38      	pop	{r3, r4, r5, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20011874 	.word	0x20011874

0800cebc <malloc>:
 800cebc:	4b02      	ldr	r3, [pc, #8]	@ (800cec8 <malloc+0xc>)
 800cebe:	4601      	mov	r1, r0
 800cec0:	6818      	ldr	r0, [r3, #0]
 800cec2:	f000 b825 	b.w	800cf10 <_malloc_r>
 800cec6:	bf00      	nop
 800cec8:	20000024 	.word	0x20000024

0800cecc <sbrk_aligned>:
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	4e0f      	ldr	r6, [pc, #60]	@ (800cf0c <sbrk_aligned+0x40>)
 800ced0:	460c      	mov	r4, r1
 800ced2:	6831      	ldr	r1, [r6, #0]
 800ced4:	4605      	mov	r5, r0
 800ced6:	b911      	cbnz	r1, 800cede <sbrk_aligned+0x12>
 800ced8:	f000 fe2a 	bl	800db30 <_sbrk_r>
 800cedc:	6030      	str	r0, [r6, #0]
 800cede:	4621      	mov	r1, r4
 800cee0:	4628      	mov	r0, r5
 800cee2:	f000 fe25 	bl	800db30 <_sbrk_r>
 800cee6:	1c43      	adds	r3, r0, #1
 800cee8:	d103      	bne.n	800cef2 <sbrk_aligned+0x26>
 800ceea:	f04f 34ff 	mov.w	r4, #4294967295
 800ceee:	4620      	mov	r0, r4
 800cef0:	bd70      	pop	{r4, r5, r6, pc}
 800cef2:	1cc4      	adds	r4, r0, #3
 800cef4:	f024 0403 	bic.w	r4, r4, #3
 800cef8:	42a0      	cmp	r0, r4
 800cefa:	d0f8      	beq.n	800ceee <sbrk_aligned+0x22>
 800cefc:	1a21      	subs	r1, r4, r0
 800cefe:	4628      	mov	r0, r5
 800cf00:	f000 fe16 	bl	800db30 <_sbrk_r>
 800cf04:	3001      	adds	r0, #1
 800cf06:	d1f2      	bne.n	800ceee <sbrk_aligned+0x22>
 800cf08:	e7ef      	b.n	800ceea <sbrk_aligned+0x1e>
 800cf0a:	bf00      	nop
 800cf0c:	20011870 	.word	0x20011870

0800cf10 <_malloc_r>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	1ccd      	adds	r5, r1, #3
 800cf16:	f025 0503 	bic.w	r5, r5, #3
 800cf1a:	3508      	adds	r5, #8
 800cf1c:	2d0c      	cmp	r5, #12
 800cf1e:	bf38      	it	cc
 800cf20:	250c      	movcc	r5, #12
 800cf22:	2d00      	cmp	r5, #0
 800cf24:	4606      	mov	r6, r0
 800cf26:	db01      	blt.n	800cf2c <_malloc_r+0x1c>
 800cf28:	42a9      	cmp	r1, r5
 800cf2a:	d904      	bls.n	800cf36 <_malloc_r+0x26>
 800cf2c:	230c      	movs	r3, #12
 800cf2e:	6033      	str	r3, [r6, #0]
 800cf30:	2000      	movs	r0, #0
 800cf32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d00c <_malloc_r+0xfc>
 800cf3a:	f000 f869 	bl	800d010 <__malloc_lock>
 800cf3e:	f8d8 3000 	ldr.w	r3, [r8]
 800cf42:	461c      	mov	r4, r3
 800cf44:	bb44      	cbnz	r4, 800cf98 <_malloc_r+0x88>
 800cf46:	4629      	mov	r1, r5
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7ff ffbf 	bl	800cecc <sbrk_aligned>
 800cf4e:	1c43      	adds	r3, r0, #1
 800cf50:	4604      	mov	r4, r0
 800cf52:	d158      	bne.n	800d006 <_malloc_r+0xf6>
 800cf54:	f8d8 4000 	ldr.w	r4, [r8]
 800cf58:	4627      	mov	r7, r4
 800cf5a:	2f00      	cmp	r7, #0
 800cf5c:	d143      	bne.n	800cfe6 <_malloc_r+0xd6>
 800cf5e:	2c00      	cmp	r4, #0
 800cf60:	d04b      	beq.n	800cffa <_malloc_r+0xea>
 800cf62:	6823      	ldr	r3, [r4, #0]
 800cf64:	4639      	mov	r1, r7
 800cf66:	4630      	mov	r0, r6
 800cf68:	eb04 0903 	add.w	r9, r4, r3
 800cf6c:	f000 fde0 	bl	800db30 <_sbrk_r>
 800cf70:	4581      	cmp	r9, r0
 800cf72:	d142      	bne.n	800cffa <_malloc_r+0xea>
 800cf74:	6821      	ldr	r1, [r4, #0]
 800cf76:	1a6d      	subs	r5, r5, r1
 800cf78:	4629      	mov	r1, r5
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f7ff ffa6 	bl	800cecc <sbrk_aligned>
 800cf80:	3001      	adds	r0, #1
 800cf82:	d03a      	beq.n	800cffa <_malloc_r+0xea>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	442b      	add	r3, r5
 800cf88:	6023      	str	r3, [r4, #0]
 800cf8a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf8e:	685a      	ldr	r2, [r3, #4]
 800cf90:	bb62      	cbnz	r2, 800cfec <_malloc_r+0xdc>
 800cf92:	f8c8 7000 	str.w	r7, [r8]
 800cf96:	e00f      	b.n	800cfb8 <_malloc_r+0xa8>
 800cf98:	6822      	ldr	r2, [r4, #0]
 800cf9a:	1b52      	subs	r2, r2, r5
 800cf9c:	d420      	bmi.n	800cfe0 <_malloc_r+0xd0>
 800cf9e:	2a0b      	cmp	r2, #11
 800cfa0:	d917      	bls.n	800cfd2 <_malloc_r+0xc2>
 800cfa2:	1961      	adds	r1, r4, r5
 800cfa4:	42a3      	cmp	r3, r4
 800cfa6:	6025      	str	r5, [r4, #0]
 800cfa8:	bf18      	it	ne
 800cfaa:	6059      	strne	r1, [r3, #4]
 800cfac:	6863      	ldr	r3, [r4, #4]
 800cfae:	bf08      	it	eq
 800cfb0:	f8c8 1000 	streq.w	r1, [r8]
 800cfb4:	5162      	str	r2, [r4, r5]
 800cfb6:	604b      	str	r3, [r1, #4]
 800cfb8:	4630      	mov	r0, r6
 800cfba:	f000 f82f 	bl	800d01c <__malloc_unlock>
 800cfbe:	f104 000b 	add.w	r0, r4, #11
 800cfc2:	1d23      	adds	r3, r4, #4
 800cfc4:	f020 0007 	bic.w	r0, r0, #7
 800cfc8:	1ac2      	subs	r2, r0, r3
 800cfca:	bf1c      	itt	ne
 800cfcc:	1a1b      	subne	r3, r3, r0
 800cfce:	50a3      	strne	r3, [r4, r2]
 800cfd0:	e7af      	b.n	800cf32 <_malloc_r+0x22>
 800cfd2:	6862      	ldr	r2, [r4, #4]
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	bf0c      	ite	eq
 800cfd8:	f8c8 2000 	streq.w	r2, [r8]
 800cfdc:	605a      	strne	r2, [r3, #4]
 800cfde:	e7eb      	b.n	800cfb8 <_malloc_r+0xa8>
 800cfe0:	4623      	mov	r3, r4
 800cfe2:	6864      	ldr	r4, [r4, #4]
 800cfe4:	e7ae      	b.n	800cf44 <_malloc_r+0x34>
 800cfe6:	463c      	mov	r4, r7
 800cfe8:	687f      	ldr	r7, [r7, #4]
 800cfea:	e7b6      	b.n	800cf5a <_malloc_r+0x4a>
 800cfec:	461a      	mov	r2, r3
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	42a3      	cmp	r3, r4
 800cff2:	d1fb      	bne.n	800cfec <_malloc_r+0xdc>
 800cff4:	2300      	movs	r3, #0
 800cff6:	6053      	str	r3, [r2, #4]
 800cff8:	e7de      	b.n	800cfb8 <_malloc_r+0xa8>
 800cffa:	230c      	movs	r3, #12
 800cffc:	6033      	str	r3, [r6, #0]
 800cffe:	4630      	mov	r0, r6
 800d000:	f000 f80c 	bl	800d01c <__malloc_unlock>
 800d004:	e794      	b.n	800cf30 <_malloc_r+0x20>
 800d006:	6005      	str	r5, [r0, #0]
 800d008:	e7d6      	b.n	800cfb8 <_malloc_r+0xa8>
 800d00a:	bf00      	nop
 800d00c:	20011874 	.word	0x20011874

0800d010 <__malloc_lock>:
 800d010:	4801      	ldr	r0, [pc, #4]	@ (800d018 <__malloc_lock+0x8>)
 800d012:	f7ff bee0 	b.w	800cdd6 <__retarget_lock_acquire_recursive>
 800d016:	bf00      	nop
 800d018:	2001186c 	.word	0x2001186c

0800d01c <__malloc_unlock>:
 800d01c:	4801      	ldr	r0, [pc, #4]	@ (800d024 <__malloc_unlock+0x8>)
 800d01e:	f7ff bedb 	b.w	800cdd8 <__retarget_lock_release_recursive>
 800d022:	bf00      	nop
 800d024:	2001186c 	.word	0x2001186c

0800d028 <__ssputs_r>:
 800d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d02c:	688e      	ldr	r6, [r1, #8]
 800d02e:	461f      	mov	r7, r3
 800d030:	42be      	cmp	r6, r7
 800d032:	680b      	ldr	r3, [r1, #0]
 800d034:	4682      	mov	sl, r0
 800d036:	460c      	mov	r4, r1
 800d038:	4690      	mov	r8, r2
 800d03a:	d82d      	bhi.n	800d098 <__ssputs_r+0x70>
 800d03c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d040:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d044:	d026      	beq.n	800d094 <__ssputs_r+0x6c>
 800d046:	6965      	ldr	r5, [r4, #20]
 800d048:	6909      	ldr	r1, [r1, #16]
 800d04a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d04e:	eba3 0901 	sub.w	r9, r3, r1
 800d052:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d056:	1c7b      	adds	r3, r7, #1
 800d058:	444b      	add	r3, r9
 800d05a:	106d      	asrs	r5, r5, #1
 800d05c:	429d      	cmp	r5, r3
 800d05e:	bf38      	it	cc
 800d060:	461d      	movcc	r5, r3
 800d062:	0553      	lsls	r3, r2, #21
 800d064:	d527      	bpl.n	800d0b6 <__ssputs_r+0x8e>
 800d066:	4629      	mov	r1, r5
 800d068:	f7ff ff52 	bl	800cf10 <_malloc_r>
 800d06c:	4606      	mov	r6, r0
 800d06e:	b360      	cbz	r0, 800d0ca <__ssputs_r+0xa2>
 800d070:	6921      	ldr	r1, [r4, #16]
 800d072:	464a      	mov	r2, r9
 800d074:	f000 fd6c 	bl	800db50 <memcpy>
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d07e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d082:	81a3      	strh	r3, [r4, #12]
 800d084:	6126      	str	r6, [r4, #16]
 800d086:	6165      	str	r5, [r4, #20]
 800d088:	444e      	add	r6, r9
 800d08a:	eba5 0509 	sub.w	r5, r5, r9
 800d08e:	6026      	str	r6, [r4, #0]
 800d090:	60a5      	str	r5, [r4, #8]
 800d092:	463e      	mov	r6, r7
 800d094:	42be      	cmp	r6, r7
 800d096:	d900      	bls.n	800d09a <__ssputs_r+0x72>
 800d098:	463e      	mov	r6, r7
 800d09a:	6820      	ldr	r0, [r4, #0]
 800d09c:	4632      	mov	r2, r6
 800d09e:	4641      	mov	r1, r8
 800d0a0:	f000 fd0a 	bl	800dab8 <memmove>
 800d0a4:	68a3      	ldr	r3, [r4, #8]
 800d0a6:	1b9b      	subs	r3, r3, r6
 800d0a8:	60a3      	str	r3, [r4, #8]
 800d0aa:	6823      	ldr	r3, [r4, #0]
 800d0ac:	4433      	add	r3, r6
 800d0ae:	6023      	str	r3, [r4, #0]
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	f000 fd5f 	bl	800db7a <_realloc_r>
 800d0bc:	4606      	mov	r6, r0
 800d0be:	2800      	cmp	r0, #0
 800d0c0:	d1e0      	bne.n	800d084 <__ssputs_r+0x5c>
 800d0c2:	6921      	ldr	r1, [r4, #16]
 800d0c4:	4650      	mov	r0, sl
 800d0c6:	f7ff feaf 	bl	800ce28 <_free_r>
 800d0ca:	230c      	movs	r3, #12
 800d0cc:	f8ca 3000 	str.w	r3, [sl]
 800d0d0:	89a3      	ldrh	r3, [r4, #12]
 800d0d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d0dc:	e7e9      	b.n	800d0b2 <__ssputs_r+0x8a>
	...

0800d0e0 <_svfiprintf_r>:
 800d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0e4:	4698      	mov	r8, r3
 800d0e6:	898b      	ldrh	r3, [r1, #12]
 800d0e8:	061b      	lsls	r3, r3, #24
 800d0ea:	b09d      	sub	sp, #116	@ 0x74
 800d0ec:	4607      	mov	r7, r0
 800d0ee:	460d      	mov	r5, r1
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	d510      	bpl.n	800d116 <_svfiprintf_r+0x36>
 800d0f4:	690b      	ldr	r3, [r1, #16]
 800d0f6:	b973      	cbnz	r3, 800d116 <_svfiprintf_r+0x36>
 800d0f8:	2140      	movs	r1, #64	@ 0x40
 800d0fa:	f7ff ff09 	bl	800cf10 <_malloc_r>
 800d0fe:	6028      	str	r0, [r5, #0]
 800d100:	6128      	str	r0, [r5, #16]
 800d102:	b930      	cbnz	r0, 800d112 <_svfiprintf_r+0x32>
 800d104:	230c      	movs	r3, #12
 800d106:	603b      	str	r3, [r7, #0]
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	b01d      	add	sp, #116	@ 0x74
 800d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d112:	2340      	movs	r3, #64	@ 0x40
 800d114:	616b      	str	r3, [r5, #20]
 800d116:	2300      	movs	r3, #0
 800d118:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11a:	2320      	movs	r3, #32
 800d11c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d120:	f8cd 800c 	str.w	r8, [sp, #12]
 800d124:	2330      	movs	r3, #48	@ 0x30
 800d126:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d2c4 <_svfiprintf_r+0x1e4>
 800d12a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d12e:	f04f 0901 	mov.w	r9, #1
 800d132:	4623      	mov	r3, r4
 800d134:	469a      	mov	sl, r3
 800d136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d13a:	b10a      	cbz	r2, 800d140 <_svfiprintf_r+0x60>
 800d13c:	2a25      	cmp	r2, #37	@ 0x25
 800d13e:	d1f9      	bne.n	800d134 <_svfiprintf_r+0x54>
 800d140:	ebba 0b04 	subs.w	fp, sl, r4
 800d144:	d00b      	beq.n	800d15e <_svfiprintf_r+0x7e>
 800d146:	465b      	mov	r3, fp
 800d148:	4622      	mov	r2, r4
 800d14a:	4629      	mov	r1, r5
 800d14c:	4638      	mov	r0, r7
 800d14e:	f7ff ff6b 	bl	800d028 <__ssputs_r>
 800d152:	3001      	adds	r0, #1
 800d154:	f000 80a7 	beq.w	800d2a6 <_svfiprintf_r+0x1c6>
 800d158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d15a:	445a      	add	r2, fp
 800d15c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d15e:	f89a 3000 	ldrb.w	r3, [sl]
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 809f 	beq.w	800d2a6 <_svfiprintf_r+0x1c6>
 800d168:	2300      	movs	r3, #0
 800d16a:	f04f 32ff 	mov.w	r2, #4294967295
 800d16e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d172:	f10a 0a01 	add.w	sl, sl, #1
 800d176:	9304      	str	r3, [sp, #16]
 800d178:	9307      	str	r3, [sp, #28]
 800d17a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d17e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d180:	4654      	mov	r4, sl
 800d182:	2205      	movs	r2, #5
 800d184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d188:	484e      	ldr	r0, [pc, #312]	@ (800d2c4 <_svfiprintf_r+0x1e4>)
 800d18a:	f7f3 f839 	bl	8000200 <memchr>
 800d18e:	9a04      	ldr	r2, [sp, #16]
 800d190:	b9d8      	cbnz	r0, 800d1ca <_svfiprintf_r+0xea>
 800d192:	06d0      	lsls	r0, r2, #27
 800d194:	bf44      	itt	mi
 800d196:	2320      	movmi	r3, #32
 800d198:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d19c:	0711      	lsls	r1, r2, #28
 800d19e:	bf44      	itt	mi
 800d1a0:	232b      	movmi	r3, #43	@ 0x2b
 800d1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1ac:	d015      	beq.n	800d1da <_svfiprintf_r+0xfa>
 800d1ae:	9a07      	ldr	r2, [sp, #28]
 800d1b0:	4654      	mov	r4, sl
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	f04f 0c0a 	mov.w	ip, #10
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1be:	3b30      	subs	r3, #48	@ 0x30
 800d1c0:	2b09      	cmp	r3, #9
 800d1c2:	d94b      	bls.n	800d25c <_svfiprintf_r+0x17c>
 800d1c4:	b1b0      	cbz	r0, 800d1f4 <_svfiprintf_r+0x114>
 800d1c6:	9207      	str	r2, [sp, #28]
 800d1c8:	e014      	b.n	800d1f4 <_svfiprintf_r+0x114>
 800d1ca:	eba0 0308 	sub.w	r3, r0, r8
 800d1ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d1d2:	4313      	orrs	r3, r2
 800d1d4:	9304      	str	r3, [sp, #16]
 800d1d6:	46a2      	mov	sl, r4
 800d1d8:	e7d2      	b.n	800d180 <_svfiprintf_r+0xa0>
 800d1da:	9b03      	ldr	r3, [sp, #12]
 800d1dc:	1d19      	adds	r1, r3, #4
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	9103      	str	r1, [sp, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	bfbb      	ittet	lt
 800d1e6:	425b      	neglt	r3, r3
 800d1e8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1ec:	9307      	strge	r3, [sp, #28]
 800d1ee:	9307      	strlt	r3, [sp, #28]
 800d1f0:	bfb8      	it	lt
 800d1f2:	9204      	strlt	r2, [sp, #16]
 800d1f4:	7823      	ldrb	r3, [r4, #0]
 800d1f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d1f8:	d10a      	bne.n	800d210 <_svfiprintf_r+0x130>
 800d1fa:	7863      	ldrb	r3, [r4, #1]
 800d1fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d1fe:	d132      	bne.n	800d266 <_svfiprintf_r+0x186>
 800d200:	9b03      	ldr	r3, [sp, #12]
 800d202:	1d1a      	adds	r2, r3, #4
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	9203      	str	r2, [sp, #12]
 800d208:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d20c:	3402      	adds	r4, #2
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d2d4 <_svfiprintf_r+0x1f4>
 800d214:	7821      	ldrb	r1, [r4, #0]
 800d216:	2203      	movs	r2, #3
 800d218:	4650      	mov	r0, sl
 800d21a:	f7f2 fff1 	bl	8000200 <memchr>
 800d21e:	b138      	cbz	r0, 800d230 <_svfiprintf_r+0x150>
 800d220:	9b04      	ldr	r3, [sp, #16]
 800d222:	eba0 000a 	sub.w	r0, r0, sl
 800d226:	2240      	movs	r2, #64	@ 0x40
 800d228:	4082      	lsls	r2, r0
 800d22a:	4313      	orrs	r3, r2
 800d22c:	3401      	adds	r4, #1
 800d22e:	9304      	str	r3, [sp, #16]
 800d230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d234:	4824      	ldr	r0, [pc, #144]	@ (800d2c8 <_svfiprintf_r+0x1e8>)
 800d236:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d23a:	2206      	movs	r2, #6
 800d23c:	f7f2 ffe0 	bl	8000200 <memchr>
 800d240:	2800      	cmp	r0, #0
 800d242:	d036      	beq.n	800d2b2 <_svfiprintf_r+0x1d2>
 800d244:	4b21      	ldr	r3, [pc, #132]	@ (800d2cc <_svfiprintf_r+0x1ec>)
 800d246:	bb1b      	cbnz	r3, 800d290 <_svfiprintf_r+0x1b0>
 800d248:	9b03      	ldr	r3, [sp, #12]
 800d24a:	3307      	adds	r3, #7
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	3308      	adds	r3, #8
 800d252:	9303      	str	r3, [sp, #12]
 800d254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d256:	4433      	add	r3, r6
 800d258:	9309      	str	r3, [sp, #36]	@ 0x24
 800d25a:	e76a      	b.n	800d132 <_svfiprintf_r+0x52>
 800d25c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d260:	460c      	mov	r4, r1
 800d262:	2001      	movs	r0, #1
 800d264:	e7a8      	b.n	800d1b8 <_svfiprintf_r+0xd8>
 800d266:	2300      	movs	r3, #0
 800d268:	3401      	adds	r4, #1
 800d26a:	9305      	str	r3, [sp, #20]
 800d26c:	4619      	mov	r1, r3
 800d26e:	f04f 0c0a 	mov.w	ip, #10
 800d272:	4620      	mov	r0, r4
 800d274:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d278:	3a30      	subs	r2, #48	@ 0x30
 800d27a:	2a09      	cmp	r2, #9
 800d27c:	d903      	bls.n	800d286 <_svfiprintf_r+0x1a6>
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0c6      	beq.n	800d210 <_svfiprintf_r+0x130>
 800d282:	9105      	str	r1, [sp, #20]
 800d284:	e7c4      	b.n	800d210 <_svfiprintf_r+0x130>
 800d286:	fb0c 2101 	mla	r1, ip, r1, r2
 800d28a:	4604      	mov	r4, r0
 800d28c:	2301      	movs	r3, #1
 800d28e:	e7f0      	b.n	800d272 <_svfiprintf_r+0x192>
 800d290:	ab03      	add	r3, sp, #12
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	462a      	mov	r2, r5
 800d296:	4b0e      	ldr	r3, [pc, #56]	@ (800d2d0 <_svfiprintf_r+0x1f0>)
 800d298:	a904      	add	r1, sp, #16
 800d29a:	4638      	mov	r0, r7
 800d29c:	f3af 8000 	nop.w
 800d2a0:	1c42      	adds	r2, r0, #1
 800d2a2:	4606      	mov	r6, r0
 800d2a4:	d1d6      	bne.n	800d254 <_svfiprintf_r+0x174>
 800d2a6:	89ab      	ldrh	r3, [r5, #12]
 800d2a8:	065b      	lsls	r3, r3, #25
 800d2aa:	f53f af2d 	bmi.w	800d108 <_svfiprintf_r+0x28>
 800d2ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d2b0:	e72c      	b.n	800d10c <_svfiprintf_r+0x2c>
 800d2b2:	ab03      	add	r3, sp, #12
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	462a      	mov	r2, r5
 800d2b8:	4b05      	ldr	r3, [pc, #20]	@ (800d2d0 <_svfiprintf_r+0x1f0>)
 800d2ba:	a904      	add	r1, sp, #16
 800d2bc:	4638      	mov	r0, r7
 800d2be:	f000 f9bb 	bl	800d638 <_printf_i>
 800d2c2:	e7ed      	b.n	800d2a0 <_svfiprintf_r+0x1c0>
 800d2c4:	0800eb03 	.word	0x0800eb03
 800d2c8:	0800eb0d 	.word	0x0800eb0d
 800d2cc:	00000000 	.word	0x00000000
 800d2d0:	0800d029 	.word	0x0800d029
 800d2d4:	0800eb09 	.word	0x0800eb09

0800d2d8 <__sfputc_r>:
 800d2d8:	6893      	ldr	r3, [r2, #8]
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	b410      	push	{r4}
 800d2e0:	6093      	str	r3, [r2, #8]
 800d2e2:	da08      	bge.n	800d2f6 <__sfputc_r+0x1e>
 800d2e4:	6994      	ldr	r4, [r2, #24]
 800d2e6:	42a3      	cmp	r3, r4
 800d2e8:	db01      	blt.n	800d2ee <__sfputc_r+0x16>
 800d2ea:	290a      	cmp	r1, #10
 800d2ec:	d103      	bne.n	800d2f6 <__sfputc_r+0x1e>
 800d2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2f2:	f7ff bc38 	b.w	800cb66 <__swbuf_r>
 800d2f6:	6813      	ldr	r3, [r2, #0]
 800d2f8:	1c58      	adds	r0, r3, #1
 800d2fa:	6010      	str	r0, [r2, #0]
 800d2fc:	7019      	strb	r1, [r3, #0]
 800d2fe:	4608      	mov	r0, r1
 800d300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <__sfputs_r>:
 800d306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d308:	4606      	mov	r6, r0
 800d30a:	460f      	mov	r7, r1
 800d30c:	4614      	mov	r4, r2
 800d30e:	18d5      	adds	r5, r2, r3
 800d310:	42ac      	cmp	r4, r5
 800d312:	d101      	bne.n	800d318 <__sfputs_r+0x12>
 800d314:	2000      	movs	r0, #0
 800d316:	e007      	b.n	800d328 <__sfputs_r+0x22>
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	463a      	mov	r2, r7
 800d31e:	4630      	mov	r0, r6
 800d320:	f7ff ffda 	bl	800d2d8 <__sfputc_r>
 800d324:	1c43      	adds	r3, r0, #1
 800d326:	d1f3      	bne.n	800d310 <__sfputs_r+0xa>
 800d328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d32c <_vfiprintf_r>:
 800d32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d330:	460d      	mov	r5, r1
 800d332:	b09d      	sub	sp, #116	@ 0x74
 800d334:	4614      	mov	r4, r2
 800d336:	4698      	mov	r8, r3
 800d338:	4606      	mov	r6, r0
 800d33a:	b118      	cbz	r0, 800d344 <_vfiprintf_r+0x18>
 800d33c:	6a03      	ldr	r3, [r0, #32]
 800d33e:	b90b      	cbnz	r3, 800d344 <_vfiprintf_r+0x18>
 800d340:	f7ff fb44 	bl	800c9cc <__sinit>
 800d344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d346:	07d9      	lsls	r1, r3, #31
 800d348:	d405      	bmi.n	800d356 <_vfiprintf_r+0x2a>
 800d34a:	89ab      	ldrh	r3, [r5, #12]
 800d34c:	059a      	lsls	r2, r3, #22
 800d34e:	d402      	bmi.n	800d356 <_vfiprintf_r+0x2a>
 800d350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d352:	f7ff fd40 	bl	800cdd6 <__retarget_lock_acquire_recursive>
 800d356:	89ab      	ldrh	r3, [r5, #12]
 800d358:	071b      	lsls	r3, r3, #28
 800d35a:	d501      	bpl.n	800d360 <_vfiprintf_r+0x34>
 800d35c:	692b      	ldr	r3, [r5, #16]
 800d35e:	b99b      	cbnz	r3, 800d388 <_vfiprintf_r+0x5c>
 800d360:	4629      	mov	r1, r5
 800d362:	4630      	mov	r0, r6
 800d364:	f7ff fc3e 	bl	800cbe4 <__swsetup_r>
 800d368:	b170      	cbz	r0, 800d388 <_vfiprintf_r+0x5c>
 800d36a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d36c:	07dc      	lsls	r4, r3, #31
 800d36e:	d504      	bpl.n	800d37a <_vfiprintf_r+0x4e>
 800d370:	f04f 30ff 	mov.w	r0, #4294967295
 800d374:	b01d      	add	sp, #116	@ 0x74
 800d376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	0598      	lsls	r0, r3, #22
 800d37e:	d4f7      	bmi.n	800d370 <_vfiprintf_r+0x44>
 800d380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d382:	f7ff fd29 	bl	800cdd8 <__retarget_lock_release_recursive>
 800d386:	e7f3      	b.n	800d370 <_vfiprintf_r+0x44>
 800d388:	2300      	movs	r3, #0
 800d38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d38c:	2320      	movs	r3, #32
 800d38e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d392:	f8cd 800c 	str.w	r8, [sp, #12]
 800d396:	2330      	movs	r3, #48	@ 0x30
 800d398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d548 <_vfiprintf_r+0x21c>
 800d39c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3a0:	f04f 0901 	mov.w	r9, #1
 800d3a4:	4623      	mov	r3, r4
 800d3a6:	469a      	mov	sl, r3
 800d3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ac:	b10a      	cbz	r2, 800d3b2 <_vfiprintf_r+0x86>
 800d3ae:	2a25      	cmp	r2, #37	@ 0x25
 800d3b0:	d1f9      	bne.n	800d3a6 <_vfiprintf_r+0x7a>
 800d3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b6:	d00b      	beq.n	800d3d0 <_vfiprintf_r+0xa4>
 800d3b8:	465b      	mov	r3, fp
 800d3ba:	4622      	mov	r2, r4
 800d3bc:	4629      	mov	r1, r5
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7ff ffa1 	bl	800d306 <__sfputs_r>
 800d3c4:	3001      	adds	r0, #1
 800d3c6:	f000 80a7 	beq.w	800d518 <_vfiprintf_r+0x1ec>
 800d3ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3cc:	445a      	add	r2, fp
 800d3ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800d3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 809f 	beq.w	800d518 <_vfiprintf_r+0x1ec>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3e4:	f10a 0a01 	add.w	sl, sl, #1
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	9307      	str	r3, [sp, #28]
 800d3ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3f2:	4654      	mov	r4, sl
 800d3f4:	2205      	movs	r2, #5
 800d3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fa:	4853      	ldr	r0, [pc, #332]	@ (800d548 <_vfiprintf_r+0x21c>)
 800d3fc:	f7f2 ff00 	bl	8000200 <memchr>
 800d400:	9a04      	ldr	r2, [sp, #16]
 800d402:	b9d8      	cbnz	r0, 800d43c <_vfiprintf_r+0x110>
 800d404:	06d1      	lsls	r1, r2, #27
 800d406:	bf44      	itt	mi
 800d408:	2320      	movmi	r3, #32
 800d40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d40e:	0713      	lsls	r3, r2, #28
 800d410:	bf44      	itt	mi
 800d412:	232b      	movmi	r3, #43	@ 0x2b
 800d414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d418:	f89a 3000 	ldrb.w	r3, [sl]
 800d41c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d41e:	d015      	beq.n	800d44c <_vfiprintf_r+0x120>
 800d420:	9a07      	ldr	r2, [sp, #28]
 800d422:	4654      	mov	r4, sl
 800d424:	2000      	movs	r0, #0
 800d426:	f04f 0c0a 	mov.w	ip, #10
 800d42a:	4621      	mov	r1, r4
 800d42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d430:	3b30      	subs	r3, #48	@ 0x30
 800d432:	2b09      	cmp	r3, #9
 800d434:	d94b      	bls.n	800d4ce <_vfiprintf_r+0x1a2>
 800d436:	b1b0      	cbz	r0, 800d466 <_vfiprintf_r+0x13a>
 800d438:	9207      	str	r2, [sp, #28]
 800d43a:	e014      	b.n	800d466 <_vfiprintf_r+0x13a>
 800d43c:	eba0 0308 	sub.w	r3, r0, r8
 800d440:	fa09 f303 	lsl.w	r3, r9, r3
 800d444:	4313      	orrs	r3, r2
 800d446:	9304      	str	r3, [sp, #16]
 800d448:	46a2      	mov	sl, r4
 800d44a:	e7d2      	b.n	800d3f2 <_vfiprintf_r+0xc6>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	1d19      	adds	r1, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	9103      	str	r1, [sp, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfbb      	ittet	lt
 800d458:	425b      	neglt	r3, r3
 800d45a:	f042 0202 	orrlt.w	r2, r2, #2
 800d45e:	9307      	strge	r3, [sp, #28]
 800d460:	9307      	strlt	r3, [sp, #28]
 800d462:	bfb8      	it	lt
 800d464:	9204      	strlt	r2, [sp, #16]
 800d466:	7823      	ldrb	r3, [r4, #0]
 800d468:	2b2e      	cmp	r3, #46	@ 0x2e
 800d46a:	d10a      	bne.n	800d482 <_vfiprintf_r+0x156>
 800d46c:	7863      	ldrb	r3, [r4, #1]
 800d46e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d470:	d132      	bne.n	800d4d8 <_vfiprintf_r+0x1ac>
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	1d1a      	adds	r2, r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	9203      	str	r2, [sp, #12]
 800d47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d47e:	3402      	adds	r4, #2
 800d480:	9305      	str	r3, [sp, #20]
 800d482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d558 <_vfiprintf_r+0x22c>
 800d486:	7821      	ldrb	r1, [r4, #0]
 800d488:	2203      	movs	r2, #3
 800d48a:	4650      	mov	r0, sl
 800d48c:	f7f2 feb8 	bl	8000200 <memchr>
 800d490:	b138      	cbz	r0, 800d4a2 <_vfiprintf_r+0x176>
 800d492:	9b04      	ldr	r3, [sp, #16]
 800d494:	eba0 000a 	sub.w	r0, r0, sl
 800d498:	2240      	movs	r2, #64	@ 0x40
 800d49a:	4082      	lsls	r2, r0
 800d49c:	4313      	orrs	r3, r2
 800d49e:	3401      	adds	r4, #1
 800d4a0:	9304      	str	r3, [sp, #16]
 800d4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a6:	4829      	ldr	r0, [pc, #164]	@ (800d54c <_vfiprintf_r+0x220>)
 800d4a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d4ac:	2206      	movs	r2, #6
 800d4ae:	f7f2 fea7 	bl	8000200 <memchr>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d03f      	beq.n	800d536 <_vfiprintf_r+0x20a>
 800d4b6:	4b26      	ldr	r3, [pc, #152]	@ (800d550 <_vfiprintf_r+0x224>)
 800d4b8:	bb1b      	cbnz	r3, 800d502 <_vfiprintf_r+0x1d6>
 800d4ba:	9b03      	ldr	r3, [sp, #12]
 800d4bc:	3307      	adds	r3, #7
 800d4be:	f023 0307 	bic.w	r3, r3, #7
 800d4c2:	3308      	adds	r3, #8
 800d4c4:	9303      	str	r3, [sp, #12]
 800d4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4c8:	443b      	add	r3, r7
 800d4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4cc:	e76a      	b.n	800d3a4 <_vfiprintf_r+0x78>
 800d4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	e7a8      	b.n	800d42a <_vfiprintf_r+0xfe>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	3401      	adds	r4, #1
 800d4dc:	9305      	str	r3, [sp, #20]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	f04f 0c0a 	mov.w	ip, #10
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ea:	3a30      	subs	r2, #48	@ 0x30
 800d4ec:	2a09      	cmp	r2, #9
 800d4ee:	d903      	bls.n	800d4f8 <_vfiprintf_r+0x1cc>
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d0c6      	beq.n	800d482 <_vfiprintf_r+0x156>
 800d4f4:	9105      	str	r1, [sp, #20]
 800d4f6:	e7c4      	b.n	800d482 <_vfiprintf_r+0x156>
 800d4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	2301      	movs	r3, #1
 800d500:	e7f0      	b.n	800d4e4 <_vfiprintf_r+0x1b8>
 800d502:	ab03      	add	r3, sp, #12
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	462a      	mov	r2, r5
 800d508:	4b12      	ldr	r3, [pc, #72]	@ (800d554 <_vfiprintf_r+0x228>)
 800d50a:	a904      	add	r1, sp, #16
 800d50c:	4630      	mov	r0, r6
 800d50e:	f3af 8000 	nop.w
 800d512:	4607      	mov	r7, r0
 800d514:	1c78      	adds	r0, r7, #1
 800d516:	d1d6      	bne.n	800d4c6 <_vfiprintf_r+0x19a>
 800d518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d51a:	07d9      	lsls	r1, r3, #31
 800d51c:	d405      	bmi.n	800d52a <_vfiprintf_r+0x1fe>
 800d51e:	89ab      	ldrh	r3, [r5, #12]
 800d520:	059a      	lsls	r2, r3, #22
 800d522:	d402      	bmi.n	800d52a <_vfiprintf_r+0x1fe>
 800d524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d526:	f7ff fc57 	bl	800cdd8 <__retarget_lock_release_recursive>
 800d52a:	89ab      	ldrh	r3, [r5, #12]
 800d52c:	065b      	lsls	r3, r3, #25
 800d52e:	f53f af1f 	bmi.w	800d370 <_vfiprintf_r+0x44>
 800d532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d534:	e71e      	b.n	800d374 <_vfiprintf_r+0x48>
 800d536:	ab03      	add	r3, sp, #12
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	462a      	mov	r2, r5
 800d53c:	4b05      	ldr	r3, [pc, #20]	@ (800d554 <_vfiprintf_r+0x228>)
 800d53e:	a904      	add	r1, sp, #16
 800d540:	4630      	mov	r0, r6
 800d542:	f000 f879 	bl	800d638 <_printf_i>
 800d546:	e7e4      	b.n	800d512 <_vfiprintf_r+0x1e6>
 800d548:	0800eb03 	.word	0x0800eb03
 800d54c:	0800eb0d 	.word	0x0800eb0d
 800d550:	00000000 	.word	0x00000000
 800d554:	0800d307 	.word	0x0800d307
 800d558:	0800eb09 	.word	0x0800eb09

0800d55c <_printf_common>:
 800d55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d560:	4616      	mov	r6, r2
 800d562:	4698      	mov	r8, r3
 800d564:	688a      	ldr	r2, [r1, #8]
 800d566:	690b      	ldr	r3, [r1, #16]
 800d568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d56c:	4293      	cmp	r3, r2
 800d56e:	bfb8      	it	lt
 800d570:	4613      	movlt	r3, r2
 800d572:	6033      	str	r3, [r6, #0]
 800d574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d578:	4607      	mov	r7, r0
 800d57a:	460c      	mov	r4, r1
 800d57c:	b10a      	cbz	r2, 800d582 <_printf_common+0x26>
 800d57e:	3301      	adds	r3, #1
 800d580:	6033      	str	r3, [r6, #0]
 800d582:	6823      	ldr	r3, [r4, #0]
 800d584:	0699      	lsls	r1, r3, #26
 800d586:	bf42      	ittt	mi
 800d588:	6833      	ldrmi	r3, [r6, #0]
 800d58a:	3302      	addmi	r3, #2
 800d58c:	6033      	strmi	r3, [r6, #0]
 800d58e:	6825      	ldr	r5, [r4, #0]
 800d590:	f015 0506 	ands.w	r5, r5, #6
 800d594:	d106      	bne.n	800d5a4 <_printf_common+0x48>
 800d596:	f104 0a19 	add.w	sl, r4, #25
 800d59a:	68e3      	ldr	r3, [r4, #12]
 800d59c:	6832      	ldr	r2, [r6, #0]
 800d59e:	1a9b      	subs	r3, r3, r2
 800d5a0:	42ab      	cmp	r3, r5
 800d5a2:	dc26      	bgt.n	800d5f2 <_printf_common+0x96>
 800d5a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d5a8:	6822      	ldr	r2, [r4, #0]
 800d5aa:	3b00      	subs	r3, #0
 800d5ac:	bf18      	it	ne
 800d5ae:	2301      	movne	r3, #1
 800d5b0:	0692      	lsls	r2, r2, #26
 800d5b2:	d42b      	bmi.n	800d60c <_printf_common+0xb0>
 800d5b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d5b8:	4641      	mov	r1, r8
 800d5ba:	4638      	mov	r0, r7
 800d5bc:	47c8      	blx	r9
 800d5be:	3001      	adds	r0, #1
 800d5c0:	d01e      	beq.n	800d600 <_printf_common+0xa4>
 800d5c2:	6823      	ldr	r3, [r4, #0]
 800d5c4:	6922      	ldr	r2, [r4, #16]
 800d5c6:	f003 0306 	and.w	r3, r3, #6
 800d5ca:	2b04      	cmp	r3, #4
 800d5cc:	bf02      	ittt	eq
 800d5ce:	68e5      	ldreq	r5, [r4, #12]
 800d5d0:	6833      	ldreq	r3, [r6, #0]
 800d5d2:	1aed      	subeq	r5, r5, r3
 800d5d4:	68a3      	ldr	r3, [r4, #8]
 800d5d6:	bf0c      	ite	eq
 800d5d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5dc:	2500      	movne	r5, #0
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	bfc4      	itt	gt
 800d5e2:	1a9b      	subgt	r3, r3, r2
 800d5e4:	18ed      	addgt	r5, r5, r3
 800d5e6:	2600      	movs	r6, #0
 800d5e8:	341a      	adds	r4, #26
 800d5ea:	42b5      	cmp	r5, r6
 800d5ec:	d11a      	bne.n	800d624 <_printf_common+0xc8>
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	e008      	b.n	800d604 <_printf_common+0xa8>
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	4652      	mov	r2, sl
 800d5f6:	4641      	mov	r1, r8
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	47c8      	blx	r9
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	d103      	bne.n	800d608 <_printf_common+0xac>
 800d600:	f04f 30ff 	mov.w	r0, #4294967295
 800d604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d608:	3501      	adds	r5, #1
 800d60a:	e7c6      	b.n	800d59a <_printf_common+0x3e>
 800d60c:	18e1      	adds	r1, r4, r3
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	2030      	movs	r0, #48	@ 0x30
 800d612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d616:	4422      	add	r2, r4
 800d618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d61c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d620:	3302      	adds	r3, #2
 800d622:	e7c7      	b.n	800d5b4 <_printf_common+0x58>
 800d624:	2301      	movs	r3, #1
 800d626:	4622      	mov	r2, r4
 800d628:	4641      	mov	r1, r8
 800d62a:	4638      	mov	r0, r7
 800d62c:	47c8      	blx	r9
 800d62e:	3001      	adds	r0, #1
 800d630:	d0e6      	beq.n	800d600 <_printf_common+0xa4>
 800d632:	3601      	adds	r6, #1
 800d634:	e7d9      	b.n	800d5ea <_printf_common+0x8e>
	...

0800d638 <_printf_i>:
 800d638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d63c:	7e0f      	ldrb	r7, [r1, #24]
 800d63e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d640:	2f78      	cmp	r7, #120	@ 0x78
 800d642:	4691      	mov	r9, r2
 800d644:	4680      	mov	r8, r0
 800d646:	460c      	mov	r4, r1
 800d648:	469a      	mov	sl, r3
 800d64a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d64e:	d807      	bhi.n	800d660 <_printf_i+0x28>
 800d650:	2f62      	cmp	r7, #98	@ 0x62
 800d652:	d80a      	bhi.n	800d66a <_printf_i+0x32>
 800d654:	2f00      	cmp	r7, #0
 800d656:	f000 80d2 	beq.w	800d7fe <_printf_i+0x1c6>
 800d65a:	2f58      	cmp	r7, #88	@ 0x58
 800d65c:	f000 80b9 	beq.w	800d7d2 <_printf_i+0x19a>
 800d660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d668:	e03a      	b.n	800d6e0 <_printf_i+0xa8>
 800d66a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d66e:	2b15      	cmp	r3, #21
 800d670:	d8f6      	bhi.n	800d660 <_printf_i+0x28>
 800d672:	a101      	add	r1, pc, #4	@ (adr r1, 800d678 <_printf_i+0x40>)
 800d674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d678:	0800d6d1 	.word	0x0800d6d1
 800d67c:	0800d6e5 	.word	0x0800d6e5
 800d680:	0800d661 	.word	0x0800d661
 800d684:	0800d661 	.word	0x0800d661
 800d688:	0800d661 	.word	0x0800d661
 800d68c:	0800d661 	.word	0x0800d661
 800d690:	0800d6e5 	.word	0x0800d6e5
 800d694:	0800d661 	.word	0x0800d661
 800d698:	0800d661 	.word	0x0800d661
 800d69c:	0800d661 	.word	0x0800d661
 800d6a0:	0800d661 	.word	0x0800d661
 800d6a4:	0800d7e5 	.word	0x0800d7e5
 800d6a8:	0800d70f 	.word	0x0800d70f
 800d6ac:	0800d79f 	.word	0x0800d79f
 800d6b0:	0800d661 	.word	0x0800d661
 800d6b4:	0800d661 	.word	0x0800d661
 800d6b8:	0800d807 	.word	0x0800d807
 800d6bc:	0800d661 	.word	0x0800d661
 800d6c0:	0800d70f 	.word	0x0800d70f
 800d6c4:	0800d661 	.word	0x0800d661
 800d6c8:	0800d661 	.word	0x0800d661
 800d6cc:	0800d7a7 	.word	0x0800d7a7
 800d6d0:	6833      	ldr	r3, [r6, #0]
 800d6d2:	1d1a      	adds	r2, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6032      	str	r2, [r6, #0]
 800d6d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e09d      	b.n	800d820 <_printf_i+0x1e8>
 800d6e4:	6833      	ldr	r3, [r6, #0]
 800d6e6:	6820      	ldr	r0, [r4, #0]
 800d6e8:	1d19      	adds	r1, r3, #4
 800d6ea:	6031      	str	r1, [r6, #0]
 800d6ec:	0606      	lsls	r6, r0, #24
 800d6ee:	d501      	bpl.n	800d6f4 <_printf_i+0xbc>
 800d6f0:	681d      	ldr	r5, [r3, #0]
 800d6f2:	e003      	b.n	800d6fc <_printf_i+0xc4>
 800d6f4:	0645      	lsls	r5, r0, #25
 800d6f6:	d5fb      	bpl.n	800d6f0 <_printf_i+0xb8>
 800d6f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	da03      	bge.n	800d708 <_printf_i+0xd0>
 800d700:	232d      	movs	r3, #45	@ 0x2d
 800d702:	426d      	negs	r5, r5
 800d704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d708:	4859      	ldr	r0, [pc, #356]	@ (800d870 <_printf_i+0x238>)
 800d70a:	230a      	movs	r3, #10
 800d70c:	e011      	b.n	800d732 <_printf_i+0xfa>
 800d70e:	6821      	ldr	r1, [r4, #0]
 800d710:	6833      	ldr	r3, [r6, #0]
 800d712:	0608      	lsls	r0, r1, #24
 800d714:	f853 5b04 	ldr.w	r5, [r3], #4
 800d718:	d402      	bmi.n	800d720 <_printf_i+0xe8>
 800d71a:	0649      	lsls	r1, r1, #25
 800d71c:	bf48      	it	mi
 800d71e:	b2ad      	uxthmi	r5, r5
 800d720:	2f6f      	cmp	r7, #111	@ 0x6f
 800d722:	4853      	ldr	r0, [pc, #332]	@ (800d870 <_printf_i+0x238>)
 800d724:	6033      	str	r3, [r6, #0]
 800d726:	bf14      	ite	ne
 800d728:	230a      	movne	r3, #10
 800d72a:	2308      	moveq	r3, #8
 800d72c:	2100      	movs	r1, #0
 800d72e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d732:	6866      	ldr	r6, [r4, #4]
 800d734:	60a6      	str	r6, [r4, #8]
 800d736:	2e00      	cmp	r6, #0
 800d738:	bfa2      	ittt	ge
 800d73a:	6821      	ldrge	r1, [r4, #0]
 800d73c:	f021 0104 	bicge.w	r1, r1, #4
 800d740:	6021      	strge	r1, [r4, #0]
 800d742:	b90d      	cbnz	r5, 800d748 <_printf_i+0x110>
 800d744:	2e00      	cmp	r6, #0
 800d746:	d04b      	beq.n	800d7e0 <_printf_i+0x1a8>
 800d748:	4616      	mov	r6, r2
 800d74a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d74e:	fb03 5711 	mls	r7, r3, r1, r5
 800d752:	5dc7      	ldrb	r7, [r0, r7]
 800d754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d758:	462f      	mov	r7, r5
 800d75a:	42bb      	cmp	r3, r7
 800d75c:	460d      	mov	r5, r1
 800d75e:	d9f4      	bls.n	800d74a <_printf_i+0x112>
 800d760:	2b08      	cmp	r3, #8
 800d762:	d10b      	bne.n	800d77c <_printf_i+0x144>
 800d764:	6823      	ldr	r3, [r4, #0]
 800d766:	07df      	lsls	r7, r3, #31
 800d768:	d508      	bpl.n	800d77c <_printf_i+0x144>
 800d76a:	6923      	ldr	r3, [r4, #16]
 800d76c:	6861      	ldr	r1, [r4, #4]
 800d76e:	4299      	cmp	r1, r3
 800d770:	bfde      	ittt	le
 800d772:	2330      	movle	r3, #48	@ 0x30
 800d774:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d77c:	1b92      	subs	r2, r2, r6
 800d77e:	6122      	str	r2, [r4, #16]
 800d780:	f8cd a000 	str.w	sl, [sp]
 800d784:	464b      	mov	r3, r9
 800d786:	aa03      	add	r2, sp, #12
 800d788:	4621      	mov	r1, r4
 800d78a:	4640      	mov	r0, r8
 800d78c:	f7ff fee6 	bl	800d55c <_printf_common>
 800d790:	3001      	adds	r0, #1
 800d792:	d14a      	bne.n	800d82a <_printf_i+0x1f2>
 800d794:	f04f 30ff 	mov.w	r0, #4294967295
 800d798:	b004      	add	sp, #16
 800d79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	f043 0320 	orr.w	r3, r3, #32
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	4833      	ldr	r0, [pc, #204]	@ (800d874 <_printf_i+0x23c>)
 800d7a8:	2778      	movs	r7, #120	@ 0x78
 800d7aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	6831      	ldr	r1, [r6, #0]
 800d7b2:	061f      	lsls	r7, r3, #24
 800d7b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d7b8:	d402      	bmi.n	800d7c0 <_printf_i+0x188>
 800d7ba:	065f      	lsls	r7, r3, #25
 800d7bc:	bf48      	it	mi
 800d7be:	b2ad      	uxthmi	r5, r5
 800d7c0:	6031      	str	r1, [r6, #0]
 800d7c2:	07d9      	lsls	r1, r3, #31
 800d7c4:	bf44      	itt	mi
 800d7c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d7ca:	6023      	strmi	r3, [r4, #0]
 800d7cc:	b11d      	cbz	r5, 800d7d6 <_printf_i+0x19e>
 800d7ce:	2310      	movs	r3, #16
 800d7d0:	e7ac      	b.n	800d72c <_printf_i+0xf4>
 800d7d2:	4827      	ldr	r0, [pc, #156]	@ (800d870 <_printf_i+0x238>)
 800d7d4:	e7e9      	b.n	800d7aa <_printf_i+0x172>
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	f023 0320 	bic.w	r3, r3, #32
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	e7f6      	b.n	800d7ce <_printf_i+0x196>
 800d7e0:	4616      	mov	r6, r2
 800d7e2:	e7bd      	b.n	800d760 <_printf_i+0x128>
 800d7e4:	6833      	ldr	r3, [r6, #0]
 800d7e6:	6825      	ldr	r5, [r4, #0]
 800d7e8:	6961      	ldr	r1, [r4, #20]
 800d7ea:	1d18      	adds	r0, r3, #4
 800d7ec:	6030      	str	r0, [r6, #0]
 800d7ee:	062e      	lsls	r6, r5, #24
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	d501      	bpl.n	800d7f8 <_printf_i+0x1c0>
 800d7f4:	6019      	str	r1, [r3, #0]
 800d7f6:	e002      	b.n	800d7fe <_printf_i+0x1c6>
 800d7f8:	0668      	lsls	r0, r5, #25
 800d7fa:	d5fb      	bpl.n	800d7f4 <_printf_i+0x1bc>
 800d7fc:	8019      	strh	r1, [r3, #0]
 800d7fe:	2300      	movs	r3, #0
 800d800:	6123      	str	r3, [r4, #16]
 800d802:	4616      	mov	r6, r2
 800d804:	e7bc      	b.n	800d780 <_printf_i+0x148>
 800d806:	6833      	ldr	r3, [r6, #0]
 800d808:	1d1a      	adds	r2, r3, #4
 800d80a:	6032      	str	r2, [r6, #0]
 800d80c:	681e      	ldr	r6, [r3, #0]
 800d80e:	6862      	ldr	r2, [r4, #4]
 800d810:	2100      	movs	r1, #0
 800d812:	4630      	mov	r0, r6
 800d814:	f7f2 fcf4 	bl	8000200 <memchr>
 800d818:	b108      	cbz	r0, 800d81e <_printf_i+0x1e6>
 800d81a:	1b80      	subs	r0, r0, r6
 800d81c:	6060      	str	r0, [r4, #4]
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	6123      	str	r3, [r4, #16]
 800d822:	2300      	movs	r3, #0
 800d824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d828:	e7aa      	b.n	800d780 <_printf_i+0x148>
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	4632      	mov	r2, r6
 800d82e:	4649      	mov	r1, r9
 800d830:	4640      	mov	r0, r8
 800d832:	47d0      	blx	sl
 800d834:	3001      	adds	r0, #1
 800d836:	d0ad      	beq.n	800d794 <_printf_i+0x15c>
 800d838:	6823      	ldr	r3, [r4, #0]
 800d83a:	079b      	lsls	r3, r3, #30
 800d83c:	d413      	bmi.n	800d866 <_printf_i+0x22e>
 800d83e:	68e0      	ldr	r0, [r4, #12]
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	4298      	cmp	r0, r3
 800d844:	bfb8      	it	lt
 800d846:	4618      	movlt	r0, r3
 800d848:	e7a6      	b.n	800d798 <_printf_i+0x160>
 800d84a:	2301      	movs	r3, #1
 800d84c:	4632      	mov	r2, r6
 800d84e:	4649      	mov	r1, r9
 800d850:	4640      	mov	r0, r8
 800d852:	47d0      	blx	sl
 800d854:	3001      	adds	r0, #1
 800d856:	d09d      	beq.n	800d794 <_printf_i+0x15c>
 800d858:	3501      	adds	r5, #1
 800d85a:	68e3      	ldr	r3, [r4, #12]
 800d85c:	9903      	ldr	r1, [sp, #12]
 800d85e:	1a5b      	subs	r3, r3, r1
 800d860:	42ab      	cmp	r3, r5
 800d862:	dcf2      	bgt.n	800d84a <_printf_i+0x212>
 800d864:	e7eb      	b.n	800d83e <_printf_i+0x206>
 800d866:	2500      	movs	r5, #0
 800d868:	f104 0619 	add.w	r6, r4, #25
 800d86c:	e7f5      	b.n	800d85a <_printf_i+0x222>
 800d86e:	bf00      	nop
 800d870:	0800eb14 	.word	0x0800eb14
 800d874:	0800eb25 	.word	0x0800eb25

0800d878 <__sflush_r>:
 800d878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d880:	0716      	lsls	r6, r2, #28
 800d882:	4605      	mov	r5, r0
 800d884:	460c      	mov	r4, r1
 800d886:	d454      	bmi.n	800d932 <__sflush_r+0xba>
 800d888:	684b      	ldr	r3, [r1, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	dc02      	bgt.n	800d894 <__sflush_r+0x1c>
 800d88e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d890:	2b00      	cmp	r3, #0
 800d892:	dd48      	ble.n	800d926 <__sflush_r+0xae>
 800d894:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d896:	2e00      	cmp	r6, #0
 800d898:	d045      	beq.n	800d926 <__sflush_r+0xae>
 800d89a:	2300      	movs	r3, #0
 800d89c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8a0:	682f      	ldr	r7, [r5, #0]
 800d8a2:	6a21      	ldr	r1, [r4, #32]
 800d8a4:	602b      	str	r3, [r5, #0]
 800d8a6:	d030      	beq.n	800d90a <__sflush_r+0x92>
 800d8a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	0759      	lsls	r1, r3, #29
 800d8ae:	d505      	bpl.n	800d8bc <__sflush_r+0x44>
 800d8b0:	6863      	ldr	r3, [r4, #4]
 800d8b2:	1ad2      	subs	r2, r2, r3
 800d8b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8b6:	b10b      	cbz	r3, 800d8bc <__sflush_r+0x44>
 800d8b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8ba:	1ad2      	subs	r2, r2, r3
 800d8bc:	2300      	movs	r3, #0
 800d8be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8c0:	6a21      	ldr	r1, [r4, #32]
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	47b0      	blx	r6
 800d8c6:	1c43      	adds	r3, r0, #1
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	d106      	bne.n	800d8da <__sflush_r+0x62>
 800d8cc:	6829      	ldr	r1, [r5, #0]
 800d8ce:	291d      	cmp	r1, #29
 800d8d0:	d82b      	bhi.n	800d92a <__sflush_r+0xb2>
 800d8d2:	4a2a      	ldr	r2, [pc, #168]	@ (800d97c <__sflush_r+0x104>)
 800d8d4:	410a      	asrs	r2, r1
 800d8d6:	07d6      	lsls	r6, r2, #31
 800d8d8:	d427      	bmi.n	800d92a <__sflush_r+0xb2>
 800d8da:	2200      	movs	r2, #0
 800d8dc:	6062      	str	r2, [r4, #4]
 800d8de:	04d9      	lsls	r1, r3, #19
 800d8e0:	6922      	ldr	r2, [r4, #16]
 800d8e2:	6022      	str	r2, [r4, #0]
 800d8e4:	d504      	bpl.n	800d8f0 <__sflush_r+0x78>
 800d8e6:	1c42      	adds	r2, r0, #1
 800d8e8:	d101      	bne.n	800d8ee <__sflush_r+0x76>
 800d8ea:	682b      	ldr	r3, [r5, #0]
 800d8ec:	b903      	cbnz	r3, 800d8f0 <__sflush_r+0x78>
 800d8ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8f2:	602f      	str	r7, [r5, #0]
 800d8f4:	b1b9      	cbz	r1, 800d926 <__sflush_r+0xae>
 800d8f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8fa:	4299      	cmp	r1, r3
 800d8fc:	d002      	beq.n	800d904 <__sflush_r+0x8c>
 800d8fe:	4628      	mov	r0, r5
 800d900:	f7ff fa92 	bl	800ce28 <_free_r>
 800d904:	2300      	movs	r3, #0
 800d906:	6363      	str	r3, [r4, #52]	@ 0x34
 800d908:	e00d      	b.n	800d926 <__sflush_r+0xae>
 800d90a:	2301      	movs	r3, #1
 800d90c:	4628      	mov	r0, r5
 800d90e:	47b0      	blx	r6
 800d910:	4602      	mov	r2, r0
 800d912:	1c50      	adds	r0, r2, #1
 800d914:	d1c9      	bne.n	800d8aa <__sflush_r+0x32>
 800d916:	682b      	ldr	r3, [r5, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d0c6      	beq.n	800d8aa <__sflush_r+0x32>
 800d91c:	2b1d      	cmp	r3, #29
 800d91e:	d001      	beq.n	800d924 <__sflush_r+0xac>
 800d920:	2b16      	cmp	r3, #22
 800d922:	d11e      	bne.n	800d962 <__sflush_r+0xea>
 800d924:	602f      	str	r7, [r5, #0]
 800d926:	2000      	movs	r0, #0
 800d928:	e022      	b.n	800d970 <__sflush_r+0xf8>
 800d92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d92e:	b21b      	sxth	r3, r3
 800d930:	e01b      	b.n	800d96a <__sflush_r+0xf2>
 800d932:	690f      	ldr	r7, [r1, #16]
 800d934:	2f00      	cmp	r7, #0
 800d936:	d0f6      	beq.n	800d926 <__sflush_r+0xae>
 800d938:	0793      	lsls	r3, r2, #30
 800d93a:	680e      	ldr	r6, [r1, #0]
 800d93c:	bf08      	it	eq
 800d93e:	694b      	ldreq	r3, [r1, #20]
 800d940:	600f      	str	r7, [r1, #0]
 800d942:	bf18      	it	ne
 800d944:	2300      	movne	r3, #0
 800d946:	eba6 0807 	sub.w	r8, r6, r7
 800d94a:	608b      	str	r3, [r1, #8]
 800d94c:	f1b8 0f00 	cmp.w	r8, #0
 800d950:	dde9      	ble.n	800d926 <__sflush_r+0xae>
 800d952:	6a21      	ldr	r1, [r4, #32]
 800d954:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d956:	4643      	mov	r3, r8
 800d958:	463a      	mov	r2, r7
 800d95a:	4628      	mov	r0, r5
 800d95c:	47b0      	blx	r6
 800d95e:	2800      	cmp	r0, #0
 800d960:	dc08      	bgt.n	800d974 <__sflush_r+0xfc>
 800d962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	f04f 30ff 	mov.w	r0, #4294967295
 800d970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d974:	4407      	add	r7, r0
 800d976:	eba8 0800 	sub.w	r8, r8, r0
 800d97a:	e7e7      	b.n	800d94c <__sflush_r+0xd4>
 800d97c:	dfbffffe 	.word	0xdfbffffe

0800d980 <_fflush_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	690b      	ldr	r3, [r1, #16]
 800d984:	4605      	mov	r5, r0
 800d986:	460c      	mov	r4, r1
 800d988:	b913      	cbnz	r3, 800d990 <_fflush_r+0x10>
 800d98a:	2500      	movs	r5, #0
 800d98c:	4628      	mov	r0, r5
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	b118      	cbz	r0, 800d99a <_fflush_r+0x1a>
 800d992:	6a03      	ldr	r3, [r0, #32]
 800d994:	b90b      	cbnz	r3, 800d99a <_fflush_r+0x1a>
 800d996:	f7ff f819 	bl	800c9cc <__sinit>
 800d99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d0f3      	beq.n	800d98a <_fflush_r+0xa>
 800d9a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9a4:	07d0      	lsls	r0, r2, #31
 800d9a6:	d404      	bmi.n	800d9b2 <_fflush_r+0x32>
 800d9a8:	0599      	lsls	r1, r3, #22
 800d9aa:	d402      	bmi.n	800d9b2 <_fflush_r+0x32>
 800d9ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ae:	f7ff fa12 	bl	800cdd6 <__retarget_lock_acquire_recursive>
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	4621      	mov	r1, r4
 800d9b6:	f7ff ff5f 	bl	800d878 <__sflush_r>
 800d9ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9bc:	07da      	lsls	r2, r3, #31
 800d9be:	4605      	mov	r5, r0
 800d9c0:	d4e4      	bmi.n	800d98c <_fflush_r+0xc>
 800d9c2:	89a3      	ldrh	r3, [r4, #12]
 800d9c4:	059b      	lsls	r3, r3, #22
 800d9c6:	d4e1      	bmi.n	800d98c <_fflush_r+0xc>
 800d9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ca:	f7ff fa05 	bl	800cdd8 <__retarget_lock_release_recursive>
 800d9ce:	e7dd      	b.n	800d98c <_fflush_r+0xc>

0800d9d0 <fiprintf>:
 800d9d0:	b40e      	push	{r1, r2, r3}
 800d9d2:	b503      	push	{r0, r1, lr}
 800d9d4:	4601      	mov	r1, r0
 800d9d6:	ab03      	add	r3, sp, #12
 800d9d8:	4805      	ldr	r0, [pc, #20]	@ (800d9f0 <fiprintf+0x20>)
 800d9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9de:	6800      	ldr	r0, [r0, #0]
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	f7ff fca3 	bl	800d32c <_vfiprintf_r>
 800d9e6:	b002      	add	sp, #8
 800d9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9ec:	b003      	add	sp, #12
 800d9ee:	4770      	bx	lr
 800d9f0:	20000024 	.word	0x20000024

0800d9f4 <__swhatbuf_r>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	460c      	mov	r4, r1
 800d9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fc:	2900      	cmp	r1, #0
 800d9fe:	b096      	sub	sp, #88	@ 0x58
 800da00:	4615      	mov	r5, r2
 800da02:	461e      	mov	r6, r3
 800da04:	da0d      	bge.n	800da22 <__swhatbuf_r+0x2e>
 800da06:	89a3      	ldrh	r3, [r4, #12]
 800da08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da0c:	f04f 0100 	mov.w	r1, #0
 800da10:	bf14      	ite	ne
 800da12:	2340      	movne	r3, #64	@ 0x40
 800da14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da18:	2000      	movs	r0, #0
 800da1a:	6031      	str	r1, [r6, #0]
 800da1c:	602b      	str	r3, [r5, #0]
 800da1e:	b016      	add	sp, #88	@ 0x58
 800da20:	bd70      	pop	{r4, r5, r6, pc}
 800da22:	466a      	mov	r2, sp
 800da24:	f000 f862 	bl	800daec <_fstat_r>
 800da28:	2800      	cmp	r0, #0
 800da2a:	dbec      	blt.n	800da06 <__swhatbuf_r+0x12>
 800da2c:	9901      	ldr	r1, [sp, #4]
 800da2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da36:	4259      	negs	r1, r3
 800da38:	4159      	adcs	r1, r3
 800da3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da3e:	e7eb      	b.n	800da18 <__swhatbuf_r+0x24>

0800da40 <__smakebuf_r>:
 800da40:	898b      	ldrh	r3, [r1, #12]
 800da42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da44:	079d      	lsls	r5, r3, #30
 800da46:	4606      	mov	r6, r0
 800da48:	460c      	mov	r4, r1
 800da4a:	d507      	bpl.n	800da5c <__smakebuf_r+0x1c>
 800da4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	6123      	str	r3, [r4, #16]
 800da54:	2301      	movs	r3, #1
 800da56:	6163      	str	r3, [r4, #20]
 800da58:	b003      	add	sp, #12
 800da5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da5c:	ab01      	add	r3, sp, #4
 800da5e:	466a      	mov	r2, sp
 800da60:	f7ff ffc8 	bl	800d9f4 <__swhatbuf_r>
 800da64:	9f00      	ldr	r7, [sp, #0]
 800da66:	4605      	mov	r5, r0
 800da68:	4639      	mov	r1, r7
 800da6a:	4630      	mov	r0, r6
 800da6c:	f7ff fa50 	bl	800cf10 <_malloc_r>
 800da70:	b948      	cbnz	r0, 800da86 <__smakebuf_r+0x46>
 800da72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da76:	059a      	lsls	r2, r3, #22
 800da78:	d4ee      	bmi.n	800da58 <__smakebuf_r+0x18>
 800da7a:	f023 0303 	bic.w	r3, r3, #3
 800da7e:	f043 0302 	orr.w	r3, r3, #2
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	e7e2      	b.n	800da4c <__smakebuf_r+0xc>
 800da86:	89a3      	ldrh	r3, [r4, #12]
 800da88:	6020      	str	r0, [r4, #0]
 800da8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da8e:	81a3      	strh	r3, [r4, #12]
 800da90:	9b01      	ldr	r3, [sp, #4]
 800da92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da96:	b15b      	cbz	r3, 800dab0 <__smakebuf_r+0x70>
 800da98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da9c:	4630      	mov	r0, r6
 800da9e:	f000 f837 	bl	800db10 <_isatty_r>
 800daa2:	b128      	cbz	r0, 800dab0 <__smakebuf_r+0x70>
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f023 0303 	bic.w	r3, r3, #3
 800daaa:	f043 0301 	orr.w	r3, r3, #1
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	431d      	orrs	r5, r3
 800dab4:	81a5      	strh	r5, [r4, #12]
 800dab6:	e7cf      	b.n	800da58 <__smakebuf_r+0x18>

0800dab8 <memmove>:
 800dab8:	4288      	cmp	r0, r1
 800daba:	b510      	push	{r4, lr}
 800dabc:	eb01 0402 	add.w	r4, r1, r2
 800dac0:	d902      	bls.n	800dac8 <memmove+0x10>
 800dac2:	4284      	cmp	r4, r0
 800dac4:	4623      	mov	r3, r4
 800dac6:	d807      	bhi.n	800dad8 <memmove+0x20>
 800dac8:	1e43      	subs	r3, r0, #1
 800daca:	42a1      	cmp	r1, r4
 800dacc:	d008      	beq.n	800dae0 <memmove+0x28>
 800dace:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dad6:	e7f8      	b.n	800daca <memmove+0x12>
 800dad8:	4402      	add	r2, r0
 800dada:	4601      	mov	r1, r0
 800dadc:	428a      	cmp	r2, r1
 800dade:	d100      	bne.n	800dae2 <memmove+0x2a>
 800dae0:	bd10      	pop	{r4, pc}
 800dae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800daea:	e7f7      	b.n	800dadc <memmove+0x24>

0800daec <_fstat_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	4d07      	ldr	r5, [pc, #28]	@ (800db0c <_fstat_r+0x20>)
 800daf0:	2300      	movs	r3, #0
 800daf2:	4604      	mov	r4, r0
 800daf4:	4608      	mov	r0, r1
 800daf6:	4611      	mov	r1, r2
 800daf8:	602b      	str	r3, [r5, #0]
 800dafa:	f7f4 ff0e 	bl	800291a <_fstat>
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	d102      	bne.n	800db08 <_fstat_r+0x1c>
 800db02:	682b      	ldr	r3, [r5, #0]
 800db04:	b103      	cbz	r3, 800db08 <_fstat_r+0x1c>
 800db06:	6023      	str	r3, [r4, #0]
 800db08:	bd38      	pop	{r3, r4, r5, pc}
 800db0a:	bf00      	nop
 800db0c:	20011868 	.word	0x20011868

0800db10 <_isatty_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4d06      	ldr	r5, [pc, #24]	@ (800db2c <_isatty_r+0x1c>)
 800db14:	2300      	movs	r3, #0
 800db16:	4604      	mov	r4, r0
 800db18:	4608      	mov	r0, r1
 800db1a:	602b      	str	r3, [r5, #0]
 800db1c:	f7f4 ff0d 	bl	800293a <_isatty>
 800db20:	1c43      	adds	r3, r0, #1
 800db22:	d102      	bne.n	800db2a <_isatty_r+0x1a>
 800db24:	682b      	ldr	r3, [r5, #0]
 800db26:	b103      	cbz	r3, 800db2a <_isatty_r+0x1a>
 800db28:	6023      	str	r3, [r4, #0]
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
 800db2c:	20011868 	.word	0x20011868

0800db30 <_sbrk_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d06      	ldr	r5, [pc, #24]	@ (800db4c <_sbrk_r+0x1c>)
 800db34:	2300      	movs	r3, #0
 800db36:	4604      	mov	r4, r0
 800db38:	4608      	mov	r0, r1
 800db3a:	602b      	str	r3, [r5, #0]
 800db3c:	f7f4 ff16 	bl	800296c <_sbrk>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d102      	bne.n	800db4a <_sbrk_r+0x1a>
 800db44:	682b      	ldr	r3, [r5, #0]
 800db46:	b103      	cbz	r3, 800db4a <_sbrk_r+0x1a>
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	20011868 	.word	0x20011868

0800db50 <memcpy>:
 800db50:	440a      	add	r2, r1
 800db52:	4291      	cmp	r1, r2
 800db54:	f100 33ff 	add.w	r3, r0, #4294967295
 800db58:	d100      	bne.n	800db5c <memcpy+0xc>
 800db5a:	4770      	bx	lr
 800db5c:	b510      	push	{r4, lr}
 800db5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db66:	4291      	cmp	r1, r2
 800db68:	d1f9      	bne.n	800db5e <memcpy+0xe>
 800db6a:	bd10      	pop	{r4, pc}

0800db6c <abort>:
 800db6c:	b508      	push	{r3, lr}
 800db6e:	2006      	movs	r0, #6
 800db70:	f000 f85a 	bl	800dc28 <raise>
 800db74:	2001      	movs	r0, #1
 800db76:	f7f4 fe80 	bl	800287a <_exit>

0800db7a <_realloc_r>:
 800db7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7e:	4680      	mov	r8, r0
 800db80:	4615      	mov	r5, r2
 800db82:	460c      	mov	r4, r1
 800db84:	b921      	cbnz	r1, 800db90 <_realloc_r+0x16>
 800db86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db8a:	4611      	mov	r1, r2
 800db8c:	f7ff b9c0 	b.w	800cf10 <_malloc_r>
 800db90:	b92a      	cbnz	r2, 800db9e <_realloc_r+0x24>
 800db92:	f7ff f949 	bl	800ce28 <_free_r>
 800db96:	2400      	movs	r4, #0
 800db98:	4620      	mov	r0, r4
 800db9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db9e:	f000 f85f 	bl	800dc60 <_malloc_usable_size_r>
 800dba2:	4285      	cmp	r5, r0
 800dba4:	4606      	mov	r6, r0
 800dba6:	d802      	bhi.n	800dbae <_realloc_r+0x34>
 800dba8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dbac:	d8f4      	bhi.n	800db98 <_realloc_r+0x1e>
 800dbae:	4629      	mov	r1, r5
 800dbb0:	4640      	mov	r0, r8
 800dbb2:	f7ff f9ad 	bl	800cf10 <_malloc_r>
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	d0ec      	beq.n	800db96 <_realloc_r+0x1c>
 800dbbc:	42b5      	cmp	r5, r6
 800dbbe:	462a      	mov	r2, r5
 800dbc0:	4621      	mov	r1, r4
 800dbc2:	bf28      	it	cs
 800dbc4:	4632      	movcs	r2, r6
 800dbc6:	f7ff ffc3 	bl	800db50 <memcpy>
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4640      	mov	r0, r8
 800dbce:	f7ff f92b 	bl	800ce28 <_free_r>
 800dbd2:	463c      	mov	r4, r7
 800dbd4:	e7e0      	b.n	800db98 <_realloc_r+0x1e>

0800dbd6 <_raise_r>:
 800dbd6:	291f      	cmp	r1, #31
 800dbd8:	b538      	push	{r3, r4, r5, lr}
 800dbda:	4605      	mov	r5, r0
 800dbdc:	460c      	mov	r4, r1
 800dbde:	d904      	bls.n	800dbea <_raise_r+0x14>
 800dbe0:	2316      	movs	r3, #22
 800dbe2:	6003      	str	r3, [r0, #0]
 800dbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbe8:	bd38      	pop	{r3, r4, r5, pc}
 800dbea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbec:	b112      	cbz	r2, 800dbf4 <_raise_r+0x1e>
 800dbee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbf2:	b94b      	cbnz	r3, 800dc08 <_raise_r+0x32>
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	f000 f831 	bl	800dc5c <_getpid_r>
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	4601      	mov	r1, r0
 800dbfe:	4628      	mov	r0, r5
 800dc00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc04:	f000 b818 	b.w	800dc38 <_kill_r>
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d00a      	beq.n	800dc22 <_raise_r+0x4c>
 800dc0c:	1c59      	adds	r1, r3, #1
 800dc0e:	d103      	bne.n	800dc18 <_raise_r+0x42>
 800dc10:	2316      	movs	r3, #22
 800dc12:	6003      	str	r3, [r0, #0]
 800dc14:	2001      	movs	r0, #1
 800dc16:	e7e7      	b.n	800dbe8 <_raise_r+0x12>
 800dc18:	2100      	movs	r1, #0
 800dc1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	4798      	blx	r3
 800dc22:	2000      	movs	r0, #0
 800dc24:	e7e0      	b.n	800dbe8 <_raise_r+0x12>
	...

0800dc28 <raise>:
 800dc28:	4b02      	ldr	r3, [pc, #8]	@ (800dc34 <raise+0xc>)
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	6818      	ldr	r0, [r3, #0]
 800dc2e:	f7ff bfd2 	b.w	800dbd6 <_raise_r>
 800dc32:	bf00      	nop
 800dc34:	20000024 	.word	0x20000024

0800dc38 <_kill_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d07      	ldr	r5, [pc, #28]	@ (800dc58 <_kill_r+0x20>)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	4611      	mov	r1, r2
 800dc44:	602b      	str	r3, [r5, #0]
 800dc46:	f7f4 fe08 	bl	800285a <_kill>
 800dc4a:	1c43      	adds	r3, r0, #1
 800dc4c:	d102      	bne.n	800dc54 <_kill_r+0x1c>
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	b103      	cbz	r3, 800dc54 <_kill_r+0x1c>
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	bf00      	nop
 800dc58:	20011868 	.word	0x20011868

0800dc5c <_getpid_r>:
 800dc5c:	f7f4 bdf5 	b.w	800284a <_getpid>

0800dc60 <_malloc_usable_size_r>:
 800dc60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc64:	1f18      	subs	r0, r3, #4
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	bfbc      	itt	lt
 800dc6a:	580b      	ldrlt	r3, [r1, r0]
 800dc6c:	18c0      	addlt	r0, r0, r3
 800dc6e:	4770      	bx	lr

0800dc70 <_init>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr

0800dc7c <_fini>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	bf00      	nop
 800dc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc82:	bc08      	pop	{r3}
 800dc84:	469e      	mov	lr, r3
 800dc86:	4770      	bx	lr
