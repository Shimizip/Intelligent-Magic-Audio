
esp_cubeai_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00030530  0800bfa0  0800bfa0  0000cfa0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803c4d0  0803c4d0  0003eb18  2**0
                  CONTENTS
  4 .ARM          00000008  0803c4d0  0803c4d0  0003d4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803c4d8  0803c4d8  0003eb18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803c4d8  0803c4d8  0003d4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803c4dc  0803c4dc  0003d4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b18  20000000  0803c4e0  0003e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017c1c  20000b18  0803cff8  0003eb18  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20018734  0803cff8  0003f734  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003eb18  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7dd  00000000  00000000  0003eb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f33  00000000  00000000  00059323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0005d258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecc  00000000  00000000  0005e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b40  00000000  00000000  0005f5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c464  00000000  00000000  00086104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edc60  00000000  00000000  000a2568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000f4  00000000  00000000  001901c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c0  00000000  00000000  001902bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0019687c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003ac5  00000000  00000000  001968e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000080  00000000  00000000  0019a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000b18 	.word	0x20000b18
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bf70 	.word	0x0800bf70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000b1c 	.word	0x20000b1c
 800021c:	0800bf70 	.word	0x0800bf70

08000220 <arm_bitreversal_32>:
 8000220:	1c4b      	adds	r3, r1, #1
 8000222:	2b01      	cmp	r3, #1
 8000224:	bf98      	it	ls
 8000226:	4770      	bxls	lr
 8000228:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800022c:	1c91      	adds	r1, r2, #2
 800022e:	089b      	lsrs	r3, r3, #2

08000230 <arm_bitreversal_32_0>:
 8000230:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000234:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000238:	880a      	ldrh	r2, [r1, #0]
 800023a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800023e:	4480      	add	r8, r0
 8000240:	4481      	add	r9, r0
 8000242:	4402      	add	r2, r0
 8000244:	4484      	add	ip, r0
 8000246:	f8d9 7000 	ldr.w	r7, [r9]
 800024a:	f8d8 6000 	ldr.w	r6, [r8]
 800024e:	6815      	ldr	r5, [r2, #0]
 8000250:	f8dc 4000 	ldr.w	r4, [ip]
 8000254:	f8c9 6000 	str.w	r6, [r9]
 8000258:	f8c8 7000 	str.w	r7, [r8]
 800025c:	f8cc 5000 	str.w	r5, [ip]
 8000260:	6014      	str	r4, [r2, #0]
 8000262:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000266:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800026a:	6855      	ldr	r5, [r2, #4]
 800026c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000270:	f8c9 6004 	str.w	r6, [r9, #4]
 8000274:	f8c8 7004 	str.w	r7, [r8, #4]
 8000278:	f8cc 5004 	str.w	r5, [ip, #4]
 800027c:	6054      	str	r4, [r2, #4]
 800027e:	3108      	adds	r1, #8
 8000280:	3b01      	subs	r3, #1
 8000282:	d1d5      	bne.n	8000230 <arm_bitreversal_32_0>
 8000284:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000288:	4770      	bx	lr

0800028a <arm_bitreversal_16>:
 800028a:	1c4b      	adds	r3, r1, #1
 800028c:	2b01      	cmp	r3, #1
 800028e:	bf98      	it	ls
 8000290:	4770      	bxls	lr
 8000292:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	1c91      	adds	r1, r2, #2
 8000298:	089b      	lsrs	r3, r3, #2

0800029a <arm_bitreversal_16_0>:
 800029a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800029e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002a2:	880a      	ldrh	r2, [r1, #0]
 80002a4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002a8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002ac:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002b0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002b4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002b8:	f8d9 7000 	ldr.w	r7, [r9]
 80002bc:	f8d8 6000 	ldr.w	r6, [r8]
 80002c0:	6815      	ldr	r5, [r2, #0]
 80002c2:	f8dc 4000 	ldr.w	r4, [ip]
 80002c6:	f8c9 6000 	str.w	r6, [r9]
 80002ca:	f8c8 7000 	str.w	r7, [r8]
 80002ce:	f8cc 5000 	str.w	r5, [ip]
 80002d2:	6014      	str	r4, [r2, #0]
 80002d4:	3108      	adds	r1, #8
 80002d6:	3b01      	subs	r3, #1
 80002d8:	d1df      	bne.n	800029a <arm_bitreversal_16_0>
 80002da:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmpun>:
 8000c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x10>
 8000c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c4a:	d10a      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x20>
 8000c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0001 	mov.w	r0, #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2iz>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c70:	d215      	bcs.n	8000c9e <__aeabi_d2iz+0x36>
 8000c72:	d511      	bpl.n	8000c98 <__aeabi_d2iz+0x30>
 8000c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d912      	bls.n	8000ca4 <__aeabi_d2iz+0x3c>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	4770      	bx	lr
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	4770      	bx	lr
 8000c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ca2:	d105      	bne.n	8000cb0 <__aeabi_d2iz+0x48>
 8000ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	bf08      	it	eq
 8000caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <init_nn>:

static uint32_t cpu_cycles;
static uint32_t time_millis;

// Function to initialize the neural network
int init_nn() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	ai_error err;

	/* Create a local array with the addresses of the activations buffers */
	const ai_handle act_addr[] = { activations };
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <init_nn+0x68>)
 8000fb0:	603b      	str	r3, [r7, #0]
	/* Create an instance of the model */
	err = ai_network_1_create_and_init(&network, act_addr, NULL);
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4816      	ldr	r0, [pc, #88]	@ (8001014 <init_nn+0x6c>)
 8000fba:	f004 fa47 	bl	800544c <ai_network_1_create_and_init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	607b      	str	r3, [r7, #4]
	if (err.type != AI_ERROR_NONE) {
 8000fc2:	793b      	ldrb	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00b      	beq.n	8000fe0 <init_nn+0x38>
		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8000fc8:	793b      	ldrb	r3, [r7, #4]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	@ (8001018 <init_nn+0x70>)
 8000fd6:	f008 fd97 	bl	8009b08 <iprintf>
		return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	e012      	b.n	8001006 <init_nn+0x5e>
	}
	ai_input = ai_network_1_inputs_get(network, NULL);
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <init_nn+0x6c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 faae 	bl	8005548 <ai_network_1_inputs_get>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <init_nn+0x74>)
 8000ff0:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_1_outputs_get(network, NULL);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <init_nn+0x6c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 fabf 	bl	800557c <ai_network_1_outputs_get>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <init_nn+0x78>)
 8001002:	6013      	str	r3, [r2, #0]

	return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000ba4 	.word	0x20000ba4
 8001014:	20000ba0 	.word	0x20000ba0
 8001018:	0800bfa0 	.word	0x0800bfa0
 800101c:	20005724 	.word	0x20005724
 8001020:	20005728 	.word	0x20005728

08001024 <run_nn_classification>:

// Function to run the neural network and classify input data
int run_nn_classification(ai_float* pSpectrogram, ai_float* classification_result) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    ai_i32 batch;
    ai_error err;

    ai_input[0].data = AI_HANDLE_PTR(pSpectrogram);
 800102e:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <run_nn_classification+0xc0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(classification_result);
 8001036:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <run_nn_classification+0xc4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    if(network == AI_HANDLE_NULL)
 800103e:	4b2b      	ldr	r3, [pc, #172]	@ (80010ec <run_nn_classification+0xc8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <run_nn_classification+0x28>
      {
          return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	e046      	b.n	80010da <run_nn_classification+0xb6>
      }

    for (int i = 0; i < AI_NETWORK_1_IN_1_SIZE; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e01e      	b.n	8001090 <run_nn_classification+0x6c>
        	pSpectrogram[i] = (pSpectrogram[i] - feature_scaler_mean[i]) / feature_scaler_std[i];
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	ed93 7a00 	vldr	s14, [r3]
 800105e:	4a24      	ldr	r2, [pc, #144]	@ (80010f0 <run_nn_classification+0xcc>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800106e:	4a21      	ldr	r2, [pc, #132]	@ (80010f4 <run_nn_classification+0xd0>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001086:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < AI_NETWORK_1_IN_1_SIZE; i++) {
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8001096:	dbdc      	blt.n	8001052 <run_nn_classification+0x2e>
        }

    // Run the network
    batch = ai_network_1_run(network, ai_input, ai_output);
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <run_nn_classification+0xc8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a11      	ldr	r2, [pc, #68]	@ (80010e4 <run_nn_classification+0xc0>)
 800109e:	6811      	ldr	r1, [r2, #0]
 80010a0:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <run_nn_classification+0xc4>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fabf 	bl	8005628 <ai_network_1_run>
 80010aa:	6138      	str	r0, [r7, #16]
    if (batch != 1) {
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d012      	beq.n	80010d8 <run_nn_classification+0xb4>
        err = ai_network_1_get_error(network);
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <run_nn_classification+0xc8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f004 f9a6 	bl	8005408 <ai_network_1_get_error>
 80010bc:	4603      	mov	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
        printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80010c0:	7b3b      	ldrb	r3, [r7, #12]
 80010c2:	4619      	mov	r1, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80010ca:	461a      	mov	r2, r3
 80010cc:	480a      	ldr	r0, [pc, #40]	@ (80010f8 <run_nn_classification+0xd4>)
 80010ce:	f008 fd1b 	bl	8009b08 <iprintf>
        return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d6:	e000      	b.n	80010da <run_nn_classification+0xb6>
    }

    return 0; // Success
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20005724 	.word	0x20005724
 80010e8:	20005728 	.word	0x20005728
 80010ec:	20000ba0 	.word	0x20000ba0
 80010f0:	0800c058 	.word	0x0800c058
 80010f4:	0800cf58 	.word	0x0800cf58
 80010f8:	0800bfcc 	.word	0x0800bfcc

080010fc <Preprocessing_Init>:
		}
	}
	process_subsample(spectrogram);
}

void Preprocessing_Init(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, 1024);
 8001100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001104:	4817      	ldr	r0, [pc, #92]	@ (8001164 <Preprocessing_Init+0x68>)
 8001106:	f004 fac7 	bl	8005698 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800110a:	4b17      	ldr	r3, [pc, #92]	@ (8001168 <Preprocessing_Init+0x6c>)
 800110c:	4a15      	ldr	r2, [pc, #84]	@ (8001164 <Preprocessing_Init+0x68>)
 800110e:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8001110:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <Preprocessing_Init+0x6c>)
 8001112:	2201      	movs	r2, #1
 8001114:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <Preprocessing_Init+0x6c>)
 8001118:	4a14      	ldr	r2, [pc, #80]	@ (800116c <Preprocessing_Init+0x70>)
 800111a:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = 16000;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <Preprocessing_Init+0x6c>)
 800111e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001122:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = 1024;
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <Preprocessing_Init+0x6c>)
 8001126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800112a:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = 1024;
 800112c:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <Preprocessing_Init+0x6c>)
 800112e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001132:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = mel_spectrogram_column_buffer;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <Preprocessing_Init+0x6c>)
 8001136:	4a0e      	ldr	r2, [pc, #56]	@ (8001170 <Preprocessing_Init+0x74>)
 8001138:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 800113a:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <Preprocessing_Init+0x78>)
 800113c:	4a0e      	ldr	r2, [pc, #56]	@ (8001178 <Preprocessing_Init+0x7c>)
 800113e:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = (uint32_t *) melFiltersStopIndices_1024_30;
 8001140:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <Preprocessing_Init+0x78>)
 8001142:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <Preprocessing_Init+0x80>)
 8001144:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = (float32_t *) melFilterLut_1024_30;
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <Preprocessing_Init+0x78>)
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <Preprocessing_Init+0x84>)
 800114a:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels       = 30;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <Preprocessing_Init+0x78>)
 800114e:	221e      	movs	r2, #30
 8001150:	611a      	str	r2, [r3, #16]

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <Preprocessing_Init+0x88>)
 8001154:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <Preprocessing_Init+0x6c>)
 8001156:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 8001158:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <Preprocessing_Init+0x88>)
 800115a:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <Preprocessing_Init+0x78>)
 800115c:	605a      	str	r2, [r3, #4]
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000b34 	.word	0x20000b34
 8001168:	20000b4c 	.word	0x20000b4c
 800116c:	08016274 	.word	0x08016274
 8001170:	20006644 	.word	0x20006644
 8001174:	20000b70 	.word	0x20000b70
 8001178:	08017274 	.word	0x08017274
 800117c:	080172ec 	.word	0x080172ec
 8001180:	08017364 	.word	0x08017364
 8001184:	20000b68 	.word	0x20000b68

08001188 <frame_subsamples>:

// splits one audiosubsample in 1024 samples long, 512 samples overlapping frames
void frame_subsamples(float32_t* subsample, int subsample_length) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
	int start_index = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	e02c      	b.n	80011f6 <frame_subsamples+0x6e>
        start_index = i * HOP_LENGTH;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < FRAME_LENGTH; j++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	e01c      	b.n	80011e2 <frame_subsamples+0x5a>
            if (start_index + j < subsample_length) {
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4413      	add	r3, r2
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dd0c      	ble.n	80011ce <frame_subsamples+0x46>
                frame[j] = subsample[start_index + j];
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4911      	ldr	r1, [pc, #68]	@ (8001208 <frame_subsamples+0x80>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e006      	b.n	80011dc <frame_subsamples+0x54>
            } else {
                frame[j] = 0.0f; // pad with zeros
 80011ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <frame_subsamples+0x80>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < FRAME_LENGTH; j++) {
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	3301      	adds	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e8:	dbde      	blt.n	80011a8 <frame_subsamples+0x20>
            }
        }
        preprocess_frame(frame);
 80011ea:	4807      	ldr	r0, [pc, #28]	@ (8001208 <frame_subsamples+0x80>)
 80011ec:	f000 f80e 	bl	800120c <preprocess_frame>
    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3301      	adds	r3, #1
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2b1f      	cmp	r3, #31
 80011fa:	ddcf      	ble.n	800119c <frame_subsamples+0x14>
    }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200066bc 	.word	0x200066bc

0800120c <preprocess_frame>:

// frame = 1 spectrogram column = 1024 samples
void preprocess_frame(float* pFrame) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	// Create a Mel-scaled spectrogram column
	MelSpectrogramColumn(&S_MelSpectr, pFrame, mel_spectrogram_column_buffer);
 8001214:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <preprocess_frame+0x80>)
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	481d      	ldr	r0, [pc, #116]	@ (8001290 <preprocess_frame+0x84>)
 800121a:	f003 ff3b 	bl	8005094 <MelSpectrogramColumn>

	// Reshape and copy into output spectrogram
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e01d      	b.n	8001260 <preprocess_frame+0x54>
		int idx = i * SPECTROGRAM_COLS + spectrogram_col_index;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	015a      	lsls	r2, r3, #5
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <preprocess_frame+0x88>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4413      	add	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
		if (idx > 960) {
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8001236:	dd02      	ble.n	800123e <preprocess_frame+0x32>
			printf("bla");
 8001238:	4817      	ldr	r0, [pc, #92]	@ (8001298 <preprocess_frame+0x8c>)
 800123a:	f008 fc65 	bl	8009b08 <iprintf>
		}
		spectrogram[i * SPECTROGRAM_COLS + spectrogram_col_index] = mel_spectrogram_column_buffer[i];
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	015a      	lsls	r2, r3, #5
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <preprocess_frame+0x88>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4910      	ldr	r1, [pc, #64]	@ (800128c <preprocess_frame+0x80>)
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	440a      	add	r2, r1
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	4912      	ldr	r1, [pc, #72]	@ (800129c <preprocess_frame+0x90>)
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3301      	adds	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b1d      	cmp	r3, #29
 8001264:	d9de      	bls.n	8001224 <preprocess_frame+0x18>
	}

    spectrogram_col_index++;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <preprocess_frame+0x88>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <preprocess_frame+0x88>)
 800126e:	6013      	str	r3, [r2, #0]

    // If we have a full spectrogram (32 columns), process it
    if (spectrogram_col_index == SPECTROGRAM_COLS) {
 8001270:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <preprocess_frame+0x88>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b20      	cmp	r3, #32
 8001276:	d105      	bne.n	8001284 <preprocess_frame+0x78>
    //if (spectrogram_col_index == 1) {
    	process_subsample(spectrogram);
 8001278:	4808      	ldr	r0, [pc, #32]	@ (800129c <preprocess_frame+0x90>)
 800127a:	f000 f811 	bl	80012a0 <process_subsample>
        // Reset the column index for the next spectrogram
        spectrogram_col_index = 0;
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <preprocess_frame+0x88>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
    }
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20006644 	.word	0x20006644
 8001290:	20000b68 	.word	0x20000b68
 8001294:	20006640 	.word	0x20006640
 8001298:	0800bff8 	.word	0x0800bff8
 800129c:	2000572c 	.word	0x2000572c

080012a0 <process_subsample>:

void process_subsample(float* pSpectrogram) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	// Convert power spectrogram to dB
	PowerToDb(spectrogram);
 80012a8:	481a      	ldr	r0, [pc, #104]	@ (8001314 <process_subsample+0x74>)
 80012aa:	f000 f83d 	bl	8001328 <PowerToDb>

	StartCycleMeasurement();
 80012ae:	f000 fdc7 	bl	8001e40 <StartCycleMeasurement>

	// Run the neural network classification
	if (run_nn_classification(spectrogram, aiOutData) == 0) {
 80012b2:	4919      	ldr	r1, [pc, #100]	@ (8001318 <process_subsample+0x78>)
 80012b4:	4817      	ldr	r0, [pc, #92]	@ (8001314 <process_subsample+0x74>)
 80012b6:	f7ff feb5 	bl	8001024 <run_nn_classification>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d124      	bne.n	800130a <process_subsample+0x6a>
		StopCycleMeasurement();
 80012c0:	f000 fdce 	bl	8001e60 <StopCycleMeasurement>

		cpu_cycles = GetMeasuredCycles();
 80012c4:	f000 fddc 	bl	8001e80 <GetMeasuredCycles>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a14      	ldr	r2, [pc, #80]	@ (800131c <process_subsample+0x7c>)
 80012cc:	6013      	str	r3, [r2, #0]
		time_millis = CyclesToMilliseconds(cpu_cycles);
 80012ce:	4b13      	ldr	r3, [pc, #76]	@ (800131c <process_subsample+0x7c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fde4 	bl	8001ea0 <CyclesToMilliseconds>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a11      	ldr	r2, [pc, #68]	@ (8001320 <process_subsample+0x80>)
 80012dc:	6013      	str	r3, [r2, #0]
		/* Output results */
		for (uint32_t i = 0; i < AI_NETWORK_1_OUT_1_SIZE; i++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	e00f      	b.n	8001304 <process_subsample+0x64>
		  printf("%8.6f ", aiOutData[i]);
 80012e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <process_subsample+0x78>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f9b2 	bl	8000658 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	480a      	ldr	r0, [pc, #40]	@ (8001324 <process_subsample+0x84>)
 80012fa:	f008 fc05 	bl	8009b08 <iprintf>
		for (uint32_t i = 0; i < AI_NETWORK_1_OUT_1_SIZE; i++) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b04      	cmp	r3, #4
 8001308:	d9ec      	bls.n	80012e4 <process_subsample+0x44>
		}
	}
}
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000572c 	.word	0x2000572c
 8001318:	2000662c 	.word	0x2000662c
 800131c:	200076bc 	.word	0x200076bc
 8001320:	200076c0 	.word	0x200076c0
 8001324:	0800bffc 	.word	0x0800bffc

08001328 <PowerToDb>:

void PowerToDb(float *pSpectrogram) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    float max_mel_energy = FLT_MIN; // Minimaler positiver Wert, um sicherzustellen, dass er überschrieben wird
 8001330:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001334:	61fb      	str	r3, [r7, #28]
    uint32_t rows = 30;
 8001336:	231e      	movs	r3, #30
 8001338:	617b      	str	r3, [r7, #20]
    uint32_t cols = 32;
 800133a:	2320      	movs	r3, #32
 800133c:	613b      	str	r3, [r7, #16]
    uint32_t i, total_elements = rows * cols;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	60fb      	str	r3, [r7, #12]

    // Find MelEnergy Scaling factor
    for (i = 0; i < total_elements; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	e015      	b.n	800137a <PowerToDb+0x52>
        if (pSpectrogram[i] > max_mel_energy) {
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	ed97 7a07 	vldr	s14, [r7, #28]
 800135e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	d505      	bpl.n	8001374 <PowerToDb+0x4c>
            max_mel_energy = pSpectrogram[i];
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < total_elements; i++) {
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	3301      	adds	r3, #1
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3e5      	bcc.n	800134e <PowerToDb+0x26>
        }
    }

    // Check if max_mel_energy is zero to avoid division by zero
    if (max_mel_energy == 0.0f) {
 8001382:	edd7 7a07 	vldr	s15, [r7, #28]
 8001386:	eef5 7a40 	vcmp.f32	s15, #0.0
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d110      	bne.n	80013b2 <PowerToDb+0x8a>
        // If max_mel_energy is zero, the spectrogram is all zeros, and we can directly set the output to -80 dB
        for (i = 0; i < total_elements; i++) {
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	e008      	b.n	80013a8 <PowerToDb+0x80>
        	pSpectrogram[i] = -80.0f;
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a2a      	ldr	r2, [pc, #168]	@ (8001448 <PowerToDb+0x120>)
 80013a0:	601a      	str	r2, [r3, #0]
        for (i = 0; i < total_elements; i++) {
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d3f2      	bcc.n	8001396 <PowerToDb+0x6e>
        }
        return;
 80013b0:	e047      	b.n	8001442 <PowerToDb+0x11a>
    }

    // Scale Mel Energies and convert to dB
    for (i = 0; i < total_elements; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	e040      	b.n	800143a <PowerToDb+0x112>
    	pSpectrogram[i] = 10.0f * log10f(pSpectrogram[i] / max_mel_energy);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013cc:	eeb0 0a66 	vmov.f32	s0, s13
 80013d0:	f00a faee 	bl	800b9b0 <log10f>
 80013d4:	eef0 7a40 	vmov.f32	s15, s0
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	4413      	add	r3, r2
 80013e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e8:	edc3 7a00 	vstr	s15, [r3]
        // Threshold to -80 dB
        if (pSpectrogram[i] < -80.0f) {
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800144c <PowerToDb+0x124>
 80013fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d505      	bpl.n	8001412 <PowerToDb+0xea>
        	pSpectrogram[i] = -80.0f;
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <PowerToDb+0x120>)
 8001410:	601a      	str	r2, [r3, #0]
        }
        // Check for nan and replace with -80
        if (isnan(pSpectrogram[i])) {
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eef4 7a67 	vcmp.f32	s15, s15
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d705      	bvc.n	8001434 <PowerToDb+0x10c>
        	pSpectrogram[i] = -80.0f;
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <PowerToDb+0x120>)
 8001432:	601a      	str	r2, [r3, #0]
    for (i = 0; i < total_elements; i++) {
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	3301      	adds	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3ba      	bcc.n	80013b8 <PowerToDb+0x90>
        }
    }
}
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	c2a00000 	.word	0xc2a00000
 800144c:	c2a00000 	.word	0xc2a00000

08001450 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001454:	f3bf 8f4f 	dsb	sy
}
 8001458:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800145a:	f3bf 8f6f 	isb	sy
}
 800145e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <SCB_EnableICache+0x48>)
 8001462:	2200      	movs	r2, #0
 8001464:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001468:	f3bf 8f4f 	dsb	sy
}
 800146c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800146e:	f3bf 8f6f 	isb	sy
}
 8001472:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001474:	4b08      	ldr	r3, [pc, #32]	@ (8001498 <SCB_EnableICache+0x48>)
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	4a07      	ldr	r2, [pc, #28]	@ (8001498 <SCB_EnableICache+0x48>)
 800147a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001480:	f3bf 8f4f 	dsb	sy
}
 8001484:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001486:	f3bf 8f6f 	isb	sy
}
 800148a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80014a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001520 <SCB_EnableDCache+0x84>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014aa:	f3bf 8f4f 	dsb	sy
}
 80014ae:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <SCB_EnableDCache+0x84>)
 80014b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014b6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	0b5b      	lsrs	r3, r3, #13
 80014bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014c0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	08db      	lsrs	r3, r3, #3
 80014c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ca:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80014d4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014da:	4911      	ldr	r1, [pc, #68]	@ (8001520 <SCB_EnableDCache+0x84>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1e5a      	subs	r2, r3, #1
 80014e6:	60ba      	str	r2, [r7, #8]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1ef      	bne.n	80014cc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e5a      	subs	r2, r3, #1
 80014f0:	60fa      	str	r2, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e5      	bne.n	80014c2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80014f6:	f3bf 8f4f 	dsb	sy
}
 80014fa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <SCB_EnableDCache+0x84>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <SCB_EnableDCache+0x84>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001506:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001508:	f3bf 8f4f 	dsb	sy
}
 800150c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800150e:	f3bf 8f6f 	isb	sy
}
 8001512:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800152a:	f7ff ff91 	bl	8001450 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800152e:	f7ff ffb5 	bl	800149c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f000 fcf4 	bl	8001f1e <HAL_Init>

  /* USER CODE BEGIN Init */
  // enabling CRC clock for using AI libraries
  __HAL_RCC_CRC_CLK_ENABLE();
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <main+0xb8>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a28      	ldr	r2, [pc, #160]	@ (80015dc <main+0xb8>)
 800153c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <main+0xb8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  EnableDWT();
 800154e:	f000 fc4d 	bl	8001dec <EnableDWT>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f84f 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 f9d9 	bl	800190c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800155a:	f000 f977 	bl	800184c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800155e:	f000 f9a5 	bl	80018ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001562:	f000 f8d7 	bl	8001714 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001566:	f000 f923 	bl	80017b0 <MX_TIM3_Init>
  MX_CRC_Init();
 800156a:	f000 f8b1 	bl	80016d0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if (init_nn() != 0) {
 800156e:	f7ff fd1b 	bl	8000fa8 <init_nn>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <main+0x60>
	printf("Failed to initialize neural network\n");
 8001578:	4819      	ldr	r0, [pc, #100]	@ (80015e0 <main+0xbc>)
 800157a:	f008 fb2d 	bl	8009bd8 <puts>
	return -1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001582:	e026      	b.n	80015d2 <main+0xae>
  }

  Preprocessing_Init();
 8001584:	f7ff fdba 	bl	80010fc <Preprocessing_Init>
  // Resample das Audio (Platzhalter)
  for (int i = 0; i < audio_data_length; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	e014      	b.n	80015b8 <main+0x94>
    resampled_data[i] = audio_data[i] / 32768.0f;
 800158e:	4a15      	ldr	r2, [pc, #84]	@ (80015e4 <main+0xc0>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800159e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80015e8 <main+0xc4>
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	4a11      	ldr	r2, [pc, #68]	@ (80015ec <main+0xc8>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < audio_data_length; i++) {
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3301      	adds	r3, #1
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <main+0xcc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	dbe5      	blt.n	800158e <main+0x6a>
  }


  // Frame die resampleten Daten
  frame_subsamples(resampled_data, audio_data_length);
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <main+0xcc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <main+0xc8>)
 80015ca:	f7ff fddd 	bl	8001188 <frame_subsamples>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015ce:	bf00      	nop
 80015d0:	e7fd      	b.n	80015ce <main+0xaa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	0800c004 	.word	0x0800c004
 80015e4:	0800de70 	.word	0x0800de70
 80015e8:	47000000 	.word	0x47000000
 80015ec:	20007d10 	.word	0x20007d10
 80015f0:	08016270 	.word	0x08016270

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b094      	sub	sp, #80	@ 0x50
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	2230      	movs	r2, #48	@ 0x30
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f008 faf0 	bl	8009be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001618:	f001 f9d0 	bl	80029bc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	4b2a      	ldr	r3, [pc, #168]	@ (80016c8 <SystemClock_Config+0xd4>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <SystemClock_Config+0xd4>)
 8001622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001626:	6413      	str	r3, [r2, #64]	@ 0x40
 8001628:	4b27      	ldr	r3, [pc, #156]	@ (80016c8 <SystemClock_Config+0xd4>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <SystemClock_Config+0xd8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a24      	ldr	r2, [pc, #144]	@ (80016cc <SystemClock_Config+0xd8>)
 800163a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <SystemClock_Config+0xd8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001650:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001656:	2302      	movs	r3, #2
 8001658:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800165a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001664:	23d8      	movs	r3, #216	@ 0xd8
 8001666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800166c:	2309      	movs	r3, #9
 800166e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f001 fa01 	bl	8002a7c <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001680:	f000 f9e6 	bl	8001a50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001684:	f001 f9aa 	bl	80029dc <HAL_PWREx_EnableOverDrive>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800168e:	f000 f9df 	bl	8001a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2302      	movs	r3, #2
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800169e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2107      	movs	r1, #7
 80016b0:	4618      	mov	r0, r3
 80016b2:	f001 fc87 	bl	8002fc4 <HAL_RCC_ClockConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80016bc:	f000 f9c8 	bl	8001a50 <Error_Handler>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3750      	adds	r7, #80	@ 0x50
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016d4:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <MX_CRC_Init+0x3c>)
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <MX_CRC_Init+0x40>)
 80016d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80016da:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_CRC_Init+0x3c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <MX_CRC_Init+0x3c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_CRC_Init+0x3c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <MX_CRC_Init+0x3c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_CRC_Init+0x3c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <MX_CRC_Init+0x3c>)
 80016fa:	f000 fd77 	bl	80021ec <HAL_CRC_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001704:	f000 f9a4 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200076c4 	.word	0x200076c4
 8001710:	40023000 	.word	0x40023000

08001714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <MX_TIM2_Init+0x98>)
 8001734:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001738:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_TIM2_Init+0x98>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_TIM2_Init+0x98>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_TIM2_Init+0x98>)
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800174c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_TIM2_Init+0x98>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <MX_TIM2_Init+0x98>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800175a:	4814      	ldr	r0, [pc, #80]	@ (80017ac <MX_TIM2_Init+0x98>)
 800175c:	f002 f9a2 	bl	8003aa4 <HAL_TIM_Base_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001766:	f000 f973 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4619      	mov	r1, r3
 8001776:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_TIM2_Init+0x98>)
 8001778:	f002 f9ec 	bl	8003b54 <HAL_TIM_ConfigClockSource>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001782:	f000 f965 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	@ (80017ac <MX_TIM2_Init+0x98>)
 8001794:	f002 fbe2 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800179e:	f000 f957 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200076e8 	.word	0x200076e8

080017b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001848 <MX_TIM3_Init+0x98>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017f6:	f002 f955 	bl	8003aa4 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001800:	f000 f926 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001808:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0310 	add.w	r3, r7, #16
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <MX_TIM3_Init+0x94>)
 8001812:	f002 f99f 	bl	8003b54 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800181c:	f000 f918 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_TIM3_Init+0x94>)
 800182e:	f002 fb95 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001838:	f000 f90a 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20007734 	.word	0x20007734
 8001848:	40000400 	.word	0x40000400

0800184c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001852:	4a15      	ldr	r2, [pc, #84]	@ (80018a8 <MX_USART3_UART_Init+0x5c>)
 8001854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001856:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <MX_USART3_UART_Init+0x58>)
 8001890:	f002 fbf2 	bl	8004078 <HAL_UART_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800189a:	f000 f8d9 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20007780 	.word	0x20007780
 80018a8:	40004800 	.word	0x40004800

080018ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018b8:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ba:	2206      	movs	r2, #6
 80018bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018be:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018c4:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018cc:	2202      	movs	r2, #2
 80018ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018f4:	4804      	ldr	r0, [pc, #16]	@ (8001908 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018f6:	f000 ff18 	bl	800272a <HAL_PCD_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001900:	f000 f8a6 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20007808 	.word	0x20007808

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	@ 0x30
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b47      	ldr	r3, [pc, #284]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a46      	ldr	r2, [pc, #280]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b44      	ldr	r3, [pc, #272]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193a:	4b41      	ldr	r3, [pc, #260]	@ (8001a40 <MX_GPIO_Init+0x134>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a40      	ldr	r2, [pc, #256]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b3e      	ldr	r3, [pc, #248]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b3b      	ldr	r3, [pc, #236]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a3a      	ldr	r2, [pc, #232]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b38      	ldr	r3, [pc, #224]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800196a:	4b35      	ldr	r3, [pc, #212]	@ (8001a40 <MX_GPIO_Init+0x134>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	4a34      	ldr	r2, [pc, #208]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6313      	str	r3, [r2, #48]	@ 0x30
 8001976:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	4b2f      	ldr	r3, [pc, #188]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a2e      	ldr	r2, [pc, #184]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <MX_GPIO_Init+0x134>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b29      	ldr	r3, [pc, #164]	@ (8001a40 <MX_GPIO_Init+0x134>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a28      	ldr	r2, [pc, #160]	@ (8001a40 <MX_GPIO_Init+0x134>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <MX_GPIO_Init+0x134>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80019b8:	4822      	ldr	r0, [pc, #136]	@ (8001a44 <MX_GPIO_Init+0x138>)
 80019ba:	f000 fe9d 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2140      	movs	r1, #64	@ 0x40
 80019c2:	4821      	ldr	r0, [pc, #132]	@ (8001a48 <MX_GPIO_Init+0x13c>)
 80019c4:	f000 fe98 	bl	80026f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	481b      	ldr	r0, [pc, #108]	@ (8001a4c <MX_GPIO_Init+0x140>)
 80019e0:	f000 fcee 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019e4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 031c 	add.w	r3, r7, #28
 80019fa:	4619      	mov	r1, r3
 80019fc:	4811      	ldr	r0, [pc, #68]	@ (8001a44 <MX_GPIO_Init+0x138>)
 80019fe:	f000 fcdf 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a02:	2340      	movs	r3, #64	@ 0x40
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a06:	2301      	movs	r3, #1
 8001a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <MX_GPIO_Init+0x13c>)
 8001a1a:	f000 fcd1 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a1e:	2380      	movs	r3, #128	@ 0x80
 8001a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_GPIO_Init+0x13c>)
 8001a32:	f000 fcc5 	bl	80023c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	@ 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020400 	.word	0x40020400
 8001a48:	40021800 	.word	0x40021800
 8001a4c:	40020800 	.word	0x40020800

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a54:	b672      	cpsid	i
}
 8001a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <Error_Handler+0x8>

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_MspInit+0x44>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <HAL_CRC_MspInit+0x38>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10b      	bne.n	8001ace <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_CRC_MspInit+0x3c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_CRC_MspInit+0x3c>)
 8001abc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <HAL_CRC_MspInit+0x3c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023000 	.word	0x40023000
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af4:	d10c      	bne.n	8001b10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001af6:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_TIM_Base_MspInit+0x5c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_TIM_Base_MspInit+0x5c>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b0f      	ldr	r3, [pc, #60]	@ (8001b40 <HAL_TIM_Base_MspInit+0x5c>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b0e:	e010      	b.n	8001b32 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0b      	ldr	r2, [pc, #44]	@ (8001b44 <HAL_TIM_Base_MspInit+0x60>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10b      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_TIM_Base_MspInit+0x5c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <HAL_TIM_Base_MspInit+0x5c>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_TIM_Base_MspInit+0x5c>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40000400 	.word	0x40000400

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0aa      	sub	sp, #168	@ 0xa8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2280      	movs	r2, #128	@ 0x80
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f008 f83d 	bl	8009be8 <memset>
  if(huart->Instance==USART3)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a22      	ldr	r2, [pc, #136]	@ (8001bfc <HAL_UART_MspInit+0xb4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d13c      	bne.n	8001bf2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fc42 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b92:	f7ff ff5d 	bl	8001a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b96:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <HAL_UART_MspInit+0xb8>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <HAL_UART_MspInit+0xb8>)
 8001b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_UART_MspInit+0xb8>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bae:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <HAL_UART_MspInit+0xb8>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <HAL_UART_MspInit+0xb8>)
 8001bb4:	f043 0308 	orr.w	r3, r3, #8
 8001bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bba:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_UART_MspInit+0xb8>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be0:	2307      	movs	r3, #7
 8001be2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <HAL_UART_MspInit+0xbc>)
 8001bee:	f000 fbe7 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	37a8      	adds	r7, #168	@ 0xa8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40004800 	.word	0x40004800
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020c00 	.word	0x40020c00

08001c08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0aa      	sub	sp, #168	@ 0xa8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2280      	movs	r2, #128	@ 0x80
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f007 ffdd 	bl	8009be8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c36:	d159      	bne.n	8001cec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c38:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f001 fbe1 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c54:	f7ff fefc 	bl	8001a50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a25      	ldr	r2, [pc, #148]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c70:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c94:	4619      	mov	r1, r3
 8001c96:	4818      	ldr	r0, [pc, #96]	@ (8001cf8 <HAL_PCD_MspInit+0xf0>)
 8001c98:	f000 fb92 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ca0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4810      	ldr	r0, [pc, #64]	@ (8001cf8 <HAL_PCD_MspInit+0xf0>)
 8001cb8:	f000 fb82 	bl	80023c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001cc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc6:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd8:	4a06      	ldr	r2, [pc, #24]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cde:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <HAL_PCD_MspInit+0xec>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cec:	bf00      	nop
 8001cee:	37a8      	adds	r7, #168	@ 0xa8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <NMI_Handler+0x4>

08001d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <MemManage_Handler+0x4>

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d52:	f000 f921 	bl	8001f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f007 ff48 	bl	8009c20 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20040000 	.word	0x20040000
 8001dbc:	00000800 	.word	0x00000800
 8001dc0:	20018510 	.word	0x20018510
 8001dc4:	20018738 	.word	0x20018738

08001dc8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <EnableDWT>:
// Global variables to store start and end cycle counts
static uint32_t start_cycles = 0;
static uint32_t end_cycles = 0;

void EnableDWT(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  *SCB_DEMCR |= 0x01000000;      // Enable DWT and ITM
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <EnableDWT+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <EnableDWT+0x40>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001dfe:	601a      	str	r2, [r3, #0]
  *DWT_LAR = 0xC5ACCE55;         // Unlock DWT registers
 8001e00:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <EnableDWT+0x44>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0b      	ldr	r2, [pc, #44]	@ (8001e34 <EnableDWT+0x48>)
 8001e06:	601a      	str	r2, [r3, #0]
  *DWT_CYCCNT = 0;               // Reset the cycle counter
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <EnableDWT+0x4c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
  *DWT_CONTROL |= 1;             // Enable the cycle counter
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <EnableDWT+0x50>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <EnableDWT+0x50>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	2000000c 	.word	0x2000000c
 8001e34:	c5acce55 	.word	0xc5acce55
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	20000008 	.word	0x20000008

08001e40 <StartCycleMeasurement>:

void StartCycleMeasurement(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  start_cycles = *DWT_CYCCNT;    // Store the cycle count at the start
 8001e44:	4b04      	ldr	r3, [pc, #16]	@ (8001e58 <StartCycleMeasurement+0x18>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a04      	ldr	r2, [pc, #16]	@ (8001e5c <StartCycleMeasurement+0x1c>)
 8001e4c:	6013      	str	r3, [r2, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	20018514 	.word	0x20018514

08001e60 <StopCycleMeasurement>:

void StopCycleMeasurement(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  end_cycles = *DWT_CYCCNT;      // Store the cycle count at the end
 8001e64:	4b04      	ldr	r3, [pc, #16]	@ (8001e78 <StopCycleMeasurement+0x18>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <StopCycleMeasurement+0x1c>)
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	20018518 	.word	0x20018518

08001e80 <GetMeasuredCycles>:

uint32_t GetMeasuredCycles(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return end_cycles - start_cycles; // Return the difference in cycle counts
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <GetMeasuredCycles+0x18>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <GetMeasuredCycles+0x1c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1ad3      	subs	r3, r2, r3
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	20018518 	.word	0x20018518
 8001e9c:	20018514 	.word	0x20018514

08001ea0 <CyclesToMilliseconds>:

uint32_t CyclesToMilliseconds(uint32_t cycles)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t cpu_clock_hz = HAL_RCC_GetSysClockFreq(); // Get the system clock frequency
 8001ea8:	f001 f978 	bl	800319c <HAL_RCC_GetSysClockFreq>
 8001eac:	60f8      	str	r0, [r7, #12]
  return (cycles / (cpu_clock_hz / 1000));           // Convert to milliseconds
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a05      	ldr	r2, [pc, #20]	@ (8001ec8 <CyclesToMilliseconds+0x28>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	099b      	lsrs	r3, r3, #6
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	10624dd3 	.word	0x10624dd3

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	@ (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff ff67 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f007 fe97 	bl	8009c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7ff fb11 	bl	8001524 <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f04:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000b18 	.word	0x20000b18
  ldr r2, =_sidata
 8001f10:	0803c4e0 	.word	0x0803c4e0
  ldr r2, =_sbss
 8001f14:	20000b18 	.word	0x20000b18
  ldr r4, =_ebss
 8001f18:	20018734 	.word	0x20018734

08001f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC_IRQHandler>

08001f1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f22:	2003      	movs	r0, #3
 8001f24:	f000 f92e 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 f805 	bl	8001f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2e:	f7ff fd95 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f40:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <HAL_InitTick+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_InitTick+0x58>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 f93b 	bl	80021d2 <HAL_SYSTICK_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e00e      	b.n	8001f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b0f      	cmp	r3, #15
 8001f6a:	d80a      	bhi.n	8001f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f74:	f000 f911 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f78:	4a06      	ldr	r2, [pc, #24]	@ (8001f94 <HAL_InitTick+0x5c>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000000 	.word	0x20000000
 8001f90:	20000018 	.word	0x20000018
 8001f94:	20000014 	.word	0x20000014

08001f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_IncTick+0x20>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_IncTick+0x24>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_IncTick+0x24>)
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	20000018 	.word	0x20000018
 8001fbc:	2001851c 	.word	0x2001851c

08001fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <HAL_GetTick+0x14>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2001851c 	.word	0x2001851c

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff ffee 	bl	8001fc0 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_Delay+0x44>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffde 	bl	8001fc0 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000018 	.word	0x20000018

08002020 <__NVIC_SetPriorityGrouping>:
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	4313      	orrs	r3, r2
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	@ (8002060 <__NVIC_SetPriorityGrouping+0x40>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000ed00 	.word	0xe000ed00
 8002064:	05fa0000 	.word	0x05fa0000

08002068 <__NVIC_GetPriorityGrouping>:
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_SetPriority>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff47 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff5c 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffb0 	bl	8002140 <SysTick_Config>
 80021e0:	4603      	mov	r3, r0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e054      	b.n	80022a8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7f5b      	ldrb	r3, [r3, #29]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fc48 	bl	8001aa4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	791b      	ldrb	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a22      	ldr	r2, [pc, #136]	@ (80022b0 <HAL_CRC_Init+0xc4>)
 8002228:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0218 	bic.w	r2, r2, #24
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	e00c      	b.n	8002256 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	461a      	mov	r2, r3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f834 	bl	80022b4 <HAL_CRCEx_Polynomial_Set>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e028      	b.n	80022a8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	795b      	ldrb	r3, [r3, #5]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	e004      	b.n	8002274 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6912      	ldr	r2, [r2, #16]
 8002272:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	04c11db7 	.word	0x04c11db7

080022b4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80022c4:	231f      	movs	r3, #31
 80022c6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80022c8:	bf00      	nop
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	613a      	str	r2, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_CRCEx_Polynomial_Set+0x34>
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b18      	cmp	r3, #24
 80022ec:	d846      	bhi.n	800237c <HAL_CRCEx_Polynomial_Set+0xc8>
 80022ee:	a201      	add	r2, pc, #4	@ (adr r2, 80022f4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80022f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f4:	08002383 	.word	0x08002383
 80022f8:	0800237d 	.word	0x0800237d
 80022fc:	0800237d 	.word	0x0800237d
 8002300:	0800237d 	.word	0x0800237d
 8002304:	0800237d 	.word	0x0800237d
 8002308:	0800237d 	.word	0x0800237d
 800230c:	0800237d 	.word	0x0800237d
 8002310:	0800237d 	.word	0x0800237d
 8002314:	08002371 	.word	0x08002371
 8002318:	0800237d 	.word	0x0800237d
 800231c:	0800237d 	.word	0x0800237d
 8002320:	0800237d 	.word	0x0800237d
 8002324:	0800237d 	.word	0x0800237d
 8002328:	0800237d 	.word	0x0800237d
 800232c:	0800237d 	.word	0x0800237d
 8002330:	0800237d 	.word	0x0800237d
 8002334:	08002365 	.word	0x08002365
 8002338:	0800237d 	.word	0x0800237d
 800233c:	0800237d 	.word	0x0800237d
 8002340:	0800237d 	.word	0x0800237d
 8002344:	0800237d 	.word	0x0800237d
 8002348:	0800237d 	.word	0x0800237d
 800234c:	0800237d 	.word	0x0800237d
 8002350:	0800237d 	.word	0x0800237d
 8002354:	08002359 	.word	0x08002359
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b06      	cmp	r3, #6
 800235c:	d913      	bls.n	8002386 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002362:	e010      	b.n	8002386 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b07      	cmp	r3, #7
 8002368:	d90f      	bls.n	800238a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800236e:	e00c      	b.n	800238a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	d90b      	bls.n	800238e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800237a:	e008      	b.n	800238e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	75fb      	strb	r3, [r7, #23]
      break;
 8002380:	e006      	b.n	8002390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002382:	bf00      	nop
 8002384:	e004      	b.n	8002390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002386:	bf00      	nop
 8002388:	e002      	b.n	8002390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800238a:	bf00      	nop
 800238c:	e000      	b.n	8002390 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800238e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 0118 	bic.w	r1, r3, #24
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80023b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e169      	b.n	80026b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8158 	bne.w	80026ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x56>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80b2 	beq.w	80026ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	4b60      	ldr	r3, [pc, #384]	@ (80026cc <HAL_GPIO_Init+0x30c>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a5f      	ldr	r2, [pc, #380]	@ (80026cc <HAL_GPIO_Init+0x30c>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b5d      	ldr	r3, [pc, #372]	@ (80026cc <HAL_GPIO_Init+0x30c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002562:	4a5b      	ldr	r2, [pc, #364]	@ (80026d0 <HAL_GPIO_Init+0x310>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_GPIO_Init+0x314>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d02b      	beq.n	80025e6 <HAL_GPIO_Init+0x226>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a51      	ldr	r2, [pc, #324]	@ (80026d8 <HAL_GPIO_Init+0x318>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d025      	beq.n	80025e2 <HAL_GPIO_Init+0x222>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a50      	ldr	r2, [pc, #320]	@ (80026dc <HAL_GPIO_Init+0x31c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d01f      	beq.n	80025de <HAL_GPIO_Init+0x21e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4f      	ldr	r2, [pc, #316]	@ (80026e0 <HAL_GPIO_Init+0x320>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d019      	beq.n	80025da <HAL_GPIO_Init+0x21a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4e      	ldr	r2, [pc, #312]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_GPIO_Init+0x216>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4d      	ldr	r2, [pc, #308]	@ (80026e8 <HAL_GPIO_Init+0x328>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d00d      	beq.n	80025d2 <HAL_GPIO_Init+0x212>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a4c      	ldr	r2, [pc, #304]	@ (80026ec <HAL_GPIO_Init+0x32c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d007      	beq.n	80025ce <HAL_GPIO_Init+0x20e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a4b      	ldr	r2, [pc, #300]	@ (80026f0 <HAL_GPIO_Init+0x330>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_GPIO_Init+0x20a>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e00e      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025ca:	2308      	movs	r3, #8
 80025cc:	e00c      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025ce:	2306      	movs	r3, #6
 80025d0:	e00a      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025d2:	2305      	movs	r3, #5
 80025d4:	e008      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025da:	2303      	movs	r3, #3
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x228>
 80025e6:	2300      	movs	r3, #0
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	4093      	lsls	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025f8:	4935      	ldr	r1, [pc, #212]	@ (80026d0 <HAL_GPIO_Init+0x310>)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002606:	4b3b      	ldr	r3, [pc, #236]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262a:	4a32      	ldr	r2, [pc, #200]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002630:	4b30      	ldr	r3, [pc, #192]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002654:	4a27      	ldr	r2, [pc, #156]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265a:	4b26      	ldr	r3, [pc, #152]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267e:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002684:	4b1b      	ldr	r3, [pc, #108]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a8:	4a12      	ldr	r2, [pc, #72]	@ (80026f4 <HAL_GPIO_Init+0x334>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	f67f ae92 	bls.w	80023e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40013800 	.word	0x40013800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40020800 	.word	0x40020800
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40021400 	.word	0x40021400
 80026ec:	40021800 	.word	0x40021800
 80026f0:	40021c00 	.word	0x40021c00
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
 8002704:	4613      	mov	r3, r2
 8002706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002708:	787b      	ldrb	r3, [r7, #1]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002714:	e003      	b.n	800271e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	041a      	lsls	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800272a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272c:	b08f      	sub	sp, #60	@ 0x3c
 800272e:	af0a      	add	r7, sp, #40	@ 0x28
 8002730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e116      	b.n	800296a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fa56 	bl	8001c08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2203      	movs	r2, #3
 8002760:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f002 f956 	bl	8004a2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	687e      	ldr	r6, [r7, #4]
 8002788:	466d      	mov	r5, sp
 800278a:	f106 0410 	add.w	r4, r6, #16
 800278e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002796:	e894 0003 	ldmia.w	r4, {r0, r1}
 800279a:	e885 0003 	stmia.w	r5, {r0, r1}
 800279e:	1d33      	adds	r3, r6, #4
 80027a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f002 f8ba 	bl	800491c <USB_CoreInit>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0d7      	b.n	800296a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 f944 	bl	8004a4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e04a      	b.n	8002862 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	333d      	adds	r3, #61	@ 0x3d
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	333c      	adds	r3, #60	@ 0x3c
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	b298      	uxth	r0, r3
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	3344      	adds	r3, #68	@ 0x44
 8002808:	4602      	mov	r2, r0
 800280a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3340      	adds	r3, #64	@ 0x40
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	3348      	adds	r3, #72	@ 0x48
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	334c      	adds	r3, #76	@ 0x4c
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3354      	adds	r3, #84	@ 0x54
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3301      	adds	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	429a      	cmp	r2, r3
 800286a:	d3af      	bcc.n	80027cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e044      	b.n	80028fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	3301      	adds	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	7bfa      	ldrb	r2, [r7, #15]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d3b5      	bcc.n	8002872 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	687e      	ldr	r6, [r7, #4]
 800290e:	466d      	mov	r5, sp
 8002910:	f106 0410 	add.w	r4, r6, #16
 8002914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002920:	e885 0003 	stmia.w	r5, {r0, r1}
 8002924:	1d33      	adds	r3, r6, #4
 8002926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002928:	6838      	ldr	r0, [r7, #0]
 800292a:	f002 f8dd 	bl	8004ae8 <USB_DevInit>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e014      	b.n	800296a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	2b01      	cmp	r3, #1
 8002956:	d102      	bne.n	800295e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f80b 	bl	8002974 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f002 faab 	bl	8004ebe <USB_DevDisconnect>

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002974 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029a2:	4b05      	ldr	r3, [pc, #20]	@ (80029b8 <HAL_PCDEx_ActivateLPM+0x44>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3714      	adds	r7, #20
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	10000003 	.word	0x10000003

080029bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c0:	4b05      	ldr	r3, [pc, #20]	@ (80029d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a04      	ldr	r2, [pc, #16]	@ (80029d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80029c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ca:	6013      	str	r3, [r2, #0]
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40007000 	.word	0x40007000

080029dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a22      	ldr	r2, [pc, #136]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x98>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	@ (8002a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a0a:	f7ff fad9 	bl	8001fc0 <HAL_GetTick>
 8002a0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a10:	e009      	b.n	8002a26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a12:	f7ff fad5 	bl	8001fc0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a20:	d901      	bls.n	8002a26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e022      	b.n	8002a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a26:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a32:	d1ee      	bne.n	8002a12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a34:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0f      	ldr	r2, [pc, #60]	@ (8002a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a40:	f7ff fabe 	bl	8001fc0 <HAL_GetTick>
 8002a44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a46:	e009      	b.n	8002a5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a48:	f7ff faba 	bl	8001fc0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a56:	d901      	bls.n	8002a5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e007      	b.n	8002a6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a68:	d1ee      	bne.n	8002a48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a84:	2300      	movs	r3, #0
 8002a86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e291      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8087 	beq.w	8002bae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa0:	4b96      	ldr	r3, [pc, #600]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aac:	4b93      	ldr	r3, [pc, #588]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d112      	bne.n	8002ade <HAL_RCC_OscConfig+0x62>
 8002ab8:	4b90      	ldr	r3, [pc, #576]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ac4:	d10b      	bne.n	8002ade <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac6:	4b8d      	ldr	r3, [pc, #564]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d06c      	beq.n	8002bac <HAL_RCC_OscConfig+0x130>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d168      	bne.n	8002bac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e26b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x7a>
 8002ae8:	4b84      	ldr	r3, [pc, #528]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a83      	ldr	r2, [pc, #524]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002aee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	e02e      	b.n	8002b54 <HAL_RCC_OscConfig+0xd8>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x9c>
 8002afe:	4b7f      	ldr	r3, [pc, #508]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a7e      	ldr	r2, [pc, #504]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e01d      	b.n	8002b54 <HAL_RCC_OscConfig+0xd8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0xc0>
 8002b22:	4b76      	ldr	r3, [pc, #472]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a75      	ldr	r2, [pc, #468]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b73      	ldr	r3, [pc, #460]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a72      	ldr	r2, [pc, #456]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0xd8>
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a6e      	ldr	r2, [pc, #440]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b6c      	ldr	r3, [pc, #432]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff fa30 	bl	8001fc0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7ff fa2c 	bl	8001fc0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e21f      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b61      	ldr	r3, [pc, #388]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0xe8>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff fa1c 	bl	8001fc0 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b8c:	f7ff fa18 	bl	8001fc0 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b64      	cmp	r3, #100	@ 0x64
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e20b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b9e:	4b57      	ldr	r3, [pc, #348]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x110>
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d069      	beq.n	8002c8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bba:	4b50      	ldr	r3, [pc, #320]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 030c 	and.w	r3, r3, #12
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d11c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x190>
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d116      	bne.n	8002c0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	4b47      	ldr	r3, [pc, #284]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x17a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e1df      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	4b41      	ldr	r3, [pc, #260]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	493d      	ldr	r1, [pc, #244]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0a:	e040      	b.n	8002c8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d023      	beq.n	8002c5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c14:	4b39      	ldr	r3, [pc, #228]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a38      	ldr	r2, [pc, #224]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7ff f9ce 	bl	8001fc0 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7ff f9ca 	bl	8001fc0 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1bd      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b2d      	ldr	r3, [pc, #180]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4929      	ldr	r1, [pc, #164]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
 8002c5a:	e018      	b.n	8002c8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5c:	4b27      	ldr	r3, [pc, #156]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a26      	ldr	r2, [pc, #152]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7ff f9aa 	bl	8001fc0 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c70:	f7ff f9a6 	bl	8001fc0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e199      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d038      	beq.n	8002d0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d019      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b16      	ldr	r3, [pc, #88]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	4a15      	ldr	r2, [pc, #84]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7ff f987 	bl	8001fc0 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7ff f983 	bl	8001fc0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e176      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x23a>
 8002cd4:	e01a      	b.n	8002d0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd6:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cda:	4a08      	ldr	r2, [pc, #32]	@ (8002cfc <HAL_RCC_OscConfig+0x280>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce2:	f7ff f96d 	bl	8001fc0 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7ff f969 	bl	8001fc0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d903      	bls.n	8002d00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e15c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
 8002cfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	4b91      	ldr	r3, [pc, #580]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ee      	bne.n	8002cea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a4 	beq.w	8002e62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b88      	ldr	r3, [pc, #544]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a87      	ldr	r2, [pc, #540]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b85      	ldr	r3, [pc, #532]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b82      	ldr	r3, [pc, #520]	@ (8002f4c <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f4c <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7e      	ldr	r2, [pc, #504]	@ (8002f4c <HAL_RCC_OscConfig+0x4d0>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7ff f931 	bl	8001fc0 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7ff f92d 	bl	8001fc0 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	@ 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e120      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d74:	4b75      	ldr	r3, [pc, #468]	@ (8002f4c <HAL_RCC_OscConfig+0x4d0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x31a>
 8002d88:	4b6f      	ldr	r3, [pc, #444]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_OscConfig+0x376>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x33c>
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	4a69      	ldr	r2, [pc, #420]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002daa:	4b67      	ldr	r3, [pc, #412]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	4a66      	ldr	r2, [pc, #408]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db6:	e01c      	b.n	8002df2 <HAL_RCC_OscConfig+0x376>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x35e>
 8002dc0:	4b61      	ldr	r3, [pc, #388]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc4:	4a60      	ldr	r2, [pc, #384]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCC_OscConfig+0x376>
 8002dda:	4b5b      	ldr	r3, [pc, #364]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	4a5a      	ldr	r2, [pc, #360]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de6:	4b58      	ldr	r3, [pc, #352]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7ff f8e1 	bl	8001fc0 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff f8dd 	bl	8001fc0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0ce      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	4b4b      	ldr	r3, [pc, #300]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ee      	beq.n	8002e02 <HAL_RCC_OscConfig+0x386>
 8002e24:	e014      	b.n	8002e50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e26:	f7ff f8cb 	bl	8001fc0 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7ff f8c7 	bl	8001fc0 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0b8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	4b40      	ldr	r3, [pc, #256]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b3c      	ldr	r3, [pc, #240]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e60:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 80a4 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6c:	4b36      	ldr	r3, [pc, #216]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d06b      	beq.n	8002f50 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d149      	bne.n	8002f14 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b31      	ldr	r3, [pc, #196]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a30      	ldr	r2, [pc, #192]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002e86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f898 	bl	8001fc0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7ff f894 	bl	8001fc0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e087      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002eda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ede:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a18      	ldr	r2, [pc, #96]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002ee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7ff f868 	bl	8001fc0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7ff f864 	bl	8001fc0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e057      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x478>
 8002f12:	e04f      	b.n	8002fb4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0b      	ldr	r2, [pc, #44]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7ff f84e 	bl	8001fc0 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7ff f84a 	bl	8001fc0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e03d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	4b03      	ldr	r3, [pc, #12]	@ (8002f48 <HAL_RCC_OscConfig+0x4cc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4ac>
 8002f46:	e035      	b.n	8002fb4 <HAL_RCC_OscConfig+0x538>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x544>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0d0      	b.n	800317e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d910      	bls.n	800300c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b67      	ldr	r3, [pc, #412]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 020f 	bic.w	r2, r3, #15
 8002ff2:	4965      	ldr	r1, [pc, #404]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b63      	ldr	r3, [pc, #396]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0b8      	b.n	800317e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d020      	beq.n	800305a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003024:	4b59      	ldr	r3, [pc, #356]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a58      	ldr	r2, [pc, #352]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800302e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800303c:	4b53      	ldr	r3, [pc, #332]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a52      	ldr	r2, [pc, #328]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003042:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003048:	4b50      	ldr	r3, [pc, #320]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	494d      	ldr	r1, [pc, #308]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d040      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306e:	4b47      	ldr	r3, [pc, #284]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d115      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07f      	b.n	800317e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b41      	ldr	r3, [pc, #260]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e073      	b.n	800317e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e06b      	b.n	800317e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b39      	ldr	r3, [pc, #228]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4936      	ldr	r1, [pc, #216]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030b8:	f7fe ff82 	bl	8001fc0 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe ff7e 	bl	8001fc0 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e053      	b.n	800317e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2d      	ldr	r3, [pc, #180]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b27      	ldr	r3, [pc, #156]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d210      	bcs.n	8003118 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 020f 	bic.w	r2, r3, #15
 80030fe:	4922      	ldr	r1, [pc, #136]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b20      	ldr	r3, [pc, #128]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e032      	b.n	800317e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003124:	4b19      	ldr	r3, [pc, #100]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4916      	ldr	r1, [pc, #88]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d009      	beq.n	8003156 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003142:	4b12      	ldr	r3, [pc, #72]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	490e      	ldr	r1, [pc, #56]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	4313      	orrs	r3, r2
 8003154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003156:	f000 f821 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800315a:	4602      	mov	r2, r0
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	490a      	ldr	r1, [pc, #40]	@ (8003190 <HAL_RCC_ClockConfig+0x1cc>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	4a09      	ldr	r2, [pc, #36]	@ (8003194 <HAL_RCC_ClockConfig+0x1d0>)
 8003170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003172:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <HAL_RCC_ClockConfig+0x1d4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fede 	bl	8001f38 <HAL_InitTick>

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023c00 	.word	0x40023c00
 800318c:	40023800 	.word	0x40023800
 8003190:	0800de58 	.word	0x0800de58
 8003194:	20000000 	.word	0x20000000
 8003198:	20000014 	.word	0x20000014

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a0:	b094      	sub	sp, #80	@ 0x50
 80031a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031a8:	2300      	movs	r3, #0
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ac:	2300      	movs	r3, #0
 80031ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b4:	4b79      	ldr	r3, [pc, #484]	@ (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d00d      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x40>
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	f200 80e1 	bhi.w	8003388 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x34>
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d003      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ce:	e0db      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d0:	4b73      	ldr	r3, [pc, #460]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031d4:	e0db      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d6:	4b73      	ldr	r3, [pc, #460]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80031d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031da:	e0d8      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031dc:	4b6f      	ldr	r3, [pc, #444]	@ (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031e6:	4b6d      	ldr	r3, [pc, #436]	@ (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f2:	4b6a      	ldr	r3, [pc, #424]	@ (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	099b      	lsrs	r3, r3, #6
 80031f8:	2200      	movs	r2, #0
 80031fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003204:	633b      	str	r3, [r7, #48]	@ 0x30
 8003206:	2300      	movs	r3, #0
 8003208:	637b      	str	r3, [r7, #52]	@ 0x34
 800320a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800320e:	4622      	mov	r2, r4
 8003210:	462b      	mov	r3, r5
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	0159      	lsls	r1, r3, #5
 800321c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003220:	0150      	lsls	r0, r2, #5
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4621      	mov	r1, r4
 8003228:	1a51      	subs	r1, r2, r1
 800322a:	6139      	str	r1, [r7, #16]
 800322c:	4629      	mov	r1, r5
 800322e:	eb63 0301 	sbc.w	r3, r3, r1
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003240:	4659      	mov	r1, fp
 8003242:	018b      	lsls	r3, r1, #6
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800324a:	4651      	mov	r1, sl
 800324c:	018a      	lsls	r2, r1, #6
 800324e:	4651      	mov	r1, sl
 8003250:	ebb2 0801 	subs.w	r8, r2, r1
 8003254:	4659      	mov	r1, fp
 8003256:	eb63 0901 	sbc.w	r9, r3, r1
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326e:	4690      	mov	r8, r2
 8003270:	4699      	mov	r9, r3
 8003272:	4623      	mov	r3, r4
 8003274:	eb18 0303 	adds.w	r3, r8, r3
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	462b      	mov	r3, r5
 800327c:	eb49 0303 	adc.w	r3, r9, r3
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328e:	4629      	mov	r1, r5
 8003290:	024b      	lsls	r3, r1, #9
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003298:	4621      	mov	r1, r4
 800329a:	024a      	lsls	r2, r1, #9
 800329c:	4610      	mov	r0, r2
 800329e:	4619      	mov	r1, r3
 80032a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032ac:	f7fd fd04 	bl	8000cb8 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4613      	mov	r3, r2
 80032b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032b8:	e058      	b.n	800336c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ba:	4b38      	ldr	r3, [pc, #224]	@ (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	099b      	lsrs	r3, r3, #6
 80032c0:	2200      	movs	r2, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	4611      	mov	r1, r2
 80032c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032ca:	623b      	str	r3, [r7, #32]
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	f04f 0000 	mov.w	r0, #0
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	0159      	lsls	r1, r3, #5
 80032e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e6:	0150      	lsls	r0, r2, #5
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4641      	mov	r1, r8
 80032ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80032f2:	4649      	mov	r1, r9
 80032f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003304:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003308:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800330c:	ebb2 040a 	subs.w	r4, r2, sl
 8003310:	eb63 050b 	sbc.w	r5, r3, fp
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	00eb      	lsls	r3, r5, #3
 800331e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003322:	00e2      	lsls	r2, r4, #3
 8003324:	4614      	mov	r4, r2
 8003326:	461d      	mov	r5, r3
 8003328:	4643      	mov	r3, r8
 800332a:	18e3      	adds	r3, r4, r3
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	464b      	mov	r3, r9
 8003330:	eb45 0303 	adc.w	r3, r5, r3
 8003334:	607b      	str	r3, [r7, #4]
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003342:	4629      	mov	r1, r5
 8003344:	028b      	lsls	r3, r1, #10
 8003346:	4621      	mov	r1, r4
 8003348:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800334c:	4621      	mov	r1, r4
 800334e:	028a      	lsls	r2, r1, #10
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003356:	2200      	movs	r2, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	61fa      	str	r2, [r7, #28]
 800335c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003360:	f7fd fcaa 	bl	8000cb8 <__aeabi_uldivmod>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4613      	mov	r3, r2
 800336a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_GetSysClockFreq+0x200>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	3301      	adds	r3, #1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800337c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800337e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003386:	e002      	b.n	800338e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800338a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800338c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003390:	4618      	mov	r0, r3
 8003392:	3750      	adds	r7, #80	@ 0x50
 8003394:	46bd      	mov	sp, r7
 8003396:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800
 80033a0:	00f42400 	.word	0x00f42400
 80033a4:	007a1200 	.word	0x007a1200

080033a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000000 	.word	0x20000000

080033c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033c8:	4602      	mov	r2, r0
 80033ca:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	4903      	ldr	r1, [pc, #12]	@ (80033e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033d6:	5ccb      	ldrb	r3, [r1, r3]
 80033d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033dc:	4618      	mov	r0, r3
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40023800 	.word	0x40023800
 80033e4:	0800de68 	.word	0x0800de68

080033e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033ec:	f7ff ffdc 	bl	80033a8 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0b5b      	lsrs	r3, r3, #13
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4903      	ldr	r1, [pc, #12]	@ (800340c <HAL_RCC_GetPCLK2Freq+0x24>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40023800 	.word	0x40023800
 800340c:	0800de68 	.word	0x0800de68

08003410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d012      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003434:	4b65      	ldr	r3, [pc, #404]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a64      	ldr	r2, [pc, #400]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800343a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800343e:	6093      	str	r3, [r2, #8]
 8003440:	4b62      	ldr	r3, [pc, #392]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003448:	4960      	ldr	r1, [pc, #384]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003456:	2301      	movs	r3, #1
 8003458:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d017      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003466:	4b59      	ldr	r3, [pc, #356]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800346c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003474:	4955      	ldr	r1, [pc, #340]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003484:	d101      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d017      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034a2:	4b4a      	ldr	r3, [pc, #296]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	4946      	ldr	r1, [pc, #280]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c0:	d101      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80034c2:	2301      	movs	r3, #1
 80034c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 808b 	beq.w	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	4b3a      	ldr	r3, [pc, #232]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	4a39      	ldr	r2, [pc, #228]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ec:	4b37      	ldr	r3, [pc, #220]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034f8:	4b35      	ldr	r3, [pc, #212]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a34      	ldr	r2, [pc, #208]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003504:	f7fe fd5c 	bl	8001fc0 <HAL_GetTick>
 8003508:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350c:	f7fe fd58 	bl	8001fc0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	@ 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e2bc      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800351e:	4b2c      	ldr	r3, [pc, #176]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800352a:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003532:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d035      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	429a      	cmp	r2, r3
 8003546:	d02e      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003548:	4b20      	ldr	r3, [pc, #128]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003550:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003552:	4b1e      	ldr	r3, [pc, #120]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003556:	4a1d      	ldr	r2, [pc, #116]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800355e:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003562:	4a1a      	ldr	r2, [pc, #104]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003568:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800356a:	4a18      	ldr	r2, [pc, #96]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003570:	4b16      	ldr	r3, [pc, #88]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d114      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe fd20 	bl	8001fc0 <HAL_GetTick>
 8003580:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003584:	f7fe fd1c 	bl	8001fc0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e27e      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359a:	4b0c      	ldr	r3, [pc, #48]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0ee      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035b2:	d111      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80035b4:	4b05      	ldr	r3, [pc, #20]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80035c2:	400b      	ands	r3, r1
 80035c4:	4901      	ldr	r1, [pc, #4]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40007000 	.word	0x40007000
 80035d4:	0ffffcff 	.word	0x0ffffcff
 80035d8:	4ba4      	ldr	r3, [pc, #656]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4aa3      	ldr	r2, [pc, #652]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035de:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035e2:	6093      	str	r3, [r2, #8]
 80035e4:	4ba1      	ldr	r3, [pc, #644]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035e6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	499e      	ldr	r1, [pc, #632]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d010      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003602:	4b9a      	ldr	r3, [pc, #616]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003608:	4a98      	ldr	r2, [pc, #608]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800360a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800360e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003612:	4b96      	ldr	r3, [pc, #600]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003614:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	4993      	ldr	r1, [pc, #588]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003630:	4b8e      	ldr	r3, [pc, #568]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003636:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	498b      	ldr	r1, [pc, #556]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003652:	4b86      	ldr	r3, [pc, #536]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003658:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003660:	4982      	ldr	r1, [pc, #520]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003674:	4b7d      	ldr	r3, [pc, #500]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003682:	497a      	ldr	r1, [pc, #488]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003696:	4b75      	ldr	r3, [pc, #468]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	f023 0203 	bic.w	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	4971      	ldr	r1, [pc, #452]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036b8:	4b6c      	ldr	r3, [pc, #432]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	f023 020c 	bic.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	4969      	ldr	r1, [pc, #420]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036da:	4b64      	ldr	r3, [pc, #400]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e8:	4960      	ldr	r1, [pc, #384]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036fc:	4b5b      	ldr	r3, [pc, #364]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370a:	4958      	ldr	r1, [pc, #352]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800371e:	4b53      	ldr	r3, [pc, #332]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372c:	494f      	ldr	r1, [pc, #316]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003740:	4b4a      	ldr	r3, [pc, #296]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374e:	4947      	ldr	r1, [pc, #284]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003762:	4b42      	ldr	r3, [pc, #264]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003768:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003770:	493e      	ldr	r1, [pc, #248]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003784:	4b39      	ldr	r3, [pc, #228]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	4936      	ldr	r1, [pc, #216]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d011      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037a6:	4b31      	ldr	r3, [pc, #196]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	492d      	ldr	r1, [pc, #180]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037c4:	d101      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037d6:	4b25      	ldr	r3, [pc, #148]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e4:	4921      	ldr	r1, [pc, #132]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037f8:	4b1c      	ldr	r3, [pc, #112]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003806:	4919      	ldr	r1, [pc, #100]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800381a:	4b14      	ldr	r3, [pc, #80]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800381c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003820:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003828:	4910      	ldr	r1, [pc, #64]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d006      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 809d 	beq.w	800397e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003844:	4b09      	ldr	r3, [pc, #36]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a08      	ldr	r2, [pc, #32]	@ (800386c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800384a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800384e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003850:	f7fe fbb6 	bl	8001fc0 <HAL_GetTick>
 8003854:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003856:	e00b      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003858:	f7fe fbb2 	bl	8001fc0 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	@ 0x64
 8003864:	d904      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e116      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003870:	4b8b      	ldr	r3, [pc, #556]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ed      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d113      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003890:	4b83      	ldr	r3, [pc, #524]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003896:	0e1b      	lsrs	r3, r3, #24
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	019a      	lsls	r2, r3, #6
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	061b      	lsls	r3, r3, #24
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	071b      	lsls	r3, r3, #28
 80038b0:	497b      	ldr	r1, [pc, #492]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d024      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e2:	d11f      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038e4:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	0f1b      	lsrs	r3, r3, #28
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	019a      	lsls	r2, r3, #6
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	431a      	orrs	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	071b      	lsls	r3, r3, #28
 8003904:	4966      	ldr	r1, [pc, #408]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800390c:	4b64      	ldr	r3, [pc, #400]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800390e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003912:	f023 021f 	bic.w	r2, r3, #31
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	3b01      	subs	r3, #1
 800391c:	4960      	ldr	r1, [pc, #384]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	019a      	lsls	r2, r3, #6
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	061b      	lsls	r3, r3, #24
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	071b      	lsls	r3, r3, #28
 8003944:	4956      	ldr	r1, [pc, #344]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800394c:	4b54      	ldr	r3, [pc, #336]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a53      	ldr	r2, [pc, #332]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003952:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003956:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fe fb32 	bl	8001fc0 <HAL_GetTick>
 800395c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003960:	f7fe fb2e 	bl	8001fc0 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e092      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003972:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 8088 	bne.w	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003986:	4b46      	ldr	r3, [pc, #280]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a45      	ldr	r2, [pc, #276]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003992:	f7fe fb15 	bl	8001fc0 <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800399a:	f7fe fb11 	bl	8001fc0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	@ 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e075      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80039ac:	4b3c      	ldr	r3, [pc, #240]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b8:	d0ef      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d024      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d120      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039e2:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	019a      	lsls	r2, r3, #6
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	061b      	lsls	r3, r3, #24
 8003a02:	4927      	ldr	r1, [pc, #156]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003a0a:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a10:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	4920      	ldr	r1, [pc, #128]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d018      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a38:	d113      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a3a:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a40:	0e1b      	lsrs	r3, r3, #24
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	019a      	lsls	r2, r3, #6
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	431a      	orrs	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	061b      	lsls	r3, r3, #24
 8003a5a:	4911      	ldr	r1, [pc, #68]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6e:	f7fe faa7 	bl	8001fc0 <HAL_GetTick>
 8003a72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a76:	f7fe faa3 	bl	8001fc0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	@ 0x64
 8003a82:	d901      	bls.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e007      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a94:	d1ef      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3720      	adds	r7, #32
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e049      	b.n	8003b4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe f80a 	bl	8001ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 f900 	bl	8003ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_ConfigClockSource+0x1c>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0b4      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x186>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4b56      	ldr	r3, [pc, #344]	@ (8003ce4 <HAL_TIM_ConfigClockSource+0x190>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba8:	d03e      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0xd4>
 8003baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bae:	f200 8087 	bhi.w	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb6:	f000 8086 	beq.w	8003cc6 <HAL_TIM_ConfigClockSource+0x172>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bbe:	d87f      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b70      	cmp	r3, #112	@ 0x70
 8003bc2:	d01a      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0xa6>
 8003bc4:	2b70      	cmp	r3, #112	@ 0x70
 8003bc6:	d87b      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b60      	cmp	r3, #96	@ 0x60
 8003bca:	d050      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x11a>
 8003bcc:	2b60      	cmp	r3, #96	@ 0x60
 8003bce:	d877      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b50      	cmp	r3, #80	@ 0x50
 8003bd2:	d03c      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0xfa>
 8003bd4:	2b50      	cmp	r3, #80	@ 0x50
 8003bd6:	d873      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b40      	cmp	r3, #64	@ 0x40
 8003bda:	d058      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x13a>
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d86f      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b30      	cmp	r3, #48	@ 0x30
 8003be2:	d064      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b30      	cmp	r3, #48	@ 0x30
 8003be6:	d86b      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d060      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d867      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d05c      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d05a      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	e062      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c0a:	f000 f987 	bl	8003f1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	609a      	str	r2, [r3, #8]
      break;
 8003c26:	e04f      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c38:	f000 f970 	bl	8003f1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c4a:	609a      	str	r2, [r3, #8]
      break;
 8003c4c:	e03c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 f8e4 	bl	8003e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2150      	movs	r1, #80	@ 0x50
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f93d 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e02c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 f903 	bl	8003e86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2160      	movs	r1, #96	@ 0x60
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f92d 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e01c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 f8c4 	bl	8003e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2140      	movs	r1, #64	@ 0x40
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f91d 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003cac:	e00c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f000 f914 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003cbe:	e003      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	fffeff88 	.word	0xfffeff88

08003ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a40      	ldr	r2, [pc, #256]	@ (8003dfc <TIM_Base_SetConfig+0x114>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <TIM_Base_SetConfig+0x40>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d06:	d00f      	beq.n	8003d28 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e00 <TIM_Base_SetConfig+0x118>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3c      	ldr	r2, [pc, #240]	@ (8003e04 <TIM_Base_SetConfig+0x11c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e08 <TIM_Base_SetConfig+0x120>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3a      	ldr	r2, [pc, #232]	@ (8003e0c <TIM_Base_SetConfig+0x124>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d108      	bne.n	8003d3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <TIM_Base_SetConfig+0x114>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d02b      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d48:	d027      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e00 <TIM_Base_SetConfig+0x118>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d023      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <TIM_Base_SetConfig+0x11c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01f      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e08 <TIM_Base_SetConfig+0x120>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01b      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a29      	ldr	r2, [pc, #164]	@ (8003e0c <TIM_Base_SetConfig+0x124>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d017      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a28      	ldr	r2, [pc, #160]	@ (8003e10 <TIM_Base_SetConfig+0x128>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d013      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a27      	ldr	r2, [pc, #156]	@ (8003e14 <TIM_Base_SetConfig+0x12c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00f      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a26      	ldr	r2, [pc, #152]	@ (8003e18 <TIM_Base_SetConfig+0x130>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00b      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a25      	ldr	r2, [pc, #148]	@ (8003e1c <TIM_Base_SetConfig+0x134>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	@ (8003e20 <TIM_Base_SetConfig+0x138>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a23      	ldr	r2, [pc, #140]	@ (8003e24 <TIM_Base_SetConfig+0x13c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <TIM_Base_SetConfig+0x114>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_Base_SetConfig+0xf8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a0c      	ldr	r2, [pc, #48]	@ (8003e0c <TIM_Base_SetConfig+0x124>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d103      	bne.n	8003de8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	615a      	str	r2, [r3, #20]
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40010400 	.word	0x40010400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800
 8003e1c:	40001800 	.word	0x40001800
 8003e20:	40001c00 	.word	0x40001c00
 8003e24:	40002000 	.word	0x40002000

08003e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f023 0201 	bic.w	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 030a 	bic.w	r3, r3, #10
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f023 0210 	bic.w	r2, r3, #16
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f043 0307 	orr.w	r3, r3, #7
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	609a      	str	r2, [r3, #8]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	609a      	str	r2, [r3, #8]
}
 8003f50:	bf00      	nop
 8003f52:	371c      	adds	r7, #28
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e06d      	b.n	8004050 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a30      	ldr	r2, [pc, #192]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a20      	ldr	r2, [pc, #128]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe6:	d01d      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1a      	ldr	r2, [pc, #104]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d10c      	bne.n	800403e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800402a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40010000 	.word	0x40010000
 8004060:	40010400 	.word	0x40010400
 8004064:	40000400 	.word	0x40000400
 8004068:	40000800 	.word	0x40000800
 800406c:	40000c00 	.word	0x40000c00
 8004070:	40014000 	.word	0x40014000
 8004074:	40001800 	.word	0x40001800

08004078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e040      	b.n	800410c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fd54 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2224      	movs	r2, #36	@ 0x24
 80040a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f82c 	bl	8004114 <UART_SetConfig>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e022      	b.n	800410c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fa84 	bl	80045dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fb0b 	bl	8004720 <UART_CheckIdleState>
 800410a:	4603      	mov	r3, r0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69db      	ldr	r3, [r3, #28]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4ba6      	ldr	r3, [pc, #664]	@ (80043d8 <UART_SetConfig+0x2c4>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	430b      	orrs	r3, r1
 800414a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a94      	ldr	r2, [pc, #592]	@ (80043dc <UART_SetConfig+0x2c8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d120      	bne.n	80041d2 <UART_SetConfig+0xbe>
 8004190:	4b93      	ldr	r3, [pc, #588]	@ (80043e0 <UART_SetConfig+0x2cc>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b03      	cmp	r3, #3
 800419c:	d816      	bhi.n	80041cc <UART_SetConfig+0xb8>
 800419e:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <UART_SetConfig+0x90>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041c1 	.word	0x080041c1
 80041ac:	080041bb 	.word	0x080041bb
 80041b0:	080041c7 	.word	0x080041c7
 80041b4:	2301      	movs	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e150      	b.n	800445c <UART_SetConfig+0x348>
 80041ba:	2302      	movs	r3, #2
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e14d      	b.n	800445c <UART_SetConfig+0x348>
 80041c0:	2304      	movs	r3, #4
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e14a      	b.n	800445c <UART_SetConfig+0x348>
 80041c6:	2308      	movs	r3, #8
 80041c8:	77fb      	strb	r3, [r7, #31]
 80041ca:	e147      	b.n	800445c <UART_SetConfig+0x348>
 80041cc:	2310      	movs	r3, #16
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e144      	b.n	800445c <UART_SetConfig+0x348>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a83      	ldr	r2, [pc, #524]	@ (80043e4 <UART_SetConfig+0x2d0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d132      	bne.n	8004242 <UART_SetConfig+0x12e>
 80041dc:	4b80      	ldr	r3, [pc, #512]	@ (80043e0 <UART_SetConfig+0x2cc>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d828      	bhi.n	800423c <UART_SetConfig+0x128>
 80041ea:	a201      	add	r2, pc, #4	@ (adr r2, 80041f0 <UART_SetConfig+0xdc>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004225 	.word	0x08004225
 80041f4:	0800423d 	.word	0x0800423d
 80041f8:	0800423d 	.word	0x0800423d
 80041fc:	0800423d 	.word	0x0800423d
 8004200:	08004231 	.word	0x08004231
 8004204:	0800423d 	.word	0x0800423d
 8004208:	0800423d 	.word	0x0800423d
 800420c:	0800423d 	.word	0x0800423d
 8004210:	0800422b 	.word	0x0800422b
 8004214:	0800423d 	.word	0x0800423d
 8004218:	0800423d 	.word	0x0800423d
 800421c:	0800423d 	.word	0x0800423d
 8004220:	08004237 	.word	0x08004237
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e118      	b.n	800445c <UART_SetConfig+0x348>
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e115      	b.n	800445c <UART_SetConfig+0x348>
 8004230:	2304      	movs	r3, #4
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e112      	b.n	800445c <UART_SetConfig+0x348>
 8004236:	2308      	movs	r3, #8
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e10f      	b.n	800445c <UART_SetConfig+0x348>
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e10c      	b.n	800445c <UART_SetConfig+0x348>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a68      	ldr	r2, [pc, #416]	@ (80043e8 <UART_SetConfig+0x2d4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d120      	bne.n	800428e <UART_SetConfig+0x17a>
 800424c:	4b64      	ldr	r3, [pc, #400]	@ (80043e0 <UART_SetConfig+0x2cc>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004256:	2b30      	cmp	r3, #48	@ 0x30
 8004258:	d013      	beq.n	8004282 <UART_SetConfig+0x16e>
 800425a:	2b30      	cmp	r3, #48	@ 0x30
 800425c:	d814      	bhi.n	8004288 <UART_SetConfig+0x174>
 800425e:	2b20      	cmp	r3, #32
 8004260:	d009      	beq.n	8004276 <UART_SetConfig+0x162>
 8004262:	2b20      	cmp	r3, #32
 8004264:	d810      	bhi.n	8004288 <UART_SetConfig+0x174>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <UART_SetConfig+0x15c>
 800426a:	2b10      	cmp	r3, #16
 800426c:	d006      	beq.n	800427c <UART_SetConfig+0x168>
 800426e:	e00b      	b.n	8004288 <UART_SetConfig+0x174>
 8004270:	2300      	movs	r3, #0
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e0f2      	b.n	800445c <UART_SetConfig+0x348>
 8004276:	2302      	movs	r3, #2
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e0ef      	b.n	800445c <UART_SetConfig+0x348>
 800427c:	2304      	movs	r3, #4
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e0ec      	b.n	800445c <UART_SetConfig+0x348>
 8004282:	2308      	movs	r3, #8
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e0e9      	b.n	800445c <UART_SetConfig+0x348>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e0e6      	b.n	800445c <UART_SetConfig+0x348>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a56      	ldr	r2, [pc, #344]	@ (80043ec <UART_SetConfig+0x2d8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d120      	bne.n	80042da <UART_SetConfig+0x1c6>
 8004298:	4b51      	ldr	r3, [pc, #324]	@ (80043e0 <UART_SetConfig+0x2cc>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80042a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80042a4:	d013      	beq.n	80042ce <UART_SetConfig+0x1ba>
 80042a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80042a8:	d814      	bhi.n	80042d4 <UART_SetConfig+0x1c0>
 80042aa:	2b80      	cmp	r3, #128	@ 0x80
 80042ac:	d009      	beq.n	80042c2 <UART_SetConfig+0x1ae>
 80042ae:	2b80      	cmp	r3, #128	@ 0x80
 80042b0:	d810      	bhi.n	80042d4 <UART_SetConfig+0x1c0>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <UART_SetConfig+0x1a8>
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d006      	beq.n	80042c8 <UART_SetConfig+0x1b4>
 80042ba:	e00b      	b.n	80042d4 <UART_SetConfig+0x1c0>
 80042bc:	2300      	movs	r3, #0
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e0cc      	b.n	800445c <UART_SetConfig+0x348>
 80042c2:	2302      	movs	r3, #2
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e0c9      	b.n	800445c <UART_SetConfig+0x348>
 80042c8:	2304      	movs	r3, #4
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e0c6      	b.n	800445c <UART_SetConfig+0x348>
 80042ce:	2308      	movs	r3, #8
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e0c3      	b.n	800445c <UART_SetConfig+0x348>
 80042d4:	2310      	movs	r3, #16
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e0c0      	b.n	800445c <UART_SetConfig+0x348>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a44      	ldr	r2, [pc, #272]	@ (80043f0 <UART_SetConfig+0x2dc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d125      	bne.n	8004330 <UART_SetConfig+0x21c>
 80042e4:	4b3e      	ldr	r3, [pc, #248]	@ (80043e0 <UART_SetConfig+0x2cc>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f2:	d017      	beq.n	8004324 <UART_SetConfig+0x210>
 80042f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f8:	d817      	bhi.n	800432a <UART_SetConfig+0x216>
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fe:	d00b      	beq.n	8004318 <UART_SetConfig+0x204>
 8004300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004304:	d811      	bhi.n	800432a <UART_SetConfig+0x216>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <UART_SetConfig+0x1fe>
 800430a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800430e:	d006      	beq.n	800431e <UART_SetConfig+0x20a>
 8004310:	e00b      	b.n	800432a <UART_SetConfig+0x216>
 8004312:	2300      	movs	r3, #0
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e0a1      	b.n	800445c <UART_SetConfig+0x348>
 8004318:	2302      	movs	r3, #2
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e09e      	b.n	800445c <UART_SetConfig+0x348>
 800431e:	2304      	movs	r3, #4
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e09b      	b.n	800445c <UART_SetConfig+0x348>
 8004324:	2308      	movs	r3, #8
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e098      	b.n	800445c <UART_SetConfig+0x348>
 800432a:	2310      	movs	r3, #16
 800432c:	77fb      	strb	r3, [r7, #31]
 800432e:	e095      	b.n	800445c <UART_SetConfig+0x348>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a2f      	ldr	r2, [pc, #188]	@ (80043f4 <UART_SetConfig+0x2e0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d125      	bne.n	8004386 <UART_SetConfig+0x272>
 800433a:	4b29      	ldr	r3, [pc, #164]	@ (80043e0 <UART_SetConfig+0x2cc>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004340:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004344:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004348:	d017      	beq.n	800437a <UART_SetConfig+0x266>
 800434a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800434e:	d817      	bhi.n	8004380 <UART_SetConfig+0x26c>
 8004350:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004354:	d00b      	beq.n	800436e <UART_SetConfig+0x25a>
 8004356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800435a:	d811      	bhi.n	8004380 <UART_SetConfig+0x26c>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <UART_SetConfig+0x254>
 8004360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004364:	d006      	beq.n	8004374 <UART_SetConfig+0x260>
 8004366:	e00b      	b.n	8004380 <UART_SetConfig+0x26c>
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e076      	b.n	800445c <UART_SetConfig+0x348>
 800436e:	2302      	movs	r3, #2
 8004370:	77fb      	strb	r3, [r7, #31]
 8004372:	e073      	b.n	800445c <UART_SetConfig+0x348>
 8004374:	2304      	movs	r3, #4
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e070      	b.n	800445c <UART_SetConfig+0x348>
 800437a:	2308      	movs	r3, #8
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e06d      	b.n	800445c <UART_SetConfig+0x348>
 8004380:	2310      	movs	r3, #16
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e06a      	b.n	800445c <UART_SetConfig+0x348>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <UART_SetConfig+0x2e4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d138      	bne.n	8004402 <UART_SetConfig+0x2ee>
 8004390:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <UART_SetConfig+0x2cc>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004396:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800439a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800439e:	d017      	beq.n	80043d0 <UART_SetConfig+0x2bc>
 80043a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80043a4:	d82a      	bhi.n	80043fc <UART_SetConfig+0x2e8>
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043aa:	d00b      	beq.n	80043c4 <UART_SetConfig+0x2b0>
 80043ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b0:	d824      	bhi.n	80043fc <UART_SetConfig+0x2e8>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <UART_SetConfig+0x2aa>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ba:	d006      	beq.n	80043ca <UART_SetConfig+0x2b6>
 80043bc:	e01e      	b.n	80043fc <UART_SetConfig+0x2e8>
 80043be:	2300      	movs	r3, #0
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e04b      	b.n	800445c <UART_SetConfig+0x348>
 80043c4:	2302      	movs	r3, #2
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e048      	b.n	800445c <UART_SetConfig+0x348>
 80043ca:	2304      	movs	r3, #4
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e045      	b.n	800445c <UART_SetConfig+0x348>
 80043d0:	2308      	movs	r3, #8
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e042      	b.n	800445c <UART_SetConfig+0x348>
 80043d6:	bf00      	nop
 80043d8:	efff69f3 	.word	0xefff69f3
 80043dc:	40011000 	.word	0x40011000
 80043e0:	40023800 	.word	0x40023800
 80043e4:	40004400 	.word	0x40004400
 80043e8:	40004800 	.word	0x40004800
 80043ec:	40004c00 	.word	0x40004c00
 80043f0:	40005000 	.word	0x40005000
 80043f4:	40011400 	.word	0x40011400
 80043f8:	40007800 	.word	0x40007800
 80043fc:	2310      	movs	r3, #16
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e02c      	b.n	800445c <UART_SetConfig+0x348>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a72      	ldr	r2, [pc, #456]	@ (80045d0 <UART_SetConfig+0x4bc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d125      	bne.n	8004458 <UART_SetConfig+0x344>
 800440c:	4b71      	ldr	r3, [pc, #452]	@ (80045d4 <UART_SetConfig+0x4c0>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004412:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004416:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800441a:	d017      	beq.n	800444c <UART_SetConfig+0x338>
 800441c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004420:	d817      	bhi.n	8004452 <UART_SetConfig+0x33e>
 8004422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004426:	d00b      	beq.n	8004440 <UART_SetConfig+0x32c>
 8004428:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800442c:	d811      	bhi.n	8004452 <UART_SetConfig+0x33e>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <UART_SetConfig+0x326>
 8004432:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004436:	d006      	beq.n	8004446 <UART_SetConfig+0x332>
 8004438:	e00b      	b.n	8004452 <UART_SetConfig+0x33e>
 800443a:	2300      	movs	r3, #0
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e00d      	b.n	800445c <UART_SetConfig+0x348>
 8004440:	2302      	movs	r3, #2
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e00a      	b.n	800445c <UART_SetConfig+0x348>
 8004446:	2304      	movs	r3, #4
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e007      	b.n	800445c <UART_SetConfig+0x348>
 800444c:	2308      	movs	r3, #8
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e004      	b.n	800445c <UART_SetConfig+0x348>
 8004452:	2310      	movs	r3, #16
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e001      	b.n	800445c <UART_SetConfig+0x348>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004464:	d15b      	bne.n	800451e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004466:	7ffb      	ldrb	r3, [r7, #31]
 8004468:	2b08      	cmp	r3, #8
 800446a:	d828      	bhi.n	80044be <UART_SetConfig+0x3aa>
 800446c:	a201      	add	r2, pc, #4	@ (adr r2, 8004474 <UART_SetConfig+0x360>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	080044bf 	.word	0x080044bf
 8004484:	080044af 	.word	0x080044af
 8004488:	080044bf 	.word	0x080044bf
 800448c:	080044bf 	.word	0x080044bf
 8004490:	080044bf 	.word	0x080044bf
 8004494:	080044b7 	.word	0x080044b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004498:	f7fe ff92 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 800449c:	61b8      	str	r0, [r7, #24]
        break;
 800449e:	e013      	b.n	80044c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a0:	f7fe ffa2 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 80044a4:	61b8      	str	r0, [r7, #24]
        break;
 80044a6:	e00f      	b.n	80044c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044a8:	4b4b      	ldr	r3, [pc, #300]	@ (80045d8 <UART_SetConfig+0x4c4>)
 80044aa:	61bb      	str	r3, [r7, #24]
        break;
 80044ac:	e00c      	b.n	80044c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ae:	f7fe fe75 	bl	800319c <HAL_RCC_GetSysClockFreq>
 80044b2:	61b8      	str	r0, [r7, #24]
        break;
 80044b4:	e008      	b.n	80044c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ba:	61bb      	str	r3, [r7, #24]
        break;
 80044bc:	e004      	b.n	80044c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	77bb      	strb	r3, [r7, #30]
        break;
 80044c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d074      	beq.n	80045b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	005a      	lsls	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b0f      	cmp	r3, #15
 80044e8:	d916      	bls.n	8004518 <UART_SetConfig+0x404>
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f0:	d212      	bcs.n	8004518 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f023 030f 	bic.w	r3, r3, #15
 80044fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	b29a      	uxth	r2, r3
 8004508:	89fb      	ldrh	r3, [r7, #14]
 800450a:	4313      	orrs	r3, r2
 800450c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	89fa      	ldrh	r2, [r7, #14]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	e04f      	b.n	80045b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	77bb      	strb	r3, [r7, #30]
 800451c:	e04c      	b.n	80045b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800451e:	7ffb      	ldrb	r3, [r7, #31]
 8004520:	2b08      	cmp	r3, #8
 8004522:	d828      	bhi.n	8004576 <UART_SetConfig+0x462>
 8004524:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <UART_SetConfig+0x418>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004551 	.word	0x08004551
 8004530:	08004559 	.word	0x08004559
 8004534:	08004561 	.word	0x08004561
 8004538:	08004577 	.word	0x08004577
 800453c:	08004567 	.word	0x08004567
 8004540:	08004577 	.word	0x08004577
 8004544:	08004577 	.word	0x08004577
 8004548:	08004577 	.word	0x08004577
 800454c:	0800456f 	.word	0x0800456f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7fe ff36 	bl	80033c0 <HAL_RCC_GetPCLK1Freq>
 8004554:	61b8      	str	r0, [r7, #24]
        break;
 8004556:	e013      	b.n	8004580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004558:	f7fe ff46 	bl	80033e8 <HAL_RCC_GetPCLK2Freq>
 800455c:	61b8      	str	r0, [r7, #24]
        break;
 800455e:	e00f      	b.n	8004580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004560:	4b1d      	ldr	r3, [pc, #116]	@ (80045d8 <UART_SetConfig+0x4c4>)
 8004562:	61bb      	str	r3, [r7, #24]
        break;
 8004564:	e00c      	b.n	8004580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004566:	f7fe fe19 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800456a:	61b8      	str	r0, [r7, #24]
        break;
 800456c:	e008      	b.n	8004580 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004572:	61bb      	str	r3, [r7, #24]
        break;
 8004574:	e004      	b.n	8004580 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	77bb      	strb	r3, [r7, #30]
        break;
 800457e:	bf00      	nop
    }

    if (pclk != 0U)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d018      	beq.n	80045b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	085a      	lsrs	r2, r3, #1
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	441a      	add	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	fbb2 f3f3 	udiv	r3, r2, r3
 8004598:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b0f      	cmp	r3, #15
 800459e:	d909      	bls.n	80045b4 <UART_SetConfig+0x4a0>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a6:	d205      	bcs.n	80045b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	e001      	b.n	80045b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40007c00 	.word	0x40007c00
 80045d4:	40023800 	.word	0x40023800
 80045d8:	00f42400 	.word	0x00f42400

080045dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00a      	beq.n	8004606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00a      	beq.n	8004628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00a      	beq.n	800464a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01a      	beq.n	80046f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046da:	d10a      	bne.n	80046f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00a      	beq.n	8004714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004730:	f7fd fc46 	bl	8001fc0 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b08      	cmp	r3, #8
 8004742:	d10e      	bne.n	8004762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004744:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f81b 	bl	800478e <UART_WaitOnFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e011      	b.n	8004786 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b09c      	sub	sp, #112	@ 0x70
 8004792:	af00      	add	r7, sp, #0
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	e0a7      	b.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047a6:	f000 80a3 	beq.w	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047aa:	f7fd fc09 	bl	8001fc0 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80047ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d13f      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80047ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80047e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80047ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e6      	bne.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3308      	adds	r3, #8
 80047f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	663b      	str	r3, [r7, #96]	@ 0x60
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3308      	adds	r3, #8
 8004810:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004812:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004814:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2220      	movs	r2, #32
 800482a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e068      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d050      	beq.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800485c:	d148      	bne.n	80048f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004866:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800487c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
 8004888:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800488c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800488e:	e841 2300 	strex	r3, r2, [r1]
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1e6      	bne.n	8004868 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3308      	adds	r3, #8
 80048a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80048ba:	623a      	str	r2, [r7, #32]
 80048bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	69f9      	ldr	r1, [r7, #28]
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e010      	b.n	8004912 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	bf0c      	ite	eq
 8004900:	2301      	moveq	r3, #1
 8004902:	2300      	movne	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	429a      	cmp	r2, r3
 800490c:	f43f af48 	beq.w	80047a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3770      	adds	r7, #112	@ 0x70
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800491c:	b084      	sub	sp, #16
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	f107 001c 	add.w	r0, r7, #28
 800492a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	2b01      	cmp	r3, #1
 8004932:	d126      	bne.n	8004982 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4b38      	ldr	r3, [pc, #224]	@ (8004a28 <USB_CoreInit+0x10c>)
 8004946:	4013      	ands	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fad0 	bl	8004f1c <USB_CoreReset>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e03a      	b.n	80049f8 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	2b03      	cmp	r3, #3
 8004986:	d126      	bne.n	80049d6 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	4b23      	ldr	r3, [pc, #140]	@ (8004a28 <USB_CoreInit+0x10c>)
 800499a:	4013      	ands	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f023 0210 	bic.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80049b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 faa6 	bl	8004f1c <USB_CoreReset>
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e010      	b.n	80049f8 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa9a 	bl	8004f1c <USB_CoreReset>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10b      	bne.n	8004a16 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f043 0206 	orr.w	r2, r3, #6
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a22:	b004      	add	sp, #16
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	ffbdffbf 	.word	0xffbdffbf

08004a2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 0201 	bic.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d115      	bne.n	8004a9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7fd faab 	bl	8001fd8 <HAL_Delay>
      ms++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fa39 	bl	8004f00 <USB_GetMode>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d01e      	beq.n	8004ad2 <USB_SetCurrentMode+0x84>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b31      	cmp	r3, #49	@ 0x31
 8004a98:	d9f0      	bls.n	8004a7c <USB_SetCurrentMode+0x2e>
 8004a9a:	e01a      	b.n	8004ad2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f7fd fa92 	bl	8001fd8 <HAL_Delay>
      ms++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa20 	bl	8004f00 <USB_GetMode>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <USB_SetCurrentMode+0x84>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b31      	cmp	r3, #49	@ 0x31
 8004aca:	d9f0      	bls.n	8004aae <USB_SetCurrentMode+0x60>
 8004acc:	e001      	b.n	8004ad2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e005      	b.n	8004ade <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b32      	cmp	r3, #50	@ 0x32
 8004ad6:	d101      	bne.n	8004adc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae8:	b084      	sub	sp, #16
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e009      	b.n	8004b1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3340      	adds	r3, #64	@ 0x40
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0e      	cmp	r3, #14
 8004b20:	d9f2      	bls.n	8004b08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11c      	bne.n	8004b62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b36:	f043 0302 	orr.w	r3, r3, #2
 8004b3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e005      	b.n	8004b6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b80:	4619      	mov	r1, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b88:	461a      	mov	r2, r3
 8004b8a:	680b      	ldr	r3, [r1, #0]
 8004b8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10c      	bne.n	8004bae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f975 	bl	8004e8c <USB_SetDevSpeed>
 8004ba2:	e018      	b.n	8004bd6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f970 	bl	8004e8c <USB_SetDevSpeed>
 8004bac:	e013      	b.n	8004bd6 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d10c      	bne.n	8004bce <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f965 	bl	8004e8c <USB_SetDevSpeed>
 8004bc2:	e008      	b.n	8004bd6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f960 	bl	8004e8c <USB_SetDevSpeed>
 8004bcc:	e003      	b.n	8004bd6 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bce:	2103      	movs	r1, #3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f95b 	bl	8004e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8f3 	bl	8004dc4 <USB_FlushTxFifo>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f91f 	bl	8004e2c <USB_FlushRxFifo>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e043      	b.n	8004caa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c38:	d118      	bne.n	8004c6c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e013      	b.n	8004c7e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c62:	461a      	mov	r2, r3
 8004c64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e008      	b.n	8004c7e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3b7      	bcc.n	8004c22 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e043      	b.n	8004d40 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cce:	d118      	bne.n	8004d02 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e013      	b.n	8004d14 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e008      	b.n	8004d14 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d32:	461a      	mov	r2, r3
 8004d34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3b7      	bcc.n	8004cb8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f043 0210 	orr.w	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	4b0e      	ldr	r3, [pc, #56]	@ (8004dbc <USB_DevInit+0x2d4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f043 0208 	orr.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <USB_DevInit+0x2d8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	803c3800 	.word	0x803c3800
 8004dc0:	40000004 	.word	0x40000004

08004dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a13      	ldr	r2, [pc, #76]	@ (8004e28 <USB_FlushTxFifo+0x64>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e01b      	b.n	8004e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	daf2      	bge.n	8004dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	019b      	lsls	r3, r3, #6
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a08      	ldr	r2, [pc, #32]	@ (8004e28 <USB_FlushTxFifo+0x64>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e006      	b.n	8004e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d0f0      	beq.n	8004dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00030d40 	.word	0x00030d40

08004e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4a11      	ldr	r2, [pc, #68]	@ (8004e88 <USB_FlushRxFifo+0x5c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e018      	b.n	8004e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	daf2      	bge.n	8004e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2210      	movs	r2, #16
 8004e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a08      	ldr	r2, [pc, #32]	@ (8004e88 <USB_FlushRxFifo+0x5c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e006      	b.n	8004e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d0f0      	beq.n	8004e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	00030d40 	.word	0x00030d40

08004e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ed8:	f023 0303 	bic.w	r3, r3, #3
 8004edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a13      	ldr	r2, [pc, #76]	@ (8004f80 <USB_CoreReset+0x64>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e01b      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	daf2      	bge.n	8004f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f043 0201 	orr.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a09      	ldr	r2, [pc, #36]	@ (8004f80 <USB_CoreReset+0x64>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d0f0      	beq.n	8004f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	00030d40 	.word	0x00030d40

08004f84 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08c      	sub	sp, #48	@ 0x30
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t n_fft = S->FFTLen;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *scratch_buffer = S->pScratch;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	68b8      	ldr	r0, [r7, #8]
 8004fac:	f001 f8e4 	bl	8006178 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	18d0      	adds	r0, r2, r3
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	f004 fe11 	bl	8009be8 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	6a3a      	ldr	r2, [r7, #32]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	f000 fc16 	bl	8005800 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	ed93 7a00 	vldr	s14, [r3]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	edd3 7a00 	vldr	s15, [r3]
 8004fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe4:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	3304      	adds	r3, #4
 8004fec:	ed93 7a00 	vldr	s14, [r3]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	edd3 7a00 	vldr	s15, [r3]
 8004ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ffc:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f103 0008 	add.w	r0, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1d19      	adds	r1, r3, #4
 8005010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	3b01      	subs	r3, #1
 8005016:	461a      	mov	r2, r3
 8005018:	f001 f856 	bl	80060c8 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	791b      	ldrb	r3, [r3, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d12c      	bne.n	800508c <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005036:	e023      	b.n	8005080 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8005038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	440b      	add	r3, r1
 800504a:	617a      	str	r2, [r7, #20]
 800504c:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800504e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005052:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800505a:	db09      	blt.n	8005070 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800505c:	ed97 0a05 	vldr	s0, [r7, #20]
 8005060:	f006 fcd4 	bl	800ba0c <sqrtf>
 8005064:	eef0 7a40 	vmov.f32	s15, s0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800506e:	e004      	b.n	800507a <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8005078:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800507a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507c:	3301      	adds	r3, #1
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	085b      	lsrs	r3, r3, #1
 8005084:	3301      	adds	r3, #1
 8005086:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005088:	429a      	cmp	r2, r3
 800508a:	d3d5      	bcc.n	8005038 <SpectrogramColumn+0xb4>
    }
  }
}
 800508c:	bf00      	nop
 800508e:	3730      	adds	r7, #48	@ 0x30
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	617b      	str	r3, [r7, #20]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ff67 	bl	8004f84 <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6979      	ldr	r1, [r7, #20]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f804 	bl	80050cc <MelFilterbank>
}
 80050c4:	bf00      	nop
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b08d      	sub	sp, #52	@ 0x34
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t n_mels = M->NumMels;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 80050f0:	2300      	movs	r3, #0
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f4:	e034      	b.n	8005160 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 80050f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4413      	add	r3, r2
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005114:	8a7b      	ldrh	r3, [r7, #18]
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	e015      	b.n	8005146 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4413      	add	r3, r2
 8005122:	ed93 7a00 	vldr	s14, [r3]
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800512c:	edd3 7a00 	vldr	s15, [r3]
 8005130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005134:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	3301      	adds	r3, #1
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	8a3b      	ldrh	r3, [r7, #16]
 8005148:	6a3a      	ldr	r2, [r7, #32]
 800514a:	429a      	cmp	r2, r3
 800514c:	d9e5      	bls.n	800511a <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005158:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	3301      	adds	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d3c6      	bcc.n	80050f6 <MelFilterbank+0x2a>
  }
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	3734      	adds	r7, #52	@ 0x34
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <network_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_1_activations_map, 1, params)) {
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	2101      	movs	r1, #1
 8005186:	4837      	ldr	r0, [pc, #220]	@ (8005264 <network_1_configure_activations+0xec>)
 8005188:	f001 fbd4 	bl	8006934 <ai_platform_get_activations_map>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d05d      	beq.n	800524e <network_1_configure_activations+0xd6>
    /* Updating activations (byte) offsets */
    
    serving_default_input_layer0_output_array.data = AI_PTR(g_network_1_activations_map[0] + 11648);
 8005192:	4b34      	ldr	r3, [pc, #208]	@ (8005264 <network_1_configure_activations+0xec>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f503 5336 	add.w	r3, r3, #11648	@ 0x2d80
 800519a:	4a33      	ldr	r2, [pc, #204]	@ (8005268 <network_1_configure_activations+0xf0>)
 800519c:	6093      	str	r3, [r2, #8]
    serving_default_input_layer0_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 11648);
 800519e:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <network_1_configure_activations+0xec>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f503 5336 	add.w	r3, r3, #11648	@ 0x2d80
 80051a6:	4a30      	ldr	r2, [pc, #192]	@ (8005268 <network_1_configure_activations+0xf0>)
 80051a8:	60d3      	str	r3, [r2, #12]
    conv2d_0_scratch0_array.data = AI_PTR(g_network_1_activations_map[0] + 15488);
 80051aa:	4b2e      	ldr	r3, [pc, #184]	@ (8005264 <network_1_configure_activations+0xec>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f503 5372 	add.w	r3, r3, #15488	@ 0x3c80
 80051b2:	4a2e      	ldr	r2, [pc, #184]	@ (800526c <network_1_configure_activations+0xf4>)
 80051b4:	6093      	str	r3, [r2, #8]
    conv2d_0_scratch0_array.data_start = AI_PTR(g_network_1_activations_map[0] + 15488);
 80051b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005264 <network_1_configure_activations+0xec>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f503 5372 	add.w	r3, r3, #15488	@ 0x3c80
 80051be:	4a2b      	ldr	r2, [pc, #172]	@ (800526c <network_1_configure_activations+0xf4>)
 80051c0:	60d3      	str	r3, [r2, #12]
    conv2d_0_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80051c2:	4b28      	ldr	r3, [pc, #160]	@ (8005264 <network_1_configure_activations+0xec>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005270 <network_1_configure_activations+0xf8>)
 80051c8:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 80051ca:	4b26      	ldr	r3, [pc, #152]	@ (8005264 <network_1_configure_activations+0xec>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a28      	ldr	r2, [pc, #160]	@ (8005270 <network_1_configure_activations+0xf8>)
 80051d0:	60d3      	str	r3, [r2, #12]
    conv2d_2_scratch0_array.data = AI_PTR(g_network_1_activations_map[0] + 13440);
 80051d2:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <network_1_configure_activations+0xec>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f503 5352 	add.w	r3, r3, #13440	@ 0x3480
 80051da:	4a26      	ldr	r2, [pc, #152]	@ (8005274 <network_1_configure_activations+0xfc>)
 80051dc:	6093      	str	r3, [r2, #8]
    conv2d_2_scratch0_array.data_start = AI_PTR(g_network_1_activations_map[0] + 13440);
 80051de:	4b21      	ldr	r3, [pc, #132]	@ (8005264 <network_1_configure_activations+0xec>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f503 5352 	add.w	r3, r3, #13440	@ 0x3480
 80051e6:	4a23      	ldr	r2, [pc, #140]	@ (8005274 <network_1_configure_activations+0xfc>)
 80051e8:	60d3      	str	r3, [r2, #12]
    conv2d_2_output_array.data = AI_PTR(g_network_1_activations_map[0] + 15104);
 80051ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005264 <network_1_configure_activations+0xec>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f503 536c 	add.w	r3, r3, #15104	@ 0x3b00
 80051f2:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <network_1_configure_activations+0x100>)
 80051f4:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 15104);
 80051f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005264 <network_1_configure_activations+0xec>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f503 536c 	add.w	r3, r3, #15104	@ 0x3b00
 80051fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <network_1_configure_activations+0x100>)
 8005200:	60d3      	str	r3, [r2, #12]
    gemm_5_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 8005202:	4b18      	ldr	r3, [pc, #96]	@ (8005264 <network_1_configure_activations+0xec>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1d      	ldr	r2, [pc, #116]	@ (800527c <network_1_configure_activations+0x104>)
 8005208:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800520a:	4b16      	ldr	r3, [pc, #88]	@ (8005264 <network_1_configure_activations+0xec>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <network_1_configure_activations+0x104>)
 8005210:	60d3      	str	r3, [r2, #12]
    nl_5_nl_output_array.data = AI_PTR(g_network_1_activations_map[0] + 100);
 8005212:	4b14      	ldr	r3, [pc, #80]	@ (8005264 <network_1_configure_activations+0xec>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3364      	adds	r3, #100	@ 0x64
 8005218:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <network_1_configure_activations+0x108>)
 800521a:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 100);
 800521c:	4b11      	ldr	r3, [pc, #68]	@ (8005264 <network_1_configure_activations+0xec>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3364      	adds	r3, #100	@ 0x64
 8005222:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <network_1_configure_activations+0x108>)
 8005224:	60d3      	str	r3, [r2, #12]
    gemm_6_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 8005226:	4b0f      	ldr	r3, [pc, #60]	@ (8005264 <network_1_configure_activations+0xec>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <network_1_configure_activations+0x10c>)
 800522c:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <network_1_configure_activations+0xec>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a14      	ldr	r2, [pc, #80]	@ (8005284 <network_1_configure_activations+0x10c>)
 8005234:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(g_network_1_activations_map[0] + 20);
 8005236:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <network_1_configure_activations+0xec>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	4a12      	ldr	r2, [pc, #72]	@ (8005288 <network_1_configure_activations+0x110>)
 800523e:	6093      	str	r3, [r2, #8]
    nl_7_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 20);
 8005240:	4b08      	ldr	r3, [pc, #32]	@ (8005264 <network_1_configure_activations+0xec>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3314      	adds	r3, #20
 8005246:	4a10      	ldr	r2, [pc, #64]	@ (8005288 <network_1_configure_activations+0x110>)
 8005248:	60d3      	str	r3, [r2, #12]
    return true;
 800524a:	2301      	movs	r3, #1
 800524c:	e005      	b.n	800525a <network_1_configure_activations+0xe2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800524e:	2213      	movs	r2, #19
 8005250:	2130      	movs	r1, #48	@ 0x30
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f001 fbec 	bl	8006a30 <ai_platform_network_set_error>
  return false;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20018520 	.word	0x20018520
 8005268:	2000001c 	.word	0x2000001c
 800526c:	2000010c 	.word	0x2000010c
 8005270:	2000002c 	.word	0x2000002c
 8005274:	2000011c 	.word	0x2000011c
 8005278:	2000003c 	.word	0x2000003c
 800527c:	2000004c 	.word	0x2000004c
 8005280:	2000005c 	.word	0x2000005c
 8005284:	2000006c 	.word	0x2000006c
 8005288:	2000007c 	.word	0x2000007c

0800528c <network_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_1_weights_map, 1, params)) {
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	2101      	movs	r1, #1
 800529a:	484f      	ldr	r0, [pc, #316]	@ (80053d8 <network_1_configure_weights+0x14c>)
 800529c:	f001 faf2 	bl	8006884 <ai_platform_get_weights_map>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 808e 	beq.w	80053c4 <network_1_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80052a8:	4b4c      	ldr	r3, [pc, #304]	@ (80053dc <network_1_configure_weights+0x150>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052b0:	4a4a      	ldr	r2, [pc, #296]	@ (80053dc <network_1_configure_weights+0x150>)
 80052b2:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 0);
 80052b4:	4b48      	ldr	r3, [pc, #288]	@ (80053d8 <network_1_configure_weights+0x14c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a48      	ldr	r2, [pc, #288]	@ (80053dc <network_1_configure_weights+0x150>)
 80052ba:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 0);
 80052bc:	4b46      	ldr	r3, [pc, #280]	@ (80053d8 <network_1_configure_weights+0x14c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a46      	ldr	r2, [pc, #280]	@ (80053dc <network_1_configure_weights+0x150>)
 80052c2:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80052c4:	4b46      	ldr	r3, [pc, #280]	@ (80053e0 <network_1_configure_weights+0x154>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052cc:	4a44      	ldr	r2, [pc, #272]	@ (80053e0 <network_1_configure_weights+0x154>)
 80052ce:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 576);
 80052d0:	4b41      	ldr	r3, [pc, #260]	@ (80053d8 <network_1_configure_weights+0x14c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80052d8:	4a41      	ldr	r2, [pc, #260]	@ (80053e0 <network_1_configure_weights+0x154>)
 80052da:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 576);
 80052dc:	4b3e      	ldr	r3, [pc, #248]	@ (80053d8 <network_1_configure_weights+0x14c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80052e4:	4a3e      	ldr	r2, [pc, #248]	@ (80053e0 <network_1_configure_weights+0x154>)
 80052e6:	60d3      	str	r3, [r2, #12]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80052e8:	4b3e      	ldr	r3, [pc, #248]	@ (80053e4 <network_1_configure_weights+0x158>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052f0:	4a3c      	ldr	r2, [pc, #240]	@ (80053e4 <network_1_configure_weights+0x158>)
 80052f2:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 640);
 80052f4:	4b38      	ldr	r3, [pc, #224]	@ (80053d8 <network_1_configure_weights+0x14c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80052fc:	4a39      	ldr	r2, [pc, #228]	@ (80053e4 <network_1_configure_weights+0x158>)
 80052fe:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 640);
 8005300:	4b35      	ldr	r3, [pc, #212]	@ (80053d8 <network_1_configure_weights+0x14c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005308:	4a36      	ldr	r2, [pc, #216]	@ (80053e4 <network_1_configure_weights+0x158>)
 800530a:	60d3      	str	r3, [r2, #12]
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800530c:	4b36      	ldr	r3, [pc, #216]	@ (80053e8 <network_1_configure_weights+0x15c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005314:	4a34      	ldr	r2, [pc, #208]	@ (80053e8 <network_1_configure_weights+0x15c>)
 8005316:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 9856);
 8005318:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <network_1_configure_weights+0x14c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 8005320:	4a31      	ldr	r2, [pc, #196]	@ (80053e8 <network_1_configure_weights+0x15c>)
 8005322:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 9856);
 8005324:	4b2c      	ldr	r3, [pc, #176]	@ (80053d8 <network_1_configure_weights+0x14c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 800532c:	4a2e      	ldr	r2, [pc, #184]	@ (80053e8 <network_1_configure_weights+0x15c>)
 800532e:	60d3      	str	r3, [r2, #12]
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005330:	4b2e      	ldr	r3, [pc, #184]	@ (80053ec <network_1_configure_weights+0x160>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005338:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <network_1_configure_weights+0x160>)
 800533a:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 9920);
 800533c:	4b26      	ldr	r3, [pc, #152]	@ (80053d8 <network_1_configure_weights+0x14c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 8005344:	4a29      	ldr	r2, [pc, #164]	@ (80053ec <network_1_configure_weights+0x160>)
 8005346:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 9920);
 8005348:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <network_1_configure_weights+0x14c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 8005350:	4a26      	ldr	r2, [pc, #152]	@ (80053ec <network_1_configure_weights+0x160>)
 8005352:	60d3      	str	r3, [r2, #12]
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005354:	4b26      	ldr	r3, [pc, #152]	@ (80053f0 <network_1_configure_weights+0x164>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800535c:	4a24      	ldr	r2, [pc, #144]	@ (80053f0 <network_1_configure_weights+0x164>)
 800535e:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 67520);
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <network_1_configure_weights+0x14c>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	4b23      	ldr	r3, [pc, #140]	@ (80053f4 <network_1_configure_weights+0x168>)
 8005366:	4413      	add	r3, r2
 8005368:	4a21      	ldr	r2, [pc, #132]	@ (80053f0 <network_1_configure_weights+0x164>)
 800536a:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 67520);
 800536c:	4b1a      	ldr	r3, [pc, #104]	@ (80053d8 <network_1_configure_weights+0x14c>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <network_1_configure_weights+0x168>)
 8005372:	4413      	add	r3, r2
 8005374:	4a1e      	ldr	r2, [pc, #120]	@ (80053f0 <network_1_configure_weights+0x164>)
 8005376:	60d3      	str	r3, [r2, #12]
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8005378:	4b1f      	ldr	r3, [pc, #124]	@ (80053f8 <network_1_configure_weights+0x16c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005380:	4a1d      	ldr	r2, [pc, #116]	@ (80053f8 <network_1_configure_weights+0x16c>)
 8005382:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 67620);
 8005384:	4b14      	ldr	r3, [pc, #80]	@ (80053d8 <network_1_configure_weights+0x14c>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b1c      	ldr	r3, [pc, #112]	@ (80053fc <network_1_configure_weights+0x170>)
 800538a:	4413      	add	r3, r2
 800538c:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <network_1_configure_weights+0x16c>)
 800538e:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 67620);
 8005390:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <network_1_configure_weights+0x14c>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b19      	ldr	r3, [pc, #100]	@ (80053fc <network_1_configure_weights+0x170>)
 8005396:	4413      	add	r3, r2
 8005398:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <network_1_configure_weights+0x16c>)
 800539a:	60d3      	str	r3, [r2, #12]
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800539c:	4b18      	ldr	r3, [pc, #96]	@ (8005400 <network_1_configure_weights+0x174>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053a4:	4a16      	ldr	r2, [pc, #88]	@ (8005400 <network_1_configure_weights+0x174>)
 80053a6:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 68120);
 80053a8:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <network_1_configure_weights+0x14c>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <network_1_configure_weights+0x178>)
 80053ae:	4413      	add	r3, r2
 80053b0:	4a13      	ldr	r2, [pc, #76]	@ (8005400 <network_1_configure_weights+0x174>)
 80053b2:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 68120);
 80053b4:	4b08      	ldr	r3, [pc, #32]	@ (80053d8 <network_1_configure_weights+0x14c>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b12      	ldr	r3, [pc, #72]	@ (8005404 <network_1_configure_weights+0x178>)
 80053ba:	4413      	add	r3, r2
 80053bc:	4a10      	ldr	r2, [pc, #64]	@ (8005400 <network_1_configure_weights+0x174>)
 80053be:	60d3      	str	r3, [r2, #12]
    return true;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e005      	b.n	80053d0 <network_1_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80053c4:	2212      	movs	r2, #18
 80053c6:	2130      	movs	r1, #48	@ 0x30
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 fb31 	bl	8006a30 <ai_platform_network_set_error>
  return false;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20018524 	.word	0x20018524
 80053dc:	2000008c 	.word	0x2000008c
 80053e0:	2000009c 	.word	0x2000009c
 80053e4:	200000ac 	.word	0x200000ac
 80053e8:	200000bc 	.word	0x200000bc
 80053ec:	200000cc 	.word	0x200000cc
 80053f0:	200000dc 	.word	0x200000dc
 80053f4:	000107c0 	.word	0x000107c0
 80053f8:	200000ec 	.word	0x200000ec
 80053fc:	00010824 	.word	0x00010824
 8005400:	200000fc 	.word	0x200000fc
 8005404:	00010a18 	.word	0x00010a18

08005408 <ai_network_1_get_error>:
}


AI_API_ENTRY
ai_error ai_network_1_get_error(ai_handle network)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 fb01 	bl	8006a18 <ai_platform_network_get_error>
 8005416:	4603      	mov	r3, r0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <ai_network_1_create>:


AI_API_ENTRY
ai_error ai_network_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800542a:	2300      	movs	r3, #0
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	2305      	movs	r3, #5
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	2301      	movs	r3, #1
 8005434:	4a04      	ldr	r2, [pc, #16]	@ (8005448 <ai_network_1_create+0x28>)
 8005436:	6839      	ldr	r1, [r7, #0]
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fbed 	bl	8006c18 <ai_platform_network_create>
 800543e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005440:	4618      	mov	r0, r3
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	200008ac 	.word	0x200008ac

0800544c <ai_network_1_create_and_init>:


AI_API_ENTRY
ai_error ai_network_1_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b094      	sub	sp, #80	@ 0x50
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_1_create(network, AI_NETWORK_1_DATA_CONFIG);
 8005458:	2100      	movs	r1, #0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ffe0 	bl	8005420 <ai_network_1_create>
 8005460:	4603      	mov	r3, r0
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8005464:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <ai_network_1_create_and_init+0x24>
    return err;
 800546c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800546e:	e067      	b.n	8005540 <ai_network_1_create_and_init+0xf4>
  }
  
  if (ai_network_1_data_params_get(&params) != true) {
 8005470:	f107 0310 	add.w	r3, r7, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f8e7 	bl	8005648 <ai_network_1_data_params_get>
 800547a:	4603      	mov	r3, r0
 800547c:	f083 0301 	eor.w	r3, r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d008      	beq.n	8005498 <ai_network_1_create_and_init+0x4c>
    err = ai_network_1_get_error(*network);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ffbc 	bl	8005408 <ai_network_1_get_error>
 8005490:	4603      	mov	r3, r0
 8005492:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8005494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005496:	e053      	b.n	8005540 <ai_network_1_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_1_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8005498:	2300      	movs	r3, #0
 800549a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800549e:	e012      	b.n	80054c6 <ai_network_1_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80054a0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 80054a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	330c      	adds	r3, #12
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 f9d4 	bl	8006864 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 80054bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80054c0:	3301      	adds	r3, #1
 80054c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <ai_network_1_create_and_init+0x8a>
 80054cc:	8bfb      	ldrh	r3, [r7, #30]
 80054ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d3e4      	bcc.n	80054a0 <ai_network_1_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_1_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80054d6:	2300      	movs	r3, #0
 80054d8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80054dc:	e012      	b.n	8005504 <ai_network_1_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80054de:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80054e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	f107 0310 	add.w	r3, r7, #16
 80054f2:	3304      	adds	r3, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f9b5 	bl	8006864 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80054fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80054fe:	3301      	adds	r3, #1
 8005500:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d004      	beq.n	8005514 <ai_network_1_create_and_init+0xc8>
 800550a:	8afb      	ldrh	r3, [r7, #22]
 800550c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8005510:	429a      	cmp	r2, r3
 8005512:	d3e4      	bcc.n	80054de <ai_network_1_create_and_init+0x92>
  }
#endif
  if (ai_network_1_init(*network, &params) != true) {
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f107 0210 	add.w	r2, r7, #16
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f846 	bl	80055b0 <ai_network_1_init>
 8005524:	4603      	mov	r3, r0
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d006      	beq.n	800553e <ai_network_1_create_and_init+0xf2>
    err = ai_network_1_get_error(*network);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ff67 	bl	8005408 <ai_network_1_get_error>
 800553a:	4603      	mov	r3, r0
 800553c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800553e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005540:	4618      	mov	r0, r3
 8005542:	3750      	adds	r7, #80	@ 0x50
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <ai_network_1_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <ai_network_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005558:	4b06      	ldr	r3, [pc, #24]	@ (8005574 <ai_network_1_inputs_get+0x2c>)
 800555a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a06      	ldr	r2, [pc, #24]	@ (8005578 <ai_network_1_inputs_get+0x30>)
 8005560:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005562:	6839      	ldr	r1, [r7, #0]
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f001 fa69 	bl	8006a3c <ai_platform_inputs_get>
 800556a:	4603      	mov	r3, r0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200008ac 	.word	0x200008ac
 8005578:	a1c00100 	.word	0xa1c00100

0800557c <ai_network_1_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d104      	bne.n	8005596 <ai_network_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800558c:	4b06      	ldr	r3, [pc, #24]	@ (80055a8 <ai_network_1_outputs_get+0x2c>)
 800558e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a06      	ldr	r2, [pc, #24]	@ (80055ac <ai_network_1_outputs_get+0x30>)
 8005594:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fac7 	bl	8006b2c <ai_platform_outputs_get>
 800559e:	4603      	mov	r3, r0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	200008ac 	.word	0x200008ac
 80055ac:	a1c00100 	.word	0xa1c00100

080055b0 <ai_network_1_init>:


AI_API_ENTRY
ai_bool ai_network_1_init(
  ai_handle network, const ai_network_params* params)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 fb6d 	bl	8006c9c <ai_platform_network_init>
 80055c2:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80055c4:	2301      	movs	r3, #1
 80055c6:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <ai_network_1_init+0x22>
 80055ce:	2300      	movs	r3, #0
 80055d0:	e026      	b.n	8005620 <ai_network_1_init+0x70>
  ok &= network_1_configure_weights(net_ctx, params);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff fe59 	bl	800528c <network_1_configure_weights>
 80055da:	4603      	mov	r3, r0
 80055dc:	461a      	mov	r2, r3
 80055de:	7afb      	ldrb	r3, [r7, #11]
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	72fb      	strb	r3, [r7, #11]
  ok &= network_1_configure_activations(net_ctx, params);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff fdc2 	bl	8005178 <network_1_configure_activations>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	7afb      	ldrb	r3, [r7, #11]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fc08 	bl	8006e1c <ai_platform_network_post_init>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	7afb      	ldrb	r3, [r7, #11]
 8005612:	4013      	ands	r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800561e:	7afb      	ldrb	r3, [r7, #11]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <ai_network_1_run>:


AI_API_ENTRY
ai_i32 ai_network_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f001 fc1f 	bl	8006e7c <ai_platform_network_process>
 800563e:	4603      	mov	r3, r0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <ai_network_1_data_params_get>:
 * @ingroup network_1_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_1_data_params_get(ai_network_params* params)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <ai_network_1_data_params_get+0x12>
 8005656:	2300      	movs	r3, #0
 8005658:	e016      	b.n	8005688 <ai_network_1_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800565a:	4a0d      	ldr	r2, [pc, #52]	@ (8005690 <ai_network_1_data_params_get+0x48>)
 800565c:	f107 0310 	add.w	r3, r7, #16
 8005660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005664:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_ACTIVATIONS_COUNT, g_network_1_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005668:	4a0a      	ldr	r2, [pc, #40]	@ (8005694 <ai_network_1_data_params_get+0x4c>)
 800566a:	f107 0308 	add.w	r3, r7, #8
 800566e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005672:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_WEIGHTS_COUNT, g_network_1_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005676:	f107 0210 	add.w	r2, r7, #16
 800567a:	f107 0308 	add.w	r3, r7, #8
 800567e:	4619      	mov	r1, r3
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f001 f9af 	bl	80069e4 <ai_platform_bind_network_params>
 8005686:	4603      	mov	r3, r0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	0800c048 	.word	0x0800c048
 8005694:	0800c050 	.word	0x0800c050

08005698 <arm_rfft_fast_init_f32>:
 8005698:	084b      	lsrs	r3, r1, #1
 800569a:	2b80      	cmp	r3, #128	@ 0x80
 800569c:	b430      	push	{r4, r5}
 800569e:	8201      	strh	r1, [r0, #16]
 80056a0:	8003      	strh	r3, [r0, #0]
 80056a2:	d070      	beq.n	8005786 <arm_rfft_fast_init_f32+0xee>
 80056a4:	d916      	bls.n	80056d4 <arm_rfft_fast_init_f32+0x3c>
 80056a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056aa:	d05f      	beq.n	800576c <arm_rfft_fast_init_f32+0xd4>
 80056ac:	d936      	bls.n	800571c <arm_rfft_fast_init_f32+0x84>
 80056ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056b2:	d026      	beq.n	8005702 <arm_rfft_fast_init_f32+0x6a>
 80056b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056b8:	d112      	bne.n	80056e0 <arm_rfft_fast_init_f32+0x48>
 80056ba:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 80056be:	4c38      	ldr	r4, [pc, #224]	@ (80057a0 <arm_rfft_fast_init_f32+0x108>)
 80056c0:	4938      	ldr	r1, [pc, #224]	@ (80057a4 <arm_rfft_fast_init_f32+0x10c>)
 80056c2:	2300      	movs	r3, #0
 80056c4:	4a38      	ldr	r2, [pc, #224]	@ (80057a8 <arm_rfft_fast_init_f32+0x110>)
 80056c6:	8185      	strh	r5, [r0, #12]
 80056c8:	6084      	str	r4, [r0, #8]
 80056ca:	6041      	str	r1, [r0, #4]
 80056cc:	6142      	str	r2, [r0, #20]
 80056ce:	4618      	mov	r0, r3
 80056d0:	bc30      	pop	{r4, r5}
 80056d2:	4770      	bx	lr
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d031      	beq.n	800573c <arm_rfft_fast_init_f32+0xa4>
 80056d8:	2b40      	cmp	r3, #64	@ 0x40
 80056da:	d006      	beq.n	80056ea <arm_rfft_fast_init_f32+0x52>
 80056dc:	2b10      	cmp	r3, #16
 80056de:	d039      	beq.n	8005754 <arm_rfft_fast_init_f32+0xbc>
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056e4:	bc30      	pop	{r4, r5}
 80056e6:	4618      	mov	r0, r3
 80056e8:	4770      	bx	lr
 80056ea:	2538      	movs	r5, #56	@ 0x38
 80056ec:	4c2f      	ldr	r4, [pc, #188]	@ (80057ac <arm_rfft_fast_init_f32+0x114>)
 80056ee:	4930      	ldr	r1, [pc, #192]	@ (80057b0 <arm_rfft_fast_init_f32+0x118>)
 80056f0:	2300      	movs	r3, #0
 80056f2:	4a30      	ldr	r2, [pc, #192]	@ (80057b4 <arm_rfft_fast_init_f32+0x11c>)
 80056f4:	8185      	strh	r5, [r0, #12]
 80056f6:	6084      	str	r4, [r0, #8]
 80056f8:	6041      	str	r1, [r0, #4]
 80056fa:	6142      	str	r2, [r0, #20]
 80056fc:	4618      	mov	r0, r3
 80056fe:	bc30      	pop	{r4, r5}
 8005700:	4770      	bx	lr
 8005702:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8005706:	4c2c      	ldr	r4, [pc, #176]	@ (80057b8 <arm_rfft_fast_init_f32+0x120>)
 8005708:	492c      	ldr	r1, [pc, #176]	@ (80057bc <arm_rfft_fast_init_f32+0x124>)
 800570a:	2300      	movs	r3, #0
 800570c:	4a2c      	ldr	r2, [pc, #176]	@ (80057c0 <arm_rfft_fast_init_f32+0x128>)
 800570e:	8185      	strh	r5, [r0, #12]
 8005710:	6084      	str	r4, [r0, #8]
 8005712:	6041      	str	r1, [r0, #4]
 8005714:	6142      	str	r2, [r0, #20]
 8005716:	4618      	mov	r0, r3
 8005718:	bc30      	pop	{r4, r5}
 800571a:	4770      	bx	lr
 800571c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005720:	d1de      	bne.n	80056e0 <arm_rfft_fast_init_f32+0x48>
 8005722:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8005726:	4c27      	ldr	r4, [pc, #156]	@ (80057c4 <arm_rfft_fast_init_f32+0x12c>)
 8005728:	4927      	ldr	r1, [pc, #156]	@ (80057c8 <arm_rfft_fast_init_f32+0x130>)
 800572a:	2300      	movs	r3, #0
 800572c:	4a27      	ldr	r2, [pc, #156]	@ (80057cc <arm_rfft_fast_init_f32+0x134>)
 800572e:	8185      	strh	r5, [r0, #12]
 8005730:	6084      	str	r4, [r0, #8]
 8005732:	6041      	str	r1, [r0, #4]
 8005734:	6142      	str	r2, [r0, #20]
 8005736:	4618      	mov	r0, r3
 8005738:	bc30      	pop	{r4, r5}
 800573a:	4770      	bx	lr
 800573c:	2530      	movs	r5, #48	@ 0x30
 800573e:	4c24      	ldr	r4, [pc, #144]	@ (80057d0 <arm_rfft_fast_init_f32+0x138>)
 8005740:	4924      	ldr	r1, [pc, #144]	@ (80057d4 <arm_rfft_fast_init_f32+0x13c>)
 8005742:	2300      	movs	r3, #0
 8005744:	4a24      	ldr	r2, [pc, #144]	@ (80057d8 <arm_rfft_fast_init_f32+0x140>)
 8005746:	8185      	strh	r5, [r0, #12]
 8005748:	6084      	str	r4, [r0, #8]
 800574a:	6041      	str	r1, [r0, #4]
 800574c:	6142      	str	r2, [r0, #20]
 800574e:	4618      	mov	r0, r3
 8005750:	bc30      	pop	{r4, r5}
 8005752:	4770      	bx	lr
 8005754:	2514      	movs	r5, #20
 8005756:	4c21      	ldr	r4, [pc, #132]	@ (80057dc <arm_rfft_fast_init_f32+0x144>)
 8005758:	4921      	ldr	r1, [pc, #132]	@ (80057e0 <arm_rfft_fast_init_f32+0x148>)
 800575a:	2300      	movs	r3, #0
 800575c:	4a21      	ldr	r2, [pc, #132]	@ (80057e4 <arm_rfft_fast_init_f32+0x14c>)
 800575e:	8185      	strh	r5, [r0, #12]
 8005760:	6084      	str	r4, [r0, #8]
 8005762:	6041      	str	r1, [r0, #4]
 8005764:	6142      	str	r2, [r0, #20]
 8005766:	4618      	mov	r0, r3
 8005768:	bc30      	pop	{r4, r5}
 800576a:	4770      	bx	lr
 800576c:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 8005770:	4c1d      	ldr	r4, [pc, #116]	@ (80057e8 <arm_rfft_fast_init_f32+0x150>)
 8005772:	491e      	ldr	r1, [pc, #120]	@ (80057ec <arm_rfft_fast_init_f32+0x154>)
 8005774:	2300      	movs	r3, #0
 8005776:	4a1e      	ldr	r2, [pc, #120]	@ (80057f0 <arm_rfft_fast_init_f32+0x158>)
 8005778:	8185      	strh	r5, [r0, #12]
 800577a:	6084      	str	r4, [r0, #8]
 800577c:	6041      	str	r1, [r0, #4]
 800577e:	6142      	str	r2, [r0, #20]
 8005780:	4618      	mov	r0, r3
 8005782:	bc30      	pop	{r4, r5}
 8005784:	4770      	bx	lr
 8005786:	25d0      	movs	r5, #208	@ 0xd0
 8005788:	4c1a      	ldr	r4, [pc, #104]	@ (80057f4 <arm_rfft_fast_init_f32+0x15c>)
 800578a:	491b      	ldr	r1, [pc, #108]	@ (80057f8 <arm_rfft_fast_init_f32+0x160>)
 800578c:	2300      	movs	r3, #0
 800578e:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <arm_rfft_fast_init_f32+0x164>)
 8005790:	8185      	strh	r5, [r0, #12]
 8005792:	6084      	str	r4, [r0, #8]
 8005794:	6041      	str	r1, [r0, #4]
 8005796:	6142      	str	r2, [r0, #20]
 8005798:	4618      	mov	r0, r3
 800579a:	bc30      	pop	{r4, r5}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	08037af8 	.word	0x08037af8
 80057a4:	08028cf0 	.word	0x08028cf0
 80057a8:	0802ee60 	.word	0x0802ee60
 80057ac:	0802cdf0 	.word	0x0802cdf0
 80057b0:	080398b8 	.word	0x080398b8
 80057b4:	0803bda8 	.word	0x0803bda8
 80057b8:	080357e0 	.word	0x080357e0
 80057bc:	080336e0 	.word	0x080336e0
 80057c0:	0802ce60 	.word	0x0802ce60
 80057c4:	0803ba38 	.word	0x0803ba38
 80057c8:	08032e60 	.word	0x08032e60
 80057cc:	08039ab8 	.word	0x08039ab8
 80057d0:	08036698 	.word	0x08036698
 80057d4:	080356e0 	.word	0x080356e0
 80057d8:	0802ccf0 	.word	0x0802ccf0
 80057dc:	080365f0 	.word	0x080365f0
 80057e0:	08033660 	.word	0x08033660
 80057e4:	08036618 	.word	0x08036618
 80057e8:	0803a2b8 	.word	0x0803a2b8
 80057ec:	08036af8 	.word	0x08036af8
 80057f0:	0803a638 	.word	0x0803a638
 80057f4:	0803bfa8 	.word	0x0803bfa8
 80057f8:	080366f8 	.word	0x080366f8
 80057fc:	0803b638 	.word	0x0803b638

08005800 <arm_rfft_fast_f32>:
 8005800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005804:	8a05      	ldrh	r5, [r0, #16]
 8005806:	4606      	mov	r6, r0
 8005808:	4617      	mov	r7, r2
 800580a:	460c      	mov	r4, r1
 800580c:	086d      	lsrs	r5, r5, #1
 800580e:	8005      	strh	r5, [r0, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d15e      	bne.n	80058d2 <arm_rfft_fast_f32+0xd2>
 8005814:	461a      	mov	r2, r3
 8005816:	2301      	movs	r3, #1
 8005818:	f000 fbde 	bl	8005fd8 <arm_cfft_f32>
 800581c:	edd4 7a00 	vldr	s15, [r4]
 8005820:	ed94 7a01 	vldr	s14, [r4, #4]
 8005824:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800582c:	8832      	ldrh	r2, [r6, #0]
 800582e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005832:	6975      	ldr	r5, [r6, #20]
 8005834:	3a01      	subs	r2, #1
 8005836:	eeb0 3a46 	vmov.f32	s6, s12
 800583a:	3510      	adds	r5, #16
 800583c:	f107 0610 	add.w	r6, r7, #16
 8005840:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005844:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8005848:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800584c:	f104 0310 	add.w	r3, r4, #16
 8005850:	3808      	subs	r0, #8
 8005852:	ee26 7a86 	vmul.f32	s14, s13, s12
 8005856:	ee67 7a86 	vmul.f32	s15, s15, s12
 800585a:	ed87 7a00 	vstr	s14, [r7]
 800585e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005862:	ed90 7a02 	vldr	s14, [r0, #8]
 8005866:	3a01      	subs	r2, #1
 8005868:	ed53 6a02 	vldr	s13, [r3, #-8]
 800586c:	f1a0 0008 	sub.w	r0, r0, #8
 8005870:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005874:	f103 0308 	add.w	r3, r3, #8
 8005878:	ee77 7a66 	vsub.f32	s15, s14, s13
 800587c:	edd0 3a05 	vldr	s7, [r0, #20]
 8005880:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005884:	ee77 4a26 	vadd.f32	s9, s14, s13
 8005888:	ed55 5a01 	vldr	s11, [r5, #-4]
 800588c:	f106 0608 	add.w	r6, r6, #8
 8005890:	ee66 6a27 	vmul.f32	s13, s12, s15
 8005894:	f105 0508 	add.w	r5, r5, #8
 8005898:	ee33 4a85 	vadd.f32	s8, s7, s10
 800589c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80058a0:	ee35 5a63 	vsub.f32	s10, s10, s7
 80058a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80058a8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80058ac:	ee77 7a05 	vadd.f32	s15, s14, s10
 80058b0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80058b4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80058b8:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80058bc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80058c0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80058c4:	ed46 7a03 	vstr	s15, [r6, #-12]
 80058c8:	ed06 7a04 	vstr	s14, [r6, #-16]
 80058cc:	d1c9      	bne.n	8005862 <arm_rfft_fast_f32+0x62>
 80058ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d2:	edd1 7a00 	vldr	s15, [r1]
 80058d6:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80058da:	edd1 6a01 	vldr	s13, [r1, #4]
 80058de:	1e68      	subs	r0, r5, #1
 80058e0:	6975      	ldr	r5, [r6, #20]
 80058e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80058e6:	00c1      	lsls	r1, r0, #3
 80058e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80058ec:	ee27 7a23 	vmul.f32	s14, s14, s7
 80058f0:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80058f4:	ed82 7a00 	vstr	s14, [r2]
 80058f8:	edc2 7a01 	vstr	s15, [r2, #4]
 80058fc:	b3e0      	cbz	r0, 8005978 <arm_rfft_fast_f32+0x178>
 80058fe:	3908      	subs	r1, #8
 8005900:	f104 0210 	add.w	r2, r4, #16
 8005904:	3510      	adds	r5, #16
 8005906:	440c      	add	r4, r1
 8005908:	f107 0110 	add.w	r1, r7, #16
 800590c:	ed94 7a02 	vldr	s14, [r4, #8]
 8005910:	3801      	subs	r0, #1
 8005912:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005916:	f1a4 0408 	sub.w	r4, r4, #8
 800591a:	ed15 6a02 	vldr	s12, [r5, #-8]
 800591e:	f102 0208 	add.w	r2, r2, #8
 8005922:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005926:	ed94 4a05 	vldr	s8, [r4, #20]
 800592a:	ed12 5a03 	vldr	s10, [r2, #-12]
 800592e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8005932:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005936:	f101 0108 	add.w	r1, r1, #8
 800593a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800593e:	f105 0508 	add.w	r5, r5, #8
 8005942:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005946:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800594a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800594e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005952:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005956:	ee77 7a05 	vadd.f32	s15, s14, s10
 800595a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800595e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005962:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8005966:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800596a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800596e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005972:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005976:	d1c9      	bne.n	800590c <arm_rfft_fast_f32+0x10c>
 8005978:	461a      	mov	r2, r3
 800597a:	4639      	mov	r1, r7
 800597c:	4630      	mov	r0, r6
 800597e:	2301      	movs	r3, #1
 8005980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005984:	f000 bb28 	b.w	8005fd8 <arm_cfft_f32>

08005988 <arm_cfft_radix8by2_f32>:
 8005988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800598c:	4607      	mov	r7, r0
 800598e:	4608      	mov	r0, r1
 8005990:	ed2d 8b06 	vpush	{d8-d10}
 8005994:	f8b7 e000 	ldrh.w	lr, [r7]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800599e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80059a2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80059a6:	f000 80b0 	beq.w	8005b0a <arm_cfft_radix8by2_f32+0x182>
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	3210      	adds	r2, #16
 80059ae:	f100 0610 	add.w	r6, r0, #16
 80059b2:	f108 0510 	add.w	r5, r8, #16
 80059b6:	3310      	adds	r3, #16
 80059b8:	18c4      	adds	r4, r0, r3
 80059ba:	4443      	add	r3, r8
 80059bc:	ed55 6a04 	vldr	s13, [r5, #-16]
 80059c0:	f1be 0e01 	subs.w	lr, lr, #1
 80059c4:	ed56 4a04 	vldr	s9, [r6, #-16]
 80059c8:	f104 0410 	add.w	r4, r4, #16
 80059cc:	ed15 7a03 	vldr	s14, [r5, #-12]
 80059d0:	f106 0610 	add.w	r6, r6, #16
 80059d4:	ee74 9aa6 	vadd.f32	s19, s9, s13
 80059d8:	ed55 7a02 	vldr	s15, [r5, #-8]
 80059dc:	ed55 2a01 	vldr	s5, [r5, #-4]
 80059e0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80059e4:	ed53 0a04 	vldr	s1, [r3, #-16]
 80059e8:	f102 0210 	add.w	r2, r2, #16
 80059ec:	ed13 5a03 	vldr	s10, [r3, #-12]
 80059f0:	f105 0510 	add.w	r5, r5, #16
 80059f4:	ed13 3a02 	vldr	s6, [r3, #-8]
 80059f8:	f103 0310 	add.w	r3, r3, #16
 80059fc:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8005a00:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 8005a04:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8005a08:	ee33 8a83 	vadd.f32	s16, s7, s6
 8005a0c:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8005a10:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 8005a14:	ee34 0a06 	vadd.f32	s0, s8, s12
 8005a18:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 8005a1c:	ee76 aa87 	vadd.f32	s21, s13, s14
 8005a20:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 8005a24:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005a28:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 8005a2c:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8005a30:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 8005a34:	ee71 8a05 	vadd.f32	s17, s2, s10
 8005a38:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8005a3c:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 8005a40:	ee72 9a22 	vadd.f32	s19, s4, s5
 8005a44:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005a48:	ee35 5a41 	vsub.f32	s10, s10, s2
 8005a4c:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8005a50:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8005a54:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005a58:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8005a5c:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8005a60:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8005a64:	ee72 7a62 	vsub.f32	s15, s4, s5
 8005a68:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8005a6c:	ee73 2a63 	vsub.f32	s5, s6, s7
 8005a70:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8005a74:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8005a78:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8005a7c:	ee24 3a84 	vmul.f32	s6, s9, s8
 8005a80:	ee27 2a26 	vmul.f32	s4, s14, s13
 8005a84:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8005a88:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8005a8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005a90:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005a94:	ee65 6a26 	vmul.f32	s13, s10, s13
 8005a98:	ee25 5a04 	vmul.f32	s10, s10, s8
 8005a9c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005aa0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005aa4:	ee33 4a02 	vadd.f32	s8, s6, s4
 8005aa8:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005aac:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8005ab0:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8005ab4:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8005ab8:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8005abc:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8005ac0:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8005ac4:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8005ac8:	ee27 4a87 	vmul.f32	s8, s15, s14
 8005acc:	ee61 5a87 	vmul.f32	s11, s3, s14
 8005ad0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ad4:	ee22 5a87 	vmul.f32	s10, s5, s14
 8005ad8:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005adc:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005ae0:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8005ae4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005ae8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005aec:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005af0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005af4:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8005af8:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8005afc:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8005b00:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8005b04:	f47f af5a 	bne.w	80059bc <arm_cfft_radix8by2_f32+0x34>
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	b28c      	uxth	r4, r1
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	4621      	mov	r1, r4
 8005b10:	f000 fb78 	bl	8006204 <arm_radix8_butterfly_f32>
 8005b14:	4621      	mov	r1, r4
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4640      	mov	r0, r8
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	ecbd 8b06 	vpop	{d8-d10}
 8005b20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b24:	f000 bb6e 	b.w	8006204 <arm_radix8_butterfly_f32>

08005b28 <arm_cfft_radix8by4_f32>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	ed2d 8b06 	vpush	{d8-d10}
 8005b30:	8804      	ldrh	r4, [r0, #0]
 8005b32:	b08f      	sub	sp, #60	@ 0x3c
 8005b34:	ed91 6a00 	vldr	s12, [r1]
 8005b38:	460a      	mov	r2, r1
 8005b3a:	0864      	lsrs	r4, r4, #1
 8005b3c:	ed91 7a01 	vldr	s14, [r1, #4]
 8005b40:	9101      	str	r1, [sp, #4]
 8005b42:	00a3      	lsls	r3, r4, #2
 8005b44:	6841      	ldr	r1, [r0, #4]
 8005b46:	0864      	lsrs	r4, r4, #1
 8005b48:	900c      	str	r0, [sp, #48]	@ 0x30
 8005b4a:	9205      	str	r2, [sp, #20]
 8005b4c:	f101 0610 	add.w	r6, r1, #16
 8005b50:	4625      	mov	r5, r4
 8005b52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b54:	f101 0408 	add.w	r4, r1, #8
 8005b58:	9602      	str	r6, [sp, #8]
 8005b5a:	9407      	str	r4, [sp, #28]
 8005b5c:	18d4      	adds	r4, r2, r3
 8005b5e:	1eaa      	subs	r2, r5, #2
 8005b60:	f101 0518 	add.w	r5, r1, #24
 8005b64:	18e0      	adds	r0, r4, r3
 8005b66:	edd4 4a00 	vldr	s9, [r4]
 8005b6a:	ed94 4a01 	vldr	s8, [r4, #4]
 8005b6e:	46a6      	mov	lr, r4
 8005b70:	edd0 6a00 	vldr	s13, [r0]
 8005b74:	18c7      	adds	r7, r0, r3
 8005b76:	edd0 7a01 	vldr	s15, [r0, #4]
 8005b7a:	46a0      	mov	r8, r4
 8005b7c:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005b80:	ed97 5a00 	vldr	s10, [r7]
 8005b84:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005b88:	4604      	mov	r4, r0
 8005b8a:	9506      	str	r5, [sp, #24]
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8005b92:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b94:	9801      	ldr	r0, [sp, #4]
 8005b96:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b9e:	ed97 3a01 	vldr	s6, [r7, #4]
 8005ba2:	ee72 2a85 	vadd.f32	s5, s5, s10
 8005ba6:	46bc      	mov	ip, r7
 8005ba8:	ee76 3a84 	vadd.f32	s7, s13, s8
 8005bac:	9704      	str	r7, [sp, #16]
 8005bae:	ee36 7a44 	vsub.f32	s14, s12, s8
 8005bb2:	f8cd e00c 	str.w	lr, [sp, #12]
 8005bb6:	ee12 9a90 	vmov	r9, s5
 8005bba:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005bbe:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005bc2:	1f3e      	subs	r6, r7, #4
 8005bc4:	f840 9b08 	str.w	r9, [r0], #8
 8005bc8:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8005bcc:	edde 2a01 	vldr	s5, [lr, #4]
 8005bd0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8005bd4:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005bd8:	eddc 4a01 	vldr	s9, [ip, #4]
 8005bdc:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005be0:	9001      	str	r0, [sp, #4]
 8005be2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8005be6:	9805      	ldr	r0, [sp, #20]
 8005be8:	ee13 9a90 	vmov	r9, s7
 8005bec:	ee37 7a43 	vsub.f32	s14, s14, s6
 8005bf0:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005bf4:	f1ae 0704 	sub.w	r7, lr, #4
 8005bf8:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005bfc:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005c00:	ed80 6a01 	vstr	s12, [r0, #4]
 8005c04:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005c08:	f848 9b08 	str.w	r9, [r8], #8
 8005c0c:	edce 4a01 	vstr	s9, [lr, #4]
 8005c10:	ee15 ea90 	vmov	lr, s11
 8005c14:	f844 eb08 	str.w	lr, [r4], #8
 8005c18:	ee16 ea90 	vmov	lr, s13
 8005c1c:	9408      	str	r4, [sp, #32]
 8005c1e:	462c      	mov	r4, r5
 8005c20:	ed85 7a01 	vstr	s14, [r5, #4]
 8005c24:	9d04      	ldr	r5, [sp, #16]
 8005c26:	f84c eb08 	str.w	lr, [ip], #8
 8005c2a:	edc5 7a01 	vstr	s15, [r5, #4]
 8005c2e:	0855      	lsrs	r5, r2, #1
 8005c30:	9509      	str	r5, [sp, #36]	@ 0x24
 8005c32:	f000 8130 	beq.w	8005e96 <arm_cfft_radix8by4_f32+0x36e>
 8005c36:	9805      	ldr	r0, [sp, #20]
 8005c38:	3b08      	subs	r3, #8
 8005c3a:	46ab      	mov	fp, r5
 8005c3c:	f1a4 020c 	sub.w	r2, r4, #12
 8005c40:	f100 0510 	add.w	r5, r0, #16
 8005c44:	f101 0920 	add.w	r9, r1, #32
 8005c48:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8005c4c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005c50:	4433      	add	r3, r6
 8005c52:	3410      	adds	r4, #16
 8005c54:	4660      	mov	r0, ip
 8005c56:	4641      	mov	r1, r8
 8005c58:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8005c5c:	ed54 6a02 	vldr	s13, [r4, #-8]
 8005c60:	f1bb 0b01 	subs.w	fp, fp, #1
 8005c64:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005c68:	f10a 0a08 	add.w	sl, sl, #8
 8005c6c:	edd1 7a00 	vldr	s15, [r1]
 8005c70:	f105 0508 	add.w	r5, r5, #8
 8005c74:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8005c78:	edd0 2a00 	vldr	s5, [r0]
 8005c7c:	ed14 7a01 	vldr	s14, [r4, #-4]
 8005c80:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8005c84:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005c88:	f1a2 0208 	sub.w	r2, r2, #8
 8005c8c:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8005c90:	ed90 2a01 	vldr	s4, [r0, #4]
 8005c94:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005c98:	ed91 6a01 	vldr	s12, [r1, #4]
 8005c9c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005ca0:	f109 0910 	add.w	r9, r9, #16
 8005ca4:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8005ca8:	f104 0408 	add.w	r4, r4, #8
 8005cac:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8005cb0:	f10e 0e18 	add.w	lr, lr, #24
 8005cb4:	ee37 3a67 	vsub.f32	s6, s14, s15
 8005cb8:	f1a3 0308 	sub.w	r3, r3, #8
 8005cbc:	ed45 6a04 	vstr	s13, [r5, #-16]
 8005cc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cc4:	edd1 6a01 	vldr	s13, [r1, #4]
 8005cc8:	ee75 1a86 	vadd.f32	s3, s11, s12
 8005ccc:	edd0 4a01 	vldr	s9, [r0, #4]
 8005cd0:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005cd4:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005cd8:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005cdc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005ce0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005ce4:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005ce8:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005cec:	ed45 6a03 	vstr	s13, [r5, #-12]
 8005cf0:	ee36 2a02 	vadd.f32	s4, s12, s4
 8005cf4:	edd6 7a00 	vldr	s15, [r6]
 8005cf8:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005cfc:	ed97 1a00 	vldr	s2, [r7]
 8005d00:	ee77 2a62 	vsub.f32	s5, s14, s5
 8005d04:	ed92 8a04 	vldr	s16, [r2, #16]
 8005d08:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005d0c:	ed93 aa04 	vldr	s20, [r3, #16]
 8005d10:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005d14:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005d18:	ed57 0a01 	vldr	s1, [r7, #-4]
 8005d1c:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8005d20:	ee38 6a88 	vadd.f32	s12, s17, s16
 8005d24:	edd3 9a03 	vldr	s19, [r3, #12]
 8005d28:	ee30 0a87 	vadd.f32	s0, s1, s14
 8005d2c:	ed92 9a03 	vldr	s18, [r2, #12]
 8005d30:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8005d34:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8005d38:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8005d3c:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8005d40:	ee16 ca10 	vmov	ip, s12
 8005d44:	ee30 6a49 	vsub.f32	s12, s0, s18
 8005d48:	ee77 4a01 	vadd.f32	s9, s14, s2
 8005d4c:	f847 c908 	str.w	ip, [r7], #-8
 8005d50:	ee34 4a29 	vadd.f32	s8, s8, s19
 8005d54:	edd2 8a03 	vldr	s17, [r2, #12]
 8005d58:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8005d5c:	ed93 8a03 	vldr	s16, [r3, #12]
 8005d60:	ee71 0a47 	vsub.f32	s1, s2, s14
 8005d64:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005d68:	ee39 1a67 	vsub.f32	s2, s18, s15
 8005d6c:	ee36 6a69 	vsub.f32	s12, s12, s19
 8005d70:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005d74:	ee75 5aca 	vsub.f32	s11, s11, s20
 8005d78:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d7c:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8005d80:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8005d84:	ee21 8a80 	vmul.f32	s16, s3, s0
 8005d88:	ee23 7a26 	vmul.f32	s14, s6, s13
 8005d8c:	ee64 7a26 	vmul.f32	s15, s8, s13
 8005d90:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8005d94:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005d98:	ee23 3a00 	vmul.f32	s6, s6, s0
 8005d9c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005da0:	ee24 0a80 	vmul.f32	s0, s9, s0
 8005da4:	ee38 7a07 	vadd.f32	s14, s16, s14
 8005da8:	ee76 6a84 	vadd.f32	s13, s13, s8
 8005dac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005db0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005db4:	ee17 ca10 	vmov	ip, s14
 8005db8:	f841 cb08 	str.w	ip, [r1], #8
 8005dbc:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005dc0:	ed82 0a04 	vstr	s0, [r2, #16]
 8005dc4:	edc2 6a03 	vstr	s13, [r2, #12]
 8005dc8:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8005dcc:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8005dd0:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8005dd4:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005dd8:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005ddc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005de0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8005de4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005de8:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005dec:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005df0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df4:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005df8:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005dfc:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005e00:	ee17 ca90 	vmov	ip, s15
 8005e04:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005e08:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005e0c:	f846 c908 	str.w	ip, [r6], #-8
 8005e10:	edc6 6a01 	vstr	s13, [r6, #4]
 8005e14:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8005e18:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8005e1c:	ee62 5a27 	vmul.f32	s11, s4, s15
 8005e20:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005e24:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005e28:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005e2c:	ee61 6a07 	vmul.f32	s13, s2, s14
 8005e30:	ee20 7a87 	vmul.f32	s14, s1, s14
 8005e34:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005e38:	ee61 7a27 	vmul.f32	s15, s2, s15
 8005e3c:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005e40:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8005e44:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e4c:	ee16 ca10 	vmov	ip, s12
 8005e50:	f840 cb08 	str.w	ip, [r0], #8
 8005e54:	ed40 2a01 	vstr	s5, [r0, #-4]
 8005e58:	edc3 0a04 	vstr	s1, [r3, #16]
 8005e5c:	edc3 7a03 	vstr	s15, [r3, #12]
 8005e60:	f47f aefc 	bne.w	8005c5c <arm_cfft_radix8by4_f32+0x134>
 8005e64:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e66:	9802      	ldr	r0, [sp, #8]
 8005e68:	00cb      	lsls	r3, r1, #3
 8005e6a:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8005e6e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005e72:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005e76:	4498      	add	r8, r3
 8005e78:	449c      	add	ip, r3
 8005e7a:	9102      	str	r1, [sp, #8]
 8005e7c:	9901      	ldr	r1, [sp, #4]
 8005e7e:	4419      	add	r1, r3
 8005e80:	9101      	str	r1, [sp, #4]
 8005e82:	9907      	ldr	r1, [sp, #28]
 8005e84:	4419      	add	r1, r3
 8005e86:	9107      	str	r1, [sp, #28]
 8005e88:	9908      	ldr	r1, [sp, #32]
 8005e8a:	4419      	add	r1, r3
 8005e8c:	9b06      	ldr	r3, [sp, #24]
 8005e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e92:	9108      	str	r1, [sp, #32]
 8005e94:	9306      	str	r3, [sp, #24]
 8005e96:	9a01      	ldr	r2, [sp, #4]
 8005e98:	2304      	movs	r3, #4
 8005e9a:	9e08      	ldr	r6, [sp, #32]
 8005e9c:	edd2 7a00 	vldr	s15, [r2]
 8005ea0:	ed96 7a00 	vldr	s14, [r6]
 8005ea4:	edd8 2a00 	vldr	s5, [r8]
 8005ea8:	ee77 5a87 	vadd.f32	s11, s15, s14
 8005eac:	ed9c 3a00 	vldr	s6, [ip]
 8005eb0:	ed92 6a01 	vldr	s12, [r2, #4]
 8005eb4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005eb8:	edd6 6a01 	vldr	s13, [r6, #4]
 8005ebc:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8005ec0:	ed9c 2a01 	vldr	s4, [ip, #4]
 8005ec4:	ee36 5a26 	vadd.f32	s10, s12, s13
 8005ec8:	edd8 7a01 	vldr	s15, [r8, #4]
 8005ecc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005ed0:	9d02      	ldr	r5, [sp, #8]
 8005ed2:	ee34 6a83 	vadd.f32	s12, s9, s6
 8005ed6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8005eda:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005ede:	9805      	ldr	r0, [sp, #20]
 8005ee0:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	ed82 6a00 	vstr	s12, [r2]
 8005eea:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8005eee:	edd8 3a01 	vldr	s7, [r8, #4]
 8005ef2:	ee75 5a67 	vsub.f32	s11, s10, s15
 8005ef6:	eddc 1a01 	vldr	s3, [ip, #4]
 8005efa:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005efe:	ee75 3a23 	vadd.f32	s7, s10, s7
 8005f02:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005f06:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005f0a:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8005f0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f12:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005f16:	ed82 5a01 	vstr	s10, [r2, #4]
 8005f1a:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005f1e:	9a07      	ldr	r2, [sp, #28]
 8005f20:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005f24:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8005f28:	edd2 2a00 	vldr	s5, [r2]
 8005f2c:	ed92 5a01 	vldr	s10, [r2, #4]
 8005f30:	ee64 3a22 	vmul.f32	s7, s8, s5
 8005f34:	ee24 4a05 	vmul.f32	s8, s8, s10
 8005f38:	ee24 5a85 	vmul.f32	s10, s9, s10
 8005f3c:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8005f40:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005f44:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8005f48:	ed88 5a00 	vstr	s10, [r8]
 8005f4c:	edc8 4a01 	vstr	s9, [r8, #4]
 8005f50:	edd5 4a01 	vldr	s9, [r5, #4]
 8005f54:	edd5 6a00 	vldr	s13, [r5]
 8005f58:	9d06      	ldr	r5, [sp, #24]
 8005f5a:	ee26 5a26 	vmul.f32	s10, s12, s13
 8005f5e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005f62:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8005f66:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005f6a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8005f6e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005f72:	ed86 6a01 	vstr	s12, [r6, #4]
 8005f76:	edc6 5a00 	vstr	s11, [r6]
 8005f7a:	edd5 5a01 	vldr	s11, [r5, #4]
 8005f7e:	edd5 6a00 	vldr	s13, [r5]
 8005f82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f84:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005f88:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005f8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005f90:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005f94:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f98:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005f9c:	edcc 7a01 	vstr	s15, [ip, #4]
 8005fa0:	ed8c 7a00 	vstr	s14, [ip]
 8005fa4:	6872      	ldr	r2, [r6, #4]
 8005fa6:	f000 f92d 	bl	8006204 <arm_radix8_butterfly_f32>
 8005faa:	9803      	ldr	r0, [sp, #12]
 8005fac:	4621      	mov	r1, r4
 8005fae:	6872      	ldr	r2, [r6, #4]
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f000 f927 	bl	8006204 <arm_radix8_butterfly_f32>
 8005fb6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005fb8:	4621      	mov	r1, r4
 8005fba:	6872      	ldr	r2, [r6, #4]
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	f000 f921 	bl	8006204 <arm_radix8_butterfly_f32>
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	6872      	ldr	r2, [r6, #4]
 8005fc6:	2304      	movs	r3, #4
 8005fc8:	9804      	ldr	r0, [sp, #16]
 8005fca:	b00f      	add	sp, #60	@ 0x3c
 8005fcc:	ecbd 8b06 	vpop	{d8-d10}
 8005fd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	f000 b916 	b.w	8006204 <arm_radix8_butterfly_f32>

08005fd8 <arm_cfft_f32>:
 8005fd8:	2a01      	cmp	r2, #1
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	4606      	mov	r6, r0
 8005fe0:	4617      	mov	r7, r2
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	4698      	mov	r8, r3
 8005fe6:	8805      	ldrh	r5, [r0, #0]
 8005fe8:	d053      	beq.n	8006092 <arm_cfft_f32+0xba>
 8005fea:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005fee:	d04b      	beq.n	8006088 <arm_cfft_f32+0xb0>
 8005ff0:	d916      	bls.n	8006020 <arm_cfft_f32+0x48>
 8005ff2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8005ff6:	d01a      	beq.n	800602e <arm_cfft_f32+0x56>
 8005ff8:	d95a      	bls.n	80060b0 <arm_cfft_f32+0xd8>
 8005ffa:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8005ffe:	d043      	beq.n	8006088 <arm_cfft_f32+0xb0>
 8006000:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006004:	d105      	bne.n	8006012 <arm_cfft_f32+0x3a>
 8006006:	2301      	movs	r3, #1
 8006008:	6872      	ldr	r2, [r6, #4]
 800600a:	4629      	mov	r1, r5
 800600c:	4620      	mov	r0, r4
 800600e:	f000 f8f9 	bl	8006204 <arm_radix8_butterfly_f32>
 8006012:	f1b8 0f00 	cmp.w	r8, #0
 8006016:	d111      	bne.n	800603c <arm_cfft_f32+0x64>
 8006018:	2f01      	cmp	r7, #1
 800601a:	d016      	beq.n	800604a <arm_cfft_f32+0x72>
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	2d20      	cmp	r5, #32
 8006022:	d031      	beq.n	8006088 <arm_cfft_f32+0xb0>
 8006024:	d948      	bls.n	80060b8 <arm_cfft_f32+0xe0>
 8006026:	2d40      	cmp	r5, #64	@ 0x40
 8006028:	d0ed      	beq.n	8006006 <arm_cfft_f32+0x2e>
 800602a:	2d80      	cmp	r5, #128	@ 0x80
 800602c:	d1f1      	bne.n	8006012 <arm_cfft_f32+0x3a>
 800602e:	4621      	mov	r1, r4
 8006030:	4630      	mov	r0, r6
 8006032:	f7ff fca9 	bl	8005988 <arm_cfft_radix8by2_f32>
 8006036:	f1b8 0f00 	cmp.w	r8, #0
 800603a:	d0ed      	beq.n	8006018 <arm_cfft_f32+0x40>
 800603c:	68b2      	ldr	r2, [r6, #8]
 800603e:	4620      	mov	r0, r4
 8006040:	89b1      	ldrh	r1, [r6, #12]
 8006042:	f7fa f8ed 	bl	8000220 <arm_bitreversal_32>
 8006046:	2f01      	cmp	r7, #1
 8006048:	d1e8      	bne.n	800601c <arm_cfft_f32+0x44>
 800604a:	ee07 5a90 	vmov	s15, r5
 800604e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800605a:	2d00      	cmp	r5, #0
 800605c:	d0de      	beq.n	800601c <arm_cfft_f32+0x44>
 800605e:	f104 0108 	add.w	r1, r4, #8
 8006062:	2300      	movs	r3, #0
 8006064:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006068:	3301      	adds	r3, #1
 800606a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800606e:	3108      	adds	r1, #8
 8006070:	429d      	cmp	r5, r3
 8006072:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006076:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800607a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800607e:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006082:	d1ef      	bne.n	8006064 <arm_cfft_f32+0x8c>
 8006084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006088:	4621      	mov	r1, r4
 800608a:	4630      	mov	r0, r6
 800608c:	f7ff fd4c 	bl	8005b28 <arm_cfft_radix8by4_f32>
 8006090:	e7bf      	b.n	8006012 <arm_cfft_f32+0x3a>
 8006092:	b1a5      	cbz	r5, 80060be <arm_cfft_f32+0xe6>
 8006094:	f101 030c 	add.w	r3, r1, #12
 8006098:	2200      	movs	r2, #0
 800609a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800609e:	3201      	adds	r2, #1
 80060a0:	3308      	adds	r3, #8
 80060a2:	eef1 7a67 	vneg.f32	s15, s15
 80060a6:	4295      	cmp	r5, r2
 80060a8:	ed43 7a04 	vstr	s15, [r3, #-16]
 80060ac:	d1f5      	bne.n	800609a <arm_cfft_f32+0xc2>
 80060ae:	e79c      	b.n	8005fea <arm_cfft_f32+0x12>
 80060b0:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80060b4:	d0a7      	beq.n	8006006 <arm_cfft_f32+0x2e>
 80060b6:	e7ac      	b.n	8006012 <arm_cfft_f32+0x3a>
 80060b8:	2d10      	cmp	r5, #16
 80060ba:	d0b8      	beq.n	800602e <arm_cfft_f32+0x56>
 80060bc:	e7a9      	b.n	8006012 <arm_cfft_f32+0x3a>
 80060be:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80060c2:	d896      	bhi.n	8005ff2 <arm_cfft_f32+0x1a>
 80060c4:	e7ac      	b.n	8006020 <arm_cfft_f32+0x48>
 80060c6:	bf00      	nop

080060c8 <arm_cmplx_mag_squared_f32>:
 80060c8:	b470      	push	{r4, r5, r6}
 80060ca:	0896      	lsrs	r6, r2, #2
 80060cc:	d03e      	beq.n	800614c <arm_cmplx_mag_squared_f32+0x84>
 80060ce:	f100 0320 	add.w	r3, r0, #32
 80060d2:	f101 0410 	add.w	r4, r1, #16
 80060d6:	4635      	mov	r5, r6
 80060d8:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 80060dc:	3d01      	subs	r5, #1
 80060de:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 80060e2:	f104 0410 	add.w	r4, r4, #16
 80060e6:	ed53 5a07 	vldr	s11, [r3, #-28]	@ 0xffffffe4
 80060ea:	ee27 5a07 	vmul.f32	s10, s14, s14
 80060ee:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
 80060f2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80060f6:	ed13 7a04 	vldr	s14, [r3, #-16]
 80060fa:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80060fe:	ed13 4a03 	vldr	s8, [r3, #-12]
 8006102:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8006106:	ed53 7a02 	vldr	s15, [r3, #-8]
 800610a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800610e:	ed53 4a01 	vldr	s9, [r3, #-4]
 8006112:	ee24 4a04 	vmul.f32	s8, s8, s8
 8006116:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800611a:	f103 0320 	add.w	r3, r3, #32
 800611e:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8006122:	ee75 5a25 	vadd.f32	s11, s10, s11
 8006126:	ee76 6a26 	vadd.f32	s13, s12, s13
 800612a:	ee37 7a04 	vadd.f32	s14, s14, s8
 800612e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8006132:	ed44 5a08 	vstr	s11, [r4, #-32]	@ 0xffffffe0
 8006136:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 800613a:	ed04 7a06 	vstr	s14, [r4, #-24]	@ 0xffffffe8
 800613e:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8006142:	d1c9      	bne.n	80060d8 <arm_cmplx_mag_squared_f32+0x10>
 8006144:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8006148:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800614c:	f012 0203 	ands.w	r2, r2, #3
 8006150:	d010      	beq.n	8006174 <arm_cmplx_mag_squared_f32+0xac>
 8006152:	3008      	adds	r0, #8
 8006154:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006158:	3a01      	subs	r2, #1
 800615a:	ed10 7a01 	vldr	s14, [r0, #-4]
 800615e:	f100 0008 	add.w	r0, r0, #8
 8006162:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006166:	ee27 7a07 	vmul.f32	s14, s14, s14
 800616a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800616e:	ece1 7a01 	vstmia	r1!, {s15}
 8006172:	d1ef      	bne.n	8006154 <arm_cmplx_mag_squared_f32+0x8c>
 8006174:	bc70      	pop	{r4, r5, r6}
 8006176:	4770      	bx	lr

08006178 <arm_mult_f32>:
 8006178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617a:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800617e:	d033      	beq.n	80061e8 <arm_mult_f32+0x70>
 8006180:	f100 0610 	add.w	r6, r0, #16
 8006184:	f101 0510 	add.w	r5, r1, #16
 8006188:	f102 0410 	add.w	r4, r2, #16
 800618c:	4677      	mov	r7, lr
 800618e:	ed16 7a04 	vldr	s14, [r6, #-16]
 8006192:	3f01      	subs	r7, #1
 8006194:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006198:	f106 0610 	add.w	r6, r6, #16
 800619c:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 80061a0:	f105 0510 	add.w	r5, r5, #16
 80061a4:	ee27 6a06 	vmul.f32	s12, s14, s12
 80061a8:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 80061ac:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 80061b0:	f104 0410 	add.w	r4, r4, #16
 80061b4:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 80061b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80061bc:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 80061c0:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 80061c4:	ee27 7a25 	vmul.f32	s14, s14, s11
 80061c8:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 80061cc:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 80061d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80061d4:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 80061d8:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80061dc:	d1d7      	bne.n	800618e <arm_mult_f32+0x16>
 80061de:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80061e2:	4420      	add	r0, r4
 80061e4:	4421      	add	r1, r4
 80061e6:	4422      	add	r2, r4
 80061e8:	f013 0303 	ands.w	r3, r3, #3
 80061ec:	d009      	beq.n	8006202 <arm_mult_f32+0x8a>
 80061ee:	ecf0 7a01 	vldmia	r0!, {s15}
 80061f2:	3b01      	subs	r3, #1
 80061f4:	ecb1 7a01 	vldmia	r1!, {s14}
 80061f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061fc:	ece2 7a01 	vstmia	r2!, {s15}
 8006200:	d1f5      	bne.n	80061ee <arm_mult_f32+0x76>
 8006202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006204 <arm_radix8_butterfly_f32>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	469e      	mov	lr, r3
 800620a:	4603      	mov	r3, r0
 800620c:	468a      	mov	sl, r1
 800620e:	468b      	mov	fp, r1
 8006210:	3304      	adds	r3, #4
 8006212:	ed2d 8b10 	vpush	{d8-d15}
 8006216:	469c      	mov	ip, r3
 8006218:	b09d      	sub	sp, #116	@ 0x74
 800621a:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 8006528 <arm_radix8_butterfly_f32+0x324>
 800621e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006220:	921a      	str	r2, [sp, #104]	@ 0x68
 8006222:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006224:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8006228:	f04f 0800 	mov.w	r8, #0
 800622c:	461a      	mov	r2, r3
 800622e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006230:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006234:	4611      	mov	r1, r2
 8006236:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	0053      	lsls	r3, r2, #1
 800623e:	18d5      	adds	r5, r2, r3
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	0113      	lsls	r3, r2, #4
 8006244:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006246:	194c      	adds	r4, r1, r5
 8006248:	eb02 0609 	add.w	r6, r2, r9
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006252:	4613      	mov	r3, r2
 8006254:	190a      	adds	r2, r1, r4
 8006256:	eb06 0709 	add.w	r7, r6, r9
 800625a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800625e:	1888      	adds	r0, r1, r2
 8006260:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006264:	4401      	add	r1, r0
 8006266:	3204      	adds	r2, #4
 8006268:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800626c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006270:	9b00      	ldr	r3, [sp, #0]
 8006272:	3104      	adds	r1, #4
 8006274:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8006278:	44d8      	add	r8, fp
 800627a:	ed90 7a00 	vldr	s14, [r0]
 800627e:	ed94 5a00 	vldr	s10, [r4]
 8006282:	45c2      	cmp	sl, r8
 8006284:	edd7 3a00 	vldr	s7, [r7]
 8006288:	ed96 6a00 	vldr	s12, [r6]
 800628c:	ee37 1a85 	vadd.f32	s2, s15, s10
 8006290:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006294:	ee73 4a87 	vadd.f32	s9, s7, s14
 8006298:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800629c:	edd5 7a00 	vldr	s15, [r5]
 80062a0:	ee73 3ac7 	vsub.f32	s7, s7, s14
 80062a4:	ed11 7a01 	vldr	s14, [r1, #-4]
 80062a8:	ee36 2a26 	vadd.f32	s4, s12, s13
 80062ac:	ee37 4a87 	vadd.f32	s8, s15, s14
 80062b0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80062b4:	ee71 5a24 	vadd.f32	s11, s2, s9
 80062b8:	ee32 6a04 	vadd.f32	s12, s4, s8
 80062bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80062c0:	ee31 1a64 	vsub.f32	s2, s2, s9
 80062c4:	ee75 4a86 	vadd.f32	s9, s11, s12
 80062c8:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80062cc:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80062d0:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80062d4:	ee32 2a44 	vsub.f32	s4, s4, s8
 80062d8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80062dc:	ed94 0a01 	vldr	s0, [r4, #4]
 80062e0:	edc4 5a00 	vstr	s11, [r4]
 80062e4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80062e8:	edd6 5a01 	vldr	s11, [r6, #4]
 80062ec:	edd5 2a01 	vldr	s5, [r5, #4]
 80062f0:	ee75 1a27 	vadd.f32	s3, s10, s15
 80062f4:	ed92 4a00 	vldr	s8, [r2]
 80062f8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80062fc:	edd1 4a00 	vldr	s9, [r1]
 8006300:	ee27 7a09 	vmul.f32	s14, s14, s18
 8006304:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8006308:	ed9c 6a00 	vldr	s12, [ip]
 800630c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8006310:	edd0 0a01 	vldr	s1, [r0, #4]
 8006314:	ed97 5a01 	vldr	s10, [r7, #4]
 8006318:	ee35 4a84 	vadd.f32	s8, s11, s8
 800631c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8006320:	ee73 5a26 	vadd.f32	s11, s6, s13
 8006324:	ee76 2a00 	vadd.f32	s5, s12, s0
 8006328:	ee73 6a66 	vsub.f32	s13, s6, s13
 800632c:	ee36 6a40 	vsub.f32	s12, s12, s0
 8006330:	ee35 0a20 	vadd.f32	s0, s10, s1
 8006334:	ee65 5a89 	vmul.f32	s11, s11, s18
 8006338:	ee35 5a60 	vsub.f32	s10, s10, s1
 800633c:	ee32 3a80 	vadd.f32	s6, s5, s0
 8006340:	ee74 0a24 	vadd.f32	s1, s8, s9
 8006344:	ee66 6a89 	vmul.f32	s13, s13, s18
 8006348:	ee74 4a64 	vsub.f32	s9, s8, s9
 800634c:	ee32 4ac0 	vsub.f32	s8, s5, s0
 8006350:	ee75 2a25 	vadd.f32	s5, s10, s11
 8006354:	ee33 0a20 	vadd.f32	s0, s6, s1
 8006358:	ee75 5a65 	vsub.f32	s11, s10, s11
 800635c:	ee33 3a60 	vsub.f32	s6, s6, s1
 8006360:	ee36 5a26 	vadd.f32	s10, s12, s13
 8006364:	ed8c 0a00 	vstr	s0, [ip]
 8006368:	ee76 6a66 	vsub.f32	s13, s12, s13
 800636c:	449c      	add	ip, r3
 800636e:	ee33 6a87 	vadd.f32	s12, s7, s14
 8006372:	ed84 3a01 	vstr	s6, [r4, #4]
 8006376:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800637a:	441c      	add	r4, r3
 800637c:	ee71 3a24 	vadd.f32	s7, s2, s9
 8006380:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006384:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8006388:	edc7 3a00 	vstr	s7, [r7]
 800638c:	ee34 1a42 	vsub.f32	s2, s8, s4
 8006390:	edc0 4a00 	vstr	s9, [r0]
 8006394:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8006398:	ee75 4a46 	vsub.f32	s9, s10, s12
 800639c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80063a0:	ed87 1a01 	vstr	s2, [r7, #4]
 80063a4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 80063a8:	441f      	add	r7, r3
 80063aa:	ee32 4a04 	vadd.f32	s8, s4, s8
 80063ae:	ee71 1ae2 	vsub.f32	s3, s3, s5
 80063b2:	ee36 6a05 	vadd.f32	s12, s12, s10
 80063b6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80063ba:	ed80 4a01 	vstr	s8, [r0, #4]
 80063be:	ed86 3a00 	vstr	s6, [r6]
 80063c2:	4418      	add	r0, r3
 80063c4:	ed41 1a01 	vstr	s3, [r1, #-4]
 80063c8:	ed42 3a01 	vstr	s7, [r2, #-4]
 80063cc:	edc5 7a00 	vstr	s15, [r5]
 80063d0:	edc6 4a01 	vstr	s9, [r6, #4]
 80063d4:	441e      	add	r6, r3
 80063d6:	ed81 6a00 	vstr	s12, [r1]
 80063da:	4419      	add	r1, r3
 80063dc:	edc2 5a00 	vstr	s11, [r2]
 80063e0:	441a      	add	r2, r3
 80063e2:	ed85 7a01 	vstr	s14, [r5, #4]
 80063e6:	441d      	add	r5, r3
 80063e8:	f63f af44 	bhi.w	8006274 <arm_radix8_butterfly_f32+0x70>
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063f0:	2b07      	cmp	r3, #7
 80063f2:	f240 81f4 	bls.w	80067de <arm_radix8_butterfly_f32+0x5da>
 80063f6:	9901      	ldr	r1, [sp, #4]
 80063f8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80063fc:	9d02      	ldr	r5, [sp, #8]
 80063fe:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8006402:	3101      	adds	r1, #1
 8006404:	eb04 000e 	add.w	r0, r4, lr
 8006408:	00e4      	lsls	r4, r4, #3
 800640a:	3508      	adds	r5, #8
 800640c:	4419      	add	r1, r3
 800640e:	eb00 0c0e 	add.w	ip, r0, lr
 8006412:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006414:	00c0      	lsls	r0, r0, #3
 8006416:	185e      	adds	r6, r3, r1
 8006418:	4617      	mov	r7, r2
 800641a:	9218      	str	r2, [sp, #96]	@ 0x60
 800641c:	f109 0908 	add.w	r9, r9, #8
 8006420:	199c      	adds	r4, r3, r6
 8006422:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006426:	9012      	str	r0, [sp, #72]	@ 0x48
 8006428:	195d      	adds	r5, r3, r5
 800642a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800642c:	443a      	add	r2, r7
 800642e:	950c      	str	r5, [sp, #48]	@ 0x30
 8006430:	4698      	mov	r8, r3
 8006432:	4420      	add	r0, r4
 8006434:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8006436:	19d7      	adds	r7, r2, r7
 8006438:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800643c:	4405      	add	r5, r0
 800643e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006442:	9710      	str	r7, [sp, #64]	@ 0x40
 8006444:	eb0c 070e 	add.w	r7, ip, lr
 8006448:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800644c:	3404      	adds	r4, #4
 800644e:	3004      	adds	r0, #4
 8006450:	44c8      	add	r8, r9
 8006452:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8006456:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006458:	940a      	str	r4, [sp, #40]	@ 0x28
 800645a:	9009      	str	r0, [sp, #36]	@ 0x24
 800645c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006460:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8006462:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006466:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8006468:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 800646c:	eb07 080e 	add.w	r8, r7, lr
 8006470:	eb04 0900 	add.w	r9, r4, r0
 8006474:	00f8      	lsls	r0, r7, #3
 8006476:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800647a:	3504      	adds	r5, #4
 800647c:	4607      	mov	r7, r0
 800647e:	9017      	str	r0, [sp, #92]	@ 0x5c
 8006480:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006482:	4618      	mov	r0, r3
 8006484:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8006488:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800648a:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800648e:	18e3      	adds	r3, r4, r3
 8006490:	9508      	str	r5, [sp, #32]
 8006492:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006494:	910e      	str	r1, [sp, #56]	@ 0x38
 8006496:	4621      	mov	r1, r4
 8006498:	eb04 0805 	add.w	r8, r4, r5
 800649c:	9304      	str	r3, [sp, #16]
 800649e:	19e5      	adds	r5, r4, r7
 80064a0:	ea4f 130e 	mov.w	r3, lr, lsl #4
 80064a4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80064a6:	9316      	str	r3, [sp, #88]	@ 0x58
 80064a8:	190b      	adds	r3, r1, r4
 80064aa:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80064ac:	9505      	str	r5, [sp, #20]
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	f100 0308 	add.w	r3, r0, #8
 80064b4:	9707      	str	r7, [sp, #28]
 80064b6:	4638      	mov	r0, r7
 80064b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80064ba:	2301      	movs	r3, #1
 80064bc:	9306      	str	r3, [sp, #24]
 80064be:	9b00      	ldr	r3, [sp, #0]
 80064c0:	ed90 fa00 	vldr	s30, [r0]
 80064c4:	edd0 ba01 	vldr	s23, [r0, #4]
 80064c8:	9803      	ldr	r0, [sp, #12]
 80064ca:	9903      	ldr	r1, [sp, #12]
 80064cc:	ed90 ba01 	vldr	s22, [r0, #4]
 80064d0:	9804      	ldr	r0, [sp, #16]
 80064d2:	edd1 ea00 	vldr	s29, [r1]
 80064d6:	edd0 aa01 	vldr	s21, [r0, #4]
 80064da:	9805      	ldr	r0, [sp, #20]
 80064dc:	9905      	ldr	r1, [sp, #20]
 80064de:	edd0 7a01 	vldr	s15, [r0, #4]
 80064e2:	ed91 da00 	vldr	s26, [r1]
 80064e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80064e8:	9c04      	ldr	r4, [sp, #16]
 80064ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80064ee:	edd8 7a01 	vldr	s15, [r8, #4]
 80064f2:	9100      	str	r1, [sp, #0]
 80064f4:	edd2 fa00 	vldr	s31, [r2]
 80064f8:	ed94 ea00 	vldr	s28, [r4]
 80064fc:	ed92 ca01 	vldr	s24, [r2, #4]
 8006500:	f8dd e020 	ldr.w	lr, [sp, #32]
 8006504:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006506:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006508:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800650a:	edd9 da00 	vldr	s27, [r9]
 800650e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006510:	edd8 ca00 	vldr	s25, [r8]
 8006514:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006516:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006518:	f8dd c018 	ldr.w	ip, [sp, #24]
 800651c:	ed99 aa01 	vldr	s20, [r9, #4]
 8006520:	edcd 7a02 	vstr	s15, [sp, #8]
 8006524:	9800      	ldr	r0, [sp, #0]
 8006526:	e001      	b.n	800652c <arm_radix8_butterfly_f32+0x328>
 8006528:	3f3504f3 	.word	0x3f3504f3
 800652c:	edd5 3a00 	vldr	s7, [r5]
 8006530:	44dc      	add	ip, fp
 8006532:	ed91 7a00 	vldr	s14, [r1]
 8006536:	edd4 8a00 	vldr	s17, [r4]
 800653a:	45e2      	cmp	sl, ip
 800653c:	ed57 7a01 	vldr	s15, [r7, #-4]
 8006540:	ed90 5a00 	vldr	s10, [r0]
 8006544:	ed56 5a01 	vldr	s11, [r6, #-4]
 8006548:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800654c:	ed92 1a00 	vldr	s2, [r2]
 8006550:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8006554:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8006558:	ee75 9a25 	vadd.f32	s19, s10, s11
 800655c:	ee31 3a07 	vadd.f32	s6, s2, s14
 8006560:	ed92 8a01 	vldr	s16, [r2, #4]
 8006564:	ee73 6a84 	vadd.f32	s13, s7, s8
 8006568:	ee75 5a65 	vsub.f32	s11, s10, s11
 800656c:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006570:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006574:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8006578:	ee75 7a84 	vadd.f32	s15, s11, s8
 800657c:	ee31 1a47 	vsub.f32	s2, s2, s14
 8006580:	ee31 7a85 	vadd.f32	s14, s3, s10
 8006584:	ee67 7a89 	vmul.f32	s15, s15, s18
 8006588:	ee33 3a46 	vsub.f32	s6, s6, s12
 800658c:	ed82 7a00 	vstr	s14, [r2]
 8006590:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8006594:	ed96 6a00 	vldr	s12, [r6]
 8006598:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800659c:	edd5 3a01 	vldr	s7, [r5, #4]
 80065a0:	ee74 8ae7 	vsub.f32	s17, s9, s15
 80065a4:	ed90 7a01 	vldr	s14, [r0, #4]
 80065a8:	ee35 4ac4 	vsub.f32	s8, s11, s8
 80065ac:	edde 4a00 	vldr	s9, [lr]
 80065b0:	ee31 5ac5 	vsub.f32	s10, s3, s10
 80065b4:	ee77 2a46 	vsub.f32	s5, s14, s12
 80065b8:	edd1 6a01 	vldr	s13, [r1, #4]
 80065bc:	ee73 7ae4 	vsub.f32	s15, s7, s9
 80065c0:	edd7 0a00 	vldr	s1, [r7]
 80065c4:	ee77 5a06 	vadd.f32	s11, s14, s12
 80065c8:	ed94 7a01 	vldr	s14, [r4, #4]
 80065cc:	ee33 6aa4 	vadd.f32	s12, s7, s9
 80065d0:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80065d4:	ee78 4a66 	vsub.f32	s9, s16, s13
 80065d8:	ee78 3a26 	vadd.f32	s7, s16, s13
 80065dc:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80065e0:	ee77 6a20 	vadd.f32	s13, s14, s1
 80065e4:	ee24 4a09 	vmul.f32	s8, s8, s18
 80065e8:	ee37 7a60 	vsub.f32	s14, s14, s1
 80065ec:	ee20 8a09 	vmul.f32	s16, s0, s18
 80065f0:	ee75 0a86 	vadd.f32	s1, s11, s12
 80065f4:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80065f8:	ee62 2a89 	vmul.f32	s5, s5, s18
 80065fc:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006600:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8006604:	ee77 7a62 	vsub.f32	s15, s14, s5
 8006608:	ee74 5a88 	vadd.f32	s11, s9, s16
 800660c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8006610:	ee77 4a22 	vadd.f32	s9, s14, s5
 8006614:	ee71 2a04 	vadd.f32	s5, s2, s8
 8006618:	ee31 7a44 	vsub.f32	s14, s2, s8
 800661c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8006620:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006624:	ee33 6a46 	vsub.f32	s12, s6, s12
 8006628:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800662c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 8006630:	ee38 4a68 	vsub.f32	s8, s16, s17
 8006634:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8006638:	ee72 5a25 	vadd.f32	s11, s4, s11
 800663c:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8006640:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8006644:	ee77 2a27 	vadd.f32	s5, s14, s15
 8006648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800664c:	ee78 7a88 	vadd.f32	s15, s17, s16
 8006650:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8006654:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8006658:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800665c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8006660:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8006664:	ee70 0a20 	vadd.f32	s1, s0, s1
 8006668:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800666c:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8006670:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8006674:	edc2 0a01 	vstr	s1, [r2, #4]
 8006678:	ee38 8a88 	vadd.f32	s16, s17, s16
 800667c:	441a      	add	r2, r3
 800667e:	ee6c 8a23 	vmul.f32	s17, s24, s7
 8006682:	ee31 5a45 	vsub.f32	s10, s2, s10
 8006686:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800668a:	ed81 8a00 	vstr	s16, [r1]
 800668e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8006692:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006696:	ed81 5a01 	vstr	s10, [r1, #4]
 800669a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800669e:	edcd 3a00 	vstr	s7, [sp]
 80066a2:	ed9d 5a02 	vldr	s10, [sp, #8]
 80066a6:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80066aa:	eddd 3a01 	vldr	s7, [sp, #4]
 80066ae:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80066b2:	ed84 0a00 	vstr	s0, [r4]
 80066b6:	ee65 4a24 	vmul.f32	s9, s10, s9
 80066ba:	ed84 3a01 	vstr	s6, [r4, #4]
 80066be:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80066c2:	ee23 6a86 	vmul.f32	s12, s7, s12
 80066c6:	eddd 3a00 	vldr	s7, [sp]
 80066ca:	ee25 5a25 	vmul.f32	s10, s10, s11
 80066ce:	4419      	add	r1, r3
 80066d0:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80066d4:	441c      	add	r4, r3
 80066d6:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80066da:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80066de:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80066e2:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80066e6:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80066ea:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80066ee:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80066f2:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80066f6:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80066fa:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80066fe:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8006702:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006706:	ee38 8a01 	vadd.f32	s16, s16, s2
 800670a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800670e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8006712:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8006716:	ed07 8a01 	vstr	s16, [r7, #-4]
 800671a:	ee30 0a21 	vadd.f32	s0, s0, s3
 800671e:	ed87 6a00 	vstr	s12, [r7]
 8006722:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006726:	edc0 0a00 	vstr	s1, [r0]
 800672a:	ee33 3a28 	vadd.f32	s6, s6, s17
 800672e:	edc0 3a01 	vstr	s7, [r0, #4]
 8006732:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006736:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800673a:	edce 4a00 	vstr	s9, [lr]
 800673e:	4418      	add	r0, r3
 8006740:	ed06 0a01 	vstr	s0, [r6, #-4]
 8006744:	441f      	add	r7, r3
 8006746:	edc6 2a00 	vstr	s5, [r6]
 800674a:	449e      	add	lr, r3
 800674c:	ed85 3a00 	vstr	s6, [r5]
 8006750:	441e      	add	r6, r3
 8006752:	ed85 7a01 	vstr	s14, [r5, #4]
 8006756:	441d      	add	r5, r3
 8006758:	f63f aee8 	bhi.w	800652c <arm_radix8_butterfly_f32+0x328>
 800675c:	9a06      	ldr	r2, [sp, #24]
 800675e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006760:	3201      	adds	r2, #1
 8006762:	4611      	mov	r1, r2
 8006764:	9206      	str	r2, [sp, #24]
 8006766:	9a07      	ldr	r2, [sp, #28]
 8006768:	4402      	add	r2, r0
 800676a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800676c:	9207      	str	r2, [sp, #28]
 800676e:	9a03      	ldr	r2, [sp, #12]
 8006770:	4402      	add	r2, r0
 8006772:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006774:	9203      	str	r2, [sp, #12]
 8006776:	9a04      	ldr	r2, [sp, #16]
 8006778:	4402      	add	r2, r0
 800677a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800677c:	9204      	str	r2, [sp, #16]
 800677e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006780:	4491      	add	r9, r2
 8006782:	9a05      	ldr	r2, [sp, #20]
 8006784:	4402      	add	r2, r0
 8006786:	9205      	str	r2, [sp, #20]
 8006788:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800678a:	4490      	add	r8, r2
 800678c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800678e:	3208      	adds	r2, #8
 8006790:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006794:	3208      	adds	r2, #8
 8006796:	920e      	str	r2, [sp, #56]	@ 0x38
 8006798:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800679a:	3208      	adds	r2, #8
 800679c:	920d      	str	r2, [sp, #52]	@ 0x34
 800679e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80067a0:	3208      	adds	r2, #8
 80067a2:	920c      	str	r2, [sp, #48]	@ 0x30
 80067a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067a6:	3208      	adds	r2, #8
 80067a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 80067aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067ac:	3208      	adds	r2, #8
 80067ae:	920a      	str	r2, [sp, #40]	@ 0x28
 80067b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067b2:	3208      	adds	r2, #8
 80067b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80067b6:	9a08      	ldr	r2, [sp, #32]
 80067b8:	3208      	adds	r2, #8
 80067ba:	9208      	str	r2, [sp, #32]
 80067bc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80067be:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80067c0:	4622      	mov	r2, r4
 80067c2:	4288      	cmp	r0, r1
 80067c4:	d005      	beq.n	80067d2 <arm_radix8_butterfly_f32+0x5ce>
 80067c6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80067c8:	4621      	mov	r1, r4
 80067ca:	4401      	add	r1, r0
 80067cc:	9807      	ldr	r0, [sp, #28]
 80067ce:	9110      	str	r1, [sp, #64]	@ 0x40
 80067d0:	e676      	b.n	80064c0 <arm_radix8_butterfly_f32+0x2bc>
 80067d2:	4683      	mov	fp, r0
 80067d4:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 80067d8:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 80067dc:	e522      	b.n	8006224 <arm_radix8_butterfly_f32+0x20>
 80067de:	b01d      	add	sp, #116	@ 0x74
 80067e0:	ecbd 8b10 	vpop	{d8-d15}
 80067e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067e8 <ai_buffer_get_size>:
 80067e8:	b368      	cbz	r0, 8006846 <ai_buffer_get_size+0x5e>
 80067ea:	4b17      	ldr	r3, [pc, #92]	@ (8006848 <ai_buffer_get_size+0x60>)
 80067ec:	4a17      	ldr	r2, [pc, #92]	@ (800684c <ai_buffer_get_size+0x64>)
 80067ee:	b410      	push	{r4}
 80067f0:	6804      	ldr	r4, [r0, #0]
 80067f2:	4023      	ands	r3, r4
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d123      	bne.n	8006840 <ai_buffer_get_size+0x58>
 80067f8:	b311      	cbz	r1, 8006840 <ai_buffer_get_size+0x58>
 80067fa:	6984      	ldr	r4, [r0, #24]
 80067fc:	6862      	ldr	r2, [r4, #4]
 80067fe:	321f      	adds	r2, #31
 8006800:	f022 021f 	bic.w	r2, r2, #31
 8006804:	7d03      	ldrb	r3, [r0, #20]
 8006806:	6941      	ldr	r1, [r0, #20]
 8006808:	f1a3 0301 	sub.w	r3, r3, #1
 800680c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006810:	fab3 f383 	clz	r3, r3
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800681a:	da0c      	bge.n	8006836 <ai_buffer_get_size+0x4e>
 800681c:	2b01      	cmp	r3, #1
 800681e:	d103      	bne.n	8006828 <ai_buffer_get_size+0x40>
 8006820:	2802      	cmp	r0, #2
 8006822:	f04f 0302 	mov.w	r3, #2
 8006826:	d006      	beq.n	8006836 <ai_buffer_get_size+0x4e>
 8006828:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800682c:	3301      	adds	r3, #1
 800682e:	4298      	cmp	r0, r3
 8006830:	fb01 f202 	mul.w	r2, r1, r2
 8006834:	d1f2      	bne.n	800681c <ai_buffer_get_size+0x34>
 8006836:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800683a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	6984      	ldr	r4, [r0, #24]
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	e7de      	b.n	8006804 <ai_buffer_get_size+0x1c>
 8006846:	4770      	bx	lr
 8006848:	017fffff 	.word	0x017fffff
 800684c:	000400c0 	.word	0x000400c0

08006850 <ai_buffer_array_sane>:
 8006850:	b138      	cbz	r0, 8006862 <ai_buffer_array_sane+0x12>
 8006852:	6843      	ldr	r3, [r0, #4]
 8006854:	b123      	cbz	r3, 8006860 <ai_buffer_array_sane+0x10>
 8006856:	8840      	ldrh	r0, [r0, #2]
 8006858:	3800      	subs	r0, #0
 800685a:	bf18      	it	ne
 800685c:	2001      	movne	r0, #1
 800685e:	4770      	bx	lr
 8006860:	4618      	mov	r0, r3
 8006862:	4770      	bx	lr

08006864 <ai_buffer_array_item_set_address>:
 8006864:	b150      	cbz	r0, 800687c <ai_buffer_array_item_set_address+0x18>
 8006866:	6843      	ldr	r3, [r0, #4]
 8006868:	b14b      	cbz	r3, 800687e <ai_buffer_array_item_set_address+0x1a>
 800686a:	8840      	ldrh	r0, [r0, #2]
 800686c:	b900      	cbnz	r0, 8006870 <ai_buffer_array_item_set_address+0xc>
 800686e:	4770      	bx	lr
 8006870:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006874:	2001      	movs	r0, #1
 8006876:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800687a:	605a      	str	r2, [r3, #4]
 800687c:	4770      	bx	lr
 800687e:	4618      	mov	r0, r3
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <ai_platform_get_weights_map>:
 8006884:	2900      	cmp	r1, #0
 8006886:	bf18      	it	ne
 8006888:	2800      	cmpne	r0, #0
 800688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688c:	bf0c      	ite	eq
 800688e:	2401      	moveq	r4, #1
 8006890:	2400      	movne	r4, #0
 8006892:	2a00      	cmp	r2, #0
 8006894:	bf08      	it	eq
 8006896:	f044 0401 	orreq.w	r4, r4, #1
 800689a:	b114      	cbz	r4, 80068a2 <ai_platform_get_weights_map+0x1e>
 800689c:	2400      	movs	r4, #0
 800689e:	4620      	mov	r0, r4
 80068a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a2:	4616      	mov	r6, r2
 80068a4:	4b22      	ldr	r3, [pc, #136]	@ (8006930 <ai_platform_get_weights_map+0xac>)
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	4605      	mov	r5, r0
 80068aa:	460f      	mov	r7, r1
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d022      	beq.n	80068f6 <ai_platform_get_weights_map+0x72>
 80068b0:	6870      	ldr	r0, [r6, #4]
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d0f2      	beq.n	800689c <ai_platform_get_weights_map+0x18>
 80068b6:	6806      	ldr	r6, [r0, #0]
 80068b8:	429e      	cmp	r6, r3
 80068ba:	d006      	beq.n	80068ca <ai_platform_get_weights_map+0x46>
 80068bc:	f1a1 0401 	sub.w	r4, r1, #1
 80068c0:	6028      	str	r0, [r5, #0]
 80068c2:	fab4 f484 	clz	r4, r4
 80068c6:	0964      	lsrs	r4, r4, #5
 80068c8:	e7e9      	b.n	800689e <ai_platform_get_weights_map+0x1a>
 80068ca:	3d04      	subs	r5, #4
 80068cc:	4602      	mov	r2, r0
 80068ce:	4621      	mov	r1, r4
 80068d0:	e000      	b.n	80068d4 <ai_platform_get_weights_map+0x50>
 80068d2:	4619      	mov	r1, r3
 80068d4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80068d8:	42b3      	cmp	r3, r6
 80068da:	d025      	beq.n	8006928 <ai_platform_get_weights_map+0xa4>
 80068dc:	f845 3f04 	str.w	r3, [r5, #4]!
 80068e0:	1c4b      	adds	r3, r1, #1
 80068e2:	429f      	cmp	r7, r3
 80068e4:	d8f5      	bhi.n	80068d2 <ai_platform_get_weights_map+0x4e>
 80068e6:	d1da      	bne.n	800689e <ai_platform_get_weights_map+0x1a>
 80068e8:	3102      	adds	r1, #2
 80068ea:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80068ee:	42b3      	cmp	r3, r6
 80068f0:	d1d5      	bne.n	800689e <ai_platform_get_weights_map+0x1a>
 80068f2:	2401      	movs	r4, #1
 80068f4:	e7d3      	b.n	800689e <ai_platform_get_weights_map+0x1a>
 80068f6:	1d30      	adds	r0, r6, #4
 80068f8:	f7ff ffaa 	bl	8006850 <ai_buffer_array_sane>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d0cd      	beq.n	800689c <ai_platform_get_weights_map+0x18>
 8006900:	88f3      	ldrh	r3, [r6, #6]
 8006902:	429f      	cmp	r7, r3
 8006904:	d1ca      	bne.n	800689c <ai_platform_get_weights_map+0x18>
 8006906:	3d04      	subs	r5, #4
 8006908:	4622      	mov	r2, r4
 800690a:	68b3      	ldr	r3, [r6, #8]
 800690c:	4423      	add	r3, r4
 800690e:	341c      	adds	r4, #28
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	b123      	cbz	r3, 800691e <ai_platform_get_weights_map+0x9a>
 8006914:	3201      	adds	r2, #1
 8006916:	f845 3f04 	str.w	r3, [r5, #4]!
 800691a:	4297      	cmp	r7, r2
 800691c:	d8f5      	bhi.n	800690a <ai_platform_get_weights_map+0x86>
 800691e:	1abc      	subs	r4, r7, r2
 8006920:	fab4 f484 	clz	r4, r4
 8006924:	0964      	lsrs	r4, r4, #5
 8006926:	e7ba      	b.n	800689e <ai_platform_get_weights_map+0x1a>
 8006928:	428f      	cmp	r7, r1
 800692a:	d1b8      	bne.n	800689e <ai_platform_get_weights_map+0x1a>
 800692c:	e7e1      	b.n	80068f2 <ai_platform_get_weights_map+0x6e>
 800692e:	bf00      	nop
 8006930:	a1facade 	.word	0xa1facade

08006934 <ai_platform_get_activations_map>:
 8006934:	2900      	cmp	r1, #0
 8006936:	bf18      	it	ne
 8006938:	2800      	cmpne	r0, #0
 800693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693c:	bf0c      	ite	eq
 800693e:	2401      	moveq	r4, #1
 8006940:	2400      	movne	r4, #0
 8006942:	2a00      	cmp	r2, #0
 8006944:	bf08      	it	eq
 8006946:	f044 0401 	orreq.w	r4, r4, #1
 800694a:	b114      	cbz	r4, 8006952 <ai_platform_get_activations_map+0x1e>
 800694c:	2400      	movs	r4, #0
 800694e:	4620      	mov	r0, r4
 8006950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006952:	4616      	mov	r6, r2
 8006954:	4b22      	ldr	r3, [pc, #136]	@ (80069e0 <ai_platform_get_activations_map+0xac>)
 8006956:	6812      	ldr	r2, [r2, #0]
 8006958:	4605      	mov	r5, r0
 800695a:	460f      	mov	r7, r1
 800695c:	429a      	cmp	r2, r3
 800695e:	d022      	beq.n	80069a6 <ai_platform_get_activations_map+0x72>
 8006960:	6a30      	ldr	r0, [r6, #32]
 8006962:	2800      	cmp	r0, #0
 8006964:	d0f2      	beq.n	800694c <ai_platform_get_activations_map+0x18>
 8006966:	6806      	ldr	r6, [r0, #0]
 8006968:	429e      	cmp	r6, r3
 800696a:	d006      	beq.n	800697a <ai_platform_get_activations_map+0x46>
 800696c:	f1a1 0401 	sub.w	r4, r1, #1
 8006970:	6028      	str	r0, [r5, #0]
 8006972:	fab4 f484 	clz	r4, r4
 8006976:	0964      	lsrs	r4, r4, #5
 8006978:	e7e9      	b.n	800694e <ai_platform_get_activations_map+0x1a>
 800697a:	3d04      	subs	r5, #4
 800697c:	4602      	mov	r2, r0
 800697e:	4621      	mov	r1, r4
 8006980:	e000      	b.n	8006984 <ai_platform_get_activations_map+0x50>
 8006982:	4619      	mov	r1, r3
 8006984:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006988:	42b3      	cmp	r3, r6
 800698a:	d026      	beq.n	80069da <ai_platform_get_activations_map+0xa6>
 800698c:	f845 3f04 	str.w	r3, [r5, #4]!
 8006990:	1c4b      	adds	r3, r1, #1
 8006992:	429f      	cmp	r7, r3
 8006994:	d8f5      	bhi.n	8006982 <ai_platform_get_activations_map+0x4e>
 8006996:	d1da      	bne.n	800694e <ai_platform_get_activations_map+0x1a>
 8006998:	3102      	adds	r1, #2
 800699a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800699e:	42b3      	cmp	r3, r6
 80069a0:	d1d5      	bne.n	800694e <ai_platform_get_activations_map+0x1a>
 80069a2:	2401      	movs	r4, #1
 80069a4:	e7d3      	b.n	800694e <ai_platform_get_activations_map+0x1a>
 80069a6:	f106 000c 	add.w	r0, r6, #12
 80069aa:	f7ff ff51 	bl	8006850 <ai_buffer_array_sane>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d0cc      	beq.n	800694c <ai_platform_get_activations_map+0x18>
 80069b2:	89f3      	ldrh	r3, [r6, #14]
 80069b4:	429f      	cmp	r7, r3
 80069b6:	d1c9      	bne.n	800694c <ai_platform_get_activations_map+0x18>
 80069b8:	3d04      	subs	r5, #4
 80069ba:	4622      	mov	r2, r4
 80069bc:	6933      	ldr	r3, [r6, #16]
 80069be:	4423      	add	r3, r4
 80069c0:	341c      	adds	r4, #28
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	b123      	cbz	r3, 80069d0 <ai_platform_get_activations_map+0x9c>
 80069c6:	3201      	adds	r2, #1
 80069c8:	f845 3f04 	str.w	r3, [r5, #4]!
 80069cc:	4297      	cmp	r7, r2
 80069ce:	d8f5      	bhi.n	80069bc <ai_platform_get_activations_map+0x88>
 80069d0:	1abc      	subs	r4, r7, r2
 80069d2:	fab4 f484 	clz	r4, r4
 80069d6:	0964      	lsrs	r4, r4, #5
 80069d8:	e7b9      	b.n	800694e <ai_platform_get_activations_map+0x1a>
 80069da:	428f      	cmp	r7, r1
 80069dc:	d1b7      	bne.n	800694e <ai_platform_get_activations_map+0x1a>
 80069de:	e7e0      	b.n	80069a2 <ai_platform_get_activations_map+0x6e>
 80069e0:	a1facade 	.word	0xa1facade

080069e4 <ai_platform_bind_network_params>:
 80069e4:	2a00      	cmp	r2, #0
 80069e6:	bf18      	it	ne
 80069e8:	2900      	cmpne	r1, #0
 80069ea:	d010      	beq.n	8006a0e <ai_platform_bind_network_params+0x2a>
 80069ec:	b178      	cbz	r0, 8006a0e <ai_platform_bind_network_params+0x2a>
 80069ee:	4603      	mov	r3, r0
 80069f0:	4808      	ldr	r0, [pc, #32]	@ (8006a14 <ai_platform_bind_network_params+0x30>)
 80069f2:	f103 0c0c 	add.w	ip, r3, #12
 80069f6:	f843 0b04 	str.w	r0, [r3], #4
 80069fa:	c903      	ldmia	r1, {r0, r1}
 80069fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8006a00:	2301      	movs	r3, #1
 8006a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a06:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	4770      	bx	lr
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4618      	mov	r0, r3
 8006a12:	4770      	bx	lr
 8006a14:	a1facade 	.word	0xa1facade

08006a18 <ai_platform_network_get_error>:
 8006a18:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <ai_platform_network_get_error+0x14>)
 8006a1a:	6802      	ldr	r2, [r0, #0]
 8006a1c:	4393      	bics	r3, r2
 8006a1e:	d102      	bne.n	8006a26 <ai_platform_network_get_error+0xe>
 8006a20:	300c      	adds	r0, #12
 8006a22:	f000 bc73 	b.w	800730c <core_get_error>
 8006a26:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006a2a:	4770      	bx	lr
 8006a2c:	a1c00100 	.word	0xa1c00100

08006a30 <ai_platform_network_set_error>:
 8006a30:	b110      	cbz	r0, 8006a38 <ai_platform_network_set_error+0x8>
 8006a32:	300c      	adds	r0, #12
 8006a34:	f000 bc70 	b.w	8007318 <core_set_error>
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop

08006a3c <ai_platform_inputs_get>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	4b39      	ldr	r3, [pc, #228]	@ (8006b28 <ai_platform_inputs_get+0xec>)
 8006a42:	b085      	sub	sp, #20
 8006a44:	6802      	ldr	r2, [r0, #0]
 8006a46:	4393      	bics	r3, r2
 8006a48:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8006a4c:	d162      	bne.n	8006b14 <ai_platform_inputs_get+0xd8>
 8006a4e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d051      	beq.n	8006af8 <ai_platform_inputs_get+0xbc>
 8006a54:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8006a58:	f1ba 0f00 	cmp.w	sl, #0
 8006a5c:	d04c      	beq.n	8006af8 <ai_platform_inputs_get+0xbc>
 8006a5e:	f04f 0900 	mov.w	r9, #0
 8006a62:	464d      	mov	r5, r9
 8006a64:	e016      	b.n	8006a94 <ai_platform_inputs_get+0x58>
 8006a66:	9901      	ldr	r1, [sp, #4]
 8006a68:	2301      	movs	r3, #1
 8006a6a:	f848 3001 	str.w	r3, [r8, r1]
 8006a6e:	69b1      	ldr	r1, [r6, #24]
 8006a70:	f04f 0301 	mov.w	r3, #1
 8006a74:	684e      	ldr	r6, [r1, #4]
 8006a76:	3501      	adds	r5, #1
 8006a78:	f109 091c 	add.w	r9, r9, #28
 8006a7c:	7523      	strb	r3, [r4, #20]
 8006a7e:	2300      	movs	r3, #0
 8006a80:	6961      	ldr	r1, [r4, #20]
 8006a82:	6020      	str	r0, [r4, #0]
 8006a84:	f36b 211f 	bfi	r1, fp, #8, #24
 8006a88:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8006a8c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8006a90:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8006a94:	f8ba 3000 	ldrh.w	r3, [sl]
 8006a98:	b2ac      	uxth	r4, r5
 8006a9a:	42ab      	cmp	r3, r5
 8006a9c:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	d93b      	bls.n	8006b1c <ai_platform_inputs_get+0xe0>
 8006aa4:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d037      	beq.n	8006b1c <ai_platform_inputs_get+0xe0>
 8006aac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006ab0:	2e00      	cmp	r6, #0
 8006ab2:	d033      	beq.n	8006b1c <ai_platform_inputs_get+0xe0>
 8006ab4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006ab8:	69b2      	ldr	r2, [r6, #24]
 8006aba:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006abe:	6810      	ldr	r0, [r2, #0]
 8006ac0:	68b3      	ldr	r3, [r6, #8]
 8006ac2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006ac6:	68f2      	ldr	r2, [r6, #12]
 8006ac8:	444c      	add	r4, r9
 8006aca:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006ace:	9200      	str	r2, [sp, #0]
 8006ad0:	f002 f984 	bl	8008ddc <ai_array_to_buffer_fmt>
 8006ad4:	69b1      	ldr	r1, [r6, #24]
 8006ad6:	9a00      	ldr	r2, [sp, #0]
 8006ad8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006adc:	2f00      	cmp	r7, #0
 8006ade:	d0c7      	beq.n	8006a70 <ai_platform_inputs_get+0x34>
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8006ae6:	6831      	ldr	r1, [r6, #0]
 8006ae8:	6079      	str	r1, [r7, #4]
 8006aea:	b111      	cbz	r1, 8006af2 <ai_platform_inputs_get+0xb6>
 8006aec:	8849      	ldrh	r1, [r1, #2]
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d1b9      	bne.n	8006a66 <ai_platform_inputs_get+0x2a>
 8006af2:	69b1      	ldr	r1, [r6, #24]
 8006af4:	2700      	movs	r7, #0
 8006af6:	e7bb      	b.n	8006a70 <ai_platform_inputs_get+0x34>
 8006af8:	9803      	ldr	r0, [sp, #12]
 8006afa:	2400      	movs	r4, #0
 8006afc:	2218      	movs	r2, #24
 8006afe:	2111      	movs	r1, #17
 8006b00:	300c      	adds	r0, #12
 8006b02:	f000 fc09 	bl	8007318 <core_set_error>
 8006b06:	4620      	mov	r0, r4
 8006b08:	9b02      	ldr	r3, [sp, #8]
 8006b0a:	b103      	cbz	r3, 8006b0e <ai_platform_inputs_get+0xd2>
 8006b0c:	801c      	strh	r4, [r3, #0]
 8006b0e:	b005      	add	sp, #20
 8006b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b14:	2000      	movs	r0, #0
 8006b16:	b005      	add	sp, #20
 8006b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1c:	2c00      	cmp	r4, #0
 8006b1e:	d0eb      	beq.n	8006af8 <ai_platform_inputs_get+0xbc>
 8006b20:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006b24:	6858      	ldr	r0, [r3, #4]
 8006b26:	e7ef      	b.n	8006b08 <ai_platform_inputs_get+0xcc>
 8006b28:	a1c00100 	.word	0xa1c00100

08006b2c <ai_platform_outputs_get>:
 8006b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b30:	4b38      	ldr	r3, [pc, #224]	@ (8006c14 <ai_platform_outputs_get+0xe8>)
 8006b32:	b085      	sub	sp, #20
 8006b34:	6802      	ldr	r2, [r0, #0]
 8006b36:	4393      	bics	r3, r2
 8006b38:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8006b3c:	d15f      	bne.n	8006bfe <ai_platform_outputs_get+0xd2>
 8006b3e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d94e      	bls.n	8006be2 <ai_platform_outputs_get+0xb6>
 8006b44:	f04f 0900 	mov.w	r9, #0
 8006b48:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8006b4c:	464d      	mov	r5, r9
 8006b4e:	e016      	b.n	8006b7e <ai_platform_outputs_get+0x52>
 8006b50:	9901      	ldr	r1, [sp, #4]
 8006b52:	2301      	movs	r3, #1
 8006b54:	f848 3001 	str.w	r3, [r8, r1]
 8006b58:	69b1      	ldr	r1, [r6, #24]
 8006b5a:	f04f 0301 	mov.w	r3, #1
 8006b5e:	684e      	ldr	r6, [r1, #4]
 8006b60:	3501      	adds	r5, #1
 8006b62:	f109 091c 	add.w	r9, r9, #28
 8006b66:	7523      	strb	r3, [r4, #20]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6961      	ldr	r1, [r4, #20]
 8006b6c:	6020      	str	r0, [r4, #0]
 8006b6e:	f36b 211f 	bfi	r1, fp, #8, #24
 8006b72:	e9c4 c701 	strd	ip, r7, [r4, #4]
 8006b76:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8006b7a:	e9c4 1205 	strd	r1, r2, [r4, #20]
 8006b7e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006b82:	b2ac      	uxth	r4, r5
 8006b84:	42ab      	cmp	r3, r5
 8006b86:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	d93b      	bls.n	8006c06 <ai_platform_outputs_get+0xda>
 8006b8e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d037      	beq.n	8006c06 <ai_platform_outputs_get+0xda>
 8006b96:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	d033      	beq.n	8006c06 <ai_platform_outputs_get+0xda>
 8006b9e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006ba2:	69b2      	ldr	r2, [r6, #24]
 8006ba4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006ba8:	6810      	ldr	r0, [r2, #0]
 8006baa:	68b3      	ldr	r3, [r6, #8]
 8006bac:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006bb0:	68f2      	ldr	r2, [r6, #12]
 8006bb2:	444c      	add	r4, r9
 8006bb4:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006bb8:	9200      	str	r2, [sp, #0]
 8006bba:	f002 f90f 	bl	8008ddc <ai_array_to_buffer_fmt>
 8006bbe:	69b1      	ldr	r1, [r6, #24]
 8006bc0:	9a00      	ldr	r2, [sp, #0]
 8006bc2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	d0c7      	beq.n	8006b5a <ai_platform_outputs_get+0x2e>
 8006bca:	2100      	movs	r1, #0
 8006bcc:	f848 1035 	str.w	r1, [r8, r5, lsl #3]
 8006bd0:	6831      	ldr	r1, [r6, #0]
 8006bd2:	6079      	str	r1, [r7, #4]
 8006bd4:	b111      	cbz	r1, 8006bdc <ai_platform_outputs_get+0xb0>
 8006bd6:	8849      	ldrh	r1, [r1, #2]
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	d1b9      	bne.n	8006b50 <ai_platform_outputs_get+0x24>
 8006bdc:	69b1      	ldr	r1, [r6, #24]
 8006bde:	2700      	movs	r7, #0
 8006be0:	e7bb      	b.n	8006b5a <ai_platform_outputs_get+0x2e>
 8006be2:	9803      	ldr	r0, [sp, #12]
 8006be4:	2400      	movs	r4, #0
 8006be6:	2218      	movs	r2, #24
 8006be8:	2111      	movs	r1, #17
 8006bea:	300c      	adds	r0, #12
 8006bec:	f000 fb94 	bl	8007318 <core_set_error>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	9b02      	ldr	r3, [sp, #8]
 8006bf4:	b103      	cbz	r3, 8006bf8 <ai_platform_outputs_get+0xcc>
 8006bf6:	801c      	strh	r4, [r3, #0]
 8006bf8:	b005      	add	sp, #20
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	2000      	movs	r0, #0
 8006c00:	b005      	add	sp, #20
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	2c00      	cmp	r4, #0
 8006c08:	d0eb      	beq.n	8006be2 <ai_platform_outputs_get+0xb6>
 8006c0a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006c0e:	6858      	ldr	r0, [r3, #4]
 8006c10:	e7ef      	b.n	8006bf2 <ai_platform_outputs_get+0xc6>
 8006c12:	bf00      	nop
 8006c14:	a1c00100 	.word	0xa1c00100

08006c18 <ai_platform_network_create>:
 8006c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8006c22:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8006c26:	b320      	cbz	r0, 8006c72 <ai_platform_network_create+0x5a>
 8006c28:	6002      	str	r2, [r0, #0]
 8006c2a:	4616      	mov	r6, r2
 8006c2c:	461f      	mov	r7, r3
 8006c2e:	4604      	mov	r4, r0
 8006c30:	f000 fb6a 	bl	8007308 <core_init>
 8006c34:	b970      	cbnz	r0, 8006c54 <ai_platform_network_create+0x3c>
 8006c36:	2530      	movs	r5, #48	@ 0x30
 8006c38:	2300      	movs	r3, #0
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	2410      	movs	r4, #16
 8006c3e:	464a      	mov	r2, r9
 8006c40:	4641      	mov	r1, r8
 8006c42:	4638      	mov	r0, r7
 8006c44:	f002 f974 	bl	8008f30 <ai_version_get>
 8006c48:	60b0      	str	r0, [r6, #8]
 8006c4a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006c4e:	b003      	add	sp, #12
 8006c50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c54:	2200      	movs	r2, #0
 8006c56:	4641      	mov	r1, r8
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f002 f969 	bl	8008f30 <ai_version_get>
 8006c5e:	4605      	mov	r5, r0
 8006c60:	2200      	movs	r2, #0
 8006c62:	2105      	movs	r1, #5
 8006c64:	2001      	movs	r0, #1
 8006c66:	f002 f963 	bl	8008f30 <ai_version_get>
 8006c6a:	4285      	cmp	r5, r0
 8006c6c:	d008      	beq.n	8006c80 <ai_platform_network_create+0x68>
 8006c6e:	2501      	movs	r5, #1
 8006c70:	e7e2      	b.n	8006c38 <ai_platform_network_create+0x20>
 8006c72:	2510      	movs	r5, #16
 8006c74:	462c      	mov	r4, r5
 8006c76:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006c7a:	b003      	add	sp, #12
 8006c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <ai_platform_network_create+0x80>)
 8006c82:	a801      	add	r0, sp, #4
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	f000 fb53 	bl	8007330 <ai_check_custom_types>
 8006c8a:	b110      	cbz	r0, 8006c92 <ai_platform_network_create+0x7a>
 8006c8c:	2400      	movs	r4, #0
 8006c8e:	4625      	mov	r5, r4
 8006c90:	e7d5      	b.n	8006c3e <ai_platform_network_create+0x26>
 8006c92:	2502      	movs	r5, #2
 8006c94:	e7d0      	b.n	8006c38 <ai_platform_network_create+0x20>
 8006c96:	bf00      	nop
 8006c98:	84048403 	.word	0x84048403

08006c9c <ai_platform_network_init>:
 8006c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca0:	4a5c      	ldr	r2, [pc, #368]	@ (8006e14 <ai_platform_network_init+0x178>)
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	6801      	ldr	r1, [r0, #0]
 8006ca6:	438a      	bics	r2, r1
 8006ca8:	d133      	bne.n	8006d12 <ai_platform_network_init+0x76>
 8006caa:	4605      	mov	r5, r0
 8006cac:	2c00      	cmp	r4, #0
 8006cae:	f000 8093 	beq.w	8006dd8 <ai_platform_network_init+0x13c>
 8006cb2:	f8d4 b000 	ldr.w	fp, [r4]
 8006cb6:	4a58      	ldr	r2, [pc, #352]	@ (8006e18 <ai_platform_network_init+0x17c>)
 8006cb8:	4593      	cmp	fp, r2
 8006cba:	d10f      	bne.n	8006cdc <ai_platform_network_init+0x40>
 8006cbc:	e9d4 e803 	ldrd	lr, r8, [r4, #12]
 8006cc0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8006cc4:	4b53      	ldr	r3, [pc, #332]	@ (8006e14 <ai_platform_network_init+0x178>)
 8006cc6:	ea4f 4a1e 	mov.w	sl, lr, lsr #16
 8006cca:	0c32      	lsrs	r2, r6, #16
 8006ccc:	4299      	cmp	r1, r3
 8006cce:	d02c      	beq.n	8006d2a <ai_platform_network_init+0x8e>
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	462c      	mov	r4, r5
 8006cd4:	612b      	str	r3, [r5, #16]
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	4627      	mov	r7, r4
 8006cde:	2101      	movs	r1, #1
 8006ce0:	6864      	ldr	r4, [r4, #4]
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f107 081c 	add.w	r8, r7, #28
 8006ce8:	f7ff fd7e 	bl	80067e8 <ai_buffer_get_size>
 8006cec:	4606      	mov	r6, r0
 8006cee:	2101      	movs	r1, #1
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8006cf6:	f7ff fd77 	bl	80067e8 <ai_buffer_get_size>
 8006cfa:	b976      	cbnz	r6, 8006d1a <ai_platform_network_init+0x7e>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d150      	bne.n	8006da2 <ai_platform_network_init+0x106>
 8006d00:	4680      	mov	r8, r0
 8006d02:	4686      	mov	lr, r0
 8006d04:	4606      	mov	r6, r0
 8006d06:	4607      	mov	r7, r0
 8006d08:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8006d0c:	6829      	ldr	r1, [r5, #0]
 8006d0e:	0436      	lsls	r6, r6, #16
 8006d10:	e7d8      	b.n	8006cc4 <ai_platform_network_init+0x28>
 8006d12:	2400      	movs	r4, #0
 8006d14:	4620      	mov	r0, r4
 8006d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	d13b      	bne.n	8006d96 <ai_platform_network_init+0xfa>
 8006d1e:	4680      	mov	r8, r0
 8006d20:	4686      	mov	lr, r0
 8006d22:	2c00      	cmp	r4, #0
 8006d24:	d05e      	beq.n	8006de4 <ai_platform_network_init+0x148>
 8006d26:	2601      	movs	r6, #1
 8006d28:	e7ee      	b.n	8006d08 <ai_platform_network_init+0x6c>
 8006d2a:	8c6b      	ldrh	r3, [r5, #34]	@ 0x22
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e18 <ai_platform_network_init+0x17c>)
 8006d30:	d33e      	bcc.n	8006db0 <ai_platform_network_init+0x114>
 8006d32:	459b      	cmp	fp, r3
 8006d34:	d03e      	beq.n	8006db4 <ai_platform_network_init+0x118>
 8006d36:	b1a2      	cbz	r2, 8006d62 <ai_platform_network_init+0xc6>
 8006d38:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8006d3c:	f04f 0c00 	mov.w	ip, #0
 8006d40:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006d44:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8006d46:	eb07 0b0c 	add.w	fp, r7, ip
 8006d4a:	4464      	add	r4, ip
 8006d4c:	f10c 0c1c 	add.w	ip, ip, #28
 8006d50:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8006d54:	45cc      	cmp	ip, r9
 8006d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d58:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
 8006d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d60:	d1f0      	bne.n	8006d44 <ai_platform_network_init+0xa8>
 8006d62:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 8006d64:	622e      	str	r6, [r5, #32]
 8006d66:	4553      	cmp	r3, sl
 8006d68:	d34b      	bcc.n	8006e02 <ai_platform_network_init+0x166>
 8006d6a:	f1ba 0f00 	cmp.w	sl, #0
 8006d6e:	d025      	beq.n	8006dbc <ai_platform_network_init+0x120>
 8006d70:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 8006d74:	2700      	movs	r7, #0
 8006d76:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8006d7a:	6aec      	ldr	r4, [r5, #44]	@ 0x2c
 8006d7c:	eb08 0607 	add.w	r6, r8, r7
 8006d80:	443c      	add	r4, r7
 8006d82:	371c      	adds	r7, #28
 8006d84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006d86:	4557      	cmp	r7, sl
 8006d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d8a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d92:	d1f2      	bne.n	8006d7a <ai_platform_network_init+0xde>
 8006d94:	e012      	b.n	8006dbc <ai_platform_network_init+0x120>
 8006d96:	f1b9 0f00 	cmp.w	r9, #0
 8006d9a:	d015      	beq.n	8006dc8 <ai_platform_network_init+0x12c>
 8006d9c:	f04f 0e01 	mov.w	lr, #1
 8006da0:	e7bf      	b.n	8006d22 <ai_platform_network_init+0x86>
 8006da2:	f1b9 0f00 	cmp.w	r9, #0
 8006da6:	d00f      	beq.n	8006dc8 <ai_platform_network_init+0x12c>
 8006da8:	f04f 0e01 	mov.w	lr, #1
 8006dac:	4637      	mov	r7, r6
 8006dae:	e7ab      	b.n	8006d08 <ai_platform_network_init+0x6c>
 8006db0:	459b      	cmp	fp, r3
 8006db2:	d11e      	bne.n	8006df2 <ai_platform_network_init+0x156>
 8006db4:	f8c5 802c 	str.w	r8, [r5, #44]	@ 0x2c
 8006db8:	e9c5 6708 	strd	r6, r7, [r5, #32]
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f8c5 e028 	str.w	lr, [r5, #40]	@ 0x28
 8006dc2:	f000 fadd 	bl	8007380 <ai_layers_init_all>
 8006dc6:	e783      	b.n	8006cd0 <ai_platform_network_init+0x34>
 8006dc8:	2213      	movs	r2, #19
 8006dca:	2110      	movs	r1, #16
 8006dcc:	f105 000c 	add.w	r0, r5, #12
 8006dd0:	2400      	movs	r4, #0
 8006dd2:	f000 faa1 	bl	8007318 <core_set_error>
 8006dd6:	e77e      	b.n	8006cd6 <ai_platform_network_init+0x3a>
 8006dd8:	2211      	movs	r2, #17
 8006dda:	2110      	movs	r1, #16
 8006ddc:	300c      	adds	r0, #12
 8006dde:	f000 fa9b 	bl	8007318 <core_set_error>
 8006de2:	e778      	b.n	8006cd6 <ai_platform_network_init+0x3a>
 8006de4:	2212      	movs	r2, #18
 8006de6:	2110      	movs	r1, #16
 8006de8:	f105 000c 	add.w	r0, r5, #12
 8006dec:	f000 fa94 	bl	8007318 <core_set_error>
 8006df0:	e771      	b.n	8006cd6 <ai_platform_network_init+0x3a>
 8006df2:	2212      	movs	r2, #18
 8006df4:	2116      	movs	r1, #22
 8006df6:	f105 000c 	add.w	r0, r5, #12
 8006dfa:	2400      	movs	r4, #0
 8006dfc:	f000 fa8c 	bl	8007318 <core_set_error>
 8006e00:	e769      	b.n	8006cd6 <ai_platform_network_init+0x3a>
 8006e02:	2213      	movs	r2, #19
 8006e04:	2116      	movs	r1, #22
 8006e06:	f105 000c 	add.w	r0, r5, #12
 8006e0a:	2400      	movs	r4, #0
 8006e0c:	f000 fa84 	bl	8007318 <core_set_error>
 8006e10:	e761      	b.n	8006cd6 <ai_platform_network_init+0x3a>
 8006e12:	bf00      	nop
 8006e14:	a1c00100 	.word	0xa1c00100
 8006e18:	a1facade 	.word	0xa1facade

08006e1c <ai_platform_network_post_init>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4b16      	ldr	r3, [pc, #88]	@ (8006e78 <ai_platform_network_post_init+0x5c>)
 8006e20:	6802      	ldr	r2, [r0, #0]
 8006e22:	ea02 0103 	and.w	r1, r2, r3
 8006e26:	4393      	bics	r3, r2
 8006e28:	d108      	bne.n	8006e3c <ai_platform_network_post_init+0x20>
 8006e2a:	6903      	ldr	r3, [r0, #16]
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	f013 0502 	ands.w	r5, r3, #2
 8006e32:	d005      	beq.n	8006e40 <ai_platform_network_post_init+0x24>
 8006e34:	428a      	cmp	r2, r1
 8006e36:	d00a      	beq.n	8006e4e <ai_platform_network_post_init+0x32>
 8006e38:	2001      	movs	r0, #1
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	2210      	movs	r2, #16
 8006e42:	2111      	movs	r1, #17
 8006e44:	300c      	adds	r0, #12
 8006e46:	f000 fa67 	bl	8007318 <core_set_error>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	bd38      	pop	{r3, r4, r5, pc}
 8006e4e:	f000 faa5 	bl	800739c <ai_layers_post_init_all>
 8006e52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ef      	beq.n	8006e38 <ai_platform_network_post_init+0x1c>
 8006e58:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006e5a:	e008      	b.n	8006e6e <ai_platform_network_post_init+0x52>
 8006e5c:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8006e60:	4798      	blx	r3
 8006e62:	692b      	ldr	r3, [r5, #16]
 8006e64:	42ab      	cmp	r3, r5
 8006e66:	461d      	mov	r5, r3
 8006e68:	d0e6      	beq.n	8006e38 <ai_platform_network_post_init+0x1c>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0e4      	beq.n	8006e38 <ai_platform_network_post_init+0x1c>
 8006e6e:	4629      	mov	r1, r5
 8006e70:	2000      	movs	r0, #0
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	d1f2      	bne.n	8006e5c <ai_platform_network_post_init+0x40>
 8006e76:	e7df      	b.n	8006e38 <ai_platform_network_post_init+0x1c>
 8006e78:	a1c00100 	.word	0xa1c00100

08006e7c <ai_platform_network_process>:
 8006e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	b085      	sub	sp, #20
 8006e82:	4bb7      	ldr	r3, [pc, #732]	@ (8007160 <ai_platform_network_process+0x2e4>)
 8006e84:	9202      	str	r2, [sp, #8]
 8006e86:	6802      	ldr	r2, [r0, #0]
 8006e88:	4393      	bics	r3, r2
 8006e8a:	f040 8142 	bne.w	8007112 <ai_platform_network_process+0x296>
 8006e8e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8006e90:	4605      	mov	r5, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8126 	beq.w	80070e4 <ai_platform_network_process+0x268>
 8006e98:	6903      	ldr	r3, [r0, #16]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8d0 8034 	ldr.w	r8, [r0, #52]	@ 0x34
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	6182      	str	r2, [r0, #24]
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	f040 8122 	bne.w	80070f0 <ai_platform_network_process+0x274>
 8006eac:	2900      	cmp	r1, #0
 8006eae:	f000 8136 	beq.w	800711e <ai_platform_network_process+0x2a2>
 8006eb2:	fab8 f788 	clz	r7, r8
 8006eb6:	097f      	lsrs	r7, r7, #5
 8006eb8:	f1b8 0f00 	cmp.w	r8, #0
 8006ebc:	f000 812f 	beq.w	800711e <ai_platform_network_process+0x2a2>
 8006ec0:	f8b8 3000 	ldrh.w	r3, [r8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 812a 	beq.w	800711e <ai_platform_network_process+0x2a2>
 8006eca:	698b      	ldr	r3, [r1, #24]
 8006ecc:	460e      	mov	r6, r1
 8006ece:	9003      	str	r0, [sp, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d072      	beq.n	8006fc2 <ai_platform_network_process+0x146>
 8006edc:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006ee0:	2c00      	cmp	r4, #0
 8006ee2:	d06e      	beq.n	8006fc2 <ai_platform_network_process+0x146>
 8006ee4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ee8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006eec:	f8d3 a000 	ldr.w	sl, [r3]
 8006ef0:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006ef4:	f000 8112 	beq.w	800711c <ai_platform_network_process+0x2a0>
 8006ef8:	69a3      	ldr	r3, [r4, #24]
 8006efa:	2101      	movs	r1, #1
 8006efc:	4630      	mov	r0, r6
 8006efe:	685d      	ldr	r5, [r3, #4]
 8006f00:	f7ff fc72 	bl	80067e8 <ai_buffer_get_size>
 8006f04:	4285      	cmp	r5, r0
 8006f06:	f0c0 8115 	bcc.w	8007134 <ai_platform_network_process+0x2b8>
 8006f0a:	68e0      	ldr	r0, [r4, #12]
 8006f0c:	69b1      	ldr	r1, [r6, #24]
 8006f0e:	68c2      	ldr	r2, [r0, #12]
 8006f10:	68cb      	ldr	r3, [r1, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	f040 810e 	bne.w	8007134 <ai_platform_network_process+0x2b8>
 8006f18:	6882      	ldr	r2, [r0, #8]
 8006f1a:	688b      	ldr	r3, [r1, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	f040 8109 	bne.w	8007134 <ai_platform_network_process+0x2b8>
 8006f22:	6842      	ldr	r2, [r0, #4]
 8006f24:	684b      	ldr	r3, [r1, #4]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	f040 8104 	bne.w	8007134 <ai_platform_network_process+0x2b8>
 8006f2c:	69a3      	ldr	r3, [r4, #24]
 8006f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f32:	f001 ffeb 	bl	8008f0c <ai_array_get_data_byte_size>
 8006f36:	4605      	mov	r5, r0
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f001 ffff 	bl	8008f3c <get_tensor_byte_size>
 8006f3e:	4285      	cmp	r5, r0
 8006f40:	f0c0 80f8 	bcc.w	8007134 <ai_platform_network_process+0x2b8>
 8006f44:	69a3      	ldr	r3, [r4, #24]
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	f001 ff48 	bl	8008ddc <ai_array_to_buffer_fmt>
 8006f4c:	6833      	ldr	r3, [r6, #0]
 8006f4e:	4058      	eors	r0, r3
 8006f50:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8006f54:	f040 81a4 	bne.w	80072a0 <ai_platform_network_process+0x424>
 8006f58:	6873      	ldr	r3, [r6, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 80de 	beq.w	800711c <ai_platform_network_process+0x2a0>
 8006f60:	69b3      	ldr	r3, [r6, #24]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f000 81a4 	beq.w	80072b2 <ai_platform_network_process+0x436>
 8006f6a:	9a01      	ldr	r2, [sp, #4]
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	3701      	adds	r7, #1
 8006f70:	361c      	adds	r6, #28
 8006f72:	429a      	cmp	r2, r3
 8006f74:	bf38      	it	cc
 8006f76:	461a      	movcc	r2, r3
 8006f78:	9201      	str	r2, [sp, #4]
 8006f7a:	f001 ffdf 	bl	8008f3c <get_tensor_byte_size>
 8006f7e:	f8c9 0008 	str.w	r0, [r9, #8]
 8006f82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	fb00 f303 	mul.w	r3, r0, r3
 8006f8c:	f8c9 300c 	str.w	r3, [r9, #12]
 8006f90:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006f94:	440b      	add	r3, r1
 8006f96:	f8c9 1004 	str.w	r1, [r9, #4]
 8006f9a:	f84a 300b 	str.w	r3, [sl, fp]
 8006f9e:	69a0      	ldr	r0, [r4, #24]
 8006fa0:	6803      	ldr	r3, [r0, #0]
 8006fa2:	009a      	lsls	r2, r3, #2
 8006fa4:	f100 80af 	bmi.w	8007106 <ai_platform_network_process+0x28a>
 8006fa8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	4419      	add	r1, r3
 8006fb0:	6081      	str	r1, [r0, #8]
 8006fb2:	69a3      	ldr	r3, [r4, #24]
 8006fb4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	f8b8 3000 	ldrh.w	r3, [r8]
 8006fbe:	42bb      	cmp	r3, r7
 8006fc0:	d888      	bhi.n	8006ed4 <ai_platform_network_process+0x58>
 8006fc2:	9d03      	ldr	r5, [sp, #12]
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 817b 	beq.w	80072c4 <ai_platform_network_process+0x448>
 8006fce:	2a01      	cmp	r2, #1
 8006fd0:	f240 80bd 	bls.w	800714e <ai_platform_network_process+0x2d2>
 8006fd4:	f8d5 9034 	ldr.w	r9, [r5, #52]	@ 0x34
 8006fd8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f000 80b6 	beq.w	800714e <ai_platform_network_process+0x2d2>
 8006fe2:	2700      	movs	r7, #0
 8006fe4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006fe8:	9502      	str	r5, [sp, #8]
 8006fea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 80bd 	beq.w	800716e <ai_platform_network_process+0x2f2>
 8006ff4:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8006ff8:	2e00      	cmp	r6, #0
 8006ffa:	f000 80b8 	beq.w	800716e <ai_platform_network_process+0x2f2>
 8006ffe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007002:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8007006:	681c      	ldr	r4, [r3, #0]
 8007008:	eb14 1807 	adds.w	r8, r4, r7, lsl #4
 800700c:	f000 8170 	beq.w	80072f0 <ai_platform_network_process+0x474>
 8007010:	69b3      	ldr	r3, [r6, #24]
 8007012:	2101      	movs	r1, #1
 8007014:	4658      	mov	r0, fp
 8007016:	685d      	ldr	r5, [r3, #4]
 8007018:	f7ff fbe6 	bl	80067e8 <ai_buffer_get_size>
 800701c:	4285      	cmp	r5, r0
 800701e:	f0c0 8095 	bcc.w	800714c <ai_platform_network_process+0x2d0>
 8007022:	68f0      	ldr	r0, [r6, #12]
 8007024:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007028:	68c2      	ldr	r2, [r0, #12]
 800702a:	68cb      	ldr	r3, [r1, #12]
 800702c:	429a      	cmp	r2, r3
 800702e:	f040 808d 	bne.w	800714c <ai_platform_network_process+0x2d0>
 8007032:	6882      	ldr	r2, [r0, #8]
 8007034:	688b      	ldr	r3, [r1, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	f040 8088 	bne.w	800714c <ai_platform_network_process+0x2d0>
 800703c:	6842      	ldr	r2, [r0, #4]
 800703e:	684b      	ldr	r3, [r1, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	f040 8083 	bne.w	800714c <ai_platform_network_process+0x2d0>
 8007046:	69b3      	ldr	r3, [r6, #24]
 8007048:	e9d3 0100 	ldrd	r0, r1, [r3]
 800704c:	f001 ff5e 	bl	8008f0c <ai_array_get_data_byte_size>
 8007050:	9003      	str	r0, [sp, #12]
 8007052:	4630      	mov	r0, r6
 8007054:	f001 ff72 	bl	8008f3c <get_tensor_byte_size>
 8007058:	9b03      	ldr	r3, [sp, #12]
 800705a:	4283      	cmp	r3, r0
 800705c:	d376      	bcc.n	800714c <ai_platform_network_process+0x2d0>
 800705e:	69b3      	ldr	r3, [r6, #24]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	f001 febb 	bl	8008ddc <ai_array_to_buffer_fmt>
 8007066:	f8db 3000 	ldr.w	r3, [fp]
 800706a:	4058      	eors	r0, r3
 800706c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007070:	f040 812c 	bne.w	80072cc <ai_platform_network_process+0x450>
 8007074:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8139 	beq.w	80072f0 <ai_platform_network_process+0x474>
 800707e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 812a 	beq.w	80072de <ai_platform_network_process+0x462>
 800708a:	9a01      	ldr	r2, [sp, #4]
 800708c:	4630      	mov	r0, r6
 800708e:	3701      	adds	r7, #1
 8007090:	f10b 0b1c 	add.w	fp, fp, #28
 8007094:	429a      	cmp	r2, r3
 8007096:	bf38      	it	cc
 8007098:	461a      	movcc	r2, r3
 800709a:	9201      	str	r2, [sp, #4]
 800709c:	f001 ff4e 	bl	8008f3c <get_tensor_byte_size>
 80070a0:	f8c8 0008 	str.w	r0, [r8, #8]
 80070a4:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	fb00 f303 	mul.w	r3, r0, r3
 80070ae:	f8c8 300c 	str.w	r3, [r8, #12]
 80070b2:	f85b 1c18 	ldr.w	r1, [fp, #-24]
 80070b6:	440b      	add	r3, r1
 80070b8:	f8c8 1004 	str.w	r1, [r8, #4]
 80070bc:	f844 300a 	str.w	r3, [r4, sl]
 80070c0:	69b0      	ldr	r0, [r6, #24]
 80070c2:	6803      	ldr	r3, [r0, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	d44d      	bmi.n	8007164 <ai_platform_network_process+0x2e8>
 80070c8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80070cc:	1a9b      	subs	r3, r3, r2
 80070ce:	4419      	add	r1, r3
 80070d0:	6081      	str	r1, [r0, #8]
 80070d2:	69b3      	ldr	r3, [r6, #24]
 80070d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80070de:	42bb      	cmp	r3, r7
 80070e0:	d883      	bhi.n	8006fea <ai_platform_network_process+0x16e>
 80070e2:	e044      	b.n	800716e <ai_platform_network_process+0x2f2>
 80070e4:	6902      	ldr	r2, [r0, #16]
 80070e6:	6183      	str	r3, [r0, #24]
 80070e8:	f002 0203 	and.w	r2, r2, #3
 80070ec:	2a03      	cmp	r2, #3
 80070ee:	d016      	beq.n	800711e <ai_platform_network_process+0x2a2>
 80070f0:	2230      	movs	r2, #48	@ 0x30
 80070f2:	2111      	movs	r1, #17
 80070f4:	f105 000c 	add.w	r0, r5, #12
 80070f8:	2400      	movs	r4, #0
 80070fa:	f000 f90d 	bl	8007318 <core_set_error>
 80070fe:	4620      	mov	r0, r4
 8007100:	b005      	add	sp, #20
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	f8b8 3000 	ldrh.w	r3, [r8]
 800710a:	429f      	cmp	r7, r3
 800710c:	f4ff aee2 	bcc.w	8006ed4 <ai_platform_network_process+0x58>
 8007110:	e757      	b.n	8006fc2 <ai_platform_network_process+0x146>
 8007112:	2400      	movs	r4, #0
 8007114:	4620      	mov	r0, r4
 8007116:	b005      	add	sp, #20
 8007118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800711c:	9d03      	ldr	r5, [sp, #12]
 800711e:	2400      	movs	r4, #0
 8007120:	2217      	movs	r2, #23
 8007122:	2112      	movs	r1, #18
 8007124:	f105 000c 	add.w	r0, r5, #12
 8007128:	f000 f8f6 	bl	8007318 <core_set_error>
 800712c:	4620      	mov	r0, r4
 800712e:	b005      	add	sp, #20
 8007130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007134:	9d03      	ldr	r5, [sp, #12]
 8007136:	2400      	movs	r4, #0
 8007138:	2218      	movs	r2, #24
 800713a:	2112      	movs	r1, #18
 800713c:	f105 000c 	add.w	r0, r5, #12
 8007140:	f000 f8ea 	bl	8007318 <core_set_error>
 8007144:	4620      	mov	r0, r4
 8007146:	b005      	add	sp, #20
 8007148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714c:	9d02      	ldr	r5, [sp, #8]
 800714e:	2218      	movs	r2, #24
 8007150:	2113      	movs	r1, #19
 8007152:	f105 000c 	add.w	r0, r5, #12
 8007156:	2400      	movs	r4, #0
 8007158:	f000 f8de 	bl	8007318 <core_set_error>
 800715c:	e7cf      	b.n	80070fe <ai_platform_network_process+0x282>
 800715e:	bf00      	nop
 8007160:	a1c00100 	.word	0xa1c00100
 8007164:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007168:	429f      	cmp	r7, r3
 800716a:	f4ff af3e 	bcc.w	8006fea <ai_platform_network_process+0x16e>
 800716e:	9d02      	ldr	r5, [sp, #8]
 8007170:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007174:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8007176:	832b      	strh	r3, [r5, #24]
 8007178:	2a00      	cmp	r2, #0
 800717a:	f040 808b 	bne.w	8007294 <ai_platform_network_process+0x418>
 800717e:	4616      	mov	r6, r2
 8007180:	4617      	mov	r7, r2
 8007182:	8b6c      	ldrh	r4, [r5, #26]
 8007184:	429c      	cmp	r4, r3
 8007186:	d2ba      	bcs.n	80070fe <ai_platform_network_process+0x282>
 8007188:	46ab      	mov	fp, r5
 800718a:	2e00      	cmp	r6, #0
 800718c:	d030      	beq.n	80071f0 <ai_platform_network_process+0x374>
 800718e:	f04f 0800 	mov.w	r8, #0
 8007192:	e014      	b.n	80071be <ai_platform_network_process+0x342>
 8007194:	6882      	ldr	r2, [r0, #8]
 8007196:	68c5      	ldr	r5, [r0, #12]
 8007198:	6863      	ldr	r3, [r4, #4]
 800719a:	1b52      	subs	r2, r2, r5
 800719c:	4413      	add	r3, r2
 800719e:	6083      	str	r3, [r0, #8]
 80071a0:	698b      	ldr	r3, [r1, #24]
 80071a2:	6862      	ldr	r2, [r4, #4]
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	f859 200a 	ldr.w	r2, [r9, sl]
 80071aa:	f108 0801 	add.w	r8, r8, #1
 80071ae:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80071b2:	440b      	add	r3, r1
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d301      	bcc.n	80071bc <ai_platform_network_process+0x340>
 80071b8:	68e3      	ldr	r3, [r4, #12]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	6063      	str	r3, [r4, #4]
 80071be:	8833      	ldrh	r3, [r6, #0]
 80071c0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80071c4:	4543      	cmp	r3, r8
 80071c6:	d913      	bls.n	80071f0 <ai_platform_network_process+0x374>
 80071c8:	6873      	ldr	r3, [r6, #4]
 80071ca:	b18b      	cbz	r3, 80071f0 <ai_platform_network_process+0x374>
 80071cc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80071d0:	b171      	cbz	r1, 80071f0 <ai_platform_network_process+0x374>
 80071d2:	6988      	ldr	r0, [r1, #24]
 80071d4:	68b2      	ldr	r2, [r6, #8]
 80071d6:	6803      	ldr	r3, [r0, #0]
 80071d8:	f8d2 9000 	ldr.w	r9, [r2]
 80071dc:	009d      	lsls	r5, r3, #2
 80071de:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80071e2:	d5d7      	bpl.n	8007194 <ai_platform_network_process+0x318>
 80071e4:	6881      	ldr	r1, [r0, #8]
 80071e6:	68a2      	ldr	r2, [r4, #8]
 80071e8:	6860      	ldr	r0, [r4, #4]
 80071ea:	f001 fd6f 	bl	8008ccc <st_int8_copy>
 80071ee:	e7da      	b.n	80071a6 <ai_platform_network_process+0x32a>
 80071f0:	4658      	mov	r0, fp
 80071f2:	f000 f8e7 	bl	80073c4 <ai_layers_forward_all>
 80071f6:	2f00      	cmp	r7, #0
 80071f8:	d03d      	beq.n	8007276 <ai_platform_network_process+0x3fa>
 80071fa:	2400      	movs	r4, #0
 80071fc:	e016      	b.n	800722c <ai_platform_network_process+0x3b0>
 80071fe:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007202:	f859 100a 	ldr.w	r1, [r9, sl]
 8007206:	4413      	add	r3, r2
 8007208:	428b      	cmp	r3, r1
 800720a:	d302      	bcc.n	8007212 <ai_platform_network_process+0x396>
 800720c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007210:	1acb      	subs	r3, r1, r3
 8007212:	f8c8 3004 	str.w	r3, [r8, #4]
 8007216:	6981      	ldr	r1, [r0, #24]
 8007218:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800721c:	1b52      	subs	r2, r2, r5
 800721e:	4413      	add	r3, r2
 8007220:	608b      	str	r3, [r1, #8]
 8007222:	6983      	ldr	r3, [r0, #24]
 8007224:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007228:	60da      	str	r2, [r3, #12]
 800722a:	3401      	adds	r4, #1
 800722c:	883b      	ldrh	r3, [r7, #0]
 800722e:	42a3      	cmp	r3, r4
 8007230:	d921      	bls.n	8007276 <ai_platform_network_process+0x3fa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	b1fb      	cbz	r3, 8007276 <ai_platform_network_process+0x3fa>
 8007236:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800723a:	b1e0      	cbz	r0, 8007276 <ai_platform_network_process+0x3fa>
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007242:	6983      	ldr	r3, [r0, #24]
 8007244:	f8d2 9000 	ldr.w	r9, [r2]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800724e:	0092      	lsls	r2, r2, #2
 8007250:	d5d5      	bpl.n	80071fe <ai_platform_network_process+0x382>
 8007252:	6898      	ldr	r0, [r3, #8]
 8007254:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007258:	f001 fd38 	bl	8008ccc <st_int8_copy>
 800725c:	f859 200a 	ldr.w	r2, [r9, sl]
 8007260:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007264:	440b      	add	r3, r1
 8007266:	4293      	cmp	r3, r2
 8007268:	d302      	bcc.n	8007270 <ai_platform_network_process+0x3f4>
 800726a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f8c8 3004 	str.w	r3, [r8, #4]
 8007274:	e7d9      	b.n	800722a <ai_platform_network_process+0x3ae>
 8007276:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 800727a:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 800727e:	3401      	adds	r4, #1
 8007280:	b2a4      	uxth	r4, r4
 8007282:	42a3      	cmp	r3, r4
 8007284:	f8ab 401a 	strh.w	r4, [fp, #26]
 8007288:	f63f af7f 	bhi.w	800718a <ai_platform_network_process+0x30e>
 800728c:	4620      	mov	r0, r4
 800728e:	b005      	add	sp, #20
 8007290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007294:	2a01      	cmp	r2, #1
 8007296:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8007298:	d033      	beq.n	8007302 <ai_platform_network_process+0x486>
 800729a:	f106 070c 	add.w	r7, r6, #12
 800729e:	e770      	b.n	8007182 <ai_platform_network_process+0x306>
 80072a0:	9d03      	ldr	r5, [sp, #12]
 80072a2:	2219      	movs	r2, #25
 80072a4:	2112      	movs	r1, #18
 80072a6:	2400      	movs	r4, #0
 80072a8:	f105 000c 	add.w	r0, r5, #12
 80072ac:	f000 f834 	bl	8007318 <core_set_error>
 80072b0:	e725      	b.n	80070fe <ai_platform_network_process+0x282>
 80072b2:	9d03      	ldr	r5, [sp, #12]
 80072b4:	4604      	mov	r4, r0
 80072b6:	2221      	movs	r2, #33	@ 0x21
 80072b8:	2112      	movs	r1, #18
 80072ba:	f105 000c 	add.w	r0, r5, #12
 80072be:	f000 f82b 	bl	8007318 <core_set_error>
 80072c2:	e71c      	b.n	80070fe <ai_platform_network_process+0x282>
 80072c4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80072c8:	832b      	strh	r3, [r5, #24]
 80072ca:	e755      	b.n	8007178 <ai_platform_network_process+0x2fc>
 80072cc:	9d02      	ldr	r5, [sp, #8]
 80072ce:	2219      	movs	r2, #25
 80072d0:	2113      	movs	r1, #19
 80072d2:	2400      	movs	r4, #0
 80072d4:	f105 000c 	add.w	r0, r5, #12
 80072d8:	f000 f81e 	bl	8007318 <core_set_error>
 80072dc:	e70f      	b.n	80070fe <ai_platform_network_process+0x282>
 80072de:	9d02      	ldr	r5, [sp, #8]
 80072e0:	4604      	mov	r4, r0
 80072e2:	2221      	movs	r2, #33	@ 0x21
 80072e4:	2113      	movs	r1, #19
 80072e6:	f105 000c 	add.w	r0, r5, #12
 80072ea:	f000 f815 	bl	8007318 <core_set_error>
 80072ee:	e706      	b.n	80070fe <ai_platform_network_process+0x282>
 80072f0:	9d02      	ldr	r5, [sp, #8]
 80072f2:	2217      	movs	r2, #23
 80072f4:	2113      	movs	r1, #19
 80072f6:	2400      	movs	r4, #0
 80072f8:	f105 000c 	add.w	r0, r5, #12
 80072fc:	f000 f80c 	bl	8007318 <core_set_error>
 8007300:	e6fd      	b.n	80070fe <ai_platform_network_process+0x282>
 8007302:	2700      	movs	r7, #0
 8007304:	e73d      	b.n	8007182 <ai_platform_network_process+0x306>
 8007306:	bf00      	nop

08007308 <core_init>:
 8007308:	2001      	movs	r0, #1
 800730a:	4770      	bx	lr

0800730c <core_get_error>:
 800730c:	4603      	mov	r3, r0
 800730e:	2200      	movs	r2, #0
 8007310:	6800      	ldr	r0, [r0, #0]
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop

08007318 <core_set_error>:
 8007318:	4603      	mov	r3, r0
 800731a:	7800      	ldrb	r0, [r0, #0]
 800731c:	b108      	cbz	r0, 8007322 <core_set_error+0xa>
 800731e:	2000      	movs	r0, #0
 8007320:	4770      	bx	lr
 8007322:	7019      	strb	r1, [r3, #0]
 8007324:	2001      	movs	r0, #1
 8007326:	6819      	ldr	r1, [r3, #0]
 8007328:	f362 211f 	bfi	r1, r2, #8, #24
 800732c:	6019      	str	r1, [r3, #0]
 800732e:	4770      	bx	lr

08007330 <ai_check_custom_types>:
 8007330:	b082      	sub	sp, #8
 8007332:	4b12      	ldr	r3, [pc, #72]	@ (800737c <ai_check_custom_types+0x4c>)
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	b118      	cbz	r0, 8007340 <ai_check_custom_types+0x10>
 8007338:	7803      	ldrb	r3, [r0, #0]
 800733a:	2b03      	cmp	r3, #3
 800733c:	d002      	beq.n	8007344 <ai_check_custom_types+0x14>
 800733e:	2000      	movs	r0, #0
 8007340:	b002      	add	sp, #8
 8007342:	4770      	bx	lr
 8007344:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007348:	4293      	cmp	r3, r2
 800734a:	d004      	beq.n	8007356 <ai_check_custom_types+0x26>
 800734c:	2001      	movs	r0, #1
 800734e:	f080 0001 	eor.w	r0, r0, #1
 8007352:	b002      	add	sp, #8
 8007354:	4770      	bx	lr
 8007356:	7842      	ldrb	r2, [r0, #1]
 8007358:	3001      	adds	r0, #1
 800735a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800735e:	429a      	cmp	r2, r3
 8007360:	d1f4      	bne.n	800734c <ai_check_custom_types+0x1c>
 8007362:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007366:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800736a:	429a      	cmp	r2, r3
 800736c:	d1ee      	bne.n	800734c <ai_check_custom_types+0x1c>
 800736e:	7842      	ldrb	r2, [r0, #1]
 8007370:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007374:	429a      	cmp	r2, r3
 8007376:	d1e9      	bne.n	800734c <ai_check_custom_types+0x1c>
 8007378:	2000      	movs	r0, #0
 800737a:	e7e8      	b.n	800734e <ai_check_custom_types+0x1e>
 800737c:	84048403 	.word	0x84048403

08007380 <ai_layers_init_all>:
 8007380:	2100      	movs	r1, #0
 8007382:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007384:	b13b      	cbz	r3, 8007396 <ai_layers_init_all+0x16>
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	3101      	adds	r1, #1
 800738a:	60d8      	str	r0, [r3, #12]
 800738c:	429a      	cmp	r2, r3
 800738e:	4613      	mov	r3, r2
 8007390:	d001      	beq.n	8007396 <ai_layers_init_all+0x16>
 8007392:	2a00      	cmp	r2, #0
 8007394:	d1f6      	bne.n	8007384 <ai_layers_init_all+0x4>
 8007396:	4608      	mov	r0, r1
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop

0800739c <ai_layers_post_init_all>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	2500      	movs	r5, #0
 80073a0:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80073a2:	b16c      	cbz	r4, 80073c0 <ai_layers_post_init_all+0x24>
 80073a4:	6863      	ldr	r3, [r4, #4]
 80073a6:	07db      	lsls	r3, r3, #31
 80073a8:	d504      	bpl.n	80073b4 <ai_layers_post_init_all+0x18>
 80073aa:	6a23      	ldr	r3, [r4, #32]
 80073ac:	4620      	mov	r0, r4
 80073ae:	b10b      	cbz	r3, 80073b4 <ai_layers_post_init_all+0x18>
 80073b0:	3501      	adds	r5, #1
 80073b2:	4798      	blx	r3
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	42a3      	cmp	r3, r4
 80073b8:	461c      	mov	r4, r3
 80073ba:	d001      	beq.n	80073c0 <ai_layers_post_init_all+0x24>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1f0      	bne.n	80073a2 <ai_layers_post_init_all+0x6>
 80073c0:	4628      	mov	r0, r5
 80073c2:	bd38      	pop	{r3, r4, r5, pc}

080073c4 <ai_layers_forward_all>:
 80073c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073c8:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80073cc:	4604      	mov	r4, r0
 80073ce:	f1b8 0f00 	cmp.w	r8, #0
 80073d2:	d02a      	beq.n	800742a <ai_layers_forward_all+0x66>
 80073d4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80073d6:	63c1      	str	r1, [r0, #60]	@ 0x3c
 80073d8:	b319      	cbz	r1, 8007422 <ai_layers_forward_all+0x5e>
 80073da:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80073dc:	2001      	movs	r0, #1
 80073de:	47c0      	blx	r8
 80073e0:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80073e2:	b1f6      	cbz	r6, 8007422 <ai_layers_forward_all+0x5e>
 80073e4:	2700      	movs	r7, #0
 80073e6:	4631      	mov	r1, r6
 80073e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80073ea:	2002      	movs	r0, #2
 80073ec:	47c0      	blx	r8
 80073ee:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80073f0:	4628      	mov	r0, r5
 80073f2:	696b      	ldr	r3, [r5, #20]
 80073f4:	4798      	blx	r3
 80073f6:	692e      	ldr	r6, [r5, #16]
 80073f8:	2003      	movs	r0, #3
 80073fa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80073fc:	42b5      	cmp	r5, r6
 80073fe:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007400:	d007      	beq.n	8007412 <ai_layers_forward_all+0x4e>
 8007402:	47c0      	blx	r8
 8007404:	3701      	adds	r7, #1
 8007406:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8007408:	2e00      	cmp	r6, #0
 800740a:	d1ec      	bne.n	80073e6 <ai_layers_forward_all+0x22>
 800740c:	4638      	mov	r0, r7
 800740e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007412:	2003      	movs	r0, #3
 8007414:	3701      	adds	r7, #1
 8007416:	47c0      	blx	r8
 8007418:	2300      	movs	r3, #0
 800741a:	4638      	mov	r0, r7
 800741c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800741e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007422:	2700      	movs	r7, #0
 8007424:	4638      	mov	r0, r7
 8007426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800742a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800742c:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800742e:	2d00      	cmp	r5, #0
 8007430:	d0f7      	beq.n	8007422 <ai_layers_forward_all+0x5e>
 8007432:	4647      	mov	r7, r8
 8007434:	696b      	ldr	r3, [r5, #20]
 8007436:	4628      	mov	r0, r5
 8007438:	4798      	blx	r3
 800743a:	462b      	mov	r3, r5
 800743c:	692d      	ldr	r5, [r5, #16]
 800743e:	429d      	cmp	r5, r3
 8007440:	d004      	beq.n	800744c <ai_layers_forward_all+0x88>
 8007442:	3701      	adds	r7, #1
 8007444:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007446:	2d00      	cmp	r5, #0
 8007448:	d1f4      	bne.n	8007434 <ai_layers_forward_all+0x70>
 800744a:	e7df      	b.n	800740c <ai_layers_forward_all+0x48>
 800744c:	2300      	movs	r3, #0
 800744e:	3701      	adds	r7, #1
 8007450:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007452:	e7db      	b.n	800740c <ai_layers_forward_all+0x48>

08007454 <forward_conv2d_if32of32wf32_nl_pool>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800745c:	b0c1      	sub	sp, #260	@ 0x104
 800745e:	f8bc 7000 	ldrh.w	r7, [ip]
 8007462:	2f00      	cmp	r7, #0
 8007464:	f000 813c 	beq.w	80076e0 <forward_conv2d_if32of32wf32_nl_pool+0x28c>
 8007468:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800746c:	4604      	mov	r4, r0
 800746e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8007472:	f1bb 0f00 	cmp.w	fp, #0
 8007476:	d001      	beq.n	800747c <forward_conv2d_if32of32wf32_nl_pool+0x28>
 8007478:	f8db b000 	ldr.w	fp, [fp]
 800747c:	2f01      	cmp	r7, #1
 800747e:	f000 812c 	beq.w	80076da <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8007482:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8007486:	f1ba 0f00 	cmp.w	sl, #0
 800748a:	d001      	beq.n	8007490 <forward_conv2d_if32of32wf32_nl_pool+0x3c>
 800748c:	f8da a000 	ldr.w	sl, [sl]
 8007490:	2f02      	cmp	r7, #2
 8007492:	f000 8122 	beq.w	80076da <forward_conv2d_if32of32wf32_nl_pool+0x286>
 8007496:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800749a:	8b1b      	ldrh	r3, [r3, #24]
 800749c:	f1b8 0f00 	cmp.w	r8, #0
 80074a0:	f000 8130 	beq.w	8007704 <forward_conv2d_if32of32wf32_nl_pool+0x2b0>
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	f8d8 2000 	ldr.w	r2, [r8]
 80074aa:	f240 8131 	bls.w	8007710 <forward_conv2d_if32of32wf32_nl_pool+0x2bc>
 80074ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80074b2:	933e      	str	r3, [sp, #248]	@ 0xf8
 80074b4:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80074b8:	f8db 000c 	ldr.w	r0, [fp, #12]
 80074bc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80074c0:	9020      	str	r0, [sp, #128]	@ 0x80
 80074c2:	f8da 000c 	ldr.w	r0, [sl, #12]
 80074c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80074c8:	9021      	str	r0, [sp, #132]	@ 0x84
 80074ca:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80074cc:	f8de 1004 	ldr.w	r1, [lr, #4]
 80074d0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80074d4:	681e      	ldr	r6, [r3, #0]
 80074d6:	902e      	str	r0, [sp, #184]	@ 0xb8
 80074d8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80074da:	9127      	str	r1, [sp, #156]	@ 0x9c
 80074dc:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80074e0:	f8de 1008 	ldr.w	r1, [lr, #8]
 80074e4:	902f      	str	r0, [sp, #188]	@ 0xbc
 80074e6:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80074e8:	9625      	str	r6, [sp, #148]	@ 0x94
 80074ea:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80074ee:	912c      	str	r1, [sp, #176]	@ 0xb0
 80074f0:	9030      	str	r0, [sp, #192]	@ 0xc0
 80074f2:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80074f4:	e9d4 950a 	ldrd	r9, r5, [r4, #40]	@ 0x28
 80074f8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80074fc:	9524      	str	r5, [sp, #144]	@ 0x90
 80074fe:	9031      	str	r0, [sp, #196]	@ 0xc4
 8007500:	685d      	ldr	r5, [r3, #4]
 8007502:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007504:	9526      	str	r5, [sp, #152]	@ 0x98
 8007506:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 800750a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800750e:	9021      	str	r0, [sp, #132]	@ 0x84
 8007510:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007512:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8007516:	9022      	str	r0, [sp, #136]	@ 0x88
 8007518:	fa1f f089 	uxth.w	r0, r9
 800751c:	9032      	str	r0, [sp, #200]	@ 0xc8
 800751e:	f8bd 0090 	ldrh.w	r0, [sp, #144]	@ 0x90
 8007522:	9033      	str	r0, [sp, #204]	@ 0xcc
 8007524:	f8bd 0094 	ldrh.w	r0, [sp, #148]	@ 0x94
 8007528:	9034      	str	r0, [sp, #208]	@ 0xd0
 800752a:	f8bd 0098 	ldrh.w	r0, [sp, #152]	@ 0x98
 800752e:	9035      	str	r0, [sp, #212]	@ 0xd4
 8007530:	6898      	ldr	r0, [r3, #8]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	902a      	str	r0, [sp, #168]	@ 0xa8
 8007536:	932b      	str	r3, [sp, #172]	@ 0xac
 8007538:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 800753c:	9336      	str	r3, [sp, #216]	@ 0xd8
 800753e:	b2ab      	uxth	r3, r5
 8007540:	9337      	str	r3, [sp, #220]	@ 0xdc
 8007542:	b2b3      	uxth	r3, r6
 8007544:	9338      	str	r3, [sp, #224]	@ 0xe0
 8007546:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	@ 0x9c
 800754a:	9323      	str	r3, [sp, #140]	@ 0x8c
 800754c:	b20b      	sxth	r3, r1
 800754e:	932d      	str	r3, [sp, #180]	@ 0xb4
 8007550:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8007554:	9339      	str	r3, [sp, #228]	@ 0xe4
 8007556:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 800755a:	933a      	str	r3, [sp, #232]	@ 0xe8
 800755c:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8007560:	933b      	str	r3, [sp, #236]	@ 0xec
 8007562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007568:	933c      	str	r3, [sp, #240]	@ 0xf0
 800756a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800756c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007570:	933d      	str	r3, [sp, #244]	@ 0xf4
 8007572:	6a23      	ldr	r3, [r4, #32]
 8007574:	9320      	str	r3, [sp, #128]	@ 0x80
 8007576:	f1b8 0f00 	cmp.w	r8, #0
 800757a:	f000 80b3 	beq.w	80076e4 <forward_conv2d_if32of32wf32_nl_pool+0x290>
 800757e:	f8d8 e018 	ldr.w	lr, [r8, #24]
 8007582:	f1be 0f00 	cmp.w	lr, #0
 8007586:	f000 80b5 	beq.w	80076f4 <forward_conv2d_if32of32wf32_nl_pool+0x2a0>
 800758a:	f8de 3008 	ldr.w	r3, [lr, #8]
 800758e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8007590:	9320      	str	r3, [sp, #128]	@ 0x80
 8007592:	e9de 0100 	ldrd	r0, r1, [lr]
 8007596:	f001 fc91 	bl	8008ebc <ai_array_get_byte_size>
 800759a:	f8d8 7018 	ldr.w	r7, [r8, #24]
 800759e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80075a0:	9029      	str	r0, [sp, #164]	@ 0xa4
 80075a2:	2f00      	cmp	r7, #0
 80075a4:	f000 80b7 	beq.w	8007716 <forward_conv2d_if32of32wf32_nl_pool+0x2c2>
 80075a8:	923f      	str	r2, [sp, #252]	@ 0xfc
 80075aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ae:	f001 fc85 	bl	8008ebc <ai_array_get_byte_size>
 80075b2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80075b6:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80075b8:	f8bc 7000 	ldrh.w	r7, [ip]
 80075bc:	9028      	str	r0, [sp, #160]	@ 0xa0
 80075be:	6992      	ldr	r2, [r2, #24]
 80075c0:	b2ad      	uxth	r5, r5
 80075c2:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 80075c4:	b2b6      	uxth	r6, r6
 80075c6:	f8bd 8090 	ldrh.w	r8, [sp, #144]	@ 0x90
 80075ca:	3d01      	subs	r5, #1
 80075cc:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80075d0:	3e01      	subs	r6, #1
 80075d2:	6893      	ldr	r3, [r2, #8]
 80075d4:	fa1f f989 	uxth.w	r9, r9
 80075d8:	f8db 0018 	ldr.w	r0, [fp, #24]
 80075dc:	2f03      	cmp	r7, #3
 80075de:	9324      	str	r3, [sp, #144]	@ 0x90
 80075e0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075e2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80075e4:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80075e8:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80075ea:	f8da 1018 	ldr.w	r1, [sl, #24]
 80075ee:	fb15 250b 	smlabb	r5, r5, fp, r2
 80075f2:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80075f4:	f8de a008 	ldr.w	sl, [lr, #8]
 80075f8:	fa0f fb85 	sxth.w	fp, r5
 80075fc:	f103 35ff 	add.w	r5, r3, #4294967295	@ 0xffffffff
 8007600:	6880      	ldr	r0, [r0, #8]
 8007602:	fb16 2605 	smlabb	r6, r6, r5, r2
 8007606:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 8007608:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800760a:	eba5 050b 	sub.w	r5, r5, fp
 800760e:	b236      	sxth	r6, r6
 8007610:	6889      	ldr	r1, [r1, #8]
 8007612:	fa15 f582 	uxtah	r5, r5, r2
 8007616:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8007618:	fa15 f582 	uxtah	r5, r5, r2
 800761c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800761e:	eba2 0e06 	sub.w	lr, r2, r6
 8007622:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8007624:	fa1e fe82 	uxtah	lr, lr, r2
 8007628:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 800762a:	fb95 f5f9 	sdiv	r5, r5, r9
 800762e:	fa1e fe82 	uxtah	lr, lr, r2
 8007632:	f105 0501 	add.w	r5, r5, #1
 8007636:	f8d4 905c 	ldr.w	r9, [r4, #92]	@ 0x5c
 800763a:	b22d      	sxth	r5, r5
 800763c:	fb9e fef8 	sdiv	lr, lr, r8
 8007640:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8007644:	f10e 0e01 	add.w	lr, lr, #1
 8007648:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 800764c:	d945      	bls.n	80076da <forward_conv2d_if32of32wf32_nl_pool+0x286>
 800764e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8007652:	6abf      	ldr	r7, [r7, #40]	@ 0x28
 8007654:	2f00      	cmp	r7, #0
 8007656:	d068      	beq.n	800772a <forward_conv2d_if32of32wf32_nl_pool+0x2d6>
 8007658:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 800765a:	9512      	str	r5, [sp, #72]	@ 0x48
 800765c:	921e      	str	r2, [sp, #120]	@ 0x78
 800765e:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8007660:	960d      	str	r6, [sp, #52]	@ 0x34
 8007662:	921d      	str	r2, [sp, #116]	@ 0x74
 8007664:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8007666:	921c      	str	r2, [sp, #112]	@ 0x70
 8007668:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800766a:	e9cd 421a 	strd	r4, r2, [sp, #104]	@ 0x68
 800766e:	9c39      	ldr	r4, [sp, #228]	@ 0xe4
 8007670:	e9cd 9418 	strd	r9, r4, [sp, #96]	@ 0x60
 8007674:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8007676:	9417      	str	r4, [sp, #92]	@ 0x5c
 8007678:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 800767a:	9416      	str	r4, [sp, #88]	@ 0x58
 800767c:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 800767e:	e9cd 8414 	strd	r8, r4, [sp, #80]	@ 0x50
 8007682:	9c36      	ldr	r4, [sp, #216]	@ 0xd8
 8007684:	9411      	str	r4, [sp, #68]	@ 0x44
 8007686:	9c38      	ldr	r4, [sp, #224]	@ 0xe0
 8007688:	9410      	str	r4, [sp, #64]	@ 0x40
 800768a:	9c37      	ldr	r4, [sp, #220]	@ 0xdc
 800768c:	e9cd b40e 	strd	fp, r4, [sp, #56]	@ 0x38
 8007690:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 8007692:	940c      	str	r4, [sp, #48]	@ 0x30
 8007694:	9c32      	ldr	r4, [sp, #200]	@ 0xc8
 8007696:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007698:	9c34      	ldr	r4, [sp, #208]	@ 0xd0
 800769a:	9308      	str	r3, [sp, #32]
 800769c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800769e:	940a      	str	r4, [sp, #40]	@ 0x28
 80076a0:	9307      	str	r3, [sp, #28]
 80076a2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80076a4:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 80076a6:	9306      	str	r3, [sp, #24]
 80076a8:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80076aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80076b0:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80076b6:	9204      	str	r2, [sp, #16]
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	fa0f f38e 	sxth.w	r3, lr
 80076be:	9409      	str	r4, [sp, #36]	@ 0x24
 80076c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076c2:	4653      	mov	r3, sl
 80076c4:	9503      	str	r5, [sp, #12]
 80076c6:	683c      	ldr	r4, [r7, #0]
 80076c8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076ca:	69a4      	ldr	r4, [r4, #24]
 80076cc:	68a4      	ldr	r4, [r4, #8]
 80076ce:	9400      	str	r4, [sp, #0]
 80076d0:	f000 fc12 	bl	8007ef8 <forward_lite_conv2d_if32of32wf32_pool>
 80076d4:	b041      	add	sp, #260	@ 0x104
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	2300      	movs	r3, #0
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	deff      	udf	#255	@ 0xff
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	deff      	udf	#255	@ 0xff
 80076e4:	b10b      	cbz	r3, 80076ea <forward_conv2d_if32of32wf32_nl_pool+0x296>
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	9320      	str	r3, [sp, #128]	@ 0x80
 80076ea:	2301      	movs	r3, #1
 80076ec:	f8cd 80a4 	str.w	r8, [sp, #164]	@ 0xa4
 80076f0:	9328      	str	r3, [sp, #160]	@ 0xa0
 80076f2:	e764      	b.n	80075be <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 80076f4:	b10b      	cbz	r3, 80076fa <forward_conv2d_if32of32wf32_nl_pool+0x2a6>
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	9320      	str	r3, [sp, #128]	@ 0x80
 80076fa:	2301      	movs	r3, #1
 80076fc:	2100      	movs	r1, #0
 80076fe:	e9cd 3128 	strd	r3, r1, [sp, #160]	@ 0xa0
 8007702:	e75c      	b.n	80075be <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 8007704:	2b01      	cmp	r3, #1
 8007706:	d90d      	bls.n	8007724 <forward_conv2d_if32of32wf32_nl_pool+0x2d0>
 8007708:	4642      	mov	r2, r8
 800770a:	f8cd 80f8 	str.w	r8, [sp, #248]	@ 0xf8
 800770e:	e6d3      	b.n	80074b8 <forward_conv2d_if32of32wf32_nl_pool+0x64>
 8007710:	2300      	movs	r3, #0
 8007712:	933e      	str	r3, [sp, #248]	@ 0xf8
 8007714:	e6ce      	b.n	80074b4 <forward_conv2d_if32of32wf32_nl_pool+0x60>
 8007716:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800771a:	2301      	movs	r3, #1
 800771c:	f8bc 7000 	ldrh.w	r7, [ip]
 8007720:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007722:	e74c      	b.n	80075be <forward_conv2d_if32of32wf32_nl_pool+0x16a>
 8007724:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007728:	deff      	udf	#255	@ 0xff
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	deff      	udf	#255	@ 0xff
 800772e:	bf00      	nop

08007730 <forward_dense>:
 8007730:	6983      	ldr	r3, [r0, #24]
 8007732:	881a      	ldrh	r2, [r3, #0]
 8007734:	2a00      	cmp	r2, #0
 8007736:	f000 80cb 	beq.w	80078d0 <forward_dense+0x1a0>
 800773a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773e:	ed2d 8b02 	vpush	{d8}
 8007742:	6858      	ldr	r0, [r3, #4]
 8007744:	b09b      	sub	sp, #108	@ 0x6c
 8007746:	6844      	ldr	r4, [r0, #4]
 8007748:	b104      	cbz	r4, 800774c <forward_dense+0x1c>
 800774a:	6824      	ldr	r4, [r4, #0]
 800774c:	2a01      	cmp	r2, #1
 800774e:	f000 81d8 	beq.w	8007b02 <forward_dense+0x3d2>
 8007752:	6905      	ldr	r5, [r0, #16]
 8007754:	b105      	cbz	r5, 8007758 <forward_dense+0x28>
 8007756:	682d      	ldr	r5, [r5, #0]
 8007758:	2a02      	cmp	r2, #2
 800775a:	f000 80bb 	beq.w	80078d4 <forward_dense+0x1a4>
 800775e:	69c3      	ldr	r3, [r0, #28]
 8007760:	9308      	str	r3, [sp, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 81c4 	beq.w	8007af0 <forward_dense+0x3c0>
 8007768:	4619      	mov	r1, r3
 800776a:	8b03      	ldrh	r3, [r0, #24]
 800776c:	6809      	ldr	r1, [r1, #0]
 800776e:	2b01      	cmp	r3, #1
 8007770:	910a      	str	r1, [sp, #40]	@ 0x28
 8007772:	f240 81bf 	bls.w	8007af4 <forward_dense+0x3c4>
 8007776:	9b08      	ldr	r3, [sp, #32]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	9308      	str	r3, [sp, #32]
 800777c:	460b      	mov	r3, r1
 800777e:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8007782:	2a03      	cmp	r2, #3
 8007784:	68e3      	ldr	r3, [r4, #12]
 8007786:	68ee      	ldr	r6, [r5, #12]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	6877      	ldr	r7, [r6, #4]
 800778c:	9310      	str	r3, [sp, #64]	@ 0x40
 800778e:	f8d9 3000 	ldr.w	r3, [r9]
 8007792:	4639      	mov	r1, r7
 8007794:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007796:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800779a:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800779e:	e9d6 7602 	ldrd	r7, r6, [r6, #8]
 80077a2:	fb01 f707 	mul.w	r7, r1, r7
 80077a6:	fa4e f10c 	asr.w	r1, lr, ip
 80077aa:	910d      	str	r1, [sp, #52]	@ 0x34
 80077ac:	f000 81a6 	beq.w	8007afc <forward_dense+0x3cc>
 80077b0:	f8d0 8028 	ldr.w	r8, [r0, #40]	@ 0x28
 80077b4:	f1b8 0f00 	cmp.w	r8, #0
 80077b8:	d006      	beq.n	80077c8 <forward_dense+0x98>
 80077ba:	f8d8 8000 	ldr.w	r8, [r8]
 80077be:	f1b8 0f00 	cmp.w	r8, #0
 80077c2:	d001      	beq.n	80077c8 <forward_dense+0x98>
 80077c4:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80077c8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80077cc:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 80077d0:	fa42 f303 	asr.w	r3, r2, r3
 80077d4:	07db      	lsls	r3, r3, #31
 80077d6:	f140 8178 	bpl.w	8007aca <forward_dense+0x39a>
 80077da:	f04f 0900 	mov.w	r9, #0
 80077de:	69a3      	ldr	r3, [r4, #24]
 80077e0:	fb07 f606 	mul.w	r6, r7, r6
 80077e4:	69aa      	ldr	r2, [r5, #24]
 80077e6:	6891      	ldr	r1, [r2, #8]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ec:	eb01 0086 	add.w	r0, r1, r6, lsl #2
 80077f0:	9102      	str	r1, [sp, #8]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	4281      	cmp	r1, r0
 80077f6:	900b      	str	r0, [sp, #44]	@ 0x2c
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	9303      	str	r3, [sp, #12]
 80077fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077fe:	ea4f 0483 	mov.w	r4, r3, lsl #2
 8007802:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 8007806:	9409      	str	r4, [sp, #36]	@ 0x24
 8007808:	d25d      	bcs.n	80078c6 <forward_dense+0x196>
 800780a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800780c:	4693      	mov	fp, r2
 800780e:	464c      	mov	r4, r9
 8007810:	ed9f 8abd 	vldr	s16, [pc, #756]	@ 8007b08 <forward_dense+0x3d8>
 8007814:	08d9      	lsrs	r1, r3, #3
 8007816:	46c1      	mov	r9, r8
 8007818:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 800781c:	461a      	mov	r2, r3
 800781e:	f023 0301 	bic.w	r3, r3, #1
 8007822:	9104      	str	r1, [sp, #16]
 8007824:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	014b      	lsls	r3, r1, #5
 800782c:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8007830:	9311      	str	r3, [sp, #68]	@ 0x44
 8007832:	0093      	lsls	r3, r2, #2
 8007834:	930c      	str	r3, [sp, #48]	@ 0x30
 8007836:	f002 0301 	and.w	r3, r2, #1
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8007844:	9b08      	ldr	r3, [sp, #32]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04a      	beq.n	80078e0 <forward_dense+0x1b0>
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	689d      	ldr	r5, [r3, #8]
 800784e:	2c00      	cmp	r4, #0
 8007850:	d049      	beq.n	80078e6 <forward_dense+0x1b6>
 8007852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007854:	2b04      	cmp	r3, #4
 8007856:	9b02      	ldr	r3, [sp, #8]
 8007858:	d058      	beq.n	800790c <forward_dense+0x1dc>
 800785a:	4599      	cmp	r9, r3
 800785c:	d927      	bls.n	80078ae <forward_dense+0x17e>
 800785e:	4618      	mov	r0, r3
 8007860:	9e03      	ldr	r6, [sp, #12]
 8007862:	2d00      	cmp	r5, #0
 8007864:	d039      	beq.n	80078da <forward_dense+0x1aa>
 8007866:	ecb5 6a01 	vldmia	r5!, {s12}
 800786a:	45da      	cmp	sl, fp
 800786c:	d911      	bls.n	8007892 <forward_dense+0x162>
 800786e:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8007b08 <forward_dense+0x3d8>
 8007872:	465a      	mov	r2, fp
 8007874:	4661      	mov	r1, ip
 8007876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800787a:	ecb2 7a01 	vldmia	r2!, {s14}
 800787e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007882:	4592      	cmp	sl, r2
 8007884:	edd3 6a00 	vldr	s13, [r3]
 8007888:	eee6 7a87 	vfma.f32	s15, s13, s14
 800788c:	d8f3      	bhi.n	8007876 <forward_dense+0x146>
 800788e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007892:	eca0 6a01 	vstmia	r0!, {s12}
 8007896:	4548      	cmp	r0, r9
 8007898:	44b4      	add	ip, r6
 800789a:	d3e2      	bcc.n	8007862 <forward_dense+0x132>
 800789c:	9a02      	ldr	r2, [sp, #8]
 800789e:	eba9 0302 	sub.w	r3, r9, r2
 80078a2:	3b01      	subs	r3, #1
 80078a4:	f023 0303 	bic.w	r3, r3, #3
 80078a8:	3304      	adds	r3, #4
 80078aa:	18d3      	adds	r3, r2, r3
 80078ac:	9302      	str	r3, [sp, #8]
 80078ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b0:	9a01      	ldr	r2, [sp, #4]
 80078b2:	4499      	add	r9, r3
 80078b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80078b6:	441a      	add	r2, r3
 80078b8:	449a      	add	sl, r3
 80078ba:	449b      	add	fp, r3
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	9201      	str	r2, [sp, #4]
 80078c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d3ba      	bcc.n	800783c <forward_dense+0x10c>
 80078c6:	b01b      	add	sp, #108	@ 0x6c
 80078c8:	ecbd 8b02 	vpop	{d8}
 80078cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d0:	6853      	ldr	r3, [r2, #4]
 80078d2:	deff      	udf	#255	@ 0xff
 80078d4:	2300      	movs	r3, #0
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	deff      	udf	#255	@ 0xff
 80078da:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 8007b08 <forward_dense+0x3d8>
 80078de:	e7c4      	b.n	800786a <forward_dense+0x13a>
 80078e0:	461d      	mov	r5, r3
 80078e2:	2c00      	cmp	r4, #0
 80078e4:	d1b5      	bne.n	8007852 <forward_dense+0x122>
 80078e6:	9b02      	ldr	r3, [sp, #8]
 80078e8:	a813      	add	r0, sp, #76	@ 0x4c
 80078ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078ee:	4413      	add	r3, r2
 80078f0:	f8cd b050 	str.w	fp, [sp, #80]	@ 0x50
 80078f4:	9302      	str	r3, [sp, #8]
 80078f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078f8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80078fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078fc:	9318      	str	r3, [sp, #96]	@ 0x60
 80078fe:	2301      	movs	r3, #1
 8007900:	e9cd c515 	strd	ip, r5, [sp, #84]	@ 0x54
 8007904:	9319      	str	r3, [sp, #100]	@ 0x64
 8007906:	f001 f867 	bl	80089d8 <forward_lite_dense_if32of32wf32>
 800790a:	e7d0      	b.n	80078ae <forward_dense+0x17e>
 800790c:	4599      	cmp	r9, r3
 800790e:	d9ce      	bls.n	80078ae <forward_dense+0x17e>
 8007910:	9a04      	ldr	r2, [sp, #16]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	1c57      	adds	r7, r2, #1
 8007916:	9b01      	ldr	r3, [sp, #4]
 8007918:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800791a:	3b01      	subs	r3, #1
 800791c:	eb0c 0787 	add.w	r7, ip, r7, lsl #2
 8007920:	4452      	add	r2, sl
 8007922:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 8007926:	9307      	str	r3, [sp, #28]
 8007928:	9206      	str	r2, [sp, #24]
 800792a:	2d00      	cmp	r5, #0
 800792c:	f000 80c2 	beq.w	8007ab4 <forward_dense+0x384>
 8007930:	9b04      	ldr	r3, [sp, #16]
 8007932:	ecf5 2a01 	vldmia	r5!, {s5}
 8007936:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8007b08 <forward_dense+0x3d8>
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80c2 	beq.w	8007ac4 <forward_dense+0x394>
 8007940:	f10c 0204 	add.w	r2, ip, #4
 8007944:	f10b 0320 	add.w	r3, fp, #32
 8007948:	f812 6c04 	ldrb.w	r6, [r2, #-4]
 800794c:	3204      	adds	r2, #4
 800794e:	ed13 2a07 	vldr	s4, [r3, #-28]	@ 0xffffffe4
 8007952:	3320      	adds	r3, #32
 8007954:	f006 0e0f 	and.w	lr, r6, #15
 8007958:	0936      	lsrs	r6, r6, #4
 800795a:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 800795e:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8007962:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8007966:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800796a:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 800796e:	edde 7a00 	vldr	s15, [lr]
 8007972:	ed96 3a00 	vldr	s6, [r6]
 8007976:	0906      	lsrs	r6, r0, #4
 8007978:	ee67 7a82 	vmul.f32	s15, s15, s4
 800797c:	f000 000f 	and.w	r0, r0, #15
 8007980:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007984:	f812 1c06 	ldrb.w	r1, [r2, #-6]
 8007988:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800798c:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 8007990:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007994:	ed96 3a00 	vldr	s6, [r6]
 8007998:	ed90 4a00 	vldr	s8, [r0]
 800799c:	0908      	lsrs	r0, r1, #4
 800799e:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80079a2:	f001 010f 	and.w	r1, r1, #15
 80079a6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80079aa:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80079ae:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80079b2:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80079b6:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80079ba:	eee3 7a23 	vfma.f32	s15, s6, s7
 80079be:	eee4 7a05 	vfma.f32	s15, s8, s10
 80079c2:	ed90 4a00 	vldr	s8, [r0]
 80079c6:	ed91 5a00 	vldr	s10, [r1]
 80079ca:	f812 1c05 	ldrb.w	r1, [r2, #-5]
 80079ce:	42ba      	cmp	r2, r7
 80079d0:	ea4f 1011 	mov.w	r0, r1, lsr #4
 80079d4:	f001 010f 	and.w	r1, r1, #15
 80079d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80079dc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80079e0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80079e4:	eee5 7a06 	vfma.f32	s15, s10, s12
 80079e8:	ed90 5a00 	vldr	s10, [r0]
 80079ec:	ed91 6a00 	vldr	s12, [r1]
 80079f0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80079f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80079f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079fc:	d1a4      	bne.n	8007948 <forward_dense+0x218>
 80079fe:	f1a7 0804 	sub.w	r8, r7, #4
 8007a02:	f8dd e018 	ldr.w	lr, [sp, #24]
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	459e      	cmp	lr, r3
 8007a0a:	d229      	bcs.n	8007a60 <forward_dense+0x330>
 8007a0c:	9b07      	ldr	r3, [sp, #28]
 8007a0e:	f10e 0208 	add.w	r2, lr, #8
 8007a12:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8007a16:	eba3 060e 	sub.w	r6, r3, lr
 8007a1a:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
 8007a1e:	eb08 06d6 	add.w	r6, r8, r6, lsr #3
 8007a22:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8007a26:	3208      	adds	r2, #8
 8007a28:	ed52 5a03 	vldr	s11, [r2, #-12]
 8007a2c:	f003 010f 	and.w	r1, r3, #15
 8007a30:	091b      	lsrs	r3, r3, #4
 8007a32:	ed52 6a04 	vldr	s13, [r2, #-16]
 8007a36:	42b0      	cmp	r0, r6
 8007a38:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007a3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a40:	edd1 7a00 	vldr	s15, [r1]
 8007a44:	ed93 6a00 	vldr	s12, [r3]
 8007a48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007a4c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a54:	d1e5      	bne.n	8007a22 <forward_dense+0x2f2>
 8007a56:	f10a 0a01 	add.w	sl, sl, #1
 8007a5a:	44d0      	add	r8, sl
 8007a5c:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8007a60:	9b05      	ldr	r3, [sp, #20]
 8007a62:	b1cb      	cbz	r3, 8007a98 <forward_dense+0x368>
 8007a64:	f898 3000 	ldrb.w	r3, [r8]
 8007a68:	edde 7a00 	vldr	s15, [lr]
 8007a6c:	091b      	lsrs	r3, r3, #4
 8007a6e:	9a03      	ldr	r2, [sp, #12]
 8007a70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a74:	4494      	add	ip, r2
 8007a76:	4417      	add	r7, r2
 8007a78:	edd3 6a00 	vldr	s13, [r3]
 8007a7c:	9b00      	ldr	r3, [sp, #0]
 8007a7e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007a82:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007a86:	eca3 7a01 	vstmia	r3!, {s14}
 8007a8a:	4599      	cmp	r9, r3
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	f63f af4c 	bhi.w	800792a <forward_dense+0x1fa>
 8007a92:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007a96:	e701      	b.n	800789c <forward_dense+0x16c>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	ee72 2a87 	vadd.f32	s5, s5, s14
 8007a9e:	449c      	add	ip, r3
 8007aa0:	441f      	add	r7, r3
 8007aa2:	9b00      	ldr	r3, [sp, #0]
 8007aa4:	ece3 2a01 	vstmia	r3!, {s5}
 8007aa8:	454b      	cmp	r3, r9
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	d2f1      	bcs.n	8007a92 <forward_dense+0x362>
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	f47f af3e 	bne.w	8007930 <forward_dense+0x200>
 8007ab4:	9b04      	ldr	r3, [sp, #16]
 8007ab6:	eef0 2a48 	vmov.f32	s5, s16
 8007aba:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8007b08 <forward_dense+0x3d8>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f47f af3e 	bne.w	8007940 <forward_dense+0x210>
 8007ac4:	46de      	mov	lr, fp
 8007ac6:	46e0      	mov	r8, ip
 8007ac8:	e79d      	b.n	8007a06 <forward_dense+0x2d6>
 8007aca:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8007ace:	f1b8 0f00 	cmp.w	r8, #0
 8007ad2:	f43f ae84 	beq.w	80077de <forward_dense+0xae>
 8007ad6:	e9d8 0100 	ldrd	r0, r1, [r8]
 8007ada:	f001 f9ef 	bl	8008ebc <ai_array_get_byte_size>
 8007ade:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4648      	mov	r0, r9
 8007ae6:	4641      	mov	r1, r8
 8007ae8:	46c1      	mov	r9, r8
 8007aea:	f001 f8ef 	bl	8008ccc <st_int8_copy>
 8007aee:	e676      	b.n	80077de <forward_dense+0xae>
 8007af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007af2:	e644      	b.n	800777e <forward_dense+0x4e>
 8007af4:	2300      	movs	r3, #0
 8007af6:	9308      	str	r3, [sp, #32]
 8007af8:	460b      	mov	r3, r1
 8007afa:	e640      	b.n	800777e <forward_dense+0x4e>
 8007afc:	2300      	movs	r3, #0
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	deff      	udf	#255	@ 0xff
 8007b02:	2300      	movs	r3, #0
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	deff      	udf	#255	@ 0xff
 8007b08:	00000000 	.word	0x00000000

08007b0c <forward_sigmoid>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	ed2d 8b02 	vpush	{d8}
 8007b12:	6982      	ldr	r2, [r0, #24]
 8007b14:	8813      	ldrh	r3, [r2, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d03b      	beq.n	8007b92 <forward_sigmoid+0x86>
 8007b1a:	6852      	ldr	r2, [r2, #4]
 8007b1c:	6854      	ldr	r4, [r2, #4]
 8007b1e:	b104      	cbz	r4, 8007b22 <forward_sigmoid+0x16>
 8007b20:	6824      	ldr	r4, [r4, #0]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d034      	beq.n	8007b90 <forward_sigmoid+0x84>
 8007b26:	6915      	ldr	r5, [r2, #16]
 8007b28:	b105      	cbz	r5, 8007b2c <forward_sigmoid+0x20>
 8007b2a:	682d      	ldr	r5, [r5, #0]
 8007b2c:	68a3      	ldr	r3, [r4, #8]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	d031      	beq.n	8007b96 <forward_sigmoid+0x8a>
 8007b32:	68e0      	ldr	r0, [r4, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b3e:	4298      	cmp	r0, r3
 8007b40:	fb01 f202 	mul.w	r2, r1, r2
 8007b44:	d1f9      	bne.n	8007b3a <forward_sigmoid+0x2e>
 8007b46:	69a7      	ldr	r7, [r4, #24]
 8007b48:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007b4c:	69a9      	ldr	r1, [r5, #24]
 8007b4e:	4413      	add	r3, r2
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	688e      	ldr	r6, [r1, #8]
 8007b54:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007b58:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007b5c:	42aa      	cmp	r2, r5
 8007b5e:	d814      	bhi.n	8007b8a <forward_sigmoid+0x7e>
 8007b60:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8007b64:	3504      	adds	r5, #4
 8007b66:	3604      	adds	r6, #4
 8007b68:	462c      	mov	r4, r5
 8007b6a:	ed35 0a01 	vldmdb	r5!, {s0}
 8007b6e:	eeb1 0a40 	vneg.f32	s0, s0
 8007b72:	3c08      	subs	r4, #8
 8007b74:	f003 fee6 	bl	800b944 <expf>
 8007b78:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007b7c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007b80:	ed66 7a01 	vstmdb	r6!, {s15}
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	d9ee      	bls.n	8007b68 <forward_sigmoid+0x5c>
 8007b8a:	ecbd 8b02 	vpop	{d8}
 8007b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b90:	2300      	movs	r3, #0
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	deff      	udf	#255	@ 0xff
 8007b96:	69ab      	ldr	r3, [r5, #24]
 8007b98:	69a7      	ldr	r7, [r4, #24]
 8007b9a:	689e      	ldr	r6, [r3, #8]
 8007b9c:	68bd      	ldr	r5, [r7, #8]
 8007b9e:	e7df      	b.n	8007b60 <forward_sigmoid+0x54>

08007ba0 <forward_relu>:
 8007ba0:	6982      	ldr	r2, [r0, #24]
 8007ba2:	8813      	ldrh	r3, [r2, #0]
 8007ba4:	b323      	cbz	r3, 8007bf0 <forward_relu+0x50>
 8007ba6:	6851      	ldr	r1, [r2, #4]
 8007ba8:	684a      	ldr	r2, [r1, #4]
 8007baa:	b102      	cbz	r2, 8007bae <forward_relu+0xe>
 8007bac:	6812      	ldr	r2, [r2, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	f000 8086 	beq.w	8007cc0 <forward_relu+0x120>
 8007bb4:	b470      	push	{r4, r5, r6}
 8007bb6:	690b      	ldr	r3, [r1, #16]
 8007bb8:	b103      	cbz	r3, 8007bbc <forward_relu+0x1c>
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	69c6      	ldr	r6, [r0, #28]
 8007bbe:	b1ce      	cbz	r6, 8007bf4 <forward_relu+0x54>
 8007bc0:	6871      	ldr	r1, [r6, #4]
 8007bc2:	6998      	ldr	r0, [r3, #24]
 8007bc4:	2901      	cmp	r1, #1
 8007bc6:	d03f      	beq.n	8007c48 <forward_relu+0xa8>
 8007bc8:	6893      	ldr	r3, [r2, #8]
 8007bca:	6991      	ldr	r1, [r2, #24]
 8007bcc:	0a1b      	lsrs	r3, r3, #8
 8007bce:	6880      	ldr	r0, [r0, #8]
 8007bd0:	6889      	ldr	r1, [r1, #8]
 8007bd2:	d06c      	beq.n	8007cae <forward_relu+0x10e>
 8007bd4:	68d5      	ldr	r5, [r2, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007bdc:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007be0:	429d      	cmp	r5, r3
 8007be2:	fb04 f202 	mul.w	r2, r4, r2
 8007be6:	d1f9      	bne.n	8007bdc <forward_relu+0x3c>
 8007be8:	68b3      	ldr	r3, [r6, #8]
 8007bea:	bc70      	pop	{r4, r5, r6}
 8007bec:	f000 bc76 	b.w	80084dc <forward_lite_nl_relu_generic_if32of32_kernel>
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	deff      	udf	#255	@ 0xff
 8007bf4:	6999      	ldr	r1, [r3, #24]
 8007bf6:	6893      	ldr	r3, [r2, #8]
 8007bf8:	6990      	ldr	r0, [r2, #24]
 8007bfa:	0a1b      	lsrs	r3, r3, #8
 8007bfc:	6889      	ldr	r1, [r1, #8]
 8007bfe:	6884      	ldr	r4, [r0, #8]
 8007c00:	d057      	beq.n	8007cb2 <forward_relu+0x112>
 8007c02:	68d5      	ldr	r5, [r2, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c0a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007c0e:	429d      	cmp	r5, r3
 8007c10:	fb00 f202 	mul.w	r2, r0, r2
 8007c14:	d1f9      	bne.n	8007c0a <forward_relu+0x6a>
 8007c16:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007c1a:	4413      	add	r3, r2
 8007c1c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007c20:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007c24:	4294      	cmp	r4, r2
 8007c26:	d80d      	bhi.n	8007c44 <forward_relu+0xa4>
 8007c28:	3204      	adds	r2, #4
 8007c2a:	3104      	adds	r1, #4
 8007c2c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007cc8 <forward_relu+0x128>
 8007c30:	4613      	mov	r3, r2
 8007c32:	ed72 7a01 	vldmdb	r2!, {s15}
 8007c36:	3b08      	subs	r3, #8
 8007c38:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007c3c:	ed61 7a01 	vstmdb	r1!, {s15}
 8007c40:	429c      	cmp	r4, r3
 8007c42:	d9f5      	bls.n	8007c30 <forward_relu+0x90>
 8007c44:	bc70      	pop	{r4, r5, r6}
 8007c46:	4770      	bx	lr
 8007c48:	6993      	ldr	r3, [r2, #24]
 8007c4a:	6880      	ldr	r0, [r0, #8]
 8007c4c:	689c      	ldr	r4, [r3, #8]
 8007c4e:	6893      	ldr	r3, [r2, #8]
 8007c50:	0a1b      	lsrs	r3, r3, #8
 8007c52:	d030      	beq.n	8007cb6 <forward_relu+0x116>
 8007c54:	68d5      	ldr	r5, [r2, #12]
 8007c56:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c5a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c5e:	429d      	cmp	r5, r3
 8007c60:	fb02 f101 	mul.w	r1, r2, r1
 8007c64:	d1f9      	bne.n	8007c5a <forward_relu+0xba>
 8007c66:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8007c6a:	68b3      	ldr	r3, [r6, #8]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	ed93 7a00 	vldr	s14, [r3]
 8007c72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c76:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d8e2      	bhi.n	8007c44 <forward_relu+0xa4>
 8007c7e:	1d02      	adds	r2, r0, #4
 8007c80:	3304      	adds	r3, #4
 8007c82:	2000      	movs	r0, #0
 8007c84:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007c88:	1f19      	subs	r1, r3, #4
 8007c8a:	3b08      	subs	r3, #8
 8007c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	d405      	bmi.n	8007ca2 <forward_relu+0x102>
 8007c96:	429c      	cmp	r4, r3
 8007c98:	f842 0d04 	str.w	r0, [r2, #-4]!
 8007c9c:	d8d2      	bhi.n	8007c44 <forward_relu+0xa4>
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	e7f0      	b.n	8007c84 <forward_relu+0xe4>
 8007ca2:	429c      	cmp	r4, r3
 8007ca4:	ed62 7a01 	vstmdb	r2!, {s15}
 8007ca8:	d8cc      	bhi.n	8007c44 <forward_relu+0xa4>
 8007caa:	460b      	mov	r3, r1
 8007cac:	e7ea      	b.n	8007c84 <forward_relu+0xe4>
 8007cae:	2201      	movs	r2, #1
 8007cb0:	e79a      	b.n	8007be8 <forward_relu+0x48>
 8007cb2:	4622      	mov	r2, r4
 8007cb4:	e7b8      	b.n	8007c28 <forward_relu+0x88>
 8007cb6:	68b2      	ldr	r2, [r6, #8]
 8007cb8:	4623      	mov	r3, r4
 8007cba:	ed92 7a00 	vldr	s14, [r2]
 8007cbe:	e7de      	b.n	8007c7e <forward_relu+0xde>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	deff      	udf	#255	@ 0xff
 8007cc6:	bf00      	nop
 8007cc8:	00000000 	.word	0x00000000

08007ccc <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8007ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd0:	ed2d 8b0c 	vpush	{d8-d13}
 8007cd4:	b08d      	sub	sp, #52	@ 0x34
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	9003      	str	r0, [sp, #12]
 8007cda:	9207      	str	r2, [sp, #28]
 8007cdc:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8007cde:	9308      	str	r3, [sp, #32]
 8007ce0:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 8007ce4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007ce6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007ce8:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	@ 0x94
 8007cec:	fb00 f002 	mul.w	r0, r0, r2
 8007cf0:	9004      	str	r0, [sp, #16]
 8007cf2:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	@ 0xa4
 8007cf6:	9009      	str	r0, [sp, #36]	@ 0x24
 8007cf8:	2c00      	cmp	r4, #0
 8007cfa:	f000 80ed 	beq.w	8007ed8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8007cfe:	009c      	lsls	r4, r3, #2
 8007d00:	fb00 f305 	mul.w	r3, r0, r5
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	9405      	str	r4, [sp, #20]
 8007d08:	9306      	str	r3, [sp, #24]
 8007d0a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007d0c:	fb03 f305 	mul.w	r3, r3, r5
 8007d10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007d18:	425b      	negs	r3, r3
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	9302      	str	r3, [sp, #8]
 8007d20:	00ab      	lsls	r3, r5, #2
 8007d22:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f2c0 80dd 	blt.w	8007ee6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8007d2c:	9e01      	ldr	r6, [sp, #4]
 8007d2e:	2000      	movs	r0, #0
 8007d30:	9d04      	ldr	r5, [sp, #16]
 8007d32:	9b07      	ldr	r3, [sp, #28]
 8007d34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d36:	9900      	ldr	r1, [sp, #0]
 8007d38:	fb05 3502 	mla	r5, r5, r2, r3
 8007d3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d3e:	440b      	add	r3, r1
 8007d40:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8007d42:	428b      	cmp	r3, r1
 8007d44:	bf94      	ite	ls
 8007d46:	ebc0 0003 	rsbls	r0, r0, r3
 8007d4a:	ebc0 0001 	rsbhi	r0, r0, r1
 8007d4e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d50:	f1bb 0f00 	cmp.w	fp, #0
 8007d54:	eba3 0a00 	sub.w	sl, r3, r0
 8007d58:	9b08      	ldr	r3, [sp, #32]
 8007d5a:	eba1 0900 	sub.w	r9, r1, r0
 8007d5e:	fb03 f000 	mul.w	r0, r3, r0
 8007d62:	f340 80c6 	ble.w	8007ef2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 8007d66:	f020 040f 	bic.w	r4, r0, #15
 8007d6a:	eeb0 7a40 	vmov.f32	s14, s0
 8007d6e:	fb02 fa0a 	mul.w	sl, r2, sl
 8007d72:	f04f 0c00 	mov.w	ip, #0
 8007d76:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8007d7a:	fb02 f909 	mul.w	r9, r2, r9
 8007d7e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007d82:	f108 0801 	add.w	r8, r8, #1
 8007d86:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8007d8a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8007d8e:	2c00      	cmp	r4, #0
 8007d90:	f340 80a7 	ble.w	8007ee2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8007d94:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 8007d98:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8007da2:	3110      	adds	r1, #16
 8007da4:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8007da8:	3340      	adds	r3, #64	@ 0x40
 8007daa:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8007dae:	42a1      	cmp	r1, r4
 8007db0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007db4:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8007db8:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8007dbc:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8007dc0:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8007dc4:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007dc8:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8007dcc:	ed52 da1d 	vldr	s27, [r2, #-116]	@ 0xffffff8c
 8007dd0:	ed12 da1c 	vldr	s26, [r2, #-112]	@ 0xffffff90
 8007dd4:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 8007dd8:	ed12 ca1b 	vldr	s24, [r2, #-108]	@ 0xffffff94
 8007ddc:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8007de0:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007de4:	ed12 ba1a 	vldr	s22, [r2, #-104]	@ 0xffffff98
 8007de8:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8007dec:	ed12 aa19 	vldr	s20, [r2, #-100]	@ 0xffffff9c
 8007df0:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8007df4:	ed12 9a18 	vldr	s18, [r2, #-96]	@ 0xffffffa0
 8007df8:	ed53 8a18 	vldr	s17, [r3, #-96]	@ 0xffffffa0
 8007dfc:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8007e00:	ed12 8a17 	vldr	s16, [r2, #-92]	@ 0xffffffa4
 8007e04:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8007e08:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8007e0c:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8007e10:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8007e14:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8007e18:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8007e1c:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8007e20:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8007e24:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8007e28:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8007e2c:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8007e30:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8007e34:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8007e38:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8007e3c:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8007e40:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8007e44:	eeea 7a29 	vfma.f32	s15, s20, s19
 8007e48:	eee9 7a28 	vfma.f32	s15, s18, s17
 8007e4c:	eee8 7a20 	vfma.f32	s15, s16, s1
 8007e50:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007e54:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007e58:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007e5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e60:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007e6c:	db97      	blt.n	8007d9e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8007e6e:	4476      	add	r6, lr
 8007e70:	4475      	add	r5, lr
 8007e72:	4647      	mov	r7, r8
 8007e74:	42b8      	cmp	r0, r7
 8007e76:	dd10      	ble.n	8007e9a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 8007e78:	463b      	mov	r3, r7
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	3301      	adds	r3, #1
 8007e80:	ecf2 6a01 	vldmia	r2!, {s13}
 8007e84:	ecf1 7a01 	vldmia	r1!, {s15}
 8007e88:	4298      	cmp	r0, r3
 8007e8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e8e:	d1f6      	bne.n	8007e7e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8007e90:	1bc7      	subs	r7, r0, r7
 8007e92:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 8007e96:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 8007e9a:	f10c 0c01 	add.w	ip, ip, #1
 8007e9e:	4456      	add	r6, sl
 8007ea0:	444d      	add	r5, r9
 8007ea2:	45dc      	cmp	ip, fp
 8007ea4:	f47f af73 	bne.w	8007d8e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8007ea8:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8007eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007eac:	9a03      	ldr	r2, [sp, #12]
 8007eae:	4401      	add	r1, r0
 8007eb0:	9b02      	ldr	r3, [sp, #8]
 8007eb2:	ed82 7a00 	vstr	s14, [r2]
 8007eb6:	9128      	str	r1, [sp, #160]	@ 0xa0
 8007eb8:	3301      	adds	r3, #1
 8007eba:	9905      	ldr	r1, [sp, #20]
 8007ebc:	9302      	str	r3, [sp, #8]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	9906      	ldr	r1, [sp, #24]
 8007ec2:	9203      	str	r2, [sp, #12]
 8007ec4:	9a00      	ldr	r2, [sp, #0]
 8007ec6:	1a12      	subs	r2, r2, r0
 8007ec8:	9200      	str	r2, [sp, #0]
 8007eca:	9a01      	ldr	r2, [sp, #4]
 8007ecc:	440a      	add	r2, r1
 8007ece:	9201      	str	r2, [sp, #4]
 8007ed0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	f47f af26 	bne.w	8007d24 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8007ed8:	b00d      	add	sp, #52	@ 0x34
 8007eda:	ecbd 8b0c 	vpop	{d8-d13}
 8007ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee2:	2700      	movs	r7, #0
 8007ee4:	e7c6      	b.n	8007e74 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8007ee6:	9a00      	ldr	r2, [sp, #0]
 8007ee8:	9b04      	ldr	r3, [sp, #16]
 8007eea:	4610      	mov	r0, r2
 8007eec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007eee:	189d      	adds	r5, r3, r2
 8007ef0:	e71f      	b.n	8007d32 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 8007ef2:	eeb0 7a40 	vmov.f32	s14, s0
 8007ef6:	e7d7      	b.n	8007ea8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08007ef8 <forward_lite_conv2d_if32of32wf32_pool>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	ed2d 8b04 	vpush	{d8-d9}
 8007f00:	b0bd      	sub	sp, #244	@ 0xf4
 8007f02:	469c      	mov	ip, r3
 8007f04:	4696      	mov	lr, r2
 8007f06:	4681      	mov	r9, r0
 8007f08:	af0a      	add	r7, sp, #40	@ 0x28
 8007f0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f0e:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	@ 0x110
 8007f12:	f9b7 5148 	ldrsh.w	r5, [r7, #328]	@ 0x148
 8007f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f18:	f9b7 3114 	ldrsh.w	r3, [r7, #276]	@ 0x114
 8007f1c:	f9b7 a11c 	ldrsh.w	sl, [r7, #284]	@ 0x11c
 8007f20:	6579      	str	r1, [r7, #84]	@ 0x54
 8007f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f24:	f9b7 1168 	ldrsh.w	r1, [r7, #360]	@ 0x168
 8007f28:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 8007f2c:	f9b7 410c 	ldrsh.w	r4, [r7, #268]	@ 0x10c
 8007f30:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007f32:	6739      	str	r1, [r7, #112]	@ 0x70
 8007f34:	fb05 f201 	mul.w	r2, r5, r1
 8007f38:	f9b7 1118 	ldrsh.w	r1, [r7, #280]	@ 0x118
 8007f3c:	f8c7 a0b0 	str.w	sl, [r7, #176]	@ 0xb0
 8007f40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f44:	f9b7 a134 	ldrsh.w	sl, [r7, #308]	@ 0x134
 8007f48:	f8b7 3130 	ldrh.w	r3, [r7, #304]	@ 0x130
 8007f4c:	f9b7 8108 	ldrsh.w	r8, [r7, #264]	@ 0x108
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	6639      	str	r1, [r7, #96]	@ 0x60
 8007f54:	f8b7 0128 	ldrh.w	r0, [r7, #296]	@ 0x128
 8007f58:	fb08 f202 	mul.w	r2, r8, r2
 8007f5c:	f8c7 40b4 	str.w	r4, [r7, #180]	@ 0xb4
 8007f60:	f8c7 a030 	str.w	sl, [r7, #48]	@ 0x30
 8007f64:	4241      	negs	r1, r0
 8007f66:	f9b7 6104 	ldrsh.w	r6, [r7, #260]	@ 0x104
 8007f6a:	f9b7 b120 	ldrsh.w	fp, [r7, #288]	@ 0x120
 8007f6e:	f8b7 4124 	ldrh.w	r4, [r7, #292]	@ 0x124
 8007f72:	f8c7 50c4 	str.w	r5, [r7, #196]	@ 0xc4
 8007f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f78:	f9b7 314c 	ldrsh.w	r3, [r7, #332]	@ 0x14c
 8007f7c:	f9b7 a164 	ldrsh.w	sl, [r7, #356]	@ 0x164
 8007f80:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007f84:	f8c7 a044 	str.w	sl, [r7, #68]	@ 0x44
 8007f88:	f9b7 a16c 	ldrsh.w	sl, [r7, #364]	@ 0x16c
 8007f8c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007f8e:	f8c7 a040 	str.w	sl, [r7, #64]	@ 0x40
 8007f92:	f9b7 a170 	ldrsh.w	sl, [r7, #368]	@ 0x170
 8007f96:	2900      	cmp	r1, #0
 8007f98:	f8c7 a068 	str.w	sl, [r7, #104]	@ 0x68
 8007f9c:	f9b7 a174 	ldrsh.w	sl, [r7, #372]	@ 0x174
 8007fa0:	f8c7 a03c 	str.w	sl, [r7, #60]	@ 0x3c
 8007fa4:	f9b7 a178 	ldrsh.w	sl, [r7, #376]	@ 0x178
 8007fa8:	f8c7 a0bc 	str.w	sl, [r7, #188]	@ 0xbc
 8007fac:	f340 80ca 	ble.w	8008144 <forward_lite_conv2d_if32of32wf32_pool+0x24c>
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
 8007fb6:	4260      	negs	r0, r4
 8007fb8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8007fbc:	ee09 6a10 	vmov	s18, r6
 8007fc0:	ed9f 8abd 	vldr	s16, [pc, #756]	@ 80082b8 <forward_lite_conv2d_if32of32wf32_pool+0x3c0>
 8007fc4:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
 8007fc8:	b298      	uxth	r0, r3
 8007fca:	fb01 f10b 	mul.w	r1, r1, fp
 8007fce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8007fd2:	fa1f f088 	uxth.w	r0, r8
 8007fd6:	fb06 fa01 	mul.w	sl, r6, r1
 8007fda:	4604      	mov	r4, r0
 8007fdc:	ee08 0a90 	vmov	s17, r0
 8007fe0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	f8c7 a06c 	str.w	sl, [r7, #108]	@ 0x6c
 8007fe8:	fb08 f300 	mul.w	r3, r8, r0
 8007fec:	fb05 f303 	mul.w	r3, r5, r3
 8007ff0:	fb08 f505 	mul.w	r5, r8, r5
 8007ff4:	0098      	lsls	r0, r3, #2
 8007ff6:	1e63      	subs	r3, r4, #1
 8007ff8:	008c      	lsls	r4, r1, #2
 8007ffa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	6238      	str	r0, [r7, #32]
 8008000:	67fc      	str	r4, [r7, #124]	@ 0x7c
 8008002:	eb0e 008a 	add.w	r0, lr, sl, lsl #2
 8008006:	f8d7 40b4 	ldr.w	r4, [r7, #180]	@ 0xb4
 800800a:	3301      	adds	r3, #1
 800800c:	627d      	str	r5, [r7, #36]	@ 0x24
 800800e:	f10e 4578 	add.w	r5, lr, #4160749568	@ 0xf8000000
 8008012:	fb01 f104 	mul.w	r1, r1, r4
 8008016:	f8d7 a154 	ldr.w	sl, [r7, #340]	@ 0x154
 800801a:	62fd      	str	r5, [r7, #44]	@ 0x2c
 800801c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8008020:	fb06 f101 	mul.w	r1, r6, r1
 8008024:	6138      	str	r0, [r7, #16]
 8008026:	0098      	lsls	r0, r3, #2
 8008028:	0089      	lsls	r1, r1, #2
 800802a:	f8c7 5098 	str.w	r5, [r7, #152]	@ 0x98
 800802e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8008032:	61f8      	str	r0, [r7, #28]
 8008034:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8008036:	fb04 f106 	mul.w	r1, r4, r6
 800803a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800803e:	607b      	str	r3, [r7, #4]
 8008040:	fb04 f101 	mul.w	r1, r4, r1
 8008044:	f8d7 4100 	ldr.w	r4, [r7, #256]	@ 0x100
 8008048:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 800804c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800804e:	eb04 0b82 	add.w	fp, r4, r2, lsl #2
 8008052:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8008054:	f8c7 609c 	str.w	r6, [r7, #156]	@ 0x9c
 8008058:	0096      	lsls	r6, r2, #2
 800805a:	fb08 f201 	mul.w	r2, r8, r1
 800805e:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8008062:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 8008066:	4275      	negs	r5, r6
 8008068:	0092      	lsls	r2, r2, #2
 800806a:	f8d7 9100 	ldr.w	r9, [r7, #256]	@ 0x100
 800806e:	60be      	str	r6, [r7, #8]
 8008070:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008072:	2200      	movs	r2, #0
 8008074:	667d      	str	r5, [r7, #100]	@ 0x64
 8008076:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008078:	1de2      	adds	r2, r4, #7
 800807a:	6539      	str	r1, [r7, #80]	@ 0x50
 800807c:	f022 0407 	bic.w	r4, r2, #7
 8008080:	2200      	movs	r2, #0
 8008082:	617c      	str	r4, [r7, #20]
 8008084:	67ba      	str	r2, [r7, #120]	@ 0x78
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800808c:	3301      	adds	r3, #1
 800808e:	b21b      	sxth	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc7e      	bgt.n	8008192 <forward_lite_conv2d_if32of32wf32_pool+0x29a>
 8008094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008098:	041b      	lsls	r3, r3, #16
 800809a:	f100 810f 	bmi.w	80082bc <forward_lite_conv2d_if32of32wf32_pool+0x3c4>
 800809e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80080a0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80080a4:	428a      	cmp	r2, r1
 80080a6:	dc53      	bgt.n	8008150 <forward_lite_conv2d_if32of32wf32_pool+0x258>
 80080a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80080aa:	b292      	uxth	r2, r2
 80080ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080ae:	9008      	str	r0, [sp, #32]
 80080b0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80080b4:	3301      	adds	r3, #1
 80080b6:	6dbd      	ldr	r5, [r7, #88]	@ 0x58
 80080b8:	442c      	add	r4, r5
 80080ba:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 80080be:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80080c0:	4420      	add	r0, r4
 80080c2:	b21c      	sxth	r4, r3
 80080c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80080c8:	6578      	str	r0, [r7, #84]	@ 0x54
 80080ca:	1b5b      	subs	r3, r3, r5
 80080cc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80080ce:	67bc      	str	r4, [r7, #120]	@ 0x78
 80080d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80080d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80080d8:	4403      	add	r3, r0
 80080da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080de:	9201      	str	r2, [sp, #4]
 80080e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80080e8:	1ac9      	subs	r1, r1, r3
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	6d3e      	ldr	r6, [r7, #80]	@ 0x50
 80080ee:	b292      	uxth	r2, r2
 80080f0:	b20b      	sxth	r3, r1
 80080f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80080f6:	b2b3      	uxth	r3, r6
 80080f8:	9303      	str	r3, [sp, #12]
 80080fa:	2301      	movs	r3, #1
 80080fc:	9307      	str	r3, [sp, #28]
 80080fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008102:	9306      	str	r3, [sp, #24]
 8008104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800810c:	9302      	str	r3, [sp, #8]
 800810e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	ee18 3a90 	vmov	r3, s17
 8008118:	f8b7 10c4 	ldrh.w	r1, [r7, #196]	@ 0xc4
 800811c:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8008120:	f8d7 5160 	ldr.w	r5, [r7, #352]	@ 0x160
 8008124:	47a8      	blx	r5
 8008126:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008128:	1ab3      	subs	r3, r6, r2
 800812a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800812e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008132:	3a01      	subs	r2, #1
 8008134:	b21b      	sxth	r3, r3
 8008136:	b292      	uxth	r2, r2
 8008138:	653b      	str	r3, [r7, #80]	@ 0x50
 800813a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800813c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8008140:	42a3      	cmp	r3, r4
 8008142:	dca1      	bgt.n	8008088 <forward_lite_conv2d_if32of32wf32_pool+0x190>
 8008144:	37cc      	adds	r7, #204	@ 0xcc
 8008146:	46bd      	mov	sp, r7
 8008148:	ecbd 8b04 	vpop	{d8-d9}
 800814c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008150:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008152:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8008156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800815a:	440a      	add	r2, r1
 800815c:	3b01      	subs	r3, #1
 800815e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8008162:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8008166:	b29b      	uxth	r3, r3
 8008168:	1a52      	subs	r2, r2, r1
 800816a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800816c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008170:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008174:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8008178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800817a:	440a      	add	r2, r1
 800817c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008180:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008182:	4293      	cmp	r3, r2
 8008184:	ddde      	ble.n	8008144 <forward_lite_conv2d_if32of32wf32_pool+0x24c>
 8008186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800818a:	3301      	adds	r3, #1
 800818c:	b21b      	sxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	dd80      	ble.n	8008094 <forward_lite_conv2d_if32of32wf32_pool+0x19c>
 8008192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008196:	2b00      	cmp	r3, #0
 8008198:	f2c0 8150 	blt.w	800843c <forward_lite_conv2d_if32of32wf32_pool+0x544>
 800819c:	2300      	movs	r3, #0
 800819e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80081a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80081a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081ae:	4413      	add	r3, r2
 80081b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80081b4:	4283      	cmp	r3, r0
 80081b6:	bfd4      	ite	le
 80081b8:	ebc2 0203 	rsble	r2, r2, r3
 80081bc:	ebc2 0200 	rsbgt	r2, r2, r0
 80081c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081c6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80081ca:	f080 80b4 	bcs.w	8008336 <forward_lite_conv2d_if32of32wf32_pool+0x43e>
 80081ce:	f1b8 0f00 	cmp.w	r8, #0
 80081d2:	dd3b      	ble.n	800824c <forward_lite_conv2d_if32of32wf32_pool+0x354>
 80081d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8143 	beq.w	8008464 <forward_lite_conv2d_if32of32wf32_pool+0x56c>
 80081de:	461d      	mov	r5, r3
 80081e0:	464e      	mov	r6, r9
 80081e2:	f8c7 a08c 	str.w	sl, [r7, #140]	@ 0x8c
 80081e6:	ee19 3a10 	vmov	r3, s18
 80081ea:	f8c7 b080 	str.w	fp, [r7, #128]	@ 0x80
 80081ee:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80081f0:	f8d7 b084 	ldr.w	fp, [r7, #132]	@ 0x84
 80081f4:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80081f8:	f8c7 9084 	str.w	r9, [r7, #132]	@ 0x84
 80081fc:	f8d7 907c 	ldr.w	r9, [r7, #124]	@ 0x7c
 8008200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008204:	4630      	mov	r0, r6
 8008206:	ecb5 0a01 	vldmia	r5!, {s0}
 800820a:	3604      	adds	r6, #4
 800820c:	9207      	str	r2, [sp, #28]
 800820e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008212:	e9cd b205 	strd	fp, r2, [sp, #20]
 8008216:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800821a:	9204      	str	r2, [sp, #16]
 800821c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008220:	9203      	str	r2, [sp, #12]
 8008222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008226:	9202      	str	r2, [sp, #8]
 8008228:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800822c:	e9cd 8200 	strd	r8, r2, [sp]
 8008230:	4622      	mov	r2, r4
 8008232:	444c      	add	r4, r9
 8008234:	e9c7 3124 	strd	r3, r1, [r7, #144]	@ 0x90
 8008238:	f7ff fd48 	bl	8007ccc <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800823c:	45aa      	cmp	sl, r5
 800823e:	e9d7 3124 	ldrd	r3, r1, [r7, #144]	@ 0x90
 8008242:	d1dd      	bne.n	8008200 <forward_lite_conv2d_if32of32wf32_pool+0x308>
 8008244:	f8d7 a08c 	ldr.w	sl, [r7, #140]	@ 0x8c
 8008248:	e9d7 b920 	ldrd	fp, r9, [r7, #128]	@ 0x80
 800824c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008250:	2b00      	cmp	r3, #0
 8008252:	dd29      	ble.n	80082a8 <forward_lite_conv2d_if32of32wf32_pool+0x3b0>
 8008254:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 80f5 	beq.w	8008448 <forward_lite_conv2d_if32of32wf32_pool+0x550>
 800825e:	464e      	mov	r6, r9
 8008260:	2400      	movs	r4, #0
 8008262:	f8d7 9158 	ldr.w	r9, [r7, #344]	@ 0x158
 8008266:	4653      	mov	r3, sl
 8008268:	4631      	mov	r1, r6
 800826a:	4642      	mov	r2, r8
 800826c:	4630      	mov	r0, r6
 800826e:	f8d7 5150 	ldr.w	r5, [r7, #336]	@ 0x150
 8008272:	44ca      	add	sl, r9
 8008274:	47a8      	blx	r5
 8008276:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800827a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800827e:	3401      	adds	r4, #1
 8008280:	4416      	add	r6, r2
 8008282:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 8008286:	ebaa 0303 	sub.w	r3, sl, r3
 800828a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800828e:	b224      	sxth	r4, r4
 8008290:	4293      	cmp	r3, r2
 8008292:	bfa8      	it	ge
 8008294:	468a      	movge	sl, r1
 8008296:	455e      	cmp	r6, fp
 8008298:	d301      	bcc.n	800829e <forward_lite_conv2d_if32of32wf32_pool+0x3a6>
 800829a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800829c:	441e      	add	r6, r3
 800829e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	d1df      	bne.n	8008266 <forward_lite_conv2d_if32of32wf32_pool+0x36e>
 80082a6:	46b1      	mov	r9, r6
 80082a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082ac:	3301      	adds	r3, #1
 80082ae:	b21b      	sxth	r3, r3
 80082b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80082b4:	e6f3      	b.n	800809e <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 80082b6:	bf00      	nop
 80082b8:	00000000 	.word	0x00000000
 80082bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80082c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082c2:	fb02 f203 	mul.w	r2, r2, r3
 80082c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80082ca:	eba9 0282 	sub.w	r2, r9, r2, lsl #2
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d901      	bls.n	80082d6 <forward_lite_conv2d_if32of32wf32_pool+0x3de>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	441a      	add	r2, r3
 80082d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80082da:	4293      	cmp	r3, r2
 80082dc:	d214      	bcs.n	8008308 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 80082de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082e0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	@ 0xbc
 80082e4:	428b      	cmp	r3, r1
 80082e6:	d00f      	beq.n	8008308 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 80082e8:	4593      	cmp	fp, r2
 80082ea:	d90d      	bls.n	8008308 <forward_lite_conv2d_if32of32wf32_pool+0x410>
 80082ec:	4649      	mov	r1, r9
 80082ee:	4613      	mov	r3, r2
 80082f0:	f853 0b04 	ldr.w	r0, [r3], #4
 80082f4:	459b      	cmp	fp, r3
 80082f6:	f841 0b04 	str.w	r0, [r1], #4
 80082fa:	d8f9      	bhi.n	80082f0 <forward_lite_conv2d_if32of32wf32_pool+0x3f8>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	f023 0303 	bic.w	r3, r3, #3
 8008304:	3304      	adds	r3, #4
 8008306:	4499      	add	r9, r3
 8008308:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800830a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800830c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8008310:	440a      	add	r2, r1
 8008312:	6a39      	ldr	r1, [r7, #32]
 8008314:	4489      	add	r9, r1
 8008316:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008318:	1ad2      	subs	r2, r2, r3
 800831a:	440b      	add	r3, r1
 800831c:	45cb      	cmp	fp, r9
 800831e:	b212      	sxth	r2, r2
 8008320:	b21b      	sxth	r3, r3
 8008322:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008324:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008328:	f63f aeb9 	bhi.w	800809e <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 800832c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800832e:	4499      	add	r9, r3
 8008330:	45cb      	cmp	fp, r9
 8008332:	d9fc      	bls.n	800832e <forward_lite_conv2d_if32of32wf32_pool+0x436>
 8008334:	e6b3      	b.n	800809e <forward_lite_conv2d_if32of32wf32_pool+0x1a6>
 8008336:	466b      	mov	r3, sp
 8008338:	f1b8 0f00 	cmp.w	r8, #0
 800833c:	ee09 3a90 	vmov	s19, r3
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	ebad 0d03 	sub.w	sp, sp, r3
 8008346:	aa0a      	add	r2, sp, #40	@ 0x28
 8008348:	dd74      	ble.n	8008434 <forward_lite_conv2d_if32of32wf32_pool+0x53c>
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	464e      	mov	r6, r9
 800834e:	f8c7 9018 	str.w	r9, [r7, #24]
 8008352:	444b      	add	r3, r9
 8008354:	693c      	ldr	r4, [r7, #16]
 8008356:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 800835a:	677b      	str	r3, [r7, #116]	@ 0x74
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	4699      	mov	r9, r3
 8008360:	ee19 3a10 	vmov	r3, s18
 8008364:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008366:	b138      	cbz	r0, 8008378 <forward_lite_conv2d_if32of32wf32_pool+0x480>
 8008368:	4648      	mov	r0, r9
 800836a:	4694      	mov	ip, r2
 800836c:	f850 eb04 	ldr.w	lr, [r0], #4
 8008370:	4284      	cmp	r4, r0
 8008372:	f84c eb04 	str.w	lr, [ip], #4
 8008376:	d1f9      	bne.n	800836c <forward_lite_conv2d_if32of32wf32_pool+0x474>
 8008378:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 800837c:	b370      	cbz	r0, 80083dc <forward_lite_conv2d_if32of32wf32_pool+0x4e4>
 800837e:	ecb5 0a01 	vldmia	r5!, {s0}
 8008382:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8008384:	f8c7 5080 	str.w	r5, [r7, #128]	@ 0x80
 8008388:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 800838c:	4481      	add	r9, r0
 800838e:	4404      	add	r4, r0
 8008390:	4630      	mov	r0, r6
 8008392:	9507      	str	r5, [sp, #28]
 8008394:	3604      	adds	r6, #4
 8008396:	f8d7 50a8 	ldr.w	r5, [r7, #168]	@ 0xa8
 800839a:	9506      	str	r5, [sp, #24]
 800839c:	f8d7 5084 	ldr.w	r5, [r7, #132]	@ 0x84
 80083a0:	9505      	str	r5, [sp, #20]
 80083a2:	f8d7 50b8 	ldr.w	r5, [r7, #184]	@ 0xb8
 80083a6:	9504      	str	r5, [sp, #16]
 80083a8:	f8d7 50b0 	ldr.w	r5, [r7, #176]	@ 0xb0
 80083ac:	9503      	str	r5, [sp, #12]
 80083ae:	f8d7 50c4 	ldr.w	r5, [r7, #196]	@ 0xc4
 80083b2:	9502      	str	r5, [sp, #8]
 80083b4:	f8d7 50b4 	ldr.w	r5, [r7, #180]	@ 0xb4
 80083b8:	e9cd 8500 	strd	r8, r5, [sp]
 80083bc:	e9c7 3223 	strd	r3, r2, [r7, #140]	@ 0x8c
 80083c0:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80083c4:	f7ff fc82 	bl	8007ccc <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80083c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80083ca:	42b3      	cmp	r3, r6
 80083cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083d0:	e9d7 2124 	ldrd	r2, r1, [r7, #144]	@ 0x90
 80083d4:	d02c      	beq.n	8008430 <forward_lite_conv2d_if32of32wf32_pool+0x538>
 80083d6:	f8d7 5080 	ldr.w	r5, [r7, #128]	@ 0x80
 80083da:	e7c3      	b.n	8008364 <forward_lite_conv2d_if32of32wf32_pool+0x46c>
 80083dc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80083e0:	eeb0 0a48 	vmov.f32	s0, s16
 80083e4:	9007      	str	r0, [sp, #28]
 80083e6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80083ea:	9006      	str	r0, [sp, #24]
 80083ec:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80083f0:	9005      	str	r0, [sp, #20]
 80083f2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80083f6:	9004      	str	r0, [sp, #16]
 80083f8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80083fc:	9003      	str	r0, [sp, #12]
 80083fe:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8008402:	9002      	str	r0, [sp, #8]
 8008404:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8008408:	e9cd 8000 	strd	r8, r0, [sp]
 800840c:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800840e:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8008412:	4481      	add	r9, r0
 8008414:	4404      	add	r4, r0
 8008416:	4630      	mov	r0, r6
 8008418:	3604      	adds	r6, #4
 800841a:	e9c7 3223 	strd	r3, r2, [r7, #140]	@ 0x8c
 800841e:	f7ff fc55 	bl	8007ccc <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8008422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008424:	42b3      	cmp	r3, r6
 8008426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800842a:	e9d7 2124 	ldrd	r2, r1, [r7, #144]	@ 0x90
 800842e:	d199      	bne.n	8008364 <forward_lite_conv2d_if32of32wf32_pool+0x46c>
 8008430:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8008434:	ee19 3a90 	vmov	r3, s19
 8008438:	469d      	mov	sp, r3
 800843a:	e707      	b.n	800824c <forward_lite_conv2d_if32of32wf32_pool+0x354>
 800843c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008440:	68f9      	ldr	r1, [r7, #12]
 8008442:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008446:	e6ae      	b.n	80081a6 <forward_lite_conv2d_if32of32wf32_pool+0x2ae>
 8008448:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800844c:	6e7c      	ldr	r4, [r7, #100]	@ 0x64
 800844e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8008452:	4489      	add	r9, r1
 8008454:	3301      	adds	r3, #1
 8008456:	45cb      	cmp	fp, r9
 8008458:	b21a      	sxth	r2, r3
 800845a:	bf98      	it	ls
 800845c:	44a1      	addls	r9, r4
 800845e:	4282      	cmp	r2, r0
 8008460:	dbf7      	blt.n	8008452 <forward_lite_conv2d_if32of32wf32_pool+0x55a>
 8008462:	e721      	b.n	80082a8 <forward_lite_conv2d_if32of32wf32_pool+0x3b0>
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	464c      	mov	r4, r9
 8008468:	f8c7 a090 	str.w	sl, [r7, #144]	@ 0x90
 800846c:	eb09 0603 	add.w	r6, r9, r3
 8008470:	f8c7 b08c 	str.w	fp, [r7, #140]	@ 0x8c
 8008474:	f8c7 9084 	str.w	r9, [r7, #132]	@ 0x84
 8008478:	4693      	mov	fp, r2
 800847a:	46b2      	mov	sl, r6
 800847c:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 800847e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	@ 0xb8
 8008482:	ee19 3a10 	vmov	r3, s18
 8008486:	f8d7 907c 	ldr.w	r9, [r7, #124]	@ 0x7c
 800848a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800848e:	4620      	mov	r0, r4
 8008490:	3404      	adds	r4, #4
 8008492:	eeb0 0a48 	vmov.f32	s0, s16
 8008496:	9207      	str	r2, [sp, #28]
 8008498:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800849c:	9604      	str	r6, [sp, #16]
 800849e:	e9cd b205 	strd	fp, r2, [sp, #20]
 80084a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80084a6:	9203      	str	r2, [sp, #12]
 80084a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084ac:	9202      	str	r2, [sp, #8]
 80084ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084b2:	e9cd 8200 	strd	r8, r2, [sp]
 80084b6:	462a      	mov	r2, r5
 80084b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80084bc:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80084c0:	444d      	add	r5, r9
 80084c2:	f7ff fc03 	bl	8007ccc <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80084c6:	45a2      	cmp	sl, r4
 80084c8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80084cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80084d0:	d1db      	bne.n	800848a <forward_lite_conv2d_if32of32wf32_pool+0x592>
 80084d2:	f8d7 9084 	ldr.w	r9, [r7, #132]	@ 0x84
 80084d6:	e9d7 ba23 	ldrd	fp, sl, [r7, #140]	@ 0x8c
 80084da:	e6b7      	b.n	800824c <forward_lite_conv2d_if32of32wf32_pool+0x354>

080084dc <forward_lite_nl_relu_generic_if32of32_kernel>:
 80084dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80084e0:	ed93 7a00 	vldr	s14, [r3]
 80084e4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80084e8:	ed93 6a01 	vldr	s12, [r3, #4]
 80084ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f0:	d42b      	bmi.n	800854a <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 80084f2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80084f6:	4413      	add	r3, r2
 80084f8:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80084fc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008500:	4291      	cmp	r1, r2
 8008502:	d821      	bhi.n	8008548 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8008504:	f10c 0104 	add.w	r1, ip, #4
 8008508:	1d13      	adds	r3, r2, #4
 800850a:	eba2 020c 	sub.w	r2, r2, ip
 800850e:	4408      	add	r0, r1
 8008510:	e00c      	b.n	800852c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8008512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008516:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851e:	db01      	blt.n	8008524 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8008520:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008524:	4293      	cmp	r3, r2
 8008526:	ed60 7a01 	vstmdb	r0!, {s15}
 800852a:	d00c      	beq.n	8008546 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 800852c:	ed73 7a01 	vldmdb	r3!, {s15}
 8008530:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008538:	daeb      	bge.n	8008512 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 800853a:	eef0 7a66 	vmov.f32	s15, s13
 800853e:	4293      	cmp	r3, r2
 8008540:	ed60 7a01 	vstmdb	r0!, {s15}
 8008544:	d1f2      	bne.n	800852c <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8008546:	4770      	bx	lr
 8008548:	4770      	bx	lr
 800854a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800854e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008552:	4413      	add	r3, r2
 8008554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008558:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 800855c:	b500      	push	{lr}
 800855e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8008562:	d019      	beq.n	8008598 <forward_lite_nl_relu_generic_if32of32_kernel+0xbc>
 8008564:	4561      	cmp	r1, ip
 8008566:	d815      	bhi.n	8008594 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 8008568:	f10e 0204 	add.w	r2, lr, #4
 800856c:	f10c 0304 	add.w	r3, ip, #4
 8008570:	ebac 010e 	sub.w	r1, ip, lr
 8008574:	4402      	add	r2, r0
 8008576:	ed73 7a01 	vldmdb	r3!, {s15}
 800857a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800857e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008586:	ee66 6a86 	vmul.f32	s13, s13, s12
 800858a:	d827      	bhi.n	80085dc <forward_lite_nl_relu_generic_if32of32_kernel+0x100>
 800858c:	428b      	cmp	r3, r1
 800858e:	ed62 6a01 	vstmdb	r2!, {s13}
 8008592:	d1f0      	bne.n	8008576 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 8008594:	f85d fb04 	ldr.w	pc, [sp], #4
 8008598:	4561      	cmp	r1, ip
 800859a:	d8fb      	bhi.n	8008594 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 800859c:	f10e 0204 	add.w	r2, lr, #4
 80085a0:	f10c 0304 	add.w	r3, ip, #4
 80085a4:	ebac 010e 	sub.w	r1, ip, lr
 80085a8:	f04f 0c00 	mov.w	ip, #0
 80085ac:	4402      	add	r2, r0
 80085ae:	ed73 7a01 	vldmdb	r3!, {s15}
 80085b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ba:	d40a      	bmi.n	80085d2 <forward_lite_nl_relu_generic_if32of32_kernel+0xf6>
 80085bc:	428b      	cmp	r3, r1
 80085be:	f842 cd04 	str.w	ip, [r2, #-4]!
 80085c2:	d0e7      	beq.n	8008594 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80085c4:	ed73 7a01 	vldmdb	r3!, {s15}
 80085c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d0:	d5f4      	bpl.n	80085bc <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 80085d2:	428b      	cmp	r3, r1
 80085d4:	ed62 7a01 	vstmdb	r2!, {s15}
 80085d8:	d1e9      	bne.n	80085ae <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 80085da:	e7db      	b.n	8008594 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80085dc:	428b      	cmp	r3, r1
 80085de:	ed62 7a01 	vstmdb	r2!, {s15}
 80085e2:	d1c8      	bne.n	8008576 <forward_lite_nl_relu_generic_if32of32_kernel+0x9a>
 80085e4:	e7d6      	b.n	8008594 <forward_lite_nl_relu_generic_if32of32_kernel+0xb8>
 80085e6:	bf00      	nop

080085e8 <pool_func_mp_array_f32>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	b091      	sub	sp, #68	@ 0x44
 80085ee:	468b      	mov	fp, r1
 80085f0:	469c      	mov	ip, r3
 80085f2:	4690      	mov	r8, r2
 80085f4:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 80085f8:	4681      	mov	r9, r0
 80085fa:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80085fe:	9101      	str	r1, [sp, #4]
 8008600:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8008604:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 8008608:	9105      	str	r1, [sp, #20]
 800860a:	f8bd 107c 	ldrh.w	r1, [sp, #124]	@ 0x7c
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	9106      	str	r1, [sp, #24]
 8008612:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8008616:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 800861a:	ea52 0403 	orrs.w	r4, r2, r3
 800861e:	9102      	str	r1, [sp, #8]
 8008620:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8008624:	9103      	str	r1, [sp, #12]
 8008626:	d173      	bne.n	8008710 <pool_func_mp_array_f32+0x128>
 8008628:	9904      	ldr	r1, [sp, #16]
 800862a:	9d02      	ldr	r5, [sp, #8]
 800862c:	eba1 000b 	sub.w	r0, r1, fp
 8008630:	9e05      	ldr	r6, [sp, #20]
 8008632:	1e69      	subs	r1, r5, #1
 8008634:	3801      	subs	r0, #1
 8008636:	fb11 0106 	smlabb	r1, r1, r6, r0
 800863a:	0409      	lsls	r1, r1, #16
 800863c:	d568      	bpl.n	8008710 <pool_func_mp_array_f32+0x128>
 800863e:	9901      	ldr	r1, [sp, #4]
 8008640:	9e03      	ldr	r6, [sp, #12]
 8008642:	eba1 0008 	sub.w	r0, r1, r8
 8008646:	9f06      	ldr	r7, [sp, #24]
 8008648:	1e71      	subs	r1, r6, #1
 800864a:	3801      	subs	r0, #1
 800864c:	fb11 0107 	smlabb	r1, r1, r7, r0
 8008650:	040f      	lsls	r7, r1, #16
 8008652:	d55d      	bpl.n	8008710 <pool_func_mp_array_f32+0x128>
 8008654:	2e00      	cmp	r6, #0
 8008656:	d058      	beq.n	800870a <pool_func_mp_array_f32+0x122>
 8008658:	2d00      	cmp	r5, #0
 800865a:	d056      	beq.n	800870a <pool_func_mp_array_f32+0x122>
 800865c:	4663      	mov	r3, ip
 800865e:	2b00      	cmp	r3, #0
 8008660:	d053      	beq.n	800870a <pool_func_mp_array_f32+0x122>
 8008662:	2b01      	cmp	r3, #1
 8008664:	f040 814a 	bne.w	80088fc <pool_func_mp_array_f32+0x314>
 8008668:	46a2      	mov	sl, r4
 800866a:	4623      	mov	r3, r4
 800866c:	9407      	str	r4, [sp, #28]
 800866e:	9a02      	ldr	r2, [sp, #8]
 8008670:	2700      	movs	r7, #0
 8008672:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
 8008676:	fb02 f303 	mul.w	r3, r2, r3
 800867a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800867e:	46be      	mov	lr, r7
 8008680:	46bc      	mov	ip, r7
 8008682:	9308      	str	r3, [sp, #32]
 8008684:	fa0f f38a 	sxth.w	r3, sl
 8008688:	9309      	str	r3, [sp, #36]	@ 0x24
 800868a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800868c:	b23d      	sxth	r5, r7
 800868e:	9b08      	ldr	r3, [sp, #32]
 8008690:	fa0f f088 	sxth.w	r0, r8
 8008694:	42b4      	cmp	r4, r6
 8008696:	eddf 7a98 	vldr	s15, [pc, #608]	@ 80088f8 <pool_func_mp_array_f32+0x310>
 800869a:	449c      	add	ip, r3
 800869c:	da12      	bge.n	80086c4 <pool_func_mp_array_f32+0xdc>
 800869e:	4285      	cmp	r5, r0
 80086a0:	da0c      	bge.n	80086bc <pool_func_mp_array_f32+0xd4>
 80086a2:	fb04 520b 	mla	r2, r4, fp, r5
 80086a6:	462b      	mov	r3, r5
 80086a8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80086ac:	3301      	adds	r3, #1
 80086ae:	ecb2 7a01 	vldmia	r2!, {s14}
 80086b2:	b219      	sxth	r1, r3
 80086b4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80086b8:	4281      	cmp	r1, r0
 80086ba:	dbf7      	blt.n	80086ac <pool_func_mp_array_f32+0xc4>
 80086bc:	3401      	adds	r4, #1
 80086be:	b224      	sxth	r4, r4
 80086c0:	42b4      	cmp	r4, r6
 80086c2:	dbec      	blt.n	800869e <pool_func_mp_array_f32+0xb6>
 80086c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80086c6:	f10e 0e01 	add.w	lr, lr, #1
 80086ca:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	fa0f fe8e 	sxth.w	lr, lr
 80086d4:	4498      	add	r8, r3
 80086d6:	441f      	add	r7, r3
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	edcc 7a00 	vstr	s15, [ip]
 80086de:	fa1f f888 	uxth.w	r8, r8
 80086e2:	4573      	cmp	r3, lr
 80086e4:	b2bf      	uxth	r7, r7
 80086e6:	46f4      	mov	ip, lr
 80086e8:	dccf      	bgt.n	800868a <pool_func_mp_array_f32+0xa2>
 80086ea:	9a07      	ldr	r2, [sp, #28]
 80086ec:	9906      	ldr	r1, [sp, #24]
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	3201      	adds	r2, #1
 80086f2:	448a      	add	sl, r1
 80086f4:	b212      	sxth	r2, r2
 80086f6:	440b      	add	r3, r1
 80086f8:	9903      	ldr	r1, [sp, #12]
 80086fa:	fa1f fa8a 	uxth.w	sl, sl
 80086fe:	b29b      	uxth	r3, r3
 8008700:	9207      	str	r2, [sp, #28]
 8008702:	4291      	cmp	r1, r2
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	dcb1      	bgt.n	800866e <pool_func_mp_array_f32+0x86>
 800870a:	b011      	add	sp, #68	@ 0x44
 800870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008710:	9903      	ldr	r1, [sp, #12]
 8008712:	2900      	cmp	r1, #0
 8008714:	d0f9      	beq.n	800870a <pool_func_mp_array_f32+0x122>
 8008716:	9902      	ldr	r1, [sp, #8]
 8008718:	2900      	cmp	r1, #0
 800871a:	d0f6      	beq.n	800870a <pool_func_mp_array_f32+0x122>
 800871c:	4661      	mov	r1, ip
 800871e:	2900      	cmp	r1, #0
 8008720:	d0f3      	beq.n	800870a <pool_func_mp_array_f32+0x122>
 8008722:	2901      	cmp	r1, #1
 8008724:	9901      	ldr	r1, [sp, #4]
 8008726:	d163      	bne.n	80087f0 <pool_func_mp_array_f32+0x208>
 8008728:	1a8a      	subs	r2, r1, r2
 800872a:	9904      	ldr	r1, [sp, #16]
 800872c:	1ac9      	subs	r1, r1, r3
 800872e:	425b      	negs	r3, r3
 8008730:	b292      	uxth	r2, r2
 8008732:	b29b      	uxth	r3, r3
 8008734:	9204      	str	r2, [sp, #16]
 8008736:	b28a      	uxth	r2, r1
 8008738:	930b      	str	r3, [sp, #44]	@ 0x2c
 800873a:	2300      	movs	r3, #0
 800873c:	920a      	str	r2, [sp, #40]	@ 0x28
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	9a02      	ldr	r2, [sp, #8]
 8008742:	2700      	movs	r7, #0
 8008744:	fb02 f303 	mul.w	r3, r2, r3
 8008748:	9a04      	ldr	r2, [sp, #16]
 800874a:	46bc      	mov	ip, r7
 800874c:	9308      	str	r3, [sp, #32]
 800874e:	b216      	sxth	r6, r2
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	e9dd ae0a 	ldrd	sl, lr, [sp, #40]	@ 0x28
 8008758:	b21b      	sxth	r3, r3
 800875a:	9309      	str	r3, [sp, #36]	@ 0x24
 800875c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800875e:	fa0f f58e 	sxth.w	r5, lr
 8008762:	9b08      	ldr	r3, [sp, #32]
 8008764:	fa0f f48a 	sxth.w	r4, sl
 8008768:	428e      	cmp	r6, r1
 800876a:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80088f8 <pool_func_mp_array_f32+0x310>
 800876e:	449c      	add	ip, r3
 8008770:	dd1c      	ble.n	80087ac <pool_func_mp_array_f32+0x1c4>
 8008772:	42a5      	cmp	r5, r4
 8008774:	da16      	bge.n	80087a4 <pool_func_mp_array_f32+0x1bc>
 8008776:	4588      	cmp	r8, r1
 8008778:	fb01 f20b 	mul.w	r2, r1, fp
 800877c:	dd12      	ble.n	80087a4 <pool_func_mp_array_f32+0x1bc>
 800877e:	442a      	add	r2, r5
 8008780:	462b      	mov	r3, r5
 8008782:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8008786:	ea41 0003 	orr.w	r0, r1, r3
 800878a:	0400      	lsls	r0, r0, #16
 800878c:	d405      	bmi.n	800879a <pool_func_mp_array_f32+0x1b2>
 800878e:	459b      	cmp	fp, r3
 8008790:	dd03      	ble.n	800879a <pool_func_mp_array_f32+0x1b2>
 8008792:	ed92 7a00 	vldr	s14, [r2]
 8008796:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800879a:	3301      	adds	r3, #1
 800879c:	3204      	adds	r2, #4
 800879e:	b218      	sxth	r0, r3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	dbf0      	blt.n	8008786 <pool_func_mp_array_f32+0x19e>
 80087a4:	3101      	adds	r1, #1
 80087a6:	b209      	sxth	r1, r1
 80087a8:	42b1      	cmp	r1, r6
 80087aa:	dbe2      	blt.n	8008772 <pool_func_mp_array_f32+0x18a>
 80087ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80087ae:	3701      	adds	r7, #1
 80087b0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80087b4:	9b05      	ldr	r3, [sp, #20]
 80087b6:	b23f      	sxth	r7, r7
 80087b8:	449a      	add	sl, r3
 80087ba:	449e      	add	lr, r3
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	edcc 7a00 	vstr	s15, [ip]
 80087c2:	fa1f fa8a 	uxth.w	sl, sl
 80087c6:	42bb      	cmp	r3, r7
 80087c8:	fa1f fe8e 	uxth.w	lr, lr
 80087cc:	46bc      	mov	ip, r7
 80087ce:	dcc5      	bgt.n	800875c <pool_func_mp_array_f32+0x174>
 80087d0:	9a07      	ldr	r2, [sp, #28]
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	9906      	ldr	r1, [sp, #24]
 80087d6:	3201      	adds	r2, #1
 80087d8:	440b      	add	r3, r1
 80087da:	b212      	sxth	r2, r2
 80087dc:	9903      	ldr	r1, [sp, #12]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	9207      	str	r2, [sp, #28]
 80087e2:	4291      	cmp	r1, r2
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	4613      	mov	r3, r2
 80087e8:	dcaa      	bgt.n	8008740 <pool_func_mp_array_f32+0x158>
 80087ea:	b011      	add	sp, #68	@ 0x44
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	1a88      	subs	r0, r1, r2
 80087f2:	9904      	ldr	r1, [sp, #16]
 80087f4:	4252      	negs	r2, r2
 80087f6:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 80087fa:	1ac9      	subs	r1, r1, r3
 80087fc:	425b      	negs	r3, r3
 80087fe:	b292      	uxth	r2, r2
 8008800:	46e6      	mov	lr, ip
 8008802:	b29b      	uxth	r3, r3
 8008804:	b280      	uxth	r0, r0
 8008806:	9208      	str	r2, [sp, #32]
 8008808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800880a:	b28a      	uxth	r2, r1
 800880c:	2300      	movs	r3, #0
 800880e:	9007      	str	r0, [sp, #28]
 8008810:	920e      	str	r2, [sp, #56]	@ 0x38
 8008812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008814:	9a02      	ldr	r2, [sp, #8]
 8008816:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8008822:	920a      	str	r2, [sp, #40]	@ 0x28
 8008824:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008826:	930d      	str	r3, [sp, #52]	@ 0x34
 8008828:	2300      	movs	r3, #0
 800882a:	9201      	str	r2, [sp, #4]
 800882c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800882e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008830:	9204      	str	r2, [sp, #16]
 8008832:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008834:	f04f 0c00 	mov.w	ip, #0
 8008838:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 800883c:	4413      	add	r3, r2
 800883e:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
 8008842:	4667      	mov	r7, ip
 8008844:	fb0e f303 	mul.w	r3, lr, r3
 8008848:	9309      	str	r3, [sp, #36]	@ 0x24
 800884a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800884c:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 80088f8 <pool_func_mp_array_f32+0x310>
 8008850:	42b1      	cmp	r1, r6
 8008852:	da1e      	bge.n	8008892 <pool_func_mp_array_f32+0x2aa>
 8008854:	42a5      	cmp	r5, r4
 8008856:	da18      	bge.n	800888a <pool_func_mp_array_f32+0x2a2>
 8008858:	4541      	cmp	r1, r8
 800885a:	fb01 f30b 	mul.w	r3, r1, fp
 800885e:	da14      	bge.n	800888a <pool_func_mp_array_f32+0x2a2>
 8008860:	195a      	adds	r2, r3, r5
 8008862:	462b      	mov	r3, r5
 8008864:	fb0e 7202 	mla	r2, lr, r2, r7
 8008868:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800886c:	ea41 0003 	orr.w	r0, r1, r3
 8008870:	0400      	lsls	r0, r0, #16
 8008872:	d405      	bmi.n	8008880 <pool_func_mp_array_f32+0x298>
 8008874:	459b      	cmp	fp, r3
 8008876:	dd03      	ble.n	8008880 <pool_func_mp_array_f32+0x298>
 8008878:	ed92 7a00 	vldr	s14, [r2]
 800887c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008880:	3301      	adds	r3, #1
 8008882:	4452      	add	r2, sl
 8008884:	b218      	sxth	r0, r3
 8008886:	42a0      	cmp	r0, r4
 8008888:	dbf0      	blt.n	800886c <pool_func_mp_array_f32+0x284>
 800888a:	3101      	adds	r1, #1
 800888c:	b209      	sxth	r1, r1
 800888e:	42b1      	cmp	r1, r6
 8008890:	dbe0      	blt.n	8008854 <pool_func_mp_array_f32+0x26c>
 8008892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008894:	f10c 0c01 	add.w	ip, ip, #1
 8008898:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800889a:	443b      	add	r3, r7
 800889c:	fa0f fc8c 	sxth.w	ip, ip
 80088a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088a4:	45f4      	cmp	ip, lr
 80088a6:	4667      	mov	r7, ip
 80088a8:	edc3 7a00 	vstr	s15, [r3]
 80088ac:	dbcd      	blt.n	800884a <pool_func_mp_array_f32+0x262>
 80088ae:	9a01      	ldr	r2, [sp, #4]
 80088b0:	9805      	ldr	r0, [sp, #20]
 80088b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80088b4:	4402      	add	r2, r0
 80088b6:	9b04      	ldr	r3, [sp, #16]
 80088b8:	3101      	adds	r1, #1
 80088ba:	b292      	uxth	r2, r2
 80088bc:	4403      	add	r3, r0
 80088be:	b209      	sxth	r1, r1
 80088c0:	9201      	str	r2, [sp, #4]
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	9a02      	ldr	r2, [sp, #8]
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	460b      	mov	r3, r1
 80088ca:	428a      	cmp	r2, r1
 80088cc:	910c      	str	r1, [sp, #48]	@ 0x30
 80088ce:	dcb0      	bgt.n	8008832 <pool_func_mp_array_f32+0x24a>
 80088d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088d2:	9b08      	ldr	r3, [sp, #32]
 80088d4:	3101      	adds	r1, #1
 80088d6:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 80088da:	b209      	sxth	r1, r1
 80088dc:	4402      	add	r2, r0
 80088de:	4403      	add	r3, r0
 80088e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088e2:	b292      	uxth	r2, r2
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	9207      	str	r2, [sp, #28]
 80088e8:	9a03      	ldr	r2, [sp, #12]
 80088ea:	9308      	str	r3, [sp, #32]
 80088ec:	460b      	mov	r3, r1
 80088ee:	428a      	cmp	r2, r1
 80088f0:	dc90      	bgt.n	8008814 <pool_func_mp_array_f32+0x22c>
 80088f2:	b011      	add	sp, #68	@ 0x44
 80088f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	cf000000 	.word	0xcf000000
 80088fc:	4623      	mov	r3, r4
 80088fe:	ea4f 0a8c 	mov.w	sl, ip, lsl #2
 8008902:	46e0      	mov	r8, ip
 8008904:	9408      	str	r4, [sp, #32]
 8008906:	9409      	str	r4, [sp, #36]	@ 0x24
 8008908:	9a02      	ldr	r2, [sp, #8]
 800890a:	f04f 0c00 	mov.w	ip, #0
 800890e:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800891a:	930c      	str	r3, [sp, #48]	@ 0x30
 800891c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8008920:	930d      	str	r3, [sp, #52]	@ 0x34
 8008922:	9b04      	ldr	r3, [sp, #16]
 8008924:	9307      	str	r3, [sp, #28]
 8008926:	4663      	mov	r3, ip
 8008928:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800892a:	f04f 0e00 	mov.w	lr, #0
 800892e:	fa0f f58c 	sxth.w	r5, ip
 8008932:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8008936:	4413      	add	r3, r2
 8008938:	4676      	mov	r6, lr
 800893a:	fb08 f303 	mul.w	r3, r8, r3
 800893e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008940:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8008942:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 80088f8 <pool_func_mp_array_f32+0x310>
 8008946:	42bc      	cmp	r4, r7
 8008948:	da15      	bge.n	8008976 <pool_func_mp_array_f32+0x38e>
 800894a:	4285      	cmp	r5, r0
 800894c:	da0f      	bge.n	800896e <pool_func_mp_array_f32+0x386>
 800894e:	fb0b 5304 	mla	r3, fp, r4, r5
 8008952:	462a      	mov	r2, r5
 8008954:	fb08 6303 	mla	r3, r8, r3, r6
 8008958:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800895c:	3201      	adds	r2, #1
 800895e:	ed93 7a00 	vldr	s14, [r3]
 8008962:	4453      	add	r3, sl
 8008964:	b211      	sxth	r1, r2
 8008966:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800896a:	4281      	cmp	r1, r0
 800896c:	dbf6      	blt.n	800895c <pool_func_mp_array_f32+0x374>
 800896e:	3401      	adds	r4, #1
 8008970:	b224      	sxth	r4, r4
 8008972:	42bc      	cmp	r4, r7
 8008974:	dbe9      	blt.n	800894a <pool_func_mp_array_f32+0x362>
 8008976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008978:	f10e 0e01 	add.w	lr, lr, #1
 800897c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800897e:	4433      	add	r3, r6
 8008980:	fa0f fe8e 	sxth.w	lr, lr
 8008984:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008988:	45c6      	cmp	lr, r8
 800898a:	4676      	mov	r6, lr
 800898c:	edc3 7a00 	vstr	s15, [r3]
 8008990:	dbd6      	blt.n	8008940 <pool_func_mp_array_f32+0x358>
 8008992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008994:	9905      	ldr	r1, [sp, #20]
 8008996:	9b07      	ldr	r3, [sp, #28]
 8008998:	3201      	adds	r2, #1
 800899a:	448c      	add	ip, r1
 800899c:	b212      	sxth	r2, r2
 800899e:	440b      	add	r3, r1
 80089a0:	9902      	ldr	r1, [sp, #8]
 80089a2:	fa1f fc8c 	uxth.w	ip, ip
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80089aa:	4291      	cmp	r1, r2
 80089ac:	9307      	str	r3, [sp, #28]
 80089ae:	4613      	mov	r3, r2
 80089b0:	dcba      	bgt.n	8008928 <pool_func_mp_array_f32+0x340>
 80089b2:	9a01      	ldr	r2, [sp, #4]
 80089b4:	9806      	ldr	r0, [sp, #24]
 80089b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089b8:	4402      	add	r2, r0
 80089ba:	9b08      	ldr	r3, [sp, #32]
 80089bc:	3101      	adds	r1, #1
 80089be:	b292      	uxth	r2, r2
 80089c0:	4403      	add	r3, r0
 80089c2:	b209      	sxth	r1, r1
 80089c4:	9201      	str	r2, [sp, #4]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	9a03      	ldr	r2, [sp, #12]
 80089ca:	9308      	str	r3, [sp, #32]
 80089cc:	460b      	mov	r3, r1
 80089ce:	428a      	cmp	r2, r1
 80089d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80089d2:	dc99      	bgt.n	8008908 <pool_func_mp_array_f32+0x320>
 80089d4:	e699      	b.n	800870a <pool_func_mp_array_f32+0x122>
 80089d6:	bf00      	nop

080089d8 <forward_lite_dense_if32of32wf32>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	ed2d 8b0c 	vpush	{d8-d13}
 80089e0:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 80089e4:	6801      	ldr	r1, [r0, #0]
 80089e6:	b083      	sub	sp, #12
 80089e8:	fb02 f303 	mul.w	r3, r2, r3
 80089ec:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80089f0:	9100      	str	r1, [sp, #0]
 80089f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80089f6:	4299      	cmp	r1, r3
 80089f8:	9301      	str	r3, [sp, #4]
 80089fa:	f080 811c 	bcs.w	8008c36 <forward_lite_dense_if32of32wf32+0x25e>
 80089fe:	4607      	mov	r7, r0
 8008a00:	6904      	ldr	r4, [r0, #16]
 8008a02:	0096      	lsls	r6, r2, #2
 8008a04:	9b00      	ldr	r3, [sp, #0]
 8008a06:	68bd      	ldr	r5, [r7, #8]
 8008a08:	eb03 0e06 	add.w	lr, r3, r6
 8008a0c:	461e      	mov	r6, r3
 8008a0e:	459e      	cmp	lr, r3
 8008a10:	f240 8103 	bls.w	8008c1a <forward_lite_dense_if32of32wf32+0x242>
 8008a14:	f1a4 0c10 	sub.w	ip, r4, #16
 8008a18:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8008a1c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8008a20:	f10c 0c01 	add.w	ip, ip, #1
 8008a24:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8008a28:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8008a2c:	2c0f      	cmp	r4, #15
 8008a2e:	f240 8107 	bls.w	8008c40 <forward_lite_dense_if32of32wf32+0x268>
 8008a32:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8008a36:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8008a3a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8008c90 <forward_lite_dense_if32of32wf32+0x2b8>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8008a44:	3910      	subs	r1, #16
 8008a46:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8008a4a:	3340      	adds	r3, #64	@ 0x40
 8008a4c:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8008a50:	290f      	cmp	r1, #15
 8008a52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008a56:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8008a5a:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8008a5e:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8008a62:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8008a66:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008a6a:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8008a6e:	ed12 da1d 	vldr	s26, [r2, #-116]	@ 0xffffff8c
 8008a72:	ed52 ca1c 	vldr	s25, [r2, #-112]	@ 0xffffff90
 8008a76:	ed13 ca1c 	vldr	s24, [r3, #-112]	@ 0xffffff90
 8008a7a:	ed52 ba1b 	vldr	s23, [r2, #-108]	@ 0xffffff94
 8008a7e:	ed13 ba1b 	vldr	s22, [r3, #-108]	@ 0xffffff94
 8008a82:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008a86:	ed52 aa1a 	vldr	s21, [r2, #-104]	@ 0xffffff98
 8008a8a:	ed13 aa1a 	vldr	s20, [r3, #-104]	@ 0xffffff98
 8008a8e:	ed52 9a19 	vldr	s19, [r2, #-100]	@ 0xffffff9c
 8008a92:	ed13 9a19 	vldr	s18, [r3, #-100]	@ 0xffffff9c
 8008a96:	ed52 8a18 	vldr	s17, [r2, #-96]	@ 0xffffffa0
 8008a9a:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8008a9e:	eeed 7a26 	vfma.f32	s15, s26, s13
 8008aa2:	ed12 0a17 	vldr	s0, [r2, #-92]	@ 0xffffffa4
 8008aa6:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8008aaa:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8008aae:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8008ab2:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 8008ab6:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8008aba:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008abe:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8008ac2:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008ac6:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8008aca:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8008ace:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8008ad2:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8008ad6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008ada:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8008ade:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8008ae2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008ae6:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008aea:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008aee:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008af2:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008af6:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008afa:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008afe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008b02:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008b06:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b0e:	d897      	bhi.n	8008a40 <forward_lite_dense_if32of32wf32+0x68>
 8008b10:	eb05 020b 	add.w	r2, r5, fp
 8008b14:	f004 010f 	and.w	r1, r4, #15
 8008b18:	4663      	mov	r3, ip
 8008b1a:	2903      	cmp	r1, #3
 8008b1c:	d95f      	bls.n	8008bde <forward_lite_dense_if32of32wf32+0x206>
 8008b1e:	edd2 6a01 	vldr	s13, [r2, #4]
 8008b22:	1f08      	subs	r0, r1, #4
 8008b24:	edd3 7a01 	vldr	s15, [r3, #4]
 8008b28:	ed93 4a00 	vldr	s8, [r3]
 8008b2c:	2803      	cmp	r0, #3
 8008b2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b32:	edd2 4a00 	vldr	s9, [r2]
 8008b36:	ed93 5a02 	vldr	s10, [r3, #8]
 8008b3a:	edd2 5a02 	vldr	s11, [r2, #8]
 8008b3e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008b42:	ed93 6a03 	vldr	s12, [r3, #12]
 8008b46:	edd2 6a03 	vldr	s13, [r2, #12]
 8008b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b4e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008b52:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008b56:	eeb0 7a67 	vmov.f32	s14, s15
 8008b5a:	d938      	bls.n	8008bce <forward_lite_dense_if32of32wf32+0x1f6>
 8008b5c:	edd2 6a05 	vldr	s13, [r2, #20]
 8008b60:	f1a1 0a08 	sub.w	sl, r1, #8
 8008b64:	edd3 7a05 	vldr	s15, [r3, #20]
 8008b68:	ed93 4a04 	vldr	s8, [r3, #16]
 8008b6c:	f1ba 0f03 	cmp.w	sl, #3
 8008b70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b74:	edd2 4a04 	vldr	s9, [r2, #16]
 8008b78:	ed93 5a06 	vldr	s10, [r3, #24]
 8008b7c:	edd2 5a06 	vldr	s11, [r2, #24]
 8008b80:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008b84:	ed93 6a07 	vldr	s12, [r3, #28]
 8008b88:	edd2 6a07 	vldr	s13, [r2, #28]
 8008b8c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008b90:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b98:	d919      	bls.n	8008bce <forward_lite_dense_if32of32wf32+0x1f6>
 8008b9a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8008b9e:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8008ba2:	ed92 4a08 	vldr	s8, [r2, #32]
 8008ba6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008baa:	edd3 4a08 	vldr	s9, [r3, #32]
 8008bae:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8008bb2:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8008bb6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008bba:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8008bbe:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8008bc2:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008bc6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008bce:	0880      	lsrs	r0, r0, #2
 8008bd0:	f001 0103 	and.w	r1, r1, #3
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008bda:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8008bde:	b1a9      	cbz	r1, 8008c0c <forward_lite_dense_if32of32wf32+0x234>
 8008be0:	edd3 6a00 	vldr	s13, [r3]
 8008be4:	3901      	subs	r1, #1
 8008be6:	edd2 7a00 	vldr	s15, [r2]
 8008bea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008bee:	d00d      	beq.n	8008c0c <forward_lite_dense_if32of32wf32+0x234>
 8008bf0:	edd3 6a01 	vldr	s13, [r3, #4]
 8008bf4:	2901      	cmp	r1, #1
 8008bf6:	edd2 7a01 	vldr	s15, [r2, #4]
 8008bfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008bfe:	d005      	beq.n	8008c0c <forward_lite_dense_if32of32wf32+0x234>
 8008c00:	edd2 6a02 	vldr	s13, [r2, #8]
 8008c04:	edd3 7a02 	vldr	s15, [r3, #8]
 8008c08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c0c:	eca6 7a01 	vstmia	r6!, {s14}
 8008c10:	45b6      	cmp	lr, r6
 8008c12:	444d      	add	r5, r9
 8008c14:	f63f af0a 	bhi.w	8008a2c <forward_lite_dense_if32of32wf32+0x54>
 8008c18:	697a      	ldr	r2, [r7, #20]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	b9b3      	cbnz	r3, 8008c4c <forward_lite_dense_if32of32wf32+0x274>
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	0096      	lsls	r6, r2, #2
 8008c22:	9901      	ldr	r1, [sp, #4]
 8008c24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008c28:	693c      	ldr	r4, [r7, #16]
 8008c2a:	4299      	cmp	r1, r3
 8008c2c:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8008c30:	9300      	str	r3, [sp, #0]
 8008c32:	f63f aee7 	bhi.w	8008a04 <forward_lite_dense_if32of32wf32+0x2c>
 8008c36:	b003      	add	sp, #12
 8008c38:	ecbd 8b0c 	vpop	{d8-d13}
 8008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c40:	4621      	mov	r1, r4
 8008c42:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8008c90 <forward_lite_dense_if32of32wf32+0x2b8>
 8008c46:	462a      	mov	r2, r5
 8008c48:	4643      	mov	r3, r8
 8008c4a:	e766      	b.n	8008b1a <forward_lite_dense_if32of32wf32+0x142>
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	d0e6      	beq.n	8008c1e <forward_lite_dense_if32of32wf32+0x246>
 8008c50:	9a00      	ldr	r2, [sp, #0]
 8008c52:	ed93 7a00 	vldr	s14, [r3]
 8008c56:	edd2 7a00 	vldr	s15, [r2]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c60:	edc2 7a00 	vstr	s15, [r2]
 8008c64:	697a      	ldr	r2, [r7, #20]
 8008c66:	2a01      	cmp	r2, #1
 8008c68:	d9d9      	bls.n	8008c1e <forward_lite_dense_if32of32wf32+0x246>
 8008c6a:	1d19      	adds	r1, r3, #4
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	ed91 7a00 	vldr	s14, [r1]
 8008c74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008c78:	3301      	adds	r3, #1
 8008c7a:	edd2 7a00 	vldr	s15, [r2]
 8008c7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c82:	ece1 7a01 	vstmia	r1!, {s15}
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d8f0      	bhi.n	8008c6e <forward_lite_dense_if32of32wf32+0x296>
 8008c8c:	e7c7      	b.n	8008c1e <forward_lite_dense_if32of32wf32+0x246>
 8008c8e:	bf00      	nop
 8008c90:	00000000 	.word	0x00000000

08008c94 <forward_lite_nl_relu_if32of32>:
 8008c94:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008c98:	4413      	add	r3, r2
 8008c9a:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8008c9e:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008ca2:	4291      	cmp	r1, r2
 8008ca4:	d80f      	bhi.n	8008cc6 <forward_lite_nl_relu_if32of32+0x32>
 8008ca6:	f10c 0104 	add.w	r1, ip, #4
 8008caa:	1d13      	adds	r3, r2, #4
 8008cac:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8008cc8 <forward_lite_nl_relu_if32of32+0x34>
 8008cb0:	eba2 020c 	sub.w	r2, r2, ip
 8008cb4:	4408      	add	r0, r1
 8008cb6:	ed73 7a01 	vldmdb	r3!, {s15}
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008cc0:	ed60 7a01 	vstmdb	r0!, {s15}
 8008cc4:	d1f7      	bne.n	8008cb6 <forward_lite_nl_relu_if32of32+0x22>
 8008cc6:	4770      	bx	lr
 8008cc8:	00000000 	.word	0x00000000

08008ccc <st_int8_copy>:
 8008ccc:	4288      	cmp	r0, r1
 8008cce:	d010      	beq.n	8008cf2 <st_int8_copy+0x26>
 8008cd0:	b17a      	cbz	r2, 8008cf2 <st_int8_copy+0x26>
 8008cd2:	4288      	cmp	r0, r1
 8008cd4:	eb00 0302 	add.w	r3, r0, r2
 8008cd8:	d20c      	bcs.n	8008cf4 <st_int8_copy+0x28>
 8008cda:	428b      	cmp	r3, r1
 8008cdc:	d90a      	bls.n	8008cf4 <st_int8_copy+0x28>
 8008cde:	4283      	cmp	r3, r0
 8008ce0:	440a      	add	r2, r1
 8008ce2:	d906      	bls.n	8008cf2 <st_int8_copy+0x26>
 8008ce4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008ce8:	4283      	cmp	r3, r0
 8008cea:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008cee:	d1f9      	bne.n	8008ce4 <st_int8_copy+0x18>
 8008cf0:	4770      	bx	lr
 8008cf2:	4770      	bx	lr
 8008cf4:	078b      	lsls	r3, r1, #30
 8008cf6:	d102      	bne.n	8008cfe <st_int8_copy+0x32>
 8008cf8:	e008      	b.n	8008d0c <st_int8_copy+0x40>
 8008cfa:	2a00      	cmp	r2, #0
 8008cfc:	d04c      	beq.n	8008d98 <st_int8_copy+0xcc>
 8008cfe:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008d02:	3a01      	subs	r2, #1
 8008d04:	f801 3b01 	strb.w	r3, [r1], #1
 8008d08:	078b      	lsls	r3, r1, #30
 8008d0a:	d1f6      	bne.n	8008cfa <st_int8_copy+0x2e>
 8008d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008d14:	d05d      	beq.n	8008dd2 <st_int8_copy+0x106>
 8008d16:	ea41 0300 	orr.w	r3, r1, r0
 8008d1a:	075b      	lsls	r3, r3, #29
 8008d1c:	d13d      	bne.n	8008d9a <st_int8_copy+0xce>
 8008d1e:	f1be 0f01 	cmp.w	lr, #1
 8008d22:	d03a      	beq.n	8008d9a <st_int8_copy+0xce>
 8008d24:	f100 0310 	add.w	r3, r0, #16
 8008d28:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008d2c:	f101 0c10 	add.w	ip, r1, #16
 8008d30:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008d34:	3310      	adds	r3, #16
 8008d36:	f10c 0c10 	add.w	ip, ip, #16
 8008d3a:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8008d3e:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8008d42:	4573      	cmp	r3, lr
 8008d44:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 8008d48:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 8008d4c:	d1f2      	bne.n	8008d34 <st_int8_copy+0x68>
 8008d4e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008d52:	4421      	add	r1, r4
 8008d54:	4420      	add	r0, r4
 8008d56:	f002 0203 	and.w	r2, r2, #3
 8008d5a:	b16b      	cbz	r3, 8008d78 <st_int8_copy+0xac>
 8008d5c:	6804      	ldr	r4, [r0, #0]
 8008d5e:	600c      	str	r4, [r1, #0]
 8008d60:	1e5c      	subs	r4, r3, #1
 8008d62:	d005      	beq.n	8008d70 <st_int8_copy+0xa4>
 8008d64:	6845      	ldr	r5, [r0, #4]
 8008d66:	2c01      	cmp	r4, #1
 8008d68:	604d      	str	r5, [r1, #4]
 8008d6a:	d001      	beq.n	8008d70 <st_int8_copy+0xa4>
 8008d6c:	6884      	ldr	r4, [r0, #8]
 8008d6e:	608c      	str	r4, [r1, #8]
 8008d70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008d74:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008d78:	b162      	cbz	r2, 8008d94 <st_int8_copy+0xc8>
 8008d7a:	f990 3000 	ldrsb.w	r3, [r0]
 8008d7e:	3a01      	subs	r2, #1
 8008d80:	700b      	strb	r3, [r1, #0]
 8008d82:	d007      	beq.n	8008d94 <st_int8_copy+0xc8>
 8008d84:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008d88:	2a01      	cmp	r2, #1
 8008d8a:	704b      	strb	r3, [r1, #1]
 8008d8c:	d002      	beq.n	8008d94 <st_int8_copy+0xc8>
 8008d8e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8008d92:	708b      	strb	r3, [r1, #2]
 8008d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d98:	4770      	bx	lr
 8008d9a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008d9e:	460b      	mov	r3, r1
 8008da0:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8008da4:	4684      	mov	ip, r0
 8008da6:	f8dc 8000 	ldr.w	r8, [ip]
 8008daa:	3310      	adds	r3, #16
 8008dac:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8008db0:	f10c 0c10 	add.w	ip, ip, #16
 8008db4:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8008db8:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8008dbc:	f843 8c10 	str.w	r8, [r3, #-16]
 8008dc0:	f843 7c0c 	str.w	r7, [r3, #-12]
 8008dc4:	f843 6c08 	str.w	r6, [r3, #-8]
 8008dc8:	f843 5c04 	str.w	r5, [r3, #-4]
 8008dcc:	459e      	cmp	lr, r3
 8008dce:	d1ea      	bne.n	8008da6 <st_int8_copy+0xda>
 8008dd0:	e7bd      	b.n	8008d4e <st_int8_copy+0x82>
 8008dd2:	0893      	lsrs	r3, r2, #2
 8008dd4:	f002 0203 	and.w	r2, r2, #3
 8008dd8:	e7bf      	b.n	8008d5a <st_int8_copy+0x8e>
 8008dda:	bf00      	nop

08008ddc <ai_array_to_buffer_fmt>:
 8008ddc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d053      	beq.n	8008e8c <ai_array_to_buffer_fmt+0xb0>
 8008de4:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8008de8:	4a2b      	ldr	r2, [pc, #172]	@ (8008e98 <ai_array_to_buffer_fmt+0xbc>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d010      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008dee:	dc21      	bgt.n	8008e34 <ai_array_to_buffer_fmt+0x58>
 8008df0:	4a2a      	ldr	r2, [pc, #168]	@ (8008e9c <ai_array_to_buffer_fmt+0xc0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00c      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008df6:	dd0f      	ble.n	8008e18 <ai_array_to_buffer_fmt+0x3c>
 8008df8:	4a29      	ldr	r2, [pc, #164]	@ (8008ea0 <ai_array_to_buffer_fmt+0xc4>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d008      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008dfe:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d004      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e06:	4a27      	ldr	r2, [pc, #156]	@ (8008ea4 <ai_array_to_buffer_fmt+0xc8>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	bf0c      	ite	eq
 8008e0c:	4613      	moveq	r3, r2
 8008e0e:	2340      	movne	r3, #64	@ 0x40
 8008e10:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008e14:	4318      	orrs	r0, r3
 8008e16:	4770      	bx	lr
 8008e18:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d0f7      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e20:	dd2a      	ble.n	8008e78 <ai_array_to_buffer_fmt+0x9c>
 8008e22:	4a21      	ldr	r2, [pc, #132]	@ (8008ea8 <ai_array_to_buffer_fmt+0xcc>)
 8008e24:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	bf0c      	ite	eq
 8008e2c:	4613      	moveq	r3, r2
 8008e2e:	2340      	movne	r3, #64	@ 0x40
 8008e30:	4318      	orrs	r0, r3
 8008e32:	4770      	bx	lr
 8008e34:	4a1d      	ldr	r2, [pc, #116]	@ (8008eac <ai_array_to_buffer_fmt+0xd0>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d0ea      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e3a:	dd0f      	ble.n	8008e5c <ai_array_to_buffer_fmt+0x80>
 8008e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb0 <ai_array_to_buffer_fmt+0xd4>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d0e6      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e42:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d0e2      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e4a:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb4 <ai_array_to_buffer_fmt+0xd8>)
 8008e4c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008e50:	4293      	cmp	r3, r2
 8008e52:	bf0c      	ite	eq
 8008e54:	4613      	moveq	r3, r2
 8008e56:	2340      	movne	r3, #64	@ 0x40
 8008e58:	4318      	orrs	r0, r3
 8008e5a:	4770      	bx	lr
 8008e5c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d0d5      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e64:	3207      	adds	r2, #7
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d0d2      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e6a:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	bf0c      	ite	eq
 8008e72:	4613      	moveq	r3, r2
 8008e74:	2340      	movne	r3, #64	@ 0x40
 8008e76:	e7cb      	b.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e78:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d0c7      	beq.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e80:	3280      	adds	r2, #128	@ 0x80
 8008e82:	4293      	cmp	r3, r2
 8008e84:	bf0c      	ite	eq
 8008e86:	4613      	moveq	r3, r2
 8008e88:	2340      	movne	r3, #64	@ 0x40
 8008e8a:	e7c1      	b.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <ai_array_to_buffer_fmt+0xdc>)
 8008e8e:	4003      	ands	r3, r0
 8008e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e94:	e7bc      	b.n	8008e10 <ai_array_to_buffer_fmt+0x34>
 8008e96:	bf00      	nop
 8008e98:	00840040 	.word	0x00840040
 8008e9c:	00040840 	.word	0x00040840
 8008ea0:	00041040 	.word	0x00041040
 8008ea4:	0004084f 	.word	0x0004084f
 8008ea8:	00040447 	.word	0x00040447
 8008eac:	00840840 	.word	0x00840840
 8008eb0:	00841040 	.word	0x00841040
 8008eb4:	0084084f 	.word	0x0084084f
 8008eb8:	00803fff 	.word	0x00803fff

08008ebc <ai_array_get_byte_size>:
 8008ebc:	b319      	cbz	r1, 8008f06 <ai_array_get_byte_size+0x4a>
 8008ebe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008ec2:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008ec6:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8008eca:	11c0      	asrs	r0, r0, #7
 8008ecc:	fb01 f303 	mul.w	r3, r1, r3
 8008ed0:	2a04      	cmp	r2, #4
 8008ed2:	f103 0307 	add.w	r3, r3, #7
 8008ed6:	f023 0307 	bic.w	r3, r3, #7
 8008eda:	fa23 f10c 	lsr.w	r1, r3, ip
 8008ede:	d00b      	beq.n	8008ef8 <ai_array_get_byte_size+0x3c>
 8008ee0:	2a08      	cmp	r2, #8
 8008ee2:	d002      	beq.n	8008eea <ai_array_get_byte_size+0x2e>
 8008ee4:	3107      	adds	r1, #7
 8008ee6:	08c8      	lsrs	r0, r1, #3
 8008ee8:	4770      	bx	lr
 8008eea:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008eee:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008ef2:	3107      	adds	r1, #7
 8008ef4:	08c8      	lsrs	r0, r1, #3
 8008ef6:	4770      	bx	lr
 8008ef8:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008efc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008f00:	3107      	adds	r1, #7
 8008f02:	08c8      	lsrs	r0, r1, #3
 8008f04:	4770      	bx	lr
 8008f06:	4608      	mov	r0, r1
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop

08008f0c <ai_array_get_data_byte_size>:
 8008f0c:	b169      	cbz	r1, 8008f2a <ai_array_get_data_byte_size+0x1e>
 8008f0e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008f12:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008f16:	fb03 f101 	mul.w	r1, r3, r1
 8008f1a:	1dcb      	adds	r3, r1, #7
 8008f1c:	f023 0307 	bic.w	r3, r3, #7
 8008f20:	fa23 f000 	lsr.w	r0, r3, r0
 8008f24:	3007      	adds	r0, #7
 8008f26:	08c0      	lsrs	r0, r0, #3
 8008f28:	4770      	bx	lr
 8008f2a:	4608      	mov	r0, r1
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop

08008f30 <ai_version_get>:
 8008f30:	0212      	lsls	r2, r2, #8
 8008f32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008f36:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008f3a:	4770      	bx	lr

08008f3c <get_tensor_byte_size>:
 8008f3c:	b430      	push	{r4, r5}
 8008f3e:	6985      	ldr	r5, [r0, #24]
 8008f40:	68c4      	ldr	r4, [r0, #12]
 8008f42:	6941      	ldr	r1, [r0, #20]
 8008f44:	4b06      	ldr	r3, [pc, #24]	@ (8008f60 <get_tensor_byte_size+0x24>)
 8008f46:	6828      	ldr	r0, [r5, #0]
 8008f48:	4a06      	ldr	r2, [pc, #24]	@ (8008f64 <get_tensor_byte_size+0x28>)
 8008f4a:	4003      	ands	r3, r0
 8008f4c:	68c9      	ldr	r1, [r1, #12]
 8008f4e:	68e0      	ldr	r0, [r4, #12]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	fb01 f000 	mul.w	r0, r1, r0
 8008f56:	d101      	bne.n	8008f5c <get_tensor_byte_size+0x20>
 8008f58:	3007      	adds	r0, #7
 8008f5a:	08c0      	lsrs	r0, r0, #3
 8008f5c:	bc30      	pop	{r4, r5}
 8008f5e:	4770      	bx	lr
 8008f60:	017fffff 	.word	0x017fffff
 8008f64:	000400c0 	.word	0x000400c0

08008f68 <__cvt>:
 8008f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6c:	ec57 6b10 	vmov	r6, r7, d0
 8008f70:	2f00      	cmp	r7, #0
 8008f72:	460c      	mov	r4, r1
 8008f74:	4619      	mov	r1, r3
 8008f76:	463b      	mov	r3, r7
 8008f78:	bfbb      	ittet	lt
 8008f7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f7e:	461f      	movlt	r7, r3
 8008f80:	2300      	movge	r3, #0
 8008f82:	232d      	movlt	r3, #45	@ 0x2d
 8008f84:	700b      	strb	r3, [r1, #0]
 8008f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f8c:	4691      	mov	r9, r2
 8008f8e:	f023 0820 	bic.w	r8, r3, #32
 8008f92:	bfbc      	itt	lt
 8008f94:	4632      	movlt	r2, r6
 8008f96:	4616      	movlt	r6, r2
 8008f98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008f9c:	d005      	beq.n	8008faa <__cvt+0x42>
 8008f9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008fa2:	d100      	bne.n	8008fa6 <__cvt+0x3e>
 8008fa4:	3401      	adds	r4, #1
 8008fa6:	2102      	movs	r1, #2
 8008fa8:	e000      	b.n	8008fac <__cvt+0x44>
 8008faa:	2103      	movs	r1, #3
 8008fac:	ab03      	add	r3, sp, #12
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	ab02      	add	r3, sp, #8
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	ec47 6b10 	vmov	d0, r6, r7
 8008fb8:	4653      	mov	r3, sl
 8008fba:	4622      	mov	r2, r4
 8008fbc:	f000 fef4 	bl	8009da8 <_dtoa_r>
 8008fc0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	d119      	bne.n	8008ffc <__cvt+0x94>
 8008fc8:	f019 0f01 	tst.w	r9, #1
 8008fcc:	d00e      	beq.n	8008fec <__cvt+0x84>
 8008fce:	eb00 0904 	add.w	r9, r0, r4
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	4639      	mov	r1, r7
 8008fda:	f7f7 fdfd 	bl	8000bd8 <__aeabi_dcmpeq>
 8008fde:	b108      	cbz	r0, 8008fe4 <__cvt+0x7c>
 8008fe0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fe4:	2230      	movs	r2, #48	@ 0x30
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	454b      	cmp	r3, r9
 8008fea:	d31e      	bcc.n	800902a <__cvt+0xc2>
 8008fec:	9b03      	ldr	r3, [sp, #12]
 8008fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ff0:	1b5b      	subs	r3, r3, r5
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	b004      	add	sp, #16
 8008ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009000:	eb00 0904 	add.w	r9, r0, r4
 8009004:	d1e5      	bne.n	8008fd2 <__cvt+0x6a>
 8009006:	7803      	ldrb	r3, [r0, #0]
 8009008:	2b30      	cmp	r3, #48	@ 0x30
 800900a:	d10a      	bne.n	8009022 <__cvt+0xba>
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fde0 	bl	8000bd8 <__aeabi_dcmpeq>
 8009018:	b918      	cbnz	r0, 8009022 <__cvt+0xba>
 800901a:	f1c4 0401 	rsb	r4, r4, #1
 800901e:	f8ca 4000 	str.w	r4, [sl]
 8009022:	f8da 3000 	ldr.w	r3, [sl]
 8009026:	4499      	add	r9, r3
 8009028:	e7d3      	b.n	8008fd2 <__cvt+0x6a>
 800902a:	1c59      	adds	r1, r3, #1
 800902c:	9103      	str	r1, [sp, #12]
 800902e:	701a      	strb	r2, [r3, #0]
 8009030:	e7d9      	b.n	8008fe6 <__cvt+0x7e>

08009032 <__exponent>:
 8009032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009034:	2900      	cmp	r1, #0
 8009036:	bfba      	itte	lt
 8009038:	4249      	neglt	r1, r1
 800903a:	232d      	movlt	r3, #45	@ 0x2d
 800903c:	232b      	movge	r3, #43	@ 0x2b
 800903e:	2909      	cmp	r1, #9
 8009040:	7002      	strb	r2, [r0, #0]
 8009042:	7043      	strb	r3, [r0, #1]
 8009044:	dd29      	ble.n	800909a <__exponent+0x68>
 8009046:	f10d 0307 	add.w	r3, sp, #7
 800904a:	461d      	mov	r5, r3
 800904c:	270a      	movs	r7, #10
 800904e:	461a      	mov	r2, r3
 8009050:	fbb1 f6f7 	udiv	r6, r1, r7
 8009054:	fb07 1416 	mls	r4, r7, r6, r1
 8009058:	3430      	adds	r4, #48	@ 0x30
 800905a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800905e:	460c      	mov	r4, r1
 8009060:	2c63      	cmp	r4, #99	@ 0x63
 8009062:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009066:	4631      	mov	r1, r6
 8009068:	dcf1      	bgt.n	800904e <__exponent+0x1c>
 800906a:	3130      	adds	r1, #48	@ 0x30
 800906c:	1e94      	subs	r4, r2, #2
 800906e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009072:	1c41      	adds	r1, r0, #1
 8009074:	4623      	mov	r3, r4
 8009076:	42ab      	cmp	r3, r5
 8009078:	d30a      	bcc.n	8009090 <__exponent+0x5e>
 800907a:	f10d 0309 	add.w	r3, sp, #9
 800907e:	1a9b      	subs	r3, r3, r2
 8009080:	42ac      	cmp	r4, r5
 8009082:	bf88      	it	hi
 8009084:	2300      	movhi	r3, #0
 8009086:	3302      	adds	r3, #2
 8009088:	4403      	add	r3, r0
 800908a:	1a18      	subs	r0, r3, r0
 800908c:	b003      	add	sp, #12
 800908e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009090:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009094:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009098:	e7ed      	b.n	8009076 <__exponent+0x44>
 800909a:	2330      	movs	r3, #48	@ 0x30
 800909c:	3130      	adds	r1, #48	@ 0x30
 800909e:	7083      	strb	r3, [r0, #2]
 80090a0:	70c1      	strb	r1, [r0, #3]
 80090a2:	1d03      	adds	r3, r0, #4
 80090a4:	e7f1      	b.n	800908a <__exponent+0x58>
	...

080090a8 <_printf_float>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	b08d      	sub	sp, #52	@ 0x34
 80090ae:	460c      	mov	r4, r1
 80090b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090b4:	4616      	mov	r6, r2
 80090b6:	461f      	mov	r7, r3
 80090b8:	4605      	mov	r5, r0
 80090ba:	f000 fd9d 	bl	8009bf8 <_localeconv_r>
 80090be:	6803      	ldr	r3, [r0, #0]
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7f7 f95c 	bl	8000380 <strlen>
 80090c8:	2300      	movs	r3, #0
 80090ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80090cc:	f8d8 3000 	ldr.w	r3, [r8]
 80090d0:	9005      	str	r0, [sp, #20]
 80090d2:	3307      	adds	r3, #7
 80090d4:	f023 0307 	bic.w	r3, r3, #7
 80090d8:	f103 0208 	add.w	r2, r3, #8
 80090dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090e0:	f8d4 b000 	ldr.w	fp, [r4]
 80090e4:	f8c8 2000 	str.w	r2, [r8]
 80090e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090f0:	9307      	str	r3, [sp, #28]
 80090f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80090f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090fe:	4b9c      	ldr	r3, [pc, #624]	@ (8009370 <_printf_float+0x2c8>)
 8009100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009104:	f7f7 fd9a 	bl	8000c3c <__aeabi_dcmpun>
 8009108:	bb70      	cbnz	r0, 8009168 <_printf_float+0xc0>
 800910a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800910e:	4b98      	ldr	r3, [pc, #608]	@ (8009370 <_printf_float+0x2c8>)
 8009110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009114:	f7f7 fd74 	bl	8000c00 <__aeabi_dcmple>
 8009118:	bb30      	cbnz	r0, 8009168 <_printf_float+0xc0>
 800911a:	2200      	movs	r2, #0
 800911c:	2300      	movs	r3, #0
 800911e:	4640      	mov	r0, r8
 8009120:	4649      	mov	r1, r9
 8009122:	f7f7 fd63 	bl	8000bec <__aeabi_dcmplt>
 8009126:	b110      	cbz	r0, 800912e <_printf_float+0x86>
 8009128:	232d      	movs	r3, #45	@ 0x2d
 800912a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800912e:	4a91      	ldr	r2, [pc, #580]	@ (8009374 <_printf_float+0x2cc>)
 8009130:	4b91      	ldr	r3, [pc, #580]	@ (8009378 <_printf_float+0x2d0>)
 8009132:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009136:	bf94      	ite	ls
 8009138:	4690      	movls	r8, r2
 800913a:	4698      	movhi	r8, r3
 800913c:	2303      	movs	r3, #3
 800913e:	6123      	str	r3, [r4, #16]
 8009140:	f02b 0304 	bic.w	r3, fp, #4
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	f04f 0900 	mov.w	r9, #0
 800914a:	9700      	str	r7, [sp, #0]
 800914c:	4633      	mov	r3, r6
 800914e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009150:	4621      	mov	r1, r4
 8009152:	4628      	mov	r0, r5
 8009154:	f000 fa7c 	bl	8009650 <_printf_common>
 8009158:	3001      	adds	r0, #1
 800915a:	f040 808d 	bne.w	8009278 <_printf_float+0x1d0>
 800915e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009162:	b00d      	add	sp, #52	@ 0x34
 8009164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 fd64 	bl	8000c3c <__aeabi_dcmpun>
 8009174:	b140      	cbz	r0, 8009188 <_printf_float+0xe0>
 8009176:	464b      	mov	r3, r9
 8009178:	2b00      	cmp	r3, #0
 800917a:	bfbc      	itt	lt
 800917c:	232d      	movlt	r3, #45	@ 0x2d
 800917e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009182:	4a7e      	ldr	r2, [pc, #504]	@ (800937c <_printf_float+0x2d4>)
 8009184:	4b7e      	ldr	r3, [pc, #504]	@ (8009380 <_printf_float+0x2d8>)
 8009186:	e7d4      	b.n	8009132 <_printf_float+0x8a>
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800918e:	9206      	str	r2, [sp, #24]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	d13b      	bne.n	800920c <_printf_float+0x164>
 8009194:	2306      	movs	r3, #6
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800919c:	2300      	movs	r3, #0
 800919e:	6022      	str	r2, [r4, #0]
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80091a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091a8:	ab09      	add	r3, sp, #36	@ 0x24
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	6861      	ldr	r1, [r4, #4]
 80091ae:	ec49 8b10 	vmov	d0, r8, r9
 80091b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091b6:	4628      	mov	r0, r5
 80091b8:	f7ff fed6 	bl	8008f68 <__cvt>
 80091bc:	9b06      	ldr	r3, [sp, #24]
 80091be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091c0:	2b47      	cmp	r3, #71	@ 0x47
 80091c2:	4680      	mov	r8, r0
 80091c4:	d129      	bne.n	800921a <_printf_float+0x172>
 80091c6:	1cc8      	adds	r0, r1, #3
 80091c8:	db02      	blt.n	80091d0 <_printf_float+0x128>
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	4299      	cmp	r1, r3
 80091ce:	dd41      	ble.n	8009254 <_printf_float+0x1ac>
 80091d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80091d4:	fa5f fa8a 	uxtb.w	sl, sl
 80091d8:	3901      	subs	r1, #1
 80091da:	4652      	mov	r2, sl
 80091dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80091e2:	f7ff ff26 	bl	8009032 <__exponent>
 80091e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091e8:	1813      	adds	r3, r2, r0
 80091ea:	2a01      	cmp	r2, #1
 80091ec:	4681      	mov	r9, r0
 80091ee:	6123      	str	r3, [r4, #16]
 80091f0:	dc02      	bgt.n	80091f8 <_printf_float+0x150>
 80091f2:	6822      	ldr	r2, [r4, #0]
 80091f4:	07d2      	lsls	r2, r2, #31
 80091f6:	d501      	bpl.n	80091fc <_printf_float+0x154>
 80091f8:	3301      	adds	r3, #1
 80091fa:	6123      	str	r3, [r4, #16]
 80091fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0a2      	beq.n	800914a <_printf_float+0xa2>
 8009204:	232d      	movs	r3, #45	@ 0x2d
 8009206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800920a:	e79e      	b.n	800914a <_printf_float+0xa2>
 800920c:	9a06      	ldr	r2, [sp, #24]
 800920e:	2a47      	cmp	r2, #71	@ 0x47
 8009210:	d1c2      	bne.n	8009198 <_printf_float+0xf0>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1c0      	bne.n	8009198 <_printf_float+0xf0>
 8009216:	2301      	movs	r3, #1
 8009218:	e7bd      	b.n	8009196 <_printf_float+0xee>
 800921a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800921e:	d9db      	bls.n	80091d8 <_printf_float+0x130>
 8009220:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009224:	d118      	bne.n	8009258 <_printf_float+0x1b0>
 8009226:	2900      	cmp	r1, #0
 8009228:	6863      	ldr	r3, [r4, #4]
 800922a:	dd0b      	ble.n	8009244 <_printf_float+0x19c>
 800922c:	6121      	str	r1, [r4, #16]
 800922e:	b913      	cbnz	r3, 8009236 <_printf_float+0x18e>
 8009230:	6822      	ldr	r2, [r4, #0]
 8009232:	07d0      	lsls	r0, r2, #31
 8009234:	d502      	bpl.n	800923c <_printf_float+0x194>
 8009236:	3301      	adds	r3, #1
 8009238:	440b      	add	r3, r1
 800923a:	6123      	str	r3, [r4, #16]
 800923c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800923e:	f04f 0900 	mov.w	r9, #0
 8009242:	e7db      	b.n	80091fc <_printf_float+0x154>
 8009244:	b913      	cbnz	r3, 800924c <_printf_float+0x1a4>
 8009246:	6822      	ldr	r2, [r4, #0]
 8009248:	07d2      	lsls	r2, r2, #31
 800924a:	d501      	bpl.n	8009250 <_printf_float+0x1a8>
 800924c:	3302      	adds	r3, #2
 800924e:	e7f4      	b.n	800923a <_printf_float+0x192>
 8009250:	2301      	movs	r3, #1
 8009252:	e7f2      	b.n	800923a <_printf_float+0x192>
 8009254:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800925a:	4299      	cmp	r1, r3
 800925c:	db05      	blt.n	800926a <_printf_float+0x1c2>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	6121      	str	r1, [r4, #16]
 8009262:	07d8      	lsls	r0, r3, #31
 8009264:	d5ea      	bpl.n	800923c <_printf_float+0x194>
 8009266:	1c4b      	adds	r3, r1, #1
 8009268:	e7e7      	b.n	800923a <_printf_float+0x192>
 800926a:	2900      	cmp	r1, #0
 800926c:	bfd4      	ite	le
 800926e:	f1c1 0202 	rsble	r2, r1, #2
 8009272:	2201      	movgt	r2, #1
 8009274:	4413      	add	r3, r2
 8009276:	e7e0      	b.n	800923a <_printf_float+0x192>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	055a      	lsls	r2, r3, #21
 800927c:	d407      	bmi.n	800928e <_printf_float+0x1e6>
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	4642      	mov	r2, r8
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	d12b      	bne.n	80092e4 <_printf_float+0x23c>
 800928c:	e767      	b.n	800915e <_printf_float+0xb6>
 800928e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009292:	f240 80dd 	bls.w	8009450 <_printf_float+0x3a8>
 8009296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800929a:	2200      	movs	r2, #0
 800929c:	2300      	movs	r3, #0
 800929e:	f7f7 fc9b 	bl	8000bd8 <__aeabi_dcmpeq>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d033      	beq.n	800930e <_printf_float+0x266>
 80092a6:	4a37      	ldr	r2, [pc, #220]	@ (8009384 <_printf_float+0x2dc>)
 80092a8:	2301      	movs	r3, #1
 80092aa:	4631      	mov	r1, r6
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b8      	blx	r7
 80092b0:	3001      	adds	r0, #1
 80092b2:	f43f af54 	beq.w	800915e <_printf_float+0xb6>
 80092b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092ba:	4543      	cmp	r3, r8
 80092bc:	db02      	blt.n	80092c4 <_printf_float+0x21c>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	07d8      	lsls	r0, r3, #31
 80092c2:	d50f      	bpl.n	80092e4 <_printf_float+0x23c>
 80092c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092c8:	4631      	mov	r1, r6
 80092ca:	4628      	mov	r0, r5
 80092cc:	47b8      	blx	r7
 80092ce:	3001      	adds	r0, #1
 80092d0:	f43f af45 	beq.w	800915e <_printf_float+0xb6>
 80092d4:	f04f 0900 	mov.w	r9, #0
 80092d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80092dc:	f104 0a1a 	add.w	sl, r4, #26
 80092e0:	45c8      	cmp	r8, r9
 80092e2:	dc09      	bgt.n	80092f8 <_printf_float+0x250>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	079b      	lsls	r3, r3, #30
 80092e8:	f100 8103 	bmi.w	80094f2 <_printf_float+0x44a>
 80092ec:	68e0      	ldr	r0, [r4, #12]
 80092ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f0:	4298      	cmp	r0, r3
 80092f2:	bfb8      	it	lt
 80092f4:	4618      	movlt	r0, r3
 80092f6:	e734      	b.n	8009162 <_printf_float+0xba>
 80092f8:	2301      	movs	r3, #1
 80092fa:	4652      	mov	r2, sl
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f af2b 	beq.w	800915e <_printf_float+0xb6>
 8009308:	f109 0901 	add.w	r9, r9, #1
 800930c:	e7e8      	b.n	80092e0 <_printf_float+0x238>
 800930e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009310:	2b00      	cmp	r3, #0
 8009312:	dc39      	bgt.n	8009388 <_printf_float+0x2e0>
 8009314:	4a1b      	ldr	r2, [pc, #108]	@ (8009384 <_printf_float+0x2dc>)
 8009316:	2301      	movs	r3, #1
 8009318:	4631      	mov	r1, r6
 800931a:	4628      	mov	r0, r5
 800931c:	47b8      	blx	r7
 800931e:	3001      	adds	r0, #1
 8009320:	f43f af1d 	beq.w	800915e <_printf_float+0xb6>
 8009324:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009328:	ea59 0303 	orrs.w	r3, r9, r3
 800932c:	d102      	bne.n	8009334 <_printf_float+0x28c>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	07d9      	lsls	r1, r3, #31
 8009332:	d5d7      	bpl.n	80092e4 <_printf_float+0x23c>
 8009334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	f43f af0d 	beq.w	800915e <_printf_float+0xb6>
 8009344:	f04f 0a00 	mov.w	sl, #0
 8009348:	f104 0b1a 	add.w	fp, r4, #26
 800934c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800934e:	425b      	negs	r3, r3
 8009350:	4553      	cmp	r3, sl
 8009352:	dc01      	bgt.n	8009358 <_printf_float+0x2b0>
 8009354:	464b      	mov	r3, r9
 8009356:	e793      	b.n	8009280 <_printf_float+0x1d8>
 8009358:	2301      	movs	r3, #1
 800935a:	465a      	mov	r2, fp
 800935c:	4631      	mov	r1, r6
 800935e:	4628      	mov	r0, r5
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	f43f aefb 	beq.w	800915e <_printf_float+0xb6>
 8009368:	f10a 0a01 	add.w	sl, sl, #1
 800936c:	e7ee      	b.n	800934c <_printf_float+0x2a4>
 800936e:	bf00      	nop
 8009370:	7fefffff 	.word	0x7fefffff
 8009374:	0803c148 	.word	0x0803c148
 8009378:	0803c14c 	.word	0x0803c14c
 800937c:	0803c150 	.word	0x0803c150
 8009380:	0803c154 	.word	0x0803c154
 8009384:	0803c158 	.word	0x0803c158
 8009388:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800938a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800938e:	4553      	cmp	r3, sl
 8009390:	bfa8      	it	ge
 8009392:	4653      	movge	r3, sl
 8009394:	2b00      	cmp	r3, #0
 8009396:	4699      	mov	r9, r3
 8009398:	dc36      	bgt.n	8009408 <_printf_float+0x360>
 800939a:	f04f 0b00 	mov.w	fp, #0
 800939e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a2:	f104 021a 	add.w	r2, r4, #26
 80093a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093a8:	9306      	str	r3, [sp, #24]
 80093aa:	eba3 0309 	sub.w	r3, r3, r9
 80093ae:	455b      	cmp	r3, fp
 80093b0:	dc31      	bgt.n	8009416 <_printf_float+0x36e>
 80093b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b4:	459a      	cmp	sl, r3
 80093b6:	dc3a      	bgt.n	800942e <_printf_float+0x386>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	07da      	lsls	r2, r3, #31
 80093bc:	d437      	bmi.n	800942e <_printf_float+0x386>
 80093be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c0:	ebaa 0903 	sub.w	r9, sl, r3
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	ebaa 0303 	sub.w	r3, sl, r3
 80093ca:	4599      	cmp	r9, r3
 80093cc:	bfa8      	it	ge
 80093ce:	4699      	movge	r9, r3
 80093d0:	f1b9 0f00 	cmp.w	r9, #0
 80093d4:	dc33      	bgt.n	800943e <_printf_float+0x396>
 80093d6:	f04f 0800 	mov.w	r8, #0
 80093da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093de:	f104 0b1a 	add.w	fp, r4, #26
 80093e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e4:	ebaa 0303 	sub.w	r3, sl, r3
 80093e8:	eba3 0309 	sub.w	r3, r3, r9
 80093ec:	4543      	cmp	r3, r8
 80093ee:	f77f af79 	ble.w	80092e4 <_printf_float+0x23c>
 80093f2:	2301      	movs	r3, #1
 80093f4:	465a      	mov	r2, fp
 80093f6:	4631      	mov	r1, r6
 80093f8:	4628      	mov	r0, r5
 80093fa:	47b8      	blx	r7
 80093fc:	3001      	adds	r0, #1
 80093fe:	f43f aeae 	beq.w	800915e <_printf_float+0xb6>
 8009402:	f108 0801 	add.w	r8, r8, #1
 8009406:	e7ec      	b.n	80093e2 <_printf_float+0x33a>
 8009408:	4642      	mov	r2, r8
 800940a:	4631      	mov	r1, r6
 800940c:	4628      	mov	r0, r5
 800940e:	47b8      	blx	r7
 8009410:	3001      	adds	r0, #1
 8009412:	d1c2      	bne.n	800939a <_printf_float+0x2f2>
 8009414:	e6a3      	b.n	800915e <_printf_float+0xb6>
 8009416:	2301      	movs	r3, #1
 8009418:	4631      	mov	r1, r6
 800941a:	4628      	mov	r0, r5
 800941c:	9206      	str	r2, [sp, #24]
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	f43f ae9c 	beq.w	800915e <_printf_float+0xb6>
 8009426:	9a06      	ldr	r2, [sp, #24]
 8009428:	f10b 0b01 	add.w	fp, fp, #1
 800942c:	e7bb      	b.n	80093a6 <_printf_float+0x2fe>
 800942e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009432:	4631      	mov	r1, r6
 8009434:	4628      	mov	r0, r5
 8009436:	47b8      	blx	r7
 8009438:	3001      	adds	r0, #1
 800943a:	d1c0      	bne.n	80093be <_printf_float+0x316>
 800943c:	e68f      	b.n	800915e <_printf_float+0xb6>
 800943e:	9a06      	ldr	r2, [sp, #24]
 8009440:	464b      	mov	r3, r9
 8009442:	4442      	add	r2, r8
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	d1c3      	bne.n	80093d6 <_printf_float+0x32e>
 800944e:	e686      	b.n	800915e <_printf_float+0xb6>
 8009450:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009454:	f1ba 0f01 	cmp.w	sl, #1
 8009458:	dc01      	bgt.n	800945e <_printf_float+0x3b6>
 800945a:	07db      	lsls	r3, r3, #31
 800945c:	d536      	bpl.n	80094cc <_printf_float+0x424>
 800945e:	2301      	movs	r3, #1
 8009460:	4642      	mov	r2, r8
 8009462:	4631      	mov	r1, r6
 8009464:	4628      	mov	r0, r5
 8009466:	47b8      	blx	r7
 8009468:	3001      	adds	r0, #1
 800946a:	f43f ae78 	beq.w	800915e <_printf_float+0xb6>
 800946e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009472:	4631      	mov	r1, r6
 8009474:	4628      	mov	r0, r5
 8009476:	47b8      	blx	r7
 8009478:	3001      	adds	r0, #1
 800947a:	f43f ae70 	beq.w	800915e <_printf_float+0xb6>
 800947e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009482:	2200      	movs	r2, #0
 8009484:	2300      	movs	r3, #0
 8009486:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800948a:	f7f7 fba5 	bl	8000bd8 <__aeabi_dcmpeq>
 800948e:	b9c0      	cbnz	r0, 80094c2 <_printf_float+0x41a>
 8009490:	4653      	mov	r3, sl
 8009492:	f108 0201 	add.w	r2, r8, #1
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	d10c      	bne.n	80094ba <_printf_float+0x412>
 80094a0:	e65d      	b.n	800915e <_printf_float+0xb6>
 80094a2:	2301      	movs	r3, #1
 80094a4:	465a      	mov	r2, fp
 80094a6:	4631      	mov	r1, r6
 80094a8:	4628      	mov	r0, r5
 80094aa:	47b8      	blx	r7
 80094ac:	3001      	adds	r0, #1
 80094ae:	f43f ae56 	beq.w	800915e <_printf_float+0xb6>
 80094b2:	f108 0801 	add.w	r8, r8, #1
 80094b6:	45d0      	cmp	r8, sl
 80094b8:	dbf3      	blt.n	80094a2 <_printf_float+0x3fa>
 80094ba:	464b      	mov	r3, r9
 80094bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094c0:	e6df      	b.n	8009282 <_printf_float+0x1da>
 80094c2:	f04f 0800 	mov.w	r8, #0
 80094c6:	f104 0b1a 	add.w	fp, r4, #26
 80094ca:	e7f4      	b.n	80094b6 <_printf_float+0x40e>
 80094cc:	2301      	movs	r3, #1
 80094ce:	4642      	mov	r2, r8
 80094d0:	e7e1      	b.n	8009496 <_printf_float+0x3ee>
 80094d2:	2301      	movs	r3, #1
 80094d4:	464a      	mov	r2, r9
 80094d6:	4631      	mov	r1, r6
 80094d8:	4628      	mov	r0, r5
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	f43f ae3e 	beq.w	800915e <_printf_float+0xb6>
 80094e2:	f108 0801 	add.w	r8, r8, #1
 80094e6:	68e3      	ldr	r3, [r4, #12]
 80094e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094ea:	1a5b      	subs	r3, r3, r1
 80094ec:	4543      	cmp	r3, r8
 80094ee:	dcf0      	bgt.n	80094d2 <_printf_float+0x42a>
 80094f0:	e6fc      	b.n	80092ec <_printf_float+0x244>
 80094f2:	f04f 0800 	mov.w	r8, #0
 80094f6:	f104 0919 	add.w	r9, r4, #25
 80094fa:	e7f4      	b.n	80094e6 <_printf_float+0x43e>

080094fc <malloc>:
 80094fc:	4b02      	ldr	r3, [pc, #8]	@ (8009508 <malloc+0xc>)
 80094fe:	4601      	mov	r1, r0
 8009500:	6818      	ldr	r0, [r3, #0]
 8009502:	f000 b825 	b.w	8009550 <_malloc_r>
 8009506:	bf00      	nop
 8009508:	2000095c 	.word	0x2000095c

0800950c <sbrk_aligned>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4e0f      	ldr	r6, [pc, #60]	@ (800954c <sbrk_aligned+0x40>)
 8009510:	460c      	mov	r4, r1
 8009512:	6831      	ldr	r1, [r6, #0]
 8009514:	4605      	mov	r5, r0
 8009516:	b911      	cbnz	r1, 800951e <sbrk_aligned+0x12>
 8009518:	f000 fb72 	bl	8009c00 <_sbrk_r>
 800951c:	6030      	str	r0, [r6, #0]
 800951e:	4621      	mov	r1, r4
 8009520:	4628      	mov	r0, r5
 8009522:	f000 fb6d 	bl	8009c00 <_sbrk_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	d103      	bne.n	8009532 <sbrk_aligned+0x26>
 800952a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800952e:	4620      	mov	r0, r4
 8009530:	bd70      	pop	{r4, r5, r6, pc}
 8009532:	1cc4      	adds	r4, r0, #3
 8009534:	f024 0403 	bic.w	r4, r4, #3
 8009538:	42a0      	cmp	r0, r4
 800953a:	d0f8      	beq.n	800952e <sbrk_aligned+0x22>
 800953c:	1a21      	subs	r1, r4, r0
 800953e:	4628      	mov	r0, r5
 8009540:	f000 fb5e 	bl	8009c00 <_sbrk_r>
 8009544:	3001      	adds	r0, #1
 8009546:	d1f2      	bne.n	800952e <sbrk_aligned+0x22>
 8009548:	e7ef      	b.n	800952a <sbrk_aligned+0x1e>
 800954a:	bf00      	nop
 800954c:	200185e8 	.word	0x200185e8

08009550 <_malloc_r>:
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	1ccd      	adds	r5, r1, #3
 8009556:	f025 0503 	bic.w	r5, r5, #3
 800955a:	3508      	adds	r5, #8
 800955c:	2d0c      	cmp	r5, #12
 800955e:	bf38      	it	cc
 8009560:	250c      	movcc	r5, #12
 8009562:	2d00      	cmp	r5, #0
 8009564:	4606      	mov	r6, r0
 8009566:	db01      	blt.n	800956c <_malloc_r+0x1c>
 8009568:	42a9      	cmp	r1, r5
 800956a:	d904      	bls.n	8009576 <_malloc_r+0x26>
 800956c:	230c      	movs	r3, #12
 800956e:	6033      	str	r3, [r6, #0]
 8009570:	2000      	movs	r0, #0
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800964c <_malloc_r+0xfc>
 800957a:	f000 f9f7 	bl	800996c <__malloc_lock>
 800957e:	f8d8 3000 	ldr.w	r3, [r8]
 8009582:	461c      	mov	r4, r3
 8009584:	bb44      	cbnz	r4, 80095d8 <_malloc_r+0x88>
 8009586:	4629      	mov	r1, r5
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff ffbf 	bl	800950c <sbrk_aligned>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	4604      	mov	r4, r0
 8009592:	d158      	bne.n	8009646 <_malloc_r+0xf6>
 8009594:	f8d8 4000 	ldr.w	r4, [r8]
 8009598:	4627      	mov	r7, r4
 800959a:	2f00      	cmp	r7, #0
 800959c:	d143      	bne.n	8009626 <_malloc_r+0xd6>
 800959e:	2c00      	cmp	r4, #0
 80095a0:	d04b      	beq.n	800963a <_malloc_r+0xea>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	4639      	mov	r1, r7
 80095a6:	4630      	mov	r0, r6
 80095a8:	eb04 0903 	add.w	r9, r4, r3
 80095ac:	f000 fb28 	bl	8009c00 <_sbrk_r>
 80095b0:	4581      	cmp	r9, r0
 80095b2:	d142      	bne.n	800963a <_malloc_r+0xea>
 80095b4:	6821      	ldr	r1, [r4, #0]
 80095b6:	1a6d      	subs	r5, r5, r1
 80095b8:	4629      	mov	r1, r5
 80095ba:	4630      	mov	r0, r6
 80095bc:	f7ff ffa6 	bl	800950c <sbrk_aligned>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d03a      	beq.n	800963a <_malloc_r+0xea>
 80095c4:	6823      	ldr	r3, [r4, #0]
 80095c6:	442b      	add	r3, r5
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	f8d8 3000 	ldr.w	r3, [r8]
 80095ce:	685a      	ldr	r2, [r3, #4]
 80095d0:	bb62      	cbnz	r2, 800962c <_malloc_r+0xdc>
 80095d2:	f8c8 7000 	str.w	r7, [r8]
 80095d6:	e00f      	b.n	80095f8 <_malloc_r+0xa8>
 80095d8:	6822      	ldr	r2, [r4, #0]
 80095da:	1b52      	subs	r2, r2, r5
 80095dc:	d420      	bmi.n	8009620 <_malloc_r+0xd0>
 80095de:	2a0b      	cmp	r2, #11
 80095e0:	d917      	bls.n	8009612 <_malloc_r+0xc2>
 80095e2:	1961      	adds	r1, r4, r5
 80095e4:	42a3      	cmp	r3, r4
 80095e6:	6025      	str	r5, [r4, #0]
 80095e8:	bf18      	it	ne
 80095ea:	6059      	strne	r1, [r3, #4]
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	bf08      	it	eq
 80095f0:	f8c8 1000 	streq.w	r1, [r8]
 80095f4:	5162      	str	r2, [r4, r5]
 80095f6:	604b      	str	r3, [r1, #4]
 80095f8:	4630      	mov	r0, r6
 80095fa:	f000 f9bd 	bl	8009978 <__malloc_unlock>
 80095fe:	f104 000b 	add.w	r0, r4, #11
 8009602:	1d23      	adds	r3, r4, #4
 8009604:	f020 0007 	bic.w	r0, r0, #7
 8009608:	1ac2      	subs	r2, r0, r3
 800960a:	bf1c      	itt	ne
 800960c:	1a1b      	subne	r3, r3, r0
 800960e:	50a3      	strne	r3, [r4, r2]
 8009610:	e7af      	b.n	8009572 <_malloc_r+0x22>
 8009612:	6862      	ldr	r2, [r4, #4]
 8009614:	42a3      	cmp	r3, r4
 8009616:	bf0c      	ite	eq
 8009618:	f8c8 2000 	streq.w	r2, [r8]
 800961c:	605a      	strne	r2, [r3, #4]
 800961e:	e7eb      	b.n	80095f8 <_malloc_r+0xa8>
 8009620:	4623      	mov	r3, r4
 8009622:	6864      	ldr	r4, [r4, #4]
 8009624:	e7ae      	b.n	8009584 <_malloc_r+0x34>
 8009626:	463c      	mov	r4, r7
 8009628:	687f      	ldr	r7, [r7, #4]
 800962a:	e7b6      	b.n	800959a <_malloc_r+0x4a>
 800962c:	461a      	mov	r2, r3
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	42a3      	cmp	r3, r4
 8009632:	d1fb      	bne.n	800962c <_malloc_r+0xdc>
 8009634:	2300      	movs	r3, #0
 8009636:	6053      	str	r3, [r2, #4]
 8009638:	e7de      	b.n	80095f8 <_malloc_r+0xa8>
 800963a:	230c      	movs	r3, #12
 800963c:	6033      	str	r3, [r6, #0]
 800963e:	4630      	mov	r0, r6
 8009640:	f000 f99a 	bl	8009978 <__malloc_unlock>
 8009644:	e794      	b.n	8009570 <_malloc_r+0x20>
 8009646:	6005      	str	r5, [r0, #0]
 8009648:	e7d6      	b.n	80095f8 <_malloc_r+0xa8>
 800964a:	bf00      	nop
 800964c:	200185ec 	.word	0x200185ec

08009650 <_printf_common>:
 8009650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009654:	4616      	mov	r6, r2
 8009656:	4698      	mov	r8, r3
 8009658:	688a      	ldr	r2, [r1, #8]
 800965a:	690b      	ldr	r3, [r1, #16]
 800965c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009660:	4293      	cmp	r3, r2
 8009662:	bfb8      	it	lt
 8009664:	4613      	movlt	r3, r2
 8009666:	6033      	str	r3, [r6, #0]
 8009668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800966c:	4607      	mov	r7, r0
 800966e:	460c      	mov	r4, r1
 8009670:	b10a      	cbz	r2, 8009676 <_printf_common+0x26>
 8009672:	3301      	adds	r3, #1
 8009674:	6033      	str	r3, [r6, #0]
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	0699      	lsls	r1, r3, #26
 800967a:	bf42      	ittt	mi
 800967c:	6833      	ldrmi	r3, [r6, #0]
 800967e:	3302      	addmi	r3, #2
 8009680:	6033      	strmi	r3, [r6, #0]
 8009682:	6825      	ldr	r5, [r4, #0]
 8009684:	f015 0506 	ands.w	r5, r5, #6
 8009688:	d106      	bne.n	8009698 <_printf_common+0x48>
 800968a:	f104 0a19 	add.w	sl, r4, #25
 800968e:	68e3      	ldr	r3, [r4, #12]
 8009690:	6832      	ldr	r2, [r6, #0]
 8009692:	1a9b      	subs	r3, r3, r2
 8009694:	42ab      	cmp	r3, r5
 8009696:	dc26      	bgt.n	80096e6 <_printf_common+0x96>
 8009698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800969c:	6822      	ldr	r2, [r4, #0]
 800969e:	3b00      	subs	r3, #0
 80096a0:	bf18      	it	ne
 80096a2:	2301      	movne	r3, #1
 80096a4:	0692      	lsls	r2, r2, #26
 80096a6:	d42b      	bmi.n	8009700 <_printf_common+0xb0>
 80096a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096ac:	4641      	mov	r1, r8
 80096ae:	4638      	mov	r0, r7
 80096b0:	47c8      	blx	r9
 80096b2:	3001      	adds	r0, #1
 80096b4:	d01e      	beq.n	80096f4 <_printf_common+0xa4>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	6922      	ldr	r2, [r4, #16]
 80096ba:	f003 0306 	and.w	r3, r3, #6
 80096be:	2b04      	cmp	r3, #4
 80096c0:	bf02      	ittt	eq
 80096c2:	68e5      	ldreq	r5, [r4, #12]
 80096c4:	6833      	ldreq	r3, [r6, #0]
 80096c6:	1aed      	subeq	r5, r5, r3
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	bf0c      	ite	eq
 80096cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096d0:	2500      	movne	r5, #0
 80096d2:	4293      	cmp	r3, r2
 80096d4:	bfc4      	itt	gt
 80096d6:	1a9b      	subgt	r3, r3, r2
 80096d8:	18ed      	addgt	r5, r5, r3
 80096da:	2600      	movs	r6, #0
 80096dc:	341a      	adds	r4, #26
 80096de:	42b5      	cmp	r5, r6
 80096e0:	d11a      	bne.n	8009718 <_printf_common+0xc8>
 80096e2:	2000      	movs	r0, #0
 80096e4:	e008      	b.n	80096f8 <_printf_common+0xa8>
 80096e6:	2301      	movs	r3, #1
 80096e8:	4652      	mov	r2, sl
 80096ea:	4641      	mov	r1, r8
 80096ec:	4638      	mov	r0, r7
 80096ee:	47c8      	blx	r9
 80096f0:	3001      	adds	r0, #1
 80096f2:	d103      	bne.n	80096fc <_printf_common+0xac>
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fc:	3501      	adds	r5, #1
 80096fe:	e7c6      	b.n	800968e <_printf_common+0x3e>
 8009700:	18e1      	adds	r1, r4, r3
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	2030      	movs	r0, #48	@ 0x30
 8009706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800970a:	4422      	add	r2, r4
 800970c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009714:	3302      	adds	r3, #2
 8009716:	e7c7      	b.n	80096a8 <_printf_common+0x58>
 8009718:	2301      	movs	r3, #1
 800971a:	4622      	mov	r2, r4
 800971c:	4641      	mov	r1, r8
 800971e:	4638      	mov	r0, r7
 8009720:	47c8      	blx	r9
 8009722:	3001      	adds	r0, #1
 8009724:	d0e6      	beq.n	80096f4 <_printf_common+0xa4>
 8009726:	3601      	adds	r6, #1
 8009728:	e7d9      	b.n	80096de <_printf_common+0x8e>
	...

0800972c <_printf_i>:
 800972c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	7e0f      	ldrb	r7, [r1, #24]
 8009732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009734:	2f78      	cmp	r7, #120	@ 0x78
 8009736:	4691      	mov	r9, r2
 8009738:	4680      	mov	r8, r0
 800973a:	460c      	mov	r4, r1
 800973c:	469a      	mov	sl, r3
 800973e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009742:	d807      	bhi.n	8009754 <_printf_i+0x28>
 8009744:	2f62      	cmp	r7, #98	@ 0x62
 8009746:	d80a      	bhi.n	800975e <_printf_i+0x32>
 8009748:	2f00      	cmp	r7, #0
 800974a:	f000 80d2 	beq.w	80098f2 <_printf_i+0x1c6>
 800974e:	2f58      	cmp	r7, #88	@ 0x58
 8009750:	f000 80b9 	beq.w	80098c6 <_printf_i+0x19a>
 8009754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800975c:	e03a      	b.n	80097d4 <_printf_i+0xa8>
 800975e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009762:	2b15      	cmp	r3, #21
 8009764:	d8f6      	bhi.n	8009754 <_printf_i+0x28>
 8009766:	a101      	add	r1, pc, #4	@ (adr r1, 800976c <_printf_i+0x40>)
 8009768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800976c:	080097c5 	.word	0x080097c5
 8009770:	080097d9 	.word	0x080097d9
 8009774:	08009755 	.word	0x08009755
 8009778:	08009755 	.word	0x08009755
 800977c:	08009755 	.word	0x08009755
 8009780:	08009755 	.word	0x08009755
 8009784:	080097d9 	.word	0x080097d9
 8009788:	08009755 	.word	0x08009755
 800978c:	08009755 	.word	0x08009755
 8009790:	08009755 	.word	0x08009755
 8009794:	08009755 	.word	0x08009755
 8009798:	080098d9 	.word	0x080098d9
 800979c:	08009803 	.word	0x08009803
 80097a0:	08009893 	.word	0x08009893
 80097a4:	08009755 	.word	0x08009755
 80097a8:	08009755 	.word	0x08009755
 80097ac:	080098fb 	.word	0x080098fb
 80097b0:	08009755 	.word	0x08009755
 80097b4:	08009803 	.word	0x08009803
 80097b8:	08009755 	.word	0x08009755
 80097bc:	08009755 	.word	0x08009755
 80097c0:	0800989b 	.word	0x0800989b
 80097c4:	6833      	ldr	r3, [r6, #0]
 80097c6:	1d1a      	adds	r2, r3, #4
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6032      	str	r2, [r6, #0]
 80097cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097d4:	2301      	movs	r3, #1
 80097d6:	e09d      	b.n	8009914 <_printf_i+0x1e8>
 80097d8:	6833      	ldr	r3, [r6, #0]
 80097da:	6820      	ldr	r0, [r4, #0]
 80097dc:	1d19      	adds	r1, r3, #4
 80097de:	6031      	str	r1, [r6, #0]
 80097e0:	0606      	lsls	r6, r0, #24
 80097e2:	d501      	bpl.n	80097e8 <_printf_i+0xbc>
 80097e4:	681d      	ldr	r5, [r3, #0]
 80097e6:	e003      	b.n	80097f0 <_printf_i+0xc4>
 80097e8:	0645      	lsls	r5, r0, #25
 80097ea:	d5fb      	bpl.n	80097e4 <_printf_i+0xb8>
 80097ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097f0:	2d00      	cmp	r5, #0
 80097f2:	da03      	bge.n	80097fc <_printf_i+0xd0>
 80097f4:	232d      	movs	r3, #45	@ 0x2d
 80097f6:	426d      	negs	r5, r5
 80097f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097fc:	4859      	ldr	r0, [pc, #356]	@ (8009964 <_printf_i+0x238>)
 80097fe:	230a      	movs	r3, #10
 8009800:	e011      	b.n	8009826 <_printf_i+0xfa>
 8009802:	6821      	ldr	r1, [r4, #0]
 8009804:	6833      	ldr	r3, [r6, #0]
 8009806:	0608      	lsls	r0, r1, #24
 8009808:	f853 5b04 	ldr.w	r5, [r3], #4
 800980c:	d402      	bmi.n	8009814 <_printf_i+0xe8>
 800980e:	0649      	lsls	r1, r1, #25
 8009810:	bf48      	it	mi
 8009812:	b2ad      	uxthmi	r5, r5
 8009814:	2f6f      	cmp	r7, #111	@ 0x6f
 8009816:	4853      	ldr	r0, [pc, #332]	@ (8009964 <_printf_i+0x238>)
 8009818:	6033      	str	r3, [r6, #0]
 800981a:	bf14      	ite	ne
 800981c:	230a      	movne	r3, #10
 800981e:	2308      	moveq	r3, #8
 8009820:	2100      	movs	r1, #0
 8009822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009826:	6866      	ldr	r6, [r4, #4]
 8009828:	60a6      	str	r6, [r4, #8]
 800982a:	2e00      	cmp	r6, #0
 800982c:	bfa2      	ittt	ge
 800982e:	6821      	ldrge	r1, [r4, #0]
 8009830:	f021 0104 	bicge.w	r1, r1, #4
 8009834:	6021      	strge	r1, [r4, #0]
 8009836:	b90d      	cbnz	r5, 800983c <_printf_i+0x110>
 8009838:	2e00      	cmp	r6, #0
 800983a:	d04b      	beq.n	80098d4 <_printf_i+0x1a8>
 800983c:	4616      	mov	r6, r2
 800983e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009842:	fb03 5711 	mls	r7, r3, r1, r5
 8009846:	5dc7      	ldrb	r7, [r0, r7]
 8009848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800984c:	462f      	mov	r7, r5
 800984e:	42bb      	cmp	r3, r7
 8009850:	460d      	mov	r5, r1
 8009852:	d9f4      	bls.n	800983e <_printf_i+0x112>
 8009854:	2b08      	cmp	r3, #8
 8009856:	d10b      	bne.n	8009870 <_printf_i+0x144>
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	07df      	lsls	r7, r3, #31
 800985c:	d508      	bpl.n	8009870 <_printf_i+0x144>
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	6861      	ldr	r1, [r4, #4]
 8009862:	4299      	cmp	r1, r3
 8009864:	bfde      	ittt	le
 8009866:	2330      	movle	r3, #48	@ 0x30
 8009868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800986c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009870:	1b92      	subs	r2, r2, r6
 8009872:	6122      	str	r2, [r4, #16]
 8009874:	f8cd a000 	str.w	sl, [sp]
 8009878:	464b      	mov	r3, r9
 800987a:	aa03      	add	r2, sp, #12
 800987c:	4621      	mov	r1, r4
 800987e:	4640      	mov	r0, r8
 8009880:	f7ff fee6 	bl	8009650 <_printf_common>
 8009884:	3001      	adds	r0, #1
 8009886:	d14a      	bne.n	800991e <_printf_i+0x1f2>
 8009888:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800988c:	b004      	add	sp, #16
 800988e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	f043 0320 	orr.w	r3, r3, #32
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	4833      	ldr	r0, [pc, #204]	@ (8009968 <_printf_i+0x23c>)
 800989c:	2778      	movs	r7, #120	@ 0x78
 800989e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	6831      	ldr	r1, [r6, #0]
 80098a6:	061f      	lsls	r7, r3, #24
 80098a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80098ac:	d402      	bmi.n	80098b4 <_printf_i+0x188>
 80098ae:	065f      	lsls	r7, r3, #25
 80098b0:	bf48      	it	mi
 80098b2:	b2ad      	uxthmi	r5, r5
 80098b4:	6031      	str	r1, [r6, #0]
 80098b6:	07d9      	lsls	r1, r3, #31
 80098b8:	bf44      	itt	mi
 80098ba:	f043 0320 	orrmi.w	r3, r3, #32
 80098be:	6023      	strmi	r3, [r4, #0]
 80098c0:	b11d      	cbz	r5, 80098ca <_printf_i+0x19e>
 80098c2:	2310      	movs	r3, #16
 80098c4:	e7ac      	b.n	8009820 <_printf_i+0xf4>
 80098c6:	4827      	ldr	r0, [pc, #156]	@ (8009964 <_printf_i+0x238>)
 80098c8:	e7e9      	b.n	800989e <_printf_i+0x172>
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	f023 0320 	bic.w	r3, r3, #32
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	e7f6      	b.n	80098c2 <_printf_i+0x196>
 80098d4:	4616      	mov	r6, r2
 80098d6:	e7bd      	b.n	8009854 <_printf_i+0x128>
 80098d8:	6833      	ldr	r3, [r6, #0]
 80098da:	6825      	ldr	r5, [r4, #0]
 80098dc:	6961      	ldr	r1, [r4, #20]
 80098de:	1d18      	adds	r0, r3, #4
 80098e0:	6030      	str	r0, [r6, #0]
 80098e2:	062e      	lsls	r6, r5, #24
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	d501      	bpl.n	80098ec <_printf_i+0x1c0>
 80098e8:	6019      	str	r1, [r3, #0]
 80098ea:	e002      	b.n	80098f2 <_printf_i+0x1c6>
 80098ec:	0668      	lsls	r0, r5, #25
 80098ee:	d5fb      	bpl.n	80098e8 <_printf_i+0x1bc>
 80098f0:	8019      	strh	r1, [r3, #0]
 80098f2:	2300      	movs	r3, #0
 80098f4:	6123      	str	r3, [r4, #16]
 80098f6:	4616      	mov	r6, r2
 80098f8:	e7bc      	b.n	8009874 <_printf_i+0x148>
 80098fa:	6833      	ldr	r3, [r6, #0]
 80098fc:	1d1a      	adds	r2, r3, #4
 80098fe:	6032      	str	r2, [r6, #0]
 8009900:	681e      	ldr	r6, [r3, #0]
 8009902:	6862      	ldr	r2, [r4, #4]
 8009904:	2100      	movs	r1, #0
 8009906:	4630      	mov	r0, r6
 8009908:	f7f6 fcea 	bl	80002e0 <memchr>
 800990c:	b108      	cbz	r0, 8009912 <_printf_i+0x1e6>
 800990e:	1b80      	subs	r0, r0, r6
 8009910:	6060      	str	r0, [r4, #4]
 8009912:	6863      	ldr	r3, [r4, #4]
 8009914:	6123      	str	r3, [r4, #16]
 8009916:	2300      	movs	r3, #0
 8009918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800991c:	e7aa      	b.n	8009874 <_printf_i+0x148>
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	4632      	mov	r2, r6
 8009922:	4649      	mov	r1, r9
 8009924:	4640      	mov	r0, r8
 8009926:	47d0      	blx	sl
 8009928:	3001      	adds	r0, #1
 800992a:	d0ad      	beq.n	8009888 <_printf_i+0x15c>
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	079b      	lsls	r3, r3, #30
 8009930:	d413      	bmi.n	800995a <_printf_i+0x22e>
 8009932:	68e0      	ldr	r0, [r4, #12]
 8009934:	9b03      	ldr	r3, [sp, #12]
 8009936:	4298      	cmp	r0, r3
 8009938:	bfb8      	it	lt
 800993a:	4618      	movlt	r0, r3
 800993c:	e7a6      	b.n	800988c <_printf_i+0x160>
 800993e:	2301      	movs	r3, #1
 8009940:	4632      	mov	r2, r6
 8009942:	4649      	mov	r1, r9
 8009944:	4640      	mov	r0, r8
 8009946:	47d0      	blx	sl
 8009948:	3001      	adds	r0, #1
 800994a:	d09d      	beq.n	8009888 <_printf_i+0x15c>
 800994c:	3501      	adds	r5, #1
 800994e:	68e3      	ldr	r3, [r4, #12]
 8009950:	9903      	ldr	r1, [sp, #12]
 8009952:	1a5b      	subs	r3, r3, r1
 8009954:	42ab      	cmp	r3, r5
 8009956:	dcf2      	bgt.n	800993e <_printf_i+0x212>
 8009958:	e7eb      	b.n	8009932 <_printf_i+0x206>
 800995a:	2500      	movs	r5, #0
 800995c:	f104 0619 	add.w	r6, r4, #25
 8009960:	e7f5      	b.n	800994e <_printf_i+0x222>
 8009962:	bf00      	nop
 8009964:	0803c15a 	.word	0x0803c15a
 8009968:	0803c16b 	.word	0x0803c16b

0800996c <__malloc_lock>:
 800996c:	4801      	ldr	r0, [pc, #4]	@ (8009974 <__malloc_lock+0x8>)
 800996e:	f000 b982 	b.w	8009c76 <__retarget_lock_acquire_recursive>
 8009972:	bf00      	nop
 8009974:	2001872c 	.word	0x2001872c

08009978 <__malloc_unlock>:
 8009978:	4801      	ldr	r0, [pc, #4]	@ (8009980 <__malloc_unlock+0x8>)
 800997a:	f000 b97d 	b.w	8009c78 <__retarget_lock_release_recursive>
 800997e:	bf00      	nop
 8009980:	2001872c 	.word	0x2001872c

08009984 <std>:
 8009984:	2300      	movs	r3, #0
 8009986:	b510      	push	{r4, lr}
 8009988:	4604      	mov	r4, r0
 800998a:	e9c0 3300 	strd	r3, r3, [r0]
 800998e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009992:	6083      	str	r3, [r0, #8]
 8009994:	8181      	strh	r1, [r0, #12]
 8009996:	6643      	str	r3, [r0, #100]	@ 0x64
 8009998:	81c2      	strh	r2, [r0, #14]
 800999a:	6183      	str	r3, [r0, #24]
 800999c:	4619      	mov	r1, r3
 800999e:	2208      	movs	r2, #8
 80099a0:	305c      	adds	r0, #92	@ 0x5c
 80099a2:	f000 f921 	bl	8009be8 <memset>
 80099a6:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <std+0x58>)
 80099a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80099aa:	4b0d      	ldr	r3, [pc, #52]	@ (80099e0 <std+0x5c>)
 80099ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099ae:	4b0d      	ldr	r3, [pc, #52]	@ (80099e4 <std+0x60>)
 80099b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <std+0x64>)
 80099b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80099b6:	4b0d      	ldr	r3, [pc, #52]	@ (80099ec <std+0x68>)
 80099b8:	6224      	str	r4, [r4, #32]
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d006      	beq.n	80099cc <std+0x48>
 80099be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80099c2:	4294      	cmp	r4, r2
 80099c4:	d002      	beq.n	80099cc <std+0x48>
 80099c6:	33d0      	adds	r3, #208	@ 0xd0
 80099c8:	429c      	cmp	r4, r3
 80099ca:	d105      	bne.n	80099d8 <std+0x54>
 80099cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80099d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d4:	f000 b94e 	b.w	8009c74 <__retarget_lock_init_recursive>
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	bf00      	nop
 80099dc:	0800b4a5 	.word	0x0800b4a5
 80099e0:	0800b4c7 	.word	0x0800b4c7
 80099e4:	0800b4ff 	.word	0x0800b4ff
 80099e8:	0800b523 	.word	0x0800b523
 80099ec:	200185f0 	.word	0x200185f0

080099f0 <stdio_exit_handler>:
 80099f0:	4a02      	ldr	r2, [pc, #8]	@ (80099fc <stdio_exit_handler+0xc>)
 80099f2:	4903      	ldr	r1, [pc, #12]	@ (8009a00 <stdio_exit_handler+0x10>)
 80099f4:	4803      	ldr	r0, [pc, #12]	@ (8009a04 <stdio_exit_handler+0x14>)
 80099f6:	f000 b869 	b.w	8009acc <_fwalk_sglue>
 80099fa:	bf00      	nop
 80099fc:	20000950 	.word	0x20000950
 8009a00:	0800ad51 	.word	0x0800ad51
 8009a04:	20000960 	.word	0x20000960

08009a08 <cleanup_stdio>:
 8009a08:	6841      	ldr	r1, [r0, #4]
 8009a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a3c <cleanup_stdio+0x34>)
 8009a0c:	4299      	cmp	r1, r3
 8009a0e:	b510      	push	{r4, lr}
 8009a10:	4604      	mov	r4, r0
 8009a12:	d001      	beq.n	8009a18 <cleanup_stdio+0x10>
 8009a14:	f001 f99c 	bl	800ad50 <_fflush_r>
 8009a18:	68a1      	ldr	r1, [r4, #8]
 8009a1a:	4b09      	ldr	r3, [pc, #36]	@ (8009a40 <cleanup_stdio+0x38>)
 8009a1c:	4299      	cmp	r1, r3
 8009a1e:	d002      	beq.n	8009a26 <cleanup_stdio+0x1e>
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 f995 	bl	800ad50 <_fflush_r>
 8009a26:	68e1      	ldr	r1, [r4, #12]
 8009a28:	4b06      	ldr	r3, [pc, #24]	@ (8009a44 <cleanup_stdio+0x3c>)
 8009a2a:	4299      	cmp	r1, r3
 8009a2c:	d004      	beq.n	8009a38 <cleanup_stdio+0x30>
 8009a2e:	4620      	mov	r0, r4
 8009a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a34:	f001 b98c 	b.w	800ad50 <_fflush_r>
 8009a38:	bd10      	pop	{r4, pc}
 8009a3a:	bf00      	nop
 8009a3c:	200185f0 	.word	0x200185f0
 8009a40:	20018658 	.word	0x20018658
 8009a44:	200186c0 	.word	0x200186c0

08009a48 <global_stdio_init.part.0>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009a78 <global_stdio_init.part.0+0x30>)
 8009a4c:	4c0b      	ldr	r4, [pc, #44]	@ (8009a7c <global_stdio_init.part.0+0x34>)
 8009a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a80 <global_stdio_init.part.0+0x38>)
 8009a50:	601a      	str	r2, [r3, #0]
 8009a52:	4620      	mov	r0, r4
 8009a54:	2200      	movs	r2, #0
 8009a56:	2104      	movs	r1, #4
 8009a58:	f7ff ff94 	bl	8009984 <std>
 8009a5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009a60:	2201      	movs	r2, #1
 8009a62:	2109      	movs	r1, #9
 8009a64:	f7ff ff8e 	bl	8009984 <std>
 8009a68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009a6c:	2202      	movs	r2, #2
 8009a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a72:	2112      	movs	r1, #18
 8009a74:	f7ff bf86 	b.w	8009984 <std>
 8009a78:	20018728 	.word	0x20018728
 8009a7c:	200185f0 	.word	0x200185f0
 8009a80:	080099f1 	.word	0x080099f1

08009a84 <__sfp_lock_acquire>:
 8009a84:	4801      	ldr	r0, [pc, #4]	@ (8009a8c <__sfp_lock_acquire+0x8>)
 8009a86:	f000 b8f6 	b.w	8009c76 <__retarget_lock_acquire_recursive>
 8009a8a:	bf00      	nop
 8009a8c:	2001872d 	.word	0x2001872d

08009a90 <__sfp_lock_release>:
 8009a90:	4801      	ldr	r0, [pc, #4]	@ (8009a98 <__sfp_lock_release+0x8>)
 8009a92:	f000 b8f1 	b.w	8009c78 <__retarget_lock_release_recursive>
 8009a96:	bf00      	nop
 8009a98:	2001872d 	.word	0x2001872d

08009a9c <__sinit>:
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	f7ff fff0 	bl	8009a84 <__sfp_lock_acquire>
 8009aa4:	6a23      	ldr	r3, [r4, #32]
 8009aa6:	b11b      	cbz	r3, 8009ab0 <__sinit+0x14>
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	f7ff bff0 	b.w	8009a90 <__sfp_lock_release>
 8009ab0:	4b04      	ldr	r3, [pc, #16]	@ (8009ac4 <__sinit+0x28>)
 8009ab2:	6223      	str	r3, [r4, #32]
 8009ab4:	4b04      	ldr	r3, [pc, #16]	@ (8009ac8 <__sinit+0x2c>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1f5      	bne.n	8009aa8 <__sinit+0xc>
 8009abc:	f7ff ffc4 	bl	8009a48 <global_stdio_init.part.0>
 8009ac0:	e7f2      	b.n	8009aa8 <__sinit+0xc>
 8009ac2:	bf00      	nop
 8009ac4:	08009a09 	.word	0x08009a09
 8009ac8:	20018728 	.word	0x20018728

08009acc <_fwalk_sglue>:
 8009acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	4688      	mov	r8, r1
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	2600      	movs	r6, #0
 8009ad8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009adc:	f1b9 0901 	subs.w	r9, r9, #1
 8009ae0:	d505      	bpl.n	8009aee <_fwalk_sglue+0x22>
 8009ae2:	6824      	ldr	r4, [r4, #0]
 8009ae4:	2c00      	cmp	r4, #0
 8009ae6:	d1f7      	bne.n	8009ad8 <_fwalk_sglue+0xc>
 8009ae8:	4630      	mov	r0, r6
 8009aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aee:	89ab      	ldrh	r3, [r5, #12]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d907      	bls.n	8009b04 <_fwalk_sglue+0x38>
 8009af4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009af8:	3301      	adds	r3, #1
 8009afa:	d003      	beq.n	8009b04 <_fwalk_sglue+0x38>
 8009afc:	4629      	mov	r1, r5
 8009afe:	4638      	mov	r0, r7
 8009b00:	47c0      	blx	r8
 8009b02:	4306      	orrs	r6, r0
 8009b04:	3568      	adds	r5, #104	@ 0x68
 8009b06:	e7e9      	b.n	8009adc <_fwalk_sglue+0x10>

08009b08 <iprintf>:
 8009b08:	b40f      	push	{r0, r1, r2, r3}
 8009b0a:	b507      	push	{r0, r1, r2, lr}
 8009b0c:	4906      	ldr	r1, [pc, #24]	@ (8009b28 <iprintf+0x20>)
 8009b0e:	ab04      	add	r3, sp, #16
 8009b10:	6808      	ldr	r0, [r1, #0]
 8009b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b16:	6881      	ldr	r1, [r0, #8]
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	f000 ff7d 	bl	800aa18 <_vfiprintf_r>
 8009b1e:	b003      	add	sp, #12
 8009b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b24:	b004      	add	sp, #16
 8009b26:	4770      	bx	lr
 8009b28:	2000095c 	.word	0x2000095c

08009b2c <_puts_r>:
 8009b2c:	6a03      	ldr	r3, [r0, #32]
 8009b2e:	b570      	push	{r4, r5, r6, lr}
 8009b30:	6884      	ldr	r4, [r0, #8]
 8009b32:	4605      	mov	r5, r0
 8009b34:	460e      	mov	r6, r1
 8009b36:	b90b      	cbnz	r3, 8009b3c <_puts_r+0x10>
 8009b38:	f7ff ffb0 	bl	8009a9c <__sinit>
 8009b3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b3e:	07db      	lsls	r3, r3, #31
 8009b40:	d405      	bmi.n	8009b4e <_puts_r+0x22>
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	0598      	lsls	r0, r3, #22
 8009b46:	d402      	bmi.n	8009b4e <_puts_r+0x22>
 8009b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b4a:	f000 f894 	bl	8009c76 <__retarget_lock_acquire_recursive>
 8009b4e:	89a3      	ldrh	r3, [r4, #12]
 8009b50:	0719      	lsls	r1, r3, #28
 8009b52:	d502      	bpl.n	8009b5a <_puts_r+0x2e>
 8009b54:	6923      	ldr	r3, [r4, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d135      	bne.n	8009bc6 <_puts_r+0x9a>
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f001 fd23 	bl	800b5a8 <__swsetup_r>
 8009b62:	b380      	cbz	r0, 8009bc6 <_puts_r+0x9a>
 8009b64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b6a:	07da      	lsls	r2, r3, #31
 8009b6c:	d405      	bmi.n	8009b7a <_puts_r+0x4e>
 8009b6e:	89a3      	ldrh	r3, [r4, #12]
 8009b70:	059b      	lsls	r3, r3, #22
 8009b72:	d402      	bmi.n	8009b7a <_puts_r+0x4e>
 8009b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b76:	f000 f87f 	bl	8009c78 <__retarget_lock_release_recursive>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	bd70      	pop	{r4, r5, r6, pc}
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da04      	bge.n	8009b8c <_puts_r+0x60>
 8009b82:	69a2      	ldr	r2, [r4, #24]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	dc17      	bgt.n	8009bb8 <_puts_r+0x8c>
 8009b88:	290a      	cmp	r1, #10
 8009b8a:	d015      	beq.n	8009bb8 <_puts_r+0x8c>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	6022      	str	r2, [r4, #0]
 8009b92:	7019      	strb	r1, [r3, #0]
 8009b94:	68a3      	ldr	r3, [r4, #8]
 8009b96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	60a3      	str	r3, [r4, #8]
 8009b9e:	2900      	cmp	r1, #0
 8009ba0:	d1ed      	bne.n	8009b7e <_puts_r+0x52>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	da11      	bge.n	8009bca <_puts_r+0x9e>
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	210a      	movs	r1, #10
 8009baa:	4628      	mov	r0, r5
 8009bac:	f001 fcbd 	bl	800b52a <__swbuf_r>
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	d0d7      	beq.n	8009b64 <_puts_r+0x38>
 8009bb4:	250a      	movs	r5, #10
 8009bb6:	e7d7      	b.n	8009b68 <_puts_r+0x3c>
 8009bb8:	4622      	mov	r2, r4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f001 fcb5 	bl	800b52a <__swbuf_r>
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	d1e7      	bne.n	8009b94 <_puts_r+0x68>
 8009bc4:	e7ce      	b.n	8009b64 <_puts_r+0x38>
 8009bc6:	3e01      	subs	r6, #1
 8009bc8:	e7e4      	b.n	8009b94 <_puts_r+0x68>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	6022      	str	r2, [r4, #0]
 8009bd0:	220a      	movs	r2, #10
 8009bd2:	701a      	strb	r2, [r3, #0]
 8009bd4:	e7ee      	b.n	8009bb4 <_puts_r+0x88>
	...

08009bd8 <puts>:
 8009bd8:	4b02      	ldr	r3, [pc, #8]	@ (8009be4 <puts+0xc>)
 8009bda:	4601      	mov	r1, r0
 8009bdc:	6818      	ldr	r0, [r3, #0]
 8009bde:	f7ff bfa5 	b.w	8009b2c <_puts_r>
 8009be2:	bf00      	nop
 8009be4:	2000095c 	.word	0x2000095c

08009be8 <memset>:
 8009be8:	4402      	add	r2, r0
 8009bea:	4603      	mov	r3, r0
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d100      	bne.n	8009bf2 <memset+0xa>
 8009bf0:	4770      	bx	lr
 8009bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bf6:	e7f9      	b.n	8009bec <memset+0x4>

08009bf8 <_localeconv_r>:
 8009bf8:	4800      	ldr	r0, [pc, #0]	@ (8009bfc <_localeconv_r+0x4>)
 8009bfa:	4770      	bx	lr
 8009bfc:	20000a9c 	.word	0x20000a9c

08009c00 <_sbrk_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4d06      	ldr	r5, [pc, #24]	@ (8009c1c <_sbrk_r+0x1c>)
 8009c04:	2300      	movs	r3, #0
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	602b      	str	r3, [r5, #0]
 8009c0c:	f7f8 f8a6 	bl	8001d5c <_sbrk>
 8009c10:	1c43      	adds	r3, r0, #1
 8009c12:	d102      	bne.n	8009c1a <_sbrk_r+0x1a>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	b103      	cbz	r3, 8009c1a <_sbrk_r+0x1a>
 8009c18:	6023      	str	r3, [r4, #0]
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
 8009c1c:	20018730 	.word	0x20018730

08009c20 <__errno>:
 8009c20:	4b01      	ldr	r3, [pc, #4]	@ (8009c28 <__errno+0x8>)
 8009c22:	6818      	ldr	r0, [r3, #0]
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	2000095c 	.word	0x2000095c

08009c2c <__libc_init_array>:
 8009c2c:	b570      	push	{r4, r5, r6, lr}
 8009c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8009c64 <__libc_init_array+0x38>)
 8009c30:	4c0d      	ldr	r4, [pc, #52]	@ (8009c68 <__libc_init_array+0x3c>)
 8009c32:	1b64      	subs	r4, r4, r5
 8009c34:	10a4      	asrs	r4, r4, #2
 8009c36:	2600      	movs	r6, #0
 8009c38:	42a6      	cmp	r6, r4
 8009c3a:	d109      	bne.n	8009c50 <__libc_init_array+0x24>
 8009c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8009c6c <__libc_init_array+0x40>)
 8009c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8009c70 <__libc_init_array+0x44>)
 8009c40:	f002 f996 	bl	800bf70 <_init>
 8009c44:	1b64      	subs	r4, r4, r5
 8009c46:	10a4      	asrs	r4, r4, #2
 8009c48:	2600      	movs	r6, #0
 8009c4a:	42a6      	cmp	r6, r4
 8009c4c:	d105      	bne.n	8009c5a <__libc_init_array+0x2e>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c54:	4798      	blx	r3
 8009c56:	3601      	adds	r6, #1
 8009c58:	e7ee      	b.n	8009c38 <__libc_init_array+0xc>
 8009c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c5e:	4798      	blx	r3
 8009c60:	3601      	adds	r6, #1
 8009c62:	e7f2      	b.n	8009c4a <__libc_init_array+0x1e>
 8009c64:	0803c4d8 	.word	0x0803c4d8
 8009c68:	0803c4d8 	.word	0x0803c4d8
 8009c6c:	0803c4d8 	.word	0x0803c4d8
 8009c70:	0803c4dc 	.word	0x0803c4dc

08009c74 <__retarget_lock_init_recursive>:
 8009c74:	4770      	bx	lr

08009c76 <__retarget_lock_acquire_recursive>:
 8009c76:	4770      	bx	lr

08009c78 <__retarget_lock_release_recursive>:
 8009c78:	4770      	bx	lr

08009c7a <memcpy>:
 8009c7a:	440a      	add	r2, r1
 8009c7c:	4291      	cmp	r1, r2
 8009c7e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009c82:	d100      	bne.n	8009c86 <memcpy+0xc>
 8009c84:	4770      	bx	lr
 8009c86:	b510      	push	{r4, lr}
 8009c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c90:	4291      	cmp	r1, r2
 8009c92:	d1f9      	bne.n	8009c88 <memcpy+0xe>
 8009c94:	bd10      	pop	{r4, pc}

08009c96 <quorem>:
 8009c96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	6903      	ldr	r3, [r0, #16]
 8009c9c:	690c      	ldr	r4, [r1, #16]
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	db7e      	blt.n	8009da2 <quorem+0x10c>
 8009ca4:	3c01      	subs	r4, #1
 8009ca6:	f101 0814 	add.w	r8, r1, #20
 8009caa:	00a3      	lsls	r3, r4, #2
 8009cac:	f100 0514 	add.w	r5, r0, #20
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cb6:	9301      	str	r3, [sp, #4]
 8009cb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ccc:	d32e      	bcc.n	8009d2c <quorem+0x96>
 8009cce:	f04f 0a00 	mov.w	sl, #0
 8009cd2:	46c4      	mov	ip, r8
 8009cd4:	46ae      	mov	lr, r5
 8009cd6:	46d3      	mov	fp, sl
 8009cd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cdc:	b298      	uxth	r0, r3
 8009cde:	fb06 a000 	mla	r0, r6, r0, sl
 8009ce2:	0c02      	lsrs	r2, r0, #16
 8009ce4:	0c1b      	lsrs	r3, r3, #16
 8009ce6:	fb06 2303 	mla	r3, r6, r3, r2
 8009cea:	f8de 2000 	ldr.w	r2, [lr]
 8009cee:	b280      	uxth	r0, r0
 8009cf0:	b292      	uxth	r2, r2
 8009cf2:	1a12      	subs	r2, r2, r0
 8009cf4:	445a      	add	r2, fp
 8009cf6:	f8de 0000 	ldr.w	r0, [lr]
 8009cfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d04:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d08:	b292      	uxth	r2, r2
 8009d0a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d0e:	45e1      	cmp	r9, ip
 8009d10:	f84e 2b04 	str.w	r2, [lr], #4
 8009d14:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d18:	d2de      	bcs.n	8009cd8 <quorem+0x42>
 8009d1a:	9b00      	ldr	r3, [sp, #0]
 8009d1c:	58eb      	ldr	r3, [r5, r3]
 8009d1e:	b92b      	cbnz	r3, 8009d2c <quorem+0x96>
 8009d20:	9b01      	ldr	r3, [sp, #4]
 8009d22:	3b04      	subs	r3, #4
 8009d24:	429d      	cmp	r5, r3
 8009d26:	461a      	mov	r2, r3
 8009d28:	d32f      	bcc.n	8009d8a <quorem+0xf4>
 8009d2a:	613c      	str	r4, [r7, #16]
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f001 fab1 	bl	800b294 <__mcmp>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	db25      	blt.n	8009d82 <quorem+0xec>
 8009d36:	4629      	mov	r1, r5
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d3e:	f8d1 c000 	ldr.w	ip, [r1]
 8009d42:	fa1f fe82 	uxth.w	lr, r2
 8009d46:	fa1f f38c 	uxth.w	r3, ip
 8009d4a:	eba3 030e 	sub.w	r3, r3, lr
 8009d4e:	4403      	add	r3, r0
 8009d50:	0c12      	lsrs	r2, r2, #16
 8009d52:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d56:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d60:	45c1      	cmp	r9, r8
 8009d62:	f841 3b04 	str.w	r3, [r1], #4
 8009d66:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d6a:	d2e6      	bcs.n	8009d3a <quorem+0xa4>
 8009d6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d74:	b922      	cbnz	r2, 8009d80 <quorem+0xea>
 8009d76:	3b04      	subs	r3, #4
 8009d78:	429d      	cmp	r5, r3
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	d30b      	bcc.n	8009d96 <quorem+0x100>
 8009d7e:	613c      	str	r4, [r7, #16]
 8009d80:	3601      	adds	r6, #1
 8009d82:	4630      	mov	r0, r6
 8009d84:	b003      	add	sp, #12
 8009d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8a:	6812      	ldr	r2, [r2, #0]
 8009d8c:	3b04      	subs	r3, #4
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	d1cb      	bne.n	8009d2a <quorem+0x94>
 8009d92:	3c01      	subs	r4, #1
 8009d94:	e7c6      	b.n	8009d24 <quorem+0x8e>
 8009d96:	6812      	ldr	r2, [r2, #0]
 8009d98:	3b04      	subs	r3, #4
 8009d9a:	2a00      	cmp	r2, #0
 8009d9c:	d1ef      	bne.n	8009d7e <quorem+0xe8>
 8009d9e:	3c01      	subs	r4, #1
 8009da0:	e7ea      	b.n	8009d78 <quorem+0xe2>
 8009da2:	2000      	movs	r0, #0
 8009da4:	e7ee      	b.n	8009d84 <quorem+0xee>
	...

08009da8 <_dtoa_r>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	69c7      	ldr	r7, [r0, #28]
 8009dae:	b099      	sub	sp, #100	@ 0x64
 8009db0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009db4:	ec55 4b10 	vmov	r4, r5, d0
 8009db8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009dba:	9109      	str	r1, [sp, #36]	@ 0x24
 8009dbc:	4683      	mov	fp, r0
 8009dbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009dc2:	b97f      	cbnz	r7, 8009de4 <_dtoa_r+0x3c>
 8009dc4:	2010      	movs	r0, #16
 8009dc6:	f7ff fb99 	bl	80094fc <malloc>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	f8cb 001c 	str.w	r0, [fp, #28]
 8009dd0:	b920      	cbnz	r0, 8009ddc <_dtoa_r+0x34>
 8009dd2:	4ba7      	ldr	r3, [pc, #668]	@ (800a070 <_dtoa_r+0x2c8>)
 8009dd4:	21ef      	movs	r1, #239	@ 0xef
 8009dd6:	48a7      	ldr	r0, [pc, #668]	@ (800a074 <_dtoa_r+0x2cc>)
 8009dd8:	f001 fd06 	bl	800b7e8 <__assert_func>
 8009ddc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009de0:	6007      	str	r7, [r0, #0]
 8009de2:	60c7      	str	r7, [r0, #12]
 8009de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	b159      	cbz	r1, 8009e04 <_dtoa_r+0x5c>
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	604a      	str	r2, [r1, #4]
 8009df0:	2301      	movs	r3, #1
 8009df2:	4093      	lsls	r3, r2
 8009df4:	608b      	str	r3, [r1, #8]
 8009df6:	4658      	mov	r0, fp
 8009df8:	f001 f812 	bl	800ae20 <_Bfree>
 8009dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	1e2b      	subs	r3, r5, #0
 8009e06:	bfb9      	ittee	lt
 8009e08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	9303      	strlt	r3, [sp, #12]
 8009e0e:	2300      	movge	r3, #0
 8009e10:	6033      	strge	r3, [r6, #0]
 8009e12:	9f03      	ldr	r7, [sp, #12]
 8009e14:	4b98      	ldr	r3, [pc, #608]	@ (800a078 <_dtoa_r+0x2d0>)
 8009e16:	bfbc      	itt	lt
 8009e18:	2201      	movlt	r2, #1
 8009e1a:	6032      	strlt	r2, [r6, #0]
 8009e1c:	43bb      	bics	r3, r7
 8009e1e:	d112      	bne.n	8009e46 <_dtoa_r+0x9e>
 8009e20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e2c:	4323      	orrs	r3, r4
 8009e2e:	f000 854d 	beq.w	800a8cc <_dtoa_r+0xb24>
 8009e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a08c <_dtoa_r+0x2e4>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 854f 	beq.w	800a8dc <_dtoa_r+0xb34>
 8009e3e:	f10a 0303 	add.w	r3, sl, #3
 8009e42:	f000 bd49 	b.w	800a8d8 <_dtoa_r+0xb30>
 8009e46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	ec51 0b17 	vmov	r0, r1, d7
 8009e50:	2300      	movs	r3, #0
 8009e52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009e56:	f7f6 febf 	bl	8000bd8 <__aeabi_dcmpeq>
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	b158      	cbz	r0, 8009e76 <_dtoa_r+0xce>
 8009e5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e60:	2301      	movs	r3, #1
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e66:	b113      	cbz	r3, 8009e6e <_dtoa_r+0xc6>
 8009e68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009e6a:	4b84      	ldr	r3, [pc, #528]	@ (800a07c <_dtoa_r+0x2d4>)
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a090 <_dtoa_r+0x2e8>
 8009e72:	f000 bd33 	b.w	800a8dc <_dtoa_r+0xb34>
 8009e76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009e7a:	aa16      	add	r2, sp, #88	@ 0x58
 8009e7c:	a917      	add	r1, sp, #92	@ 0x5c
 8009e7e:	4658      	mov	r0, fp
 8009e80:	f001 fab8 	bl	800b3f4 <__d2b>
 8009e84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e88:	4681      	mov	r9, r0
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d077      	beq.n	8009f7e <_dtoa_r+0x1d6>
 8009e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ea0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009ea4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4b74      	ldr	r3, [pc, #464]	@ (800a080 <_dtoa_r+0x2d8>)
 8009eae:	f7f6 fa73 	bl	8000398 <__aeabi_dsub>
 8009eb2:	a369      	add	r3, pc, #420	@ (adr r3, 800a058 <_dtoa_r+0x2b0>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fc26 	bl	8000708 <__aeabi_dmul>
 8009ebc:	a368      	add	r3, pc, #416	@ (adr r3, 800a060 <_dtoa_r+0x2b8>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 fa6b 	bl	800039c <__adddf3>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4630      	mov	r0, r6
 8009eca:	460d      	mov	r5, r1
 8009ecc:	f7f6 fbb2 	bl	8000634 <__aeabi_i2d>
 8009ed0:	a365      	add	r3, pc, #404	@ (adr r3, 800a068 <_dtoa_r+0x2c0>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fc17 	bl	8000708 <__aeabi_dmul>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 fa5b 	bl	800039c <__adddf3>
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	460d      	mov	r5, r1
 8009eea:	f7f6 febd 	bl	8000c68 <__aeabi_d2iz>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 fe78 	bl	8000bec <__aeabi_dcmplt>
 8009efc:	b140      	cbz	r0, 8009f10 <_dtoa_r+0x168>
 8009efe:	4638      	mov	r0, r7
 8009f00:	f7f6 fb98 	bl	8000634 <__aeabi_i2d>
 8009f04:	4622      	mov	r2, r4
 8009f06:	462b      	mov	r3, r5
 8009f08:	f7f6 fe66 	bl	8000bd8 <__aeabi_dcmpeq>
 8009f0c:	b900      	cbnz	r0, 8009f10 <_dtoa_r+0x168>
 8009f0e:	3f01      	subs	r7, #1
 8009f10:	2f16      	cmp	r7, #22
 8009f12:	d851      	bhi.n	8009fb8 <_dtoa_r+0x210>
 8009f14:	4b5b      	ldr	r3, [pc, #364]	@ (800a084 <_dtoa_r+0x2dc>)
 8009f16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f22:	f7f6 fe63 	bl	8000bec <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d048      	beq.n	8009fbc <_dtoa_r+0x214>
 8009f2a:	3f01      	subs	r7, #1
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009f30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f32:	1b9b      	subs	r3, r3, r6
 8009f34:	1e5a      	subs	r2, r3, #1
 8009f36:	bf44      	itt	mi
 8009f38:	f1c3 0801 	rsbmi	r8, r3, #1
 8009f3c:	2300      	movmi	r3, #0
 8009f3e:	9208      	str	r2, [sp, #32]
 8009f40:	bf54      	ite	pl
 8009f42:	f04f 0800 	movpl.w	r8, #0
 8009f46:	9308      	strmi	r3, [sp, #32]
 8009f48:	2f00      	cmp	r7, #0
 8009f4a:	db39      	blt.n	8009fc0 <_dtoa_r+0x218>
 8009f4c:	9b08      	ldr	r3, [sp, #32]
 8009f4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009f50:	443b      	add	r3, r7
 8009f52:	9308      	str	r3, [sp, #32]
 8009f54:	2300      	movs	r3, #0
 8009f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5a:	2b09      	cmp	r3, #9
 8009f5c:	d864      	bhi.n	800a028 <_dtoa_r+0x280>
 8009f5e:	2b05      	cmp	r3, #5
 8009f60:	bfc4      	itt	gt
 8009f62:	3b04      	subgt	r3, #4
 8009f64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f68:	f1a3 0302 	sub.w	r3, r3, #2
 8009f6c:	bfcc      	ite	gt
 8009f6e:	2400      	movgt	r4, #0
 8009f70:	2401      	movle	r4, #1
 8009f72:	2b03      	cmp	r3, #3
 8009f74:	d863      	bhi.n	800a03e <_dtoa_r+0x296>
 8009f76:	e8df f003 	tbb	[pc, r3]
 8009f7a:	372a      	.short	0x372a
 8009f7c:	5535      	.short	0x5535
 8009f7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009f82:	441e      	add	r6, r3
 8009f84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	bfc1      	itttt	gt
 8009f8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f90:	409f      	lslgt	r7, r3
 8009f92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f9a:	bfd6      	itet	le
 8009f9c:	f1c3 0320 	rsble	r3, r3, #32
 8009fa0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009fa4:	fa04 f003 	lslle.w	r0, r4, r3
 8009fa8:	f7f6 fb34 	bl	8000614 <__aeabi_ui2d>
 8009fac:	2201      	movs	r2, #1
 8009fae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009fb2:	3e01      	subs	r6, #1
 8009fb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8009fb6:	e777      	b.n	8009ea8 <_dtoa_r+0x100>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e7b8      	b.n	8009f2e <_dtoa_r+0x186>
 8009fbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8009fbe:	e7b7      	b.n	8009f30 <_dtoa_r+0x188>
 8009fc0:	427b      	negs	r3, r7
 8009fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	eba8 0807 	sub.w	r8, r8, r7
 8009fca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fcc:	e7c4      	b.n	8009f58 <_dtoa_r+0x1b0>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dc35      	bgt.n	800a044 <_dtoa_r+0x29c>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	9307      	str	r3, [sp, #28]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009fe2:	e00b      	b.n	8009ffc <_dtoa_r+0x254>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e7f3      	b.n	8009fd0 <_dtoa_r+0x228>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fee:	18fb      	adds	r3, r7, r3
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	bfb8      	it	lt
 8009ffa:	2301      	movlt	r3, #1
 8009ffc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a000:	2100      	movs	r1, #0
 800a002:	2204      	movs	r2, #4
 800a004:	f102 0514 	add.w	r5, r2, #20
 800a008:	429d      	cmp	r5, r3
 800a00a:	d91f      	bls.n	800a04c <_dtoa_r+0x2a4>
 800a00c:	6041      	str	r1, [r0, #4]
 800a00e:	4658      	mov	r0, fp
 800a010:	f000 fec6 	bl	800ada0 <_Balloc>
 800a014:	4682      	mov	sl, r0
 800a016:	2800      	cmp	r0, #0
 800a018:	d13c      	bne.n	800a094 <_dtoa_r+0x2ec>
 800a01a:	4b1b      	ldr	r3, [pc, #108]	@ (800a088 <_dtoa_r+0x2e0>)
 800a01c:	4602      	mov	r2, r0
 800a01e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a022:	e6d8      	b.n	8009dd6 <_dtoa_r+0x2e>
 800a024:	2301      	movs	r3, #1
 800a026:	e7e0      	b.n	8009fea <_dtoa_r+0x242>
 800a028:	2401      	movs	r4, #1
 800a02a:	2300      	movs	r3, #0
 800a02c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a02e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a030:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	9307      	str	r3, [sp, #28]
 800a038:	2200      	movs	r2, #0
 800a03a:	2312      	movs	r3, #18
 800a03c:	e7d0      	b.n	8009fe0 <_dtoa_r+0x238>
 800a03e:	2301      	movs	r3, #1
 800a040:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a042:	e7f5      	b.n	800a030 <_dtoa_r+0x288>
 800a044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	9307      	str	r3, [sp, #28]
 800a04a:	e7d7      	b.n	8009ffc <_dtoa_r+0x254>
 800a04c:	3101      	adds	r1, #1
 800a04e:	0052      	lsls	r2, r2, #1
 800a050:	e7d8      	b.n	800a004 <_dtoa_r+0x25c>
 800a052:	bf00      	nop
 800a054:	f3af 8000 	nop.w
 800a058:	636f4361 	.word	0x636f4361
 800a05c:	3fd287a7 	.word	0x3fd287a7
 800a060:	8b60c8b3 	.word	0x8b60c8b3
 800a064:	3fc68a28 	.word	0x3fc68a28
 800a068:	509f79fb 	.word	0x509f79fb
 800a06c:	3fd34413 	.word	0x3fd34413
 800a070:	0803c189 	.word	0x0803c189
 800a074:	0803c1a0 	.word	0x0803c1a0
 800a078:	7ff00000 	.word	0x7ff00000
 800a07c:	0803c159 	.word	0x0803c159
 800a080:	3ff80000 	.word	0x3ff80000
 800a084:	0803c2a8 	.word	0x0803c2a8
 800a088:	0803c1f8 	.word	0x0803c1f8
 800a08c:	0803c185 	.word	0x0803c185
 800a090:	0803c158 	.word	0x0803c158
 800a094:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a098:	6018      	str	r0, [r3, #0]
 800a09a:	9b07      	ldr	r3, [sp, #28]
 800a09c:	2b0e      	cmp	r3, #14
 800a09e:	f200 80a4 	bhi.w	800a1ea <_dtoa_r+0x442>
 800a0a2:	2c00      	cmp	r4, #0
 800a0a4:	f000 80a1 	beq.w	800a1ea <_dtoa_r+0x442>
 800a0a8:	2f00      	cmp	r7, #0
 800a0aa:	dd33      	ble.n	800a114 <_dtoa_r+0x36c>
 800a0ac:	4bad      	ldr	r3, [pc, #692]	@ (800a364 <_dtoa_r+0x5bc>)
 800a0ae:	f007 020f 	and.w	r2, r7, #15
 800a0b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0b6:	ed93 7b00 	vldr	d7, [r3]
 800a0ba:	05f8      	lsls	r0, r7, #23
 800a0bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a0c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a0c4:	d516      	bpl.n	800a0f4 <_dtoa_r+0x34c>
 800a0c6:	4ba8      	ldr	r3, [pc, #672]	@ (800a368 <_dtoa_r+0x5c0>)
 800a0c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0d0:	f7f6 fc44 	bl	800095c <__aeabi_ddiv>
 800a0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0d8:	f004 040f 	and.w	r4, r4, #15
 800a0dc:	2603      	movs	r6, #3
 800a0de:	4da2      	ldr	r5, [pc, #648]	@ (800a368 <_dtoa_r+0x5c0>)
 800a0e0:	b954      	cbnz	r4, 800a0f8 <_dtoa_r+0x350>
 800a0e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ea:	f7f6 fc37 	bl	800095c <__aeabi_ddiv>
 800a0ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0f2:	e028      	b.n	800a146 <_dtoa_r+0x39e>
 800a0f4:	2602      	movs	r6, #2
 800a0f6:	e7f2      	b.n	800a0de <_dtoa_r+0x336>
 800a0f8:	07e1      	lsls	r1, r4, #31
 800a0fa:	d508      	bpl.n	800a10e <_dtoa_r+0x366>
 800a0fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a100:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a104:	f7f6 fb00 	bl	8000708 <__aeabi_dmul>
 800a108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a10c:	3601      	adds	r6, #1
 800a10e:	1064      	asrs	r4, r4, #1
 800a110:	3508      	adds	r5, #8
 800a112:	e7e5      	b.n	800a0e0 <_dtoa_r+0x338>
 800a114:	f000 80d2 	beq.w	800a2bc <_dtoa_r+0x514>
 800a118:	427c      	negs	r4, r7
 800a11a:	4b92      	ldr	r3, [pc, #584]	@ (800a364 <_dtoa_r+0x5bc>)
 800a11c:	4d92      	ldr	r5, [pc, #584]	@ (800a368 <_dtoa_r+0x5c0>)
 800a11e:	f004 020f 	and.w	r2, r4, #15
 800a122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a12e:	f7f6 faeb 	bl	8000708 <__aeabi_dmul>
 800a132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a136:	1124      	asrs	r4, r4, #4
 800a138:	2300      	movs	r3, #0
 800a13a:	2602      	movs	r6, #2
 800a13c:	2c00      	cmp	r4, #0
 800a13e:	f040 80b2 	bne.w	800a2a6 <_dtoa_r+0x4fe>
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1d3      	bne.n	800a0ee <_dtoa_r+0x346>
 800a146:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a148:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 80b7 	beq.w	800a2c0 <_dtoa_r+0x518>
 800a152:	4b86      	ldr	r3, [pc, #536]	@ (800a36c <_dtoa_r+0x5c4>)
 800a154:	2200      	movs	r2, #0
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 fd47 	bl	8000bec <__aeabi_dcmplt>
 800a15e:	2800      	cmp	r0, #0
 800a160:	f000 80ae 	beq.w	800a2c0 <_dtoa_r+0x518>
 800a164:	9b07      	ldr	r3, [sp, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 80aa 	beq.w	800a2c0 <_dtoa_r+0x518>
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	dd37      	ble.n	800a1e2 <_dtoa_r+0x43a>
 800a172:	1e7b      	subs	r3, r7, #1
 800a174:	9304      	str	r3, [sp, #16]
 800a176:	4620      	mov	r0, r4
 800a178:	4b7d      	ldr	r3, [pc, #500]	@ (800a370 <_dtoa_r+0x5c8>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f6 fac3 	bl	8000708 <__aeabi_dmul>
 800a182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a186:	9c00      	ldr	r4, [sp, #0]
 800a188:	3601      	adds	r6, #1
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7f6 fa52 	bl	8000634 <__aeabi_i2d>
 800a190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a194:	f7f6 fab8 	bl	8000708 <__aeabi_dmul>
 800a198:	4b76      	ldr	r3, [pc, #472]	@ (800a374 <_dtoa_r+0x5cc>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	f7f6 f8fe 	bl	800039c <__adddf3>
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a1a6:	2c00      	cmp	r4, #0
 800a1a8:	f040 808d 	bne.w	800a2c6 <_dtoa_r+0x51e>
 800a1ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b0:	4b71      	ldr	r3, [pc, #452]	@ (800a378 <_dtoa_r+0x5d0>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f7f6 f8f0 	bl	8000398 <__aeabi_dsub>
 800a1b8:	4602      	mov	r2, r0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1c0:	462a      	mov	r2, r5
 800a1c2:	4633      	mov	r3, r6
 800a1c4:	f7f6 fd30 	bl	8000c28 <__aeabi_dcmpgt>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	f040 828b 	bne.w	800a6e4 <_dtoa_r+0x93c>
 800a1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d2:	462a      	mov	r2, r5
 800a1d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1d8:	f7f6 fd08 	bl	8000bec <__aeabi_dcmplt>
 800a1dc:	2800      	cmp	r0, #0
 800a1de:	f040 8128 	bne.w	800a432 <_dtoa_r+0x68a>
 800a1e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a1e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a1ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f2c0 815a 	blt.w	800a4a6 <_dtoa_r+0x6fe>
 800a1f2:	2f0e      	cmp	r7, #14
 800a1f4:	f300 8157 	bgt.w	800a4a6 <_dtoa_r+0x6fe>
 800a1f8:	4b5a      	ldr	r3, [pc, #360]	@ (800a364 <_dtoa_r+0x5bc>)
 800a1fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a1fe:	ed93 7b00 	vldr	d7, [r3]
 800a202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a204:	2b00      	cmp	r3, #0
 800a206:	ed8d 7b00 	vstr	d7, [sp]
 800a20a:	da03      	bge.n	800a214 <_dtoa_r+0x46c>
 800a20c:	9b07      	ldr	r3, [sp, #28]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f340 8101 	ble.w	800a416 <_dtoa_r+0x66e>
 800a214:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a218:	4656      	mov	r6, sl
 800a21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 fb9b 	bl	800095c <__aeabi_ddiv>
 800a226:	f7f6 fd1f 	bl	8000c68 <__aeabi_d2iz>
 800a22a:	4680      	mov	r8, r0
 800a22c:	f7f6 fa02 	bl	8000634 <__aeabi_i2d>
 800a230:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a234:	f7f6 fa68 	bl	8000708 <__aeabi_dmul>
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a244:	f7f6 f8a8 	bl	8000398 <__aeabi_dsub>
 800a248:	f806 4b01 	strb.w	r4, [r6], #1
 800a24c:	9d07      	ldr	r5, [sp, #28]
 800a24e:	eba6 040a 	sub.w	r4, r6, sl
 800a252:	42a5      	cmp	r5, r4
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	f040 8117 	bne.w	800a48a <_dtoa_r+0x6e2>
 800a25c:	f7f6 f89e 	bl	800039c <__adddf3>
 800a260:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a264:	4604      	mov	r4, r0
 800a266:	460d      	mov	r5, r1
 800a268:	f7f6 fcde 	bl	8000c28 <__aeabi_dcmpgt>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	f040 80f9 	bne.w	800a464 <_dtoa_r+0x6bc>
 800a272:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a276:	4620      	mov	r0, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	f7f6 fcad 	bl	8000bd8 <__aeabi_dcmpeq>
 800a27e:	b118      	cbz	r0, 800a288 <_dtoa_r+0x4e0>
 800a280:	f018 0f01 	tst.w	r8, #1
 800a284:	f040 80ee 	bne.w	800a464 <_dtoa_r+0x6bc>
 800a288:	4649      	mov	r1, r9
 800a28a:	4658      	mov	r0, fp
 800a28c:	f000 fdc8 	bl	800ae20 <_Bfree>
 800a290:	2300      	movs	r3, #0
 800a292:	7033      	strb	r3, [r6, #0]
 800a294:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a296:	3701      	adds	r7, #1
 800a298:	601f      	str	r7, [r3, #0]
 800a29a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 831d 	beq.w	800a8dc <_dtoa_r+0xb34>
 800a2a2:	601e      	str	r6, [r3, #0]
 800a2a4:	e31a      	b.n	800a8dc <_dtoa_r+0xb34>
 800a2a6:	07e2      	lsls	r2, r4, #31
 800a2a8:	d505      	bpl.n	800a2b6 <_dtoa_r+0x50e>
 800a2aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2ae:	f7f6 fa2b 	bl	8000708 <__aeabi_dmul>
 800a2b2:	3601      	adds	r6, #1
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	1064      	asrs	r4, r4, #1
 800a2b8:	3508      	adds	r5, #8
 800a2ba:	e73f      	b.n	800a13c <_dtoa_r+0x394>
 800a2bc:	2602      	movs	r6, #2
 800a2be:	e742      	b.n	800a146 <_dtoa_r+0x39e>
 800a2c0:	9c07      	ldr	r4, [sp, #28]
 800a2c2:	9704      	str	r7, [sp, #16]
 800a2c4:	e761      	b.n	800a18a <_dtoa_r+0x3e2>
 800a2c6:	4b27      	ldr	r3, [pc, #156]	@ (800a364 <_dtoa_r+0x5bc>)
 800a2c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a2ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2d2:	4454      	add	r4, sl
 800a2d4:	2900      	cmp	r1, #0
 800a2d6:	d053      	beq.n	800a380 <_dtoa_r+0x5d8>
 800a2d8:	4928      	ldr	r1, [pc, #160]	@ (800a37c <_dtoa_r+0x5d4>)
 800a2da:	2000      	movs	r0, #0
 800a2dc:	f7f6 fb3e 	bl	800095c <__aeabi_ddiv>
 800a2e0:	4633      	mov	r3, r6
 800a2e2:	462a      	mov	r2, r5
 800a2e4:	f7f6 f858 	bl	8000398 <__aeabi_dsub>
 800a2e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2ec:	4656      	mov	r6, sl
 800a2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f2:	f7f6 fcb9 	bl	8000c68 <__aeabi_d2iz>
 800a2f6:	4605      	mov	r5, r0
 800a2f8:	f7f6 f99c 	bl	8000634 <__aeabi_i2d>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	460b      	mov	r3, r1
 800a300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a304:	f7f6 f848 	bl	8000398 <__aeabi_dsub>
 800a308:	3530      	adds	r5, #48	@ 0x30
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a312:	f806 5b01 	strb.w	r5, [r6], #1
 800a316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a31a:	f7f6 fc67 	bl	8000bec <__aeabi_dcmplt>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d171      	bne.n	800a406 <_dtoa_r+0x65e>
 800a322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a326:	4911      	ldr	r1, [pc, #68]	@ (800a36c <_dtoa_r+0x5c4>)
 800a328:	2000      	movs	r0, #0
 800a32a:	f7f6 f835 	bl	8000398 <__aeabi_dsub>
 800a32e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a332:	f7f6 fc5b 	bl	8000bec <__aeabi_dcmplt>
 800a336:	2800      	cmp	r0, #0
 800a338:	f040 8095 	bne.w	800a466 <_dtoa_r+0x6be>
 800a33c:	42a6      	cmp	r6, r4
 800a33e:	f43f af50 	beq.w	800a1e2 <_dtoa_r+0x43a>
 800a342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a346:	4b0a      	ldr	r3, [pc, #40]	@ (800a370 <_dtoa_r+0x5c8>)
 800a348:	2200      	movs	r2, #0
 800a34a:	f7f6 f9dd 	bl	8000708 <__aeabi_dmul>
 800a34e:	4b08      	ldr	r3, [pc, #32]	@ (800a370 <_dtoa_r+0x5c8>)
 800a350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a354:	2200      	movs	r2, #0
 800a356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a35a:	f7f6 f9d5 	bl	8000708 <__aeabi_dmul>
 800a35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a362:	e7c4      	b.n	800a2ee <_dtoa_r+0x546>
 800a364:	0803c2a8 	.word	0x0803c2a8
 800a368:	0803c280 	.word	0x0803c280
 800a36c:	3ff00000 	.word	0x3ff00000
 800a370:	40240000 	.word	0x40240000
 800a374:	401c0000 	.word	0x401c0000
 800a378:	40140000 	.word	0x40140000
 800a37c:	3fe00000 	.word	0x3fe00000
 800a380:	4631      	mov	r1, r6
 800a382:	4628      	mov	r0, r5
 800a384:	f7f6 f9c0 	bl	8000708 <__aeabi_dmul>
 800a388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a38c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a38e:	4656      	mov	r6, sl
 800a390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a394:	f7f6 fc68 	bl	8000c68 <__aeabi_d2iz>
 800a398:	4605      	mov	r5, r0
 800a39a:	f7f6 f94b 	bl	8000634 <__aeabi_i2d>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a6:	f7f5 fff7 	bl	8000398 <__aeabi_dsub>
 800a3aa:	3530      	adds	r5, #48	@ 0x30
 800a3ac:	f806 5b01 	strb.w	r5, [r6], #1
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	42a6      	cmp	r6, r4
 800a3b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a3ba:	f04f 0200 	mov.w	r2, #0
 800a3be:	d124      	bne.n	800a40a <_dtoa_r+0x662>
 800a3c0:	4bac      	ldr	r3, [pc, #688]	@ (800a674 <_dtoa_r+0x8cc>)
 800a3c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a3c6:	f7f5 ffe9 	bl	800039c <__adddf3>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3d2:	f7f6 fc29 	bl	8000c28 <__aeabi_dcmpgt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d145      	bne.n	800a466 <_dtoa_r+0x6be>
 800a3da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a3de:	49a5      	ldr	r1, [pc, #660]	@ (800a674 <_dtoa_r+0x8cc>)
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	f7f5 ffd9 	bl	8000398 <__aeabi_dsub>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3ee:	f7f6 fbfd 	bl	8000bec <__aeabi_dcmplt>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f43f aef5 	beq.w	800a1e2 <_dtoa_r+0x43a>
 800a3f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a3fa:	1e73      	subs	r3, r6, #1
 800a3fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800a3fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a402:	2b30      	cmp	r3, #48	@ 0x30
 800a404:	d0f8      	beq.n	800a3f8 <_dtoa_r+0x650>
 800a406:	9f04      	ldr	r7, [sp, #16]
 800a408:	e73e      	b.n	800a288 <_dtoa_r+0x4e0>
 800a40a:	4b9b      	ldr	r3, [pc, #620]	@ (800a678 <_dtoa_r+0x8d0>)
 800a40c:	f7f6 f97c 	bl	8000708 <__aeabi_dmul>
 800a410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a414:	e7bc      	b.n	800a390 <_dtoa_r+0x5e8>
 800a416:	d10c      	bne.n	800a432 <_dtoa_r+0x68a>
 800a418:	4b98      	ldr	r3, [pc, #608]	@ (800a67c <_dtoa_r+0x8d4>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a420:	f7f6 f972 	bl	8000708 <__aeabi_dmul>
 800a424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a428:	f7f6 fbf4 	bl	8000c14 <__aeabi_dcmpge>
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f000 8157 	beq.w	800a6e0 <_dtoa_r+0x938>
 800a432:	2400      	movs	r4, #0
 800a434:	4625      	mov	r5, r4
 800a436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a438:	43db      	mvns	r3, r3
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	4656      	mov	r6, sl
 800a43e:	2700      	movs	r7, #0
 800a440:	4621      	mov	r1, r4
 800a442:	4658      	mov	r0, fp
 800a444:	f000 fcec 	bl	800ae20 <_Bfree>
 800a448:	2d00      	cmp	r5, #0
 800a44a:	d0dc      	beq.n	800a406 <_dtoa_r+0x65e>
 800a44c:	b12f      	cbz	r7, 800a45a <_dtoa_r+0x6b2>
 800a44e:	42af      	cmp	r7, r5
 800a450:	d003      	beq.n	800a45a <_dtoa_r+0x6b2>
 800a452:	4639      	mov	r1, r7
 800a454:	4658      	mov	r0, fp
 800a456:	f000 fce3 	bl	800ae20 <_Bfree>
 800a45a:	4629      	mov	r1, r5
 800a45c:	4658      	mov	r0, fp
 800a45e:	f000 fcdf 	bl	800ae20 <_Bfree>
 800a462:	e7d0      	b.n	800a406 <_dtoa_r+0x65e>
 800a464:	9704      	str	r7, [sp, #16]
 800a466:	4633      	mov	r3, r6
 800a468:	461e      	mov	r6, r3
 800a46a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a46e:	2a39      	cmp	r2, #57	@ 0x39
 800a470:	d107      	bne.n	800a482 <_dtoa_r+0x6da>
 800a472:	459a      	cmp	sl, r3
 800a474:	d1f8      	bne.n	800a468 <_dtoa_r+0x6c0>
 800a476:	9a04      	ldr	r2, [sp, #16]
 800a478:	3201      	adds	r2, #1
 800a47a:	9204      	str	r2, [sp, #16]
 800a47c:	2230      	movs	r2, #48	@ 0x30
 800a47e:	f88a 2000 	strb.w	r2, [sl]
 800a482:	781a      	ldrb	r2, [r3, #0]
 800a484:	3201      	adds	r2, #1
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	e7bd      	b.n	800a406 <_dtoa_r+0x65e>
 800a48a:	4b7b      	ldr	r3, [pc, #492]	@ (800a678 <_dtoa_r+0x8d0>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	f7f6 f93b 	bl	8000708 <__aeabi_dmul>
 800a492:	2200      	movs	r2, #0
 800a494:	2300      	movs	r3, #0
 800a496:	4604      	mov	r4, r0
 800a498:	460d      	mov	r5, r1
 800a49a:	f7f6 fb9d 	bl	8000bd8 <__aeabi_dcmpeq>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f aebb 	beq.w	800a21a <_dtoa_r+0x472>
 800a4a4:	e6f0      	b.n	800a288 <_dtoa_r+0x4e0>
 800a4a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4a8:	2a00      	cmp	r2, #0
 800a4aa:	f000 80db 	beq.w	800a664 <_dtoa_r+0x8bc>
 800a4ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4b0:	2a01      	cmp	r2, #1
 800a4b2:	f300 80bf 	bgt.w	800a634 <_dtoa_r+0x88c>
 800a4b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	f000 80b7 	beq.w	800a62c <_dtoa_r+0x884>
 800a4be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a4c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a4c4:	4646      	mov	r6, r8
 800a4c6:	9a08      	ldr	r2, [sp, #32]
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	441a      	add	r2, r3
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	4498      	add	r8, r3
 800a4d0:	9208      	str	r2, [sp, #32]
 800a4d2:	f000 fd59 	bl	800af88 <__i2b>
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	b15e      	cbz	r6, 800a4f2 <_dtoa_r+0x74a>
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dd08      	ble.n	800a4f2 <_dtoa_r+0x74a>
 800a4e0:	42b3      	cmp	r3, r6
 800a4e2:	9a08      	ldr	r2, [sp, #32]
 800a4e4:	bfa8      	it	ge
 800a4e6:	4633      	movge	r3, r6
 800a4e8:	eba8 0803 	sub.w	r8, r8, r3
 800a4ec:	1af6      	subs	r6, r6, r3
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	9308      	str	r3, [sp, #32]
 800a4f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4f4:	b1f3      	cbz	r3, 800a534 <_dtoa_r+0x78c>
 800a4f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	f000 80b7 	beq.w	800a66c <_dtoa_r+0x8c4>
 800a4fe:	b18c      	cbz	r4, 800a524 <_dtoa_r+0x77c>
 800a500:	4629      	mov	r1, r5
 800a502:	4622      	mov	r2, r4
 800a504:	4658      	mov	r0, fp
 800a506:	f000 fdff 	bl	800b108 <__pow5mult>
 800a50a:	464a      	mov	r2, r9
 800a50c:	4601      	mov	r1, r0
 800a50e:	4605      	mov	r5, r0
 800a510:	4658      	mov	r0, fp
 800a512:	f000 fd4f 	bl	800afb4 <__multiply>
 800a516:	4649      	mov	r1, r9
 800a518:	9004      	str	r0, [sp, #16]
 800a51a:	4658      	mov	r0, fp
 800a51c:	f000 fc80 	bl	800ae20 <_Bfree>
 800a520:	9b04      	ldr	r3, [sp, #16]
 800a522:	4699      	mov	r9, r3
 800a524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a526:	1b1a      	subs	r2, r3, r4
 800a528:	d004      	beq.n	800a534 <_dtoa_r+0x78c>
 800a52a:	4649      	mov	r1, r9
 800a52c:	4658      	mov	r0, fp
 800a52e:	f000 fdeb 	bl	800b108 <__pow5mult>
 800a532:	4681      	mov	r9, r0
 800a534:	2101      	movs	r1, #1
 800a536:	4658      	mov	r0, fp
 800a538:	f000 fd26 	bl	800af88 <__i2b>
 800a53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a53e:	4604      	mov	r4, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	f000 81cf 	beq.w	800a8e4 <_dtoa_r+0xb3c>
 800a546:	461a      	mov	r2, r3
 800a548:	4601      	mov	r1, r0
 800a54a:	4658      	mov	r0, fp
 800a54c:	f000 fddc 	bl	800b108 <__pow5mult>
 800a550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a552:	2b01      	cmp	r3, #1
 800a554:	4604      	mov	r4, r0
 800a556:	f300 8095 	bgt.w	800a684 <_dtoa_r+0x8dc>
 800a55a:	9b02      	ldr	r3, [sp, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 8087 	bne.w	800a670 <_dtoa_r+0x8c8>
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f040 8089 	bne.w	800a680 <_dtoa_r+0x8d8>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a574:	0d1b      	lsrs	r3, r3, #20
 800a576:	051b      	lsls	r3, r3, #20
 800a578:	b12b      	cbz	r3, 800a586 <_dtoa_r+0x7de>
 800a57a:	9b08      	ldr	r3, [sp, #32]
 800a57c:	3301      	adds	r3, #1
 800a57e:	9308      	str	r3, [sp, #32]
 800a580:	f108 0801 	add.w	r8, r8, #1
 800a584:	2301      	movs	r3, #1
 800a586:	930a      	str	r3, [sp, #40]	@ 0x28
 800a588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f000 81b0 	beq.w	800a8f0 <_dtoa_r+0xb48>
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a596:	6918      	ldr	r0, [r3, #16]
 800a598:	f000 fcaa 	bl	800aef0 <__hi0bits>
 800a59c:	f1c0 0020 	rsb	r0, r0, #32
 800a5a0:	9b08      	ldr	r3, [sp, #32]
 800a5a2:	4418      	add	r0, r3
 800a5a4:	f010 001f 	ands.w	r0, r0, #31
 800a5a8:	d077      	beq.n	800a69a <_dtoa_r+0x8f2>
 800a5aa:	f1c0 0320 	rsb	r3, r0, #32
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	dd6b      	ble.n	800a68a <_dtoa_r+0x8e2>
 800a5b2:	9b08      	ldr	r3, [sp, #32]
 800a5b4:	f1c0 001c 	rsb	r0, r0, #28
 800a5b8:	4403      	add	r3, r0
 800a5ba:	4480      	add	r8, r0
 800a5bc:	4406      	add	r6, r0
 800a5be:	9308      	str	r3, [sp, #32]
 800a5c0:	f1b8 0f00 	cmp.w	r8, #0
 800a5c4:	dd05      	ble.n	800a5d2 <_dtoa_r+0x82a>
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	4658      	mov	r0, fp
 800a5cc:	f000 fdf6 	bl	800b1bc <__lshift>
 800a5d0:	4681      	mov	r9, r0
 800a5d2:	9b08      	ldr	r3, [sp, #32]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	dd05      	ble.n	800a5e4 <_dtoa_r+0x83c>
 800a5d8:	4621      	mov	r1, r4
 800a5da:	461a      	mov	r2, r3
 800a5dc:	4658      	mov	r0, fp
 800a5de:	f000 fded 	bl	800b1bc <__lshift>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d059      	beq.n	800a69e <_dtoa_r+0x8f6>
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	4648      	mov	r0, r9
 800a5ee:	f000 fe51 	bl	800b294 <__mcmp>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	da53      	bge.n	800a69e <_dtoa_r+0x8f6>
 800a5f6:	1e7b      	subs	r3, r7, #1
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	220a      	movs	r2, #10
 800a600:	4658      	mov	r0, fp
 800a602:	f000 fc2f 	bl	800ae64 <__multadd>
 800a606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a608:	4681      	mov	r9, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 8172 	beq.w	800a8f4 <_dtoa_r+0xb4c>
 800a610:	2300      	movs	r3, #0
 800a612:	4629      	mov	r1, r5
 800a614:	220a      	movs	r2, #10
 800a616:	4658      	mov	r0, fp
 800a618:	f000 fc24 	bl	800ae64 <__multadd>
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	4605      	mov	r5, r0
 800a622:	dc67      	bgt.n	800a6f4 <_dtoa_r+0x94c>
 800a624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a626:	2b02      	cmp	r3, #2
 800a628:	dc41      	bgt.n	800a6ae <_dtoa_r+0x906>
 800a62a:	e063      	b.n	800a6f4 <_dtoa_r+0x94c>
 800a62c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a62e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a632:	e746      	b.n	800a4c2 <_dtoa_r+0x71a>
 800a634:	9b07      	ldr	r3, [sp, #28]
 800a636:	1e5c      	subs	r4, r3, #1
 800a638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	bfbf      	itttt	lt
 800a63e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a640:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a642:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a644:	1ae3      	sublt	r3, r4, r3
 800a646:	bfb4      	ite	lt
 800a648:	18d2      	addlt	r2, r2, r3
 800a64a:	1b1c      	subge	r4, r3, r4
 800a64c:	9b07      	ldr	r3, [sp, #28]
 800a64e:	bfbc      	itt	lt
 800a650:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a652:	2400      	movlt	r4, #0
 800a654:	2b00      	cmp	r3, #0
 800a656:	bfb5      	itete	lt
 800a658:	eba8 0603 	sublt.w	r6, r8, r3
 800a65c:	9b07      	ldrge	r3, [sp, #28]
 800a65e:	2300      	movlt	r3, #0
 800a660:	4646      	movge	r6, r8
 800a662:	e730      	b.n	800a4c6 <_dtoa_r+0x71e>
 800a664:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a666:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a668:	4646      	mov	r6, r8
 800a66a:	e735      	b.n	800a4d8 <_dtoa_r+0x730>
 800a66c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a66e:	e75c      	b.n	800a52a <_dtoa_r+0x782>
 800a670:	2300      	movs	r3, #0
 800a672:	e788      	b.n	800a586 <_dtoa_r+0x7de>
 800a674:	3fe00000 	.word	0x3fe00000
 800a678:	40240000 	.word	0x40240000
 800a67c:	40140000 	.word	0x40140000
 800a680:	9b02      	ldr	r3, [sp, #8]
 800a682:	e780      	b.n	800a586 <_dtoa_r+0x7de>
 800a684:	2300      	movs	r3, #0
 800a686:	930a      	str	r3, [sp, #40]	@ 0x28
 800a688:	e782      	b.n	800a590 <_dtoa_r+0x7e8>
 800a68a:	d099      	beq.n	800a5c0 <_dtoa_r+0x818>
 800a68c:	9a08      	ldr	r2, [sp, #32]
 800a68e:	331c      	adds	r3, #28
 800a690:	441a      	add	r2, r3
 800a692:	4498      	add	r8, r3
 800a694:	441e      	add	r6, r3
 800a696:	9208      	str	r2, [sp, #32]
 800a698:	e792      	b.n	800a5c0 <_dtoa_r+0x818>
 800a69a:	4603      	mov	r3, r0
 800a69c:	e7f6      	b.n	800a68c <_dtoa_r+0x8e4>
 800a69e:	9b07      	ldr	r3, [sp, #28]
 800a6a0:	9704      	str	r7, [sp, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	dc20      	bgt.n	800a6e8 <_dtoa_r+0x940>
 800a6a6:	9300      	str	r3, [sp, #0]
 800a6a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	dd1e      	ble.n	800a6ec <_dtoa_r+0x944>
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f47f aec0 	bne.w	800a436 <_dtoa_r+0x68e>
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	2205      	movs	r2, #5
 800a6ba:	4658      	mov	r0, fp
 800a6bc:	f000 fbd2 	bl	800ae64 <__multadd>
 800a6c0:	4601      	mov	r1, r0
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4648      	mov	r0, r9
 800a6c6:	f000 fde5 	bl	800b294 <__mcmp>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	f77f aeb3 	ble.w	800a436 <_dtoa_r+0x68e>
 800a6d0:	4656      	mov	r6, sl
 800a6d2:	2331      	movs	r3, #49	@ 0x31
 800a6d4:	f806 3b01 	strb.w	r3, [r6], #1
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	9304      	str	r3, [sp, #16]
 800a6de:	e6ae      	b.n	800a43e <_dtoa_r+0x696>
 800a6e0:	9c07      	ldr	r4, [sp, #28]
 800a6e2:	9704      	str	r7, [sp, #16]
 800a6e4:	4625      	mov	r5, r4
 800a6e6:	e7f3      	b.n	800a6d0 <_dtoa_r+0x928>
 800a6e8:	9b07      	ldr	r3, [sp, #28]
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 8104 	beq.w	800a8fc <_dtoa_r+0xb54>
 800a6f4:	2e00      	cmp	r6, #0
 800a6f6:	dd05      	ble.n	800a704 <_dtoa_r+0x95c>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4632      	mov	r2, r6
 800a6fc:	4658      	mov	r0, fp
 800a6fe:	f000 fd5d 	bl	800b1bc <__lshift>
 800a702:	4605      	mov	r5, r0
 800a704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a706:	2b00      	cmp	r3, #0
 800a708:	d05a      	beq.n	800a7c0 <_dtoa_r+0xa18>
 800a70a:	6869      	ldr	r1, [r5, #4]
 800a70c:	4658      	mov	r0, fp
 800a70e:	f000 fb47 	bl	800ada0 <_Balloc>
 800a712:	4606      	mov	r6, r0
 800a714:	b928      	cbnz	r0, 800a722 <_dtoa_r+0x97a>
 800a716:	4b84      	ldr	r3, [pc, #528]	@ (800a928 <_dtoa_r+0xb80>)
 800a718:	4602      	mov	r2, r0
 800a71a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a71e:	f7ff bb5a 	b.w	8009dd6 <_dtoa_r+0x2e>
 800a722:	692a      	ldr	r2, [r5, #16]
 800a724:	3202      	adds	r2, #2
 800a726:	0092      	lsls	r2, r2, #2
 800a728:	f105 010c 	add.w	r1, r5, #12
 800a72c:	300c      	adds	r0, #12
 800a72e:	f7ff faa4 	bl	8009c7a <memcpy>
 800a732:	2201      	movs	r2, #1
 800a734:	4631      	mov	r1, r6
 800a736:	4658      	mov	r0, fp
 800a738:	f000 fd40 	bl	800b1bc <__lshift>
 800a73c:	f10a 0301 	add.w	r3, sl, #1
 800a740:	9307      	str	r3, [sp, #28]
 800a742:	9b00      	ldr	r3, [sp, #0]
 800a744:	4453      	add	r3, sl
 800a746:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a748:	9b02      	ldr	r3, [sp, #8]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	462f      	mov	r7, r5
 800a750:	930a      	str	r3, [sp, #40]	@ 0x28
 800a752:	4605      	mov	r5, r0
 800a754:	9b07      	ldr	r3, [sp, #28]
 800a756:	4621      	mov	r1, r4
 800a758:	3b01      	subs	r3, #1
 800a75a:	4648      	mov	r0, r9
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	f7ff fa9a 	bl	8009c96 <quorem>
 800a762:	4639      	mov	r1, r7
 800a764:	9002      	str	r0, [sp, #8]
 800a766:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a76a:	4648      	mov	r0, r9
 800a76c:	f000 fd92 	bl	800b294 <__mcmp>
 800a770:	462a      	mov	r2, r5
 800a772:	9008      	str	r0, [sp, #32]
 800a774:	4621      	mov	r1, r4
 800a776:	4658      	mov	r0, fp
 800a778:	f000 fda8 	bl	800b2cc <__mdiff>
 800a77c:	68c2      	ldr	r2, [r0, #12]
 800a77e:	4606      	mov	r6, r0
 800a780:	bb02      	cbnz	r2, 800a7c4 <_dtoa_r+0xa1c>
 800a782:	4601      	mov	r1, r0
 800a784:	4648      	mov	r0, r9
 800a786:	f000 fd85 	bl	800b294 <__mcmp>
 800a78a:	4602      	mov	r2, r0
 800a78c:	4631      	mov	r1, r6
 800a78e:	4658      	mov	r0, fp
 800a790:	920e      	str	r2, [sp, #56]	@ 0x38
 800a792:	f000 fb45 	bl	800ae20 <_Bfree>
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a79a:	9e07      	ldr	r6, [sp, #28]
 800a79c:	ea43 0102 	orr.w	r1, r3, r2
 800a7a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7a2:	4319      	orrs	r1, r3
 800a7a4:	d110      	bne.n	800a7c8 <_dtoa_r+0xa20>
 800a7a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7aa:	d029      	beq.n	800a800 <_dtoa_r+0xa58>
 800a7ac:	9b08      	ldr	r3, [sp, #32]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	dd02      	ble.n	800a7b8 <_dtoa_r+0xa10>
 800a7b2:	9b02      	ldr	r3, [sp, #8]
 800a7b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a7b8:	9b00      	ldr	r3, [sp, #0]
 800a7ba:	f883 8000 	strb.w	r8, [r3]
 800a7be:	e63f      	b.n	800a440 <_dtoa_r+0x698>
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	e7bb      	b.n	800a73c <_dtoa_r+0x994>
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	e7e1      	b.n	800a78c <_dtoa_r+0x9e4>
 800a7c8:	9b08      	ldr	r3, [sp, #32]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	db04      	blt.n	800a7d8 <_dtoa_r+0xa30>
 800a7ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7d4:	430b      	orrs	r3, r1
 800a7d6:	d120      	bne.n	800a81a <_dtoa_r+0xa72>
 800a7d8:	2a00      	cmp	r2, #0
 800a7da:	dded      	ble.n	800a7b8 <_dtoa_r+0xa10>
 800a7dc:	4649      	mov	r1, r9
 800a7de:	2201      	movs	r2, #1
 800a7e0:	4658      	mov	r0, fp
 800a7e2:	f000 fceb 	bl	800b1bc <__lshift>
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4681      	mov	r9, r0
 800a7ea:	f000 fd53 	bl	800b294 <__mcmp>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	dc03      	bgt.n	800a7fa <_dtoa_r+0xa52>
 800a7f2:	d1e1      	bne.n	800a7b8 <_dtoa_r+0xa10>
 800a7f4:	f018 0f01 	tst.w	r8, #1
 800a7f8:	d0de      	beq.n	800a7b8 <_dtoa_r+0xa10>
 800a7fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7fe:	d1d8      	bne.n	800a7b2 <_dtoa_r+0xa0a>
 800a800:	9a00      	ldr	r2, [sp, #0]
 800a802:	2339      	movs	r3, #57	@ 0x39
 800a804:	7013      	strb	r3, [r2, #0]
 800a806:	4633      	mov	r3, r6
 800a808:	461e      	mov	r6, r3
 800a80a:	3b01      	subs	r3, #1
 800a80c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a810:	2a39      	cmp	r2, #57	@ 0x39
 800a812:	d052      	beq.n	800a8ba <_dtoa_r+0xb12>
 800a814:	3201      	adds	r2, #1
 800a816:	701a      	strb	r2, [r3, #0]
 800a818:	e612      	b.n	800a440 <_dtoa_r+0x698>
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	dd07      	ble.n	800a82e <_dtoa_r+0xa86>
 800a81e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a822:	d0ed      	beq.n	800a800 <_dtoa_r+0xa58>
 800a824:	9a00      	ldr	r2, [sp, #0]
 800a826:	f108 0301 	add.w	r3, r8, #1
 800a82a:	7013      	strb	r3, [r2, #0]
 800a82c:	e608      	b.n	800a440 <_dtoa_r+0x698>
 800a82e:	9b07      	ldr	r3, [sp, #28]
 800a830:	9a07      	ldr	r2, [sp, #28]
 800a832:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a838:	4293      	cmp	r3, r2
 800a83a:	d028      	beq.n	800a88e <_dtoa_r+0xae6>
 800a83c:	4649      	mov	r1, r9
 800a83e:	2300      	movs	r3, #0
 800a840:	220a      	movs	r2, #10
 800a842:	4658      	mov	r0, fp
 800a844:	f000 fb0e 	bl	800ae64 <__multadd>
 800a848:	42af      	cmp	r7, r5
 800a84a:	4681      	mov	r9, r0
 800a84c:	f04f 0300 	mov.w	r3, #0
 800a850:	f04f 020a 	mov.w	r2, #10
 800a854:	4639      	mov	r1, r7
 800a856:	4658      	mov	r0, fp
 800a858:	d107      	bne.n	800a86a <_dtoa_r+0xac2>
 800a85a:	f000 fb03 	bl	800ae64 <__multadd>
 800a85e:	4607      	mov	r7, r0
 800a860:	4605      	mov	r5, r0
 800a862:	9b07      	ldr	r3, [sp, #28]
 800a864:	3301      	adds	r3, #1
 800a866:	9307      	str	r3, [sp, #28]
 800a868:	e774      	b.n	800a754 <_dtoa_r+0x9ac>
 800a86a:	f000 fafb 	bl	800ae64 <__multadd>
 800a86e:	4629      	mov	r1, r5
 800a870:	4607      	mov	r7, r0
 800a872:	2300      	movs	r3, #0
 800a874:	220a      	movs	r2, #10
 800a876:	4658      	mov	r0, fp
 800a878:	f000 faf4 	bl	800ae64 <__multadd>
 800a87c:	4605      	mov	r5, r0
 800a87e:	e7f0      	b.n	800a862 <_dtoa_r+0xaba>
 800a880:	9b00      	ldr	r3, [sp, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	bfcc      	ite	gt
 800a886:	461e      	movgt	r6, r3
 800a888:	2601      	movle	r6, #1
 800a88a:	4456      	add	r6, sl
 800a88c:	2700      	movs	r7, #0
 800a88e:	4649      	mov	r1, r9
 800a890:	2201      	movs	r2, #1
 800a892:	4658      	mov	r0, fp
 800a894:	f000 fc92 	bl	800b1bc <__lshift>
 800a898:	4621      	mov	r1, r4
 800a89a:	4681      	mov	r9, r0
 800a89c:	f000 fcfa 	bl	800b294 <__mcmp>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	dcb0      	bgt.n	800a806 <_dtoa_r+0xa5e>
 800a8a4:	d102      	bne.n	800a8ac <_dtoa_r+0xb04>
 800a8a6:	f018 0f01 	tst.w	r8, #1
 800a8aa:	d1ac      	bne.n	800a806 <_dtoa_r+0xa5e>
 800a8ac:	4633      	mov	r3, r6
 800a8ae:	461e      	mov	r6, r3
 800a8b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8b4:	2a30      	cmp	r2, #48	@ 0x30
 800a8b6:	d0fa      	beq.n	800a8ae <_dtoa_r+0xb06>
 800a8b8:	e5c2      	b.n	800a440 <_dtoa_r+0x698>
 800a8ba:	459a      	cmp	sl, r3
 800a8bc:	d1a4      	bne.n	800a808 <_dtoa_r+0xa60>
 800a8be:	9b04      	ldr	r3, [sp, #16]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	9304      	str	r3, [sp, #16]
 800a8c4:	2331      	movs	r3, #49	@ 0x31
 800a8c6:	f88a 3000 	strb.w	r3, [sl]
 800a8ca:	e5b9      	b.n	800a440 <_dtoa_r+0x698>
 800a8cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a92c <_dtoa_r+0xb84>
 800a8d2:	b11b      	cbz	r3, 800a8dc <_dtoa_r+0xb34>
 800a8d4:	f10a 0308 	add.w	r3, sl, #8
 800a8d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a8da:	6013      	str	r3, [r2, #0]
 800a8dc:	4650      	mov	r0, sl
 800a8de:	b019      	add	sp, #100	@ 0x64
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	f77f ae37 	ble.w	800a55a <_dtoa_r+0x7b2>
 800a8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8f0:	2001      	movs	r0, #1
 800a8f2:	e655      	b.n	800a5a0 <_dtoa_r+0x7f8>
 800a8f4:	9b00      	ldr	r3, [sp, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f77f aed6 	ble.w	800a6a8 <_dtoa_r+0x900>
 800a8fc:	4656      	mov	r6, sl
 800a8fe:	4621      	mov	r1, r4
 800a900:	4648      	mov	r0, r9
 800a902:	f7ff f9c8 	bl	8009c96 <quorem>
 800a906:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a90a:	f806 8b01 	strb.w	r8, [r6], #1
 800a90e:	9b00      	ldr	r3, [sp, #0]
 800a910:	eba6 020a 	sub.w	r2, r6, sl
 800a914:	4293      	cmp	r3, r2
 800a916:	ddb3      	ble.n	800a880 <_dtoa_r+0xad8>
 800a918:	4649      	mov	r1, r9
 800a91a:	2300      	movs	r3, #0
 800a91c:	220a      	movs	r2, #10
 800a91e:	4658      	mov	r0, fp
 800a920:	f000 faa0 	bl	800ae64 <__multadd>
 800a924:	4681      	mov	r9, r0
 800a926:	e7ea      	b.n	800a8fe <_dtoa_r+0xb56>
 800a928:	0803c1f8 	.word	0x0803c1f8
 800a92c:	0803c17c 	.word	0x0803c17c

0800a930 <_free_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4605      	mov	r5, r0
 800a934:	2900      	cmp	r1, #0
 800a936:	d041      	beq.n	800a9bc <_free_r+0x8c>
 800a938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a93c:	1f0c      	subs	r4, r1, #4
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfb8      	it	lt
 800a942:	18e4      	addlt	r4, r4, r3
 800a944:	f7ff f812 	bl	800996c <__malloc_lock>
 800a948:	4a1d      	ldr	r2, [pc, #116]	@ (800a9c0 <_free_r+0x90>)
 800a94a:	6813      	ldr	r3, [r2, #0]
 800a94c:	b933      	cbnz	r3, 800a95c <_free_r+0x2c>
 800a94e:	6063      	str	r3, [r4, #4]
 800a950:	6014      	str	r4, [r2, #0]
 800a952:	4628      	mov	r0, r5
 800a954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a958:	f7ff b80e 	b.w	8009978 <__malloc_unlock>
 800a95c:	42a3      	cmp	r3, r4
 800a95e:	d908      	bls.n	800a972 <_free_r+0x42>
 800a960:	6820      	ldr	r0, [r4, #0]
 800a962:	1821      	adds	r1, r4, r0
 800a964:	428b      	cmp	r3, r1
 800a966:	bf01      	itttt	eq
 800a968:	6819      	ldreq	r1, [r3, #0]
 800a96a:	685b      	ldreq	r3, [r3, #4]
 800a96c:	1809      	addeq	r1, r1, r0
 800a96e:	6021      	streq	r1, [r4, #0]
 800a970:	e7ed      	b.n	800a94e <_free_r+0x1e>
 800a972:	461a      	mov	r2, r3
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	b10b      	cbz	r3, 800a97c <_free_r+0x4c>
 800a978:	42a3      	cmp	r3, r4
 800a97a:	d9fa      	bls.n	800a972 <_free_r+0x42>
 800a97c:	6811      	ldr	r1, [r2, #0]
 800a97e:	1850      	adds	r0, r2, r1
 800a980:	42a0      	cmp	r0, r4
 800a982:	d10b      	bne.n	800a99c <_free_r+0x6c>
 800a984:	6820      	ldr	r0, [r4, #0]
 800a986:	4401      	add	r1, r0
 800a988:	1850      	adds	r0, r2, r1
 800a98a:	4283      	cmp	r3, r0
 800a98c:	6011      	str	r1, [r2, #0]
 800a98e:	d1e0      	bne.n	800a952 <_free_r+0x22>
 800a990:	6818      	ldr	r0, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	6053      	str	r3, [r2, #4]
 800a996:	4408      	add	r0, r1
 800a998:	6010      	str	r0, [r2, #0]
 800a99a:	e7da      	b.n	800a952 <_free_r+0x22>
 800a99c:	d902      	bls.n	800a9a4 <_free_r+0x74>
 800a99e:	230c      	movs	r3, #12
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	e7d6      	b.n	800a952 <_free_r+0x22>
 800a9a4:	6820      	ldr	r0, [r4, #0]
 800a9a6:	1821      	adds	r1, r4, r0
 800a9a8:	428b      	cmp	r3, r1
 800a9aa:	bf04      	itt	eq
 800a9ac:	6819      	ldreq	r1, [r3, #0]
 800a9ae:	685b      	ldreq	r3, [r3, #4]
 800a9b0:	6063      	str	r3, [r4, #4]
 800a9b2:	bf04      	itt	eq
 800a9b4:	1809      	addeq	r1, r1, r0
 800a9b6:	6021      	streq	r1, [r4, #0]
 800a9b8:	6054      	str	r4, [r2, #4]
 800a9ba:	e7ca      	b.n	800a952 <_free_r+0x22>
 800a9bc:	bd38      	pop	{r3, r4, r5, pc}
 800a9be:	bf00      	nop
 800a9c0:	200185ec 	.word	0x200185ec

0800a9c4 <__sfputc_r>:
 800a9c4:	6893      	ldr	r3, [r2, #8]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	b410      	push	{r4}
 800a9cc:	6093      	str	r3, [r2, #8]
 800a9ce:	da08      	bge.n	800a9e2 <__sfputc_r+0x1e>
 800a9d0:	6994      	ldr	r4, [r2, #24]
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	db01      	blt.n	800a9da <__sfputc_r+0x16>
 800a9d6:	290a      	cmp	r1, #10
 800a9d8:	d103      	bne.n	800a9e2 <__sfputc_r+0x1e>
 800a9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9de:	f000 bda4 	b.w	800b52a <__swbuf_r>
 800a9e2:	6813      	ldr	r3, [r2, #0]
 800a9e4:	1c58      	adds	r0, r3, #1
 800a9e6:	6010      	str	r0, [r2, #0]
 800a9e8:	7019      	strb	r1, [r3, #0]
 800a9ea:	4608      	mov	r0, r1
 800a9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <__sfputs_r>:
 800a9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	460f      	mov	r7, r1
 800a9f8:	4614      	mov	r4, r2
 800a9fa:	18d5      	adds	r5, r2, r3
 800a9fc:	42ac      	cmp	r4, r5
 800a9fe:	d101      	bne.n	800aa04 <__sfputs_r+0x12>
 800aa00:	2000      	movs	r0, #0
 800aa02:	e007      	b.n	800aa14 <__sfputs_r+0x22>
 800aa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa08:	463a      	mov	r2, r7
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	f7ff ffda 	bl	800a9c4 <__sfputc_r>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d1f3      	bne.n	800a9fc <__sfputs_r+0xa>
 800aa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa18 <_vfiprintf_r>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	460d      	mov	r5, r1
 800aa1e:	b09d      	sub	sp, #116	@ 0x74
 800aa20:	4614      	mov	r4, r2
 800aa22:	4698      	mov	r8, r3
 800aa24:	4606      	mov	r6, r0
 800aa26:	b118      	cbz	r0, 800aa30 <_vfiprintf_r+0x18>
 800aa28:	6a03      	ldr	r3, [r0, #32]
 800aa2a:	b90b      	cbnz	r3, 800aa30 <_vfiprintf_r+0x18>
 800aa2c:	f7ff f836 	bl	8009a9c <__sinit>
 800aa30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa32:	07d9      	lsls	r1, r3, #31
 800aa34:	d405      	bmi.n	800aa42 <_vfiprintf_r+0x2a>
 800aa36:	89ab      	ldrh	r3, [r5, #12]
 800aa38:	059a      	lsls	r2, r3, #22
 800aa3a:	d402      	bmi.n	800aa42 <_vfiprintf_r+0x2a>
 800aa3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa3e:	f7ff f91a 	bl	8009c76 <__retarget_lock_acquire_recursive>
 800aa42:	89ab      	ldrh	r3, [r5, #12]
 800aa44:	071b      	lsls	r3, r3, #28
 800aa46:	d501      	bpl.n	800aa4c <_vfiprintf_r+0x34>
 800aa48:	692b      	ldr	r3, [r5, #16]
 800aa4a:	b99b      	cbnz	r3, 800aa74 <_vfiprintf_r+0x5c>
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f000 fdaa 	bl	800b5a8 <__swsetup_r>
 800aa54:	b170      	cbz	r0, 800aa74 <_vfiprintf_r+0x5c>
 800aa56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa58:	07dc      	lsls	r4, r3, #31
 800aa5a:	d504      	bpl.n	800aa66 <_vfiprintf_r+0x4e>
 800aa5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa60:	b01d      	add	sp, #116	@ 0x74
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	89ab      	ldrh	r3, [r5, #12]
 800aa68:	0598      	lsls	r0, r3, #22
 800aa6a:	d4f7      	bmi.n	800aa5c <_vfiprintf_r+0x44>
 800aa6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa6e:	f7ff f903 	bl	8009c78 <__retarget_lock_release_recursive>
 800aa72:	e7f3      	b.n	800aa5c <_vfiprintf_r+0x44>
 800aa74:	2300      	movs	r3, #0
 800aa76:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa78:	2320      	movs	r3, #32
 800aa7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa82:	2330      	movs	r3, #48	@ 0x30
 800aa84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ac34 <_vfiprintf_r+0x21c>
 800aa88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa8c:	f04f 0901 	mov.w	r9, #1
 800aa90:	4623      	mov	r3, r4
 800aa92:	469a      	mov	sl, r3
 800aa94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa98:	b10a      	cbz	r2, 800aa9e <_vfiprintf_r+0x86>
 800aa9a:	2a25      	cmp	r2, #37	@ 0x25
 800aa9c:	d1f9      	bne.n	800aa92 <_vfiprintf_r+0x7a>
 800aa9e:	ebba 0b04 	subs.w	fp, sl, r4
 800aaa2:	d00b      	beq.n	800aabc <_vfiprintf_r+0xa4>
 800aaa4:	465b      	mov	r3, fp
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7ff ffa1 	bl	800a9f2 <__sfputs_r>
 800aab0:	3001      	adds	r0, #1
 800aab2:	f000 80a7 	beq.w	800ac04 <_vfiprintf_r+0x1ec>
 800aab6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aab8:	445a      	add	r2, fp
 800aaba:	9209      	str	r2, [sp, #36]	@ 0x24
 800aabc:	f89a 3000 	ldrb.w	r3, [sl]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 809f 	beq.w	800ac04 <_vfiprintf_r+0x1ec>
 800aac6:	2300      	movs	r3, #0
 800aac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aacc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad0:	f10a 0a01 	add.w	sl, sl, #1
 800aad4:	9304      	str	r3, [sp, #16]
 800aad6:	9307      	str	r3, [sp, #28]
 800aad8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aadc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aade:	4654      	mov	r4, sl
 800aae0:	2205      	movs	r2, #5
 800aae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aae6:	4853      	ldr	r0, [pc, #332]	@ (800ac34 <_vfiprintf_r+0x21c>)
 800aae8:	f7f5 fbfa 	bl	80002e0 <memchr>
 800aaec:	9a04      	ldr	r2, [sp, #16]
 800aaee:	b9d8      	cbnz	r0, 800ab28 <_vfiprintf_r+0x110>
 800aaf0:	06d1      	lsls	r1, r2, #27
 800aaf2:	bf44      	itt	mi
 800aaf4:	2320      	movmi	r3, #32
 800aaf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aafa:	0713      	lsls	r3, r2, #28
 800aafc:	bf44      	itt	mi
 800aafe:	232b      	movmi	r3, #43	@ 0x2b
 800ab00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab04:	f89a 3000 	ldrb.w	r3, [sl]
 800ab08:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab0a:	d015      	beq.n	800ab38 <_vfiprintf_r+0x120>
 800ab0c:	9a07      	ldr	r2, [sp, #28]
 800ab0e:	4654      	mov	r4, sl
 800ab10:	2000      	movs	r0, #0
 800ab12:	f04f 0c0a 	mov.w	ip, #10
 800ab16:	4621      	mov	r1, r4
 800ab18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab1c:	3b30      	subs	r3, #48	@ 0x30
 800ab1e:	2b09      	cmp	r3, #9
 800ab20:	d94b      	bls.n	800abba <_vfiprintf_r+0x1a2>
 800ab22:	b1b0      	cbz	r0, 800ab52 <_vfiprintf_r+0x13a>
 800ab24:	9207      	str	r2, [sp, #28]
 800ab26:	e014      	b.n	800ab52 <_vfiprintf_r+0x13a>
 800ab28:	eba0 0308 	sub.w	r3, r0, r8
 800ab2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab30:	4313      	orrs	r3, r2
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	46a2      	mov	sl, r4
 800ab36:	e7d2      	b.n	800aade <_vfiprintf_r+0xc6>
 800ab38:	9b03      	ldr	r3, [sp, #12]
 800ab3a:	1d19      	adds	r1, r3, #4
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	9103      	str	r1, [sp, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bfbb      	ittet	lt
 800ab44:	425b      	neglt	r3, r3
 800ab46:	f042 0202 	orrlt.w	r2, r2, #2
 800ab4a:	9307      	strge	r3, [sp, #28]
 800ab4c:	9307      	strlt	r3, [sp, #28]
 800ab4e:	bfb8      	it	lt
 800ab50:	9204      	strlt	r2, [sp, #16]
 800ab52:	7823      	ldrb	r3, [r4, #0]
 800ab54:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab56:	d10a      	bne.n	800ab6e <_vfiprintf_r+0x156>
 800ab58:	7863      	ldrb	r3, [r4, #1]
 800ab5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab5c:	d132      	bne.n	800abc4 <_vfiprintf_r+0x1ac>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	1d1a      	adds	r2, r3, #4
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	9203      	str	r2, [sp, #12]
 800ab66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab6a:	3402      	adds	r4, #2
 800ab6c:	9305      	str	r3, [sp, #20]
 800ab6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac44 <_vfiprintf_r+0x22c>
 800ab72:	7821      	ldrb	r1, [r4, #0]
 800ab74:	2203      	movs	r2, #3
 800ab76:	4650      	mov	r0, sl
 800ab78:	f7f5 fbb2 	bl	80002e0 <memchr>
 800ab7c:	b138      	cbz	r0, 800ab8e <_vfiprintf_r+0x176>
 800ab7e:	9b04      	ldr	r3, [sp, #16]
 800ab80:	eba0 000a 	sub.w	r0, r0, sl
 800ab84:	2240      	movs	r2, #64	@ 0x40
 800ab86:	4082      	lsls	r2, r0
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	3401      	adds	r4, #1
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab92:	4829      	ldr	r0, [pc, #164]	@ (800ac38 <_vfiprintf_r+0x220>)
 800ab94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab98:	2206      	movs	r2, #6
 800ab9a:	f7f5 fba1 	bl	80002e0 <memchr>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d03f      	beq.n	800ac22 <_vfiprintf_r+0x20a>
 800aba2:	4b26      	ldr	r3, [pc, #152]	@ (800ac3c <_vfiprintf_r+0x224>)
 800aba4:	bb1b      	cbnz	r3, 800abee <_vfiprintf_r+0x1d6>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	3307      	adds	r3, #7
 800abaa:	f023 0307 	bic.w	r3, r3, #7
 800abae:	3308      	adds	r3, #8
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abb4:	443b      	add	r3, r7
 800abb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb8:	e76a      	b.n	800aa90 <_vfiprintf_r+0x78>
 800abba:	fb0c 3202 	mla	r2, ip, r2, r3
 800abbe:	460c      	mov	r4, r1
 800abc0:	2001      	movs	r0, #1
 800abc2:	e7a8      	b.n	800ab16 <_vfiprintf_r+0xfe>
 800abc4:	2300      	movs	r3, #0
 800abc6:	3401      	adds	r4, #1
 800abc8:	9305      	str	r3, [sp, #20]
 800abca:	4619      	mov	r1, r3
 800abcc:	f04f 0c0a 	mov.w	ip, #10
 800abd0:	4620      	mov	r0, r4
 800abd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abd6:	3a30      	subs	r2, #48	@ 0x30
 800abd8:	2a09      	cmp	r2, #9
 800abda:	d903      	bls.n	800abe4 <_vfiprintf_r+0x1cc>
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d0c6      	beq.n	800ab6e <_vfiprintf_r+0x156>
 800abe0:	9105      	str	r1, [sp, #20]
 800abe2:	e7c4      	b.n	800ab6e <_vfiprintf_r+0x156>
 800abe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800abe8:	4604      	mov	r4, r0
 800abea:	2301      	movs	r3, #1
 800abec:	e7f0      	b.n	800abd0 <_vfiprintf_r+0x1b8>
 800abee:	ab03      	add	r3, sp, #12
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	462a      	mov	r2, r5
 800abf4:	4b12      	ldr	r3, [pc, #72]	@ (800ac40 <_vfiprintf_r+0x228>)
 800abf6:	a904      	add	r1, sp, #16
 800abf8:	4630      	mov	r0, r6
 800abfa:	f7fe fa55 	bl	80090a8 <_printf_float>
 800abfe:	4607      	mov	r7, r0
 800ac00:	1c78      	adds	r0, r7, #1
 800ac02:	d1d6      	bne.n	800abb2 <_vfiprintf_r+0x19a>
 800ac04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac06:	07d9      	lsls	r1, r3, #31
 800ac08:	d405      	bmi.n	800ac16 <_vfiprintf_r+0x1fe>
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	059a      	lsls	r2, r3, #22
 800ac0e:	d402      	bmi.n	800ac16 <_vfiprintf_r+0x1fe>
 800ac10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac12:	f7ff f831 	bl	8009c78 <__retarget_lock_release_recursive>
 800ac16:	89ab      	ldrh	r3, [r5, #12]
 800ac18:	065b      	lsls	r3, r3, #25
 800ac1a:	f53f af1f 	bmi.w	800aa5c <_vfiprintf_r+0x44>
 800ac1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac20:	e71e      	b.n	800aa60 <_vfiprintf_r+0x48>
 800ac22:	ab03      	add	r3, sp, #12
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	462a      	mov	r2, r5
 800ac28:	4b05      	ldr	r3, [pc, #20]	@ (800ac40 <_vfiprintf_r+0x228>)
 800ac2a:	a904      	add	r1, sp, #16
 800ac2c:	4630      	mov	r0, r6
 800ac2e:	f7fe fd7d 	bl	800972c <_printf_i>
 800ac32:	e7e4      	b.n	800abfe <_vfiprintf_r+0x1e6>
 800ac34:	0803c209 	.word	0x0803c209
 800ac38:	0803c213 	.word	0x0803c213
 800ac3c:	080090a9 	.word	0x080090a9
 800ac40:	0800a9f3 	.word	0x0800a9f3
 800ac44:	0803c20f 	.word	0x0803c20f

0800ac48 <__sflush_r>:
 800ac48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac50:	0716      	lsls	r6, r2, #28
 800ac52:	4605      	mov	r5, r0
 800ac54:	460c      	mov	r4, r1
 800ac56:	d454      	bmi.n	800ad02 <__sflush_r+0xba>
 800ac58:	684b      	ldr	r3, [r1, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	dc02      	bgt.n	800ac64 <__sflush_r+0x1c>
 800ac5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	dd48      	ble.n	800acf6 <__sflush_r+0xae>
 800ac64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac66:	2e00      	cmp	r6, #0
 800ac68:	d045      	beq.n	800acf6 <__sflush_r+0xae>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac70:	682f      	ldr	r7, [r5, #0]
 800ac72:	6a21      	ldr	r1, [r4, #32]
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	d030      	beq.n	800acda <__sflush_r+0x92>
 800ac78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	0759      	lsls	r1, r3, #29
 800ac7e:	d505      	bpl.n	800ac8c <__sflush_r+0x44>
 800ac80:	6863      	ldr	r3, [r4, #4]
 800ac82:	1ad2      	subs	r2, r2, r3
 800ac84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac86:	b10b      	cbz	r3, 800ac8c <__sflush_r+0x44>
 800ac88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac8a:	1ad2      	subs	r2, r2, r3
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac90:	6a21      	ldr	r1, [r4, #32]
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b0      	blx	r6
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	d106      	bne.n	800acaa <__sflush_r+0x62>
 800ac9c:	6829      	ldr	r1, [r5, #0]
 800ac9e:	291d      	cmp	r1, #29
 800aca0:	d82b      	bhi.n	800acfa <__sflush_r+0xb2>
 800aca2:	4a2a      	ldr	r2, [pc, #168]	@ (800ad4c <__sflush_r+0x104>)
 800aca4:	410a      	asrs	r2, r1
 800aca6:	07d6      	lsls	r6, r2, #31
 800aca8:	d427      	bmi.n	800acfa <__sflush_r+0xb2>
 800acaa:	2200      	movs	r2, #0
 800acac:	6062      	str	r2, [r4, #4]
 800acae:	04d9      	lsls	r1, r3, #19
 800acb0:	6922      	ldr	r2, [r4, #16]
 800acb2:	6022      	str	r2, [r4, #0]
 800acb4:	d504      	bpl.n	800acc0 <__sflush_r+0x78>
 800acb6:	1c42      	adds	r2, r0, #1
 800acb8:	d101      	bne.n	800acbe <__sflush_r+0x76>
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	b903      	cbnz	r3, 800acc0 <__sflush_r+0x78>
 800acbe:	6560      	str	r0, [r4, #84]	@ 0x54
 800acc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acc2:	602f      	str	r7, [r5, #0]
 800acc4:	b1b9      	cbz	r1, 800acf6 <__sflush_r+0xae>
 800acc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acca:	4299      	cmp	r1, r3
 800accc:	d002      	beq.n	800acd4 <__sflush_r+0x8c>
 800acce:	4628      	mov	r0, r5
 800acd0:	f7ff fe2e 	bl	800a930 <_free_r>
 800acd4:	2300      	movs	r3, #0
 800acd6:	6363      	str	r3, [r4, #52]	@ 0x34
 800acd8:	e00d      	b.n	800acf6 <__sflush_r+0xae>
 800acda:	2301      	movs	r3, #1
 800acdc:	4628      	mov	r0, r5
 800acde:	47b0      	blx	r6
 800ace0:	4602      	mov	r2, r0
 800ace2:	1c50      	adds	r0, r2, #1
 800ace4:	d1c9      	bne.n	800ac7a <__sflush_r+0x32>
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0c6      	beq.n	800ac7a <__sflush_r+0x32>
 800acec:	2b1d      	cmp	r3, #29
 800acee:	d001      	beq.n	800acf4 <__sflush_r+0xac>
 800acf0:	2b16      	cmp	r3, #22
 800acf2:	d11e      	bne.n	800ad32 <__sflush_r+0xea>
 800acf4:	602f      	str	r7, [r5, #0]
 800acf6:	2000      	movs	r0, #0
 800acf8:	e022      	b.n	800ad40 <__sflush_r+0xf8>
 800acfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfe:	b21b      	sxth	r3, r3
 800ad00:	e01b      	b.n	800ad3a <__sflush_r+0xf2>
 800ad02:	690f      	ldr	r7, [r1, #16]
 800ad04:	2f00      	cmp	r7, #0
 800ad06:	d0f6      	beq.n	800acf6 <__sflush_r+0xae>
 800ad08:	0793      	lsls	r3, r2, #30
 800ad0a:	680e      	ldr	r6, [r1, #0]
 800ad0c:	bf08      	it	eq
 800ad0e:	694b      	ldreq	r3, [r1, #20]
 800ad10:	600f      	str	r7, [r1, #0]
 800ad12:	bf18      	it	ne
 800ad14:	2300      	movne	r3, #0
 800ad16:	eba6 0807 	sub.w	r8, r6, r7
 800ad1a:	608b      	str	r3, [r1, #8]
 800ad1c:	f1b8 0f00 	cmp.w	r8, #0
 800ad20:	dde9      	ble.n	800acf6 <__sflush_r+0xae>
 800ad22:	6a21      	ldr	r1, [r4, #32]
 800ad24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad26:	4643      	mov	r3, r8
 800ad28:	463a      	mov	r2, r7
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	47b0      	blx	r6
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	dc08      	bgt.n	800ad44 <__sflush_r+0xfc>
 800ad32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad44:	4407      	add	r7, r0
 800ad46:	eba8 0800 	sub.w	r8, r8, r0
 800ad4a:	e7e7      	b.n	800ad1c <__sflush_r+0xd4>
 800ad4c:	dfbffffe 	.word	0xdfbffffe

0800ad50 <_fflush_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	690b      	ldr	r3, [r1, #16]
 800ad54:	4605      	mov	r5, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	b913      	cbnz	r3, 800ad60 <_fflush_r+0x10>
 800ad5a:	2500      	movs	r5, #0
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	b118      	cbz	r0, 800ad6a <_fflush_r+0x1a>
 800ad62:	6a03      	ldr	r3, [r0, #32]
 800ad64:	b90b      	cbnz	r3, 800ad6a <_fflush_r+0x1a>
 800ad66:	f7fe fe99 	bl	8009a9c <__sinit>
 800ad6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d0f3      	beq.n	800ad5a <_fflush_r+0xa>
 800ad72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad74:	07d0      	lsls	r0, r2, #31
 800ad76:	d404      	bmi.n	800ad82 <_fflush_r+0x32>
 800ad78:	0599      	lsls	r1, r3, #22
 800ad7a:	d402      	bmi.n	800ad82 <_fflush_r+0x32>
 800ad7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad7e:	f7fe ff7a 	bl	8009c76 <__retarget_lock_acquire_recursive>
 800ad82:	4628      	mov	r0, r5
 800ad84:	4621      	mov	r1, r4
 800ad86:	f7ff ff5f 	bl	800ac48 <__sflush_r>
 800ad8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad8c:	07da      	lsls	r2, r3, #31
 800ad8e:	4605      	mov	r5, r0
 800ad90:	d4e4      	bmi.n	800ad5c <_fflush_r+0xc>
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	059b      	lsls	r3, r3, #22
 800ad96:	d4e1      	bmi.n	800ad5c <_fflush_r+0xc>
 800ad98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad9a:	f7fe ff6d 	bl	8009c78 <__retarget_lock_release_recursive>
 800ad9e:	e7dd      	b.n	800ad5c <_fflush_r+0xc>

0800ada0 <_Balloc>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	69c6      	ldr	r6, [r0, #28]
 800ada4:	4604      	mov	r4, r0
 800ada6:	460d      	mov	r5, r1
 800ada8:	b976      	cbnz	r6, 800adc8 <_Balloc+0x28>
 800adaa:	2010      	movs	r0, #16
 800adac:	f7fe fba6 	bl	80094fc <malloc>
 800adb0:	4602      	mov	r2, r0
 800adb2:	61e0      	str	r0, [r4, #28]
 800adb4:	b920      	cbnz	r0, 800adc0 <_Balloc+0x20>
 800adb6:	4b18      	ldr	r3, [pc, #96]	@ (800ae18 <_Balloc+0x78>)
 800adb8:	4818      	ldr	r0, [pc, #96]	@ (800ae1c <_Balloc+0x7c>)
 800adba:	216b      	movs	r1, #107	@ 0x6b
 800adbc:	f000 fd14 	bl	800b7e8 <__assert_func>
 800adc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adc4:	6006      	str	r6, [r0, #0]
 800adc6:	60c6      	str	r6, [r0, #12]
 800adc8:	69e6      	ldr	r6, [r4, #28]
 800adca:	68f3      	ldr	r3, [r6, #12]
 800adcc:	b183      	cbz	r3, 800adf0 <_Balloc+0x50>
 800adce:	69e3      	ldr	r3, [r4, #28]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800add6:	b9b8      	cbnz	r0, 800ae08 <_Balloc+0x68>
 800add8:	2101      	movs	r1, #1
 800adda:	fa01 f605 	lsl.w	r6, r1, r5
 800adde:	1d72      	adds	r2, r6, #5
 800ade0:	0092      	lsls	r2, r2, #2
 800ade2:	4620      	mov	r0, r4
 800ade4:	f000 fd1e 	bl	800b824 <_calloc_r>
 800ade8:	b160      	cbz	r0, 800ae04 <_Balloc+0x64>
 800adea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adee:	e00e      	b.n	800ae0e <_Balloc+0x6e>
 800adf0:	2221      	movs	r2, #33	@ 0x21
 800adf2:	2104      	movs	r1, #4
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fd15 	bl	800b824 <_calloc_r>
 800adfa:	69e3      	ldr	r3, [r4, #28]
 800adfc:	60f0      	str	r0, [r6, #12]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e4      	bne.n	800adce <_Balloc+0x2e>
 800ae04:	2000      	movs	r0, #0
 800ae06:	bd70      	pop	{r4, r5, r6, pc}
 800ae08:	6802      	ldr	r2, [r0, #0]
 800ae0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae14:	e7f7      	b.n	800ae06 <_Balloc+0x66>
 800ae16:	bf00      	nop
 800ae18:	0803c189 	.word	0x0803c189
 800ae1c:	0803c21a 	.word	0x0803c21a

0800ae20 <_Bfree>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	69c6      	ldr	r6, [r0, #28]
 800ae24:	4605      	mov	r5, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	b976      	cbnz	r6, 800ae48 <_Bfree+0x28>
 800ae2a:	2010      	movs	r0, #16
 800ae2c:	f7fe fb66 	bl	80094fc <malloc>
 800ae30:	4602      	mov	r2, r0
 800ae32:	61e8      	str	r0, [r5, #28]
 800ae34:	b920      	cbnz	r0, 800ae40 <_Bfree+0x20>
 800ae36:	4b09      	ldr	r3, [pc, #36]	@ (800ae5c <_Bfree+0x3c>)
 800ae38:	4809      	ldr	r0, [pc, #36]	@ (800ae60 <_Bfree+0x40>)
 800ae3a:	218f      	movs	r1, #143	@ 0x8f
 800ae3c:	f000 fcd4 	bl	800b7e8 <__assert_func>
 800ae40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae44:	6006      	str	r6, [r0, #0]
 800ae46:	60c6      	str	r6, [r0, #12]
 800ae48:	b13c      	cbz	r4, 800ae5a <_Bfree+0x3a>
 800ae4a:	69eb      	ldr	r3, [r5, #28]
 800ae4c:	6862      	ldr	r2, [r4, #4]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae54:	6021      	str	r1, [r4, #0]
 800ae56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}
 800ae5c:	0803c189 	.word	0x0803c189
 800ae60:	0803c21a 	.word	0x0803c21a

0800ae64 <__multadd>:
 800ae64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae68:	690d      	ldr	r5, [r1, #16]
 800ae6a:	4607      	mov	r7, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	461e      	mov	r6, r3
 800ae70:	f101 0c14 	add.w	ip, r1, #20
 800ae74:	2000      	movs	r0, #0
 800ae76:	f8dc 3000 	ldr.w	r3, [ip]
 800ae7a:	b299      	uxth	r1, r3
 800ae7c:	fb02 6101 	mla	r1, r2, r1, r6
 800ae80:	0c1e      	lsrs	r6, r3, #16
 800ae82:	0c0b      	lsrs	r3, r1, #16
 800ae84:	fb02 3306 	mla	r3, r2, r6, r3
 800ae88:	b289      	uxth	r1, r1
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae90:	4285      	cmp	r5, r0
 800ae92:	f84c 1b04 	str.w	r1, [ip], #4
 800ae96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae9a:	dcec      	bgt.n	800ae76 <__multadd+0x12>
 800ae9c:	b30e      	cbz	r6, 800aee2 <__multadd+0x7e>
 800ae9e:	68a3      	ldr	r3, [r4, #8]
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	dc19      	bgt.n	800aed8 <__multadd+0x74>
 800aea4:	6861      	ldr	r1, [r4, #4]
 800aea6:	4638      	mov	r0, r7
 800aea8:	3101      	adds	r1, #1
 800aeaa:	f7ff ff79 	bl	800ada0 <_Balloc>
 800aeae:	4680      	mov	r8, r0
 800aeb0:	b928      	cbnz	r0, 800aebe <__multadd+0x5a>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	4b0c      	ldr	r3, [pc, #48]	@ (800aee8 <__multadd+0x84>)
 800aeb6:	480d      	ldr	r0, [pc, #52]	@ (800aeec <__multadd+0x88>)
 800aeb8:	21ba      	movs	r1, #186	@ 0xba
 800aeba:	f000 fc95 	bl	800b7e8 <__assert_func>
 800aebe:	6922      	ldr	r2, [r4, #16]
 800aec0:	3202      	adds	r2, #2
 800aec2:	f104 010c 	add.w	r1, r4, #12
 800aec6:	0092      	lsls	r2, r2, #2
 800aec8:	300c      	adds	r0, #12
 800aeca:	f7fe fed6 	bl	8009c7a <memcpy>
 800aece:	4621      	mov	r1, r4
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7ff ffa5 	bl	800ae20 <_Bfree>
 800aed6:	4644      	mov	r4, r8
 800aed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aedc:	3501      	adds	r5, #1
 800aede:	615e      	str	r6, [r3, #20]
 800aee0:	6125      	str	r5, [r4, #16]
 800aee2:	4620      	mov	r0, r4
 800aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee8:	0803c1f8 	.word	0x0803c1f8
 800aeec:	0803c21a 	.word	0x0803c21a

0800aef0 <__hi0bits>:
 800aef0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aef4:	4603      	mov	r3, r0
 800aef6:	bf36      	itet	cc
 800aef8:	0403      	lslcc	r3, r0, #16
 800aefa:	2000      	movcs	r0, #0
 800aefc:	2010      	movcc	r0, #16
 800aefe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af02:	bf3c      	itt	cc
 800af04:	021b      	lslcc	r3, r3, #8
 800af06:	3008      	addcc	r0, #8
 800af08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af0c:	bf3c      	itt	cc
 800af0e:	011b      	lslcc	r3, r3, #4
 800af10:	3004      	addcc	r0, #4
 800af12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af16:	bf3c      	itt	cc
 800af18:	009b      	lslcc	r3, r3, #2
 800af1a:	3002      	addcc	r0, #2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	db05      	blt.n	800af2c <__hi0bits+0x3c>
 800af20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af24:	f100 0001 	add.w	r0, r0, #1
 800af28:	bf08      	it	eq
 800af2a:	2020      	moveq	r0, #32
 800af2c:	4770      	bx	lr

0800af2e <__lo0bits>:
 800af2e:	6803      	ldr	r3, [r0, #0]
 800af30:	4602      	mov	r2, r0
 800af32:	f013 0007 	ands.w	r0, r3, #7
 800af36:	d00b      	beq.n	800af50 <__lo0bits+0x22>
 800af38:	07d9      	lsls	r1, r3, #31
 800af3a:	d421      	bmi.n	800af80 <__lo0bits+0x52>
 800af3c:	0798      	lsls	r0, r3, #30
 800af3e:	bf49      	itett	mi
 800af40:	085b      	lsrmi	r3, r3, #1
 800af42:	089b      	lsrpl	r3, r3, #2
 800af44:	2001      	movmi	r0, #1
 800af46:	6013      	strmi	r3, [r2, #0]
 800af48:	bf5c      	itt	pl
 800af4a:	6013      	strpl	r3, [r2, #0]
 800af4c:	2002      	movpl	r0, #2
 800af4e:	4770      	bx	lr
 800af50:	b299      	uxth	r1, r3
 800af52:	b909      	cbnz	r1, 800af58 <__lo0bits+0x2a>
 800af54:	0c1b      	lsrs	r3, r3, #16
 800af56:	2010      	movs	r0, #16
 800af58:	b2d9      	uxtb	r1, r3
 800af5a:	b909      	cbnz	r1, 800af60 <__lo0bits+0x32>
 800af5c:	3008      	adds	r0, #8
 800af5e:	0a1b      	lsrs	r3, r3, #8
 800af60:	0719      	lsls	r1, r3, #28
 800af62:	bf04      	itt	eq
 800af64:	091b      	lsreq	r3, r3, #4
 800af66:	3004      	addeq	r0, #4
 800af68:	0799      	lsls	r1, r3, #30
 800af6a:	bf04      	itt	eq
 800af6c:	089b      	lsreq	r3, r3, #2
 800af6e:	3002      	addeq	r0, #2
 800af70:	07d9      	lsls	r1, r3, #31
 800af72:	d403      	bmi.n	800af7c <__lo0bits+0x4e>
 800af74:	085b      	lsrs	r3, r3, #1
 800af76:	f100 0001 	add.w	r0, r0, #1
 800af7a:	d003      	beq.n	800af84 <__lo0bits+0x56>
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	4770      	bx	lr
 800af80:	2000      	movs	r0, #0
 800af82:	4770      	bx	lr
 800af84:	2020      	movs	r0, #32
 800af86:	4770      	bx	lr

0800af88 <__i2b>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	460c      	mov	r4, r1
 800af8c:	2101      	movs	r1, #1
 800af8e:	f7ff ff07 	bl	800ada0 <_Balloc>
 800af92:	4602      	mov	r2, r0
 800af94:	b928      	cbnz	r0, 800afa2 <__i2b+0x1a>
 800af96:	4b05      	ldr	r3, [pc, #20]	@ (800afac <__i2b+0x24>)
 800af98:	4805      	ldr	r0, [pc, #20]	@ (800afb0 <__i2b+0x28>)
 800af9a:	f240 1145 	movw	r1, #325	@ 0x145
 800af9e:	f000 fc23 	bl	800b7e8 <__assert_func>
 800afa2:	2301      	movs	r3, #1
 800afa4:	6144      	str	r4, [r0, #20]
 800afa6:	6103      	str	r3, [r0, #16]
 800afa8:	bd10      	pop	{r4, pc}
 800afaa:	bf00      	nop
 800afac:	0803c1f8 	.word	0x0803c1f8
 800afb0:	0803c21a 	.word	0x0803c21a

0800afb4 <__multiply>:
 800afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	4614      	mov	r4, r2
 800afba:	690a      	ldr	r2, [r1, #16]
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	bfa8      	it	ge
 800afc2:	4623      	movge	r3, r4
 800afc4:	460f      	mov	r7, r1
 800afc6:	bfa4      	itt	ge
 800afc8:	460c      	movge	r4, r1
 800afca:	461f      	movge	r7, r3
 800afcc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800afd0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800afd4:	68a3      	ldr	r3, [r4, #8]
 800afd6:	6861      	ldr	r1, [r4, #4]
 800afd8:	eb0a 0609 	add.w	r6, sl, r9
 800afdc:	42b3      	cmp	r3, r6
 800afde:	b085      	sub	sp, #20
 800afe0:	bfb8      	it	lt
 800afe2:	3101      	addlt	r1, #1
 800afe4:	f7ff fedc 	bl	800ada0 <_Balloc>
 800afe8:	b930      	cbnz	r0, 800aff8 <__multiply+0x44>
 800afea:	4602      	mov	r2, r0
 800afec:	4b44      	ldr	r3, [pc, #272]	@ (800b100 <__multiply+0x14c>)
 800afee:	4845      	ldr	r0, [pc, #276]	@ (800b104 <__multiply+0x150>)
 800aff0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aff4:	f000 fbf8 	bl	800b7e8 <__assert_func>
 800aff8:	f100 0514 	add.w	r5, r0, #20
 800affc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b000:	462b      	mov	r3, r5
 800b002:	2200      	movs	r2, #0
 800b004:	4543      	cmp	r3, r8
 800b006:	d321      	bcc.n	800b04c <__multiply+0x98>
 800b008:	f107 0114 	add.w	r1, r7, #20
 800b00c:	f104 0214 	add.w	r2, r4, #20
 800b010:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b014:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b018:	9302      	str	r3, [sp, #8]
 800b01a:	1b13      	subs	r3, r2, r4
 800b01c:	3b15      	subs	r3, #21
 800b01e:	f023 0303 	bic.w	r3, r3, #3
 800b022:	3304      	adds	r3, #4
 800b024:	f104 0715 	add.w	r7, r4, #21
 800b028:	42ba      	cmp	r2, r7
 800b02a:	bf38      	it	cc
 800b02c:	2304      	movcc	r3, #4
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	9103      	str	r1, [sp, #12]
 800b034:	428b      	cmp	r3, r1
 800b036:	d80c      	bhi.n	800b052 <__multiply+0x9e>
 800b038:	2e00      	cmp	r6, #0
 800b03a:	dd03      	ble.n	800b044 <__multiply+0x90>
 800b03c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b040:	2b00      	cmp	r3, #0
 800b042:	d05b      	beq.n	800b0fc <__multiply+0x148>
 800b044:	6106      	str	r6, [r0, #16]
 800b046:	b005      	add	sp, #20
 800b048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	f843 2b04 	str.w	r2, [r3], #4
 800b050:	e7d8      	b.n	800b004 <__multiply+0x50>
 800b052:	f8b1 a000 	ldrh.w	sl, [r1]
 800b056:	f1ba 0f00 	cmp.w	sl, #0
 800b05a:	d024      	beq.n	800b0a6 <__multiply+0xf2>
 800b05c:	f104 0e14 	add.w	lr, r4, #20
 800b060:	46a9      	mov	r9, r5
 800b062:	f04f 0c00 	mov.w	ip, #0
 800b066:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b06a:	f8d9 3000 	ldr.w	r3, [r9]
 800b06e:	fa1f fb87 	uxth.w	fp, r7
 800b072:	b29b      	uxth	r3, r3
 800b074:	fb0a 330b 	mla	r3, sl, fp, r3
 800b078:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b07c:	f8d9 7000 	ldr.w	r7, [r9]
 800b080:	4463      	add	r3, ip
 800b082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b086:	fb0a c70b 	mla	r7, sl, fp, ip
 800b08a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b08e:	b29b      	uxth	r3, r3
 800b090:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b094:	4572      	cmp	r2, lr
 800b096:	f849 3b04 	str.w	r3, [r9], #4
 800b09a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b09e:	d8e2      	bhi.n	800b066 <__multiply+0xb2>
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	f845 c003 	str.w	ip, [r5, r3]
 800b0a6:	9b03      	ldr	r3, [sp, #12]
 800b0a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b0ac:	3104      	adds	r1, #4
 800b0ae:	f1b9 0f00 	cmp.w	r9, #0
 800b0b2:	d021      	beq.n	800b0f8 <__multiply+0x144>
 800b0b4:	682b      	ldr	r3, [r5, #0]
 800b0b6:	f104 0c14 	add.w	ip, r4, #20
 800b0ba:	46ae      	mov	lr, r5
 800b0bc:	f04f 0a00 	mov.w	sl, #0
 800b0c0:	f8bc b000 	ldrh.w	fp, [ip]
 800b0c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b0c8:	fb09 770b 	mla	r7, r9, fp, r7
 800b0cc:	4457      	add	r7, sl
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b0d4:	f84e 3b04 	str.w	r3, [lr], #4
 800b0d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b0dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0e0:	f8be 3000 	ldrh.w	r3, [lr]
 800b0e4:	fb09 330a 	mla	r3, r9, sl, r3
 800b0e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b0ec:	4562      	cmp	r2, ip
 800b0ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0f2:	d8e5      	bhi.n	800b0c0 <__multiply+0x10c>
 800b0f4:	9f01      	ldr	r7, [sp, #4]
 800b0f6:	51eb      	str	r3, [r5, r7]
 800b0f8:	3504      	adds	r5, #4
 800b0fa:	e799      	b.n	800b030 <__multiply+0x7c>
 800b0fc:	3e01      	subs	r6, #1
 800b0fe:	e79b      	b.n	800b038 <__multiply+0x84>
 800b100:	0803c1f8 	.word	0x0803c1f8
 800b104:	0803c21a 	.word	0x0803c21a

0800b108 <__pow5mult>:
 800b108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b10c:	4615      	mov	r5, r2
 800b10e:	f012 0203 	ands.w	r2, r2, #3
 800b112:	4607      	mov	r7, r0
 800b114:	460e      	mov	r6, r1
 800b116:	d007      	beq.n	800b128 <__pow5mult+0x20>
 800b118:	4c25      	ldr	r4, [pc, #148]	@ (800b1b0 <__pow5mult+0xa8>)
 800b11a:	3a01      	subs	r2, #1
 800b11c:	2300      	movs	r3, #0
 800b11e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b122:	f7ff fe9f 	bl	800ae64 <__multadd>
 800b126:	4606      	mov	r6, r0
 800b128:	10ad      	asrs	r5, r5, #2
 800b12a:	d03d      	beq.n	800b1a8 <__pow5mult+0xa0>
 800b12c:	69fc      	ldr	r4, [r7, #28]
 800b12e:	b97c      	cbnz	r4, 800b150 <__pow5mult+0x48>
 800b130:	2010      	movs	r0, #16
 800b132:	f7fe f9e3 	bl	80094fc <malloc>
 800b136:	4602      	mov	r2, r0
 800b138:	61f8      	str	r0, [r7, #28]
 800b13a:	b928      	cbnz	r0, 800b148 <__pow5mult+0x40>
 800b13c:	4b1d      	ldr	r3, [pc, #116]	@ (800b1b4 <__pow5mult+0xac>)
 800b13e:	481e      	ldr	r0, [pc, #120]	@ (800b1b8 <__pow5mult+0xb0>)
 800b140:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b144:	f000 fb50 	bl	800b7e8 <__assert_func>
 800b148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b14c:	6004      	str	r4, [r0, #0]
 800b14e:	60c4      	str	r4, [r0, #12]
 800b150:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b158:	b94c      	cbnz	r4, 800b16e <__pow5mult+0x66>
 800b15a:	f240 2171 	movw	r1, #625	@ 0x271
 800b15e:	4638      	mov	r0, r7
 800b160:	f7ff ff12 	bl	800af88 <__i2b>
 800b164:	2300      	movs	r3, #0
 800b166:	f8c8 0008 	str.w	r0, [r8, #8]
 800b16a:	4604      	mov	r4, r0
 800b16c:	6003      	str	r3, [r0, #0]
 800b16e:	f04f 0900 	mov.w	r9, #0
 800b172:	07eb      	lsls	r3, r5, #31
 800b174:	d50a      	bpl.n	800b18c <__pow5mult+0x84>
 800b176:	4631      	mov	r1, r6
 800b178:	4622      	mov	r2, r4
 800b17a:	4638      	mov	r0, r7
 800b17c:	f7ff ff1a 	bl	800afb4 <__multiply>
 800b180:	4631      	mov	r1, r6
 800b182:	4680      	mov	r8, r0
 800b184:	4638      	mov	r0, r7
 800b186:	f7ff fe4b 	bl	800ae20 <_Bfree>
 800b18a:	4646      	mov	r6, r8
 800b18c:	106d      	asrs	r5, r5, #1
 800b18e:	d00b      	beq.n	800b1a8 <__pow5mult+0xa0>
 800b190:	6820      	ldr	r0, [r4, #0]
 800b192:	b938      	cbnz	r0, 800b1a4 <__pow5mult+0x9c>
 800b194:	4622      	mov	r2, r4
 800b196:	4621      	mov	r1, r4
 800b198:	4638      	mov	r0, r7
 800b19a:	f7ff ff0b 	bl	800afb4 <__multiply>
 800b19e:	6020      	str	r0, [r4, #0]
 800b1a0:	f8c0 9000 	str.w	r9, [r0]
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	e7e4      	b.n	800b172 <__pow5mult+0x6a>
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ae:	bf00      	nop
 800b1b0:	0803c274 	.word	0x0803c274
 800b1b4:	0803c189 	.word	0x0803c189
 800b1b8:	0803c21a 	.word	0x0803c21a

0800b1bc <__lshift>:
 800b1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	6849      	ldr	r1, [r1, #4]
 800b1c4:	6923      	ldr	r3, [r4, #16]
 800b1c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1ca:	68a3      	ldr	r3, [r4, #8]
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	4691      	mov	r9, r2
 800b1d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b1d4:	f108 0601 	add.w	r6, r8, #1
 800b1d8:	42b3      	cmp	r3, r6
 800b1da:	db0b      	blt.n	800b1f4 <__lshift+0x38>
 800b1dc:	4638      	mov	r0, r7
 800b1de:	f7ff fddf 	bl	800ada0 <_Balloc>
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	b948      	cbnz	r0, 800b1fa <__lshift+0x3e>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	4b28      	ldr	r3, [pc, #160]	@ (800b28c <__lshift+0xd0>)
 800b1ea:	4829      	ldr	r0, [pc, #164]	@ (800b290 <__lshift+0xd4>)
 800b1ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b1f0:	f000 fafa 	bl	800b7e8 <__assert_func>
 800b1f4:	3101      	adds	r1, #1
 800b1f6:	005b      	lsls	r3, r3, #1
 800b1f8:	e7ee      	b.n	800b1d8 <__lshift+0x1c>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f100 0114 	add.w	r1, r0, #20
 800b200:	f100 0210 	add.w	r2, r0, #16
 800b204:	4618      	mov	r0, r3
 800b206:	4553      	cmp	r3, sl
 800b208:	db33      	blt.n	800b272 <__lshift+0xb6>
 800b20a:	6920      	ldr	r0, [r4, #16]
 800b20c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b210:	f104 0314 	add.w	r3, r4, #20
 800b214:	f019 091f 	ands.w	r9, r9, #31
 800b218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b21c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b220:	d02b      	beq.n	800b27a <__lshift+0xbe>
 800b222:	f1c9 0e20 	rsb	lr, r9, #32
 800b226:	468a      	mov	sl, r1
 800b228:	2200      	movs	r2, #0
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	fa00 f009 	lsl.w	r0, r0, r9
 800b230:	4310      	orrs	r0, r2
 800b232:	f84a 0b04 	str.w	r0, [sl], #4
 800b236:	f853 2b04 	ldr.w	r2, [r3], #4
 800b23a:	459c      	cmp	ip, r3
 800b23c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b240:	d8f3      	bhi.n	800b22a <__lshift+0x6e>
 800b242:	ebac 0304 	sub.w	r3, ip, r4
 800b246:	3b15      	subs	r3, #21
 800b248:	f023 0303 	bic.w	r3, r3, #3
 800b24c:	3304      	adds	r3, #4
 800b24e:	f104 0015 	add.w	r0, r4, #21
 800b252:	4584      	cmp	ip, r0
 800b254:	bf38      	it	cc
 800b256:	2304      	movcc	r3, #4
 800b258:	50ca      	str	r2, [r1, r3]
 800b25a:	b10a      	cbz	r2, 800b260 <__lshift+0xa4>
 800b25c:	f108 0602 	add.w	r6, r8, #2
 800b260:	3e01      	subs	r6, #1
 800b262:	4638      	mov	r0, r7
 800b264:	612e      	str	r6, [r5, #16]
 800b266:	4621      	mov	r1, r4
 800b268:	f7ff fdda 	bl	800ae20 <_Bfree>
 800b26c:	4628      	mov	r0, r5
 800b26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b272:	f842 0f04 	str.w	r0, [r2, #4]!
 800b276:	3301      	adds	r3, #1
 800b278:	e7c5      	b.n	800b206 <__lshift+0x4a>
 800b27a:	3904      	subs	r1, #4
 800b27c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b280:	f841 2f04 	str.w	r2, [r1, #4]!
 800b284:	459c      	cmp	ip, r3
 800b286:	d8f9      	bhi.n	800b27c <__lshift+0xc0>
 800b288:	e7ea      	b.n	800b260 <__lshift+0xa4>
 800b28a:	bf00      	nop
 800b28c:	0803c1f8 	.word	0x0803c1f8
 800b290:	0803c21a 	.word	0x0803c21a

0800b294 <__mcmp>:
 800b294:	690a      	ldr	r2, [r1, #16]
 800b296:	4603      	mov	r3, r0
 800b298:	6900      	ldr	r0, [r0, #16]
 800b29a:	1a80      	subs	r0, r0, r2
 800b29c:	b530      	push	{r4, r5, lr}
 800b29e:	d10e      	bne.n	800b2be <__mcmp+0x2a>
 800b2a0:	3314      	adds	r3, #20
 800b2a2:	3114      	adds	r1, #20
 800b2a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b2a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b2ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2b4:	4295      	cmp	r5, r2
 800b2b6:	d003      	beq.n	800b2c0 <__mcmp+0x2c>
 800b2b8:	d205      	bcs.n	800b2c6 <__mcmp+0x32>
 800b2ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2be:	bd30      	pop	{r4, r5, pc}
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	d3f3      	bcc.n	800b2ac <__mcmp+0x18>
 800b2c4:	e7fb      	b.n	800b2be <__mcmp+0x2a>
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	e7f9      	b.n	800b2be <__mcmp+0x2a>
	...

0800b2cc <__mdiff>:
 800b2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d0:	4689      	mov	r9, r1
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	4648      	mov	r0, r9
 800b2d8:	4614      	mov	r4, r2
 800b2da:	f7ff ffdb 	bl	800b294 <__mcmp>
 800b2de:	1e05      	subs	r5, r0, #0
 800b2e0:	d112      	bne.n	800b308 <__mdiff+0x3c>
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff fd5b 	bl	800ada0 <_Balloc>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	b928      	cbnz	r0, 800b2fa <__mdiff+0x2e>
 800b2ee:	4b3f      	ldr	r3, [pc, #252]	@ (800b3ec <__mdiff+0x120>)
 800b2f0:	f240 2137 	movw	r1, #567	@ 0x237
 800b2f4:	483e      	ldr	r0, [pc, #248]	@ (800b3f0 <__mdiff+0x124>)
 800b2f6:	f000 fa77 	bl	800b7e8 <__assert_func>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b300:	4610      	mov	r0, r2
 800b302:	b003      	add	sp, #12
 800b304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b308:	bfbc      	itt	lt
 800b30a:	464b      	movlt	r3, r9
 800b30c:	46a1      	movlt	r9, r4
 800b30e:	4630      	mov	r0, r6
 800b310:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b314:	bfba      	itte	lt
 800b316:	461c      	movlt	r4, r3
 800b318:	2501      	movlt	r5, #1
 800b31a:	2500      	movge	r5, #0
 800b31c:	f7ff fd40 	bl	800ada0 <_Balloc>
 800b320:	4602      	mov	r2, r0
 800b322:	b918      	cbnz	r0, 800b32c <__mdiff+0x60>
 800b324:	4b31      	ldr	r3, [pc, #196]	@ (800b3ec <__mdiff+0x120>)
 800b326:	f240 2145 	movw	r1, #581	@ 0x245
 800b32a:	e7e3      	b.n	800b2f4 <__mdiff+0x28>
 800b32c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b330:	6926      	ldr	r6, [r4, #16]
 800b332:	60c5      	str	r5, [r0, #12]
 800b334:	f109 0310 	add.w	r3, r9, #16
 800b338:	f109 0514 	add.w	r5, r9, #20
 800b33c:	f104 0e14 	add.w	lr, r4, #20
 800b340:	f100 0b14 	add.w	fp, r0, #20
 800b344:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b348:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b34c:	9301      	str	r3, [sp, #4]
 800b34e:	46d9      	mov	r9, fp
 800b350:	f04f 0c00 	mov.w	ip, #0
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b35a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	fa1f f38a 	uxth.w	r3, sl
 800b364:	4619      	mov	r1, r3
 800b366:	b283      	uxth	r3, r0
 800b368:	1acb      	subs	r3, r1, r3
 800b36a:	0c00      	lsrs	r0, r0, #16
 800b36c:	4463      	add	r3, ip
 800b36e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b372:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b376:	b29b      	uxth	r3, r3
 800b378:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b37c:	4576      	cmp	r6, lr
 800b37e:	f849 3b04 	str.w	r3, [r9], #4
 800b382:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b386:	d8e5      	bhi.n	800b354 <__mdiff+0x88>
 800b388:	1b33      	subs	r3, r6, r4
 800b38a:	3b15      	subs	r3, #21
 800b38c:	f023 0303 	bic.w	r3, r3, #3
 800b390:	3415      	adds	r4, #21
 800b392:	3304      	adds	r3, #4
 800b394:	42a6      	cmp	r6, r4
 800b396:	bf38      	it	cc
 800b398:	2304      	movcc	r3, #4
 800b39a:	441d      	add	r5, r3
 800b39c:	445b      	add	r3, fp
 800b39e:	461e      	mov	r6, r3
 800b3a0:	462c      	mov	r4, r5
 800b3a2:	4544      	cmp	r4, r8
 800b3a4:	d30e      	bcc.n	800b3c4 <__mdiff+0xf8>
 800b3a6:	f108 0103 	add.w	r1, r8, #3
 800b3aa:	1b49      	subs	r1, r1, r5
 800b3ac:	f021 0103 	bic.w	r1, r1, #3
 800b3b0:	3d03      	subs	r5, #3
 800b3b2:	45a8      	cmp	r8, r5
 800b3b4:	bf38      	it	cc
 800b3b6:	2100      	movcc	r1, #0
 800b3b8:	440b      	add	r3, r1
 800b3ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3be:	b191      	cbz	r1, 800b3e6 <__mdiff+0x11a>
 800b3c0:	6117      	str	r7, [r2, #16]
 800b3c2:	e79d      	b.n	800b300 <__mdiff+0x34>
 800b3c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b3c8:	46e6      	mov	lr, ip
 800b3ca:	0c08      	lsrs	r0, r1, #16
 800b3cc:	fa1c fc81 	uxtah	ip, ip, r1
 800b3d0:	4471      	add	r1, lr
 800b3d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b3d6:	b289      	uxth	r1, r1
 800b3d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b3dc:	f846 1b04 	str.w	r1, [r6], #4
 800b3e0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3e4:	e7dd      	b.n	800b3a2 <__mdiff+0xd6>
 800b3e6:	3f01      	subs	r7, #1
 800b3e8:	e7e7      	b.n	800b3ba <__mdiff+0xee>
 800b3ea:	bf00      	nop
 800b3ec:	0803c1f8 	.word	0x0803c1f8
 800b3f0:	0803c21a 	.word	0x0803c21a

0800b3f4 <__d2b>:
 800b3f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3f8:	460f      	mov	r7, r1
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	ec59 8b10 	vmov	r8, r9, d0
 800b400:	4616      	mov	r6, r2
 800b402:	f7ff fccd 	bl	800ada0 <_Balloc>
 800b406:	4604      	mov	r4, r0
 800b408:	b930      	cbnz	r0, 800b418 <__d2b+0x24>
 800b40a:	4602      	mov	r2, r0
 800b40c:	4b23      	ldr	r3, [pc, #140]	@ (800b49c <__d2b+0xa8>)
 800b40e:	4824      	ldr	r0, [pc, #144]	@ (800b4a0 <__d2b+0xac>)
 800b410:	f240 310f 	movw	r1, #783	@ 0x30f
 800b414:	f000 f9e8 	bl	800b7e8 <__assert_func>
 800b418:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b41c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b420:	b10d      	cbz	r5, 800b426 <__d2b+0x32>
 800b422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b426:	9301      	str	r3, [sp, #4]
 800b428:	f1b8 0300 	subs.w	r3, r8, #0
 800b42c:	d023      	beq.n	800b476 <__d2b+0x82>
 800b42e:	4668      	mov	r0, sp
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	f7ff fd7c 	bl	800af2e <__lo0bits>
 800b436:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b43a:	b1d0      	cbz	r0, 800b472 <__d2b+0x7e>
 800b43c:	f1c0 0320 	rsb	r3, r0, #32
 800b440:	fa02 f303 	lsl.w	r3, r2, r3
 800b444:	430b      	orrs	r3, r1
 800b446:	40c2      	lsrs	r2, r0
 800b448:	6163      	str	r3, [r4, #20]
 800b44a:	9201      	str	r2, [sp, #4]
 800b44c:	9b01      	ldr	r3, [sp, #4]
 800b44e:	61a3      	str	r3, [r4, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	bf0c      	ite	eq
 800b454:	2201      	moveq	r2, #1
 800b456:	2202      	movne	r2, #2
 800b458:	6122      	str	r2, [r4, #16]
 800b45a:	b1a5      	cbz	r5, 800b486 <__d2b+0x92>
 800b45c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b460:	4405      	add	r5, r0
 800b462:	603d      	str	r5, [r7, #0]
 800b464:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b468:	6030      	str	r0, [r6, #0]
 800b46a:	4620      	mov	r0, r4
 800b46c:	b003      	add	sp, #12
 800b46e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b472:	6161      	str	r1, [r4, #20]
 800b474:	e7ea      	b.n	800b44c <__d2b+0x58>
 800b476:	a801      	add	r0, sp, #4
 800b478:	f7ff fd59 	bl	800af2e <__lo0bits>
 800b47c:	9b01      	ldr	r3, [sp, #4]
 800b47e:	6163      	str	r3, [r4, #20]
 800b480:	3020      	adds	r0, #32
 800b482:	2201      	movs	r2, #1
 800b484:	e7e8      	b.n	800b458 <__d2b+0x64>
 800b486:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b48a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b48e:	6038      	str	r0, [r7, #0]
 800b490:	6918      	ldr	r0, [r3, #16]
 800b492:	f7ff fd2d 	bl	800aef0 <__hi0bits>
 800b496:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b49a:	e7e5      	b.n	800b468 <__d2b+0x74>
 800b49c:	0803c1f8 	.word	0x0803c1f8
 800b4a0:	0803c21a 	.word	0x0803c21a

0800b4a4 <__sread>:
 800b4a4:	b510      	push	{r4, lr}
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ac:	f000 f978 	bl	800b7a0 <_read_r>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	bfab      	itete	ge
 800b4b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b4b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b4b8:	181b      	addge	r3, r3, r0
 800b4ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b4be:	bfac      	ite	ge
 800b4c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b4c2:	81a3      	strhlt	r3, [r4, #12]
 800b4c4:	bd10      	pop	{r4, pc}

0800b4c6 <__swrite>:
 800b4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ca:	461f      	mov	r7, r3
 800b4cc:	898b      	ldrh	r3, [r1, #12]
 800b4ce:	05db      	lsls	r3, r3, #23
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	4616      	mov	r6, r2
 800b4d6:	d505      	bpl.n	800b4e4 <__swrite+0x1e>
 800b4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4dc:	2302      	movs	r3, #2
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f000 f94c 	bl	800b77c <_lseek_r>
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	4632      	mov	r2, r6
 800b4f2:	463b      	mov	r3, r7
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fa:	f000 b963 	b.w	800b7c4 <_write_r>

0800b4fe <__sseek>:
 800b4fe:	b510      	push	{r4, lr}
 800b500:	460c      	mov	r4, r1
 800b502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b506:	f000 f939 	bl	800b77c <_lseek_r>
 800b50a:	1c43      	adds	r3, r0, #1
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	bf15      	itete	ne
 800b510:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b512:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b516:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b51a:	81a3      	strheq	r3, [r4, #12]
 800b51c:	bf18      	it	ne
 800b51e:	81a3      	strhne	r3, [r4, #12]
 800b520:	bd10      	pop	{r4, pc}

0800b522 <__sclose>:
 800b522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b526:	f000 b8f7 	b.w	800b718 <_close_r>

0800b52a <__swbuf_r>:
 800b52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52c:	460e      	mov	r6, r1
 800b52e:	4614      	mov	r4, r2
 800b530:	4605      	mov	r5, r0
 800b532:	b118      	cbz	r0, 800b53c <__swbuf_r+0x12>
 800b534:	6a03      	ldr	r3, [r0, #32]
 800b536:	b90b      	cbnz	r3, 800b53c <__swbuf_r+0x12>
 800b538:	f7fe fab0 	bl	8009a9c <__sinit>
 800b53c:	69a3      	ldr	r3, [r4, #24]
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	89a3      	ldrh	r3, [r4, #12]
 800b542:	071a      	lsls	r2, r3, #28
 800b544:	d501      	bpl.n	800b54a <__swbuf_r+0x20>
 800b546:	6923      	ldr	r3, [r4, #16]
 800b548:	b943      	cbnz	r3, 800b55c <__swbuf_r+0x32>
 800b54a:	4621      	mov	r1, r4
 800b54c:	4628      	mov	r0, r5
 800b54e:	f000 f82b 	bl	800b5a8 <__swsetup_r>
 800b552:	b118      	cbz	r0, 800b55c <__swbuf_r+0x32>
 800b554:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b558:	4638      	mov	r0, r7
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	6922      	ldr	r2, [r4, #16]
 800b560:	1a98      	subs	r0, r3, r2
 800b562:	6963      	ldr	r3, [r4, #20]
 800b564:	b2f6      	uxtb	r6, r6
 800b566:	4283      	cmp	r3, r0
 800b568:	4637      	mov	r7, r6
 800b56a:	dc05      	bgt.n	800b578 <__swbuf_r+0x4e>
 800b56c:	4621      	mov	r1, r4
 800b56e:	4628      	mov	r0, r5
 800b570:	f7ff fbee 	bl	800ad50 <_fflush_r>
 800b574:	2800      	cmp	r0, #0
 800b576:	d1ed      	bne.n	800b554 <__swbuf_r+0x2a>
 800b578:	68a3      	ldr	r3, [r4, #8]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	60a3      	str	r3, [r4, #8]
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	1c5a      	adds	r2, r3, #1
 800b582:	6022      	str	r2, [r4, #0]
 800b584:	701e      	strb	r6, [r3, #0]
 800b586:	6962      	ldr	r2, [r4, #20]
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d004      	beq.n	800b598 <__swbuf_r+0x6e>
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	07db      	lsls	r3, r3, #31
 800b592:	d5e1      	bpl.n	800b558 <__swbuf_r+0x2e>
 800b594:	2e0a      	cmp	r6, #10
 800b596:	d1df      	bne.n	800b558 <__swbuf_r+0x2e>
 800b598:	4621      	mov	r1, r4
 800b59a:	4628      	mov	r0, r5
 800b59c:	f7ff fbd8 	bl	800ad50 <_fflush_r>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d0d9      	beq.n	800b558 <__swbuf_r+0x2e>
 800b5a4:	e7d6      	b.n	800b554 <__swbuf_r+0x2a>
	...

0800b5a8 <__swsetup_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4b29      	ldr	r3, [pc, #164]	@ (800b650 <__swsetup_r+0xa8>)
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	6818      	ldr	r0, [r3, #0]
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	b118      	cbz	r0, 800b5bc <__swsetup_r+0x14>
 800b5b4:	6a03      	ldr	r3, [r0, #32]
 800b5b6:	b90b      	cbnz	r3, 800b5bc <__swsetup_r+0x14>
 800b5b8:	f7fe fa70 	bl	8009a9c <__sinit>
 800b5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c0:	0719      	lsls	r1, r3, #28
 800b5c2:	d422      	bmi.n	800b60a <__swsetup_r+0x62>
 800b5c4:	06da      	lsls	r2, r3, #27
 800b5c6:	d407      	bmi.n	800b5d8 <__swsetup_r+0x30>
 800b5c8:	2209      	movs	r2, #9
 800b5ca:	602a      	str	r2, [r5, #0]
 800b5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5d6:	e033      	b.n	800b640 <__swsetup_r+0x98>
 800b5d8:	0758      	lsls	r0, r3, #29
 800b5da:	d512      	bpl.n	800b602 <__swsetup_r+0x5a>
 800b5dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5de:	b141      	cbz	r1, 800b5f2 <__swsetup_r+0x4a>
 800b5e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5e4:	4299      	cmp	r1, r3
 800b5e6:	d002      	beq.n	800b5ee <__swsetup_r+0x46>
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f7ff f9a1 	bl	800a930 <_free_r>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6063      	str	r3, [r4, #4]
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	f043 0308 	orr.w	r3, r3, #8
 800b608:	81a3      	strh	r3, [r4, #12]
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	b94b      	cbnz	r3, 800b622 <__swsetup_r+0x7a>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b618:	d003      	beq.n	800b622 <__swsetup_r+0x7a>
 800b61a:	4621      	mov	r1, r4
 800b61c:	4628      	mov	r0, r5
 800b61e:	f000 f83f 	bl	800b6a0 <__smakebuf_r>
 800b622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b626:	f013 0201 	ands.w	r2, r3, #1
 800b62a:	d00a      	beq.n	800b642 <__swsetup_r+0x9a>
 800b62c:	2200      	movs	r2, #0
 800b62e:	60a2      	str	r2, [r4, #8]
 800b630:	6962      	ldr	r2, [r4, #20]
 800b632:	4252      	negs	r2, r2
 800b634:	61a2      	str	r2, [r4, #24]
 800b636:	6922      	ldr	r2, [r4, #16]
 800b638:	b942      	cbnz	r2, 800b64c <__swsetup_r+0xa4>
 800b63a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b63e:	d1c5      	bne.n	800b5cc <__swsetup_r+0x24>
 800b640:	bd38      	pop	{r3, r4, r5, pc}
 800b642:	0799      	lsls	r1, r3, #30
 800b644:	bf58      	it	pl
 800b646:	6962      	ldrpl	r2, [r4, #20]
 800b648:	60a2      	str	r2, [r4, #8]
 800b64a:	e7f4      	b.n	800b636 <__swsetup_r+0x8e>
 800b64c:	2000      	movs	r0, #0
 800b64e:	e7f7      	b.n	800b640 <__swsetup_r+0x98>
 800b650:	2000095c 	.word	0x2000095c

0800b654 <__swhatbuf_r>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	460c      	mov	r4, r1
 800b658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b65c:	2900      	cmp	r1, #0
 800b65e:	b096      	sub	sp, #88	@ 0x58
 800b660:	4615      	mov	r5, r2
 800b662:	461e      	mov	r6, r3
 800b664:	da0d      	bge.n	800b682 <__swhatbuf_r+0x2e>
 800b666:	89a3      	ldrh	r3, [r4, #12]
 800b668:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b66c:	f04f 0100 	mov.w	r1, #0
 800b670:	bf14      	ite	ne
 800b672:	2340      	movne	r3, #64	@ 0x40
 800b674:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b678:	2000      	movs	r0, #0
 800b67a:	6031      	str	r1, [r6, #0]
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	b016      	add	sp, #88	@ 0x58
 800b680:	bd70      	pop	{r4, r5, r6, pc}
 800b682:	466a      	mov	r2, sp
 800b684:	f000 f858 	bl	800b738 <_fstat_r>
 800b688:	2800      	cmp	r0, #0
 800b68a:	dbec      	blt.n	800b666 <__swhatbuf_r+0x12>
 800b68c:	9901      	ldr	r1, [sp, #4]
 800b68e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b692:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b696:	4259      	negs	r1, r3
 800b698:	4159      	adcs	r1, r3
 800b69a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b69e:	e7eb      	b.n	800b678 <__swhatbuf_r+0x24>

0800b6a0 <__smakebuf_r>:
 800b6a0:	898b      	ldrh	r3, [r1, #12]
 800b6a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6a4:	079d      	lsls	r5, r3, #30
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	d507      	bpl.n	800b6bc <__smakebuf_r+0x1c>
 800b6ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b6b0:	6023      	str	r3, [r4, #0]
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	6163      	str	r3, [r4, #20]
 800b6b8:	b003      	add	sp, #12
 800b6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6bc:	ab01      	add	r3, sp, #4
 800b6be:	466a      	mov	r2, sp
 800b6c0:	f7ff ffc8 	bl	800b654 <__swhatbuf_r>
 800b6c4:	9f00      	ldr	r7, [sp, #0]
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	4639      	mov	r1, r7
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f7fd ff40 	bl	8009550 <_malloc_r>
 800b6d0:	b948      	cbnz	r0, 800b6e6 <__smakebuf_r+0x46>
 800b6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6d6:	059a      	lsls	r2, r3, #22
 800b6d8:	d4ee      	bmi.n	800b6b8 <__smakebuf_r+0x18>
 800b6da:	f023 0303 	bic.w	r3, r3, #3
 800b6de:	f043 0302 	orr.w	r3, r3, #2
 800b6e2:	81a3      	strh	r3, [r4, #12]
 800b6e4:	e7e2      	b.n	800b6ac <__smakebuf_r+0xc>
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	6020      	str	r0, [r4, #0]
 800b6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	9b01      	ldr	r3, [sp, #4]
 800b6f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b6f6:	b15b      	cbz	r3, 800b710 <__smakebuf_r+0x70>
 800b6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 f82d 	bl	800b75c <_isatty_r>
 800b702:	b128      	cbz	r0, 800b710 <__smakebuf_r+0x70>
 800b704:	89a3      	ldrh	r3, [r4, #12]
 800b706:	f023 0303 	bic.w	r3, r3, #3
 800b70a:	f043 0301 	orr.w	r3, r3, #1
 800b70e:	81a3      	strh	r3, [r4, #12]
 800b710:	89a3      	ldrh	r3, [r4, #12]
 800b712:	431d      	orrs	r5, r3
 800b714:	81a5      	strh	r5, [r4, #12]
 800b716:	e7cf      	b.n	800b6b8 <__smakebuf_r+0x18>

0800b718 <_close_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d06      	ldr	r5, [pc, #24]	@ (800b734 <_close_r+0x1c>)
 800b71c:	2300      	movs	r3, #0
 800b71e:	4604      	mov	r4, r0
 800b720:	4608      	mov	r0, r1
 800b722:	602b      	str	r3, [r5, #0]
 800b724:	f000 fbe2 	bl	800beec <_close>
 800b728:	1c43      	adds	r3, r0, #1
 800b72a:	d102      	bne.n	800b732 <_close_r+0x1a>
 800b72c:	682b      	ldr	r3, [r5, #0]
 800b72e:	b103      	cbz	r3, 800b732 <_close_r+0x1a>
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	bd38      	pop	{r3, r4, r5, pc}
 800b734:	20018730 	.word	0x20018730

0800b738 <_fstat_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d07      	ldr	r5, [pc, #28]	@ (800b758 <_fstat_r+0x20>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	4611      	mov	r1, r2
 800b744:	602b      	str	r3, [r5, #0]
 800b746:	f000 fbd9 	bl	800befc <_fstat>
 800b74a:	1c43      	adds	r3, r0, #1
 800b74c:	d102      	bne.n	800b754 <_fstat_r+0x1c>
 800b74e:	682b      	ldr	r3, [r5, #0]
 800b750:	b103      	cbz	r3, 800b754 <_fstat_r+0x1c>
 800b752:	6023      	str	r3, [r4, #0]
 800b754:	bd38      	pop	{r3, r4, r5, pc}
 800b756:	bf00      	nop
 800b758:	20018730 	.word	0x20018730

0800b75c <_isatty_r>:
 800b75c:	b538      	push	{r3, r4, r5, lr}
 800b75e:	4d06      	ldr	r5, [pc, #24]	@ (800b778 <_isatty_r+0x1c>)
 800b760:	2300      	movs	r3, #0
 800b762:	4604      	mov	r4, r0
 800b764:	4608      	mov	r0, r1
 800b766:	602b      	str	r3, [r5, #0]
 800b768:	f000 fbd8 	bl	800bf1c <_isatty>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_isatty_r+0x1a>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_isatty_r+0x1a>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	20018730 	.word	0x20018730

0800b77c <_lseek_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d07      	ldr	r5, [pc, #28]	@ (800b79c <_lseek_r+0x20>)
 800b780:	4604      	mov	r4, r0
 800b782:	4608      	mov	r0, r1
 800b784:	4611      	mov	r1, r2
 800b786:	2200      	movs	r2, #0
 800b788:	602a      	str	r2, [r5, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	f000 fbd6 	bl	800bf3c <_lseek>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d102      	bne.n	800b79a <_lseek_r+0x1e>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b103      	cbz	r3, 800b79a <_lseek_r+0x1e>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	20018730 	.word	0x20018730

0800b7a0 <_read_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d07      	ldr	r5, [pc, #28]	@ (800b7c0 <_read_r+0x20>)
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	602a      	str	r2, [r5, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f000 fbcc 	bl	800bf4c <_read>
 800b7b4:	1c43      	adds	r3, r0, #1
 800b7b6:	d102      	bne.n	800b7be <_read_r+0x1e>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	b103      	cbz	r3, 800b7be <_read_r+0x1e>
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	bd38      	pop	{r3, r4, r5, pc}
 800b7c0:	20018730 	.word	0x20018730

0800b7c4 <_write_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4d07      	ldr	r5, [pc, #28]	@ (800b7e4 <_write_r+0x20>)
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	f000 fbc2 	bl	800bf5c <_write>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d102      	bne.n	800b7e2 <_write_r+0x1e>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	b103      	cbz	r3, 800b7e2 <_write_r+0x1e>
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	bd38      	pop	{r3, r4, r5, pc}
 800b7e4:	20018730 	.word	0x20018730

0800b7e8 <__assert_func>:
 800b7e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7ea:	4614      	mov	r4, r2
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	4b09      	ldr	r3, [pc, #36]	@ (800b814 <__assert_func+0x2c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	68d8      	ldr	r0, [r3, #12]
 800b7f6:	b954      	cbnz	r4, 800b80e <__assert_func+0x26>
 800b7f8:	4b07      	ldr	r3, [pc, #28]	@ (800b818 <__assert_func+0x30>)
 800b7fa:	461c      	mov	r4, r3
 800b7fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b800:	9100      	str	r1, [sp, #0]
 800b802:	462b      	mov	r3, r5
 800b804:	4905      	ldr	r1, [pc, #20]	@ (800b81c <__assert_func+0x34>)
 800b806:	f000 f833 	bl	800b870 <fiprintf>
 800b80a:	f000 f850 	bl	800b8ae <abort>
 800b80e:	4b04      	ldr	r3, [pc, #16]	@ (800b820 <__assert_func+0x38>)
 800b810:	e7f4      	b.n	800b7fc <__assert_func+0x14>
 800b812:	bf00      	nop
 800b814:	2000095c 	.word	0x2000095c
 800b818:	0803c4b6 	.word	0x0803c4b6
 800b81c:	0803c488 	.word	0x0803c488
 800b820:	0803c47b 	.word	0x0803c47b

0800b824 <_calloc_r>:
 800b824:	b570      	push	{r4, r5, r6, lr}
 800b826:	fba1 5402 	umull	r5, r4, r1, r2
 800b82a:	b93c      	cbnz	r4, 800b83c <_calloc_r+0x18>
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7fd fe8f 	bl	8009550 <_malloc_r>
 800b832:	4606      	mov	r6, r0
 800b834:	b928      	cbnz	r0, 800b842 <_calloc_r+0x1e>
 800b836:	2600      	movs	r6, #0
 800b838:	4630      	mov	r0, r6
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	220c      	movs	r2, #12
 800b83e:	6002      	str	r2, [r0, #0]
 800b840:	e7f9      	b.n	800b836 <_calloc_r+0x12>
 800b842:	462a      	mov	r2, r5
 800b844:	4621      	mov	r1, r4
 800b846:	f7fe f9cf 	bl	8009be8 <memset>
 800b84a:	e7f5      	b.n	800b838 <_calloc_r+0x14>

0800b84c <__ascii_mbtowc>:
 800b84c:	b082      	sub	sp, #8
 800b84e:	b901      	cbnz	r1, 800b852 <__ascii_mbtowc+0x6>
 800b850:	a901      	add	r1, sp, #4
 800b852:	b142      	cbz	r2, 800b866 <__ascii_mbtowc+0x1a>
 800b854:	b14b      	cbz	r3, 800b86a <__ascii_mbtowc+0x1e>
 800b856:	7813      	ldrb	r3, [r2, #0]
 800b858:	600b      	str	r3, [r1, #0]
 800b85a:	7812      	ldrb	r2, [r2, #0]
 800b85c:	1e10      	subs	r0, r2, #0
 800b85e:	bf18      	it	ne
 800b860:	2001      	movne	r0, #1
 800b862:	b002      	add	sp, #8
 800b864:	4770      	bx	lr
 800b866:	4610      	mov	r0, r2
 800b868:	e7fb      	b.n	800b862 <__ascii_mbtowc+0x16>
 800b86a:	f06f 0001 	mvn.w	r0, #1
 800b86e:	e7f8      	b.n	800b862 <__ascii_mbtowc+0x16>

0800b870 <fiprintf>:
 800b870:	b40e      	push	{r1, r2, r3}
 800b872:	b503      	push	{r0, r1, lr}
 800b874:	4601      	mov	r1, r0
 800b876:	ab03      	add	r3, sp, #12
 800b878:	4805      	ldr	r0, [pc, #20]	@ (800b890 <fiprintf+0x20>)
 800b87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b87e:	6800      	ldr	r0, [r0, #0]
 800b880:	9301      	str	r3, [sp, #4]
 800b882:	f7ff f8c9 	bl	800aa18 <_vfiprintf_r>
 800b886:	b002      	add	sp, #8
 800b888:	f85d eb04 	ldr.w	lr, [sp], #4
 800b88c:	b003      	add	sp, #12
 800b88e:	4770      	bx	lr
 800b890:	2000095c 	.word	0x2000095c

0800b894 <__ascii_wctomb>:
 800b894:	4603      	mov	r3, r0
 800b896:	4608      	mov	r0, r1
 800b898:	b141      	cbz	r1, 800b8ac <__ascii_wctomb+0x18>
 800b89a:	2aff      	cmp	r2, #255	@ 0xff
 800b89c:	d904      	bls.n	800b8a8 <__ascii_wctomb+0x14>
 800b89e:	228a      	movs	r2, #138	@ 0x8a
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8a6:	4770      	bx	lr
 800b8a8:	700a      	strb	r2, [r1, #0]
 800b8aa:	2001      	movs	r0, #1
 800b8ac:	4770      	bx	lr

0800b8ae <abort>:
 800b8ae:	b508      	push	{r3, lr}
 800b8b0:	2006      	movs	r0, #6
 800b8b2:	f000 f82b 	bl	800b90c <raise>
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	f000 fb58 	bl	800bf6c <_exit>

0800b8bc <_raise_r>:
 800b8bc:	291f      	cmp	r1, #31
 800b8be:	b538      	push	{r3, r4, r5, lr}
 800b8c0:	4605      	mov	r5, r0
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	d904      	bls.n	800b8d0 <_raise_r+0x14>
 800b8c6:	2316      	movs	r3, #22
 800b8c8:	6003      	str	r3, [r0, #0]
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8ce:	bd38      	pop	{r3, r4, r5, pc}
 800b8d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b8d2:	b112      	cbz	r2, 800b8da <_raise_r+0x1e>
 800b8d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8d8:	b94b      	cbnz	r3, 800b8ee <_raise_r+0x32>
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f000 f830 	bl	800b940 <_getpid_r>
 800b8e0:	4622      	mov	r2, r4
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ea:	f000 b817 	b.w	800b91c <_kill_r>
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d00a      	beq.n	800b908 <_raise_r+0x4c>
 800b8f2:	1c59      	adds	r1, r3, #1
 800b8f4:	d103      	bne.n	800b8fe <_raise_r+0x42>
 800b8f6:	2316      	movs	r3, #22
 800b8f8:	6003      	str	r3, [r0, #0]
 800b8fa:	2001      	movs	r0, #1
 800b8fc:	e7e7      	b.n	800b8ce <_raise_r+0x12>
 800b8fe:	2100      	movs	r1, #0
 800b900:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b904:	4620      	mov	r0, r4
 800b906:	4798      	blx	r3
 800b908:	2000      	movs	r0, #0
 800b90a:	e7e0      	b.n	800b8ce <_raise_r+0x12>

0800b90c <raise>:
 800b90c:	4b02      	ldr	r3, [pc, #8]	@ (800b918 <raise+0xc>)
 800b90e:	4601      	mov	r1, r0
 800b910:	6818      	ldr	r0, [r3, #0]
 800b912:	f7ff bfd3 	b.w	800b8bc <_raise_r>
 800b916:	bf00      	nop
 800b918:	2000095c 	.word	0x2000095c

0800b91c <_kill_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d07      	ldr	r5, [pc, #28]	@ (800b93c <_kill_r+0x20>)
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	4611      	mov	r1, r2
 800b928:	602b      	str	r3, [r5, #0]
 800b92a:	f000 faff 	bl	800bf2c <_kill>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	d102      	bne.n	800b938 <_kill_r+0x1c>
 800b932:	682b      	ldr	r3, [r5, #0]
 800b934:	b103      	cbz	r3, 800b938 <_kill_r+0x1c>
 800b936:	6023      	str	r3, [r4, #0]
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	bf00      	nop
 800b93c:	20018730 	.word	0x20018730

0800b940 <_getpid_r>:
 800b940:	f000 bae4 	b.w	800bf0c <_getpid>

0800b944 <expf>:
 800b944:	b508      	push	{r3, lr}
 800b946:	ed2d 8b02 	vpush	{d8}
 800b94a:	eef0 8a40 	vmov.f32	s17, s0
 800b94e:	f000 f88b 	bl	800ba68 <__ieee754_expf>
 800b952:	eeb0 8a40 	vmov.f32	s16, s0
 800b956:	eeb0 0a68 	vmov.f32	s0, s17
 800b95a:	f000 f875 	bl	800ba48 <finitef>
 800b95e:	b160      	cbz	r0, 800b97a <expf+0x36>
 800b960:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800b9a0 <expf+0x5c>
 800b964:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96c:	dd0a      	ble.n	800b984 <expf+0x40>
 800b96e:	f7fe f957 	bl	8009c20 <__errno>
 800b972:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800b9a4 <expf+0x60>
 800b976:	2322      	movs	r3, #34	@ 0x22
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	eeb0 0a48 	vmov.f32	s0, s16
 800b97e:	ecbd 8b02 	vpop	{d8}
 800b982:	bd08      	pop	{r3, pc}
 800b984:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b9a8 <expf+0x64>
 800b988:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b990:	d5f3      	bpl.n	800b97a <expf+0x36>
 800b992:	f7fe f945 	bl	8009c20 <__errno>
 800b996:	2322      	movs	r3, #34	@ 0x22
 800b998:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800b9ac <expf+0x68>
 800b99c:	6003      	str	r3, [r0, #0]
 800b99e:	e7ec      	b.n	800b97a <expf+0x36>
 800b9a0:	42b17217 	.word	0x42b17217
 800b9a4:	7f800000 	.word	0x7f800000
 800b9a8:	c2cff1b5 	.word	0xc2cff1b5
 800b9ac:	00000000 	.word	0x00000000

0800b9b0 <log10f>:
 800b9b0:	b508      	push	{r3, lr}
 800b9b2:	ed2d 8b02 	vpush	{d8}
 800b9b6:	eeb0 8a40 	vmov.f32	s16, s0
 800b9ba:	f000 fa19 	bl	800bdf0 <__ieee754_log10f>
 800b9be:	eeb4 8a48 	vcmp.f32	s16, s16
 800b9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c6:	d60f      	bvs.n	800b9e8 <log10f+0x38>
 800b9c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9d0:	d80a      	bhi.n	800b9e8 <log10f+0x38>
 800b9d2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9da:	d108      	bne.n	800b9ee <log10f+0x3e>
 800b9dc:	f7fe f920 	bl	8009c20 <__errno>
 800b9e0:	2322      	movs	r3, #34	@ 0x22
 800b9e2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ba04 <log10f+0x54>
 800b9e6:	6003      	str	r3, [r0, #0]
 800b9e8:	ecbd 8b02 	vpop	{d8}
 800b9ec:	bd08      	pop	{r3, pc}
 800b9ee:	f7fe f917 	bl	8009c20 <__errno>
 800b9f2:	ecbd 8b02 	vpop	{d8}
 800b9f6:	2321      	movs	r3, #33	@ 0x21
 800b9f8:	6003      	str	r3, [r0, #0]
 800b9fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b9fe:	4802      	ldr	r0, [pc, #8]	@ (800ba08 <log10f+0x58>)
 800ba00:	f000 b82c 	b.w	800ba5c <nanf>
 800ba04:	ff800000 	.word	0xff800000
 800ba08:	0803c4b6 	.word	0x0803c4b6

0800ba0c <sqrtf>:
 800ba0c:	b508      	push	{r3, lr}
 800ba0e:	ed2d 8b02 	vpush	{d8}
 800ba12:	eeb0 8a40 	vmov.f32	s16, s0
 800ba16:	f000 f8f5 	bl	800bc04 <__ieee754_sqrtf>
 800ba1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba22:	d60c      	bvs.n	800ba3e <sqrtf+0x32>
 800ba24:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ba44 <sqrtf+0x38>
 800ba28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ba2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba30:	d505      	bpl.n	800ba3e <sqrtf+0x32>
 800ba32:	f7fe f8f5 	bl	8009c20 <__errno>
 800ba36:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ba3a:	2321      	movs	r3, #33	@ 0x21
 800ba3c:	6003      	str	r3, [r0, #0]
 800ba3e:	ecbd 8b02 	vpop	{d8}
 800ba42:	bd08      	pop	{r3, pc}
 800ba44:	00000000 	.word	0x00000000

0800ba48 <finitef>:
 800ba48:	ee10 3a10 	vmov	r3, s0
 800ba4c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ba50:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ba54:	bfac      	ite	ge
 800ba56:	2000      	movge	r0, #0
 800ba58:	2001      	movlt	r0, #1
 800ba5a:	4770      	bx	lr

0800ba5c <nanf>:
 800ba5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ba64 <nanf+0x8>
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	7fc00000 	.word	0x7fc00000

0800ba68 <__ieee754_expf>:
 800ba68:	ee10 2a10 	vmov	r2, s0
 800ba6c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800ba70:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ba74:	d902      	bls.n	800ba7c <__ieee754_expf+0x14>
 800ba76:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ba7a:	4770      	bx	lr
 800ba7c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ba80:	d106      	bne.n	800ba90 <__ieee754_expf+0x28>
 800ba82:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800bbbc <__ieee754_expf+0x154>
 800ba86:	2900      	cmp	r1, #0
 800ba88:	bf18      	it	ne
 800ba8a:	eeb0 0a67 	vmovne.f32	s0, s15
 800ba8e:	4770      	bx	lr
 800ba90:	484b      	ldr	r0, [pc, #300]	@ (800bbc0 <__ieee754_expf+0x158>)
 800ba92:	4282      	cmp	r2, r0
 800ba94:	dd02      	ble.n	800ba9c <__ieee754_expf+0x34>
 800ba96:	2000      	movs	r0, #0
 800ba98:	f000 ba22 	b.w	800bee0 <__math_oflowf>
 800ba9c:	2a00      	cmp	r2, #0
 800ba9e:	da05      	bge.n	800baac <__ieee754_expf+0x44>
 800baa0:	4a48      	ldr	r2, [pc, #288]	@ (800bbc4 <__ieee754_expf+0x15c>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d902      	bls.n	800baac <__ieee754_expf+0x44>
 800baa6:	2000      	movs	r0, #0
 800baa8:	f000 ba14 	b.w	800bed4 <__math_uflowf>
 800baac:	4a46      	ldr	r2, [pc, #280]	@ (800bbc8 <__ieee754_expf+0x160>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800bab4:	d952      	bls.n	800bb5c <__ieee754_expf+0xf4>
 800bab6:	4a45      	ldr	r2, [pc, #276]	@ (800bbcc <__ieee754_expf+0x164>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800babe:	d834      	bhi.n	800bb2a <__ieee754_expf+0xc2>
 800bac0:	4b43      	ldr	r3, [pc, #268]	@ (800bbd0 <__ieee754_expf+0x168>)
 800bac2:	4413      	add	r3, r2
 800bac4:	ed93 7a00 	vldr	s14, [r3]
 800bac8:	4b42      	ldr	r3, [pc, #264]	@ (800bbd4 <__ieee754_expf+0x16c>)
 800baca:	4413      	add	r3, r2
 800bacc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bad0:	f1c1 0201 	rsb	r2, r1, #1
 800bad4:	edd3 7a00 	vldr	s15, [r3]
 800bad8:	1a52      	subs	r2, r2, r1
 800bada:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bade:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bae2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800bbd8 <__ieee754_expf+0x170>
 800bae6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bbdc <__ieee754_expf+0x174>
 800baea:	eee6 6a05 	vfma.f32	s13, s12, s10
 800baee:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800bbe0 <__ieee754_expf+0x178>
 800baf2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800baf6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bbe4 <__ieee754_expf+0x17c>
 800bafa:	eee5 6a06 	vfma.f32	s13, s10, s12
 800bafe:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800bbe8 <__ieee754_expf+0x180>
 800bb02:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bb06:	eef0 6a40 	vmov.f32	s13, s0
 800bb0a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800bb0e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800bb12:	ee20 5a26 	vmul.f32	s10, s0, s13
 800bb16:	bb92      	cbnz	r2, 800bb7e <__ieee754_expf+0x116>
 800bb18:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800bb1c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bb20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bb24:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800bb28:	4770      	bx	lr
 800bb2a:	4b30      	ldr	r3, [pc, #192]	@ (800bbec <__ieee754_expf+0x184>)
 800bb2c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800bbf0 <__ieee754_expf+0x188>
 800bb30:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800bbf4 <__ieee754_expf+0x18c>
 800bb34:	4413      	add	r3, r2
 800bb36:	edd3 7a00 	vldr	s15, [r3]
 800bb3a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb3e:	eeb0 7a40 	vmov.f32	s14, s0
 800bb42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb46:	ee17 2a90 	vmov	r2, s15
 800bb4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb4e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bb52:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800bbf8 <__ieee754_expf+0x190>
 800bb56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb5a:	e7be      	b.n	800bada <__ieee754_expf+0x72>
 800bb5c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800bb60:	d20b      	bcs.n	800bb7a <__ieee754_expf+0x112>
 800bb62:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bbfc <__ieee754_expf+0x194>
 800bb66:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bb6a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800bb6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb72:	dd02      	ble.n	800bb7a <__ieee754_expf+0x112>
 800bb74:	ee30 0a25 	vadd.f32	s0, s0, s11
 800bb78:	4770      	bx	lr
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	e7af      	b.n	800bade <__ieee754_expf+0x76>
 800bb7e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800bb82:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800bb86:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800bb8a:	bfb8      	it	lt
 800bb8c:	3264      	addlt	r2, #100	@ 0x64
 800bb8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb96:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bb9a:	ee17 3a90 	vmov	r3, s15
 800bb9e:	bfab      	itete	ge
 800bba0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bba4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bba8:	ee00 3a10 	vmovge	s0, r3
 800bbac:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800bc00 <__ieee754_expf+0x198>
 800bbb0:	bfbc      	itt	lt
 800bbb2:	ee00 3a10 	vmovlt	s0, r3
 800bbb6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bbba:	4770      	bx	lr
 800bbbc:	00000000 	.word	0x00000000
 800bbc0:	42b17217 	.word	0x42b17217
 800bbc4:	42cff1b5 	.word	0x42cff1b5
 800bbc8:	3eb17218 	.word	0x3eb17218
 800bbcc:	3f851591 	.word	0x3f851591
 800bbd0:	0803c4c0 	.word	0x0803c4c0
 800bbd4:	0803c4b8 	.word	0x0803c4b8
 800bbd8:	3331bb4c 	.word	0x3331bb4c
 800bbdc:	b5ddea0e 	.word	0xb5ddea0e
 800bbe0:	388ab355 	.word	0x388ab355
 800bbe4:	bb360b61 	.word	0xbb360b61
 800bbe8:	3e2aaaab 	.word	0x3e2aaaab
 800bbec:	0803c4c8 	.word	0x0803c4c8
 800bbf0:	3fb8aa3b 	.word	0x3fb8aa3b
 800bbf4:	3f317180 	.word	0x3f317180
 800bbf8:	3717f7d1 	.word	0x3717f7d1
 800bbfc:	7149f2ca 	.word	0x7149f2ca
 800bc00:	0d800000 	.word	0x0d800000

0800bc04 <__ieee754_sqrtf>:
 800bc04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bc08:	4770      	bx	lr
	...

0800bc0c <__ieee754_logf>:
 800bc0c:	ee10 3a10 	vmov	r3, s0
 800bc10:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bc14:	d106      	bne.n	800bc24 <__ieee754_logf+0x18>
 800bc16:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800bdb0 <__ieee754_logf+0x1a4>
 800bc1a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800bdb4 <__ieee754_logf+0x1a8>
 800bc1e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bc22:	4770      	bx	lr
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	461a      	mov	r2, r3
 800bc28:	da02      	bge.n	800bc30 <__ieee754_logf+0x24>
 800bc2a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bc2e:	e7f4      	b.n	800bc1a <__ieee754_logf+0xe>
 800bc30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc34:	db02      	blt.n	800bc3c <__ieee754_logf+0x30>
 800bc36:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc3a:	4770      	bx	lr
 800bc3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc40:	bfb8      	it	lt
 800bc42:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800bdb8 <__ieee754_logf+0x1ac>
 800bc46:	485d      	ldr	r0, [pc, #372]	@ (800bdbc <__ieee754_logf+0x1b0>)
 800bc48:	bfbe      	ittt	lt
 800bc4a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800bc4e:	f06f 0118 	mvnlt.w	r1, #24
 800bc52:	ee17 2a90 	vmovlt	r2, s15
 800bc56:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800bc5a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800bc5e:	4410      	add	r0, r2
 800bc60:	bfa8      	it	ge
 800bc62:	2100      	movge	r1, #0
 800bc64:	3b7f      	subs	r3, #127	@ 0x7f
 800bc66:	440b      	add	r3, r1
 800bc68:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800bc6c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800bc70:	4311      	orrs	r1, r2
 800bc72:	ee00 1a10 	vmov	s0, r1
 800bc76:	4952      	ldr	r1, [pc, #328]	@ (800bdc0 <__ieee754_logf+0x1b4>)
 800bc78:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800bc7c:	f102 000f 	add.w	r0, r2, #15
 800bc80:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bc84:	4001      	ands	r1, r0
 800bc86:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc8a:	bb89      	cbnz	r1, 800bcf0 <__ieee754_logf+0xe4>
 800bc8c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	d10f      	bne.n	800bcb6 <__ieee754_logf+0xaa>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 8087 	beq.w	800bdaa <__ieee754_logf+0x19e>
 800bc9c:	ee07 3a90 	vmov	s15, r3
 800bca0:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800bdc4 <__ieee754_logf+0x1b8>
 800bca4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800bdc8 <__ieee754_logf+0x1bc>
 800bca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcac:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bcb0:	eea7 0a87 	vfma.f32	s0, s15, s14
 800bcb4:	4770      	bx	lr
 800bcb6:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800bdcc <__ieee754_logf+0x1c0>
 800bcba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bcbe:	eee0 7a66 	vfms.f32	s15, s0, s13
 800bcc2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bcc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcca:	b913      	cbnz	r3, 800bcd2 <__ieee754_logf+0xc6>
 800bccc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bcd0:	4770      	bx	lr
 800bcd2:	ee07 3a90 	vmov	s15, r3
 800bcd6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bdc4 <__ieee754_logf+0x1b8>
 800bcda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcde:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bce2:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bce6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800bdc8 <__ieee754_logf+0x1bc>
 800bcea:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800bcee:	4770      	bx	lr
 800bcf0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800bcf4:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bcf8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800bdd0 <__ieee754_logf+0x1c4>
 800bcfc:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800bdd4 <__ieee754_logf+0x1c8>
 800bd00:	4935      	ldr	r1, [pc, #212]	@ (800bdd8 <__ieee754_logf+0x1cc>)
 800bd02:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800bd06:	4411      	add	r1, r2
 800bd08:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800bd0c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800bd10:	430a      	orrs	r2, r1
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	ee26 5a06 	vmul.f32	s10, s12, s12
 800bd1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800bd20:	ee25 7a05 	vmul.f32	s14, s10, s10
 800bd24:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800bddc <__ieee754_logf+0x1d0>
 800bd28:	eee7 7a25 	vfma.f32	s15, s14, s11
 800bd2c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800bde0 <__ieee754_logf+0x1d4>
 800bd30:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bd34:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800bde4 <__ieee754_logf+0x1d8>
 800bd38:	eee7 7a24 	vfma.f32	s15, s14, s9
 800bd3c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800bde8 <__ieee754_logf+0x1dc>
 800bd40:	eee7 4a87 	vfma.f32	s9, s15, s14
 800bd44:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800bdec <__ieee754_logf+0x1e0>
 800bd48:	eee4 7a87 	vfma.f32	s15, s9, s14
 800bd4c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bd50:	eee5 7a87 	vfma.f32	s15, s11, s14
 800bd54:	dd1a      	ble.n	800bd8c <__ieee754_logf+0x180>
 800bd56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800bd5a:	ee20 7a07 	vmul.f32	s14, s0, s14
 800bd5e:	ee27 7a00 	vmul.f32	s14, s14, s0
 800bd62:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd66:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bd6a:	b913      	cbnz	r3, 800bd72 <__ieee754_logf+0x166>
 800bd6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd70:	e7ac      	b.n	800bccc <__ieee754_logf+0xc0>
 800bd72:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800bdc4 <__ieee754_logf+0x1b8>
 800bd76:	eee6 7a86 	vfma.f32	s15, s13, s12
 800bd7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bd7e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800bd82:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800bdc8 <__ieee754_logf+0x1bc>
 800bd86:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800bd8a:	4770      	bx	lr
 800bd8c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bd90:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bd94:	b913      	cbnz	r3, 800bd9c <__ieee754_logf+0x190>
 800bd96:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd9a:	4770      	bx	lr
 800bd9c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800bdc4 <__ieee754_logf+0x1b8>
 800bda0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bda4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bda8:	e7eb      	b.n	800bd82 <__ieee754_logf+0x176>
 800bdaa:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800bdb4 <__ieee754_logf+0x1a8>
 800bdae:	4770      	bx	lr
 800bdb0:	cc000000 	.word	0xcc000000
 800bdb4:	00000000 	.word	0x00000000
 800bdb8:	4c000000 	.word	0x4c000000
 800bdbc:	004afb20 	.word	0x004afb20
 800bdc0:	007ffff0 	.word	0x007ffff0
 800bdc4:	3717f7d1 	.word	0x3717f7d1
 800bdc8:	3f317180 	.word	0x3f317180
 800bdcc:	3eaaaaab 	.word	0x3eaaaaab
 800bdd0:	3e1cd04f 	.word	0x3e1cd04f
 800bdd4:	3e178897 	.word	0x3e178897
 800bdd8:	ffcf5c30 	.word	0xffcf5c30
 800bddc:	3e638e29 	.word	0x3e638e29
 800bde0:	3ecccccd 	.word	0x3ecccccd
 800bde4:	3e3a3325 	.word	0x3e3a3325
 800bde8:	3e924925 	.word	0x3e924925
 800bdec:	3f2aaaab 	.word	0x3f2aaaab

0800bdf0 <__ieee754_log10f>:
 800bdf0:	b508      	push	{r3, lr}
 800bdf2:	ee10 3a10 	vmov	r3, s0
 800bdf6:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bdfa:	ed2d 8b02 	vpush	{d8}
 800bdfe:	d108      	bne.n	800be12 <__ieee754_log10f+0x22>
 800be00:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800be88 <__ieee754_log10f+0x98>
 800be04:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800be8c <__ieee754_log10f+0x9c>
 800be08:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800be0c:	ecbd 8b02 	vpop	{d8}
 800be10:	bd08      	pop	{r3, pc}
 800be12:	2b00      	cmp	r3, #0
 800be14:	461a      	mov	r2, r3
 800be16:	da02      	bge.n	800be1e <__ieee754_log10f+0x2e>
 800be18:	ee30 7a40 	vsub.f32	s14, s0, s0
 800be1c:	e7f2      	b.n	800be04 <__ieee754_log10f+0x14>
 800be1e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800be22:	db02      	blt.n	800be2a <__ieee754_log10f+0x3a>
 800be24:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be28:	e7f0      	b.n	800be0c <__ieee754_log10f+0x1c>
 800be2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be2e:	bfbf      	itttt	lt
 800be30:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800be90 <__ieee754_log10f+0xa0>
 800be34:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800be38:	f06f 0118 	mvnlt.w	r1, #24
 800be3c:	ee17 2a90 	vmovlt	r2, s15
 800be40:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800be44:	bfa8      	it	ge
 800be46:	2100      	movge	r1, #0
 800be48:	3b7f      	subs	r3, #127	@ 0x7f
 800be4a:	440b      	add	r3, r1
 800be4c:	0fd9      	lsrs	r1, r3, #31
 800be4e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800be5a:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800be5e:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800be62:	ee00 3a10 	vmov	s0, r3
 800be66:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800be6a:	f7ff fecf 	bl	800bc0c <__ieee754_logf>
 800be6e:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800be94 <__ieee754_log10f+0xa4>
 800be72:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be76:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800be98 <__ieee754_log10f+0xa8>
 800be7a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800be7e:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800be9c <__ieee754_log10f+0xac>
 800be82:	eea8 0a27 	vfma.f32	s0, s16, s15
 800be86:	e7c1      	b.n	800be0c <__ieee754_log10f+0x1c>
 800be88:	cc000000 	.word	0xcc000000
 800be8c:	00000000 	.word	0x00000000
 800be90:	4c000000 	.word	0x4c000000
 800be94:	3ede5bd9 	.word	0x3ede5bd9
 800be98:	355427db 	.word	0x355427db
 800be9c:	3e9a2080 	.word	0x3e9a2080

0800bea0 <with_errnof>:
 800bea0:	b510      	push	{r4, lr}
 800bea2:	ed2d 8b02 	vpush	{d8}
 800bea6:	eeb0 8a40 	vmov.f32	s16, s0
 800beaa:	4604      	mov	r4, r0
 800beac:	f7fd feb8 	bl	8009c20 <__errno>
 800beb0:	eeb0 0a48 	vmov.f32	s0, s16
 800beb4:	ecbd 8b02 	vpop	{d8}
 800beb8:	6004      	str	r4, [r0, #0]
 800beba:	bd10      	pop	{r4, pc}

0800bebc <xflowf>:
 800bebc:	b130      	cbz	r0, 800becc <xflowf+0x10>
 800bebe:	eef1 7a40 	vneg.f32	s15, s0
 800bec2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bec6:	2022      	movs	r0, #34	@ 0x22
 800bec8:	f7ff bfea 	b.w	800bea0 <with_errnof>
 800becc:	eef0 7a40 	vmov.f32	s15, s0
 800bed0:	e7f7      	b.n	800bec2 <xflowf+0x6>
	...

0800bed4 <__math_uflowf>:
 800bed4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bedc <__math_uflowf+0x8>
 800bed8:	f7ff bff0 	b.w	800bebc <xflowf>
 800bedc:	10000000 	.word	0x10000000

0800bee0 <__math_oflowf>:
 800bee0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bee8 <__math_oflowf+0x8>
 800bee4:	f7ff bfea 	b.w	800bebc <xflowf>
 800bee8:	70000000 	.word	0x70000000

0800beec <_close>:
 800beec:	4b02      	ldr	r3, [pc, #8]	@ (800bef8 <_close+0xc>)
 800beee:	2258      	movs	r2, #88	@ 0x58
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bef6:	4770      	bx	lr
 800bef8:	20018730 	.word	0x20018730

0800befc <_fstat>:
 800befc:	4b02      	ldr	r3, [pc, #8]	@ (800bf08 <_fstat+0xc>)
 800befe:	2258      	movs	r2, #88	@ 0x58
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf06:	4770      	bx	lr
 800bf08:	20018730 	.word	0x20018730

0800bf0c <_getpid>:
 800bf0c:	4b02      	ldr	r3, [pc, #8]	@ (800bf18 <_getpid+0xc>)
 800bf0e:	2258      	movs	r2, #88	@ 0x58
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf16:	4770      	bx	lr
 800bf18:	20018730 	.word	0x20018730

0800bf1c <_isatty>:
 800bf1c:	4b02      	ldr	r3, [pc, #8]	@ (800bf28 <_isatty+0xc>)
 800bf1e:	2258      	movs	r2, #88	@ 0x58
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	2000      	movs	r0, #0
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	20018730 	.word	0x20018730

0800bf2c <_kill>:
 800bf2c:	4b02      	ldr	r3, [pc, #8]	@ (800bf38 <_kill+0xc>)
 800bf2e:	2258      	movs	r2, #88	@ 0x58
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf36:	4770      	bx	lr
 800bf38:	20018730 	.word	0x20018730

0800bf3c <_lseek>:
 800bf3c:	4b02      	ldr	r3, [pc, #8]	@ (800bf48 <_lseek+0xc>)
 800bf3e:	2258      	movs	r2, #88	@ 0x58
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf46:	4770      	bx	lr
 800bf48:	20018730 	.word	0x20018730

0800bf4c <_read>:
 800bf4c:	4b02      	ldr	r3, [pc, #8]	@ (800bf58 <_read+0xc>)
 800bf4e:	2258      	movs	r2, #88	@ 0x58
 800bf50:	601a      	str	r2, [r3, #0]
 800bf52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf56:	4770      	bx	lr
 800bf58:	20018730 	.word	0x20018730

0800bf5c <_write>:
 800bf5c:	4b02      	ldr	r3, [pc, #8]	@ (800bf68 <_write+0xc>)
 800bf5e:	2258      	movs	r2, #88	@ 0x58
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf66:	4770      	bx	lr
 800bf68:	20018730 	.word	0x20018730

0800bf6c <_exit>:
 800bf6c:	e7fe      	b.n	800bf6c <_exit>
	...

0800bf70 <_init>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr

0800bf7c <_fini>:
 800bf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf7e:	bf00      	nop
 800bf80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf82:	bc08      	pop	{r3}
 800bf84:	469e      	mov	lr, r3
 800bf86:	4770      	bx	lr
