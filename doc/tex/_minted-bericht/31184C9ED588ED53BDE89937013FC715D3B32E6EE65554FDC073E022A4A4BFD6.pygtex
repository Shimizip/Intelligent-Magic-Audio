\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cp}{\PYGZsh{}include}\PYG{+w}{ }\PYG{c+cpf}{\PYGZdq{}audio.h\PYGZdq{}}

\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{dma\PYGZus{}dataReady}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n+nb}{false}\PYG{p}{;}
\PYG{k+kt}{int16\PYGZus{}t}\PYG{+w}{ }\PYG{n}{dacData}\PYG{p}{[}\PYG{n}{BUFFER\PYGZus{}SIZE}\PYG{p}{];}
\PYG{k+kt}{int16\PYGZus{}t}\PYG{+w}{ }\PYG{n}{fileReadBuf}\PYG{p}{[}\PYG{n}{BUFFER\PYGZus{}SIZE\PYGZus{}INPUT}\PYG{p}{];}\PYG{+w}{ }\PYG{c+c1}{// actually for one halfBuffer, now is = BUFFER\PYGZus{}SIZE, to allow 2x playback speed}
\PYG{k}{volatile}\PYG{+w}{ }\PYG{k+kt}{int16\PYGZus{}t}\PYG{+w}{ }\PYG{o}{*}\PYG{n}{outBufPtr}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{dacData}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{];}
\PYG{k}{volatile}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{pitchChanged}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n+nb}{false}\PYG{p}{;}

\PYG{c+cp}{\PYGZsh{}define SINE\PYGZus{}TABLE\PYGZus{}SIZE 256 }\PYG{c+c1}{// Adjust the table size as needed for your accuracy/performance tradeoff}

\PYG{c+c1}{// Precomputed sine wave table}
\PYG{k+kt}{int16\PYGZus{}t}\PYG{+w}{ }\PYG{n}{sineTable}\PYG{p}{[}\PYG{n}{SINE\PYGZus{}TABLE\PYGZus{}SIZE}\PYG{p}{];}

\PYG{c+c1}{// Populate the sine wave table during initialization}
\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{initSineTable}\PYG{p}{()}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{k}{for}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{int}\PYG{+w}{ }\PYG{n}{i}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{i}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{n}{SINE\PYGZus{}TABLE\PYGZus{}SIZE}\PYG{p}{;}\PYG{+w}{ }\PYG{o}{++}\PYG{n}{i}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{sineTable}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{int16\PYGZus{}t}\PYG{p}{)(}\PYG{l+m+mi}{32767}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{n}{sin}\PYG{p}{(}\PYG{l+m+mf}{2.0}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{n}{M\PYGZus{}PI}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{n}{i}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{n}{SINE\PYGZus{}TABLE\PYGZus{}SIZE}\PYG{p}{));}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/**}
\PYG{c+cm}{ * @brief Called when the first half of the I2S buffer is transmitted.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * Updates the buffer pointer to the start of `dacData` and sets the DMA data ready flag.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * @param hi2s Pointer to the I2S handle structure.}
\PYG{c+cm}{ */}
\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{HAL\PYGZus{}I2S\PYGZus{}TxHalfCpltCallback}\PYG{p}{(}\PYG{n}{I2S\PYGZus{}HandleTypeDef}\PYG{+w}{ }\PYG{o}{*}\PYG{n}{hi2s}\PYG{p}{)\PYGZob{}}
\PYG{+w}{    }\PYG{n}{outBufPtr}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{dacData}\PYG{p}{[}\PYG{l+m+mi}{0}\PYG{p}{];}\PYG{+w}{ }\PYG{c+c1}{// set file read Buffer Pointer}
\PYG{+w}{    }\PYG{n}{dma\PYGZus{}dataReady}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n+nb}{true}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/**}
\PYG{c+cm}{ * @brief Called when the entire I2S buffer is transmitted.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * Updates the buffer pointer to the second half of `dacData` and sets the DMA data ready flag.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * @param hi2s Pointer to the I2S handle structure.}
\PYG{c+cm}{ */}
\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{HAL\PYGZus{}I2S\PYGZus{}TxCpltCallback}\PYG{p}{(}\PYG{n}{I2S\PYGZus{}HandleTypeDef}\PYG{+w}{ }\PYG{o}{*}\PYG{n}{hi2s}\PYG{p}{)\PYGZob{}}
\PYG{+w}{    }\PYG{n}{outBufPtr}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{dacData}\PYG{p}{[}\PYG{n}{HALF\PYGZus{}BUFFER\PYGZus{}SIZE}\PYG{p}{];}\PYG{+w}{ }\PYG{c+c1}{// set read Buffer Pointer to second half}
\PYG{+w}{    }\PYG{n}{dma\PYGZus{}dataReady}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n+nb}{true}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/**}
\PYG{c+cm}{ * @brief Populates half of the DAC buffer with a sine wave using a lookup table.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * The function generates a sine wave based on the provided frequency. It uses a }
\PYG{c+cm}{ * lookup table to fill the DAC buffer with sine values and manages the phase index }
\PYG{c+cm}{ * for the waveform. It waits for the DMA to be ready before updating }
\PYG{c+cm}{ * the buffer.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * @param frequency Desired frequency of the sine wave.}
\PYG{c+cm}{ */}
\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{generateSineWave}\PYG{p}{(}\PYG{k+kt}{double}\PYG{+w}{ }\PYG{n}{frequency}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{k}{static}\PYG{+w}{ }\PYG{k+kt}{uint16\PYGZus{}t}\PYG{+w}{ }\PYG{n}{phaseIndex}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{+w}{                 }\PYG{c+cm}{/**\PYGZlt{} Retains the index between function calls */}
\PYG{+w}{    }\PYG{k+kt}{double}\PYG{+w}{ }\PYG{n}{phaseIncrement}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{frequency}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{n}{SINE\PYGZus{}TABLE\PYGZus{}SIZE}\PYG{+w}{ }\PYG{o}{/}\PYG{+w}{ }\PYG{n}{I2S\PYGZus{}AUDIOFREQ\PYGZus{}44K}\PYG{p}{;}\PYG{+w}{  }
\PYG{+w}{    }\PYG{n}{HAL\PYGZus{}I2S\PYGZus{}Transmit\PYGZus{}DMA}\PYG{p}{(}\PYG{o}{\PYGZam{}}\PYG{n}{hi2s2}\PYG{p}{,}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{void}\PYG{+w}{ }\PYG{o}{*}\PYG{p}{)}\PYG{n}{dacData}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{BUFFER\PYGZus{}SIZE}\PYG{p}{);}
\PYG{+w}{    }
\PYG{+w}{    }\PYG{k}{while}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{)\PYGZob{}}
\PYG{+w}{        }\PYG{k}{if}\PYG{p}{(}\PYG{n}{dma\PYGZus{}dataReady}\PYG{p}{)\PYGZob{}}
\PYG{+w}{            }\PYG{k}{for}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{uint8\PYGZus{}t}\PYG{+w}{ }\PYG{n}{n}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{n}\PYG{+w}{ }\PYG{o}{\PYGZlt{}}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{HALF\PYGZus{}BUFFER\PYGZus{}SIZE}\PYG{p}{)}\PYG{+w}{ }\PYG{o}{\PYGZhy{}}\PYG{+w}{ }\PYG{l+m+mi}{1}\PYG{p}{;}\PYG{+w}{ }\PYG{n}{n}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{l+m+mi}{2}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{                }\PYG{c+c1}{// Lookup sine value from table}
\PYG{+w}{                }\PYG{n}{outBufPtr}\PYG{p}{[}\PYG{n}{n}\PYG{p}{]}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{sineTable}\PYG{p}{[}\PYG{n}{phaseIndex}\PYG{p}{];}
\PYG{+w}{                }
\PYG{+w}{                }\PYG{c+c1}{// Increment phase index}
\PYG{+w}{                }\PYG{n}{phaseIndex}\PYG{+w}{ }\PYG{o}{+=}\PYG{+w}{ }\PYG{n}{phaseIncrement}\PYG{p}{;}
\PYG{+w}{                }
\PYG{+w}{                }\PYG{c+c1}{// Wrap phase index if it exceeds table size}
\PYG{+w}{                }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{phaseIndex}\PYG{+w}{ }\PYG{o}{\PYGZgt{}=}\PYG{+w}{ }\PYG{n}{SINE\PYGZus{}TABLE\PYGZus{}SIZE}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{                    }\PYG{n}{phaseIndex}\PYG{+w}{ }\PYG{o}{\PYGZhy{}=}\PYG{+w}{ }\PYG{n}{SINE\PYGZus{}TABLE\PYGZus{}SIZE}\PYG{p}{;}
\PYG{+w}{                }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{p}{\PYGZcb{}}
\PYG{+w}{            }\PYG{n}{dma\PYGZus{}dataReady}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n+nb}{false}\PYG{p}{;}\PYG{+w}{   }
\PYG{+w}{        }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/**}
\PYG{c+cm}{ * @brief Fills half of the buffer with audio samples from an SD file.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * The function reads audio samples from an SD card file into a buffer. If the `pitched` }
\PYG{c+cm}{ * parameter is true, it adjusts the number of samples to account for pitch shifting. }
\PYG{c+cm}{ * It ensures the number of samples is even and reads the data into `fileReadBuf`.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * @param player Pointer to a `WavPlayer` structure containing file information and pitch factor.}
\PYG{c+cm}{ * @param pitched Flag indicating whether pitch shifting should be applied.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * @return The number of bytes actually read from the file.}
\PYG{c+cm}{ */}
\PYG{k+kt}{uint16\PYGZus{}t}\PYG{+w}{ }\PYG{n+nf}{fillHalfBufferFromSD}\PYG{p}{(}\PYG{n}{WavPlayer}\PYG{+w}{ }\PYG{o}{*}\PYG{n}{player}\PYG{p}{,}\PYG{+w}{ }\PYG{k+kt}{bool}\PYG{+w}{ }\PYG{n}{pitched}\PYG{p}{)\PYGZob{}}
\PYG{+w}{    }\PYG{n}{UINT}\PYG{+w}{ }\PYG{n}{bytesRead}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{l+m+mi}{0}\PYG{p}{;}
\PYG{+w}{    }\PYG{k+kt}{uint32\PYGZus{}t}\PYG{+w}{ }\PYG{n}{samplesNeeded}\PYG{p}{;}
\PYG{+w}{    }
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{pitched}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{k+kt}{float}\PYG{+w}{ }\PYG{n}{tempSamplesNeeded}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{HALF\PYGZus{}BUFFER\PYGZus{}SIZE}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{n}{player}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{pitchFactor}\PYG{p}{);}
\PYG{+w}{        }\PYG{n}{samplesNeeded}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{uint32\PYGZus{}t}\PYG{p}{)}\PYG{+w}{ }\PYG{n}{ceilf}\PYG{p}{(}\PYG{n}{tempSamplesNeeded}\PYG{p}{);}
\PYG{+w}{        }\PYG{n}{samplesNeeded}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{samplesNeeded}\PYG{+w}{ }\PYG{o}{+}\PYG{+w}{ }\PYG{l+m+mi}{1}\PYG{p}{)}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{+w}{ }\PYG{o}{\PYGZti{}}\PYG{l+m+mi}{1}\PYG{p}{;}\PYG{+w}{ }\PYG{c+c1}{// Ensure it\PYGZsq{}s an even number}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}\PYG{+w}{ }\PYG{k}{else}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{n}{samplesNeeded}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{HALF\PYGZus{}BUFFER\PYGZus{}SIZE}\PYG{p}{;}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }
\PYG{+w}{    }\PYG{k+kt}{uint32\PYGZus{}t}\PYG{+w}{ }\PYG{n}{bytesNeeded}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{samplesNeeded}\PYG{+w}{ }\PYG{o}{*}\PYG{+w}{ }\PYG{k}{sizeof}\PYG{p}{(}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{p}{);}
\PYG{+w}{    }
\PYG{+w}{    }\PYG{c+c1}{// Fill half of the buffer with 16\PYGZhy{}bit samples}
\PYG{+w}{    }\PYG{k}{if}\PYG{+w}{ }\PYG{p}{(}\PYG{n}{f\PYGZus{}read}\PYG{p}{(}\PYG{n}{player}\PYG{o}{\PYGZhy{}\PYGZgt{}}\PYG{n}{file}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{fileReadBuf}\PYG{p}{,}\PYG{+w}{ }\PYG{n}{bytesNeeded}\PYG{p}{,}\PYG{+w}{ }\PYG{o}{\PYGZam{}}\PYG{n}{bytesRead}\PYG{p}{)}\PYG{+w}{ }\PYG{o}{!=}\PYG{+w}{ }\PYG{n}{FR\PYGZus{}OK}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{        }\PYG{c+c1}{// Error handling}
\PYG{+w}{        }\PYG{k}{while}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{p}{);}
\PYG{+w}{    }\PYG{p}{\PYGZcb{}}
\PYG{+w}{    }
\PYG{+w}{    }\PYG{k}{return}\PYG{+w}{ }\PYG{p}{(}\PYG{k+kt}{uint16\PYGZus{}t}\PYG{p}{)}\PYG{+w}{ }\PYG{n}{bytesRead}\PYG{p}{;}
\PYG{p}{\PYGZcb{}}

\PYG{c+cm}{/**}
\PYG{c+cm}{ * @brief Sets a new pitch factor for audio playback.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * Updates the global pitch factor and marks it as changed. Interrupts are temporarily }
\PYG{c+cm}{ * disabled to ensure thread safety during the update.}
\PYG{c+cm}{ * }
\PYG{c+cm}{ * @param newPitchFactor The new pitch factor to set.}
\PYG{c+cm}{ */}
\PYG{k+kt}{void}\PYG{+w}{ }\PYG{n+nf}{setPitchFactor}\PYG{p}{(}\PYG{k+kt}{float}\PYG{+w}{ }\PYG{n}{newPitchFactor}\PYG{p}{)}\PYG{+w}{ }\PYG{p}{\PYGZob{}}
\PYG{+w}{    }\PYG{n}{\PYGZus{}\PYGZus{}disable\PYGZus{}irq}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Disable interrupts to ensure thread safety}
\PYG{+w}{    }\PYG{n}{pitchFactor}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n}{newPitchFactor}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{pitchChanged}\PYG{+w}{ }\PYG{o}{=}\PYG{+w}{ }\PYG{n+nb}{true}\PYG{p}{;}
\PYG{+w}{    }\PYG{n}{\PYGZus{}\PYGZus{}enable\PYGZus{}irq}\PYG{p}{();}\PYG{+w}{ }\PYG{c+c1}{// Re\PYGZhy{}enable interrupts}
\PYG{p}{\PYGZcb{}}
\end{Verbatim}
