
nn-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b408  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002e350  0800b600  0800b600  0000c600  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08039950  08039950  0003bb00  2**0
                  CONTENTS
  4 .ARM          00000008  08039950  08039950  0003a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08039958  08039958  0003bb00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08039958  08039958  0003a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0803995c  0803995c  0003a95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b00  20000000  08039960  0003b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000640c  20000b00  0803a460  0003bb00  2**2
                  ALLOC
 10 ._user_heap_stack 0001fc04  20006f0c  0803a460  0003bf0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003bb00  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fbc4  00000000  00000000  0003bb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048ef  00000000  00000000  0005b6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000aae5  00000000  00000000  0005ffe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  0006aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bd  00000000  00000000  0006bde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263ae  00000000  00000000  0006cea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000210ab  00000000  00000000  00093253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ece36  00000000  00000000  000b42fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000101  00000000  00000000  001a1134  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043c4  00000000  00000000  001a1238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001a55fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003ac5  00000000  00000000  001a565e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000080  00000000  00000000  001a9123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000b00 	.word	0x20000b00
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b5d0 	.word	0x0800b5d0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000b04 	.word	0x20000b04
 800021c:	0800b5d0 	.word	0x0800b5d0

08000220 <arm_bitreversal_32>:
 8000220:	1c4b      	adds	r3, r1, #1
 8000222:	2b01      	cmp	r3, #1
 8000224:	bf98      	it	ls
 8000226:	4770      	bxls	lr
 8000228:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800022c:	1c91      	adds	r1, r2, #2
 800022e:	089b      	lsrs	r3, r3, #2

08000230 <arm_bitreversal_32_0>:
 8000230:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000234:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000238:	880a      	ldrh	r2, [r1, #0]
 800023a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800023e:	4480      	add	r8, r0
 8000240:	4481      	add	r9, r0
 8000242:	4402      	add	r2, r0
 8000244:	4484      	add	ip, r0
 8000246:	f8d9 7000 	ldr.w	r7, [r9]
 800024a:	f8d8 6000 	ldr.w	r6, [r8]
 800024e:	6815      	ldr	r5, [r2, #0]
 8000250:	f8dc 4000 	ldr.w	r4, [ip]
 8000254:	f8c9 6000 	str.w	r6, [r9]
 8000258:	f8c8 7000 	str.w	r7, [r8]
 800025c:	f8cc 5000 	str.w	r5, [ip]
 8000260:	6014      	str	r4, [r2, #0]
 8000262:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000266:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800026a:	6855      	ldr	r5, [r2, #4]
 800026c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000270:	f8c9 6004 	str.w	r6, [r9, #4]
 8000274:	f8c8 7004 	str.w	r7, [r8, #4]
 8000278:	f8cc 5004 	str.w	r5, [ip, #4]
 800027c:	6054      	str	r4, [r2, #4]
 800027e:	3108      	adds	r1, #8
 8000280:	3b01      	subs	r3, #1
 8000282:	d1d5      	bne.n	8000230 <arm_bitreversal_32_0>
 8000284:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000288:	4770      	bx	lr

0800028a <arm_bitreversal_16>:
 800028a:	1c4b      	adds	r3, r1, #1
 800028c:	2b01      	cmp	r3, #1
 800028e:	bf98      	it	ls
 8000290:	4770      	bxls	lr
 8000292:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	1c91      	adds	r1, r2, #2
 8000298:	089b      	lsrs	r3, r3, #2

0800029a <arm_bitreversal_16_0>:
 800029a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800029e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002a2:	880a      	ldrh	r2, [r1, #0]
 80002a4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002a8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002ac:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002b0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002b4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002b8:	f8d9 7000 	ldr.w	r7, [r9]
 80002bc:	f8d8 6000 	ldr.w	r6, [r8]
 80002c0:	6815      	ldr	r5, [r2, #0]
 80002c2:	f8dc 4000 	ldr.w	r4, [ip]
 80002c6:	f8c9 6000 	str.w	r6, [r9]
 80002ca:	f8c8 7000 	str.w	r7, [r8]
 80002ce:	f8cc 5000 	str.w	r5, [ip]
 80002d2:	6014      	str	r4, [r2, #0]
 80002d4:	3108      	adds	r1, #8
 80002d6:	3b01      	subs	r3, #1
 80002d8:	d1df      	bne.n	800029a <arm_bitreversal_16_0>
 80002da:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmpun>:
 8000c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x10>
 8000c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c4a:	d10a      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x20>
 8000c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0001 	mov.w	r0, #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2iz>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c70:	d215      	bcs.n	8000c9e <__aeabi_d2iz+0x36>
 8000c72:	d511      	bpl.n	8000c98 <__aeabi_d2iz+0x30>
 8000c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d912      	bls.n	8000ca4 <__aeabi_d2iz+0x3c>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	4770      	bx	lr
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	4770      	bx	lr
 8000c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ca2:	d105      	bne.n	8000cb0 <__aeabi_d2iz+0x48>
 8000ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	bf08      	it	eq
 8000caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <Preprocessing_Init>:
//    }
//
//    return 0; // Erfolg
//}

void Preprocessing_Init(void) {
 8000fa8:	b510      	push	{r4, lr}
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, 1024);
 8000faa:	4c11      	ldr	r4, [pc, #68]	@ (8000ff0 <Preprocessing_Init+0x48>)
 8000fac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f002 fb4f 	bl	8003654 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <Preprocessing_Init+0x4c>)
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8000fb8:	2201      	movs	r2, #1
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
  S_Spectr.SampRate = 16000;
  S_Spectr.FrameLen = 1024;
 8000fba:	f44f 517a 	mov.w	r1, #16000	@ 0x3e80
  S_Spectr.pRfft    = &S_Rfft;
 8000fbe:	601c      	str	r4, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8000fc0:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
 8000fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <Preprocessing_Init+0x50>)
 8000fc4:	609a      	str	r2, [r3, #8]
  S_Spectr.FrameLen = 1024;
 8000fc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fca:	e9c3 1203 	strd	r1, r2, [r3, #12]
  S_Spectr.FFTLen   = 1024;
 8000fce:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = mel_spectrogram_column_buffer;
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <Preprocessing_Init+0x54>)

  /* Init Mel filter */
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 8000fd2:	490b      	ldr	r1, [pc, #44]	@ (8001000 <Preprocessing_Init+0x58>)
  S_Spectr.pScratch = mel_spectrogram_column_buffer;
 8000fd4:	619a      	str	r2, [r3, #24]
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <Preprocessing_Init+0x5c>)
 8000fd8:	6011      	str	r1, [r2, #0]
  S_MelFilter.pStopIndices  = (uint32_t *) melFiltersStopIndices_1024_30;
 8000fda:	490b      	ldr	r1, [pc, #44]	@ (8001008 <Preprocessing_Init+0x60>)
 8000fdc:	6051      	str	r1, [r2, #4]
  S_MelFilter.pCoefficients = (float32_t *) melFilterLut_1024_30;
 8000fde:	490b      	ldr	r1, [pc, #44]	@ (800100c <Preprocessing_Init+0x64>)
 8000fe0:	6091      	str	r1, [r2, #8]
  S_MelFilter.NumMels       = 30;
 8000fe2:	211e      	movs	r1, #30
 8000fe4:	6111      	str	r1, [r2, #16]

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 8000fe6:	490a      	ldr	r1, [pc, #40]	@ (8001010 <Preprocessing_Init+0x68>)
  S_MelSpectr.MelFilter       = &S_MelFilter;
 8000fe8:	e9c1 3200 	strd	r3, r2, [r1]
}
 8000fec:	bd10      	pop	{r4, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000668c 	.word	0x2000668c
 8000ff4:	20006670 	.word	0x20006670
 8000ff8:	08014700 	.word	0x08014700
 8000ffc:	200065c0 	.word	0x200065c0
 8001000:	08014688 	.word	0x08014688
 8001004:	20006638 	.word	0x20006638
 8001008:	08014610 	.word	0x08014610
 800100c:	080136f0 	.word	0x080136f0
 8001010:	20006668 	.word	0x20006668

08001014 <PowerToDb>:
        spectrogram_col_index = 0;
    }
}

void PowerToDb(float32_t *spectrogram)
{
 8001014:	b538      	push	{r3, r4, r5, lr}
 8001016:	4604      	mov	r4, r0
 8001018:	f500 6570 	add.w	r5, r0, #3840	@ 0xf00
 800101c:	4603      	mov	r3, r0
 800101e:	ed2d 8b04 	vpush	{d8-d9}
  float32_t max_mel_energy = FLT_MIN; // Minimaler positiver Wert, um sicherzustellen, dass er überschrieben wird
 8001022:	ed9f 8a18 	vldr	s16, [pc, #96]	@ 8001084 <PowerToDb+0x70>
  uint32_t i, total_elements = rows * cols;


  // Find MelEnergy Scaling factor
  for (i = 0; i < total_elements; i++) {
    if (spectrogram[i] > max_mel_energy) {
 8001026:	ecf3 7a01 	vldmia	r3!, {s15}
      max_mel_energy = spectrogram[i];
 800102a:	eef4 7a48 	vcmp.f32	s15, s16
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	fe37 8a88 	vselgt.f32	s16, s15, s16
  for (i = 0; i < total_elements; i++) {
 8001036:	42ab      	cmp	r3, r5
 8001038:	d1f5      	bne.n	8001026 <PowerToDb+0x12>
    }
  }

  // Check if max_mel_energy is zero to avoid division by zero
  if (max_mel_energy == 0.0f) {
 800103a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800103e:	eddf 8a12 	vldr	s17, [pc, #72]	@ 8001088 <PowerToDb+0x74>
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	d015      	beq.n	8001074 <PowerToDb+0x60>
    return;
  }

  // Scale Mel Energies and convert to dB
  for (i = 0; i < total_elements; i++) {
    spectrogram[i] = 10.0f * log10f(spectrogram[i] / max_mel_energy);
 8001048:	eeb2 9a04 	vmov.f32	s18, #36	@ 0x41200000  10.0
 800104c:	ed94 0a00 	vldr	s0, [r4]
 8001050:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8001054:	f009 ffdc 	bl	800b010 <log10f>
 8001058:	ee20 0a09 	vmul.f32	s0, s0, s18
    // Threshold to -80 dB
    if (spectrogram[i] < -80.0f) {
      spectrogram[i] = -80.0f;
 800105c:	eeb4 0a68 	vcmp.f32	s0, s17
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	bf48      	it	mi
 8001066:	eeb0 0a68 	vmovmi.f32	s0, s17
 800106a:	eca4 0a01 	vstmia	r4!, {s0}
  for (i = 0; i < total_elements; i++) {
 800106e:	42ac      	cmp	r4, r5
 8001070:	d1ec      	bne.n	800104c <PowerToDb+0x38>
 8001072:	e003      	b.n	800107c <PowerToDb+0x68>
      spectrogram[i] = -80.0f;
 8001074:	ece4 8a01 	vstmia	r4!, {s17}
    for (i = 0; i < total_elements; i++) {
 8001078:	42ac      	cmp	r4, r5
 800107a:	d1fb      	bne.n	8001074 <PowerToDb+0x60>
    }
  }
}
 800107c:	ecbd 8b04 	vpop	{d8-d9}
 8001080:	bd38      	pop	{r3, r4, r5, pc}
 8001082:	bf00      	nop
 8001084:	00800000 	.word	0x00800000
 8001088:	c2a00000 	.word	0xc2a00000

0800108c <init_nn>:


// Function to initialize the neural network
int init_nn() {
 800108c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ai_error err;

	/* Create a local array with the addresses of the activations buffers */
	const ai_handle act_addr[] = { activations };
	/* Create an instance of the model */
	err = ai_network_1_create_and_init(&network, act_addr, NULL);
 800108e:	4d11      	ldr	r5, [pc, #68]	@ (80010d4 <init_nn+0x48>)
 8001090:	2200      	movs	r2, #0
	const ai_handle act_addr[] = { activations };
 8001092:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <init_nn+0x4c>)
	err = ai_network_1_create_and_init(&network, act_addr, NULL);
 8001094:	a901      	add	r1, sp, #4
 8001096:	4628      	mov	r0, r5
	const ai_handle act_addr[] = { activations };
 8001098:	9301      	str	r3, [sp, #4]
	err = ai_network_1_create_and_init(&network, act_addr, NULL);
 800109a:	f002 fa79 	bl	8003590 <ai_network_1_create_and_init>
	if (err.type != AI_ERROR_NONE) {
 800109e:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 80010a2:	d008      	beq.n	80010b6 <init_nn+0x2a>
		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80010a4:	0a02      	lsrs	r2, r0, #8
 80010a6:	4621      	mov	r1, r4
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <init_nn+0x50>)
 80010aa:	f008 f85b 	bl	8009164 <iprintf>
		return -1;
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
//		return -1;
//	}
//
//	return 0; // success
	return 0;
}
 80010b2:	b003      	add	sp, #12
 80010b4:	bd30      	pop	{r4, r5, pc}
	ai_input = ai_network_1_inputs_get(network, NULL);
 80010b6:	4621      	mov	r1, r4
 80010b8:	6828      	ldr	r0, [r5, #0]
 80010ba:	f002 f98b 	bl	80033d4 <ai_network_1_inputs_get>
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <init_nn+0x54>)
	ai_output = ai_network_1_outputs_get(network, NULL);
 80010c0:	4621      	mov	r1, r4
	ai_input = ai_network_1_inputs_get(network, NULL);
 80010c2:	6018      	str	r0, [r3, #0]
	ai_output = ai_network_1_outputs_get(network, NULL);
 80010c4:	6828      	ldr	r0, [r5, #0]
 80010c6:	f002 f98f 	bl	80033e8 <ai_network_1_outputs_get>
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <init_nn+0x58>)
 80010cc:	6018      	str	r0, [r3, #0]
	return 0;
 80010ce:	4620      	mov	r0, r4
 80010d0:	e7ef      	b.n	80010b2 <init_nn+0x26>
 80010d2:	bf00      	nop
 80010d4:	200065bc 	.word	0x200065bc
 80010d8:	20001a3c 	.word	0x20001a3c
 80010dc:	0800b610 	.word	0x0800b610
 80010e0:	20001a38 	.word	0x20001a38
 80010e4:	20001a34 	.word	0x20001a34

080010e8 <run_nn_classification>:
    // Define input and output buffers
//    ai_buffer nn_input_buffer[AI_NETWORK_1_IN_NUM] = AI_NETWORK_1_IN;
//    ai_buffer nn_output_buffer[AI_NETWORK_1_OUT_NUM] = AI_NETWORK_1_OUT;

    /* Update IO handlers with the data payload */
    ai_input[0].data = AI_HANDLE_PTR(spectrogram);
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <run_nn_classification+0x40>)
    ai_output[0].data = AI_HANDLE_PTR(classification_result);
 80010ea:	4a10      	ldr	r2, [pc, #64]	@ (800112c <run_nn_classification+0x44>)
    ai_input[0].data = AI_HANDLE_PTR(spectrogram);
 80010ec:	681b      	ldr	r3, [r3, #0]
    ai_output[0].data = AI_HANDLE_PTR(classification_result);
 80010ee:	6812      	ldr	r2, [r2, #0]
int run_nn_classification(float* spectrogram, float* classification_result) {
 80010f0:	b510      	push	{r4, lr}
//    // Set input data pointer
//    nn_input_buffer[0].data = AI_HANDLE_PTR(nn_input);
//
//    // Set output data pointer
//    nn_output_buffer[0].data = AI_HANDLE_PTR(nn_output);
    if(network == AI_HANDLE_NULL)
 80010f2:	4c0f      	ldr	r4, [pc, #60]	@ (8001130 <run_nn_classification+0x48>)
    ai_input[0].data = AI_HANDLE_PTR(spectrogram);
 80010f4:	6058      	str	r0, [r3, #4]
    if(network == AI_HANDLE_NULL)
 80010f6:	6820      	ldr	r0, [r4, #0]
    ai_output[0].data = AI_HANDLE_PTR(classification_result);
 80010f8:	6051      	str	r1, [r2, #4]
    if(network == AI_HANDLE_NULL)
 80010fa:	b928      	cbnz	r0, 8001108 <run_nn_classification+0x20>
      {
          printf("E: network handle is NULL\r\n");
 80010fc:	480d      	ldr	r0, [pc, #52]	@ (8001134 <run_nn_classification+0x4c>)
 80010fe:	f008 f899 	bl	8009234 <puts>
          return -1;
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
//
//    // Convert output data from int8 to float
//    aiConvertOutputInt8_2_Float(nn_output, classification_result);

    return 0; // Success
}
 8001106:	bd10      	pop	{r4, pc}
    batch = ai_network_1_run(network, ai_input, ai_output);
 8001108:	4619      	mov	r1, r3
 800110a:	f002 fa88 	bl	800361e <ai_network_1_run>
    if (batch != 1) {
 800110e:	2801      	cmp	r0, #1
 8001110:	d008      	beq.n	8001124 <run_nn_classification+0x3c>
        err = ai_network_1_get_error(network);
 8001112:	6820      	ldr	r0, [r4, #0]
 8001114:	f002 f94e 	bl	80033b4 <ai_network_1_get_error>
        printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001118:	0a02      	lsrs	r2, r0, #8
 800111a:	b2c1      	uxtb	r1, r0
 800111c:	4806      	ldr	r0, [pc, #24]	@ (8001138 <run_nn_classification+0x50>)
 800111e:	f008 f821 	bl	8009164 <iprintf>
        return -1;
 8001122:	e7ee      	b.n	8001102 <run_nn_classification+0x1a>
    return 0; // Success
 8001124:	2000      	movs	r0, #0
 8001126:	e7ee      	b.n	8001106 <run_nn_classification+0x1e>
 8001128:	20001a38 	.word	0x20001a38
 800112c:	20001a34 	.word	0x20001a34
 8001130:	200065bc 	.word	0x200065bc
 8001134:	0800b63c 	.word	0x0800b63c
 8001138:	0800b657 	.word	0x0800b657

0800113c <preprocess_frame>:
void preprocess_frame(float32_t* frame) {
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		spectrogram[i * SPECTROGRAM_COLS + spectrogram_col_index] = mel_spectrogram_column_buffer[i];
 800113e:	4c18      	ldr	r4, [pc, #96]	@ (80011a0 <preprocess_frame+0x64>)
void preprocess_frame(float32_t* frame) {
 8001140:	4601      	mov	r1, r0
	MelSpectrogramColumn(&S_MelSpectr, frame, mel_spectrogram_column_buffer);
 8001142:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <preprocess_frame+0x68>)
 8001144:	4818      	ldr	r0, [pc, #96]	@ (80011a8 <preprocess_frame+0x6c>)
 8001146:	f002 f8ff 	bl	8003348 <MelSpectrogramColumn>
		spectrogram[i * SPECTROGRAM_COLS + spectrogram_col_index] = mel_spectrogram_column_buffer[i];
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	4a17      	ldr	r2, [pc, #92]	@ (80011ac <preprocess_frame+0x70>)
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 800114e:	2100      	movs	r1, #0
 8001150:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <preprocess_frame+0x68>)
 8001152:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001156:	3101      	adds	r1, #1
		spectrogram[i * SPECTROGRAM_COLS + spectrogram_col_index] = mel_spectrogram_column_buffer[i];
 8001158:	f850 5b04 	ldr.w	r5, [r0], #4
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 800115c:	291e      	cmp	r1, #30
		spectrogram[i * SPECTROGRAM_COLS + spectrogram_col_index] = mel_spectrogram_column_buffer[i];
 800115e:	f842 5b80 	str.w	r5, [r2], #128
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 8001162:	d1f8      	bne.n	8001156 <preprocess_frame+0x1a>
    spectrogram_col_index++;
 8001164:	3301      	adds	r3, #1
    if (spectrogram_col_index == SPECTROGRAM_COLS) {
 8001166:	2b20      	cmp	r3, #32
    spectrogram_col_index++;
 8001168:	6023      	str	r3, [r4, #0]
    if (spectrogram_col_index == SPECTROGRAM_COLS) {
 800116a:	d117      	bne.n	800119c <preprocess_frame+0x60>
        PowerToDb(spectrogram);
 800116c:	480f      	ldr	r0, [pc, #60]	@ (80011ac <preprocess_frame+0x70>)
 800116e:	f7ff ff51 	bl	8001014 <PowerToDb>
        if (run_nn_classification(spectrogram, aiOutData) == 0) {
 8001172:	490f      	ldr	r1, [pc, #60]	@ (80011b0 <preprocess_frame+0x74>)
 8001174:	480d      	ldr	r0, [pc, #52]	@ (80011ac <preprocess_frame+0x70>)
 8001176:	f7ff ffb7 	bl	80010e8 <run_nn_classification>
 800117a:	b968      	cbnz	r0, 8001198 <preprocess_frame+0x5c>
 800117c:	4e0c      	ldr	r6, [pc, #48]	@ (80011b0 <preprocess_frame+0x74>)
 800117e:	2505      	movs	r5, #5
			  printf("%8.6f ", aiOutData[i]);
 8001180:	4f0c      	ldr	r7, [pc, #48]	@ (80011b4 <preprocess_frame+0x78>)
 8001182:	f856 0b04 	ldr.w	r0, [r6], #4
 8001186:	f7ff fa67 	bl	8000658 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4638      	mov	r0, r7
 8001190:	f007 ffe8 	bl	8009164 <iprintf>
			for (uint32_t i = 0; i < AI_NETWORK_1_OUT_1_SIZE; i++) {
 8001194:	3d01      	subs	r5, #1
 8001196:	d1f4      	bne.n	8001182 <preprocess_frame+0x46>
        spectrogram_col_index = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	6023      	str	r3, [r4, #0]
}
 800119c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000b1c 	.word	0x20000b1c
 80011a4:	200065c0 	.word	0x200065c0
 80011a8:	20006668 	.word	0x20006668
 80011ac:	20000b34 	.word	0x20000b34
 80011b0:	20000b20 	.word	0x20000b20
 80011b4:	0800b683 	.word	0x0800b683

080011b8 <frame_subsamples>:
void frame_subsamples(float32_t* subsample, int subsample_length) {
 80011b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011bc:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 80011c0:	4606      	mov	r6, r0
 80011c2:	460f      	mov	r7, r1
 80011c4:	2400      	movs	r4, #0
 80011c6:	466d      	mov	r5, sp
                frames[i][j] = 0.0f; // pad with zeros
 80011c8:	f04f 0800 	mov.w	r8, #0
        for (int j = 0; j < FRAME_LENGTH; j++) {
 80011cc:	eb06 0284 	add.w	r2, r6, r4, lsl #2
void frame_subsamples(float32_t* subsample, int subsample_length) {
 80011d0:	4629      	mov	r1, r5
        for (int j = 0; j < FRAME_LENGTH; j++) {
 80011d2:	2300      	movs	r3, #0
            if (start_index + j < subsample_length) {
 80011d4:	1918      	adds	r0, r3, r4
        for (int j = 0; j < FRAME_LENGTH; j++) {
 80011d6:	3301      	adds	r3, #1
 80011d8:	3204      	adds	r2, #4
            if (start_index + j < subsample_length) {
 80011da:	4287      	cmp	r7, r0
                frames[i][j] = subsample[start_index + j];
 80011dc:	bfcc      	ite	gt
 80011de:	f852 0c04 	ldrgt.w	r0, [r2, #-4]
                frames[i][j] = 0.0f; // pad with zeros
 80011e2:	4640      	movle	r0, r8
        for (int j = 0; j < FRAME_LENGTH; j++) {
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e8:	f841 0b04 	str.w	r0, [r1], #4
 80011ec:	d1f2      	bne.n	80011d4 <frame_subsamples+0x1c>
    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 80011ee:	f504 7400 	add.w	r4, r4, #512	@ 0x200
        preprocess_frame(frames[i]);
 80011f2:	4628      	mov	r0, r5
 80011f4:	f7ff ffa2 	bl	800113c <preprocess_frame>
    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 80011f8:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 80011fc:	f5b4 4f80 	cmp.w	r4, #16384	@ 0x4000
 8001200:	d1e4      	bne.n	80011cc <frame_subsamples+0x14>
}
 8001202:	f50d 3d00 	add.w	sp, sp, #131072	@ 0x20000
 8001206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b510      	push	{r4, lr}
 800120e:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001210:	2230      	movs	r2, #48	@ 0x30
 8001212:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001214:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	a808      	add	r0, sp, #32
 8001218:	f008 f8ec 	bl	80093f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	2214      	movs	r2, #20
 800121e:	2100      	movs	r1, #0
 8001220:	a803      	add	r0, sp, #12
 8001222:	f008 f8e7 	bl	80093f4 <memset>
  HAL_PWR_EnableBkUpAccess();
 8001226:	f000 fdb9 	bl	8001d9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800122c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 800122e:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001232:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001236:	641a      	str	r2, [r3, #64]	@ 0x40
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001242:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <SystemClock_Config+0xa8>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124e:	9412      	str	r4, [sp, #72]	@ 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001258:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800125c:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001260:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001264:	e9cd 430e 	strd	r4, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001268:	23d8      	movs	r3, #216	@ 0xd8
 800126a:	e9cd 0310 	strd	r0, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800126e:	2309      	movs	r3, #9
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001272:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f000 fdd2 	bl	8001e1c <HAL_RCC_OscConfig>
 8001278:	b108      	cbz	r0, 800127e <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800127e:	f000 fd95 	bl	8001dac <HAL_PWREx_EnableOverDrive>
 8001282:	b108      	cbz	r0, 8001288 <SystemClock_Config+0x7c>
 8001284:	b672      	cpsid	i
  while (1)
 8001286:	e7fe      	b.n	8001286 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128e:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001290:	2107      	movs	r1, #7
 8001292:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001294:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012a0:	f000 ffa4 	bl	80021ec <HAL_RCC_ClockConfig>
 80012a4:	b108      	cbz	r0, 80012aa <SystemClock_Config+0x9e>
 80012a6:	b672      	cpsid	i
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <SystemClock_Config+0x9c>
}
 80012aa:	b014      	add	sp, #80	@ 0x50
 80012ac:	bd10      	pop	{r4, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <main>:
{
 80012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ba:	b08f      	sub	sp, #60	@ 0x3c
 80012bc:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012c2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012c6:	4ab9      	ldr	r2, [pc, #740]	@ (80015ac <main+0x2f4>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	f8c2 1250 	str.w	r1, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012d2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012d6:	6953      	ldr	r3, [r2, #20]
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80012e2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80012e6:	f8c2 1084 	str.w	r1, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80012ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80012ee:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80012f2:	f643 70e0 	movw	r0, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80012f6:	f3c3 01c9 	ubfx	r1, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80012fa:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80012fe:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001300:	ea03 0500 	and.w	r5, r3, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001304:	460e      	mov	r6, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001306:	ea45 7486 	orr.w	r4, r5, r6, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800130a:	3e01      	subs	r6, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800130c:	f8c2 4260 	str.w	r4, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8001310:	d2f9      	bcs.n	8001306 <main+0x4e>
    } while(sets-- != 0U);
 8001312:	3b20      	subs	r3, #32
 8001314:	f113 0f20 	cmn.w	r3, #32
 8001318:	d1f2      	bne.n	8001300 <main+0x48>
 800131a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800131e:	6953      	ldr	r3, [r2, #20]
 8001320:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001324:	6153      	str	r3, [r2, #20]
 8001326:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800132a:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800132e:	f000 fad7 	bl	80018e0 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2400      	movs	r4, #0
  SystemClock_Config();
 8001334:	f7ff ff6a 	bl	800120c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	2214      	movs	r2, #20
 800133a:	2100      	movs	r1, #0
 800133c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001340:	f008 f858 	bl	80093f4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	4b9a      	ldr	r3, [pc, #616]	@ (80015b0 <main+0x2f8>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001346:	f244 0181 	movw	r1, #16513	@ 0x4081
 800134a:	489a      	ldr	r0, [pc, #616]	@ (80015b4 <main+0x2fc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	f042 0204 	orr.w	r2, r2, #4
 8001354:	631a      	str	r2, [r3, #48]	@ 0x30
 8001356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001358:	f002 0204 	and.w	r2, r2, #4
 800135c:	603a      	str	r2, [r7, #0]
 800135e:	683a      	ldr	r2, [r7, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001362:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001366:	631a      	str	r2, [r3, #48]	@ 0x30
 8001368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800136a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	687a      	ldr	r2, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001374:	f042 0202 	orr.w	r2, r2, #2
 8001378:	631a      	str	r2, [r3, #48]	@ 0x30
 800137a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800137c:	f002 0202 	and.w	r2, r2, #2
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	68ba      	ldr	r2, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001386:	f042 0208 	orr.w	r2, r2, #8
 800138a:	631a      	str	r2, [r3, #48]	@ 0x30
 800138c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800138e:	f002 0208 	and.w	r2, r2, #8
 8001392:	60fa      	str	r2, [r7, #12]
 8001394:	68fa      	ldr	r2, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800139c:	631a      	str	r2, [r3, #48]	@ 0x30
 800139e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013a0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80013a4:	613a      	str	r2, [r7, #16]
 80013a6:	693a      	ldr	r2, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013bc:	f000 fc50 	bl	8001c60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2140      	movs	r1, #64	@ 0x40
 80013c4:	487c      	ldr	r0, [pc, #496]	@ (80015b8 <main+0x300>)
 80013c6:	f000 fc4b 	bl	8001c60 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 0124 	add.w	r1, r7, #36	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	62fc      	str	r4, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d8:	e9c7 0309 	strd	r0, r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80013dc:	4877      	ldr	r0, [pc, #476]	@ (80015bc <main+0x304>)
 80013de:	f000 fb67 	bl	8001ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	f244 0381 	movw	r3, #16513	@ 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80013ea:	4872      	ldr	r0, [pc, #456]	@ (80015b4 <main+0x2fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	e9c7 3509 	strd	r3, r5, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	e9c7 440b 	strd	r4, r4, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f000 fb5c 	bl	8001ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013f8:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80013fe:	486e      	ldr	r0, [pc, #440]	@ (80015b8 <main+0x300>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	e9c7 3509 	strd	r3, r5, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	e9c7 440b 	strd	r4, r4, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001408:	f000 fb52 	bl	8001ab0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800140c:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001412:	4869      	ldr	r0, [pc, #420]	@ (80015b8 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	62fc      	str	r4, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	e9c7 3409 	strd	r3, r4, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800141a:	f000 fb49 	bl	8001ab0 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800141e:	4868      	ldr	r0, [pc, #416]	@ (80015c0 <main+0x308>)
  huart3.Init.BaudRate = 115200;
 8001420:	f8df c1c8 	ldr.w	ip, [pc, #456]	@ 80015ec <main+0x334>
 8001424:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart3.Init.Parity = UART_PARITY_NONE;
 8001428:	6104      	str	r4, [r0, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800142a:	6244      	str	r4, [r0, #36]	@ 0x24
  huart3.Init.BaudRate = 115200;
 800142c:	e9c0 c300 	strd	ip, r3, [r0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001430:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001432:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800143a:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800143e:	f001 fd3a 	bl	8002eb6 <HAL_UART_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	b108      	cbz	r0, 800144a <main+0x192>
  __ASM volatile ("cpsid i" : : : "memory");
 8001446:	b672      	cpsid	i
  while (1)
 8001448:	e7fe      	b.n	8001448 <main+0x190>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800144a:	485e      	ldr	r0, [pc, #376]	@ (80015c4 <main+0x30c>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800144c:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001450:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001452:	6303      	str	r3, [r0, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001454:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001458:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800145a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800145e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001462:	e9c0 2506 	strd	r2, r5, [r0, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001466:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800146a:	f000 fbfe 	bl	8001c6a <HAL_PCD_Init>
 800146e:	4604      	mov	r4, r0
 8001470:	b108      	cbz	r0, 8001476 <main+0x1be>
 8001472:	b672      	cpsid	i
  while (1)
 8001474:	e7fe      	b.n	8001474 <main+0x1bc>
  htim2.Instance = TIM2;
 8001476:	4d54      	ldr	r5, [pc, #336]	@ (80015c8 <main+0x310>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001478:	4601      	mov	r1, r0
 800147a:	2210      	movs	r2, #16
 800147c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001480:	f007 ffb8 	bl	80093f4 <memset>
  htim2.Instance = TIM2;
 8001484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001488:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148a:	623c      	str	r4, [r7, #32]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148e:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	e9c7 4406 	strd	r4, r4, [r7, #24]
  htim2.Init.Prescaler = 0;
 8001494:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 4294967295;
 8001498:	e9c5 4602 	strd	r4, r6, [r5, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800149c:	f001 f9f8 	bl	8002890 <HAL_TIM_Base_Init>
 80014a0:	b108      	cbz	r0, 80014a6 <main+0x1ee>
 80014a2:	b672      	cpsid	i
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <main+0x1ec>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a6:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014aa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80014ae:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	627e      	str	r6, [r7, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b2:	f001 fa27 	bl	8002904 <HAL_TIM_ConfigClockSource>
 80014b6:	b108      	cbz	r0, 80014bc <main+0x204>
 80014b8:	b672      	cpsid	i
  while (1)
 80014ba:	e7fe      	b.n	80014ba <main+0x202>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	61b8      	str	r0, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014be:	f107 0118 	add.w	r1, r7, #24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	6238      	str	r0, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c4:	4628      	mov	r0, r5
 80014c6:	f001 fab5 	bl	8002a34 <HAL_TIMEx_MasterConfigSynchronization>
 80014ca:	4604      	mov	r4, r0
 80014cc:	b108      	cbz	r0, 80014d2 <main+0x21a>
 80014ce:	b672      	cpsid	i
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <main+0x218>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	4601      	mov	r1, r0
 80014d4:	2210      	movs	r2, #16
 80014d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
  htim3.Instance = TIM3;
 80014da:	4d3c      	ldr	r5, [pc, #240]	@ (80015cc <main+0x314>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014dc:	f007 ff8a 	bl	80093f4 <memset>
  htim3.Instance = TIM3;
 80014e0:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <main+0x318>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e2:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	623c      	str	r4, [r7, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e6:	60ac      	str	r4, [r5, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	61ac      	str	r4, [r5, #24]
  htim3.Init.Prescaler = 0;
 80014ea:	e9c5 3400 	strd	r3, r4, [r5]
  htim3.Init.Period = 65535;
 80014ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f2:	e9c7 4406 	strd	r4, r4, [r7, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	e9c5 3403 	strd	r3, r4, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014fa:	f001 f9c9 	bl	8002890 <HAL_TIM_Base_Init>
 80014fe:	b108      	cbz	r0, 8001504 <main+0x24c>
 8001500:	b672      	cpsid	i
  while (1)
 8001502:	e7fe      	b.n	8001502 <main+0x24a>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001508:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	627e      	str	r6, [r7, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800150c:	f001 f9fa 	bl	8002904 <HAL_TIM_ConfigClockSource>
 8001510:	b108      	cbz	r0, 8001516 <main+0x25e>
 8001512:	b672      	cpsid	i
  while (1)
 8001514:	e7fe      	b.n	8001514 <main+0x25c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	61b8      	str	r0, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001518:	f107 0118 	add.w	r1, r7, #24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	6238      	str	r0, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800151e:	4628      	mov	r0, r5
 8001520:	f001 fa88 	bl	8002a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	b108      	cbz	r0, 800152a <main+0x272>
 8001526:	b672      	cpsid	i
  while (1)
 8001528:	e7fe      	b.n	8001528 <main+0x270>
  hcrc.Instance = CRC;
 800152a:	482a      	ldr	r0, [pc, #168]	@ (80015d4 <main+0x31c>)
 800152c:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <main+0x320>)
 800152e:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	8083      	strh	r3, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001534:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001538:	2301      	movs	r3, #1
 800153a:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800153c:	f000 fa58 	bl	80019f0 <HAL_CRC_Init>
 8001540:	b108      	cbz	r0, 8001546 <main+0x28e>
 8001542:	b672      	cpsid	i
  while (1)
 8001544:	e7fe      	b.n	8001544 <main+0x28c>
  __HAL_RCC_CRC_CLK_ENABLE();
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <main+0x2f8>)
 8001548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800154a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  if (init_nn() != 0) {
 800155a:	f7ff fd97 	bl	800108c <init_nn>
 800155e:	4604      	mov	r4, r0
 8001560:	2800      	cmp	r0, #0
 8001562:	d145      	bne.n	80015f0 <main+0x338>
  Preprocessing_Init();
 8001564:	f7ff fd20 	bl	8000fa8 <Preprocessing_Init>
  float32_t resampled_data[audio_data_length];
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <main+0x324>)
 800156a:	4a1d      	ldr	r2, [pc, #116]	@ (80015e0 <main+0x328>)
 800156c:	6819      	ldr	r1, [r3, #0]
	  resampled_data[i] = audio_data[i] / 32768.0f;
 800156e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80015e4 <main+0x32c>
  float32_t resampled_data[audio_data_length];
 8001572:	008b      	lsls	r3, r1, #2
 8001574:	3307      	adds	r3, #7
 8001576:	f023 0307 	bic.w	r3, r3, #7
 800157a:	ebad 0d03 	sub.w	sp, sp, r3
 800157e:	4668      	mov	r0, sp
  for (int i = 0; i < audio_data_length; i++) {
 8001580:	4603      	mov	r3, r0
 8001582:	42a1      	cmp	r1, r4
 8001584:	dc05      	bgt.n	8001592 <main+0x2da>
  frame_subsamples(resampled_data, audio_data_length);
 8001586:	f7ff fe17 	bl	80011b8 <frame_subsamples>
  printf("Classification completed successfully\n");
 800158a:	4817      	ldr	r0, [pc, #92]	@ (80015e8 <main+0x330>)
 800158c:	f007 fe52 	bl	8009234 <puts>
  while (1)
 8001590:	e7fe      	b.n	8001590 <main+0x2d8>
	  resampled_data[i] = audio_data[i] / 32768.0f;
 8001592:	f932 5b02 	ldrsh.w	r5, [r2], #2
  for (int i = 0; i < audio_data_length; i++) {
 8001596:	3401      	adds	r4, #1
	  resampled_data[i] = audio_data[i] / 32768.0f;
 8001598:	ee07 5a90 	vmov	s15, r5
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a4:	ece3 7a01 	vstmia	r3!, {s15}
  for (int i = 0; i < audio_data_length; i++) {
 80015a8:	e7eb      	b.n	8001582 <main+0x2ca>
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40020800 	.word	0x40020800
 80015c0:	20006bac 	.word	0x20006bac
 80015c4:	200066a4 	.word	0x200066a4
 80015c8:	20006c80 	.word	0x20006c80
 80015cc:	20006c34 	.word	0x20006c34
 80015d0:	40000400 	.word	0x40000400
 80015d4:	20006ccc 	.word	0x20006ccc
 80015d8:	40023000 	.word	0x40023000
 80015dc:	0800b6ec 	.word	0x0800b6ec
 80015e0:	0800b6f0 	.word	0x0800b6f0
 80015e4:	38000000 	.word	0x38000000
 80015e8:	0800b6ae 	.word	0x0800b6ae
 80015ec:	40004800 	.word	0x40004800
	  printf("Failed to initialize neural network\n");
 80015f0:	4803      	ldr	r0, [pc, #12]	@ (8001600 <main+0x348>)
 80015f2:	f007 fe1f 	bl	8009234 <puts>
}
 80015f6:	f04f 30ff 	mov.w	r0, #4294967295
 80015fa:	373c      	adds	r7, #60	@ 0x3c
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001600:	0800b68a 	.word	0x0800b68a

08001604 <Error_Handler>:
 8001604:	b672      	cpsid	i
  while (1)
 8001606:	e7fe      	b.n	8001606 <Error_Handler+0x2>

08001608 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_MspInit+0x2c>)
{
 800160a:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800160e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001612:	641a      	str	r2, [r3, #64]	@ 0x40
 8001614:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001616:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800161a:	9200      	str	r2, [sp, #0]
 800161c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001620:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001624:	645a      	str	r2, [r3, #68]	@ 0x44
 8001626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001630:	b002      	add	sp, #8
 8001632:	4770      	bx	lr
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001638:	6802      	ldr	r2, [r0, #0]
{
 800163a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_CRC_MspInit+0x28>)
 800163e:	429a      	cmp	r2, r3
 8001640:	d10b      	bne.n	800165a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001642:	f8d3 2830 	ldr.w	r2, [r3, #2096]	@ 0x830
 8001646:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800164a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800164e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800165a:	b002      	add	sp, #8
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023000 	.word	0x40023000

08001664 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001664:	6803      	ldr	r3, [r0, #0]
{
 8001666:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800166c:	d10c      	bne.n	8001688 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 8001672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001684:	b002      	add	sp, #8
 8001686:	4770      	bx	lr
  else if(htim_base->Instance==TIM3)
 8001688:	4a06      	ldr	r2, [pc, #24]	@ (80016a4 <HAL_TIM_Base_MspInit+0x40>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d1fa      	bne.n	8001684 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <HAL_TIM_Base_MspInit+0x44>)
 8001690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001692:	f042 0202 	orr.w	r2, r2, #2
 8001696:	641a      	str	r2, [r3, #64]	@ 0x40
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	9b01      	ldr	r3, [sp, #4]
}
 80016a2:	e7ef      	b.n	8001684 <HAL_TIM_Base_MspInit+0x20>
 80016a4:	40000400 	.word	0x40000400
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b510      	push	{r4, lr}
 80016ae:	b0a8      	sub	sp, #160	@ 0xa0
 80016b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	2214      	movs	r2, #20
 80016b4:	2100      	movs	r1, #0
 80016b6:	a803      	add	r0, sp, #12
 80016b8:	f007 fe9c 	bl	80093f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	2280      	movs	r2, #128	@ 0x80
 80016be:	2100      	movs	r1, #0
 80016c0:	a808      	add	r0, sp, #32
 80016c2:	f007 fe97 	bl	80093f4 <memset>
  if(huart->Instance==USART3)
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <HAL_UART_MspInit+0x7c>)
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d12a      	bne.n	8001724 <HAL_UART_MspInit+0x78>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d2:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016d4:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d6:	f000 fe47 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 80016da:	b108      	cbz	r0, 80016e0 <HAL_UART_MspInit+0x34>
    {
      Error_Handler();
 80016dc:	f7ff ff92 	bl	8001604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_UART_MspInit+0x80>)
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e4:	4812      	ldr	r0, [pc, #72]	@ (8001730 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016e8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016f0:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80016f4:	9201      	str	r2, [sp, #4]
 80016f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016fa:	f042 0208 	orr.w	r2, r2, #8
 80016fe:	631a      	str	r2, [r3, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800171a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800171e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f000 f9c6 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001724:	b028      	add	sp, #160	@ 0xa0
 8001726:	bd10      	pop	{r4, pc}
 8001728:	40004800 	.word	0x40004800
 800172c:	40023800 	.word	0x40023800
 8001730:	40020c00 	.word	0x40020c00

08001734 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001734:	b530      	push	{r4, r5, lr}
 8001736:	b0a9      	sub	sp, #164	@ 0xa4
 8001738:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	2214      	movs	r2, #20
 800173c:	2100      	movs	r1, #0
 800173e:	a803      	add	r0, sp, #12
 8001740:	f007 fe58 	bl	80093f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	2280      	movs	r2, #128	@ 0x80
 8001746:	2100      	movs	r1, #0
 8001748:	a808      	add	r0, sp, #32
 800174a:	f007 fe53 	bl	80093f4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001754:	d13c      	bne.n	80017d0 <HAL_PCD_MspInit+0x9c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001756:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800175c:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175e:	f000 fe03 	bl	8002368 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	b108      	cbz	r0, 8001768 <HAL_PCD_MspInit+0x34>
    {
      Error_Handler();
 8001764:	f7ff ff4e 	bl	8001604 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4c1a      	ldr	r4, [pc, #104]	@ (80017d4 <HAL_PCD_MspInit+0xa0>)
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	f44f 52e8 	mov.w	r2, #7424	@ 0x1d00
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	4818      	ldr	r0, [pc, #96]	@ (80017d8 <HAL_PCD_MspInit+0xa4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6323      	str	r3, [r4, #48]	@ 0x30
 800177c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001792:	230a      	movs	r3, #10
 8001794:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f000 f98b 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800179a:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800179e:	a903      	add	r1, sp, #12
 80017a0:	480d      	ldr	r0, [pc, #52]	@ (80017d8 <HAL_PCD_MspInit+0xa4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f000 f982 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80017ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80017b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80017b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	6463      	str	r3, [r4, #68]	@ 0x44
 80017c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017d0:	b029      	add	sp, #164	@ 0xa4
 80017d2:	bd30      	pop	{r4, r5, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017dc:	e7fe      	b.n	80017dc <NMI_Handler>

080017de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <HardFault_Handler>

080017e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler>

080017e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <BusFault_Handler>

080017e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler>

080017e6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	4770      	bx	lr

080017e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80017e8:	4770      	bx	lr

080017ea <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 b884 	b.w	80018f8 <HAL_IncTick>

080017f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <_sbrk+0x30>)
{
 80017f2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80017f4:	6811      	ldr	r1, [r2, #0]
{
 80017f6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80017f8:	b909      	cbnz	r1, 80017fe <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80017fa:	490a      	ldr	r1, [pc, #40]	@ (8001824 <_sbrk+0x34>)
 80017fc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	6810      	ldr	r0, [r2, #0]
 8001800:	4909      	ldr	r1, [pc, #36]	@ (8001828 <_sbrk+0x38>)
 8001802:	4c0a      	ldr	r4, [pc, #40]	@ (800182c <_sbrk+0x3c>)
 8001804:	4403      	add	r3, r0
 8001806:	1b09      	subs	r1, r1, r4
 8001808:	428b      	cmp	r3, r1
 800180a:	d906      	bls.n	800181a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800180c:	f007 fe54 	bl	80094b8 <__errno>
 8001810:	230c      	movs	r3, #12
 8001812:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001814:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001818:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800181a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800181c:	e7fc      	b.n	8001818 <_sbrk+0x28>
 800181e:	bf00      	nop
 8001820:	20006cf0 	.word	0x20006cf0
 8001824:	20006f10 	.word	0x20006f10
 8001828:	20040000 	.word	0x20040000
 800182c:	0001f400 	.word	0x0001f400

08001830 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4a03      	ldr	r2, [pc, #12]	@ (8001840 <SystemInit+0x10>)
 8001832:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001836:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800183a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800187c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001848:	480d      	ldr	r0, [pc, #52]	@ (8001880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800184a:	490e      	ldr	r1, [pc, #56]	@ (8001884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800184c:	4a0e      	ldr	r2, [pc, #56]	@ (8001888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0b      	ldr	r2, [pc, #44]	@ (800188c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001860:	4c0b      	ldr	r4, [pc, #44]	@ (8001890 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800186e:	f7ff ffdf 	bl	8001830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f007 fe27 	bl	80094c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7ff fd1f 	bl	80012b8 <main>
  bx  lr    
 800187a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800187c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	20000b00 	.word	0x20000b00
  ldr r2, =_sidata
 8001888:	08039960 	.word	0x08039960
  ldr r2, =_sbss
 800188c:	20000b00 	.word	0x20000b00
  ldr r4, =_ebss
 8001890:	20006f0c 	.word	0x20006f0c

08001894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189a:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <HAL_InitTick+0x3c>)
{
 800189c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80018a8:	4a0b      	ldr	r2, [pc, #44]	@ (80018d8 <HAL_InitTick+0x40>)
 80018aa:	6810      	ldr	r0, [r2, #0]
 80018ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80018b0:	f000 f88a 	bl	80019c8 <HAL_SYSTICK_Config>
 80018b4:	4604      	mov	r4, r0
 80018b6:	b958      	cbnz	r0, 80018d0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b8:	2d0f      	cmp	r5, #15
 80018ba:	d809      	bhi.n	80018d0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	4602      	mov	r2, r0
 80018be:	4629      	mov	r1, r5
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f84e 	bl	8001964 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <HAL_InitTick+0x44>)
 80018ca:	4620      	mov	r0, r4
 80018cc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80018ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80018d0:	2001      	movs	r0, #1
 80018d2:	e7fc      	b.n	80018ce <HAL_InitTick+0x36>
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_Init>:
{
 80018e0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f82c 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff ffd5 	bl	8001898 <HAL_InitTick>
  HAL_MspInit();
 80018ee:	f7ff fe8b 	bl	8001608 <HAL_MspInit>
}
 80018f2:	2000      	movs	r0, #0
 80018f4:	bd08      	pop	{r3, pc}
	...

080018f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80018f8:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HAL_IncTick+0x10>)
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <HAL_IncTick+0x14>)
 80018fc:	6811      	ldr	r1, [r2, #0]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	440b      	add	r3, r1
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20006cf4 	.word	0x20006cf4
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001910:	4b01      	ldr	r3, [pc, #4]	@ (8001918 <HAL_GetTick+0x8>)
 8001912:	6818      	ldr	r0, [r3, #0]
}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20006cf4 	.word	0x20006cf4

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b538      	push	{r3, r4, r5, lr}
 800191e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fff6 	bl	8001910 <HAL_GetTick>
 8001924:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001928:	bf1e      	ittt	ne
 800192a:	4b04      	ldrne	r3, [pc, #16]	@ (800193c <HAL_Delay+0x20>)
 800192c:	781b      	ldrbne	r3, [r3, #0]
 800192e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	1b43      	subs	r3, r0, r5
 8001936:	42a3      	cmp	r3, r4
 8001938:	d3fa      	bcc.n	8001930 <HAL_Delay+0x14>
  {
  }
}
 800193a:	bd38      	pop	{r3, r4, r5, pc}
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001940:	4907      	ldr	r1, [pc, #28]	@ (8001960 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001942:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001946:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800194e:	0412      	lsls	r2, r2, #16
 8001950:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800195c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b530      	push	{r4, r5, lr}
 8001968:	68dc      	ldr	r4, [r3, #12]
 800196a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800196e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	2b04      	cmp	r3, #4
 8001976:	bf28      	it	cs
 8001978:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001980:	bf8c      	ite	hi
 8001982:	3c03      	subhi	r4, #3
 8001984:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001986:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800198a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	fa03 f304 	lsl.w	r3, r3, r4
 800199c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80019a4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80019a6:	db06      	blt.n	80019b6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80019ac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80019b0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019b4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	f000 000f 	and.w	r0, r0, #15
 80019ba:	4a02      	ldr	r2, [pc, #8]	@ (80019c4 <HAL_NVIC_SetPriority+0x60>)
 80019bc:	5413      	strb	r3, [r2, r0]
 80019be:	e7f9      	b.n	80019b4 <HAL_NVIC_SetPriority+0x50>
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	e000ed14 	.word	0xe000ed14

080019c8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c8:	3801      	subs	r0, #1
 80019ca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80019ce:	d20b      	bcs.n	80019e8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d4:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <HAL_SYSTICK_Config+0x24>)
 80019d6:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d8:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019da:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80019e8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019f0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019f2:	4604      	mov	r4, r0
 80019f4:	b908      	cbnz	r0, 80019fa <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80019f6:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80019f8:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019fa:	7f43      	ldrb	r3, [r0, #29]
 80019fc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001a00:	b913      	cbnz	r3, 8001a08 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001a02:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001a04:	f7ff fe18 	bl	8001638 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001a0c:	7923      	ldrb	r3, [r4, #4]
 8001a0e:	b9e3      	cbnz	r3, 8001a4a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <HAL_CRC_Init+0x70>)
 8001a14:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	f022 0218 	bic.w	r2, r2, #24
 8001a1c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a1e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a20:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a22:	b9d2      	cbnz	r2, 8001a5a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a28:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001a2a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	6961      	ldr	r1, [r4, #20]
 8001a30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001a34:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a36:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a38:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a40:	430a      	orrs	r2, r1
 8001a42:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001a44:	2301      	movs	r3, #1
 8001a46:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001a48:	e7d6      	b.n	80019f8 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001a4a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f000 f808 	bl	8001a64 <HAL_CRCEx_Polynomial_Set>
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d0e2      	beq.n	8001a1e <HAL_CRC_Init+0x2e>
 8001a58:	e7cd      	b.n	80019f6 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a5a:	6922      	ldr	r2, [r4, #16]
 8001a5c:	e7e4      	b.n	8001a28 <HAL_CRC_Init+0x38>
 8001a5e:	bf00      	nop
 8001a60:	04c11db7 	.word	0x04c11db7

08001a64 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a64:	231f      	movs	r3, #31
{
 8001a66:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	d31d      	bcc.n	8001aa8 <HAL_CRCEx_Polynomial_Set+0x44>
 8001a6c:	fa21 f403 	lsr.w	r4, r1, r3
 8001a70:	07e4      	lsls	r4, r4, #31
 8001a72:	d5f9      	bpl.n	8001a68 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001a74:	2a10      	cmp	r2, #16
 8001a76:	d013      	beq.n	8001aa0 <HAL_CRCEx_Polynomial_Set+0x3c>
 8001a78:	2a10      	cmp	r2, #16
 8001a7a:	d804      	bhi.n	8001a86 <HAL_CRCEx_Polynomial_Set+0x22>
 8001a7c:	b13a      	cbz	r2, 8001a8e <HAL_CRCEx_Polynomial_Set+0x2a>
 8001a7e:	2a08      	cmp	r2, #8
 8001a80:	d010      	beq.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0x40>
 8001a82:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001a84:	e00b      	b.n	8001a9e <HAL_CRCEx_Polynomial_Set+0x3a>
  switch (PolyLength)
 8001a86:	2a18      	cmp	r2, #24
 8001a88:	d1fb      	bne.n	8001a82 <HAL_CRCEx_Polynomial_Set+0x1e>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a8a:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001a8c:	d8f9      	bhi.n	8001a82 <HAL_CRCEx_Polynomial_Set+0x1e>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001a8e:	6800      	ldr	r0, [r0, #0]
 8001a90:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001a92:	6883      	ldr	r3, [r0, #8]
 8001a94:	f023 0318 	bic.w	r3, r3, #24
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	6083      	str	r3, [r0, #8]
 8001a9c:	2000      	movs	r0, #0
}
 8001a9e:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001aa0:	2b07      	cmp	r3, #7
 8001aa2:	e7f3      	b.n	8001a8c <HAL_CRCEx_Polynomial_Set+0x28>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	e7f1      	b.n	8001a8c <HAL_CRCEx_Polynomial_Set+0x28>
  switch (PolyLength)
 8001aa8:	2a10      	cmp	r2, #16
 8001aaa:	d1e5      	bne.n	8001a78 <HAL_CRCEx_Polynomial_Set+0x14>
 8001aac:	e7e9      	b.n	8001a82 <HAL_CRCEx_Polynomial_Set+0x1e>
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ab4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 8001c5c <HAL_GPIO_Init+0x1ac>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4a66      	ldr	r2, [pc, #408]	@ (8001c54 <HAL_GPIO_Init+0x1a4>)
    ioposition = ((uint32_t)0x01) << position;
 8001abc:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001ac0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8001ac6:	43ac      	bics	r4, r5
 8001ac8:	f040 80af 	bne.w	8001c2a <HAL_GPIO_Init+0x17a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001acc:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ace:	2703      	movs	r7, #3
 8001ad0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ad8:	fa07 fc0e 	lsl.w	ip, r7, lr
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001adc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ade:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae2:	2f01      	cmp	r7, #1
 8001ae4:	d834      	bhi.n	8001b50 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001ae6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ae8:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aec:	68cf      	ldr	r7, [r1, #12]
 8001aee:	fa07 f70e 	lsl.w	r7, r7, lr
 8001af2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 8001af6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001af8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afa:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afe:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001b02:	409f      	lsls	r7, r3
 8001b04:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001b08:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001b0a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0c:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b0e:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b12:	688f      	ldr	r7, [r1, #8]
 8001b14:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b18:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 8001b1c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	d119      	bne.n	8001b54 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8001b20:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b24:	f003 0a07 	and.w	sl, r3, #7
 8001b28:	f04f 0b0f 	mov.w	fp, #15
 8001b2c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001b30:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001b34:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b38:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001b3c:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b40:	690f      	ldr	r7, [r1, #16]
 8001b42:	fa07 f70a 	lsl.w	r7, r7, sl
 8001b46:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 8001b4a:	f8c8 7020 	str.w	r7, [r8, #32]
 8001b4e:	e001      	b.n	8001b54 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b50:	2c03      	cmp	r4, #3
 8001b52:	d1da      	bne.n	8001b0a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001b54:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b56:	fa04 f40e 	lsl.w	r4, r4, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b5e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b62:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8001b66:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b68:	d05f      	beq.n	8001c2a <HAL_GPIO_Init+0x17a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 8001b6e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b72:	f003 0c03 	and.w	ip, r3, #3
 8001b76:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001b7e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b82:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 8001b8a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8001b8e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b92:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8001b9a:	9401      	str	r4, [sp, #4]
 8001b9c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8001b9e:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ba0:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ba4:	4c2c      	ldr	r4, [pc, #176]	@ (8001c58 <HAL_GPIO_Init+0x1a8>)
 8001ba6:	42a0      	cmp	r0, r4
 8001ba8:	d046      	beq.n	8001c38 <HAL_GPIO_Init+0x188>
 8001baa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001bae:	42a0      	cmp	r0, r4
 8001bb0:	d044      	beq.n	8001c3c <HAL_GPIO_Init+0x18c>
 8001bb2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001bb6:	42a0      	cmp	r0, r4
 8001bb8:	d042      	beq.n	8001c40 <HAL_GPIO_Init+0x190>
 8001bba:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001bbe:	42a0      	cmp	r0, r4
 8001bc0:	d040      	beq.n	8001c44 <HAL_GPIO_Init+0x194>
 8001bc2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001bc6:	42a0      	cmp	r0, r4
 8001bc8:	d03e      	beq.n	8001c48 <HAL_GPIO_Init+0x198>
 8001bca:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001bce:	42a0      	cmp	r0, r4
 8001bd0:	d03c      	beq.n	8001c4c <HAL_GPIO_Init+0x19c>
 8001bd2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001bd6:	42a0      	cmp	r0, r4
 8001bd8:	d03a      	beq.n	8001c50 <HAL_GPIO_Init+0x1a0>
 8001bda:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8001bde:	42a0      	cmp	r0, r4
 8001be0:	bf14      	ite	ne
 8001be2:	2408      	movne	r4, #8
 8001be4:	2407      	moveq	r4, #7
 8001be6:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bea:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bee:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf2:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8001bf8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001bfa:	bf0c      	ite	eq
 8001bfc:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001bfe:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c00:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8001c04:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001c06:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	bf0c      	ite	eq
 8001c0a:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001c0c:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c0e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8001c12:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001c14:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	bf0c      	ite	eq
 8001c18:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8001c1a:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c1c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001c1e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001c20:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001c22:	bf54      	ite	pl
 8001c24:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8001c26:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8001c28:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	2b10      	cmp	r3, #16
 8001c2e:	f47f af45 	bne.w	8001abc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001c32:	b003      	add	sp, #12
 8001c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c38:	2400      	movs	r4, #0
 8001c3a:	e7d4      	b.n	8001be6 <HAL_GPIO_Init+0x136>
 8001c3c:	2401      	movs	r4, #1
 8001c3e:	e7d2      	b.n	8001be6 <HAL_GPIO_Init+0x136>
 8001c40:	2402      	movs	r4, #2
 8001c42:	e7d0      	b.n	8001be6 <HAL_GPIO_Init+0x136>
 8001c44:	2403      	movs	r4, #3
 8001c46:	e7ce      	b.n	8001be6 <HAL_GPIO_Init+0x136>
 8001c48:	2404      	movs	r4, #4
 8001c4a:	e7cc      	b.n	8001be6 <HAL_GPIO_Init+0x136>
 8001c4c:	2405      	movs	r4, #5
 8001c4e:	e7ca      	b.n	8001be6 <HAL_GPIO_Init+0x136>
 8001c50:	2406      	movs	r4, #6
 8001c52:	e7c8      	b.n	8001be6 <HAL_GPIO_Init+0x136>
 8001c54:	40013c00 	.word	0x40013c00
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c60:	b10a      	cbz	r2, 8001c66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c62:	6181      	str	r1, [r0, #24]
  }
}
 8001c64:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c66:	0409      	lsls	r1, r1, #16
 8001c68:	e7fb      	b.n	8001c62 <HAL_GPIO_WritePin+0x2>

08001c6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c6a:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c6c:	4604      	mov	r4, r0
{
 8001c6e:	b08b      	sub	sp, #44	@ 0x2c
  if (hpcd == NULL)
 8001c70:	b360      	cbz	r0, 8001ccc <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c72:	f890 34bd 	ldrb.w	r3, [r0, #1213]	@ 0x4bd
  USBx = hpcd->Instance;
 8001c76:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c78:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001c7c:	b91b      	cbnz	r3, 8001c86 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c7e:	f880 24bc 	strb.w	r2, [r0, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c82:	f7ff fd57 	bl	8001734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c86:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c88:	466e      	mov	r6, sp
 8001c8a:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c8c:	f884 34bd 	strb.w	r3, [r4, #1213]	@ 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c90:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8001c92:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c94:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001c98:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8001c9c:	bf08      	it	eq
 8001c9e:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001ca0:	f001 f9b1 	bl	8003006 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001cac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cb0:	4625      	mov	r5, r4
 8001cb2:	e886 0003 	stmia.w	r6, {r0, r1}
 8001cb6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001cba:	f855 0b10 	ldr.w	r0, [r5], #16
 8001cbe:	f001 f94f 	bl	8002f60 <USB_CoreInit>
 8001cc2:	4606      	mov	r6, r0
 8001cc4:	b130      	cbz	r0, 8001cd4 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f884 34bd 	strb.w	r3, [r4, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001ccc:	2501      	movs	r5, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001cce:	4628      	mov	r0, r5
 8001cd0:	b00b      	add	sp, #44	@ 0x2c
 8001cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	f001 f99b 	bl	8003012 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cdc:	4631      	mov	r1, r6
 8001cde:	f8d4 c004 	ldr.w	ip, [r4, #4]
    hpcd->IN_ep[i].is_in = 1U;
 8001ce2:	2624      	movs	r6, #36	@ 0x24
 8001ce4:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ce8:	4608      	mov	r0, r1
 8001cea:	b2ca      	uxtb	r2, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cec:	3101      	adds	r1, #1
 8001cee:	4594      	cmp	ip, r2
 8001cf0:	d826      	bhi.n	8001d40 <HAL_PCD_Init+0xd6>
 8001cf2:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001cf4:	2624      	movs	r6, #36	@ 0x24
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfa:	3101      	adds	r1, #1
 8001cfc:	4584      	cmp	ip, r0
 8001cfe:	d82d      	bhi.n	8001d5c <HAL_PCD_Init+0xf2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d00:	466e      	mov	r6, sp
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d08:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001d0a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d0e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001d12:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001d16:	6820      	ldr	r0, [r4, #0]
 8001d18:	f001 f9fc 	bl	8003114 <USB_DevInit>
 8001d1c:	4605      	mov	r5, r0
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	d1d1      	bne.n	8001cc6 <HAL_PCD_Init+0x5c>
  hpcd->State = HAL_PCD_STATE_READY;
 8001d22:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001d24:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d28:	f884 34bd 	strb.w	r3, [r4, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
 8001d2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d102      	bne.n	8001d38 <HAL_PCD_Init+0xce>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d32:	4620      	mov	r0, r4
 8001d34:	f000 f81f 	bl	8001d76 <HAL_PCDEx_ActivateLPM>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d38:	6820      	ldr	r0, [r4, #0]
 8001d3a:	f001 faa9 	bl	8003290 <USB_DevDisconnect>
  return HAL_OK;
 8001d3e:	e7c6      	b.n	8001cce <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].is_in = 1U;
 8001d40:	fb06 4302 	mla	r3, r6, r2, r4
 8001d44:	f883 e03d 	strb.w	lr, [r3, #61]	@ 0x3d
    hpcd->IN_ep[i].num = i;
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d50:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d54:	6558      	str	r0, [r3, #84]	@ 0x54
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d56:	e9c3 0012 	strd	r0, r0, [r3, #72]	@ 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5a:	e7c6      	b.n	8001cea <HAL_PCD_Init+0x80>
    hpcd->OUT_ep[i].is_in = 0U;
 8001d5c:	fb06 4300 	mla	r3, r6, r0, r4
 8001d60:	f883 227d 	strb.w	r2, [r3, #637]	@ 0x27d
    hpcd->OUT_ep[i].num = i;
 8001d64:	f883 027c 	strb.w	r0, [r3, #636]	@ 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d68:	f883 2280 	strb.w	r2, [r3, #640]	@ 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d70:	e9c3 22a2 	strd	r2, r2, [r3, #648]	@ 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d74:	e7c0      	b.n	8001cf8 <HAL_PCD_Init+0x8e>

08001d76 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8001d76:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d78:	6802      	ldr	r2, [r0, #0]
{
 8001d7a:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001d7c:	f8c0 1500 	str.w	r1, [r0, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8001d80:	2000      	movs	r0, #0
 8001d82:	f883 04f4 	strb.w	r0, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d86:	6993      	ldr	r3, [r2, #24]
 8001d88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d8c:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d8e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	f043 0303 	orr.w	r3, r3, #3
 8001d98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 8001d9a:	4770      	bx	lr

08001d9c <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9c:	4a02      	ldr	r2, [pc, #8]	@ (8001da8 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001d9e:	6813      	ldr	r3, [r2, #0]
 8001da0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da4:	6013      	str	r3, [r2, #0]
}
 8001da6:	4770      	bx	lr
 8001da8:	40007000 	.word	0x40007000

08001dac <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001dae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001db2:	4c19      	ldr	r4, [pc, #100]	@ (8001e18 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001db8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dca:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dcc:	f7ff fda0 	bl	8001910 <HAL_GetTick>
 8001dd0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dd2:	6863      	ldr	r3, [r4, #4]
 8001dd4:	03da      	lsls	r2, r3, #15
 8001dd6:	d50c      	bpl.n	8001df2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dd8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001dda:	4d0f      	ldr	r5, [pc, #60]	@ (8001e18 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001de2:	f7ff fd95 	bl	8001910 <HAL_GetTick>
 8001de6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de8:	686b      	ldr	r3, [r5, #4]
 8001dea:	039b      	lsls	r3, r3, #14
 8001dec:	d50a      	bpl.n	8001e04 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001dee:	2000      	movs	r0, #0
 8001df0:	e006      	b.n	8001e00 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001df2:	f7ff fd8d 	bl	8001910 <HAL_GetTick>
 8001df6:	1b40      	subs	r0, r0, r5
 8001df8:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001dfc:	d9e9      	bls.n	8001dd2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001dfe:	2003      	movs	r0, #3
}
 8001e00:	b003      	add	sp, #12
 8001e02:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e04:	f7ff fd84 	bl	8001910 <HAL_GetTick>
 8001e08:	1b00      	subs	r0, r0, r4
 8001e0a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8001e0e:	d9eb      	bls.n	8001de8 <HAL_PWREx_EnableOverDrive+0x3c>
 8001e10:	e7f5      	b.n	8001dfe <HAL_PWREx_EnableOverDrive+0x52>
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40007000 	.word	0x40007000

08001e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e20:	4604      	mov	r4, r0
 8001e22:	b340      	cbz	r0, 8001e76 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e24:	6803      	ldr	r3, [r0, #0]
 8001e26:	07de      	lsls	r6, r3, #31
 8001e28:	d410      	bmi.n	8001e4c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	079d      	lsls	r5, r3, #30
 8001e2e:	d461      	bmi.n	8001ef4 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	0719      	lsls	r1, r3, #28
 8001e34:	f100 80a6 	bmi.w	8001f84 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	075a      	lsls	r2, r3, #29
 8001e3c:	f100 80c7 	bmi.w	8001fce <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e40:	69a2      	ldr	r2, [r4, #24]
 8001e42:	2a00      	cmp	r2, #0
 8001e44:	f040 8130 	bne.w	80020a8 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001e48:	2000      	movs	r0, #0
 8001e4a:	e02c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4c:	4b94      	ldr	r3, [pc, #592]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	f002 020c 	and.w	r2, r2, #12
 8001e54:	2a04      	cmp	r2, #4
 8001e56:	d007      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	f002 020c 	and.w	r2, r2, #12
 8001e5e:	2a08      	cmp	r2, #8
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0259      	lsls	r1, r3, #9
 8001e66:	d508      	bpl.n	8001e7a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b8d      	ldr	r3, [pc, #564]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	039a      	lsls	r2, r3, #14
 8001e6e:	d5dc      	bpl.n	8001e2a <HAL_RCC_OscConfig+0xe>
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1d9      	bne.n	8001e2a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	6863      	ldr	r3, [r4, #4]
 8001e7c:	4d88      	ldr	r5, [pc, #544]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e82:	d113      	bne.n	8001eac <HAL_RCC_OscConfig+0x90>
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fd40 	bl	8001910 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e90:	4e83      	ldr	r6, [pc, #524]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8001e92:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e94:	6833      	ldr	r3, [r6, #0]
 8001e96:	039b      	lsls	r3, r3, #14
 8001e98:	d4c7      	bmi.n	8001e2a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9a:	f7ff fd39 	bl	8001910 <HAL_GetTick>
 8001e9e:	1b40      	subs	r0, r0, r5
 8001ea0:	2864      	cmp	r0, #100	@ 0x64
 8001ea2:	d9f7      	bls.n	8001e94 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001ea4:	2003      	movs	r0, #3
}
 8001ea6:	b002      	add	sp, #8
 8001ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	b99b      	cbnz	r3, 8001ed6 <HAL_RCC_OscConfig+0xba>
 8001eae:	682b      	ldr	r3, [r5, #0]
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	682b      	ldr	r3, [r5, #0]
 8001eb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ebc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fd27 	bl	8001910 <HAL_GetTick>
 8001ec2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec4:	682b      	ldr	r3, [r5, #0]
 8001ec6:	039f      	lsls	r7, r3, #14
 8001ec8:	d5af      	bpl.n	8001e2a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eca:	f7ff fd21 	bl	8001910 <HAL_GetTick>
 8001ece:	1b80      	subs	r0, r0, r6
 8001ed0:	2864      	cmp	r0, #100	@ 0x64
 8001ed2:	d9f7      	bls.n	8001ec4 <HAL_RCC_OscConfig+0xa8>
 8001ed4:	e7e6      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eda:	682b      	ldr	r3, [r5, #0]
 8001edc:	d103      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xca>
 8001ede:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee2:	602b      	str	r3, [r5, #0]
 8001ee4:	e7ce      	b.n	8001e84 <HAL_RCC_OscConfig+0x68>
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eea:	602b      	str	r3, [r5, #0]
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ef2:	e7ca      	b.n	8001e8a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	f012 0f0c 	tst.w	r2, #12
 8001efc:	d007      	beq.n	8001f0e <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	f002 020c 	and.w	r2, r2, #12
 8001f04:	2a08      	cmp	r2, #8
 8001f06:	d111      	bne.n	8001f2c <HAL_RCC_OscConfig+0x110>
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	025d      	lsls	r5, r3, #9
 8001f0c:	d40e      	bmi.n	8001f2c <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	4a64      	ldr	r2, [pc, #400]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001f10:	6813      	ldr	r3, [r2, #0]
 8001f12:	0799      	lsls	r1, r3, #30
 8001f14:	d502      	bpl.n	8001f1c <HAL_RCC_OscConfig+0x100>
 8001f16:	68e3      	ldr	r3, [r4, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d1ac      	bne.n	8001e76 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	6813      	ldr	r3, [r2, #0]
 8001f1e:	6921      	ldr	r1, [r4, #16]
 8001f20:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001f24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f28:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e781      	b.n	8001e30 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f2c:	68e3      	ldr	r3, [r4, #12]
 8001f2e:	4d5c      	ldr	r5, [pc, #368]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001f30:	b1bb      	cbz	r3, 8001f62 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8001f32:	682b      	ldr	r3, [r5, #0]
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fce9 	bl	8001910 <HAL_GetTick>
 8001f3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	682b      	ldr	r3, [r5, #0]
 8001f42:	079b      	lsls	r3, r3, #30
 8001f44:	d507      	bpl.n	8001f56 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	682b      	ldr	r3, [r5, #0]
 8001f48:	6922      	ldr	r2, [r4, #16]
 8001f4a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001f4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f52:	602b      	str	r3, [r5, #0]
 8001f54:	e76c      	b.n	8001e30 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fcdb 	bl	8001910 <HAL_GetTick>
 8001f5a:	1b80      	subs	r0, r0, r6
 8001f5c:	2802      	cmp	r0, #2
 8001f5e:	d9ef      	bls.n	8001f40 <HAL_RCC_OscConfig+0x124>
 8001f60:	e7a0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001f62:	682b      	ldr	r3, [r5, #0]
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fcd1 	bl	8001910 <HAL_GetTick>
 8001f6e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f70:	682b      	ldr	r3, [r5, #0]
 8001f72:	079f      	lsls	r7, r3, #30
 8001f74:	f57f af5c 	bpl.w	8001e30 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f78:	f7ff fcca 	bl	8001910 <HAL_GetTick>
 8001f7c:	1b80      	subs	r0, r0, r6
 8001f7e:	2802      	cmp	r0, #2
 8001f80:	d9f6      	bls.n	8001f70 <HAL_RCC_OscConfig+0x154>
 8001f82:	e78f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f84:	6963      	ldr	r3, [r4, #20]
 8001f86:	4d46      	ldr	r5, [pc, #280]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001f88:	b183      	cbz	r3, 8001fac <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8001f8a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8001f92:	f7ff fcbd 	bl	8001910 <HAL_GetTick>
 8001f96:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f98:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001f9a:	079b      	lsls	r3, r3, #30
 8001f9c:	f53f af4c 	bmi.w	8001e38 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fcb6 	bl	8001910 <HAL_GetTick>
 8001fa4:	1b80      	subs	r0, r0, r6
 8001fa6:	2802      	cmp	r0, #2
 8001fa8:	d9f6      	bls.n	8001f98 <HAL_RCC_OscConfig+0x17c>
 8001faa:	e77b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8001fac:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fcac 	bl	8001910 <HAL_GetTick>
 8001fb8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fba:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8001fbc:	079f      	lsls	r7, r3, #30
 8001fbe:	f57f af3b 	bpl.w	8001e38 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fca5 	bl	8001910 <HAL_GetTick>
 8001fc6:	1b80      	subs	r0, r0, r6
 8001fc8:	2802      	cmp	r0, #2
 8001fca:	d9f6      	bls.n	8001fba <HAL_RCC_OscConfig+0x19e>
 8001fcc:	e76a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b34      	ldr	r3, [pc, #208]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001fd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fd2:	00d5      	lsls	r5, r2, #3
 8001fd4:	d427      	bmi.n	8002026 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 8001fd8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001fde:	641a      	str	r2, [r3, #64]	@ 0x40
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fea:	4d2e      	ldr	r5, [pc, #184]	@ (80020a4 <HAL_RCC_OscConfig+0x288>)
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	05d8      	lsls	r0, r3, #23
 8001ff0:	d51b      	bpl.n	800202a <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff2:	68a3      	ldr	r3, [r4, #8]
 8001ff4:	4d2a      	ldr	r5, [pc, #168]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d127      	bne.n	800204a <HAL_RCC_OscConfig+0x22e>
 8001ffa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8002006:	f7ff fc83 	bl	8001910 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	4e25      	ldr	r6, [pc, #148]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 800200c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200e:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8002010:	079a      	lsls	r2, r3, #30
 8002012:	d53f      	bpl.n	8002094 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8002014:	2f00      	cmp	r7, #0
 8002016:	f43f af13 	beq.w	8001e40 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <HAL_RCC_OscConfig+0x284>)
 800201c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800201e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002022:	6413      	str	r3, [r2, #64]	@ 0x40
 8002024:	e70c      	b.n	8001e40 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8002026:	2700      	movs	r7, #0
 8002028:	e7df      	b.n	8001fea <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002030:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002032:	f7ff fc6d 	bl	8001910 <HAL_GetTick>
 8002036:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	682b      	ldr	r3, [r5, #0]
 800203a:	05d9      	lsls	r1, r3, #23
 800203c:	d4d9      	bmi.n	8001ff2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203e:	f7ff fc67 	bl	8001910 <HAL_GetTick>
 8002042:	1b80      	subs	r0, r0, r6
 8002044:	2864      	cmp	r0, #100	@ 0x64
 8002046:	d9f7      	bls.n	8002038 <HAL_RCC_OscConfig+0x21c>
 8002048:	e72c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204a:	b9ab      	cbnz	r3, 8002078 <HAL_RCC_OscConfig+0x25c>
 800204c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	672b      	str	r3, [r5, #112]	@ 0x70
 8002058:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800205a:	f023 0304 	bic.w	r3, r3, #4
 800205e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002060:	f7ff fc56 	bl	8001910 <HAL_GetTick>
 8002064:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8002068:	079b      	lsls	r3, r3, #30
 800206a:	d5d3      	bpl.n	8002014 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7ff fc50 	bl	8001910 <HAL_GetTick>
 8002070:	1b80      	subs	r0, r0, r6
 8002072:	4540      	cmp	r0, r8
 8002074:	d9f7      	bls.n	8002066 <HAL_RCC_OscConfig+0x24a>
 8002076:	e715      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	2b05      	cmp	r3, #5
 800207a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800207c:	d103      	bne.n	8002086 <HAL_RCC_OscConfig+0x26a>
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	672b      	str	r3, [r5, #112]	@ 0x70
 8002084:	e7b9      	b.n	8001ffa <HAL_RCC_OscConfig+0x1de>
 8002086:	f023 0301 	bic.w	r3, r3, #1
 800208a:	672b      	str	r3, [r5, #112]	@ 0x70
 800208c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	e7b5      	b.n	8002000 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002094:	f7ff fc3c 	bl	8001910 <HAL_GetTick>
 8002098:	1b40      	subs	r0, r0, r5
 800209a:	4540      	cmp	r0, r8
 800209c:	d9b7      	bls.n	800200e <HAL_RCC_OscConfig+0x1f2>
 800209e:	e701      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a8:	4d38      	ldr	r5, [pc, #224]	@ (800218c <HAL_RCC_OscConfig+0x370>)
 80020aa:	68ab      	ldr	r3, [r5, #8]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d041      	beq.n	8002138 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80020b4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020bc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020be:	d12e      	bne.n	800211e <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80020c0:	f7ff fc26 	bl	8001910 <HAL_GetTick>
 80020c4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c6:	682b      	ldr	r3, [r5, #0]
 80020c8:	0199      	lsls	r1, r3, #6
 80020ca:	d422      	bmi.n	8002112 <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80020ce:	085b      	lsrs	r3, r3, #1
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80020d6:	430b      	orrs	r3, r1
 80020d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80020dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80020de:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80020e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80020e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80020e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020ec:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020f6:	f7ff fc0b 	bl	8001910 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fa:	4d24      	ldr	r5, [pc, #144]	@ (800218c <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 80020fc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	682b      	ldr	r3, [r5, #0]
 8002100:	019a      	lsls	r2, r3, #6
 8002102:	f53f aea1 	bmi.w	8001e48 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff fc03 	bl	8001910 <HAL_GetTick>
 800210a:	1b00      	subs	r0, r0, r4
 800210c:	2802      	cmp	r0, #2
 800210e:	d9f6      	bls.n	80020fe <HAL_RCC_OscConfig+0x2e2>
 8002110:	e6c8      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7ff fbfd 	bl	8001910 <HAL_GetTick>
 8002116:	1b80      	subs	r0, r0, r6
 8002118:	2802      	cmp	r0, #2
 800211a:	d9d4      	bls.n	80020c6 <HAL_RCC_OscConfig+0x2aa>
 800211c:	e6c2      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800211e:	f7ff fbf7 	bl	8001910 <HAL_GetTick>
 8002122:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002124:	682b      	ldr	r3, [r5, #0]
 8002126:	019b      	lsls	r3, r3, #6
 8002128:	f57f ae8e 	bpl.w	8001e48 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212c:	f7ff fbf0 	bl	8001910 <HAL_GetTick>
 8002130:	1b00      	subs	r0, r0, r4
 8002132:	2802      	cmp	r0, #2
 8002134:	d9f6      	bls.n	8002124 <HAL_RCC_OscConfig+0x308>
 8002136:	e6b5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002138:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800213a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800213c:	f43f ae9b 	beq.w	8001e76 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002144:	69e1      	ldr	r1, [r4, #28]
 8002146:	428a      	cmp	r2, r1
 8002148:	f47f ae95 	bne.w	8001e76 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800214c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002150:	6a21      	ldr	r1, [r4, #32]
 8002152:	428a      	cmp	r2, r1
 8002154:	f47f ae8f 	bne.w	8001e76 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002158:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800215e:	401a      	ands	r2, r3
 8002160:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002164:	f47f ae87 	bne.w	8001e76 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002168:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800216a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800216e:	0852      	lsrs	r2, r2, #1
 8002170:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002176:	f47f ae7e 	bne.w	8001e76 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800217a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800217c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002180:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002184:	bf14      	ite	ne
 8002186:	2001      	movne	r0, #1
 8002188:	2000      	moveq	r0, #0
 800218a:	e68c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x8a>
 800218c:	40023800 	.word	0x40023800

08002190 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002190:	4913      	ldr	r1, [pc, #76]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002192:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	688b      	ldr	r3, [r1, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b04      	cmp	r3, #4
 800219c:	d01b      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x46>
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11b      	bne.n	80021da <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021a4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a6:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021ac:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80021b4:	bf1a      	itte	ne
 80021b6:	480b      	ldrne	r0, [pc, #44]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x54>)
 80021b8:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	480b      	ldreq	r0, [pc, #44]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x58>)
 80021bc:	fba1 0100 	umull	r0, r1, r1, r0
 80021c0:	f7fe fd7a 	bl	8000cb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80021cc:	3301      	adds	r3, #1
 80021ce:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80021d0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021d4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d6:	4803      	ldr	r0, [pc, #12]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x54>)
 80021d8:	e7fc      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80021da:	4803      	ldr	r0, [pc, #12]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80021dc:	e7fa      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x44>
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	007a1200 	.word	0x007a1200
 80021e8:	00f42400 	.word	0x00f42400

080021ec <HAL_RCC_ClockConfig>:
{
 80021ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80021f2:	4604      	mov	r4, r0
 80021f4:	b910      	cbnz	r0, 80021fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
}
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4a45      	ldr	r2, [pc, #276]	@ (8002314 <HAL_RCC_ClockConfig+0x128>)
 80021fe:	6813      	ldr	r3, [r2, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	428b      	cmp	r3, r1
 8002206:	d328      	bcc.n	800225a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	6821      	ldr	r1, [r4, #0]
 800220a:	078f      	lsls	r7, r1, #30
 800220c:	d430      	bmi.n	8002270 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	07c8      	lsls	r0, r1, #31
 8002210:	d443      	bmi.n	800229a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002212:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HAL_RCC_ClockConfig+0x128>)
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	42ab      	cmp	r3, r5
 800221c:	d866      	bhi.n	80022ec <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	0751      	lsls	r1, r2, #29
 8002222:	d46f      	bmi.n	8002304 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	0713      	lsls	r3, r2, #28
 8002226:	d507      	bpl.n	8002238 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002228:	4a3b      	ldr	r2, [pc, #236]	@ (8002318 <HAL_RCC_ClockConfig+0x12c>)
 800222a:	6921      	ldr	r1, [r4, #16]
 800222c:	6893      	ldr	r3, [r2, #8]
 800222e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002232:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002236:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002238:	f7ff ffaa 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800223c:	4b36      	ldr	r3, [pc, #216]	@ (8002318 <HAL_RCC_ClockConfig+0x12c>)
 800223e:	4a37      	ldr	r2, [pc, #220]	@ (800231c <HAL_RCC_ClockConfig+0x130>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	40d8      	lsrs	r0, r3
 800224a:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <HAL_RCC_ClockConfig+0x134>)
 800224c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800224e:	4b35      	ldr	r3, [pc, #212]	@ (8002324 <HAL_RCC_ClockConfig+0x138>)
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	f7ff fb21 	bl	8001898 <HAL_InitTick>
  return HAL_OK;
 8002256:	2000      	movs	r0, #0
 8002258:	e7ce      	b.n	80021f8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	6813      	ldr	r3, [r2, #0]
 800225c:	f023 030f 	bic.w	r3, r3, #15
 8002260:	430b      	orrs	r3, r1
 8002262:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002264:	6813      	ldr	r3, [r2, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	428b      	cmp	r3, r1
 800226c:	d1c3      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xa>
 800226e:	e7cb      	b.n	8002208 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	f011 0f04 	tst.w	r1, #4
 8002274:	4b28      	ldr	r3, [pc, #160]	@ (8002318 <HAL_RCC_ClockConfig+0x12c>)
 8002276:	d003      	beq.n	8002280 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 800227e:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	070e      	lsls	r6, r1, #28
 8002282:	d503      	bpl.n	800228c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800228a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	68a0      	ldr	r0, [r4, #8]
 8002290:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002294:	4302      	orrs	r2, r0
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	e7b9      	b.n	800220e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	6861      	ldr	r1, [r4, #4]
 800229c:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <HAL_RCC_ClockConfig+0x12c>)
 800229e:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a0:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	d11b      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a4:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	d0a5      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b0:	4f19      	ldr	r7, [pc, #100]	@ (8002318 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	f022 0203 	bic.w	r2, r2, #3
 80022b6:	430a      	orrs	r2, r1
 80022b8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80022ba:	f7ff fb29 	bl	8001910 <HAL_GetTick>
 80022be:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	6862      	ldr	r2, [r4, #4]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022cc:	d0a1      	beq.n	8002212 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ce:	f7ff fb1f 	bl	8001910 <HAL_GetTick>
 80022d2:	1b80      	subs	r0, r0, r6
 80022d4:	4540      	cmp	r0, r8
 80022d6:	d9f3      	bls.n	80022c0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80022d8:	2003      	movs	r0, #3
 80022da:	e78d      	b.n	80021f8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022dc:	2902      	cmp	r1, #2
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e0:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80022e4:	e7e0      	b.n	80022a8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	f012 0f02 	tst.w	r2, #2
 80022ea:	e7dd      	b.n	80022a8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	f023 030f 	bic.w	r3, r3, #15
 80022f2:	432b      	orrs	r3, r5
 80022f4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	42ab      	cmp	r3, r5
 80022fe:	f47f af7a 	bne.w	80021f6 <HAL_RCC_ClockConfig+0xa>
 8002302:	e78c      	b.n	800221e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002304:	4904      	ldr	r1, [pc, #16]	@ (8002318 <HAL_RCC_ClockConfig+0x12c>)
 8002306:	68e0      	ldr	r0, [r4, #12]
 8002308:	688b      	ldr	r3, [r1, #8]
 800230a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800230e:	4303      	orrs	r3, r0
 8002310:	608b      	str	r3, [r1, #8]
 8002312:	e787      	b.n	8002224 <HAL_RCC_ClockConfig+0x38>
 8002314:	40023c00 	.word	0x40023c00
 8002318:	40023800 	.word	0x40023800
 800231c:	0800b6dc 	.word	0x0800b6dc
 8002320:	20000000 	.word	0x20000000
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <HAL_RCC_GetPCLK1Freq+0x14>)
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <HAL_RCC_GetPCLK1Freq+0x18>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	4a03      	ldr	r2, [pc, #12]	@ (8002344 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002336:	6810      	ldr	r0, [r2, #0]
}
 8002338:	40d8      	lsrs	r0, r3
 800233a:	4770      	bx	lr
 800233c:	40023800 	.word	0x40023800
 8002340:	0800b6d4 	.word	0x0800b6d4
 8002344:	20000000 	.word	0x20000000

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <HAL_RCC_GetPCLK2Freq+0x14>)
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_RCC_GetPCLK2Freq+0x18>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002352:	5cd3      	ldrb	r3, [r2, r3]
 8002354:	4a03      	ldr	r2, [pc, #12]	@ (8002364 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002356:	6810      	ldr	r0, [r2, #0]
}
 8002358:	40d8      	lsrs	r0, r3
 800235a:	4770      	bx	lr
 800235c:	40023800 	.word	0x40023800
 8002360:	0800b6d4 	.word	0x0800b6d4
 8002364:	20000000 	.word	0x20000000

08002368 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002368:	6803      	ldr	r3, [r0, #0]
{
 800236a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800236e:	f013 0601 	ands.w	r6, r3, #1
{
 8002372:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002374:	d00b      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002376:	4aac      	ldr	r2, [pc, #688]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002378:	6891      	ldr	r1, [r2, #8]
 800237a:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 800237e:	6091      	str	r1, [r2, #8]
 8002380:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
 8002382:	6891      	ldr	r1, [r2, #8]
 8002384:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002386:	fab6 f686 	clz	r6, r6
 800238a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800238c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800238e:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8002392:	d012      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002394:	49a4      	ldr	r1, [pc, #656]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002396:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8002398:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800239c:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a0:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 80023a4:	bf08      	it	eq
 80023a6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023a8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023ac:	bf16      	itet	ne
 80023ae:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80023b2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023b4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023b6:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023ba:	02d9      	lsls	r1, r3, #11
 80023bc:	d510      	bpl.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023be:	489a      	ldr	r0, [pc, #616]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80023c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80023c2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023c6:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023ca:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80023ce:	ea42 0201 	orr.w	r2, r2, r1
 80023d2:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023d6:	f000 814c 	beq.w	8002672 <HAL_RCCEx_PeriphCLKConfig+0x30a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80023da:	2900      	cmp	r1, #0
 80023dc:	bf08      	it	eq
 80023de:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e0:	069a      	lsls	r2, r3, #26
 80023e2:	d532      	bpl.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	4b90      	ldr	r3, [pc, #576]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023e6:	4f91      	ldr	r7, [pc, #580]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002402:	f7ff fa85 	bl	8001910 <HAL_GetTick>
 8002406:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	05db      	lsls	r3, r3, #23
 800240c:	f140 8133 	bpl.w	8002676 <HAL_RCCEx_PeriphCLKConfig+0x30e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002410:	4f85      	ldr	r7, [pc, #532]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002412:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002414:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002416:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800241a:	f040 8137 	bne.w	800268c <HAL_RCCEx_PeriphCLKConfig+0x324>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800241e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002420:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002424:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002428:	4a7f      	ldr	r2, [pc, #508]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800242a:	f040 8154 	bne.w	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800242e:	6891      	ldr	r1, [r2, #8]
 8002430:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8002434:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8002438:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 800243c:	4301      	orrs	r1, r0
 800243e:	6091      	str	r1, [r2, #8]
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8002446:	430b      	orrs	r3, r1
 8002448:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	06da      	lsls	r2, r3, #27
 800244e:	d50c      	bpl.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002450:	4a75      	ldr	r2, [pc, #468]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002452:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002456:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800245a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 800245e:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8002462:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002464:	4301      	orrs	r1, r0
 8002466:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800246a:	045f      	lsls	r7, r3, #17
 800246c:	d508      	bpl.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800246e:	496e      	ldr	r1, [pc, #440]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002470:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002472:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002476:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800247a:	4302      	orrs	r2, r0
 800247c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002480:	0418      	lsls	r0, r3, #16
 8002482:	d508      	bpl.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002484:	4968      	ldr	r1, [pc, #416]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002486:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002488:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800248c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002490:	4302      	orrs	r2, r0
 8002492:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002496:	03d9      	lsls	r1, r3, #15
 8002498:	d508      	bpl.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800249a:	4963      	ldr	r1, [pc, #396]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800249c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800249e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80024a2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80024a6:	4302      	orrs	r2, r0
 80024a8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ac:	065a      	lsls	r2, r3, #25
 80024ae:	d508      	bpl.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b0:	495d      	ldr	r1, [pc, #372]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80024b2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80024b4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80024b8:	f022 0203 	bic.w	r2, r2, #3
 80024bc:	4302      	orrs	r2, r0
 80024be:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c2:	061f      	lsls	r7, r3, #24
 80024c4:	d508      	bpl.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024c6:	4958      	ldr	r1, [pc, #352]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80024c8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80024ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80024ce:	f022 020c 	bic.w	r2, r2, #12
 80024d2:	4302      	orrs	r2, r0
 80024d4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024d8:	05d8      	lsls	r0, r3, #23
 80024da:	d508      	bpl.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024dc:	4952      	ldr	r1, [pc, #328]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80024de:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80024e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80024e4:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80024e8:	4302      	orrs	r2, r0
 80024ea:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ee:	0599      	lsls	r1, r3, #22
 80024f0:	d508      	bpl.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024f2:	494d      	ldr	r1, [pc, #308]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80024f4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80024f6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80024fa:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80024fe:	4302      	orrs	r2, r0
 8002500:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002504:	055a      	lsls	r2, r3, #21
 8002506:	d508      	bpl.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002508:	4947      	ldr	r1, [pc, #284]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800250a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800250c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002510:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002514:	4302      	orrs	r2, r0
 8002516:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800251a:	051f      	lsls	r7, r3, #20
 800251c:	d508      	bpl.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800251e:	4942      	ldr	r1, [pc, #264]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002520:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002522:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002526:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800252a:	4302      	orrs	r2, r0
 800252c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002530:	04d8      	lsls	r0, r3, #19
 8002532:	d508      	bpl.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002534:	493c      	ldr	r1, [pc, #240]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002536:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002538:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800253c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002540:	4302      	orrs	r2, r0
 8002542:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002546:	0499      	lsls	r1, r3, #18
 8002548:	d508      	bpl.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800254a:	4937      	ldr	r1, [pc, #220]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800254c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800254e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002552:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002556:	4302      	orrs	r2, r0
 8002558:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800255c:	029a      	lsls	r2, r3, #10
 800255e:	d50c      	bpl.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002560:	4831      	ldr	r0, [pc, #196]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002562:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8002564:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8002568:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800256c:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8002570:	bf08      	it	eq
 8002572:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002574:	430a      	orrs	r2, r1
 8002576:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800257a:	035f      	lsls	r7, r3, #13
 800257c:	d508      	bpl.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257e:	492a      	ldr	r1, [pc, #168]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002580:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8002582:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8002586:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800258a:	4302      	orrs	r2, r0
 800258c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002590:	0218      	lsls	r0, r3, #8
 8002592:	d508      	bpl.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002594:	4924      	ldr	r1, [pc, #144]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002596:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8002598:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 800259c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80025a0:	4302      	orrs	r2, r0
 80025a2:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025a6:	0159      	lsls	r1, r3, #5
 80025a8:	d508      	bpl.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80025aa:	491f      	ldr	r1, [pc, #124]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80025ac:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80025ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 80025b2:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 80025b6:	4302      	orrs	r2, r0
 80025b8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025bc:	2e00      	cmp	r6, #0
 80025be:	f040 808e 	bne.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x376>
 80025c2:	019a      	lsls	r2, r3, #6
 80025c4:	f100 808b 	bmi.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025c8:	2d01      	cmp	r5, #1
 80025ca:	d150      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025cc:	4d16      	ldr	r5, [pc, #88]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80025ce:	682b      	ldr	r3, [r5, #0]
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d6:	f7ff f99b 	bl	8001910 <HAL_GetTick>
 80025da:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80025dc:	682b      	ldr	r3, [r5, #0]
 80025de:	009f      	lsls	r7, r3, #2
 80025e0:	f100 80e0 	bmi.w	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025e4:	6821      	ldr	r1, [r4, #0]
 80025e6:	030d      	lsls	r5, r1, #12
 80025e8:	d501      	bpl.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x286>
 80025ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80025ec:	b11b      	cbz	r3, 80025f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80025ee:	02c8      	lsls	r0, r1, #11
 80025f0:	d51e      	bpl.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025f2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025f4:	b9e3      	cbnz	r3, 8002630 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80025f8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025fc:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	f400 3040 	and.w	r0, r0, #196608	@ 0x30000
 8002606:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800260a:	4303      	orrs	r3, r0
 800260c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002610:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002614:	6a20      	ldr	r0, [r4, #32]
 8002616:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 800261a:	3801      	subs	r0, #1
 800261c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002620:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002624:	e004      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002630:	028a      	lsls	r2, r1, #10
 8002632:	d510      	bpl.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8002634:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8002636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800263a:	d10c      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800263c:	4960      	ldr	r1, [pc, #384]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800263e:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002640:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002644:	6920      	ldr	r0, [r4, #16]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	f002 6270 	and.w	r2, r2, #251658240	@ 0xf000000
 800264c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002656:	4c5a      	ldr	r4, [pc, #360]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7ff f956 	bl	8001910 <HAL_GetTick>
 8002664:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	f140 80a2 	bpl.w	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800266e:	2000      	movs	r0, #0
 8002670:	e009      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      plli2sused = 1;
 8002672:	2601      	movs	r6, #1
 8002674:	e6b4      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7ff f94b 	bl	8001910 <HAL_GetTick>
 800267a:	eba0 0008 	sub.w	r0, r0, r8
 800267e:	2864      	cmp	r0, #100	@ 0x64
 8002680:	f67f aec2 	bls.w	8002408 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8002684:	2003      	movs	r0, #3
}
 8002686:	b003      	add	sp, #12
 8002688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800268c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002690:	4293      	cmp	r3, r2
 8002692:	f43f aec4 	beq.w	800241e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002698:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800269a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800269e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80026a2:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026a4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80026a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80026aa:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 80026ac:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026b0:	07d8      	lsls	r0, r3, #31
 80026b2:	f57f aeb4 	bpl.w	800241e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        tickstart = HAL_GetTick();
 80026b6:	f7ff f92b 	bl	8001910 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80026be:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026c2:	0799      	lsls	r1, r3, #30
 80026c4:	f53f aeab 	bmi.w	800241e <HAL_RCCEx_PeriphCLKConfig+0xb6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7ff f922 	bl	8001910 <HAL_GetTick>
 80026cc:	eba0 0008 	sub.w	r0, r0, r8
 80026d0:	4548      	cmp	r0, r9
 80026d2:	d9f5      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80026d4:	e7d6      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d6:	6891      	ldr	r1, [r2, #8]
 80026d8:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 80026dc:	e6af      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    __HAL_RCC_PLLI2S_DISABLE();
 80026de:	4e38      	ldr	r6, [pc, #224]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80026e0:	6833      	ldr	r3, [r6, #0]
 80026e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026e6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80026e8:	f7ff f912 	bl	8001910 <HAL_GetTick>
 80026ec:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ee:	6833      	ldr	r3, [r6, #0]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	d451      	bmi.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026f4:	6822      	ldr	r2, [r4, #0]
 80026f6:	07d7      	lsls	r7, r2, #31
 80026f8:	d50d      	bpl.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80026fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80026fc:	b95b      	cbnz	r3, 8002716 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026fe:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002702:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 8002706:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 800270a:	071b      	lsls	r3, r3, #28
 800270c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002710:	430b      	orrs	r3, r1
 8002712:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002716:	0310      	lsls	r0, r2, #12
 8002718:	d503      	bpl.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800271a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800271c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002720:	d005      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8002722:	02d1      	lsls	r1, r2, #11
 8002724:	d519      	bpl.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002726:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002728:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800272c:	d115      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800272e:	4924      	ldr	r1, [pc, #144]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002730:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002732:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002736:	6866      	ldr	r6, [r4, #4]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 800273e:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002742:	4303      	orrs	r3, r0
 8002744:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002748:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 800274c:	69e3      	ldr	r3, [r4, #28]
 800274e:	f020 001f 	bic.w	r0, r0, #31
 8002752:	3b01      	subs	r3, #1
 8002754:	4303      	orrs	r3, r0
 8002756:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800275a:	0192      	lsls	r2, r2, #6
 800275c:	d50a      	bpl.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800275e:	68e3      	ldr	r3, [r4, #12]
 8002760:	6862      	ldr	r2, [r4, #4]
 8002762:	061b      	lsls	r3, r3, #24
 8002764:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002768:	68a2      	ldr	r2, [r4, #8]
 800276a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800276e:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002770:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002774:	4e12      	ldr	r6, [pc, #72]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002776:	6833      	ldr	r3, [r6, #0]
 8002778:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800277c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800277e:	f7ff f8c7 	bl	8001910 <HAL_GetTick>
 8002782:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002784:	6833      	ldr	r3, [r6, #0]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	f53f af1e 	bmi.w	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800278c:	f7ff f8c0 	bl	8001910 <HAL_GetTick>
 8002790:	1bc0      	subs	r0, r0, r7
 8002792:	2864      	cmp	r0, #100	@ 0x64
 8002794:	d9f6      	bls.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002796:	e775      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002798:	f7ff f8ba 	bl	8001910 <HAL_GetTick>
 800279c:	1bc0      	subs	r0, r0, r7
 800279e:	2864      	cmp	r0, #100	@ 0x64
 80027a0:	d9a5      	bls.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x386>
 80027a2:	e76f      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027a4:	f7ff f8b4 	bl	8001910 <HAL_GetTick>
 80027a8:	1b80      	subs	r0, r0, r6
 80027aa:	2864      	cmp	r0, #100	@ 0x64
 80027ac:	f67f af16 	bls.w	80025dc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80027b0:	e768      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027b2:	f7ff f8ad 	bl	8001910 <HAL_GetTick>
 80027b6:	1b40      	subs	r0, r0, r5
 80027b8:	2864      	cmp	r0, #100	@ 0x64
 80027ba:	f67f af54 	bls.w	8002666 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80027be:	e761      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80027c0:	40023800 	.word	0x40023800

080027c4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c4:	4a30      	ldr	r2, [pc, #192]	@ (8002888 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80027c6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c8:	4290      	cmp	r0, r2
 80027ca:	d012      	beq.n	80027f2 <TIM_Base_SetConfig+0x2e>
 80027cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80027d0:	d00f      	beq.n	80027f2 <TIM_Base_SetConfig+0x2e>
 80027d2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80027d6:	4290      	cmp	r0, r2
 80027d8:	d00b      	beq.n	80027f2 <TIM_Base_SetConfig+0x2e>
 80027da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027de:	4290      	cmp	r0, r2
 80027e0:	d007      	beq.n	80027f2 <TIM_Base_SetConfig+0x2e>
 80027e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80027e6:	4290      	cmp	r0, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_Base_SetConfig+0x2e>
 80027ea:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80027ee:	4290      	cmp	r0, r2
 80027f0:	d119      	bne.n	8002826 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80027f2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80027f8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fa:	4a23      	ldr	r2, [pc, #140]	@ (8002888 <TIM_Base_SetConfig+0xc4>)
 80027fc:	4290      	cmp	r0, r2
 80027fe:	d029      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 8002800:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002804:	d026      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 8002806:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800280a:	4290      	cmp	r0, r2
 800280c:	d022      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 800280e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002812:	4290      	cmp	r0, r2
 8002814:	d01e      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 8002816:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800281a:	4290      	cmp	r0, r2
 800281c:	d01a      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 800281e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002822:	4290      	cmp	r0, r2
 8002824:	d016      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 8002826:	4a19      	ldr	r2, [pc, #100]	@ (800288c <TIM_Base_SetConfig+0xc8>)
 8002828:	4290      	cmp	r0, r2
 800282a:	d013      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 800282c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002830:	4290      	cmp	r0, r2
 8002832:	d00f      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 8002834:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002838:	4290      	cmp	r0, r2
 800283a:	d00b      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 800283c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002840:	4290      	cmp	r0, r2
 8002842:	d007      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 8002844:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002848:	4290      	cmp	r0, r2
 800284a:	d003      	beq.n	8002854 <TIM_Base_SetConfig+0x90>
 800284c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002850:	4290      	cmp	r0, r2
 8002852:	d103      	bne.n	800285c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002858:	68ca      	ldr	r2, [r1, #12]
 800285a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	694a      	ldr	r2, [r1, #20]
 800285e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002862:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002864:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002866:	688b      	ldr	r3, [r1, #8]
 8002868:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800286a:	680b      	ldr	r3, [r1, #0]
 800286c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <TIM_Base_SetConfig+0xc4>)
 8002870:	4298      	cmp	r0, r3
 8002872:	d003      	beq.n	800287c <TIM_Base_SetConfig+0xb8>
 8002874:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002878:	4298      	cmp	r0, r3
 800287a:	d101      	bne.n	8002880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	690b      	ldr	r3, [r1, #16]
 800287e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	2301      	movs	r3, #1
 8002882:	6143      	str	r3, [r0, #20]
}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40014000 	.word	0x40014000

08002890 <HAL_TIM_Base_Init>:
{
 8002890:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002892:	4604      	mov	r4, r0
 8002894:	b350      	cbz	r0, 80028ec <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002896:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800289a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800289e:	b91b      	cbnz	r3, 80028a8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80028a0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028a4:	f7fe fede 	bl	8001664 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028aa:	6820      	ldr	r0, [r4, #0]
 80028ac:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80028ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b2:	f7ff ff87 	bl	80027c4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b6:	2301      	movs	r3, #1
  return HAL_OK;
 80028b8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ba:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028be:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80028c2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80028c6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80028ca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80028ce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80028da:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80028de:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80028e2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80028e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80028ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
 80028ee:	e7fc      	b.n	80028ea <HAL_TIM_Base_Init+0x5a>

080028f0 <TIM_ETR_SetConfig>:

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f0:	430a      	orrs	r2, r1
{
 80028f2:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 80028f4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028f6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fa:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fe:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002900:	6082      	str	r2, [r0, #8]
}
 8002902:	bd10      	pop	{r4, pc}

08002904 <HAL_TIM_ConfigClockSource>:
{
 8002904:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002906:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 800290a:	4604      	mov	r4, r0
 800290c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800290e:	2b01      	cmp	r3, #1
 8002910:	f000 808c 	beq.w	8002a2c <HAL_TIM_ConfigClockSource+0x128>
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8002918:	2201      	movs	r2, #1
  tmpsmcr = htim->Instance->SMCR;
 800291a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800291c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002920:	4b43      	ldr	r3, [pc, #268]	@ (8002a30 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpsmcr = htim->Instance->SMCR;
 8002922:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002924:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002926:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002928:	680b      	ldr	r3, [r1, #0]
 800292a:	2b60      	cmp	r3, #96	@ 0x60
 800292c:	d04f      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0xca>
 800292e:	d832      	bhi.n	8002996 <HAL_TIM_ConfigClockSource+0x92>
 8002930:	2b40      	cmp	r3, #64	@ 0x40
 8002932:	d064      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0xfa>
 8002934:	d816      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x60>
 8002936:	2b20      	cmp	r3, #32
 8002938:	d00d      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x52>
 800293a:	d80a      	bhi.n	8002952 <HAL_TIM_ConfigClockSource+0x4e>
 800293c:	f033 0110 	bics.w	r1, r3, #16
 8002940:	d009      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x52>
  htim->State = HAL_TIM_STATE_READY;
 8002942:	2301      	movs	r3, #1
 8002944:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002948:	2300      	movs	r3, #0
 800294a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800294e:	4610      	mov	r0, r2
 8002950:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8002952:	2b30      	cmp	r3, #48	@ 0x30
 8002954:	d1f5      	bne.n	8002942 <HAL_TIM_ConfigClockSource+0x3e>
  tmpsmcr = TIMx->SMCR;
 8002956:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002958:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800295c:	4313      	orrs	r3, r2
 800295e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002962:	e028      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
 8002964:	2b50      	cmp	r3, #80	@ 0x50
 8002966:	d1ec      	bne.n	8002942 <HAL_TIM_ConfigClockSource+0x3e>
                               sClockSourceConfig->ClockPolarity,
 8002968:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800296a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800296c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296e:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002970:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002974:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 8002978:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800297a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297c:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800297e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002982:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002986:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002988:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800298a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800298c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002990:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8002994:	e00f      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
 8002996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800299a:	d00d      	beq.n	80029b8 <HAL_TIM_ConfigClockSource+0xb4>
 800299c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a0:	d00c      	beq.n	80029bc <HAL_TIM_ConfigClockSource+0xb8>
 80029a2:	2b70      	cmp	r3, #112	@ 0x70
 80029a4:	d1cd      	bne.n	8002942 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 80029a6:	68cb      	ldr	r3, [r1, #12]
 80029a8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80029ac:	f7ff ffa0 	bl	80028f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029b0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029b2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80029b6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2200      	movs	r2, #0
 80029ba:	e7c2      	b.n	8002942 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 80029bc:	68cb      	ldr	r3, [r1, #12]
 80029be:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80029c2:	f7ff ff95 	bl	80028f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029c6:	6883      	ldr	r3, [r0, #8]
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029cc:	e7f3      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ce:	6a03      	ldr	r3, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80029d0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d2:	f023 0310 	bic.w	r3, r3, #16
                               sClockSourceConfig->ClockFilter);
 80029d6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029da:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80029dc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029de:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e6:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80029ea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80029ee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80029f0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80029f2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029f8:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80029fc:	e7db      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0xb2>
                               sClockSourceConfig->ClockPolarity,
 80029fe:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8002a00:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a02:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a04:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a06:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
  tmpccer |= TIM_ICPolarity;
 8002a0e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a10:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002a1c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a1e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002a20:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a26:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8002a2a:	e7c4      	b.n	80029b6 <HAL_TIM_ConfigClockSource+0xb2>
  __HAL_LOCK(htim);
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	e78e      	b.n	800294e <HAL_TIM_ConfigClockSource+0x4a>
 8002a30:	fffe0088 	.word	0xfffe0088

08002a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a36:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 8002a3a:	4604      	mov	r4, r0
 8002a3c:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d03b      	beq.n	8002aba <HAL_TIMEx_MasterConfigSynchronization+0x86>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a42:	6823      	ldr	r3, [r4, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a44:	4d1d      	ldr	r5, [pc, #116]	@ (8002abc <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002a46:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a4a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8002a4c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002a4e:	6898      	ldr	r0, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a50:	d002      	beq.n	8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 8002a52:	4e1b      	ldr	r6, [pc, #108]	@ (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8002a54:	42b3      	cmp	r3, r6
 8002a56:	d103      	bne.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a58:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a5c:	684e      	ldr	r6, [r1, #4]
 8002a5e:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a60:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a62:	f022 0270 	bic.w	r2, r2, #112	@ 0x70

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a66:	42ab      	cmp	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a68:	ea42 0206 	orr.w	r2, r2, r6
  htim->Instance->CR2 = tmpcr2;
 8002a6c:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6e:	d019      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a74:	d016      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a76:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d013      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00f      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a84:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a8c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a94:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d003      	beq.n	8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a9c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d104      	bne.n	8002aae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa4:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aa6:	f020 0280 	bic.w	r2, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aaa:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aae:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8002ab0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ab2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002ab6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c

  return HAL_OK;
}
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40010400 	.word	0x40010400
 8002ac4:	40000400 	.word	0x40000400

08002ac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac8:	b538      	push	{r3, r4, r5, lr}
 8002aca:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002acc:	69c0      	ldr	r0, [r0, #28]
 8002ace:	6921      	ldr	r1, [r4, #16]
 8002ad0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ad2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ad8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ada:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002adc:	497d      	ldr	r1, [pc, #500]	@ (8002cd4 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ade:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae0:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002ae2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002af4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002af6:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002af8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002afa:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b02:	4a75      	ldr	r2, [pc, #468]	@ (8002cd8 <UART_SetConfig+0x210>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d113      	bne.n	8002b30 <UART_SetConfig+0x68>
 8002b08:	4b74      	ldr	r3, [pc, #464]	@ (8002cdc <UART_SetConfig+0x214>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	f000 80a8 	beq.w	8002c68 <UART_SetConfig+0x1a0>
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d021      	beq.n	8002b60 <UART_SetConfig+0x98>
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	f040 80bd 	bne.w	8002c9c <UART_SetConfig+0x1d4>

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b22:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002b26:	f040 809c 	bne.w	8002c62 <UART_SetConfig+0x19a>
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2a:	f7ff fb31 	bl	8002190 <HAL_RCC_GetSysClockFreq>
        break;
 8002b2e:	e092      	b.n	8002c56 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b30:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce0 <UART_SetConfig+0x218>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d11b      	bne.n	8002b6e <UART_SetConfig+0xa6>
 8002b36:	4b69      	ldr	r3, [pc, #420]	@ (8002cdc <UART_SetConfig+0x214>)
 8002b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	f000 8091 	beq.w	8002c68 <UART_SetConfig+0x1a0>
 8002b46:	d809      	bhi.n	8002b5c <UART_SetConfig+0x94>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80ad 	beq.w	8002ca8 <UART_SetConfig+0x1e0>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d0e7      	beq.n	8002b22 <UART_SetConfig+0x5a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
      }
      else
      {
        ret = HAL_ERROR;
 8002b52:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b54:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002b56:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68

  return ret;
}
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5c:	2b0c      	cmp	r3, #12
 8002b5e:	d1f8      	bne.n	8002b52 <UART_SetConfig+0x8a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b60:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002b64:	f000 8084 	beq.w	8002c70 <UART_SetConfig+0x1a8>
        pclk = (uint32_t) LSE_VALUE;
 8002b68:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002b6c:	e0a3      	b.n	8002cb6 <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce4 <UART_SetConfig+0x21c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10e      	bne.n	8002b92 <UART_SetConfig+0xca>
 8002b74:	4b59      	ldr	r3, [pc, #356]	@ (8002cdc <UART_SetConfig+0x214>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d072      	beq.n	8002c68 <UART_SetConfig+0x1a0>
 8002b82:	d804      	bhi.n	8002b8e <UART_SetConfig+0xc6>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 808f 	beq.w	8002ca8 <UART_SetConfig+0x1e0>
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	e7e0      	b.n	8002b50 <UART_SetConfig+0x88>
 8002b8e:	2b30      	cmp	r3, #48	@ 0x30
 8002b90:	e7e5      	b.n	8002b5e <UART_SetConfig+0x96>
 8002b92:	4a55      	ldr	r2, [pc, #340]	@ (8002ce8 <UART_SetConfig+0x220>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d10d      	bne.n	8002bb4 <UART_SetConfig+0xec>
 8002b98:	4b50      	ldr	r3, [pc, #320]	@ (8002cdc <UART_SetConfig+0x214>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ba2:	2b80      	cmp	r3, #128	@ 0x80
 8002ba4:	d060      	beq.n	8002c68 <UART_SetConfig+0x1a0>
 8002ba6:	d803      	bhi.n	8002bb0 <UART_SetConfig+0xe8>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d07d      	beq.n	8002ca8 <UART_SetConfig+0x1e0>
 8002bac:	2b40      	cmp	r3, #64	@ 0x40
 8002bae:	e7cf      	b.n	8002b50 <UART_SetConfig+0x88>
 8002bb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bb2:	e7d4      	b.n	8002b5e <UART_SetConfig+0x96>
 8002bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8002cec <UART_SetConfig+0x224>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d110      	bne.n	8002bdc <UART_SetConfig+0x114>
 8002bba:	4b48      	ldr	r3, [pc, #288]	@ (8002cdc <UART_SetConfig+0x214>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bc8:	d04e      	beq.n	8002c68 <UART_SetConfig+0x1a0>
 8002bca:	d804      	bhi.n	8002bd6 <UART_SetConfig+0x10e>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d06b      	beq.n	8002ca8 <UART_SetConfig+0x1e0>
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd4:	e7bc      	b.n	8002b50 <UART_SetConfig+0x88>
 8002bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bda:	e7c0      	b.n	8002b5e <UART_SetConfig+0x96>
 8002bdc:	4a44      	ldr	r2, [pc, #272]	@ (8002cf0 <UART_SetConfig+0x228>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d110      	bne.n	8002c04 <UART_SetConfig+0x13c>
 8002be2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cdc <UART_SetConfig+0x214>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bf0:	d03a      	beq.n	8002c68 <UART_SetConfig+0x1a0>
 8002bf2:	d804      	bhi.n	8002bfe <UART_SetConfig+0x136>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d051      	beq.n	8002c9c <UART_SetConfig+0x1d4>
 8002bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfc:	e7a8      	b.n	8002b50 <UART_SetConfig+0x88>
 8002bfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c02:	e7ac      	b.n	8002b5e <UART_SetConfig+0x96>
 8002c04:	4a3b      	ldr	r2, [pc, #236]	@ (8002cf4 <UART_SetConfig+0x22c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d110      	bne.n	8002c2c <UART_SetConfig+0x164>
 8002c0a:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <UART_SetConfig+0x214>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c10:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c18:	d026      	beq.n	8002c68 <UART_SetConfig+0x1a0>
 8002c1a:	d804      	bhi.n	8002c26 <UART_SetConfig+0x15e>
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d043      	beq.n	8002ca8 <UART_SetConfig+0x1e0>
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c24:	e794      	b.n	8002b50 <UART_SetConfig+0x88>
 8002c26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002c2a:	e798      	b.n	8002b5e <UART_SetConfig+0x96>
 8002c2c:	4a32      	ldr	r2, [pc, #200]	@ (8002cf8 <UART_SetConfig+0x230>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d18f      	bne.n	8002b52 <UART_SetConfig+0x8a>
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <UART_SetConfig+0x214>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c40:	d012      	beq.n	8002c68 <UART_SetConfig+0x1a0>
 8002c42:	d803      	bhi.n	8002c4c <UART_SetConfig+0x184>
 8002c44:	b383      	cbz	r3, 8002ca8 <UART_SetConfig+0x1e0>
 8002c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c4a:	e781      	b.n	8002b50 <UART_SetConfig+0x88>
 8002c4c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002c50:	e785      	b.n	8002b5e <UART_SetConfig+0x96>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c52:	f7ff fb69 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c56:	b958      	cbnz	r0, 8002c70 <UART_SetConfig+0x1a8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c58:	2000      	movs	r0, #0
 8002c5a:	e77b      	b.n	8002b54 <UART_SetConfig+0x8c>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c5c:	f7ff fb74 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
        break;
 8002c60:	e027      	b.n	8002cb2 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c62:	f7ff fa95 	bl	8002190 <HAL_RCC_GetSysClockFreq>
        break;
 8002c66:	e024      	b.n	8002cb2 <UART_SetConfig+0x1ea>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c68:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8002c6c:	4823      	ldr	r0, [pc, #140]	@ (8002cfc <UART_SetConfig+0x234>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c6e:	d122      	bne.n	8002cb6 <UART_SetConfig+0x1ee>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c70:	6862      	ldr	r2, [r4, #4]
 8002c72:	0853      	lsrs	r3, r2, #1
 8002c74:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002c78:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c7c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002c80:	f1a3 0110 	sub.w	r1, r3, #16
 8002c84:	4291      	cmp	r1, r2
 8002c86:	f63f af64 	bhi.w	8002b52 <UART_SetConfig+0x8a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c8e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8002c92:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c94:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60cb      	str	r3, [r1, #12]
 8002c9a:	e7dd      	b.n	8002c58 <UART_SetConfig+0x190>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002ca0:	d1dc      	bne.n	8002c5c <UART_SetConfig+0x194>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ca2:	f7ff fb51 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
        break;
 8002ca6:	e7d6      	b.n	8002c56 <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ca8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002cac:	d0d1      	beq.n	8002c52 <UART_SetConfig+0x18a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cae:	f7ff fb3b 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d0d0      	beq.n	8002c58 <UART_SetConfig+0x190>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cb6:	6862      	ldr	r2, [r4, #4]
 8002cb8:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002cbc:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8002cc4:	f1a3 0110 	sub.w	r1, r3, #16
 8002cc8:	4291      	cmp	r1, r2
 8002cca:	f63f af42 	bhi.w	8002b52 <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cce:	6822      	ldr	r2, [r4, #0]
 8002cd0:	60d3      	str	r3, [r2, #12]
 8002cd2:	e7c1      	b.n	8002c58 <UART_SetConfig+0x190>
 8002cd4:	efff69f3 	.word	0xefff69f3
 8002cd8:	40011000 	.word	0x40011000
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40004400 	.word	0x40004400
 8002ce4:	40004800 	.word	0x40004800
 8002ce8:	40004c00 	.word	0x40004c00
 8002cec:	40005000 	.word	0x40005000
 8002cf0:	40011400 	.word	0x40011400
 8002cf4:	40007800 	.word	0x40007800
 8002cf8:	40007c00 	.word	0x40007c00
 8002cfc:	00f42400 	.word	0x00f42400

08002d00 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d00:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002d02:	07da      	lsls	r2, r3, #31
{
 8002d04:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d06:	d506      	bpl.n	8002d16 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d08:	6801      	ldr	r1, [r0, #0]
 8002d0a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8002d0c:	684a      	ldr	r2, [r1, #4]
 8002d0e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002d12:	4322      	orrs	r2, r4
 8002d14:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d16:	079c      	lsls	r4, r3, #30
 8002d18:	d506      	bpl.n	8002d28 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d1a:	6801      	ldr	r1, [r0, #0]
 8002d1c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8002d1e:	684a      	ldr	r2, [r1, #4]
 8002d20:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d24:	4322      	orrs	r2, r4
 8002d26:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d28:	0759      	lsls	r1, r3, #29
 8002d2a:	d506      	bpl.n	8002d3a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d2c:	6801      	ldr	r1, [r0, #0]
 8002d2e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8002d30:	684a      	ldr	r2, [r1, #4]
 8002d32:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d36:	4322      	orrs	r2, r4
 8002d38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d3a:	071a      	lsls	r2, r3, #28
 8002d3c:	d506      	bpl.n	8002d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d3e:	6801      	ldr	r1, [r0, #0]
 8002d40:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8002d42:	684a      	ldr	r2, [r1, #4]
 8002d44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d48:	4322      	orrs	r2, r4
 8002d4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d4c:	06dc      	lsls	r4, r3, #27
 8002d4e:	d506      	bpl.n	8002d5e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d50:	6801      	ldr	r1, [r0, #0]
 8002d52:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8002d54:	688a      	ldr	r2, [r1, #8]
 8002d56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d5a:	4322      	orrs	r2, r4
 8002d5c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d5e:	0699      	lsls	r1, r3, #26
 8002d60:	d506      	bpl.n	8002d70 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d62:	6801      	ldr	r1, [r0, #0]
 8002d64:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8002d66:	688a      	ldr	r2, [r1, #8]
 8002d68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d6c:	4322      	orrs	r2, r4
 8002d6e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d70:	065a      	lsls	r2, r3, #25
 8002d72:	d510      	bpl.n	8002d96 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d74:	6801      	ldr	r1, [r0, #0]
 8002d76:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8002d78:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d7a:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d7e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002d82:	ea42 0204 	orr.w	r2, r2, r4
 8002d86:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d88:	d105      	bne.n	8002d96 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d8a:	684a      	ldr	r2, [r1, #4]
 8002d8c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8002d8e:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8002d92:	4322      	orrs	r2, r4
 8002d94:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	d506      	bpl.n	8002da8 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d9a:	6802      	ldr	r2, [r0, #0]
 8002d9c:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002d9e:	6853      	ldr	r3, [r2, #4]
 8002da0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6053      	str	r3, [r2, #4]
  }
}
 8002da8:	bd10      	pop	{r4, pc}

08002daa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002daa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002db2:	4605      	mov	r5, r0
 8002db4:	460f      	mov	r7, r1
 8002db6:	4616      	mov	r6, r2
 8002db8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dba:	682a      	ldr	r2, [r5, #0]
 8002dbc:	69d3      	ldr	r3, [r2, #28]
 8002dbe:	ea37 0303 	bics.w	r3, r7, r3
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	42b3      	cmp	r3, r6
 8002dca:	d001      	beq.n	8002dd0 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002dcc:	2000      	movs	r0, #0
 8002dce:	e028      	b.n	8002e22 <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002dd4:	d0f2      	beq.n	8002dbc <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe fd9b 	bl	8001910 <HAL_GetTick>
 8002dda:	eba0 0008 	sub.w	r0, r0, r8
 8002dde:	682c      	ldr	r4, [r5, #0]
 8002de0:	4548      	cmp	r0, r9
 8002de2:	d802      	bhi.n	8002dea <UART_WaitOnFlagUntilTimeout+0x40>
 8002de4:	f1b9 0f00 	cmp.w	r9, #0
 8002de8:	d11d      	bne.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x7c>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	e844 3200 	strex	r2, r3, [r4]
 8002df6:	2a00      	cmp	r2, #0
 8002df8:	d1f7      	bne.n	8002dea <UART_WaitOnFlagUntilTimeout+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	f104 0308 	add.w	r3, r4, #8
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e02:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	f104 0108 	add.w	r1, r4, #8
 8002e0a:	e841 3200 	strex	r2, r3, [r1]
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	d1f3      	bne.n	8002dfa <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState = HAL_UART_STATE_READY;
 8002e12:	2320      	movs	r3, #32
 8002e14:	67eb      	str	r3, [r5, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002e16:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          __HAL_UNLOCK(huart);
 8002e1a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002e1c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002e1e:	f885 3078 	strb.w	r3, [r5, #120]	@ 0x78
}
 8002e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	075a      	lsls	r2, r3, #29
 8002e2a:	d5c6      	bpl.n	8002dba <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e2c:	69e3      	ldr	r3, [r4, #28]
 8002e2e:	051b      	lsls	r3, r3, #20
 8002e30:	d5c3      	bpl.n	8002dba <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e36:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e3c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	e844 3200 	strex	r2, r3, [r4]
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d1f7      	bne.n	8002e38 <UART_WaitOnFlagUntilTimeout+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	f104 0308 	add.w	r3, r4, #8
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e50:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	f104 0108 	add.w	r1, r4, #8
 8002e58:	e841 3200 	strex	r2, r3, [r1]
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d1f3      	bne.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x9e>
          huart->gState = HAL_UART_STATE_READY;
 8002e60:	2320      	movs	r3, #32
 8002e62:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002e64:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e68:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8002e6c:	e7d5      	b.n	8002e1a <UART_WaitOnFlagUntilTimeout+0x70>

08002e6e <UART_CheckIdleState>:
{
 8002e6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e70:	2500      	movs	r5, #0
{
 8002e72:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8002e78:	f7fe fd4a 	bl	8001910 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e7c:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002e7e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	0712      	lsls	r2, r2, #28
 8002e84:	d40a      	bmi.n	8002e9c <UART_CheckIdleState+0x2e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e86:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002e88:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002e8a:	f884 0078 	strb.w	r0, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 8002e8e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e90:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e96:	6660      	str	r0, [r4, #100]	@ 0x64
}
 8002e98:	b003      	add	sp, #12
 8002e9a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e9c:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8002ea0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	9200      	str	r2, [sp, #0]
 8002ea8:	462a      	mov	r2, r5
 8002eaa:	f7ff ff7e 	bl	8002daa <UART_WaitOnFlagUntilTimeout>
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d0e9      	beq.n	8002e86 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	e7f0      	b.n	8002e98 <UART_CheckIdleState+0x2a>

08002eb6 <HAL_UART_Init>:
{
 8002eb6:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002eb8:	4604      	mov	r4, r0
 8002eba:	b340      	cbz	r0, 8002f0e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebc:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8002ebe:	b91b      	cbnz	r3, 8002ec8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002ec0:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8002ec4:	f7fe fbf2 	bl	80016ac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002ec8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002eca:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ecc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002ece:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8002ed0:	6813      	ldr	r3, [r2, #0]
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ed8:	f7ff fdf6 	bl	8002ac8 <UART_SetConfig>
 8002edc:	2801      	cmp	r0, #1
 8002ede:	d016      	beq.n	8002f0e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ee0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ee2:	b113      	cbz	r3, 8002eea <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f7ff ff0b 	bl	8002d00 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eea:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002eec:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002efc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
}
 8002f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002f08:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002f0a:	f7ff bfb0 	b.w	8002e6e <UART_CheckIdleState>
}
 8002f0e:	2001      	movs	r0, #1
 8002f10:	bd10      	pop	{r4, pc}
	...

08002f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002f14:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f16:	2300      	movs	r3, #0
{
 8002f18:	4602      	mov	r2, r0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002f1a:	4910      	ldr	r1, [pc, #64]	@ (8002f5c <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8002f1c:	9301      	str	r3, [sp, #4]
    count++;
 8002f1e:	9b01      	ldr	r3, [sp, #4]
 8002f20:	3301      	adds	r3, #1
 8002f22:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f24:	9b01      	ldr	r3, [sp, #4]
 8002f26:	428b      	cmp	r3, r1
 8002f28:	d815      	bhi.n	8002f56 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f2a:	6913      	ldr	r3, [r2, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	daf6      	bge.n	8002f1e <USB_CoreReset+0xa>

  /* Core Soft Reset */
  count = 0U;
 8002f30:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8002f32:	490a      	ldr	r1, [pc, #40]	@ (8002f5c <USB_CoreReset+0x48>)
  count = 0U;
 8002f34:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002f36:	6913      	ldr	r3, [r2, #16]
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6113      	str	r3, [r2, #16]
    count++;
 8002f3e:	9b01      	ldr	r3, [sp, #4]
 8002f40:	3301      	adds	r3, #1
 8002f42:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f44:	9b01      	ldr	r3, [sp, #4]
 8002f46:	428b      	cmp	r3, r1
 8002f48:	d805      	bhi.n	8002f56 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002f4a:	6910      	ldr	r0, [r2, #16]
 8002f4c:	f010 0001 	ands.w	r0, r0, #1
 8002f50:	d1f5      	bne.n	8002f3e <USB_CoreReset+0x2a>

  return HAL_OK;
}
 8002f52:	b002      	add	sp, #8
 8002f54:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f56:	2003      	movs	r0, #3
 8002f58:	e7fb      	b.n	8002f52 <USB_CoreReset+0x3e>
 8002f5a:	bf00      	nop
 8002f5c:	00030d40 	.word	0x00030d40

08002f60 <USB_CoreInit>:
{
 8002f60:	b084      	sub	sp, #16
 8002f62:	b538      	push	{r3, r4, r5, lr}
 8002f64:	ad05      	add	r5, sp, #20
 8002f66:	4604      	mov	r4, r0
 8002f68:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8002f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d129      	bne.n	8002fc8 <USB_CoreInit+0x68>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f74:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f7a:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f7c:	68c3      	ldr	r3, [r0, #12]
 8002f7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f86:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8002f88:	68c3      	ldr	r3, [r0, #12]
 8002f8a:	f043 0310 	orr.w	r3, r3, #16
 8002f8e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f90:	68c3      	ldr	r3, [r0, #12]
 8002f92:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
    if (cfg.use_external_vbus == 1U)
 8002f96:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8002f98:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002f9a:	d103      	bne.n	8002fa4 <USB_CoreInit+0x44>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f9c:	68e3      	ldr	r3, [r4, #12]
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	f7ff ffb5 	bl	8002f14 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002faa:	9b08      	ldr	r3, [sp, #32]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d107      	bne.n	8002fc0 <USB_CoreInit+0x60>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fb0:	68a3      	ldr	r3, [r4, #8]
 8002fb2:	f043 0306 	orr.w	r3, r3, #6
 8002fb6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fb8:	68a3      	ldr	r3, [r4, #8]
 8002fba:	f043 0320 	orr.w	r3, r3, #32
 8002fbe:	60a3      	str	r3, [r4, #8]
}
 8002fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fc4:	b004      	add	sp, #16
 8002fc6:	4770      	bx	lr
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	d111      	bne.n	8002ff0 <USB_CoreInit+0x90>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fcc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd2:	6383      	str	r3, [r0, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002fd4:	68c3      	ldr	r3, [r0, #12]
 8002fd6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fde:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002fe0:	68c3      	ldr	r3, [r0, #12]
 8002fe2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002fe6:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8002fe8:	68c3      	ldr	r3, [r0, #12]
 8002fea:	f023 0310 	bic.w	r3, r3, #16
 8002fee:	e7d2      	b.n	8002f96 <USB_CoreInit+0x36>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ff0:	68c3      	ldr	r3, [r0, #12]
 8002ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ff6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002ff8:	f7ff ff8c 	bl	8002f14 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ffc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003002:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003004:	e7d1      	b.n	8002faa <USB_CoreInit+0x4a>

08003006 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003006:	6883      	ldr	r3, [r0, #8]
 8003008:	f023 0301 	bic.w	r3, r3, #1
 800300c:	6083      	str	r3, [r0, #8]
}
 800300e:	2000      	movs	r0, #0
 8003010:	4770      	bx	lr

08003012 <USB_SetCurrentMode>:
{
 8003012:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003014:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003016:	2901      	cmp	r1, #1
{
 8003018:	4605      	mov	r5, r0
 800301a:	460c      	mov	r4, r1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800301c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003020:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003022:	d113      	bne.n	800304c <USB_SetCurrentMode+0x3a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003024:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8003026:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003028:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800302c:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 800302e:	2001      	movs	r0, #1
      ms++;
 8003030:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8003032:	f7fe fc73 	bl	800191c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8003036:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003038:	07d9      	lsls	r1, r3, #31
 800303a:	d402      	bmi.n	8003042 <USB_SetCurrentMode+0x30>
 800303c:	2c32      	cmp	r4, #50	@ 0x32
 800303e:	d1f6      	bne.n	800302e <USB_SetCurrentMode+0x1c>
      ms++;
 8003040:	2432      	movs	r4, #50	@ 0x32
  if (ms == 50U)
 8003042:	f1a4 0332 	sub.w	r3, r4, #50	@ 0x32
 8003046:	4258      	negs	r0, r3
 8003048:	4158      	adcs	r0, r3
}
 800304a:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 800304c:	b969      	cbnz	r1, 800306a <USB_SetCurrentMode+0x58>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800304e:	68c3      	ldr	r3, [r0, #12]
 8003050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003054:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8003056:	2001      	movs	r0, #1
      ms++;
 8003058:	3401      	adds	r4, #1
      HAL_Delay(1U);
 800305a:	f7fe fc5f 	bl	800191c <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 800305e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003060:	07da      	lsls	r2, r3, #31
 8003062:	d5ee      	bpl.n	8003042 <USB_SetCurrentMode+0x30>
 8003064:	2c32      	cmp	r4, #50	@ 0x32
 8003066:	d1f6      	bne.n	8003056 <USB_SetCurrentMode+0x44>
 8003068:	e7ea      	b.n	8003040 <USB_SetCurrentMode+0x2e>
    return HAL_ERROR;
 800306a:	2001      	movs	r0, #1
 800306c:	e7ed      	b.n	800304a <USB_SetCurrentMode+0x38>
	...

08003070 <USB_FlushTxFifo>:
{
 8003070:	b082      	sub	sp, #8
 8003072:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8003074:	2300      	movs	r3, #0
    if (count > 200000U)
 8003076:	4810      	ldr	r0, [pc, #64]	@ (80030b8 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8003078:	9301      	str	r3, [sp, #4]
    count++;
 800307a:	9b01      	ldr	r3, [sp, #4]
 800307c:	3301      	adds	r3, #1
 800307e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003080:	9b01      	ldr	r3, [sp, #4]
 8003082:	4283      	cmp	r3, r0
 8003084:	d815      	bhi.n	80030b2 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003086:	6913      	ldr	r3, [r2, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	daf6      	bge.n	800307a <USB_FlushTxFifo+0xa>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800308c:	0189      	lsls	r1, r1, #6
  count = 0U;
 800308e:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003090:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8003094:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003096:	6111      	str	r1, [r2, #16]
    if (count > 200000U)
 8003098:	4907      	ldr	r1, [pc, #28]	@ (80030b8 <USB_FlushTxFifo+0x48>)
    count++;
 800309a:	9b01      	ldr	r3, [sp, #4]
 800309c:	3301      	adds	r3, #1
 800309e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80030a0:	9b01      	ldr	r3, [sp, #4]
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d805      	bhi.n	80030b2 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030a6:	6910      	ldr	r0, [r2, #16]
 80030a8:	f010 0020 	ands.w	r0, r0, #32
 80030ac:	d1f5      	bne.n	800309a <USB_FlushTxFifo+0x2a>
}
 80030ae:	b002      	add	sp, #8
 80030b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80030b2:	2003      	movs	r0, #3
 80030b4:	e7fb      	b.n	80030ae <USB_FlushTxFifo+0x3e>
 80030b6:	bf00      	nop
 80030b8:	00030d40 	.word	0x00030d40

080030bc <USB_FlushRxFifo>:
{
 80030bc:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80030be:	2300      	movs	r3, #0
{
 80030c0:	4602      	mov	r2, r0
    if (count > 200000U)
 80030c2:	490f      	ldr	r1, [pc, #60]	@ (8003100 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 80030c4:	9301      	str	r3, [sp, #4]
    count++;
 80030c6:	9b01      	ldr	r3, [sp, #4]
 80030c8:	3301      	adds	r3, #1
 80030ca:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80030cc:	9b01      	ldr	r3, [sp, #4]
 80030ce:	428b      	cmp	r3, r1
 80030d0:	d813      	bhi.n	80030fa <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80030d2:	6913      	ldr	r3, [r2, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	daf6      	bge.n	80030c6 <USB_FlushRxFifo+0xa>
  count = 0U;
 80030d8:	2300      	movs	r3, #0
    if (count > 200000U)
 80030da:	4909      	ldr	r1, [pc, #36]	@ (8003100 <USB_FlushRxFifo+0x44>)
  count = 0U;
 80030dc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80030de:	2310      	movs	r3, #16
 80030e0:	6113      	str	r3, [r2, #16]
    count++;
 80030e2:	9b01      	ldr	r3, [sp, #4]
 80030e4:	3301      	adds	r3, #1
 80030e6:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80030e8:	9b01      	ldr	r3, [sp, #4]
 80030ea:	428b      	cmp	r3, r1
 80030ec:	d805      	bhi.n	80030fa <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80030ee:	6910      	ldr	r0, [r2, #16]
 80030f0:	f010 0010 	ands.w	r0, r0, #16
 80030f4:	d1f5      	bne.n	80030e2 <USB_FlushRxFifo+0x26>
}
 80030f6:	b002      	add	sp, #8
 80030f8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80030fa:	2003      	movs	r0, #3
 80030fc:	e7fb      	b.n	80030f6 <USB_FlushRxFifo+0x3a>
 80030fe:	bf00      	nop
 8003100:	00030d40 	.word	0x00030d40

08003104 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8003104:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 8003108:	4319      	orrs	r1, r3
 800310a:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 800310e:	2000      	movs	r0, #0
 8003110:	4770      	bx	lr
	...

08003114 <USB_DevInit>:
{
 8003114:	b084      	sub	sp, #16
 8003116:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800311a:	4604      	mov	r4, r0
 800311c:	a809      	add	r0, sp, #36	@ 0x24
 800311e:	460f      	mov	r7, r1
 8003120:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8003122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003126:	461a      	mov	r2, r3
  for (i = 0U; i < 15U; i++)
 8003128:	2300      	movs	r3, #0
 800312a:	990e      	ldr	r1, [sp, #56]	@ 0x38
    USBx->DIEPTXF[i] = 0U;
 800312c:	461d      	mov	r5, r3
 800312e:	f103 0040 	add.w	r0, r3, #64	@ 0x40
  for (i = 0U; i < 15U; i++)
 8003132:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8003134:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8003138:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800313a:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 800313c:	d1f7      	bne.n	800312e <USB_DevInit+0x1a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800313e:	f504 6800 	add.w	r8, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8003142:	2e00      	cmp	r6, #0
 8003144:	d172      	bne.n	800322c <USB_DevInit+0x118>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003146:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800314a:	f043 0302 	orr.w	r3, r3, #2
 800314e:	f8c8 3004 	str.w	r3, [r8, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003152:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003154:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003158:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003160:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003168:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800316a:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800316c:	2901      	cmp	r1, #1
  USBx_PCGCCTL = 0U;
 800316e:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003172:	f8d4 3800 	ldr.w	r3, [r4, #2048]	@ 0x800
 8003176:	f8c4 3800 	str.w	r3, [r4, #2048]	@ 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800317a:	d15e      	bne.n	800323a <USB_DevInit+0x126>
    if (cfg.speed == USBD_HS_SPEED)
 800317c:	2a00      	cmp	r2, #0
 800317e:	d15a      	bne.n	8003236 <USB_DevInit+0x122>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003180:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003182:	4620      	mov	r0, r4
 8003184:	f7ff ffbe 	bl	8003104 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003188:	2110      	movs	r1, #16
 800318a:	4620      	mov	r0, r4
 800318c:	f7ff ff70 	bl	8003070 <USB_FlushTxFifo>
 8003190:	4605      	mov	r5, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff ff92 	bl	80030bc <USB_FlushRxFifo>
 8003198:	4328      	orrs	r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	f504 6210 	add.w	r2, r4, #2304	@ 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031a0:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031a2:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80031a6:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031a8:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031ac:	3800      	subs	r0, #0
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031ae:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 80031b2:	f8c8 3010 	str.w	r3, [r8, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031b6:	bf18      	it	ne
 80031b8:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 80031ba:	f8c8 3014 	str.w	r3, [r8, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031be:	f8c8 301c 	str.w	r3, [r8, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c2:	42bb      	cmp	r3, r7
 80031c4:	d13d      	bne.n	8003242 <USB_DevInit+0x12e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c6:	2200      	movs	r2, #0
 80031c8:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031cc:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031d0:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031d4:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031d6:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031da:	42ba      	cmp	r2, r7
 80031dc:	d143      	bne.n	8003266 <USB_DevInit+0x152>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80031e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031e6:	f8c8 3010 	str.w	r3, [r8, #16]
  USBx->GINTMSK = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031ee:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 80031f2:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80031f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80031f6:	b91b      	cbnz	r3, 8003200 <USB_DevInit+0xec>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031f8:	69a3      	ldr	r3, [r4, #24]
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003200:	69a2      	ldr	r2, [r4, #24]
 8003202:	4b22      	ldr	r3, [pc, #136]	@ (800328c <USB_DevInit+0x178>)
 8003204:	4313      	orrs	r3, r2
 8003206:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800320a:	b11b      	cbz	r3, 8003214 <USB_DevInit+0x100>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800320c:	69a3      	ldr	r3, [r4, #24]
 800320e:	f043 0308 	orr.w	r3, r3, #8
 8003212:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8003214:	2e01      	cmp	r6, #1
 8003216:	d105      	bne.n	8003224 <USB_DevInit+0x110>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003218:	69a3      	ldr	r3, [r4, #24]
 800321a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	61a3      	str	r3, [r4, #24]
}
 8003224:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003228:	b004      	add	sp, #16
 800322a:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800322c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800322e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003232:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003234:	e799      	b.n	800316a <USB_DevInit+0x56>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003236:	2101      	movs	r1, #1
 8003238:	e7a3      	b.n	8003182 <USB_DevInit+0x6e>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800323a:	2903      	cmp	r1, #3
 800323c:	d09e      	beq.n	800317c <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800323e:	2103      	movs	r1, #3
 8003240:	e79f      	b.n	8003182 <USB_DevInit+0x6e>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003242:	f8d2 9000 	ldr.w	r9, [r2]
 8003246:	f1b9 0f00 	cmp.w	r9, #0
 800324a:	da0a      	bge.n	8003262 <USB_DevInit+0x14e>
      if (i == 0U)
 800324c:	b93b      	cbnz	r3, 800325e <USB_DevInit+0x14a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800324e:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003252:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003254:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003256:	f8c2 e008 	str.w	lr, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800325a:	3220      	adds	r2, #32
 800325c:	e7b1      	b.n	80031c2 <USB_DevInit+0xae>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800325e:	6015      	str	r5, [r2, #0]
 8003260:	e7f7      	b.n	8003252 <USB_DevInit+0x13e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003262:	6011      	str	r1, [r2, #0]
 8003264:	e7f5      	b.n	8003252 <USB_DevInit+0x13e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003266:	f8d3 9000 	ldr.w	r9, [r3]
 800326a:	f1b9 0f00 	cmp.w	r9, #0
 800326e:	da0a      	bge.n	8003286 <USB_DevInit+0x172>
      if (i == 0U)
 8003270:	b93a      	cbnz	r2, 8003282 <USB_DevInit+0x16e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003272:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003276:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003278:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800327a:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800327e:	3320      	adds	r3, #32
 8003280:	e7ab      	b.n	80031da <USB_DevInit+0xc6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003282:	601d      	str	r5, [r3, #0]
 8003284:	e7f7      	b.n	8003276 <USB_DevInit+0x162>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003286:	6019      	str	r1, [r3, #0]
 8003288:	e7f5      	b.n	8003276 <USB_DevInit+0x162>
 800328a:	bf00      	nop
 800328c:	803c3800 	.word	0x803c3800

08003290 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003290:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8003294:	f023 0303 	bic.w	r3, r3, #3
 8003298:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800329c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 80032a8:	2000      	movs	r0, #0
 80032aa:	4770      	bx	lr

080032ac <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 80032ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t frame_len = S->FrameLen;
  uint32_t n_fft = S->FFTLen;
 80032b0:	e9d0 9604 	ldrd	r9, r6, [r0, #16]
{
 80032b4:	460f      	mov	r7, r1
  float32_t *scratch_buffer = S->pScratch;
 80032b6:	f8d0 8018 	ldr.w	r8, [r0, #24]
{
 80032ba:	4605      	mov	r5, r0
 80032bc:	4614      	mov	r4, r2
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 80032be:	464b      	mov	r3, r9
 80032c0:	460a      	mov	r2, r1
 80032c2:	6881      	ldr	r1, [r0, #8]
 80032c4:	4638      	mov	r0, r7
{
 80032c6:	ed2d 8b02 	vpush	{d8}
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 80032ca:	f000 ff33 	bl	8004134 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 80032ce:	eba6 0209 	sub.w	r2, r6, r9
 80032d2:	2100      	movs	r1, #0
 80032d4:	eb07 0089 	add.w	r0, r7, r9, lsl #2
 80032d8:	f006 f88c 	bl	80093f4 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 80032dc:	2300      	movs	r3, #0
 80032de:	4639      	mov	r1, r7
 80032e0:	4642      	mov	r2, r8
 80032e2:	6828      	ldr	r0, [r5, #0]

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
  last_energy = scratch_buffer[1] * scratch_buffer[1];
  pOutCol[0] = first_energy;
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 80032e4:	0876      	lsrs	r6, r6, #1
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 80032e6:	f000 fa69 	bl	80037bc <arm_rfft_fast_f32>
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 80032ea:	ed98 7a00 	vldr	s14, [r8]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 80032ee:	edd8 7a01 	vldr	s15, [r8, #4]
  pOutCol[0] = first_energy;
 80032f2:	4627      	mov	r7, r4
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 80032f4:	ee27 7a07 	vmul.f32	s14, s14, s14
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 80032f8:	1e72      	subs	r2, r6, #1
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 80032fa:	ee27 8aa7 	vmul.f32	s16, s15, s15
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 80032fe:	f108 0008 	add.w	r0, r8, #8
  pOutCol[0] = first_energy;
 8003302:	eca7 7a01 	vstmia	r7!, {s14}
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8003306:	4639      	mov	r1, r7
 8003308:	f000 febc 	bl	8004084 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 800330c:	00b3      	lsls	r3, r6, #2
 800330e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8003312:	ed86 8a00 	vstr	s16, [r6]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8003316:	792a      	ldrb	r2, [r5, #4]
 8003318:	b96a      	cbnz	r2, 8003336 <SpectrogramColumn+0x8a>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800331a:	441f      	add	r7, r3
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 800331c:	ecb4 0a01 	vldmia	r4!, {s0}
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8003320:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	db09      	blt.n	800333e <SpectrogramColumn+0x92>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800332a:	f007 fe9f 	bl	800b06c <sqrtf>
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800332e:	42bc      	cmp	r4, r7
 8003330:	ed04 0a01 	vstr	s0, [r4, #-4]
 8003334:	d1f2      	bne.n	800331c <SpectrogramColumn+0x70>
    }
  }
}
 8003336:	ecbd 8b02 	vpop	{d8}
 800333a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800333e:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003344 <SpectrogramColumn+0x98>
 8003342:	e7f4      	b.n	800332e <SpectrogramColumn+0x82>
 8003344:	00000000 	.word	0x00000000

08003348 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4604      	mov	r4, r0
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 800334c:	6800      	ldr	r0, [r0, #0]
{
 800334e:	4615      	mov	r5, r2
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 8003350:	6986      	ldr	r6, [r0, #24]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 8003352:	4632      	mov	r2, r6
 8003354:	f7ff ffaa 	bl	80032ac <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 8003358:	462a      	mov	r2, r5
 800335a:	4631      	mov	r1, r6
 800335c:	6860      	ldr	r0, [r4, #4]
}
 800335e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 8003362:	f000 b801 	b.w	8003368 <MelFilterbank>
	...

08003368 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	6804      	ldr	r4, [r0, #0]
 800336c:	6845      	ldr	r5, [r0, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
  uint32_t *pStop_idxs = M->pStopIndices;
  float32_t *pCoefs = M->pCoefficients;
 800336e:	6887      	ldr	r7, [r0, #8]
  uint32_t n_mels = M->NumMels;
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8003370:	3c04      	subs	r4, #4
 8003372:	6900      	ldr	r0, [r0, #16]
 8003374:	3d04      	subs	r5, #4
 8003376:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800337a:	4282      	cmp	r2, r0
 800337c:	d100      	bne.n	8003380 <MelFilterbank+0x18>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
    }
    pMelCol[i] = sum;
  }
}
 800337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stop_idx = pStop_idxs[i];
 8003380:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8003384:	f855 6f04 	ldr.w	r6, [r5, #4]!
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8003388:	b29b      	uxth	r3, r3
    sum = 0.0f;
 800338a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80033b0 <MelFilterbank+0x48>
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800338e:	b2b6      	uxth	r6, r6
 8003390:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8003394:	42b3      	cmp	r3, r6
 8003396:	d902      	bls.n	800339e <MelFilterbank+0x36>
    pMelCol[i] = sum;
 8003398:	ece2 7a01 	vstmia	r2!, {s15}
  for (uint32_t i = 0; i < n_mels; i++)
 800339c:	e7ed      	b.n	800337a <MelFilterbank+0x12>
      sum += pSpectrCol[j] * (*pCoefs++);
 800339e:	ecfc 6a01 	vldmia	ip!, {s13}
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80033a2:	3301      	adds	r3, #1
      sum += pSpectrCol[j] * (*pCoefs++);
 80033a4:	ecb7 7a01 	vldmia	r7!, {s14}
 80033a8:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80033ac:	e7f2      	b.n	8003394 <MelFilterbank+0x2c>
 80033ae:	bf00      	nop
 80033b0:	00000000 	.word	0x00000000

080033b4 <ai_network_1_get_error>:
}

AI_API_ENTRY
ai_error ai_network_1_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80033b4:	f001 bb12 	b.w	80049dc <ai_platform_network_get_error>

080033b8 <ai_network_1_create>:
}

AI_API_ENTRY
ai_error ai_network_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80033b8:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80033ba:	2305      	movs	r3, #5
 80033bc:	2200      	movs	r2, #0
 80033be:	e9cd 3200 	strd	r3, r2, [sp]
 80033c2:	2301      	movs	r3, #1
 80033c4:	4a02      	ldr	r2, [pc, #8]	@ (80033d0 <ai_network_1_create+0x18>)
 80033c6:	f001 ff2f 	bl	8005228 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80033ca:	b003      	add	sp, #12
 80033cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80033d0:	2000000c 	.word	0x2000000c

080033d4 <ai_network_1_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80033d4:	b910      	cbnz	r0, 80033dc <ai_network_1_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80033d6:	4802      	ldr	r0, [pc, #8]	@ (80033e0 <ai_network_1_inputs_get+0xc>)
 80033d8:	4b02      	ldr	r3, [pc, #8]	@ (80033e4 <ai_network_1_inputs_get+0x10>)
 80033da:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80033dc:	f001 bc10 	b.w	8004c00 <ai_platform_inputs_get>
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	a1c00100 	.word	0xa1c00100

080033e8 <ai_network_1_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 80033e8:	b910      	cbnz	r0, 80033f0 <ai_network_1_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80033ea:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <ai_network_1_outputs_get+0xc>)
 80033ec:	4b02      	ldr	r3, [pc, #8]	@ (80033f8 <ai_network_1_outputs_get+0x10>)
 80033ee:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80033f0:	f001 bd92 	b.w	8004f18 <ai_platform_outputs_get>
 80033f4:	2000000c 	.word	0x2000000c
 80033f8:	a1c00100 	.word	0xa1c00100

080033fc <ai_network_1_init>:
}

AI_API_ENTRY
ai_bool ai_network_1_init(
  ai_handle network, const ai_network_params* params)
{
 80033fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003400:	4607      	mov	r7, r0
 8003402:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003404:	f002 f8ea 	bl	80055dc <ai_platform_network_init>
  if (!net_ctx) return false;
 8003408:	4604      	mov	r4, r0
 800340a:	2800      	cmp	r0, #0
 800340c:	f000 808c 	beq.w	8003528 <ai_network_1_init+0x12c>
  if (ai_platform_get_weights_map(g_network_1_weights_map, 1, params)) {
 8003410:	f8df 8174 	ldr.w	r8, [pc, #372]	@ 8003588 <ai_network_1_init+0x18c>
 8003414:	4632      	mov	r2, r6
 8003416:	2101      	movs	r1, #1
 8003418:	4640      	mov	r0, r8
 800341a:	f001 fa15 	bl	8004848 <ai_platform_get_weights_map>
 800341e:	4605      	mov	r5, r0
 8003420:	2800      	cmp	r0, #0
 8003422:	f000 8083 	beq.w	800352c <ai_network_1_init+0x130>
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003426:	4a47      	ldr	r2, [pc, #284]	@ (8003544 <ai_network_1_init+0x148>)
 8003428:	6813      	ldr	r3, [r2, #0]
 800342a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800342e:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 0);
 8003430:	f8d8 3000 	ldr.w	r3, [r8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 0);
 8003434:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003438:	4a43      	ldr	r2, [pc, #268]	@ (8003548 <ai_network_1_init+0x14c>)
 800343a:	6811      	ldr	r1, [r2, #0]
 800343c:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003440:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 100);
 8003442:	f103 0164 	add.w	r1, r3, #100	@ 0x64
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 100);
 8003446:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800344a:	4a40      	ldr	r2, [pc, #256]	@ (800354c <ai_network_1_init+0x150>)
 800344c:	6811      	ldr	r1, [r2, #0]
 800344e:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003452:	6011      	str	r1, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 600);
 8003454:	f503 7116 	add.w	r1, r3, #600	@ 0x258
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 600);
 8003458:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800345c:	4a3c      	ldr	r2, [pc, #240]	@ (8003550 <ai_network_1_init+0x154>)
 800345e:	6811      	ldr	r1, [r2, #0]
 8003460:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003464:	6011      	str	r1, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 620);
 8003466:	f503 711b 	add.w	r1, r3, #620	@ 0x26c
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 620);
 800346a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 800346e:	4a39      	ldr	r2, [pc, #228]	@ (8003554 <ai_network_1_init+0x158>)
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003476:	6011      	str	r1, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 1196);
 8003478:	f203 41ac 	addw	r1, r3, #1196	@ 0x4ac
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 1196);
 800347c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8003480:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <ai_network_1_init+0x15c>)
 8003482:	6811      	ldr	r1, [r2, #0]
 8003484:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8003488:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 1260);
 800348a:	f203 41ec 	addw	r1, r3, #1260	@ 0x4ec
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 1260);
 800348e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8003492:	4a32      	ldr	r2, [pc, #200]	@ (800355c <ai_network_1_init+0x160>)
 8003494:	6811      	ldr	r1, [r2, #0]
 8003496:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 800349a:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 10476);
 800349c:	f503 5123 	add.w	r1, r3, #10432	@ 0x28c0
    dense_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 10540);
 80034a0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 10476);
 80034a4:	312c      	adds	r1, #44	@ 0x2c
    dense_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 10540);
 80034a6:	332c      	adds	r3, #44	@ 0x2c
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 10476);
 80034a8:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80034ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003560 <ai_network_1_init+0x164>)
 80034ae:	6811      	ldr	r1, [r2, #0]
 80034b0:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 80034b4:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 10540);
 80034b6:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_1_activations_map, 1, params)) {
 80034ba:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800358c <ai_network_1_init+0x190>
 80034be:	4632      	mov	r2, r6
 80034c0:	2101      	movs	r1, #1
 80034c2:	4640      	mov	r0, r8
 80034c4:	f001 fa18 	bl	80048f8 <ai_platform_get_activations_map>
 80034c8:	4606      	mov	r6, r0
 80034ca:	b3a8      	cbz	r0, 8003538 <ai_network_1_init+0x13c>
    input_0_output_array.data = AI_PTR(g_network_1_activations_map[0] + 11648);
 80034cc:	f8d8 3000 	ldr.w	r3, [r8]
 80034d0:	4a24      	ldr	r2, [pc, #144]	@ (8003564 <ai_network_1_init+0x168>)
 80034d2:	f503 5136 	add.w	r1, r3, #11648	@ 0x2d80
    input_0_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 11648);
 80034d6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_conv2d_scratch0_array.data = AI_PTR(g_network_1_activations_map[0] + 15488);
 80034da:	f503 5172 	add.w	r1, r3, #15488	@ 0x3c80
 80034de:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <ai_network_1_init+0x16c>)
    conv2d_conv2d_scratch0_array.data_start = AI_PTR(g_network_1_activations_map[0] + 15488);
 80034e0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80034e4:	4a21      	ldr	r2, [pc, #132]	@ (800356c <ai_network_1_init+0x170>)
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_network_1_activations_map[0] + 13440);
 80034e6:	f503 5152 	add.w	r1, r3, #13440	@ 0x3480
    conv2d_conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 80034ea:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_network_1_activations_map[0] + 13440);
 80034ee:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <ai_network_1_init+0x174>)
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_1_activations_map[0] + 13440);
 80034f0:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 15104);
 80034f4:	f503 516c 	add.w	r1, r3, #15104	@ 0x3b00
 80034f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <ai_network_1_init+0x178>)
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 15104);
 80034fa:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80034fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003578 <ai_network_1_init+0x17c>)
    dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 100);
 8003500:	f103 0164 	add.w	r1, r3, #100	@ 0x64
    dense_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 8003504:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 100);
 8003508:	4a1c      	ldr	r2, [pc, #112]	@ (800357c <ai_network_1_init+0x180>)
    dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 100);
 800350a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 800350e:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <ai_network_1_init+0x184>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 8003510:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 20);
 8003514:	3314      	adds	r3, #20
 8003516:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <ai_network_1_init+0x188>)
    dense_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 20);
 8003518:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_1_configure_weights(net_ctx, params);
  ok &= network_1_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 800351c:	4638      	mov	r0, r7
 800351e:	f002 f9f9 	bl	8005914 <ai_platform_network_post_init>
 8003522:	4030      	ands	r0, r6
 8003524:	4005      	ands	r5, r0
 8003526:	b2e8      	uxtb	r0, r5

  return ok;
}
 8003528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800352c:	2212      	movs	r2, #18
 800352e:	2130      	movs	r1, #48	@ 0x30
 8003530:	4620      	mov	r0, r4
 8003532:	f001 fb5f 	bl	8004bf4 <ai_platform_network_set_error>
  return false;
 8003536:	e7c0      	b.n	80034ba <ai_network_1_init+0xbe>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003538:	2213      	movs	r2, #19
 800353a:	2130      	movs	r1, #48	@ 0x30
 800353c:	4620      	mov	r0, r4
 800353e:	f001 fb59 	bl	8004bf4 <ai_platform_network_set_error>
  return false;
 8003542:	e7eb      	b.n	800351c <ai_network_1_init+0x120>
 8003544:	200008d0 	.word	0x200008d0
 8003548:	200008b0 	.word	0x200008b0
 800354c:	200008a0 	.word	0x200008a0
 8003550:	20000890 	.word	0x20000890
 8003554:	20000870 	.word	0x20000870
 8003558:	20000850 	.word	0x20000850
 800355c:	20000820 	.word	0x20000820
 8003560:	200007f0 	.word	0x200007f0
 8003564:	20000840 	.word	0x20000840
 8003568:	20000880 	.word	0x20000880
 800356c:	20000830 	.word	0x20000830
 8003570:	20000860 	.word	0x20000860
 8003574:	20000810 	.word	0x20000810
 8003578:	20000800 	.word	0x20000800
 800357c:	200007e0 	.word	0x200007e0
 8003580:	200007d0 	.word	0x200007d0
 8003584:	200008c0 	.word	0x200008c0
 8003588:	20006db8 	.word	0x20006db8
 800358c:	20006dbc 	.word	0x20006dbc

08003590 <ai_network_1_create_and_init>:
{
 8003590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003594:	4688      	mov	r8, r1
 8003596:	b08f      	sub	sp, #60	@ 0x3c
    err = ai_network_1_create(network, AI_NETWORK_1_DATA_CONFIG);
 8003598:	2100      	movs	r1, #0
{
 800359a:	4606      	mov	r6, r0
 800359c:	4617      	mov	r7, r2
    err = ai_network_1_create(network, AI_NETWORK_1_DATA_CONFIG);
 800359e:	f7ff ff0b 	bl	80033b8 <ai_network_1_create>
    if (err.type != AI_ERROR_NONE)
 80035a2:	f010 09ff 	ands.w	r9, r0, #255	@ 0xff
    err = ai_network_1_create(network, AI_NETWORK_1_DATA_CONFIG);
 80035a6:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80035a8:	d107      	bne.n	80035ba <ai_network_1_create_and_init+0x2a>
    if (ai_network_1_data_params_get(&params) != true) {
 80035aa:	4668      	mov	r0, sp
 80035ac:	f000 f83a 	bl	8003624 <ai_network_1_data_params_get>
 80035b0:	b938      	cbnz	r0, 80035c2 <ai_network_1_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 80035b2:	6830      	ldr	r0, [r6, #0]
 80035b4:	f001 fa12 	bl	80049dc <ai_platform_network_get_error>
 80035b8:	4604      	mov	r4, r0
}
 80035ba:	4620      	mov	r0, r4
 80035bc:	b00f      	add	sp, #60	@ 0x3c
 80035be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 80035c2:	f1b8 0f00 	cmp.w	r8, #0
 80035c6:	d11a      	bne.n	80035fe <ai_network_1_create_and_init+0x6e>
    if (weights) {
 80035c8:	bb3f      	cbnz	r7, 800361a <ai_network_1_create_and_init+0x8a>
    if (ai_network_1_init(*network, &params) != true) {
 80035ca:	4669      	mov	r1, sp
 80035cc:	6830      	ldr	r0, [r6, #0]
 80035ce:	f7ff ff15 	bl	80033fc <ai_network_1_init>
 80035d2:	b928      	cbnz	r0, 80035e0 <ai_network_1_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 80035d4:	6830      	ldr	r0, [r6, #0]
 80035d6:	f001 fa01 	bl	80049dc <ai_platform_network_get_error>
 80035da:	4604      	mov	r4, r0
 80035dc:	fa5f f980 	uxtb.w	r9, r0
    return err;
 80035e0:	f369 0407 	bfi	r4, r9, #0, #8
 80035e4:	e7e9      	b.n	80035ba <ai_network_1_create_and_init+0x2a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80035e6:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 80035ea:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_activations.size;idx++)
 80035ec:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80035ee:	a803      	add	r0, sp, #12
 80035f0:	f001 f916 	bl	8004820 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80035f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80035f8:	42ab      	cmp	r3, r5
 80035fa:	dcf4      	bgt.n	80035e6 <ai_network_1_create_and_init+0x56>
 80035fc:	e7e4      	b.n	80035c8 <ai_network_1_create_and_init+0x38>
 80035fe:	464d      	mov	r5, r9
 8003600:	e7f8      	b.n	80035f4 <ai_network_1_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8003602:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8003606:	4629      	mov	r1, r5
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003608:	3501      	adds	r5, #1
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800360a:	a801      	add	r0, sp, #4
 800360c:	f001 f908 	bl	8004820 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8003610:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003614:	42ab      	cmp	r3, r5
 8003616:	dcf4      	bgt.n	8003602 <ai_network_1_create_and_init+0x72>
 8003618:	e7d7      	b.n	80035ca <ai_network_1_create_and_init+0x3a>
 800361a:	2500      	movs	r5, #0
 800361c:	e7f8      	b.n	8003610 <ai_network_1_create_and_init+0x80>

0800361e <ai_network_1_run>:

AI_API_ENTRY
ai_i32 ai_network_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800361e:	f002 baa3 	b.w	8005b68 <ai_platform_network_process>
	...

08003624 <ai_network_1_data_params_get>:
 * @ingroup network_1_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_1_data_params_get(ai_network_params* params)
{
 8003624:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8003626:	4603      	mov	r3, r0
{
 8003628:	b085      	sub	sp, #20
  if (!params) return false;
 800362a:	b170      	cbz	r0, 800364a <ai_network_1_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800362c:	4c08      	ldr	r4, [pc, #32]	@ (8003650 <ai_network_1_data_params_get+0x2c>)
 800362e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_ACTIVATIONS_COUNT, g_network_1_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003630:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8003632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003636:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800363a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800363e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_WEIGHTS_COUNT, g_network_1_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8003642:	4629      	mov	r1, r5
 8003644:	4618      	mov	r0, r3
 8003646:	f001 f9af 	bl	80049a8 <ai_platform_bind_network_params>
}
 800364a:	b005      	add	sp, #20
 800364c:	bd30      	pop	{r4, r5, pc}
 800364e:	bf00      	nop
 8003650:	0800b600 	.word	0x0800b600

08003654 <arm_rfft_fast_init_f32>:
 8003654:	084b      	lsrs	r3, r1, #1
 8003656:	2b80      	cmp	r3, #128	@ 0x80
 8003658:	b430      	push	{r4, r5}
 800365a:	8201      	strh	r1, [r0, #16]
 800365c:	8003      	strh	r3, [r0, #0]
 800365e:	d070      	beq.n	8003742 <arm_rfft_fast_init_f32+0xee>
 8003660:	d916      	bls.n	8003690 <arm_rfft_fast_init_f32+0x3c>
 8003662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003666:	d05f      	beq.n	8003728 <arm_rfft_fast_init_f32+0xd4>
 8003668:	d936      	bls.n	80036d8 <arm_rfft_fast_init_f32+0x84>
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d026      	beq.n	80036be <arm_rfft_fast_init_f32+0x6a>
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003674:	d112      	bne.n	800369c <arm_rfft_fast_init_f32+0x48>
 8003676:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800367a:	4c38      	ldr	r4, [pc, #224]	@ (800375c <arm_rfft_fast_init_f32+0x108>)
 800367c:	4938      	ldr	r1, [pc, #224]	@ (8003760 <arm_rfft_fast_init_f32+0x10c>)
 800367e:	2300      	movs	r3, #0
 8003680:	4a38      	ldr	r2, [pc, #224]	@ (8003764 <arm_rfft_fast_init_f32+0x110>)
 8003682:	8185      	strh	r5, [r0, #12]
 8003684:	6084      	str	r4, [r0, #8]
 8003686:	6041      	str	r1, [r0, #4]
 8003688:	6142      	str	r2, [r0, #20]
 800368a:	4618      	mov	r0, r3
 800368c:	bc30      	pop	{r4, r5}
 800368e:	4770      	bx	lr
 8003690:	2b20      	cmp	r3, #32
 8003692:	d031      	beq.n	80036f8 <arm_rfft_fast_init_f32+0xa4>
 8003694:	2b40      	cmp	r3, #64	@ 0x40
 8003696:	d006      	beq.n	80036a6 <arm_rfft_fast_init_f32+0x52>
 8003698:	2b10      	cmp	r3, #16
 800369a:	d039      	beq.n	8003710 <arm_rfft_fast_init_f32+0xbc>
 800369c:	f04f 33ff 	mov.w	r3, #4294967295
 80036a0:	bc30      	pop	{r4, r5}
 80036a2:	4618      	mov	r0, r3
 80036a4:	4770      	bx	lr
 80036a6:	2538      	movs	r5, #56	@ 0x38
 80036a8:	4c2f      	ldr	r4, [pc, #188]	@ (8003768 <arm_rfft_fast_init_f32+0x114>)
 80036aa:	4930      	ldr	r1, [pc, #192]	@ (800376c <arm_rfft_fast_init_f32+0x118>)
 80036ac:	2300      	movs	r3, #0
 80036ae:	4a30      	ldr	r2, [pc, #192]	@ (8003770 <arm_rfft_fast_init_f32+0x11c>)
 80036b0:	8185      	strh	r5, [r0, #12]
 80036b2:	6084      	str	r4, [r0, #8]
 80036b4:	6041      	str	r1, [r0, #4]
 80036b6:	6142      	str	r2, [r0, #20]
 80036b8:	4618      	mov	r0, r3
 80036ba:	bc30      	pop	{r4, r5}
 80036bc:	4770      	bx	lr
 80036be:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80036c2:	4c2c      	ldr	r4, [pc, #176]	@ (8003774 <arm_rfft_fast_init_f32+0x120>)
 80036c4:	492c      	ldr	r1, [pc, #176]	@ (8003778 <arm_rfft_fast_init_f32+0x124>)
 80036c6:	2300      	movs	r3, #0
 80036c8:	4a2c      	ldr	r2, [pc, #176]	@ (800377c <arm_rfft_fast_init_f32+0x128>)
 80036ca:	8185      	strh	r5, [r0, #12]
 80036cc:	6084      	str	r4, [r0, #8]
 80036ce:	6041      	str	r1, [r0, #4]
 80036d0:	6142      	str	r2, [r0, #20]
 80036d2:	4618      	mov	r0, r3
 80036d4:	bc30      	pop	{r4, r5}
 80036d6:	4770      	bx	lr
 80036d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036dc:	d1de      	bne.n	800369c <arm_rfft_fast_init_f32+0x48>
 80036de:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80036e2:	4c27      	ldr	r4, [pc, #156]	@ (8003780 <arm_rfft_fast_init_f32+0x12c>)
 80036e4:	4927      	ldr	r1, [pc, #156]	@ (8003784 <arm_rfft_fast_init_f32+0x130>)
 80036e6:	2300      	movs	r3, #0
 80036e8:	4a27      	ldr	r2, [pc, #156]	@ (8003788 <arm_rfft_fast_init_f32+0x134>)
 80036ea:	8185      	strh	r5, [r0, #12]
 80036ec:	6084      	str	r4, [r0, #8]
 80036ee:	6041      	str	r1, [r0, #4]
 80036f0:	6142      	str	r2, [r0, #20]
 80036f2:	4618      	mov	r0, r3
 80036f4:	bc30      	pop	{r4, r5}
 80036f6:	4770      	bx	lr
 80036f8:	2530      	movs	r5, #48	@ 0x30
 80036fa:	4c24      	ldr	r4, [pc, #144]	@ (800378c <arm_rfft_fast_init_f32+0x138>)
 80036fc:	4924      	ldr	r1, [pc, #144]	@ (8003790 <arm_rfft_fast_init_f32+0x13c>)
 80036fe:	2300      	movs	r3, #0
 8003700:	4a24      	ldr	r2, [pc, #144]	@ (8003794 <arm_rfft_fast_init_f32+0x140>)
 8003702:	8185      	strh	r5, [r0, #12]
 8003704:	6084      	str	r4, [r0, #8]
 8003706:	6041      	str	r1, [r0, #4]
 8003708:	6142      	str	r2, [r0, #20]
 800370a:	4618      	mov	r0, r3
 800370c:	bc30      	pop	{r4, r5}
 800370e:	4770      	bx	lr
 8003710:	2514      	movs	r5, #20
 8003712:	4c21      	ldr	r4, [pc, #132]	@ (8003798 <arm_rfft_fast_init_f32+0x144>)
 8003714:	4921      	ldr	r1, [pc, #132]	@ (800379c <arm_rfft_fast_init_f32+0x148>)
 8003716:	2300      	movs	r3, #0
 8003718:	4a21      	ldr	r2, [pc, #132]	@ (80037a0 <arm_rfft_fast_init_f32+0x14c>)
 800371a:	8185      	strh	r5, [r0, #12]
 800371c:	6084      	str	r4, [r0, #8]
 800371e:	6041      	str	r1, [r0, #4]
 8003720:	6142      	str	r2, [r0, #20]
 8003722:	4618      	mov	r0, r3
 8003724:	bc30      	pop	{r4, r5}
 8003726:	4770      	bx	lr
 8003728:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800372c:	4c1d      	ldr	r4, [pc, #116]	@ (80037a4 <arm_rfft_fast_init_f32+0x150>)
 800372e:	491e      	ldr	r1, [pc, #120]	@ (80037a8 <arm_rfft_fast_init_f32+0x154>)
 8003730:	2300      	movs	r3, #0
 8003732:	4a1e      	ldr	r2, [pc, #120]	@ (80037ac <arm_rfft_fast_init_f32+0x158>)
 8003734:	8185      	strh	r5, [r0, #12]
 8003736:	6084      	str	r4, [r0, #8]
 8003738:	6041      	str	r1, [r0, #4]
 800373a:	6142      	str	r2, [r0, #20]
 800373c:	4618      	mov	r0, r3
 800373e:	bc30      	pop	{r4, r5}
 8003740:	4770      	bx	lr
 8003742:	25d0      	movs	r5, #208	@ 0xd0
 8003744:	4c1a      	ldr	r4, [pc, #104]	@ (80037b0 <arm_rfft_fast_init_f32+0x15c>)
 8003746:	491b      	ldr	r1, [pc, #108]	@ (80037b4 <arm_rfft_fast_init_f32+0x160>)
 8003748:	2300      	movs	r3, #0
 800374a:	4a1b      	ldr	r2, [pc, #108]	@ (80037b8 <arm_rfft_fast_init_f32+0x164>)
 800374c:	8185      	strh	r5, [r0, #12]
 800374e:	6084      	str	r4, [r0, #8]
 8003750:	6041      	str	r1, [r0, #4]
 8003752:	6142      	str	r2, [r0, #20]
 8003754:	4618      	mov	r0, r3
 8003756:	bc30      	pop	{r4, r5}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	08034f78 	.word	0x08034f78
 8003760:	08026170 	.word	0x08026170
 8003764:	0802c2e0 	.word	0x0802c2e0
 8003768:	0802a270 	.word	0x0802a270
 800376c:	08036d38 	.word	0x08036d38
 8003770:	08039228 	.word	0x08039228
 8003774:	08032c60 	.word	0x08032c60
 8003778:	08030b60 	.word	0x08030b60
 800377c:	0802a2e0 	.word	0x0802a2e0
 8003780:	08038eb8 	.word	0x08038eb8
 8003784:	080302e0 	.word	0x080302e0
 8003788:	08036f38 	.word	0x08036f38
 800378c:	08033b18 	.word	0x08033b18
 8003790:	08032b60 	.word	0x08032b60
 8003794:	0802a170 	.word	0x0802a170
 8003798:	08033a70 	.word	0x08033a70
 800379c:	08030ae0 	.word	0x08030ae0
 80037a0:	08033a98 	.word	0x08033a98
 80037a4:	08037738 	.word	0x08037738
 80037a8:	08033f78 	.word	0x08033f78
 80037ac:	08037ab8 	.word	0x08037ab8
 80037b0:	08039428 	.word	0x08039428
 80037b4:	08033b78 	.word	0x08033b78
 80037b8:	08038ab8 	.word	0x08038ab8

080037bc <arm_rfft_fast_f32>:
 80037bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c0:	8a05      	ldrh	r5, [r0, #16]
 80037c2:	4606      	mov	r6, r0
 80037c4:	4617      	mov	r7, r2
 80037c6:	460c      	mov	r4, r1
 80037c8:	086d      	lsrs	r5, r5, #1
 80037ca:	8005      	strh	r5, [r0, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d15e      	bne.n	800388e <arm_rfft_fast_f32+0xd2>
 80037d0:	461a      	mov	r2, r3
 80037d2:	2301      	movs	r3, #1
 80037d4:	f000 fbde 	bl	8003f94 <arm_cfft_f32>
 80037d8:	edd4 7a00 	vldr	s15, [r4]
 80037dc:	ed94 7a01 	vldr	s14, [r4, #4]
 80037e0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80037e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037e8:	8832      	ldrh	r2, [r6, #0]
 80037ea:	ee37 7a07 	vadd.f32	s14, s14, s14
 80037ee:	6975      	ldr	r5, [r6, #20]
 80037f0:	3a01      	subs	r2, #1
 80037f2:	eeb0 3a46 	vmov.f32	s6, s12
 80037f6:	3510      	adds	r5, #16
 80037f8:	f107 0610 	add.w	r6, r7, #16
 80037fc:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003800:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8003804:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003808:	f104 0310 	add.w	r3, r4, #16
 800380c:	3808      	subs	r0, #8
 800380e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8003812:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003816:	ed87 7a00 	vstr	s14, [r7]
 800381a:	edc7 7a01 	vstr	s15, [r7, #4]
 800381e:	ed90 7a02 	vldr	s14, [r0, #8]
 8003822:	3a01      	subs	r2, #1
 8003824:	ed53 6a02 	vldr	s13, [r3, #-8]
 8003828:	f1a0 0008 	sub.w	r0, r0, #8
 800382c:	ed15 6a02 	vldr	s12, [r5, #-8]
 8003830:	f103 0308 	add.w	r3, r3, #8
 8003834:	ee77 7a66 	vsub.f32	s15, s14, s13
 8003838:	edd0 3a05 	vldr	s7, [r0, #20]
 800383c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8003840:	ee77 4a26 	vadd.f32	s9, s14, s13
 8003844:	ed55 5a01 	vldr	s11, [r5, #-4]
 8003848:	f106 0608 	add.w	r6, r6, #8
 800384c:	ee66 6a27 	vmul.f32	s13, s12, s15
 8003850:	f105 0508 	add.w	r5, r5, #8
 8003854:	ee33 4a85 	vadd.f32	s8, s7, s10
 8003858:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800385c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003860:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003864:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003868:	ee77 7a05 	vadd.f32	s15, s14, s10
 800386c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003870:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8003874:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8003878:	ee67 7a83 	vmul.f32	s15, s15, s6
 800387c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8003880:	ed46 7a03 	vstr	s15, [r6, #-12]
 8003884:	ed06 7a04 	vstr	s14, [r6, #-16]
 8003888:	d1c9      	bne.n	800381e <arm_rfft_fast_f32+0x62>
 800388a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800388e:	edd1 7a00 	vldr	s15, [r1]
 8003892:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 8003896:	edd1 6a01 	vldr	s13, [r1, #4]
 800389a:	1e68      	subs	r0, r5, #1
 800389c:	6975      	ldr	r5, [r6, #20]
 800389e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80038a2:	00c1      	lsls	r1, r0, #3
 80038a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80038a8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80038ac:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80038b0:	ed82 7a00 	vstr	s14, [r2]
 80038b4:	edc2 7a01 	vstr	s15, [r2, #4]
 80038b8:	b3e0      	cbz	r0, 8003934 <arm_rfft_fast_f32+0x178>
 80038ba:	3908      	subs	r1, #8
 80038bc:	f104 0210 	add.w	r2, r4, #16
 80038c0:	3510      	adds	r5, #16
 80038c2:	440c      	add	r4, r1
 80038c4:	f107 0110 	add.w	r1, r7, #16
 80038c8:	ed94 7a02 	vldr	s14, [r4, #8]
 80038cc:	3801      	subs	r0, #1
 80038ce:	ed52 6a02 	vldr	s13, [r2, #-8]
 80038d2:	f1a4 0408 	sub.w	r4, r4, #8
 80038d6:	ed15 6a02 	vldr	s12, [r5, #-8]
 80038da:	f102 0208 	add.w	r2, r2, #8
 80038de:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80038e2:	ed94 4a05 	vldr	s8, [r4, #20]
 80038e6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80038ea:	ee77 6a26 	vadd.f32	s13, s14, s13
 80038ee:	ed55 5a01 	vldr	s11, [r5, #-4]
 80038f2:	f101 0108 	add.w	r1, r1, #8
 80038f6:	ee26 3a27 	vmul.f32	s6, s12, s15
 80038fa:	f105 0508 	add.w	r5, r5, #8
 80038fe:	ee74 4a05 	vadd.f32	s9, s8, s10
 8003902:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8003906:	ee35 5a44 	vsub.f32	s10, s10, s8
 800390a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800390e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003912:	ee77 7a05 	vadd.f32	s15, s14, s10
 8003916:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800391a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800391e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8003922:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8003926:	ee27 7a23 	vmul.f32	s14, s14, s7
 800392a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800392e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003932:	d1c9      	bne.n	80038c8 <arm_rfft_fast_f32+0x10c>
 8003934:	461a      	mov	r2, r3
 8003936:	4639      	mov	r1, r7
 8003938:	4630      	mov	r0, r6
 800393a:	2301      	movs	r3, #1
 800393c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003940:	f000 bb28 	b.w	8003f94 <arm_cfft_f32>

08003944 <arm_cfft_radix8by2_f32>:
 8003944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003948:	4607      	mov	r7, r0
 800394a:	4608      	mov	r0, r1
 800394c:	ed2d 8b06 	vpush	{d8-d10}
 8003950:	f8b7 e000 	ldrh.w	lr, [r7]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800395a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800395e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003962:	f000 80b0 	beq.w	8003ac6 <arm_cfft_radix8by2_f32+0x182>
 8003966:	008b      	lsls	r3, r1, #2
 8003968:	3210      	adds	r2, #16
 800396a:	f100 0610 	add.w	r6, r0, #16
 800396e:	f108 0510 	add.w	r5, r8, #16
 8003972:	3310      	adds	r3, #16
 8003974:	18c4      	adds	r4, r0, r3
 8003976:	4443      	add	r3, r8
 8003978:	ed55 6a04 	vldr	s13, [r5, #-16]
 800397c:	f1be 0e01 	subs.w	lr, lr, #1
 8003980:	ed56 4a04 	vldr	s9, [r6, #-16]
 8003984:	f104 0410 	add.w	r4, r4, #16
 8003988:	ed15 7a03 	vldr	s14, [r5, #-12]
 800398c:	f106 0610 	add.w	r6, r6, #16
 8003990:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8003994:	ed55 7a02 	vldr	s15, [r5, #-8]
 8003998:	ed55 2a01 	vldr	s5, [r5, #-4]
 800399c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80039a0:	ed53 0a04 	vldr	s1, [r3, #-16]
 80039a4:	f102 0210 	add.w	r2, r2, #16
 80039a8:	ed13 5a03 	vldr	s10, [r3, #-12]
 80039ac:	f105 0510 	add.w	r5, r5, #16
 80039b0:	ed13 3a02 	vldr	s6, [r3, #-8]
 80039b4:	f103 0310 	add.w	r3, r3, #16
 80039b8:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 80039bc:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 80039c0:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 80039c4:	ee33 8a83 	vadd.f32	s16, s7, s6
 80039c8:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 80039cc:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 80039d0:	ee34 0a06 	vadd.f32	s0, s8, s12
 80039d4:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80039d8:	ee76 aa87 	vadd.f32	s21, s13, s14
 80039dc:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80039e0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80039e4:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80039e8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80039ec:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 80039f0:	ee71 8a05 	vadd.f32	s17, s2, s10
 80039f4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80039f8:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 80039fc:	ee72 9a22 	vadd.f32	s19, s4, s5
 8003a00:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003a04:	ee35 5a41 	vsub.f32	s10, s10, s2
 8003a08:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 8003a0c:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8003a10:	ee36 6a44 	vsub.f32	s12, s12, s8
 8003a14:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8003a18:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8003a1c:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8003a20:	ee72 7a62 	vsub.f32	s15, s4, s5
 8003a24:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8003a28:	ee73 2a63 	vsub.f32	s5, s6, s7
 8003a2c:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8003a30:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8003a34:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8003a38:	ee24 3a84 	vmul.f32	s6, s9, s8
 8003a3c:	ee27 2a26 	vmul.f32	s4, s14, s13
 8003a40:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8003a44:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8003a48:	ee27 7a04 	vmul.f32	s14, s14, s8
 8003a4c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003a50:	ee65 6a26 	vmul.f32	s13, s10, s13
 8003a54:	ee25 5a04 	vmul.f32	s10, s10, s8
 8003a58:	ee37 7a64 	vsub.f32	s14, s14, s9
 8003a5c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003a60:	ee33 4a02 	vadd.f32	s8, s6, s4
 8003a64:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8003a68:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8003a6c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8003a70:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8003a74:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8003a78:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8003a7c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8003a80:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8003a84:	ee27 4a87 	vmul.f32	s8, s15, s14
 8003a88:	ee61 5a87 	vmul.f32	s11, s3, s14
 8003a8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a90:	ee22 5a87 	vmul.f32	s10, s5, s14
 8003a94:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003a98:	ee26 6a26 	vmul.f32	s12, s12, s13
 8003a9c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8003aa0:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003aa4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8003aa8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003aac:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003ab0:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8003ab4:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8003ab8:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8003abc:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8003ac0:	f47f af5a 	bne.w	8003978 <arm_cfft_radix8by2_f32+0x34>
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	b28c      	uxth	r4, r1
 8003ac8:	2302      	movs	r3, #2
 8003aca:	4621      	mov	r1, r4
 8003acc:	f000 fb78 	bl	80041c0 <arm_radix8_butterfly_f32>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	ecbd 8b06 	vpop	{d8-d10}
 8003adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae0:	f000 bb6e 	b.w	80041c0 <arm_radix8_butterfly_f32>

08003ae4 <arm_cfft_radix8by4_f32>:
 8003ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae8:	ed2d 8b06 	vpush	{d8-d10}
 8003aec:	8804      	ldrh	r4, [r0, #0]
 8003aee:	b08f      	sub	sp, #60	@ 0x3c
 8003af0:	ed91 6a00 	vldr	s12, [r1]
 8003af4:	460a      	mov	r2, r1
 8003af6:	0864      	lsrs	r4, r4, #1
 8003af8:	ed91 7a01 	vldr	s14, [r1, #4]
 8003afc:	9101      	str	r1, [sp, #4]
 8003afe:	00a3      	lsls	r3, r4, #2
 8003b00:	6841      	ldr	r1, [r0, #4]
 8003b02:	0864      	lsrs	r4, r4, #1
 8003b04:	900c      	str	r0, [sp, #48]	@ 0x30
 8003b06:	9205      	str	r2, [sp, #20]
 8003b08:	f101 0610 	add.w	r6, r1, #16
 8003b0c:	4625      	mov	r5, r4
 8003b0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003b10:	f101 0408 	add.w	r4, r1, #8
 8003b14:	9602      	str	r6, [sp, #8]
 8003b16:	9407      	str	r4, [sp, #28]
 8003b18:	18d4      	adds	r4, r2, r3
 8003b1a:	1eaa      	subs	r2, r5, #2
 8003b1c:	f101 0518 	add.w	r5, r1, #24
 8003b20:	18e0      	adds	r0, r4, r3
 8003b22:	edd4 4a00 	vldr	s9, [r4]
 8003b26:	ed94 4a01 	vldr	s8, [r4, #4]
 8003b2a:	46a6      	mov	lr, r4
 8003b2c:	edd0 6a00 	vldr	s13, [r0]
 8003b30:	18c7      	adds	r7, r0, r3
 8003b32:	edd0 7a01 	vldr	s15, [r0, #4]
 8003b36:	46a0      	mov	r8, r4
 8003b38:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003b3c:	ed97 5a00 	vldr	s10, [r7]
 8003b40:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003b44:	4604      	mov	r4, r0
 8003b46:	9506      	str	r5, [sp, #24]
 8003b48:	4605      	mov	r5, r0
 8003b4a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8003b4e:	900a      	str	r0, [sp, #40]	@ 0x28
 8003b50:	9801      	ldr	r0, [sp, #4]
 8003b52:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b5a:	ed97 3a01 	vldr	s6, [r7, #4]
 8003b5e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8003b62:	46bc      	mov	ip, r7
 8003b64:	ee76 3a84 	vadd.f32	s7, s13, s8
 8003b68:	9704      	str	r7, [sp, #16]
 8003b6a:	ee36 7a44 	vsub.f32	s14, s12, s8
 8003b6e:	f8cd e00c 	str.w	lr, [sp, #12]
 8003b72:	ee12 9a90 	vmov	r9, s5
 8003b76:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8003b7a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8003b7e:	1f3e      	subs	r6, r7, #4
 8003b80:	f840 9b08 	str.w	r9, [r0], #8
 8003b84:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8003b88:	edde 2a01 	vldr	s5, [lr, #4]
 8003b8c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8003b90:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8003b94:	eddc 4a01 	vldr	s9, [ip, #4]
 8003b98:	ee36 6a22 	vadd.f32	s12, s12, s5
 8003b9c:	9001      	str	r0, [sp, #4]
 8003b9e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8003ba2:	9805      	ldr	r0, [sp, #20]
 8003ba4:	ee13 9a90 	vmov	r9, s7
 8003ba8:	ee37 7a43 	vsub.f32	s14, s14, s6
 8003bac:	ee36 6a24 	vadd.f32	s12, s12, s9
 8003bb0:	f1ae 0704 	sub.w	r7, lr, #4
 8003bb4:	ee74 4a05 	vadd.f32	s9, s8, s10
 8003bb8:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003bbc:	ed80 6a01 	vstr	s12, [r0, #4]
 8003bc0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003bc4:	f848 9b08 	str.w	r9, [r8], #8
 8003bc8:	edce 4a01 	vstr	s9, [lr, #4]
 8003bcc:	ee15 ea90 	vmov	lr, s11
 8003bd0:	f844 eb08 	str.w	lr, [r4], #8
 8003bd4:	ee16 ea90 	vmov	lr, s13
 8003bd8:	9408      	str	r4, [sp, #32]
 8003bda:	462c      	mov	r4, r5
 8003bdc:	ed85 7a01 	vstr	s14, [r5, #4]
 8003be0:	9d04      	ldr	r5, [sp, #16]
 8003be2:	f84c eb08 	str.w	lr, [ip], #8
 8003be6:	edc5 7a01 	vstr	s15, [r5, #4]
 8003bea:	0855      	lsrs	r5, r2, #1
 8003bec:	9509      	str	r5, [sp, #36]	@ 0x24
 8003bee:	f000 8130 	beq.w	8003e52 <arm_cfft_radix8by4_f32+0x36e>
 8003bf2:	9805      	ldr	r0, [sp, #20]
 8003bf4:	3b08      	subs	r3, #8
 8003bf6:	46ab      	mov	fp, r5
 8003bf8:	f1a4 020c 	sub.w	r2, r4, #12
 8003bfc:	f100 0510 	add.w	r5, r0, #16
 8003c00:	f101 0920 	add.w	r9, r1, #32
 8003c04:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8003c08:	f8dd a008 	ldr.w	sl, [sp, #8]
 8003c0c:	4433      	add	r3, r6
 8003c0e:	3410      	adds	r4, #16
 8003c10:	4660      	mov	r0, ip
 8003c12:	4641      	mov	r1, r8
 8003c14:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8003c18:	ed54 6a02 	vldr	s13, [r4, #-8]
 8003c1c:	f1bb 0b01 	subs.w	fp, fp, #1
 8003c20:	ed55 5a02 	vldr	s11, [r5, #-8]
 8003c24:	f10a 0a08 	add.w	sl, sl, #8
 8003c28:	edd1 7a00 	vldr	s15, [r1]
 8003c2c:	f105 0508 	add.w	r5, r5, #8
 8003c30:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8003c34:	edd0 2a00 	vldr	s5, [r0]
 8003c38:	ed14 7a01 	vldr	s14, [r4, #-4]
 8003c3c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8003c40:	ed55 6a03 	vldr	s13, [r5, #-12]
 8003c44:	f1a2 0208 	sub.w	r2, r2, #8
 8003c48:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8003c4c:	ed90 2a01 	vldr	s4, [r0, #4]
 8003c50:	ee36 5a87 	vadd.f32	s10, s13, s14
 8003c54:	ed91 6a01 	vldr	s12, [r1, #4]
 8003c58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003c5c:	f109 0910 	add.w	r9, r9, #16
 8003c60:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8003c64:	f104 0408 	add.w	r4, r4, #8
 8003c68:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8003c6c:	f10e 0e18 	add.w	lr, lr, #24
 8003c70:	ee37 3a67 	vsub.f32	s6, s14, s15
 8003c74:	f1a3 0308 	sub.w	r3, r3, #8
 8003c78:	ed45 6a04 	vstr	s13, [r5, #-16]
 8003c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c80:	edd1 6a01 	vldr	s13, [r1, #4]
 8003c84:	ee75 1a86 	vadd.f32	s3, s11, s12
 8003c88:	edd0 4a01 	vldr	s9, [r0, #4]
 8003c8c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8003c90:	ee75 6a26 	vadd.f32	s13, s10, s13
 8003c94:	ee35 5a46 	vsub.f32	s10, s10, s12
 8003c98:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8003c9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8003ca0:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8003ca4:	ee35 5a42 	vsub.f32	s10, s10, s4
 8003ca8:	ed45 6a03 	vstr	s13, [r5, #-12]
 8003cac:	ee36 2a02 	vadd.f32	s4, s12, s4
 8003cb0:	edd6 7a00 	vldr	s15, [r6]
 8003cb4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8003cb8:	ed97 1a00 	vldr	s2, [r7]
 8003cbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8003cc0:	ed92 8a04 	vldr	s16, [r2, #16]
 8003cc4:	ee71 8a27 	vadd.f32	s17, s2, s15
 8003cc8:	ed93 aa04 	vldr	s20, [r3, #16]
 8003ccc:	ed16 7a01 	vldr	s14, [r6, #-4]
 8003cd0:	ee71 7a67 	vsub.f32	s15, s2, s15
 8003cd4:	ed57 0a01 	vldr	s1, [r7, #-4]
 8003cd8:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8003cdc:	ee38 6a88 	vadd.f32	s12, s17, s16
 8003ce0:	edd3 9a03 	vldr	s19, [r3, #12]
 8003ce4:	ee30 0a87 	vadd.f32	s0, s1, s14
 8003ce8:	ed92 9a03 	vldr	s18, [r2, #12]
 8003cec:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8003cf0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8003cf4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8003cf8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8003cfc:	ee16 ca10 	vmov	ip, s12
 8003d00:	ee30 6a49 	vsub.f32	s12, s0, s18
 8003d04:	ee77 4a01 	vadd.f32	s9, s14, s2
 8003d08:	f847 c908 	str.w	ip, [r7], #-8
 8003d0c:	ee34 4a29 	vadd.f32	s8, s8, s19
 8003d10:	edd2 8a03 	vldr	s17, [r2, #12]
 8003d14:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8003d18:	ed93 8a03 	vldr	s16, [r3, #12]
 8003d1c:	ee71 0a47 	vsub.f32	s1, s2, s14
 8003d20:	ee30 0a28 	vadd.f32	s0, s0, s17
 8003d24:	ee39 1a67 	vsub.f32	s2, s18, s15
 8003d28:	ee36 6a69 	vsub.f32	s12, s12, s19
 8003d2c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8003d30:	ee75 5aca 	vsub.f32	s11, s11, s20
 8003d34:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d38:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8003d3c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8003d40:	ee21 8a80 	vmul.f32	s16, s3, s0
 8003d44:	ee23 7a26 	vmul.f32	s14, s6, s13
 8003d48:	ee64 7a26 	vmul.f32	s15, s8, s13
 8003d4c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8003d50:	ee24 4a00 	vmul.f32	s8, s8, s0
 8003d54:	ee23 3a00 	vmul.f32	s6, s6, s0
 8003d58:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8003d5c:	ee24 0a80 	vmul.f32	s0, s9, s0
 8003d60:	ee38 7a07 	vadd.f32	s14, s16, s14
 8003d64:	ee76 6a84 	vadd.f32	s13, s13, s8
 8003d68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003d6c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003d70:	ee17 ca10 	vmov	ip, s14
 8003d74:	f841 cb08 	str.w	ip, [r1], #8
 8003d78:	ed01 3a01 	vstr	s6, [r1, #-4]
 8003d7c:	ed82 0a04 	vstr	s0, [r2, #16]
 8003d80:	edc2 6a03 	vstr	s13, [r2, #12]
 8003d84:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8003d88:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8003d8c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8003d90:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8003d94:	ee65 4a27 	vmul.f32	s9, s10, s15
 8003d98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d9c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8003da0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003da4:	ee25 5a26 	vmul.f32	s10, s10, s13
 8003da8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003dac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db0:	ee34 6a24 	vadd.f32	s12, s8, s9
 8003db4:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8003db8:	ee35 5a63 	vsub.f32	s10, s10, s7
 8003dbc:	ee17 ca90 	vmov	ip, s15
 8003dc0:	ed04 6a04 	vstr	s12, [r4, #-16]
 8003dc4:	ed04 5a03 	vstr	s10, [r4, #-12]
 8003dc8:	f846 c908 	str.w	ip, [r6], #-8
 8003dcc:	edc6 6a01 	vstr	s13, [r6, #4]
 8003dd0:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8003dd4:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8003dd8:	ee62 5a27 	vmul.f32	s11, s4, s15
 8003ddc:	ee22 6a87 	vmul.f32	s12, s5, s14
 8003de0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8003de4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8003de8:	ee61 6a07 	vmul.f32	s13, s2, s14
 8003dec:	ee20 7a87 	vmul.f32	s14, s1, s14
 8003df0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003df4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8003df8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8003dfc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8003e00:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8003e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e08:	ee16 ca10 	vmov	ip, s12
 8003e0c:	f840 cb08 	str.w	ip, [r0], #8
 8003e10:	ed40 2a01 	vstr	s5, [r0, #-4]
 8003e14:	edc3 0a04 	vstr	s1, [r3, #16]
 8003e18:	edc3 7a03 	vstr	s15, [r3, #12]
 8003e1c:	f47f aefc 	bne.w	8003c18 <arm_cfft_radix8by4_f32+0x134>
 8003e20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e22:	9802      	ldr	r0, [sp, #8]
 8003e24:	00cb      	lsls	r3, r1, #3
 8003e26:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8003e2a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003e2e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003e32:	4498      	add	r8, r3
 8003e34:	449c      	add	ip, r3
 8003e36:	9102      	str	r1, [sp, #8]
 8003e38:	9901      	ldr	r1, [sp, #4]
 8003e3a:	4419      	add	r1, r3
 8003e3c:	9101      	str	r1, [sp, #4]
 8003e3e:	9907      	ldr	r1, [sp, #28]
 8003e40:	4419      	add	r1, r3
 8003e42:	9107      	str	r1, [sp, #28]
 8003e44:	9908      	ldr	r1, [sp, #32]
 8003e46:	4419      	add	r1, r3
 8003e48:	9b06      	ldr	r3, [sp, #24]
 8003e4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e4e:	9108      	str	r1, [sp, #32]
 8003e50:	9306      	str	r3, [sp, #24]
 8003e52:	9a01      	ldr	r2, [sp, #4]
 8003e54:	2304      	movs	r3, #4
 8003e56:	9e08      	ldr	r6, [sp, #32]
 8003e58:	edd2 7a00 	vldr	s15, [r2]
 8003e5c:	ed96 7a00 	vldr	s14, [r6]
 8003e60:	edd8 2a00 	vldr	s5, [r8]
 8003e64:	ee77 5a87 	vadd.f32	s11, s15, s14
 8003e68:	ed9c 3a00 	vldr	s6, [ip]
 8003e6c:	ed92 6a01 	vldr	s12, [r2, #4]
 8003e70:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003e74:	edd6 6a01 	vldr	s13, [r6, #4]
 8003e78:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8003e7c:	ed9c 2a01 	vldr	s4, [ip, #4]
 8003e80:	ee36 5a26 	vadd.f32	s10, s12, s13
 8003e84:	edd8 7a01 	vldr	s15, [r8, #4]
 8003e88:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003e8c:	9d02      	ldr	r5, [sp, #8]
 8003e8e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8003e92:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8003e96:	ee37 4a27 	vadd.f32	s8, s14, s15
 8003e9a:	9805      	ldr	r0, [sp, #20]
 8003e9c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	ed82 6a00 	vstr	s12, [r2]
 8003ea6:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8003eaa:	edd8 3a01 	vldr	s7, [r8, #4]
 8003eae:	ee75 5a67 	vsub.f32	s11, s10, s15
 8003eb2:	eddc 1a01 	vldr	s3, [ip, #4]
 8003eb6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003eba:	ee75 3a23 	vadd.f32	s7, s10, s7
 8003ebe:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003ec2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8003ec6:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8003eca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ece:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003ed2:	ed82 5a01 	vstr	s10, [r2, #4]
 8003ed6:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003eda:	9a07      	ldr	r2, [sp, #28]
 8003edc:	ee77 7a02 	vadd.f32	s15, s14, s4
 8003ee0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8003ee4:	edd2 2a00 	vldr	s5, [r2]
 8003ee8:	ed92 5a01 	vldr	s10, [r2, #4]
 8003eec:	ee64 3a22 	vmul.f32	s7, s8, s5
 8003ef0:	ee24 4a05 	vmul.f32	s8, s8, s10
 8003ef4:	ee24 5a85 	vmul.f32	s10, s9, s10
 8003ef8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8003efc:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003f00:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8003f04:	ed88 5a00 	vstr	s10, [r8]
 8003f08:	edc8 4a01 	vstr	s9, [r8, #4]
 8003f0c:	edd5 4a01 	vldr	s9, [r5, #4]
 8003f10:	edd5 6a00 	vldr	s13, [r5]
 8003f14:	9d06      	ldr	r5, [sp, #24]
 8003f16:	ee26 5a26 	vmul.f32	s10, s12, s13
 8003f1a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003f1e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8003f22:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8003f26:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8003f2a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003f2e:	ed86 6a01 	vstr	s12, [r6, #4]
 8003f32:	edc6 5a00 	vstr	s11, [r6]
 8003f36:	edd5 5a01 	vldr	s11, [r5, #4]
 8003f3a:	edd5 6a00 	vldr	s13, [r5]
 8003f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f40:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8003f44:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003f48:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003f4c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003f50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f54:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003f58:	edcc 7a01 	vstr	s15, [ip, #4]
 8003f5c:	ed8c 7a00 	vstr	s14, [ip]
 8003f60:	6872      	ldr	r2, [r6, #4]
 8003f62:	f000 f92d 	bl	80041c0 <arm_radix8_butterfly_f32>
 8003f66:	9803      	ldr	r0, [sp, #12]
 8003f68:	4621      	mov	r1, r4
 8003f6a:	6872      	ldr	r2, [r6, #4]
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f000 f927 	bl	80041c0 <arm_radix8_butterfly_f32>
 8003f72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003f74:	4621      	mov	r1, r4
 8003f76:	6872      	ldr	r2, [r6, #4]
 8003f78:	2304      	movs	r3, #4
 8003f7a:	f000 f921 	bl	80041c0 <arm_radix8_butterfly_f32>
 8003f7e:	4621      	mov	r1, r4
 8003f80:	6872      	ldr	r2, [r6, #4]
 8003f82:	2304      	movs	r3, #4
 8003f84:	9804      	ldr	r0, [sp, #16]
 8003f86:	b00f      	add	sp, #60	@ 0x3c
 8003f88:	ecbd 8b06 	vpop	{d8-d10}
 8003f8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f90:	f000 b916 	b.w	80041c0 <arm_radix8_butterfly_f32>

08003f94 <arm_cfft_f32>:
 8003f94:	2a01      	cmp	r2, #1
 8003f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9a:	4606      	mov	r6, r0
 8003f9c:	4617      	mov	r7, r2
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	4698      	mov	r8, r3
 8003fa2:	8805      	ldrh	r5, [r0, #0]
 8003fa4:	d053      	beq.n	800404e <arm_cfft_f32+0xba>
 8003fa6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8003faa:	d04b      	beq.n	8004044 <arm_cfft_f32+0xb0>
 8003fac:	d916      	bls.n	8003fdc <arm_cfft_f32+0x48>
 8003fae:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8003fb2:	d01a      	beq.n	8003fea <arm_cfft_f32+0x56>
 8003fb4:	d95a      	bls.n	800406c <arm_cfft_f32+0xd8>
 8003fb6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8003fba:	d043      	beq.n	8004044 <arm_cfft_f32+0xb0>
 8003fbc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8003fc0:	d105      	bne.n	8003fce <arm_cfft_f32+0x3a>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	6872      	ldr	r2, [r6, #4]
 8003fc6:	4629      	mov	r1, r5
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 f8f9 	bl	80041c0 <arm_radix8_butterfly_f32>
 8003fce:	f1b8 0f00 	cmp.w	r8, #0
 8003fd2:	d111      	bne.n	8003ff8 <arm_cfft_f32+0x64>
 8003fd4:	2f01      	cmp	r7, #1
 8003fd6:	d016      	beq.n	8004006 <arm_cfft_f32+0x72>
 8003fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fdc:	2d20      	cmp	r5, #32
 8003fde:	d031      	beq.n	8004044 <arm_cfft_f32+0xb0>
 8003fe0:	d948      	bls.n	8004074 <arm_cfft_f32+0xe0>
 8003fe2:	2d40      	cmp	r5, #64	@ 0x40
 8003fe4:	d0ed      	beq.n	8003fc2 <arm_cfft_f32+0x2e>
 8003fe6:	2d80      	cmp	r5, #128	@ 0x80
 8003fe8:	d1f1      	bne.n	8003fce <arm_cfft_f32+0x3a>
 8003fea:	4621      	mov	r1, r4
 8003fec:	4630      	mov	r0, r6
 8003fee:	f7ff fca9 	bl	8003944 <arm_cfft_radix8by2_f32>
 8003ff2:	f1b8 0f00 	cmp.w	r8, #0
 8003ff6:	d0ed      	beq.n	8003fd4 <arm_cfft_f32+0x40>
 8003ff8:	68b2      	ldr	r2, [r6, #8]
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	89b1      	ldrh	r1, [r6, #12]
 8003ffe:	f7fc f90f 	bl	8000220 <arm_bitreversal_32>
 8004002:	2f01      	cmp	r7, #1
 8004004:	d1e8      	bne.n	8003fd8 <arm_cfft_f32+0x44>
 8004006:	ee07 5a90 	vmov	s15, r5
 800400a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004016:	2d00      	cmp	r5, #0
 8004018:	d0de      	beq.n	8003fd8 <arm_cfft_f32+0x44>
 800401a:	f104 0108 	add.w	r1, r4, #8
 800401e:	2300      	movs	r3, #0
 8004020:	ed11 7a02 	vldr	s14, [r1, #-8]
 8004024:	3301      	adds	r3, #1
 8004026:	ed51 7a01 	vldr	s15, [r1, #-4]
 800402a:	3108      	adds	r1, #8
 800402c:	429d      	cmp	r5, r3
 800402e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004032:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004036:	ed01 7a04 	vstr	s14, [r1, #-16]
 800403a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800403e:	d1ef      	bne.n	8004020 <arm_cfft_f32+0x8c>
 8004040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004044:	4621      	mov	r1, r4
 8004046:	4630      	mov	r0, r6
 8004048:	f7ff fd4c 	bl	8003ae4 <arm_cfft_radix8by4_f32>
 800404c:	e7bf      	b.n	8003fce <arm_cfft_f32+0x3a>
 800404e:	b1a5      	cbz	r5, 800407a <arm_cfft_f32+0xe6>
 8004050:	f101 030c 	add.w	r3, r1, #12
 8004054:	2200      	movs	r2, #0
 8004056:	ed53 7a02 	vldr	s15, [r3, #-8]
 800405a:	3201      	adds	r2, #1
 800405c:	3308      	adds	r3, #8
 800405e:	eef1 7a67 	vneg.f32	s15, s15
 8004062:	4295      	cmp	r5, r2
 8004064:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004068:	d1f5      	bne.n	8004056 <arm_cfft_f32+0xc2>
 800406a:	e79c      	b.n	8003fa6 <arm_cfft_f32+0x12>
 800406c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8004070:	d0a7      	beq.n	8003fc2 <arm_cfft_f32+0x2e>
 8004072:	e7ac      	b.n	8003fce <arm_cfft_f32+0x3a>
 8004074:	2d10      	cmp	r5, #16
 8004076:	d0b8      	beq.n	8003fea <arm_cfft_f32+0x56>
 8004078:	e7a9      	b.n	8003fce <arm_cfft_f32+0x3a>
 800407a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800407e:	d896      	bhi.n	8003fae <arm_cfft_f32+0x1a>
 8004080:	e7ac      	b.n	8003fdc <arm_cfft_f32+0x48>
 8004082:	bf00      	nop

08004084 <arm_cmplx_mag_squared_f32>:
 8004084:	b470      	push	{r4, r5, r6}
 8004086:	0896      	lsrs	r6, r2, #2
 8004088:	d03e      	beq.n	8004108 <arm_cmplx_mag_squared_f32+0x84>
 800408a:	f100 0320 	add.w	r3, r0, #32
 800408e:	f101 0410 	add.w	r4, r1, #16
 8004092:	4635      	mov	r5, r6
 8004094:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 8004098:	3d01      	subs	r5, #1
 800409a:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 800409e:	f104 0410 	add.w	r4, r4, #16
 80040a2:	ed53 5a07 	vldr	s11, [r3, #-28]	@ 0xffffffe4
 80040a6:	ee27 5a07 	vmul.f32	s10, s14, s14
 80040aa:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
 80040ae:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80040b2:	ed13 7a04 	vldr	s14, [r3, #-16]
 80040b6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80040ba:	ed13 4a03 	vldr	s8, [r3, #-12]
 80040be:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80040c2:	ed53 7a02 	vldr	s15, [r3, #-8]
 80040c6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80040ca:	ed53 4a01 	vldr	s9, [r3, #-4]
 80040ce:	ee24 4a04 	vmul.f32	s8, s8, s8
 80040d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040d6:	f103 0320 	add.w	r3, r3, #32
 80040da:	ee64 4aa4 	vmul.f32	s9, s9, s9
 80040de:	ee75 5a25 	vadd.f32	s11, s10, s11
 80040e2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80040e6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80040ea:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80040ee:	ed44 5a08 	vstr	s11, [r4, #-32]	@ 0xffffffe0
 80040f2:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 80040f6:	ed04 7a06 	vstr	s14, [r4, #-24]	@ 0xffffffe8
 80040fa:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80040fe:	d1c9      	bne.n	8004094 <arm_cmplx_mag_squared_f32+0x10>
 8004100:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8004104:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8004108:	f012 0203 	ands.w	r2, r2, #3
 800410c:	d010      	beq.n	8004130 <arm_cmplx_mag_squared_f32+0xac>
 800410e:	3008      	adds	r0, #8
 8004110:	ed50 7a02 	vldr	s15, [r0, #-8]
 8004114:	3a01      	subs	r2, #1
 8004116:	ed10 7a01 	vldr	s14, [r0, #-4]
 800411a:	f100 0008 	add.w	r0, r0, #8
 800411e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004122:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004126:	ee77 7a87 	vadd.f32	s15, s15, s14
 800412a:	ece1 7a01 	vstmia	r1!, {s15}
 800412e:	d1ef      	bne.n	8004110 <arm_cmplx_mag_squared_f32+0x8c>
 8004130:	bc70      	pop	{r4, r5, r6}
 8004132:	4770      	bx	lr

08004134 <arm_mult_f32>:
 8004134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004136:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800413a:	d033      	beq.n	80041a4 <arm_mult_f32+0x70>
 800413c:	f100 0610 	add.w	r6, r0, #16
 8004140:	f101 0510 	add.w	r5, r1, #16
 8004144:	f102 0410 	add.w	r4, r2, #16
 8004148:	4677      	mov	r7, lr
 800414a:	ed16 7a04 	vldr	s14, [r6, #-16]
 800414e:	3f01      	subs	r7, #1
 8004150:	ed15 6a04 	vldr	s12, [r5, #-16]
 8004154:	f106 0610 	add.w	r6, r6, #16
 8004158:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 800415c:	f105 0510 	add.w	r5, r5, #16
 8004160:	ee27 6a06 	vmul.f32	s12, s14, s12
 8004164:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8004168:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 800416c:	f104 0410 	add.w	r4, r4, #16
 8004170:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 8004174:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004178:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 800417c:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 8004180:	ee27 7a25 	vmul.f32	s14, s14, s11
 8004184:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 8004188:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800418c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004190:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 8004194:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 8004198:	d1d7      	bne.n	800414a <arm_mult_f32+0x16>
 800419a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800419e:	4420      	add	r0, r4
 80041a0:	4421      	add	r1, r4
 80041a2:	4422      	add	r2, r4
 80041a4:	f013 0303 	ands.w	r3, r3, #3
 80041a8:	d009      	beq.n	80041be <arm_mult_f32+0x8a>
 80041aa:	ecf0 7a01 	vldmia	r0!, {s15}
 80041ae:	3b01      	subs	r3, #1
 80041b0:	ecb1 7a01 	vldmia	r1!, {s14}
 80041b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b8:	ece2 7a01 	vstmia	r2!, {s15}
 80041bc:	d1f5      	bne.n	80041aa <arm_mult_f32+0x76>
 80041be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041c0 <arm_radix8_butterfly_f32>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	469e      	mov	lr, r3
 80041c6:	4603      	mov	r3, r0
 80041c8:	468a      	mov	sl, r1
 80041ca:	468b      	mov	fp, r1
 80041cc:	3304      	adds	r3, #4
 80041ce:	ed2d 8b10 	vpush	{d8-d15}
 80041d2:	469c      	mov	ip, r3
 80041d4:	b09d      	sub	sp, #116	@ 0x74
 80041d6:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 80044e4 <arm_radix8_butterfly_f32+0x324>
 80041da:	9019      	str	r0, [sp, #100]	@ 0x64
 80041dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80041de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80041e0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80041e4:	f04f 0800 	mov.w	r8, #0
 80041e8:	461a      	mov	r2, r3
 80041ea:	9311      	str	r3, [sp, #68]	@ 0x44
 80041ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041f0:	4611      	mov	r1, r2
 80041f2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	0053      	lsls	r3, r2, #1
 80041fa:	18d5      	adds	r5, r2, r3
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	0113      	lsls	r3, r2, #4
 8004200:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004202:	194c      	adds	r4, r1, r5
 8004204:	eb02 0609 	add.w	r6, r2, r9
 8004208:	9302      	str	r3, [sp, #8]
 800420a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800420e:	4613      	mov	r3, r2
 8004210:	190a      	adds	r2, r1, r4
 8004212:	eb06 0709 	add.w	r7, r6, r9
 8004216:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800421a:	1888      	adds	r0, r1, r2
 800421c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004220:	4401      	add	r1, r0
 8004222:	3204      	adds	r2, #4
 8004224:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004228:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800422c:	9b00      	ldr	r3, [sp, #0]
 800422e:	3104      	adds	r1, #4
 8004230:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8004234:	44d8      	add	r8, fp
 8004236:	ed90 7a00 	vldr	s14, [r0]
 800423a:	ed94 5a00 	vldr	s10, [r4]
 800423e:	45c2      	cmp	sl, r8
 8004240:	edd7 3a00 	vldr	s7, [r7]
 8004244:	ed96 6a00 	vldr	s12, [r6]
 8004248:	ee37 1a85 	vadd.f32	s2, s15, s10
 800424c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8004250:	ee73 4a87 	vadd.f32	s9, s7, s14
 8004254:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8004258:	edd5 7a00 	vldr	s15, [r5]
 800425c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8004260:	ed11 7a01 	vldr	s14, [r1, #-4]
 8004264:	ee36 2a26 	vadd.f32	s4, s12, s13
 8004268:	ee37 4a87 	vadd.f32	s8, s15, s14
 800426c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004270:	ee71 5a24 	vadd.f32	s11, s2, s9
 8004274:	ee32 6a04 	vadd.f32	s12, s4, s8
 8004278:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800427c:	ee31 1a64 	vsub.f32	s2, s2, s9
 8004280:	ee75 4a86 	vadd.f32	s9, s11, s12
 8004284:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8004288:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800428c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8004290:	ee32 2a44 	vsub.f32	s4, s4, s8
 8004294:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004298:	ed94 0a01 	vldr	s0, [r4, #4]
 800429c:	edc4 5a00 	vstr	s11, [r4]
 80042a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80042a4:	edd6 5a01 	vldr	s11, [r6, #4]
 80042a8:	edd5 2a01 	vldr	s5, [r5, #4]
 80042ac:	ee75 1a27 	vadd.f32	s3, s10, s15
 80042b0:	ed92 4a00 	vldr	s8, [r2]
 80042b4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80042b8:	edd1 4a00 	vldr	s9, [r1]
 80042bc:	ee27 7a09 	vmul.f32	s14, s14, s18
 80042c0:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80042c4:	ed9c 6a00 	vldr	s12, [ip]
 80042c8:	ee72 6ae4 	vsub.f32	s13, s5, s9
 80042cc:	edd0 0a01 	vldr	s1, [r0, #4]
 80042d0:	ed97 5a01 	vldr	s10, [r7, #4]
 80042d4:	ee35 4a84 	vadd.f32	s8, s11, s8
 80042d8:	ee72 4aa4 	vadd.f32	s9, s5, s9
 80042dc:	ee73 5a26 	vadd.f32	s11, s6, s13
 80042e0:	ee76 2a00 	vadd.f32	s5, s12, s0
 80042e4:	ee73 6a66 	vsub.f32	s13, s6, s13
 80042e8:	ee36 6a40 	vsub.f32	s12, s12, s0
 80042ec:	ee35 0a20 	vadd.f32	s0, s10, s1
 80042f0:	ee65 5a89 	vmul.f32	s11, s11, s18
 80042f4:	ee35 5a60 	vsub.f32	s10, s10, s1
 80042f8:	ee32 3a80 	vadd.f32	s6, s5, s0
 80042fc:	ee74 0a24 	vadd.f32	s1, s8, s9
 8004300:	ee66 6a89 	vmul.f32	s13, s13, s18
 8004304:	ee74 4a64 	vsub.f32	s9, s8, s9
 8004308:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800430c:	ee75 2a25 	vadd.f32	s5, s10, s11
 8004310:	ee33 0a20 	vadd.f32	s0, s6, s1
 8004314:	ee75 5a65 	vsub.f32	s11, s10, s11
 8004318:	ee33 3a60 	vsub.f32	s6, s6, s1
 800431c:	ee36 5a26 	vadd.f32	s10, s12, s13
 8004320:	ed8c 0a00 	vstr	s0, [ip]
 8004324:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004328:	449c      	add	ip, r3
 800432a:	ee33 6a87 	vadd.f32	s12, s7, s14
 800432e:	ed84 3a01 	vstr	s6, [r4, #4]
 8004332:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8004336:	441c      	add	r4, r3
 8004338:	ee71 3a24 	vadd.f32	s7, s2, s9
 800433c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004340:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8004344:	edc7 3a00 	vstr	s7, [r7]
 8004348:	ee34 1a42 	vsub.f32	s2, s8, s4
 800434c:	edc0 4a00 	vstr	s9, [r0]
 8004350:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8004354:	ee75 4a46 	vsub.f32	s9, s10, s12
 8004358:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800435c:	ed87 1a01 	vstr	s2, [r7, #4]
 8004360:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8004364:	441f      	add	r7, r3
 8004366:	ee32 4a04 	vadd.f32	s8, s4, s8
 800436a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800436e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8004372:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004376:	ed80 4a01 	vstr	s8, [r0, #4]
 800437a:	ed86 3a00 	vstr	s6, [r6]
 800437e:	4418      	add	r0, r3
 8004380:	ed41 1a01 	vstr	s3, [r1, #-4]
 8004384:	ed42 3a01 	vstr	s7, [r2, #-4]
 8004388:	edc5 7a00 	vstr	s15, [r5]
 800438c:	edc6 4a01 	vstr	s9, [r6, #4]
 8004390:	441e      	add	r6, r3
 8004392:	ed81 6a00 	vstr	s12, [r1]
 8004396:	4419      	add	r1, r3
 8004398:	edc2 5a00 	vstr	s11, [r2]
 800439c:	441a      	add	r2, r3
 800439e:	ed85 7a01 	vstr	s14, [r5, #4]
 80043a2:	441d      	add	r5, r3
 80043a4:	f63f af44 	bhi.w	8004230 <arm_radix8_butterfly_f32+0x70>
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80043ac:	2b07      	cmp	r3, #7
 80043ae:	f240 81f4 	bls.w	800479a <arm_radix8_butterfly_f32+0x5da>
 80043b2:	9901      	ldr	r1, [sp, #4]
 80043b4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80043b8:	9d02      	ldr	r5, [sp, #8]
 80043ba:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80043be:	3101      	adds	r1, #1
 80043c0:	eb04 000e 	add.w	r0, r4, lr
 80043c4:	00e4      	lsls	r4, r4, #3
 80043c6:	3508      	adds	r5, #8
 80043c8:	4419      	add	r1, r3
 80043ca:	eb00 0c0e 	add.w	ip, r0, lr
 80043ce:	9413      	str	r4, [sp, #76]	@ 0x4c
 80043d0:	00c0      	lsls	r0, r0, #3
 80043d2:	185e      	adds	r6, r3, r1
 80043d4:	4617      	mov	r7, r2
 80043d6:	9218      	str	r2, [sp, #96]	@ 0x60
 80043d8:	f109 0908 	add.w	r9, r9, #8
 80043dc:	199c      	adds	r4, r3, r6
 80043de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80043e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80043e2:	9012      	str	r0, [sp, #72]	@ 0x48
 80043e4:	195d      	adds	r5, r3, r5
 80043e6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80043e8:	443a      	add	r2, r7
 80043ea:	950c      	str	r5, [sp, #48]	@ 0x30
 80043ec:	4698      	mov	r8, r3
 80043ee:	4420      	add	r0, r4
 80043f0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80043f2:	19d7      	adds	r7, r2, r7
 80043f4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80043f8:	4405      	add	r5, r0
 80043fa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80043fe:	9710      	str	r7, [sp, #64]	@ 0x40
 8004400:	eb0c 070e 	add.w	r7, ip, lr
 8004404:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004408:	3404      	adds	r4, #4
 800440a:	3004      	adds	r0, #4
 800440c:	44c8      	add	r8, r9
 800440e:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8004412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004414:	940a      	str	r4, [sp, #40]	@ 0x28
 8004416:	9009      	str	r0, [sp, #36]	@ 0x24
 8004418:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800441c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800441e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004422:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8004424:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8004428:	eb07 080e 	add.w	r8, r7, lr
 800442c:	eb04 0900 	add.w	r9, r4, r0
 8004430:	00f8      	lsls	r0, r7, #3
 8004432:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8004436:	3504      	adds	r5, #4
 8004438:	4607      	mov	r7, r0
 800443a:	9017      	str	r0, [sp, #92]	@ 0x5c
 800443c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800443e:	4618      	mov	r0, r3
 8004440:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8004444:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004446:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800444a:	18e3      	adds	r3, r4, r3
 800444c:	9508      	str	r5, [sp, #32]
 800444e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8004450:	910e      	str	r1, [sp, #56]	@ 0x38
 8004452:	4621      	mov	r1, r4
 8004454:	eb04 0805 	add.w	r8, r4, r5
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	19e5      	adds	r5, r4, r7
 800445c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8004460:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8004462:	9316      	str	r3, [sp, #88]	@ 0x58
 8004464:	190b      	adds	r3, r1, r4
 8004466:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8004468:	9505      	str	r5, [sp, #20]
 800446a:	9303      	str	r3, [sp, #12]
 800446c:	f100 0308 	add.w	r3, r0, #8
 8004470:	9707      	str	r7, [sp, #28]
 8004472:	4638      	mov	r0, r7
 8004474:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004476:	2301      	movs	r3, #1
 8004478:	9306      	str	r3, [sp, #24]
 800447a:	9b00      	ldr	r3, [sp, #0]
 800447c:	ed90 fa00 	vldr	s30, [r0]
 8004480:	edd0 ba01 	vldr	s23, [r0, #4]
 8004484:	9803      	ldr	r0, [sp, #12]
 8004486:	9903      	ldr	r1, [sp, #12]
 8004488:	ed90 ba01 	vldr	s22, [r0, #4]
 800448c:	9804      	ldr	r0, [sp, #16]
 800448e:	edd1 ea00 	vldr	s29, [r1]
 8004492:	edd0 aa01 	vldr	s21, [r0, #4]
 8004496:	9805      	ldr	r0, [sp, #20]
 8004498:	9905      	ldr	r1, [sp, #20]
 800449a:	edd0 7a01 	vldr	s15, [r0, #4]
 800449e:	ed91 da00 	vldr	s26, [r1]
 80044a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80044a4:	9c04      	ldr	r4, [sp, #16]
 80044a6:	edcd 7a01 	vstr	s15, [sp, #4]
 80044aa:	edd8 7a01 	vldr	s15, [r8, #4]
 80044ae:	9100      	str	r1, [sp, #0]
 80044b0:	edd2 fa00 	vldr	s31, [r2]
 80044b4:	ed94 ea00 	vldr	s28, [r4]
 80044b8:	ed92 ca01 	vldr	s24, [r2, #4]
 80044bc:	f8dd e020 	ldr.w	lr, [sp, #32]
 80044c0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80044c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80044c4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80044c6:	edd9 da00 	vldr	s27, [r9]
 80044ca:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80044cc:	edd8 ca00 	vldr	s25, [r8]
 80044d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80044d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80044d4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80044d8:	ed99 aa01 	vldr	s20, [r9, #4]
 80044dc:	edcd 7a02 	vstr	s15, [sp, #8]
 80044e0:	9800      	ldr	r0, [sp, #0]
 80044e2:	e001      	b.n	80044e8 <arm_radix8_butterfly_f32+0x328>
 80044e4:	3f3504f3 	.word	0x3f3504f3
 80044e8:	edd5 3a00 	vldr	s7, [r5]
 80044ec:	44dc      	add	ip, fp
 80044ee:	ed91 7a00 	vldr	s14, [r1]
 80044f2:	edd4 8a00 	vldr	s17, [r4]
 80044f6:	45e2      	cmp	sl, ip
 80044f8:	ed57 7a01 	vldr	s15, [r7, #-4]
 80044fc:	ed90 5a00 	vldr	s10, [r0]
 8004500:	ed56 5a01 	vldr	s11, [r6, #-4]
 8004504:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8004508:	ed92 1a00 	vldr	s2, [r2]
 800450c:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8004510:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8004514:	ee75 9a25 	vadd.f32	s19, s10, s11
 8004518:	ee31 3a07 	vadd.f32	s6, s2, s14
 800451c:	ed92 8a01 	vldr	s16, [r2, #4]
 8004520:	ee73 6a84 	vadd.f32	s13, s7, s8
 8004524:	ee75 5a65 	vsub.f32	s11, s10, s11
 8004528:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800452c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8004530:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8004534:	ee75 7a84 	vadd.f32	s15, s11, s8
 8004538:	ee31 1a47 	vsub.f32	s2, s2, s14
 800453c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8004540:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004544:	ee33 3a46 	vsub.f32	s6, s6, s12
 8004548:	ed82 7a00 	vstr	s14, [r2]
 800454c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8004550:	ed96 6a00 	vldr	s12, [r6]
 8004554:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8004558:	edd5 3a01 	vldr	s7, [r5, #4]
 800455c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8004560:	ed90 7a01 	vldr	s14, [r0, #4]
 8004564:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8004568:	edde 4a00 	vldr	s9, [lr]
 800456c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8004570:	ee77 2a46 	vsub.f32	s5, s14, s12
 8004574:	edd1 6a01 	vldr	s13, [r1, #4]
 8004578:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800457c:	edd7 0a00 	vldr	s1, [r7]
 8004580:	ee77 5a06 	vadd.f32	s11, s14, s12
 8004584:	ed94 7a01 	vldr	s14, [r4, #4]
 8004588:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800458c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8004590:	ee78 4a66 	vsub.f32	s9, s16, s13
 8004594:	ee78 3a26 	vadd.f32	s7, s16, s13
 8004598:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800459c:	ee77 6a20 	vadd.f32	s13, s14, s1
 80045a0:	ee24 4a09 	vmul.f32	s8, s8, s18
 80045a4:	ee37 7a60 	vsub.f32	s14, s14, s1
 80045a8:	ee20 8a09 	vmul.f32	s16, s0, s18
 80045ac:	ee75 0a86 	vadd.f32	s1, s11, s12
 80045b0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80045b4:	ee62 2a89 	vmul.f32	s5, s5, s18
 80045b8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80045bc:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80045c0:	ee77 7a62 	vsub.f32	s15, s14, s5
 80045c4:	ee74 5a88 	vadd.f32	s11, s9, s16
 80045c8:	ee34 8ac8 	vsub.f32	s16, s9, s16
 80045cc:	ee77 4a22 	vadd.f32	s9, s14, s5
 80045d0:	ee71 2a04 	vadd.f32	s5, s2, s8
 80045d4:	ee31 7a44 	vsub.f32	s14, s2, s8
 80045d8:	ee30 1a60 	vsub.f32	s2, s0, s1
 80045dc:	ee73 1a06 	vadd.f32	s3, s6, s12
 80045e0:	ee33 6a46 	vsub.f32	s12, s6, s12
 80045e4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 80045e8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 80045ec:	ee38 4a68 	vsub.f32	s8, s16, s17
 80045f0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80045f4:	ee72 5a25 	vadd.f32	s11, s4, s11
 80045f8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80045fc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8004600:	ee77 2a27 	vadd.f32	s5, s14, s15
 8004604:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004608:	ee78 7a88 	vadd.f32	s15, s17, s16
 800460c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8004610:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8004614:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8004618:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800461c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8004620:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004624:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8004628:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800462c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8004630:	edc2 0a01 	vstr	s1, [r2, #4]
 8004634:	ee38 8a88 	vadd.f32	s16, s17, s16
 8004638:	441a      	add	r2, r3
 800463a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800463e:	ee31 5a45 	vsub.f32	s10, s2, s10
 8004642:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8004646:	ed81 8a00 	vstr	s16, [r1]
 800464a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800464e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004652:	ed81 5a01 	vstr	s10, [r1, #4]
 8004656:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800465a:	edcd 3a00 	vstr	s7, [sp]
 800465e:	ed9d 5a02 	vldr	s10, [sp, #8]
 8004662:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8004666:	eddd 3a01 	vldr	s7, [sp, #4]
 800466a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800466e:	ed84 0a00 	vstr	s0, [r4]
 8004672:	ee65 4a24 	vmul.f32	s9, s10, s9
 8004676:	ed84 3a01 	vstr	s6, [r4, #4]
 800467a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800467e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004682:	eddd 3a00 	vldr	s7, [sp]
 8004686:	ee25 5a25 	vmul.f32	s10, s10, s11
 800468a:	4419      	add	r1, r3
 800468c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8004690:	441c      	add	r4, r3
 8004692:	ee6a 1a04 	vmul.f32	s3, s20, s8
 8004696:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800469a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800469e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80046a2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80046a6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80046aa:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80046ae:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80046b2:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80046b6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80046ba:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 80046be:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80046c2:	ee38 8a01 	vadd.f32	s16, s16, s2
 80046c6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80046ca:	ee39 5a85 	vadd.f32	s10, s19, s10
 80046ce:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80046d2:	ed07 8a01 	vstr	s16, [r7, #-4]
 80046d6:	ee30 0a21 	vadd.f32	s0, s0, s3
 80046da:	ed87 6a00 	vstr	s12, [r7]
 80046de:	ee74 2a62 	vsub.f32	s5, s8, s5
 80046e2:	edc0 0a00 	vstr	s1, [r0]
 80046e6:	ee33 3a28 	vadd.f32	s6, s6, s17
 80046ea:	edc0 3a01 	vstr	s7, [r0, #4]
 80046ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80046f2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 80046f6:	edce 4a00 	vstr	s9, [lr]
 80046fa:	4418      	add	r0, r3
 80046fc:	ed06 0a01 	vstr	s0, [r6, #-4]
 8004700:	441f      	add	r7, r3
 8004702:	edc6 2a00 	vstr	s5, [r6]
 8004706:	449e      	add	lr, r3
 8004708:	ed85 3a00 	vstr	s6, [r5]
 800470c:	441e      	add	r6, r3
 800470e:	ed85 7a01 	vstr	s14, [r5, #4]
 8004712:	441d      	add	r5, r3
 8004714:	f63f aee8 	bhi.w	80044e8 <arm_radix8_butterfly_f32+0x328>
 8004718:	9a06      	ldr	r2, [sp, #24]
 800471a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800471c:	3201      	adds	r2, #1
 800471e:	4611      	mov	r1, r2
 8004720:	9206      	str	r2, [sp, #24]
 8004722:	9a07      	ldr	r2, [sp, #28]
 8004724:	4402      	add	r2, r0
 8004726:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8004728:	9207      	str	r2, [sp, #28]
 800472a:	9a03      	ldr	r2, [sp, #12]
 800472c:	4402      	add	r2, r0
 800472e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8004730:	9203      	str	r2, [sp, #12]
 8004732:	9a04      	ldr	r2, [sp, #16]
 8004734:	4402      	add	r2, r0
 8004736:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8004738:	9204      	str	r2, [sp, #16]
 800473a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800473c:	4491      	add	r9, r2
 800473e:	9a05      	ldr	r2, [sp, #20]
 8004740:	4402      	add	r2, r0
 8004742:	9205      	str	r2, [sp, #20]
 8004744:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004746:	4490      	add	r8, r2
 8004748:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800474a:	3208      	adds	r2, #8
 800474c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800474e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004750:	3208      	adds	r2, #8
 8004752:	920e      	str	r2, [sp, #56]	@ 0x38
 8004754:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004756:	3208      	adds	r2, #8
 8004758:	920d      	str	r2, [sp, #52]	@ 0x34
 800475a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800475c:	3208      	adds	r2, #8
 800475e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004760:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004762:	3208      	adds	r2, #8
 8004764:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004768:	3208      	adds	r2, #8
 800476a:	920a      	str	r2, [sp, #40]	@ 0x28
 800476c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800476e:	3208      	adds	r2, #8
 8004770:	9209      	str	r2, [sp, #36]	@ 0x24
 8004772:	9a08      	ldr	r2, [sp, #32]
 8004774:	3208      	adds	r2, #8
 8004776:	9208      	str	r2, [sp, #32]
 8004778:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800477a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800477c:	4622      	mov	r2, r4
 800477e:	4288      	cmp	r0, r1
 8004780:	d005      	beq.n	800478e <arm_radix8_butterfly_f32+0x5ce>
 8004782:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8004784:	4621      	mov	r1, r4
 8004786:	4401      	add	r1, r0
 8004788:	9807      	ldr	r0, [sp, #28]
 800478a:	9110      	str	r1, [sp, #64]	@ 0x40
 800478c:	e676      	b.n	800447c <arm_radix8_butterfly_f32+0x2bc>
 800478e:	4683      	mov	fp, r0
 8004790:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 8004794:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 8004798:	e522      	b.n	80041e0 <arm_radix8_butterfly_f32+0x20>
 800479a:	b01d      	add	sp, #116	@ 0x74
 800479c:	ecbd 8b10 	vpop	{d8-d15}
 80047a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080047a4 <ai_buffer_get_size>:
 80047a4:	b368      	cbz	r0, 8004802 <ai_buffer_get_size+0x5e>
 80047a6:	4b17      	ldr	r3, [pc, #92]	@ (8004804 <ai_buffer_get_size+0x60>)
 80047a8:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <ai_buffer_get_size+0x64>)
 80047aa:	b410      	push	{r4}
 80047ac:	6804      	ldr	r4, [r0, #0]
 80047ae:	4023      	ands	r3, r4
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d123      	bne.n	80047fc <ai_buffer_get_size+0x58>
 80047b4:	b311      	cbz	r1, 80047fc <ai_buffer_get_size+0x58>
 80047b6:	6984      	ldr	r4, [r0, #24]
 80047b8:	6862      	ldr	r2, [r4, #4]
 80047ba:	321f      	adds	r2, #31
 80047bc:	f022 021f 	bic.w	r2, r2, #31
 80047c0:	7d03      	ldrb	r3, [r0, #20]
 80047c2:	6941      	ldr	r1, [r0, #20]
 80047c4:	f1a3 0301 	sub.w	r3, r3, #1
 80047c8:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	095b      	lsrs	r3, r3, #5
 80047d2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80047d6:	da0c      	bge.n	80047f2 <ai_buffer_get_size+0x4e>
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d103      	bne.n	80047e4 <ai_buffer_get_size+0x40>
 80047dc:	2802      	cmp	r0, #2
 80047de:	f04f 0302 	mov.w	r3, #2
 80047e2:	d006      	beq.n	80047f2 <ai_buffer_get_size+0x4e>
 80047e4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80047e8:	3301      	adds	r3, #1
 80047ea:	4298      	cmp	r0, r3
 80047ec:	fb01 f202 	mul.w	r2, r1, r2
 80047f0:	d1f2      	bne.n	80047d8 <ai_buffer_get_size+0x34>
 80047f2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	6984      	ldr	r4, [r0, #24]
 80047fe:	6862      	ldr	r2, [r4, #4]
 8004800:	e7de      	b.n	80047c0 <ai_buffer_get_size+0x1c>
 8004802:	4770      	bx	lr
 8004804:	017fffff 	.word	0x017fffff
 8004808:	000400c0 	.word	0x000400c0

0800480c <ai_buffer_array_sane>:
 800480c:	b138      	cbz	r0, 800481e <ai_buffer_array_sane+0x12>
 800480e:	6843      	ldr	r3, [r0, #4]
 8004810:	b123      	cbz	r3, 800481c <ai_buffer_array_sane+0x10>
 8004812:	8840      	ldrh	r0, [r0, #2]
 8004814:	3800      	subs	r0, #0
 8004816:	bf18      	it	ne
 8004818:	2001      	movne	r0, #1
 800481a:	4770      	bx	lr
 800481c:	4618      	mov	r0, r3
 800481e:	4770      	bx	lr

08004820 <ai_buffer_array_item_set_address>:
 8004820:	b150      	cbz	r0, 8004838 <ai_buffer_array_item_set_address+0x18>
 8004822:	6843      	ldr	r3, [r0, #4]
 8004824:	b14b      	cbz	r3, 800483a <ai_buffer_array_item_set_address+0x1a>
 8004826:	8840      	ldrh	r0, [r0, #2]
 8004828:	b900      	cbnz	r0, 800482c <ai_buffer_array_item_set_address+0xc>
 800482a:	4770      	bx	lr
 800482c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004830:	2001      	movs	r0, #1
 8004832:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004836:	604a      	str	r2, [r1, #4]
 8004838:	4770      	bx	lr
 800483a:	4618      	mov	r0, r3
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop

08004840 <_ai_platform_acquire_crc>:
 8004840:	2001      	movs	r0, #1
 8004842:	4770      	bx	lr

08004844 <_ai_platform_release_crc>:
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop

08004848 <ai_platform_get_weights_map>:
 8004848:	2900      	cmp	r1, #0
 800484a:	bf18      	it	ne
 800484c:	2800      	cmpne	r0, #0
 800484e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004850:	bf0c      	ite	eq
 8004852:	2401      	moveq	r4, #1
 8004854:	2400      	movne	r4, #0
 8004856:	2a00      	cmp	r2, #0
 8004858:	bf08      	it	eq
 800485a:	f044 0401 	orreq.w	r4, r4, #1
 800485e:	b114      	cbz	r4, 8004866 <ai_platform_get_weights_map+0x1e>
 8004860:	2400      	movs	r4, #0
 8004862:	4620      	mov	r0, r4
 8004864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004866:	4616      	mov	r6, r2
 8004868:	4b22      	ldr	r3, [pc, #136]	@ (80048f4 <ai_platform_get_weights_map+0xac>)
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	4605      	mov	r5, r0
 800486e:	460f      	mov	r7, r1
 8004870:	429a      	cmp	r2, r3
 8004872:	d022      	beq.n	80048ba <ai_platform_get_weights_map+0x72>
 8004874:	6870      	ldr	r0, [r6, #4]
 8004876:	2800      	cmp	r0, #0
 8004878:	d0f2      	beq.n	8004860 <ai_platform_get_weights_map+0x18>
 800487a:	6806      	ldr	r6, [r0, #0]
 800487c:	429e      	cmp	r6, r3
 800487e:	d006      	beq.n	800488e <ai_platform_get_weights_map+0x46>
 8004880:	f1a1 0401 	sub.w	r4, r1, #1
 8004884:	6028      	str	r0, [r5, #0]
 8004886:	fab4 f484 	clz	r4, r4
 800488a:	0964      	lsrs	r4, r4, #5
 800488c:	e7e9      	b.n	8004862 <ai_platform_get_weights_map+0x1a>
 800488e:	3d04      	subs	r5, #4
 8004890:	4602      	mov	r2, r0
 8004892:	4621      	mov	r1, r4
 8004894:	e000      	b.n	8004898 <ai_platform_get_weights_map+0x50>
 8004896:	4619      	mov	r1, r3
 8004898:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800489c:	42b3      	cmp	r3, r6
 800489e:	d025      	beq.n	80048ec <ai_platform_get_weights_map+0xa4>
 80048a0:	f845 3f04 	str.w	r3, [r5, #4]!
 80048a4:	1c4b      	adds	r3, r1, #1
 80048a6:	429f      	cmp	r7, r3
 80048a8:	d8f5      	bhi.n	8004896 <ai_platform_get_weights_map+0x4e>
 80048aa:	d1da      	bne.n	8004862 <ai_platform_get_weights_map+0x1a>
 80048ac:	3102      	adds	r1, #2
 80048ae:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80048b2:	42b3      	cmp	r3, r6
 80048b4:	d1d5      	bne.n	8004862 <ai_platform_get_weights_map+0x1a>
 80048b6:	2401      	movs	r4, #1
 80048b8:	e7d3      	b.n	8004862 <ai_platform_get_weights_map+0x1a>
 80048ba:	1d30      	adds	r0, r6, #4
 80048bc:	f7ff ffa6 	bl	800480c <ai_buffer_array_sane>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d0cd      	beq.n	8004860 <ai_platform_get_weights_map+0x18>
 80048c4:	88f3      	ldrh	r3, [r6, #6]
 80048c6:	429f      	cmp	r7, r3
 80048c8:	d1ca      	bne.n	8004860 <ai_platform_get_weights_map+0x18>
 80048ca:	3d04      	subs	r5, #4
 80048cc:	4622      	mov	r2, r4
 80048ce:	68b3      	ldr	r3, [r6, #8]
 80048d0:	4423      	add	r3, r4
 80048d2:	341c      	adds	r4, #28
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b123      	cbz	r3, 80048e2 <ai_platform_get_weights_map+0x9a>
 80048d8:	3201      	adds	r2, #1
 80048da:	f845 3f04 	str.w	r3, [r5, #4]!
 80048de:	4297      	cmp	r7, r2
 80048e0:	d8f5      	bhi.n	80048ce <ai_platform_get_weights_map+0x86>
 80048e2:	1abc      	subs	r4, r7, r2
 80048e4:	fab4 f484 	clz	r4, r4
 80048e8:	0964      	lsrs	r4, r4, #5
 80048ea:	e7ba      	b.n	8004862 <ai_platform_get_weights_map+0x1a>
 80048ec:	428f      	cmp	r7, r1
 80048ee:	d1b8      	bne.n	8004862 <ai_platform_get_weights_map+0x1a>
 80048f0:	e7e1      	b.n	80048b6 <ai_platform_get_weights_map+0x6e>
 80048f2:	bf00      	nop
 80048f4:	a1facade 	.word	0xa1facade

080048f8 <ai_platform_get_activations_map>:
 80048f8:	2900      	cmp	r1, #0
 80048fa:	bf18      	it	ne
 80048fc:	2800      	cmpne	r0, #0
 80048fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004900:	bf0c      	ite	eq
 8004902:	2401      	moveq	r4, #1
 8004904:	2400      	movne	r4, #0
 8004906:	2a00      	cmp	r2, #0
 8004908:	bf08      	it	eq
 800490a:	f044 0401 	orreq.w	r4, r4, #1
 800490e:	b114      	cbz	r4, 8004916 <ai_platform_get_activations_map+0x1e>
 8004910:	2400      	movs	r4, #0
 8004912:	4620      	mov	r0, r4
 8004914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004916:	4616      	mov	r6, r2
 8004918:	4b22      	ldr	r3, [pc, #136]	@ (80049a4 <ai_platform_get_activations_map+0xac>)
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	4605      	mov	r5, r0
 800491e:	460f      	mov	r7, r1
 8004920:	429a      	cmp	r2, r3
 8004922:	d022      	beq.n	800496a <ai_platform_get_activations_map+0x72>
 8004924:	6a30      	ldr	r0, [r6, #32]
 8004926:	2800      	cmp	r0, #0
 8004928:	d0f2      	beq.n	8004910 <ai_platform_get_activations_map+0x18>
 800492a:	6806      	ldr	r6, [r0, #0]
 800492c:	429e      	cmp	r6, r3
 800492e:	d006      	beq.n	800493e <ai_platform_get_activations_map+0x46>
 8004930:	f1a1 0401 	sub.w	r4, r1, #1
 8004934:	6028      	str	r0, [r5, #0]
 8004936:	fab4 f484 	clz	r4, r4
 800493a:	0964      	lsrs	r4, r4, #5
 800493c:	e7e9      	b.n	8004912 <ai_platform_get_activations_map+0x1a>
 800493e:	3d04      	subs	r5, #4
 8004940:	4602      	mov	r2, r0
 8004942:	4621      	mov	r1, r4
 8004944:	e000      	b.n	8004948 <ai_platform_get_activations_map+0x50>
 8004946:	4619      	mov	r1, r3
 8004948:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800494c:	42b3      	cmp	r3, r6
 800494e:	d026      	beq.n	800499e <ai_platform_get_activations_map+0xa6>
 8004950:	f845 3f04 	str.w	r3, [r5, #4]!
 8004954:	1c4b      	adds	r3, r1, #1
 8004956:	429f      	cmp	r7, r3
 8004958:	d8f5      	bhi.n	8004946 <ai_platform_get_activations_map+0x4e>
 800495a:	d1da      	bne.n	8004912 <ai_platform_get_activations_map+0x1a>
 800495c:	3102      	adds	r1, #2
 800495e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004962:	42b3      	cmp	r3, r6
 8004964:	d1d5      	bne.n	8004912 <ai_platform_get_activations_map+0x1a>
 8004966:	2401      	movs	r4, #1
 8004968:	e7d3      	b.n	8004912 <ai_platform_get_activations_map+0x1a>
 800496a:	f106 000c 	add.w	r0, r6, #12
 800496e:	f7ff ff4d 	bl	800480c <ai_buffer_array_sane>
 8004972:	2800      	cmp	r0, #0
 8004974:	d0cc      	beq.n	8004910 <ai_platform_get_activations_map+0x18>
 8004976:	89f3      	ldrh	r3, [r6, #14]
 8004978:	429f      	cmp	r7, r3
 800497a:	d1c9      	bne.n	8004910 <ai_platform_get_activations_map+0x18>
 800497c:	3d04      	subs	r5, #4
 800497e:	4622      	mov	r2, r4
 8004980:	6933      	ldr	r3, [r6, #16]
 8004982:	4423      	add	r3, r4
 8004984:	341c      	adds	r4, #28
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	b123      	cbz	r3, 8004994 <ai_platform_get_activations_map+0x9c>
 800498a:	3201      	adds	r2, #1
 800498c:	f845 3f04 	str.w	r3, [r5, #4]!
 8004990:	4297      	cmp	r7, r2
 8004992:	d8f5      	bhi.n	8004980 <ai_platform_get_activations_map+0x88>
 8004994:	1abc      	subs	r4, r7, r2
 8004996:	fab4 f484 	clz	r4, r4
 800499a:	0964      	lsrs	r4, r4, #5
 800499c:	e7b9      	b.n	8004912 <ai_platform_get_activations_map+0x1a>
 800499e:	428f      	cmp	r7, r1
 80049a0:	d1b7      	bne.n	8004912 <ai_platform_get_activations_map+0x1a>
 80049a2:	e7e0      	b.n	8004966 <ai_platform_get_activations_map+0x6e>
 80049a4:	a1facade 	.word	0xa1facade

080049a8 <ai_platform_bind_network_params>:
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	bf18      	it	ne
 80049ac:	2900      	cmpne	r1, #0
 80049ae:	d010      	beq.n	80049d2 <ai_platform_bind_network_params+0x2a>
 80049b0:	b178      	cbz	r0, 80049d2 <ai_platform_bind_network_params+0x2a>
 80049b2:	4603      	mov	r3, r0
 80049b4:	4808      	ldr	r0, [pc, #32]	@ (80049d8 <ai_platform_bind_network_params+0x30>)
 80049b6:	f103 0c0c 	add.w	ip, r3, #12
 80049ba:	f843 0b04 	str.w	r0, [r3], #4
 80049be:	c903      	ldmia	r1, {r0, r1}
 80049c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80049c4:	2301      	movs	r3, #1
 80049c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80049ca:	e88c 0003 	stmia.w	ip, {r0, r1}
 80049ce:	4618      	mov	r0, r3
 80049d0:	4770      	bx	lr
 80049d2:	2300      	movs	r3, #0
 80049d4:	4618      	mov	r0, r3
 80049d6:	4770      	bx	lr
 80049d8:	a1facade 	.word	0xa1facade

080049dc <ai_platform_network_get_error>:
 80049dc:	b510      	push	{r4, lr}
 80049de:	2800      	cmp	r0, #0
 80049e0:	d03f      	beq.n	8004a62 <ai_platform_network_get_error+0x86>
 80049e2:	4b7d      	ldr	r3, [pc, #500]	@ (8004bd8 <ai_platform_network_get_error+0x1fc>)
 80049e4:	4604      	mov	r4, r0
 80049e6:	6802      	ldr	r2, [r0, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d13a      	bne.n	8004a62 <ai_platform_network_get_error+0x86>
 80049ec:	f7ff ff28 	bl	8004840 <_ai_platform_acquire_crc>
 80049f0:	4b7a      	ldr	r3, [pc, #488]	@ (8004bdc <ai_platform_network_get_error+0x200>)
 80049f2:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049fc:	189a      	adds	r2, r3, r2
 80049fe:	2a01      	cmp	r2, #1
 8004a00:	f240 8086 	bls.w	8004b10 <ai_platform_network_get_error+0x134>
 8004a04:	f240 4249 	movw	r2, #1097	@ 0x449
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	f000 8081 	beq.w	8004b10 <ai_platform_network_get_error+0x134>
 8004a0e:	4a74      	ldr	r2, [pc, #464]	@ (8004be0 <ai_platform_network_get_error+0x204>)
 8004a10:	6813      	ldr	r3, [r2, #0]
 8004a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a16:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004a1a:	f000 8087 	beq.w	8004b2c <ai_platform_network_get_error+0x150>
 8004a1e:	6813      	ldr	r3, [r2, #0]
 8004a20:	f240 4183 	movw	r1, #1155	@ 0x483
 8004a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	f000 80a9 	beq.w	8004b80 <ai_platform_network_get_error+0x1a4>
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a34:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004a38:	f000 80c0 	beq.w	8004bbc <ai_platform_network_get_error+0x1e0>
 8004a3c:	6813      	ldr	r3, [r2, #0]
 8004a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 8082 	bne.w	8004b4c <ai_platform_network_get_error+0x170>
 8004a48:	4a66      	ldr	r2, [pc, #408]	@ (8004be4 <ai_platform_network_get_error+0x208>)
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	6093      	str	r3, [r2, #8]
 8004a4e:	6893      	ldr	r3, [r2, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1fc      	bne.n	8004a4e <ai_platform_network_get_error+0x72>
 8004a54:	4964      	ldr	r1, [pc, #400]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004a56:	4b65      	ldr	r3, [pc, #404]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d075      	beq.n	8004b4c <ai_platform_network_get_error+0x170>
 8004a60:	e7fe      	b.n	8004a60 <ai_platform_network_get_error+0x84>
 8004a62:	f7ff feed 	bl	8004840 <_ai_platform_acquire_crc>
 8004a66:	4b5d      	ldr	r3, [pc, #372]	@ (8004bdc <ai_platform_network_get_error+0x200>)
 8004a68:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a72:	185a      	adds	r2, r3, r1
 8004a74:	2a01      	cmp	r2, #1
 8004a76:	d929      	bls.n	8004acc <ai_platform_network_get_error+0xf0>
 8004a78:	f240 4249 	movw	r2, #1097	@ 0x449
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d025      	beq.n	8004acc <ai_platform_network_get_error+0xf0>
 8004a80:	4a57      	ldr	r2, [pc, #348]	@ (8004be0 <ai_platform_network_get_error+0x204>)
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a88:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004a8c:	d02b      	beq.n	8004ae6 <ai_platform_network_get_error+0x10a>
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	f240 4183 	movw	r1, #1155	@ 0x483
 8004a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a98:	428b      	cmp	r3, r1
 8004a9a:	d060      	beq.n	8004b5e <ai_platform_network_get_error+0x182>
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aa2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004aa6:	d07c      	beq.n	8004ba2 <ai_platform_network_get_error+0x1c6>
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d129      	bne.n	8004b06 <ai_platform_network_get_error+0x12a>
 8004ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8004be4 <ai_platform_network_get_error+0x208>)
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	6093      	str	r3, [r2, #8]
 8004ab8:	6893      	ldr	r3, [r2, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1fc      	bne.n	8004ab8 <ai_platform_network_get_error+0xdc>
 8004abe:	494a      	ldr	r1, [pc, #296]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004ac0:	4b4a      	ldr	r3, [pc, #296]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004ac2:	6011      	str	r1, [r2, #0]
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d01d      	beq.n	8004b06 <ai_platform_network_get_error+0x12a>
 8004aca:	e7fe      	b.n	8004aca <ai_platform_network_get_error+0xee>
 8004acc:	4a45      	ldr	r2, [pc, #276]	@ (8004be4 <ai_platform_network_get_error+0x208>)
 8004ace:	2301      	movs	r3, #1
 8004ad0:	6093      	str	r3, [r2, #8]
 8004ad2:	6893      	ldr	r3, [r2, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1fc      	bne.n	8004ad2 <ai_platform_network_get_error+0xf6>
 8004ad8:	4943      	ldr	r1, [pc, #268]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004ada:	4b44      	ldr	r3, [pc, #272]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004adc:	6011      	str	r1, [r2, #0]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d010      	beq.n	8004b06 <ai_platform_network_get_error+0x12a>
 8004ae4:	e7fe      	b.n	8004ae4 <ai_platform_network_get_error+0x108>
 8004ae6:	4a42      	ldr	r2, [pc, #264]	@ (8004bf0 <ai_platform_network_get_error+0x214>)
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004aee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1fb      	bne.n	8004aee <ai_platform_network_get_error+0x112>
 8004af6:	493c      	ldr	r1, [pc, #240]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004af8:	4b3c      	ldr	r3, [pc, #240]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004afa:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004afe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d111      	bne.n	8004b2a <ai_platform_network_get_error+0x14e>
 8004b06:	f7ff fe9d 	bl	8004844 <_ai_platform_release_crc>
 8004b0a:	f241 0010 	movw	r0, #4112	@ 0x1010
 8004b0e:	bd10      	pop	{r4, pc}
 8004b10:	4a34      	ldr	r2, [pc, #208]	@ (8004be4 <ai_platform_network_get_error+0x208>)
 8004b12:	2301      	movs	r3, #1
 8004b14:	6093      	str	r3, [r2, #8]
 8004b16:	6893      	ldr	r3, [r2, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1fc      	bne.n	8004b16 <ai_platform_network_get_error+0x13a>
 8004b1c:	4932      	ldr	r1, [pc, #200]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004b1e:	4b33      	ldr	r3, [pc, #204]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004b20:	6011      	str	r1, [r2, #0]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d011      	beq.n	8004b4c <ai_platform_network_get_error+0x170>
 8004b28:	e7fe      	b.n	8004b28 <ai_platform_network_get_error+0x14c>
 8004b2a:	e7fe      	b.n	8004b2a <ai_platform_network_get_error+0x14e>
 8004b2c:	4a30      	ldr	r2, [pc, #192]	@ (8004bf0 <ai_platform_network_get_error+0x214>)
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004b34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1fb      	bne.n	8004b34 <ai_platform_network_get_error+0x158>
 8004b3c:	492a      	ldr	r1, [pc, #168]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004b40:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004b44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d107      	bne.n	8004b5c <ai_platform_network_get_error+0x180>
 8004b4c:	f7ff fe7a 	bl	8004844 <_ai_platform_release_crc>
 8004b50:	f104 0010 	add.w	r0, r4, #16
 8004b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b58:	f001 bae6 	b.w	8006128 <core_get_error>
 8004b5c:	e7fe      	b.n	8004b5c <ai_platform_network_get_error+0x180>
 8004b5e:	4a24      	ldr	r2, [pc, #144]	@ (8004bf0 <ai_platform_network_get_error+0x214>)
 8004b60:	2301      	movs	r3, #1
 8004b62:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004b66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1fb      	bne.n	8004b66 <ai_platform_network_get_error+0x18a>
 8004b6e:	491e      	ldr	r1, [pc, #120]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004b70:	4b1e      	ldr	r3, [pc, #120]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004b72:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004b76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d0c3      	beq.n	8004b06 <ai_platform_network_get_error+0x12a>
 8004b7e:	e7fe      	b.n	8004b7e <ai_platform_network_get_error+0x1a2>
 8004b80:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf0 <ai_platform_network_get_error+0x214>)
 8004b82:	2301      	movs	r3, #1
 8004b84:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004b88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1fb      	bne.n	8004b88 <ai_platform_network_get_error+0x1ac>
 8004b90:	4915      	ldr	r1, [pc, #84]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004b92:	4b16      	ldr	r3, [pc, #88]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004b94:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004b98:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0d5      	beq.n	8004b4c <ai_platform_network_get_error+0x170>
 8004ba0:	e7fe      	b.n	8004ba0 <ai_platform_network_get_error+0x1c4>
 8004ba2:	4a10      	ldr	r2, [pc, #64]	@ (8004be4 <ai_platform_network_get_error+0x208>)
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	6093      	str	r3, [r2, #8]
 8004ba8:	6893      	ldr	r3, [r2, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1fc      	bne.n	8004ba8 <ai_platform_network_get_error+0x1cc>
 8004bae:	490e      	ldr	r1, [pc, #56]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004bb2:	6011      	str	r1, [r2, #0]
 8004bb4:	6812      	ldr	r2, [r2, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d0a5      	beq.n	8004b06 <ai_platform_network_get_error+0x12a>
 8004bba:	e7fe      	b.n	8004bba <ai_platform_network_get_error+0x1de>
 8004bbc:	4a09      	ldr	r2, [pc, #36]	@ (8004be4 <ai_platform_network_get_error+0x208>)
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	6093      	str	r3, [r2, #8]
 8004bc2:	6893      	ldr	r3, [r2, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1fc      	bne.n	8004bc2 <ai_platform_network_get_error+0x1e6>
 8004bc8:	4907      	ldr	r1, [pc, #28]	@ (8004be8 <ai_platform_network_get_error+0x20c>)
 8004bca:	4b08      	ldr	r3, [pc, #32]	@ (8004bec <ai_platform_network_get_error+0x210>)
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	6812      	ldr	r2, [r2, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0bb      	beq.n	8004b4c <ai_platform_network_get_error+0x170>
 8004bd4:	e7fe      	b.n	8004bd4 <ai_platform_network_get_error+0x1f8>
 8004bd6:	bf00      	nop
 8004bd8:	a1c00100 	.word	0xa1c00100
 8004bdc:	e0042000 	.word	0xe0042000
 8004be0:	5c001000 	.word	0x5c001000
 8004be4:	40023000 	.word	0x40023000
 8004be8:	f407a5c2 	.word	0xf407a5c2
 8004bec:	b5e8b5cd 	.word	0xb5e8b5cd
 8004bf0:	58024000 	.word	0x58024000

08004bf4 <ai_platform_network_set_error>:
 8004bf4:	b110      	cbz	r0, 8004bfc <ai_platform_network_set_error+0x8>
 8004bf6:	3010      	adds	r0, #16
 8004bf8:	f001 ba9c 	b.w	8006134 <core_set_error>
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop

08004c00 <ai_platform_inputs_get>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	b085      	sub	sp, #20
 8004c06:	9102      	str	r1, [sp, #8]
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	f000 8093 	beq.w	8004d34 <ai_platform_inputs_get+0x134>
 8004c0e:	4baa      	ldr	r3, [pc, #680]	@ (8004eb8 <ai_platform_inputs_get+0x2b8>)
 8004c10:	4681      	mov	r9, r0
 8004c12:	6802      	ldr	r2, [r0, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f040 808d 	bne.w	8004d34 <ai_platform_inputs_get+0x134>
 8004c1a:	f7ff fe11 	bl	8004840 <_ai_platform_acquire_crc>
 8004c1e:	4ba7      	ldr	r3, [pc, #668]	@ (8004ebc <ai_platform_inputs_get+0x2bc>)
 8004c20:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c2a:	189a      	adds	r2, r3, r2
 8004c2c:	2a01      	cmp	r2, #1
 8004c2e:	f240 80da 	bls.w	8004de6 <ai_platform_inputs_get+0x1e6>
 8004c32:	f240 4249 	movw	r2, #1097	@ 0x449
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f000 80d5 	beq.w	8004de6 <ai_platform_inputs_get+0x1e6>
 8004c3c:	4aa0      	ldr	r2, [pc, #640]	@ (8004ec0 <ai_platform_inputs_get+0x2c0>)
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c44:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004c48:	f000 80dc 	beq.w	8004e04 <ai_platform_inputs_get+0x204>
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f240 4183 	movw	r1, #1155	@ 0x483
 8004c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c56:	428b      	cmp	r3, r1
 8004c58:	f000 810e 	beq.w	8004e78 <ai_platform_inputs_get+0x278>
 8004c5c:	6813      	ldr	r3, [r2, #0]
 8004c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c62:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004c66:	f000 8143 	beq.w	8004ef0 <ai_platform_inputs_get+0x2f0>
 8004c6a:	6813      	ldr	r3, [r2, #0]
 8004c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8113 	beq.w	8004e9c <ai_platform_inputs_get+0x29c>
 8004c76:	f7ff fde5 	bl	8004844 <_ai_platform_release_crc>
 8004c7a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80d2 	beq.w	8004e28 <ai_platform_inputs_get+0x228>
 8004c84:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8004c88:	f1ba 0f00 	cmp.w	sl, #0
 8004c8c:	f000 80cc 	beq.w	8004e28 <ai_platform_inputs_get+0x228>
 8004c90:	2100      	movs	r1, #0
 8004c92:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c96:	460d      	mov	r5, r1
 8004c98:	4689      	mov	r9, r1
 8004c9a:	e016      	b.n	8004cca <ai_platform_inputs_get+0xca>
 8004c9c:	9a01      	ldr	r2, [sp, #4]
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f848 3002 	str.w	r3, [r8, r2]
 8004ca4:	69b2      	ldr	r2, [r6, #24]
 8004ca6:	f04f 0301 	mov.w	r3, #1
 8004caa:	6856      	ldr	r6, [r2, #4]
 8004cac:	3501      	adds	r5, #1
 8004cae:	f109 091c 	add.w	r9, r9, #28
 8004cb2:	7523      	strb	r3, [r4, #20]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6962      	ldr	r2, [r4, #20]
 8004cb8:	60a7      	str	r7, [r4, #8]
 8004cba:	f36b 221f 	bfi	r2, fp, #8, #24
 8004cbe:	6126      	str	r6, [r4, #16]
 8004cc0:	61a1      	str	r1, [r4, #24]
 8004cc2:	60e3      	str	r3, [r4, #12]
 8004cc4:	6162      	str	r2, [r4, #20]
 8004cc6:	e9c4 0c00 	strd	r0, ip, [r4]
 8004cca:	f8ba 3000 	ldrh.w	r3, [sl]
 8004cce:	b2ac      	uxth	r4, r5
 8004cd0:	42ab      	cmp	r3, r5
 8004cd2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	f240 80b5 	bls.w	8004e46 <ai_platform_inputs_get+0x246>
 8004cdc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80b0 	beq.w	8004e46 <ai_platform_inputs_get+0x246>
 8004ce6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004cea:	2e00      	cmp	r6, #0
 8004cec:	f000 80ab 	beq.w	8004e46 <ai_platform_inputs_get+0x246>
 8004cf0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004cf4:	69b2      	ldr	r2, [r6, #24]
 8004cf6:	68f1      	ldr	r1, [r6, #12]
 8004cf8:	6810      	ldr	r0, [r2, #0]
 8004cfa:	9100      	str	r1, [sp, #0]
 8004cfc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8004d00:	68b3      	ldr	r3, [r6, #8]
 8004d02:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8004d06:	444c      	add	r4, r9
 8004d08:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8004d0c:	f003 fbb6 	bl	800847c <ai_array_to_buffer_fmt>
 8004d10:	69b2      	ldr	r2, [r6, #24]
 8004d12:	9900      	ldr	r1, [sp, #0]
 8004d14:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8004d18:	2f00      	cmp	r7, #0
 8004d1a:	d0c4      	beq.n	8004ca6 <ai_platform_inputs_get+0xa6>
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8004d22:	6832      	ldr	r2, [r6, #0]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	b112      	cbz	r2, 8004d2e <ai_platform_inputs_get+0x12e>
 8004d28:	8852      	ldrh	r2, [r2, #2]
 8004d2a:	2a00      	cmp	r2, #0
 8004d2c:	d1b6      	bne.n	8004c9c <ai_platform_inputs_get+0x9c>
 8004d2e:	69b2      	ldr	r2, [r6, #24]
 8004d30:	2700      	movs	r7, #0
 8004d32:	e7b8      	b.n	8004ca6 <ai_platform_inputs_get+0xa6>
 8004d34:	f7ff fd84 	bl	8004840 <_ai_platform_acquire_crc>
 8004d38:	4b60      	ldr	r3, [pc, #384]	@ (8004ebc <ai_platform_inputs_get+0x2bc>)
 8004d3a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d44:	185a      	adds	r2, r3, r1
 8004d46:	2a01      	cmp	r2, #1
 8004d48:	d92a      	bls.n	8004da0 <ai_platform_inputs_get+0x1a0>
 8004d4a:	f240 4249 	movw	r2, #1097	@ 0x449
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d026      	beq.n	8004da0 <ai_platform_inputs_get+0x1a0>
 8004d52:	4a5b      	ldr	r2, [pc, #364]	@ (8004ec0 <ai_platform_inputs_get+0x2c0>)
 8004d54:	6813      	ldr	r3, [r2, #0]
 8004d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d5a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004d5e:	d02c      	beq.n	8004dba <ai_platform_inputs_get+0x1ba>
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	f240 4183 	movw	r1, #1155	@ 0x483
 8004d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d6a:	428b      	cmp	r3, r1
 8004d6c:	d073      	beq.n	8004e56 <ai_platform_inputs_get+0x256>
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d74:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004d78:	f000 80ac 	beq.w	8004ed4 <ai_platform_inputs_get+0x2d4>
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d129      	bne.n	8004dda <ai_platform_inputs_get+0x1da>
 8004d86:	4a4f      	ldr	r2, [pc, #316]	@ (8004ec4 <ai_platform_inputs_get+0x2c4>)
 8004d88:	2301      	movs	r3, #1
 8004d8a:	6093      	str	r3, [r2, #8]
 8004d8c:	6893      	ldr	r3, [r2, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1fc      	bne.n	8004d8c <ai_platform_inputs_get+0x18c>
 8004d92:	494d      	ldr	r1, [pc, #308]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004d94:	4b4d      	ldr	r3, [pc, #308]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004d96:	6011      	str	r1, [r2, #0]
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d01d      	beq.n	8004dda <ai_platform_inputs_get+0x1da>
 8004d9e:	e7fe      	b.n	8004d9e <ai_platform_inputs_get+0x19e>
 8004da0:	4a48      	ldr	r2, [pc, #288]	@ (8004ec4 <ai_platform_inputs_get+0x2c4>)
 8004da2:	2301      	movs	r3, #1
 8004da4:	6093      	str	r3, [r2, #8]
 8004da6:	6893      	ldr	r3, [r2, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1fc      	bne.n	8004da6 <ai_platform_inputs_get+0x1a6>
 8004dac:	4946      	ldr	r1, [pc, #280]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d010      	beq.n	8004dda <ai_platform_inputs_get+0x1da>
 8004db8:	e7fe      	b.n	8004db8 <ai_platform_inputs_get+0x1b8>
 8004dba:	4a45      	ldr	r2, [pc, #276]	@ (8004ed0 <ai_platform_inputs_get+0x2d0>)
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004dc2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1fb      	bne.n	8004dc2 <ai_platform_inputs_get+0x1c2>
 8004dca:	493f      	ldr	r1, [pc, #252]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004dce:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004dd2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d113      	bne.n	8004e02 <ai_platform_inputs_get+0x202>
 8004dda:	f7ff fd33 	bl	8004844 <_ai_platform_release_crc>
 8004dde:	2000      	movs	r0, #0
 8004de0:	b005      	add	sp, #20
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	4a37      	ldr	r2, [pc, #220]	@ (8004ec4 <ai_platform_inputs_get+0x2c4>)
 8004de8:	2301      	movs	r3, #1
 8004dea:	6093      	str	r3, [r2, #8]
 8004dec:	6893      	ldr	r3, [r2, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1fc      	bne.n	8004dec <ai_platform_inputs_get+0x1ec>
 8004df2:	4b35      	ldr	r3, [pc, #212]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004df4:	6013      	str	r3, [r2, #0]
 8004df6:	4b35      	ldr	r3, [pc, #212]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	f43f af3b 	beq.w	8004c76 <ai_platform_inputs_get+0x76>
 8004e00:	e7fe      	b.n	8004e00 <ai_platform_inputs_get+0x200>
 8004e02:	e7fe      	b.n	8004e02 <ai_platform_inputs_get+0x202>
 8004e04:	4a32      	ldr	r2, [pc, #200]	@ (8004ed0 <ai_platform_inputs_get+0x2d0>)
 8004e06:	2301      	movs	r3, #1
 8004e08:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004e0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1fb      	bne.n	8004e0c <ai_platform_inputs_get+0x20c>
 8004e14:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004e16:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8004e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004e1c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004e20:	429a      	cmp	r2, r3
 8004e22:	f43f af28 	beq.w	8004c76 <ai_platform_inputs_get+0x76>
 8004e26:	e7fe      	b.n	8004e26 <ai_platform_inputs_get+0x226>
 8004e28:	2400      	movs	r4, #0
 8004e2a:	2218      	movs	r2, #24
 8004e2c:	2111      	movs	r1, #17
 8004e2e:	f109 0010 	add.w	r0, r9, #16
 8004e32:	f001 f97f 	bl	8006134 <core_set_error>
 8004e36:	4620      	mov	r0, r4
 8004e38:	9b02      	ldr	r3, [sp, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0d0      	beq.n	8004de0 <ai_platform_inputs_get+0x1e0>
 8004e3e:	801c      	strh	r4, [r3, #0]
 8004e40:	b005      	add	sp, #20
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004e4a:	2c00      	cmp	r4, #0
 8004e4c:	d0ec      	beq.n	8004e28 <ai_platform_inputs_get+0x228>
 8004e4e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004e52:	6858      	ldr	r0, [r3, #4]
 8004e54:	e7f0      	b.n	8004e38 <ai_platform_inputs_get+0x238>
 8004e56:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed0 <ai_platform_inputs_get+0x2d0>)
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004e5e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1fb      	bne.n	8004e5e <ai_platform_inputs_get+0x25e>
 8004e66:	4918      	ldr	r1, [pc, #96]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004e68:	4b18      	ldr	r3, [pc, #96]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004e6a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8004e6e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d0b1      	beq.n	8004dda <ai_platform_inputs_get+0x1da>
 8004e76:	e7fe      	b.n	8004e76 <ai_platform_inputs_get+0x276>
 8004e78:	4a15      	ldr	r2, [pc, #84]	@ (8004ed0 <ai_platform_inputs_get+0x2d0>)
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8004e80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1fb      	bne.n	8004e80 <ai_platform_inputs_get+0x280>
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004e8a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004e90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8004e94:	429a      	cmp	r2, r3
 8004e96:	f43f aeee 	beq.w	8004c76 <ai_platform_inputs_get+0x76>
 8004e9a:	e7fe      	b.n	8004e9a <ai_platform_inputs_get+0x29a>
 8004e9c:	4a09      	ldr	r2, [pc, #36]	@ (8004ec4 <ai_platform_inputs_get+0x2c4>)
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	6093      	str	r3, [r2, #8]
 8004ea2:	6893      	ldr	r3, [r2, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1fc      	bne.n	8004ea2 <ai_platform_inputs_get+0x2a2>
 8004ea8:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <ai_platform_inputs_get+0x2c8>)
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <ai_platform_inputs_get+0x2cc>)
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f43f aee0 	beq.w	8004c76 <ai_platform_inputs_get+0x76>
 8004eb6:	e7fe      	b.n	8004eb6 <ai_platform_inputs_get+0x2b6>
 8004eb8:	a1c00100 	.word	0xa1c00100
 8004ebc:	e0042000 	.word	0xe0042000
 8004ec0:	5c001000 	.word	0x5c001000
 8004ec4:	40023000 	.word	0x40023000
 8004ec8:	f407a5c2 	.word	0xf407a5c2
 8004ecc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ed0:	58024000 	.word	0x58024000
 8004ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8004f0c <ai_platform_inputs_get+0x30c>)
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	6093      	str	r3, [r2, #8]
 8004eda:	6893      	ldr	r3, [r2, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1fc      	bne.n	8004eda <ai_platform_inputs_get+0x2da>
 8004ee0:	490b      	ldr	r1, [pc, #44]	@ (8004f10 <ai_platform_inputs_get+0x310>)
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <ai_platform_inputs_get+0x314>)
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	f43f af76 	beq.w	8004dda <ai_platform_inputs_get+0x1da>
 8004eee:	e7fe      	b.n	8004eee <ai_platform_inputs_get+0x2ee>
 8004ef0:	4a06      	ldr	r2, [pc, #24]	@ (8004f0c <ai_platform_inputs_get+0x30c>)
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	6093      	str	r3, [r2, #8]
 8004ef6:	6893      	ldr	r3, [r2, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1fc      	bne.n	8004ef6 <ai_platform_inputs_get+0x2f6>
 8004efc:	4b04      	ldr	r3, [pc, #16]	@ (8004f10 <ai_platform_inputs_get+0x310>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <ai_platform_inputs_get+0x314>)
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	f43f aeb6 	beq.w	8004c76 <ai_platform_inputs_get+0x76>
 8004f0a:	e7fe      	b.n	8004f0a <ai_platform_inputs_get+0x30a>
 8004f0c:	40023000 	.word	0x40023000
 8004f10:	f407a5c2 	.word	0xf407a5c2
 8004f14:	b5e8b5cd 	.word	0xb5e8b5cd

08004f18 <ai_platform_outputs_get>:
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	9102      	str	r1, [sp, #8]
 8004f20:	2800      	cmp	r0, #0
 8004f22:	f000 808f 	beq.w	8005044 <ai_platform_outputs_get+0x12c>
 8004f26:	4ba8      	ldr	r3, [pc, #672]	@ (80051c8 <ai_platform_outputs_get+0x2b0>)
 8004f28:	4681      	mov	r9, r0
 8004f2a:	6802      	ldr	r2, [r0, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	f040 8089 	bne.w	8005044 <ai_platform_outputs_get+0x12c>
 8004f32:	f7ff fc85 	bl	8004840 <_ai_platform_acquire_crc>
 8004f36:	4ba5      	ldr	r3, [pc, #660]	@ (80051cc <ai_platform_outputs_get+0x2b4>)
 8004f38:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f42:	189a      	adds	r2, r3, r2
 8004f44:	2a01      	cmp	r2, #1
 8004f46:	f240 80d6 	bls.w	80050f6 <ai_platform_outputs_get+0x1de>
 8004f4a:	f240 4249 	movw	r2, #1097	@ 0x449
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	f000 80d1 	beq.w	80050f6 <ai_platform_outputs_get+0x1de>
 8004f54:	4a9e      	ldr	r2, [pc, #632]	@ (80051d0 <ai_platform_outputs_get+0x2b8>)
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f5c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8004f60:	f000 80d8 	beq.w	8005114 <ai_platform_outputs_get+0x1fc>
 8004f64:	6813      	ldr	r3, [r2, #0]
 8004f66:	f240 4183 	movw	r1, #1155	@ 0x483
 8004f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f6e:	428b      	cmp	r3, r1
 8004f70:	f000 8109 	beq.w	8005186 <ai_platform_outputs_get+0x26e>
 8004f74:	6813      	ldr	r3, [r2, #0]
 8004f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f7a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8004f7e:	f000 813f 	beq.w	8005200 <ai_platform_outputs_get+0x2e8>
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 810e 	beq.w	80051aa <ai_platform_outputs_get+0x292>
 8004f8e:	f7ff fc59 	bl	8004844 <_ai_platform_release_crc>
 8004f92:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	f240 80db 	bls.w	8005152 <ai_platform_outputs_get+0x23a>
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8004fa2:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fa6:	460d      	mov	r5, r1
 8004fa8:	4689      	mov	r9, r1
 8004faa:	e016      	b.n	8004fda <ai_platform_outputs_get+0xc2>
 8004fac:	9a01      	ldr	r2, [sp, #4]
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f848 3002 	str.w	r3, [r8, r2]
 8004fb4:	69b2      	ldr	r2, [r6, #24]
 8004fb6:	f04f 0301 	mov.w	r3, #1
 8004fba:	6856      	ldr	r6, [r2, #4]
 8004fbc:	3501      	adds	r5, #1
 8004fbe:	f109 091c 	add.w	r9, r9, #28
 8004fc2:	7523      	strb	r3, [r4, #20]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6962      	ldr	r2, [r4, #20]
 8004fc8:	60a7      	str	r7, [r4, #8]
 8004fca:	f36b 221f 	bfi	r2, fp, #8, #24
 8004fce:	6126      	str	r6, [r4, #16]
 8004fd0:	61a1      	str	r1, [r4, #24]
 8004fd2:	60e3      	str	r3, [r4, #12]
 8004fd4:	6162      	str	r2, [r4, #20]
 8004fd6:	e9c4 0c00 	strd	r0, ip, [r4]
 8004fda:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004fde:	b2ac      	uxth	r4, r5
 8004fe0:	42ab      	cmp	r3, r5
 8004fe2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	f240 80a6 	bls.w	8005138 <ai_platform_outputs_get+0x220>
 8004fec:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a1 	beq.w	8005138 <ai_platform_outputs_get+0x220>
 8004ff6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004ffa:	2e00      	cmp	r6, #0
 8004ffc:	f000 809c 	beq.w	8005138 <ai_platform_outputs_get+0x220>
 8005000:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005004:	69b2      	ldr	r2, [r6, #24]
 8005006:	68f1      	ldr	r1, [r6, #12]
 8005008:	6810      	ldr	r0, [r2, #0]
 800500a:	9100      	str	r1, [sp, #0]
 800500c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8005010:	68b3      	ldr	r3, [r6, #8]
 8005012:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8005016:	444c      	add	r4, r9
 8005018:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800501c:	f003 fa2e 	bl	800847c <ai_array_to_buffer_fmt>
 8005020:	69b2      	ldr	r2, [r6, #24]
 8005022:	9900      	ldr	r1, [sp, #0]
 8005024:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005028:	2f00      	cmp	r7, #0
 800502a:	d0c4      	beq.n	8004fb6 <ai_platform_outputs_get+0x9e>
 800502c:	2200      	movs	r2, #0
 800502e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8005032:	6832      	ldr	r2, [r6, #0]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	b112      	cbz	r2, 800503e <ai_platform_outputs_get+0x126>
 8005038:	8852      	ldrh	r2, [r2, #2]
 800503a:	2a00      	cmp	r2, #0
 800503c:	d1b6      	bne.n	8004fac <ai_platform_outputs_get+0x94>
 800503e:	69b2      	ldr	r2, [r6, #24]
 8005040:	2700      	movs	r7, #0
 8005042:	e7b8      	b.n	8004fb6 <ai_platform_outputs_get+0x9e>
 8005044:	f7ff fbfc 	bl	8004840 <_ai_platform_acquire_crc>
 8005048:	4b60      	ldr	r3, [pc, #384]	@ (80051cc <ai_platform_outputs_get+0x2b4>)
 800504a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005054:	185a      	adds	r2, r3, r1
 8005056:	2a01      	cmp	r2, #1
 8005058:	d92a      	bls.n	80050b0 <ai_platform_outputs_get+0x198>
 800505a:	f240 4249 	movw	r2, #1097	@ 0x449
 800505e:	4293      	cmp	r3, r2
 8005060:	d026      	beq.n	80050b0 <ai_platform_outputs_get+0x198>
 8005062:	4a5b      	ldr	r2, [pc, #364]	@ (80051d0 <ai_platform_outputs_get+0x2b8>)
 8005064:	6813      	ldr	r3, [r2, #0]
 8005066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800506a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800506e:	d02c      	beq.n	80050ca <ai_platform_outputs_get+0x1b2>
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	f240 4183 	movw	r1, #1155	@ 0x483
 8005076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507a:	428b      	cmp	r3, r1
 800507c:	d072      	beq.n	8005164 <ai_platform_outputs_get+0x24c>
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005084:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005088:	f000 80ac 	beq.w	80051e4 <ai_platform_outputs_get+0x2cc>
 800508c:	6813      	ldr	r3, [r2, #0]
 800508e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005092:	2b00      	cmp	r3, #0
 8005094:	d129      	bne.n	80050ea <ai_platform_outputs_get+0x1d2>
 8005096:	4a4f      	ldr	r2, [pc, #316]	@ (80051d4 <ai_platform_outputs_get+0x2bc>)
 8005098:	2301      	movs	r3, #1
 800509a:	6093      	str	r3, [r2, #8]
 800509c:	6893      	ldr	r3, [r2, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1fc      	bne.n	800509c <ai_platform_outputs_get+0x184>
 80050a2:	494d      	ldr	r1, [pc, #308]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 80050a4:	4b4d      	ldr	r3, [pc, #308]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 80050a6:	6011      	str	r1, [r2, #0]
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d01d      	beq.n	80050ea <ai_platform_outputs_get+0x1d2>
 80050ae:	e7fe      	b.n	80050ae <ai_platform_outputs_get+0x196>
 80050b0:	4a48      	ldr	r2, [pc, #288]	@ (80051d4 <ai_platform_outputs_get+0x2bc>)
 80050b2:	2301      	movs	r3, #1
 80050b4:	6093      	str	r3, [r2, #8]
 80050b6:	6893      	ldr	r3, [r2, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1fc      	bne.n	80050b6 <ai_platform_outputs_get+0x19e>
 80050bc:	4946      	ldr	r1, [pc, #280]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 80050be:	4b47      	ldr	r3, [pc, #284]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 80050c0:	6011      	str	r1, [r2, #0]
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d010      	beq.n	80050ea <ai_platform_outputs_get+0x1d2>
 80050c8:	e7fe      	b.n	80050c8 <ai_platform_outputs_get+0x1b0>
 80050ca:	4a45      	ldr	r2, [pc, #276]	@ (80051e0 <ai_platform_outputs_get+0x2c8>)
 80050cc:	2301      	movs	r3, #1
 80050ce:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80050d2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1fb      	bne.n	80050d2 <ai_platform_outputs_get+0x1ba>
 80050da:	493f      	ldr	r1, [pc, #252]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 80050dc:	4b3f      	ldr	r3, [pc, #252]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 80050de:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80050e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d113      	bne.n	8005112 <ai_platform_outputs_get+0x1fa>
 80050ea:	f7ff fbab 	bl	8004844 <_ai_platform_release_crc>
 80050ee:	2000      	movs	r0, #0
 80050f0:	b005      	add	sp, #20
 80050f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f6:	4a37      	ldr	r2, [pc, #220]	@ (80051d4 <ai_platform_outputs_get+0x2bc>)
 80050f8:	2301      	movs	r3, #1
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	6893      	ldr	r3, [r2, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1fc      	bne.n	80050fc <ai_platform_outputs_get+0x1e4>
 8005102:	4b35      	ldr	r3, [pc, #212]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4b35      	ldr	r3, [pc, #212]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	f43f af3f 	beq.w	8004f8e <ai_platform_outputs_get+0x76>
 8005110:	e7fe      	b.n	8005110 <ai_platform_outputs_get+0x1f8>
 8005112:	e7fe      	b.n	8005112 <ai_platform_outputs_get+0x1fa>
 8005114:	4a32      	ldr	r2, [pc, #200]	@ (80051e0 <ai_platform_outputs_get+0x2c8>)
 8005116:	2301      	movs	r3, #1
 8005118:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800511c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1fb      	bne.n	800511c <ai_platform_outputs_get+0x204>
 8005124:	4b2c      	ldr	r3, [pc, #176]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 8005126:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800512a:	4b2c      	ldr	r3, [pc, #176]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 800512c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005130:	429a      	cmp	r2, r3
 8005132:	f43f af2c 	beq.w	8004f8e <ai_platform_outputs_get+0x76>
 8005136:	e7fe      	b.n	8005136 <ai_platform_outputs_get+0x21e>
 8005138:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800513c:	b14c      	cbz	r4, 8005152 <ai_platform_outputs_get+0x23a>
 800513e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005142:	6858      	ldr	r0, [r3, #4]
 8005144:	9b02      	ldr	r3, [sp, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0d2      	beq.n	80050f0 <ai_platform_outputs_get+0x1d8>
 800514a:	801c      	strh	r4, [r3, #0]
 800514c:	b005      	add	sp, #20
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	2400      	movs	r4, #0
 8005154:	2218      	movs	r2, #24
 8005156:	2111      	movs	r1, #17
 8005158:	f109 0010 	add.w	r0, r9, #16
 800515c:	f000 ffea 	bl	8006134 <core_set_error>
 8005160:	4620      	mov	r0, r4
 8005162:	e7ef      	b.n	8005144 <ai_platform_outputs_get+0x22c>
 8005164:	4a1e      	ldr	r2, [pc, #120]	@ (80051e0 <ai_platform_outputs_get+0x2c8>)
 8005166:	2301      	movs	r3, #1
 8005168:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800516c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1fb      	bne.n	800516c <ai_platform_outputs_get+0x254>
 8005174:	4918      	ldr	r1, [pc, #96]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 8005176:	4b19      	ldr	r3, [pc, #100]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 8005178:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800517c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005180:	429a      	cmp	r2, r3
 8005182:	d0b2      	beq.n	80050ea <ai_platform_outputs_get+0x1d2>
 8005184:	e7fe      	b.n	8005184 <ai_platform_outputs_get+0x26c>
 8005186:	4a16      	ldr	r2, [pc, #88]	@ (80051e0 <ai_platform_outputs_get+0x2c8>)
 8005188:	2301      	movs	r3, #1
 800518a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800518e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1fb      	bne.n	800518e <ai_platform_outputs_get+0x276>
 8005196:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 8005198:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800519c:	4b0f      	ldr	r3, [pc, #60]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 800519e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80051a2:	429a      	cmp	r2, r3
 80051a4:	f43f aef3 	beq.w	8004f8e <ai_platform_outputs_get+0x76>
 80051a8:	e7fe      	b.n	80051a8 <ai_platform_outputs_get+0x290>
 80051aa:	4a0a      	ldr	r2, [pc, #40]	@ (80051d4 <ai_platform_outputs_get+0x2bc>)
 80051ac:	2301      	movs	r3, #1
 80051ae:	6093      	str	r3, [r2, #8]
 80051b0:	6893      	ldr	r3, [r2, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1fc      	bne.n	80051b0 <ai_platform_outputs_get+0x298>
 80051b6:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <ai_platform_outputs_get+0x2c0>)
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b08      	ldr	r3, [pc, #32]	@ (80051dc <ai_platform_outputs_get+0x2c4>)
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	f43f aee5 	beq.w	8004f8e <ai_platform_outputs_get+0x76>
 80051c4:	e7fe      	b.n	80051c4 <ai_platform_outputs_get+0x2ac>
 80051c6:	bf00      	nop
 80051c8:	a1c00100 	.word	0xa1c00100
 80051cc:	e0042000 	.word	0xe0042000
 80051d0:	5c001000 	.word	0x5c001000
 80051d4:	40023000 	.word	0x40023000
 80051d8:	f407a5c2 	.word	0xf407a5c2
 80051dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80051e0:	58024000 	.word	0x58024000
 80051e4:	4a0d      	ldr	r2, [pc, #52]	@ (800521c <ai_platform_outputs_get+0x304>)
 80051e6:	2301      	movs	r3, #1
 80051e8:	6093      	str	r3, [r2, #8]
 80051ea:	6893      	ldr	r3, [r2, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1fc      	bne.n	80051ea <ai_platform_outputs_get+0x2d2>
 80051f0:	490b      	ldr	r1, [pc, #44]	@ (8005220 <ai_platform_outputs_get+0x308>)
 80051f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <ai_platform_outputs_get+0x30c>)
 80051f4:	6011      	str	r1, [r2, #0]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	f43f af76 	beq.w	80050ea <ai_platform_outputs_get+0x1d2>
 80051fe:	e7fe      	b.n	80051fe <ai_platform_outputs_get+0x2e6>
 8005200:	4a06      	ldr	r2, [pc, #24]	@ (800521c <ai_platform_outputs_get+0x304>)
 8005202:	2301      	movs	r3, #1
 8005204:	6093      	str	r3, [r2, #8]
 8005206:	6893      	ldr	r3, [r2, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1fc      	bne.n	8005206 <ai_platform_outputs_get+0x2ee>
 800520c:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <ai_platform_outputs_get+0x308>)
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	4b04      	ldr	r3, [pc, #16]	@ (8005224 <ai_platform_outputs_get+0x30c>)
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	429a      	cmp	r2, r3
 8005216:	f43f aeba 	beq.w	8004f8e <ai_platform_outputs_get+0x76>
 800521a:	e7fe      	b.n	800521a <ai_platform_outputs_get+0x302>
 800521c:	40023000 	.word	0x40023000
 8005220:	f407a5c2 	.word	0xf407a5c2
 8005224:	b5e8b5cd 	.word	0xb5e8b5cd

08005228 <ai_platform_network_create>:
 8005228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800522c:	b083      	sub	sp, #12
 800522e:	4604      	mov	r4, r0
 8005230:	4615      	mov	r5, r2
 8005232:	461e      	mov	r6, r3
 8005234:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8005238:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800523c:	f7ff fb00 	bl	8004840 <_ai_platform_acquire_crc>
 8005240:	2800      	cmp	r0, #0
 8005242:	f000 80bd 	beq.w	80053c0 <ai_platform_network_create+0x198>
 8005246:	4ba5      	ldr	r3, [pc, #660]	@ (80054dc <ai_platform_network_create+0x2b4>)
 8005248:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 800524c:	4601      	mov	r1, r0
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005254:	eb03 020c 	add.w	r2, r3, ip
 8005258:	2a01      	cmp	r2, #1
 800525a:	f240 80a8 	bls.w	80053ae <ai_platform_network_create+0x186>
 800525e:	f240 4249 	movw	r2, #1097	@ 0x449
 8005262:	4293      	cmp	r3, r2
 8005264:	f000 80a3 	beq.w	80053ae <ai_platform_network_create+0x186>
 8005268:	4a9d      	ldr	r2, [pc, #628]	@ (80054e0 <ai_platform_network_create+0x2b8>)
 800526a:	6813      	ldr	r3, [r2, #0]
 800526c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005270:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005274:	f000 80b9 	beq.w	80053ea <ai_platform_network_create+0x1c2>
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	f240 4c83 	movw	ip, #1155	@ 0x483
 800527e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005282:	4563      	cmp	r3, ip
 8005284:	f000 80a1 	beq.w	80053ca <ai_platform_network_create+0x1a2>
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800528e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005292:	f000 8153 	beq.w	800553c <ai_platform_network_create+0x314>
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 808d 	bne.w	80053bc <ai_platform_network_create+0x194>
 80052a2:	4a90      	ldr	r2, [pc, #576]	@ (80054e4 <ai_platform_network_create+0x2bc>)
 80052a4:	2318      	movs	r3, #24
 80052a6:	6093      	str	r3, [r2, #8]
 80052a8:	6893      	ldr	r3, [r2, #8]
 80052aa:	2b18      	cmp	r3, #24
 80052ac:	f040 8086 	bne.w	80053bc <ai_platform_network_create+0x194>
 80052b0:	2301      	movs	r3, #1
 80052b2:	6093      	str	r3, [r2, #8]
 80052b4:	6893      	ldr	r3, [r2, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1fc      	bne.n	80052b4 <ai_platform_network_create+0x8c>
 80052ba:	4608      	mov	r0, r1
 80052bc:	f7ff fac2 	bl	8004844 <_ai_platform_release_crc>
 80052c0:	f7ff fabe 	bl	8004840 <_ai_platform_acquire_crc>
 80052c4:	4b85      	ldr	r3, [pc, #532]	@ (80054dc <ai_platform_network_create+0x2b4>)
 80052c6:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052d0:	189a      	adds	r2, r3, r2
 80052d2:	2a01      	cmp	r2, #1
 80052d4:	f240 809f 	bls.w	8005416 <ai_platform_network_create+0x1ee>
 80052d8:	f240 4249 	movw	r2, #1097	@ 0x449
 80052dc:	4293      	cmp	r3, r2
 80052de:	f000 809a 	beq.w	8005416 <ai_platform_network_create+0x1ee>
 80052e2:	4a7f      	ldr	r2, [pc, #508]	@ (80054e0 <ai_platform_network_create+0x2b8>)
 80052e4:	6813      	ldr	r3, [r2, #0]
 80052e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ea:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80052ee:	f000 80a0 	beq.w	8005432 <ai_platform_network_create+0x20a>
 80052f2:	6813      	ldr	r3, [r2, #0]
 80052f4:	f240 4183 	movw	r1, #1155	@ 0x483
 80052f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052fc:	428b      	cmp	r3, r1
 80052fe:	f000 80bf 	beq.w	8005480 <ai_platform_network_create+0x258>
 8005302:	6813      	ldr	r3, [r2, #0]
 8005304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005308:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800530c:	f000 8123 	beq.w	8005556 <ai_platform_network_create+0x32e>
 8005310:	6813      	ldr	r3, [r2, #0]
 8005312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80c4 	beq.w	80054a4 <ai_platform_network_create+0x27c>
 800531c:	f7ff fa92 	bl	8004844 <_ai_platform_release_crc>
 8005320:	2c00      	cmp	r4, #0
 8005322:	f000 80aa 	beq.w	800547a <ai_platform_network_create+0x252>
 8005326:	4b70      	ldr	r3, [pc, #448]	@ (80054e8 <ai_platform_network_create+0x2c0>)
 8005328:	602b      	str	r3, [r5, #0]
 800532a:	6025      	str	r5, [r4, #0]
 800532c:	f000 fefa 	bl	8006124 <core_init>
 8005330:	2800      	cmp	r0, #0
 8005332:	f000 8090 	beq.w	8005456 <ai_platform_network_create+0x22e>
 8005336:	f7ff fa83 	bl	8004840 <_ai_platform_acquire_crc>
 800533a:	4b68      	ldr	r3, [pc, #416]	@ (80054dc <ai_platform_network_create+0x2b4>)
 800533c:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005346:	185a      	adds	r2, r3, r1
 8005348:	2a01      	cmp	r2, #1
 800534a:	f240 80b9 	bls.w	80054c0 <ai_platform_network_create+0x298>
 800534e:	f240 4249 	movw	r2, #1097	@ 0x449
 8005352:	4293      	cmp	r3, r2
 8005354:	f000 80b4 	beq.w	80054c0 <ai_platform_network_create+0x298>
 8005358:	4a61      	ldr	r2, [pc, #388]	@ (80054e0 <ai_platform_network_create+0x2b8>)
 800535a:	6813      	ldr	r3, [r2, #0]
 800535c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005360:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005364:	f000 80c8 	beq.w	80054f8 <ai_platform_network_create+0x2d0>
 8005368:	6813      	ldr	r3, [r2, #0]
 800536a:	f240 4183 	movw	r1, #1155	@ 0x483
 800536e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005372:	428b      	cmp	r3, r1
 8005374:	f000 8107 	beq.w	8005586 <ai_platform_network_create+0x35e>
 8005378:	6813      	ldr	r3, [r2, #0]
 800537a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800537e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005382:	f000 8111 	beq.w	80055a8 <ai_platform_network_create+0x380>
 8005386:	6813      	ldr	r3, [r2, #0]
 8005388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800538c:	2b00      	cmp	r3, #0
 800538e:	f040 80c3 	bne.w	8005518 <ai_platform_network_create+0x2f0>
 8005392:	4b54      	ldr	r3, [pc, #336]	@ (80054e4 <ai_platform_network_create+0x2bc>)
 8005394:	2201      	movs	r2, #1
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	2a00      	cmp	r2, #0
 800539c:	d1fc      	bne.n	8005398 <ai_platform_network_create+0x170>
 800539e:	4a53      	ldr	r2, [pc, #332]	@ (80054ec <ai_platform_network_create+0x2c4>)
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b52      	ldr	r3, [pc, #328]	@ (80054f0 <ai_platform_network_create+0x2c8>)
 80053a6:	429a      	cmp	r2, r3
 80053a8:	f000 80b6 	beq.w	8005518 <ai_platform_network_create+0x2f0>
 80053ac:	e7fe      	b.n	80053ac <ai_platform_network_create+0x184>
 80053ae:	4b4d      	ldr	r3, [pc, #308]	@ (80054e4 <ai_platform_network_create+0x2bc>)
 80053b0:	2218      	movs	r2, #24
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	2a18      	cmp	r2, #24
 80053b8:	d027      	beq.n	800540a <ai_platform_network_create+0x1e2>
 80053ba:	4608      	mov	r0, r1
 80053bc:	f7ff fa42 	bl	8004844 <_ai_platform_release_crc>
 80053c0:	f244 1033 	movw	r0, #16691	@ 0x4133
 80053c4:	b003      	add	sp, #12
 80053c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80053ca:	4a4a      	ldr	r2, [pc, #296]	@ (80054f4 <ai_platform_network_create+0x2cc>)
 80053cc:	2318      	movs	r3, #24
 80053ce:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80053d2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80053d6:	2b18      	cmp	r3, #24
 80053d8:	d1f0      	bne.n	80053bc <ai_platform_network_create+0x194>
 80053da:	2301      	movs	r3, #1
 80053dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80053e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1fb      	bne.n	80053e0 <ai_platform_network_create+0x1b8>
 80053e8:	e767      	b.n	80052ba <ai_platform_network_create+0x92>
 80053ea:	4a42      	ldr	r2, [pc, #264]	@ (80054f4 <ai_platform_network_create+0x2cc>)
 80053ec:	2318      	movs	r3, #24
 80053ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80053f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80053f6:	2b18      	cmp	r3, #24
 80053f8:	d1e0      	bne.n	80053bc <ai_platform_network_create+0x194>
 80053fa:	2301      	movs	r3, #1
 80053fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005400:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1fb      	bne.n	8005400 <ai_platform_network_create+0x1d8>
 8005408:	e757      	b.n	80052ba <ai_platform_network_create+0x92>
 800540a:	2201      	movs	r2, #1
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	2a00      	cmp	r2, #0
 8005412:	d1fc      	bne.n	800540e <ai_platform_network_create+0x1e6>
 8005414:	e751      	b.n	80052ba <ai_platform_network_create+0x92>
 8005416:	4a33      	ldr	r2, [pc, #204]	@ (80054e4 <ai_platform_network_create+0x2bc>)
 8005418:	2301      	movs	r3, #1
 800541a:	6093      	str	r3, [r2, #8]
 800541c:	6891      	ldr	r1, [r2, #8]
 800541e:	2900      	cmp	r1, #0
 8005420:	d1fc      	bne.n	800541c <ai_platform_network_create+0x1f4>
 8005422:	4b32      	ldr	r3, [pc, #200]	@ (80054ec <ai_platform_network_create+0x2c4>)
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	4b32      	ldr	r3, [pc, #200]	@ (80054f0 <ai_platform_network_create+0x2c8>)
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	f43f af76 	beq.w	800531c <ai_platform_network_create+0xf4>
 8005430:	e7fe      	b.n	8005430 <ai_platform_network_create+0x208>
 8005432:	4a30      	ldr	r2, [pc, #192]	@ (80054f4 <ai_platform_network_create+0x2cc>)
 8005434:	2301      	movs	r3, #1
 8005436:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800543a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1fb      	bne.n	800543a <ai_platform_network_create+0x212>
 8005442:	4b2a      	ldr	r3, [pc, #168]	@ (80054ec <ai_platform_network_create+0x2c4>)
 8005444:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005448:	4b29      	ldr	r3, [pc, #164]	@ (80054f0 <ai_platform_network_create+0x2c8>)
 800544a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800544e:	429a      	cmp	r2, r3
 8005450:	f43f af64 	beq.w	800531c <ai_platform_network_create+0xf4>
 8005454:	e7fe      	b.n	8005454 <ai_platform_network_create+0x22c>
 8005456:	f04f 0930 	mov.w	r9, #48	@ 0x30
 800545a:	2300      	movs	r3, #0
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	2410      	movs	r4, #16
 8005460:	4642      	mov	r2, r8
 8005462:	4639      	mov	r1, r7
 8005464:	4630      	mov	r0, r6
 8005466:	f002 ffed 	bl	8008444 <ai_version_get>
 800546a:	4603      	mov	r3, r0
 800546c:	2000      	movs	r0, #0
 800546e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8005470:	f369 0007 	bfi	r0, r9, #0, #8
 8005474:	f364 201f 	bfi	r0, r4, #8, #24
 8005478:	e7a4      	b.n	80053c4 <ai_platform_network_create+0x19c>
 800547a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800547e:	e7a1      	b.n	80053c4 <ai_platform_network_create+0x19c>
 8005480:	4a1c      	ldr	r2, [pc, #112]	@ (80054f4 <ai_platform_network_create+0x2cc>)
 8005482:	2301      	movs	r3, #1
 8005484:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005488:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1fb      	bne.n	8005488 <ai_platform_network_create+0x260>
 8005490:	4b16      	ldr	r3, [pc, #88]	@ (80054ec <ai_platform_network_create+0x2c4>)
 8005492:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005496:	4b16      	ldr	r3, [pc, #88]	@ (80054f0 <ai_platform_network_create+0x2c8>)
 8005498:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800549c:	429a      	cmp	r2, r3
 800549e:	f43f af3d 	beq.w	800531c <ai_platform_network_create+0xf4>
 80054a2:	e7fe      	b.n	80054a2 <ai_platform_network_create+0x27a>
 80054a4:	4a0f      	ldr	r2, [pc, #60]	@ (80054e4 <ai_platform_network_create+0x2bc>)
 80054a6:	2301      	movs	r3, #1
 80054a8:	6093      	str	r3, [r2, #8]
 80054aa:	6893      	ldr	r3, [r2, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1fc      	bne.n	80054aa <ai_platform_network_create+0x282>
 80054b0:	4b0e      	ldr	r3, [pc, #56]	@ (80054ec <ai_platform_network_create+0x2c4>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4b0e      	ldr	r3, [pc, #56]	@ (80054f0 <ai_platform_network_create+0x2c8>)
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	f43f af2f 	beq.w	800531c <ai_platform_network_create+0xf4>
 80054be:	e7fe      	b.n	80054be <ai_platform_network_create+0x296>
 80054c0:	4a08      	ldr	r2, [pc, #32]	@ (80054e4 <ai_platform_network_create+0x2bc>)
 80054c2:	2301      	movs	r3, #1
 80054c4:	6093      	str	r3, [r2, #8]
 80054c6:	6893      	ldr	r3, [r2, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1fc      	bne.n	80054c6 <ai_platform_network_create+0x29e>
 80054cc:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <ai_platform_network_create+0x2c4>)
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <ai_platform_network_create+0x2c8>)
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d01f      	beq.n	8005518 <ai_platform_network_create+0x2f0>
 80054d8:	e7fe      	b.n	80054d8 <ai_platform_network_create+0x2b0>
 80054da:	bf00      	nop
 80054dc:	e0042000 	.word	0xe0042000
 80054e0:	5c001000 	.word	0x5c001000
 80054e4:	40023000 	.word	0x40023000
 80054e8:	a1c00100 	.word	0xa1c00100
 80054ec:	f407a5c2 	.word	0xf407a5c2
 80054f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80054f4:	58024000 	.word	0x58024000
 80054f8:	4a33      	ldr	r2, [pc, #204]	@ (80055c8 <ai_platform_network_create+0x3a0>)
 80054fa:	2301      	movs	r3, #1
 80054fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005500:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1fb      	bne.n	8005500 <ai_platform_network_create+0x2d8>
 8005508:	4b30      	ldr	r3, [pc, #192]	@ (80055cc <ai_platform_network_create+0x3a4>)
 800550a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800550e:	4b30      	ldr	r3, [pc, #192]	@ (80055d0 <ai_platform_network_create+0x3a8>)
 8005510:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005514:	429a      	cmp	r2, r3
 8005516:	d12c      	bne.n	8005572 <ai_platform_network_create+0x34a>
 8005518:	f7ff f994 	bl	8004844 <_ai_platform_release_crc>
 800551c:	2200      	movs	r2, #0
 800551e:	4639      	mov	r1, r7
 8005520:	4630      	mov	r0, r6
 8005522:	f002 ff8f 	bl	8008444 <ai_version_get>
 8005526:	4681      	mov	r9, r0
 8005528:	2200      	movs	r2, #0
 800552a:	2105      	movs	r1, #5
 800552c:	2001      	movs	r0, #1
 800552e:	f002 ff89 	bl	8008444 <ai_version_get>
 8005532:	4581      	cmp	r9, r0
 8005534:	d01e      	beq.n	8005574 <ai_platform_network_create+0x34c>
 8005536:	f04f 0901 	mov.w	r9, #1
 800553a:	e78e      	b.n	800545a <ai_platform_network_create+0x232>
 800553c:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <ai_platform_network_create+0x3ac>)
 800553e:	2218      	movs	r2, #24
 8005540:	609a      	str	r2, [r3, #8]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	2a18      	cmp	r2, #24
 8005546:	f47f af39 	bne.w	80053bc <ai_platform_network_create+0x194>
 800554a:	2201      	movs	r2, #1
 800554c:	609a      	str	r2, [r3, #8]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	2a00      	cmp	r2, #0
 8005552:	d1fc      	bne.n	800554e <ai_platform_network_create+0x326>
 8005554:	e6b1      	b.n	80052ba <ai_platform_network_create+0x92>
 8005556:	4a1f      	ldr	r2, [pc, #124]	@ (80055d4 <ai_platform_network_create+0x3ac>)
 8005558:	2301      	movs	r3, #1
 800555a:	6093      	str	r3, [r2, #8]
 800555c:	6893      	ldr	r3, [r2, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1fc      	bne.n	800555c <ai_platform_network_create+0x334>
 8005562:	4b1a      	ldr	r3, [pc, #104]	@ (80055cc <ai_platform_network_create+0x3a4>)
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4b1a      	ldr	r3, [pc, #104]	@ (80055d0 <ai_platform_network_create+0x3a8>)
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	f43f aed6 	beq.w	800531c <ai_platform_network_create+0xf4>
 8005570:	e7fe      	b.n	8005570 <ai_platform_network_create+0x348>
 8005572:	e7fe      	b.n	8005572 <ai_platform_network_create+0x34a>
 8005574:	4b18      	ldr	r3, [pc, #96]	@ (80055d8 <ai_platform_network_create+0x3b0>)
 8005576:	a801      	add	r0, sp, #4
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	f002 fda9 	bl	80080d0 <ai_check_custom_types>
 800557e:	b300      	cbz	r0, 80055c2 <ai_platform_network_create+0x39a>
 8005580:	2400      	movs	r4, #0
 8005582:	46a1      	mov	r9, r4
 8005584:	e76c      	b.n	8005460 <ai_platform_network_create+0x238>
 8005586:	4b10      	ldr	r3, [pc, #64]	@ (80055c8 <ai_platform_network_create+0x3a0>)
 8005588:	2201      	movs	r2, #1
 800558a:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 800558e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 8005592:	2a00      	cmp	r2, #0
 8005594:	d1fb      	bne.n	800558e <ai_platform_network_create+0x366>
 8005596:	4a0d      	ldr	r2, [pc, #52]	@ (80055cc <ai_platform_network_create+0x3a4>)
 8005598:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 800559c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80055a0:	4b0b      	ldr	r3, [pc, #44]	@ (80055d0 <ai_platform_network_create+0x3a8>)
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d0b8      	beq.n	8005518 <ai_platform_network_create+0x2f0>
 80055a6:	e7fe      	b.n	80055a6 <ai_platform_network_create+0x37e>
 80055a8:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <ai_platform_network_create+0x3ac>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	609a      	str	r2, [r3, #8]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d1fc      	bne.n	80055ae <ai_platform_network_create+0x386>
 80055b4:	4a05      	ldr	r2, [pc, #20]	@ (80055cc <ai_platform_network_create+0x3a4>)
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4b05      	ldr	r3, [pc, #20]	@ (80055d0 <ai_platform_network_create+0x3a8>)
 80055bc:	429a      	cmp	r2, r3
 80055be:	d0ab      	beq.n	8005518 <ai_platform_network_create+0x2f0>
 80055c0:	e7fe      	b.n	80055c0 <ai_platform_network_create+0x398>
 80055c2:	f04f 0902 	mov.w	r9, #2
 80055c6:	e748      	b.n	800545a <ai_platform_network_create+0x232>
 80055c8:	58024000 	.word	0x58024000
 80055cc:	f407a5c2 	.word	0xf407a5c2
 80055d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80055d4:	40023000 	.word	0x40023000
 80055d8:	84048403 	.word	0x84048403

080055dc <ai_platform_network_init>:
 80055dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d052      	beq.n	800568a <ai_platform_network_init+0xae>
 80055e4:	4bab      	ldr	r3, [pc, #684]	@ (8005894 <ai_platform_network_init+0x2b8>)
 80055e6:	4604      	mov	r4, r0
 80055e8:	6802      	ldr	r2, [r0, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d14d      	bne.n	800568a <ai_platform_network_init+0xae>
 80055ee:	460d      	mov	r5, r1
 80055f0:	f7ff f926 	bl	8004840 <_ai_platform_acquire_crc>
 80055f4:	4ba8      	ldr	r3, [pc, #672]	@ (8005898 <ai_platform_network_init+0x2bc>)
 80055f6:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005600:	189a      	adds	r2, r3, r2
 8005602:	2a01      	cmp	r2, #1
 8005604:	f240 809b 	bls.w	800573e <ai_platform_network_init+0x162>
 8005608:	f240 4249 	movw	r2, #1097	@ 0x449
 800560c:	4293      	cmp	r3, r2
 800560e:	f000 8096 	beq.w	800573e <ai_platform_network_init+0x162>
 8005612:	4aa2      	ldr	r2, [pc, #648]	@ (800589c <ai_platform_network_init+0x2c0>)
 8005614:	6813      	ldr	r3, [r2, #0]
 8005616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800561a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800561e:	f000 809d 	beq.w	800575c <ai_platform_network_init+0x180>
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	f240 4183 	movw	r1, #1155	@ 0x483
 8005628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800562c:	428b      	cmp	r3, r1
 800562e:	f000 80e4 	beq.w	80057fa <ai_platform_network_init+0x21e>
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005638:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800563c:	f000 811b 	beq.w	8005876 <ai_platform_network_init+0x29a>
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80f9 	beq.w	800583e <ai_platform_network_init+0x262>
 800564c:	f7ff f8fa 	bl	8004844 <_ai_platform_release_crc>
 8005650:	2d00      	cmp	r5, #0
 8005652:	f000 8147 	beq.w	80058e4 <ai_platform_network_init+0x308>
 8005656:	4b92      	ldr	r3, [pc, #584]	@ (80058a0 <ai_platform_network_init+0x2c4>)
 8005658:	682a      	ldr	r2, [r5, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	f040 8090 	bne.w	8005780 <ai_platform_network_init+0x1a4>
 8005660:	692b      	ldr	r3, [r5, #16]
 8005662:	89ae      	ldrh	r6, [r5, #12]
 8005664:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8005668:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800566c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800566e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8005672:	2303      	movs	r3, #3
 8005674:	84a6      	strh	r6, [r4, #36]	@ 0x24
 8005676:	4626      	mov	r6, r4
 8005678:	4620      	mov	r0, r4
 800567a:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 800567e:	60e3      	str	r3, [r4, #12]
 8005680:	f002 fd4e 	bl	8008120 <ai_layers_init_all>
 8005684:	4630      	mov	r0, r6
 8005686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568a:	f7ff f8d9 	bl	8004840 <_ai_platform_acquire_crc>
 800568e:	4b82      	ldr	r3, [pc, #520]	@ (8005898 <ai_platform_network_init+0x2bc>)
 8005690:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800569a:	185a      	adds	r2, r3, r1
 800569c:	2a01      	cmp	r2, #1
 800569e:	d92b      	bls.n	80056f8 <ai_platform_network_init+0x11c>
 80056a0:	f240 4249 	movw	r2, #1097	@ 0x449
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d027      	beq.n	80056f8 <ai_platform_network_init+0x11c>
 80056a8:	4a7c      	ldr	r2, [pc, #496]	@ (800589c <ai_platform_network_init+0x2c0>)
 80056aa:	6813      	ldr	r3, [r2, #0]
 80056ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056b0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80056b4:	d02d      	beq.n	8005712 <ai_platform_network_init+0x136>
 80056b6:	6813      	ldr	r3, [r2, #0]
 80056b8:	f240 4183 	movw	r1, #1155	@ 0x483
 80056bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056c0:	428b      	cmp	r3, r1
 80056c2:	f000 8089 	beq.w	80057d8 <ai_platform_network_init+0x1fc>
 80056c6:	6813      	ldr	r3, [r2, #0]
 80056c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056cc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80056d0:	f000 80c3 	beq.w	800585a <ai_platform_network_init+0x27e>
 80056d4:	6813      	ldr	r3, [r2, #0]
 80056d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d129      	bne.n	8005732 <ai_platform_network_init+0x156>
 80056de:	4a71      	ldr	r2, [pc, #452]	@ (80058a4 <ai_platform_network_init+0x2c8>)
 80056e0:	2301      	movs	r3, #1
 80056e2:	6093      	str	r3, [r2, #8]
 80056e4:	6893      	ldr	r3, [r2, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1fc      	bne.n	80056e4 <ai_platform_network_init+0x108>
 80056ea:	496f      	ldr	r1, [pc, #444]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 80056ec:	4b6f      	ldr	r3, [pc, #444]	@ (80058ac <ai_platform_network_init+0x2d0>)
 80056ee:	6011      	str	r1, [r2, #0]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d01d      	beq.n	8005732 <ai_platform_network_init+0x156>
 80056f6:	e7fe      	b.n	80056f6 <ai_platform_network_init+0x11a>
 80056f8:	4a6a      	ldr	r2, [pc, #424]	@ (80058a4 <ai_platform_network_init+0x2c8>)
 80056fa:	2301      	movs	r3, #1
 80056fc:	6093      	str	r3, [r2, #8]
 80056fe:	6893      	ldr	r3, [r2, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1fc      	bne.n	80056fe <ai_platform_network_init+0x122>
 8005704:	4968      	ldr	r1, [pc, #416]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 8005706:	4b69      	ldr	r3, [pc, #420]	@ (80058ac <ai_platform_network_init+0x2d0>)
 8005708:	6011      	str	r1, [r2, #0]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d010      	beq.n	8005732 <ai_platform_network_init+0x156>
 8005710:	e7fe      	b.n	8005710 <ai_platform_network_init+0x134>
 8005712:	4a67      	ldr	r2, [pc, #412]	@ (80058b0 <ai_platform_network_init+0x2d4>)
 8005714:	2301      	movs	r3, #1
 8005716:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800571a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1fb      	bne.n	800571a <ai_platform_network_init+0x13e>
 8005722:	4961      	ldr	r1, [pc, #388]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 8005724:	4b61      	ldr	r3, [pc, #388]	@ (80058ac <ai_platform_network_init+0x2d0>)
 8005726:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800572a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800572e:	429a      	cmp	r2, r3
 8005730:	d113      	bne.n	800575a <ai_platform_network_init+0x17e>
 8005732:	2600      	movs	r6, #0
 8005734:	f7ff f886 	bl	8004844 <_ai_platform_release_crc>
 8005738:	4630      	mov	r0, r6
 800573a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800573e:	4a59      	ldr	r2, [pc, #356]	@ (80058a4 <ai_platform_network_init+0x2c8>)
 8005740:	2301      	movs	r3, #1
 8005742:	6093      	str	r3, [r2, #8]
 8005744:	6893      	ldr	r3, [r2, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1fc      	bne.n	8005744 <ai_platform_network_init+0x168>
 800574a:	4b57      	ldr	r3, [pc, #348]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	4b57      	ldr	r3, [pc, #348]	@ (80058ac <ai_platform_network_init+0x2d0>)
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	429a      	cmp	r2, r3
 8005754:	f43f af7a 	beq.w	800564c <ai_platform_network_init+0x70>
 8005758:	e7fe      	b.n	8005758 <ai_platform_network_init+0x17c>
 800575a:	e7fe      	b.n	800575a <ai_platform_network_init+0x17e>
 800575c:	4a54      	ldr	r2, [pc, #336]	@ (80058b0 <ai_platform_network_init+0x2d4>)
 800575e:	2301      	movs	r3, #1
 8005760:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005764:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1fb      	bne.n	8005764 <ai_platform_network_init+0x188>
 800576c:	4b4e      	ldr	r3, [pc, #312]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 800576e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005772:	4b4e      	ldr	r3, [pc, #312]	@ (80058ac <ai_platform_network_init+0x2d0>)
 8005774:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005778:	429a      	cmp	r2, r3
 800577a:	f43f af67 	beq.w	800564c <ai_platform_network_init+0x70>
 800577e:	e7fe      	b.n	800577e <ai_platform_network_init+0x1a2>
 8005780:	2101      	movs	r1, #1
 8005782:	4628      	mov	r0, r5
 8005784:	f105 081c 	add.w	r8, r5, #28
 8005788:	686e      	ldr	r6, [r5, #4]
 800578a:	f7ff f80b 	bl	80047a4 <ai_buffer_get_size>
 800578e:	4607      	mov	r7, r0
 8005790:	2101      	movs	r1, #1
 8005792:	4640      	mov	r0, r8
 8005794:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8005798:	f7ff f804 	bl	80047a4 <ai_buffer_get_size>
 800579c:	2f00      	cmp	r7, #0
 800579e:	d13e      	bne.n	800581e <ai_platform_network_init+0x242>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	f000 808e 	beq.w	80058c2 <ai_platform_network_init+0x2e6>
 80057a6:	f1b9 0f00 	cmp.w	r9, #0
 80057aa:	f000 8094 	beq.w	80058d6 <ai_platform_network_init+0x2fa>
 80057ae:	f04f 0c01 	mov.w	ip, #1
 80057b2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80057b4:	2600      	movs	r6, #0
 80057b6:	83e7      	strh	r7, [r4, #30]
 80057b8:	4563      	cmp	r3, ip
 80057ba:	83a6      	strh	r6, [r4, #28]
 80057bc:	d37a      	bcc.n	80058b4 <ai_platform_network_init+0x2d8>
 80057be:	f1bc 0f00 	cmp.w	ip, #0
 80057c2:	f000 809c 	beq.w	80058fe <ai_platform_network_init+0x322>
 80057c6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80057c8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80057cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ce:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80057d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80057d6:	e74c      	b.n	8005672 <ai_platform_network_init+0x96>
 80057d8:	4a35      	ldr	r2, [pc, #212]	@ (80058b0 <ai_platform_network_init+0x2d4>)
 80057da:	2301      	movs	r3, #1
 80057dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80057e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1fb      	bne.n	80057e0 <ai_platform_network_init+0x204>
 80057e8:	492f      	ldr	r1, [pc, #188]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 80057ea:	4b30      	ldr	r3, [pc, #192]	@ (80058ac <ai_platform_network_init+0x2d0>)
 80057ec:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80057f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d09c      	beq.n	8005732 <ai_platform_network_init+0x156>
 80057f8:	e7fe      	b.n	80057f8 <ai_platform_network_init+0x21c>
 80057fa:	4a2d      	ldr	r2, [pc, #180]	@ (80058b0 <ai_platform_network_init+0x2d4>)
 80057fc:	2301      	movs	r3, #1
 80057fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005802:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1fb      	bne.n	8005802 <ai_platform_network_init+0x226>
 800580a:	4b27      	ldr	r3, [pc, #156]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 800580c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005810:	4b26      	ldr	r3, [pc, #152]	@ (80058ac <ai_platform_network_init+0x2d0>)
 8005812:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005816:	429a      	cmp	r2, r3
 8005818:	f43f af18 	beq.w	800564c <ai_platform_network_init+0x70>
 800581c:	e7fe      	b.n	800581c <ai_platform_network_init+0x240>
 800581e:	2800      	cmp	r0, #0
 8005820:	d153      	bne.n	80058ca <ai_platform_network_init+0x2ee>
 8005822:	4680      	mov	r8, r0
 8005824:	4684      	mov	ip, r0
 8005826:	2e00      	cmp	r6, #0
 8005828:	d063      	beq.n	80058f2 <ai_platform_network_init+0x316>
 800582a:	8be6      	ldrh	r6, [r4, #30]
 800582c:	2e00      	cmp	r6, #0
 800582e:	d168      	bne.n	8005902 <ai_platform_network_init+0x326>
 8005830:	2212      	movs	r2, #18
 8005832:	2116      	movs	r1, #22
 8005834:	f104 0010 	add.w	r0, r4, #16
 8005838:	f000 fc7c 	bl	8006134 <core_set_error>
 800583c:	e77c      	b.n	8005738 <ai_platform_network_init+0x15c>
 800583e:	4a19      	ldr	r2, [pc, #100]	@ (80058a4 <ai_platform_network_init+0x2c8>)
 8005840:	2301      	movs	r3, #1
 8005842:	6093      	str	r3, [r2, #8]
 8005844:	6893      	ldr	r3, [r2, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1fc      	bne.n	8005844 <ai_platform_network_init+0x268>
 800584a:	4b17      	ldr	r3, [pc, #92]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <ai_platform_network_init+0x2d0>)
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	f43f aefa 	beq.w	800564c <ai_platform_network_init+0x70>
 8005858:	e7fe      	b.n	8005858 <ai_platform_network_init+0x27c>
 800585a:	4a12      	ldr	r2, [pc, #72]	@ (80058a4 <ai_platform_network_init+0x2c8>)
 800585c:	2301      	movs	r3, #1
 800585e:	6093      	str	r3, [r2, #8]
 8005860:	6893      	ldr	r3, [r2, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1fc      	bne.n	8005860 <ai_platform_network_init+0x284>
 8005866:	4910      	ldr	r1, [pc, #64]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 8005868:	4b10      	ldr	r3, [pc, #64]	@ (80058ac <ai_platform_network_init+0x2d0>)
 800586a:	6011      	str	r1, [r2, #0]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	f43f af5f 	beq.w	8005732 <ai_platform_network_init+0x156>
 8005874:	e7fe      	b.n	8005874 <ai_platform_network_init+0x298>
 8005876:	4a0b      	ldr	r2, [pc, #44]	@ (80058a4 <ai_platform_network_init+0x2c8>)
 8005878:	2301      	movs	r3, #1
 800587a:	6093      	str	r3, [r2, #8]
 800587c:	6893      	ldr	r3, [r2, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1fc      	bne.n	800587c <ai_platform_network_init+0x2a0>
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <ai_platform_network_init+0x2cc>)
 8005884:	6013      	str	r3, [r2, #0]
 8005886:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <ai_platform_network_init+0x2d0>)
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	f43f aede 	beq.w	800564c <ai_platform_network_init+0x70>
 8005890:	e7fe      	b.n	8005890 <ai_platform_network_init+0x2b4>
 8005892:	bf00      	nop
 8005894:	a1c00100 	.word	0xa1c00100
 8005898:	e0042000 	.word	0xe0042000
 800589c:	5c001000 	.word	0x5c001000
 80058a0:	a1facade 	.word	0xa1facade
 80058a4:	40023000 	.word	0x40023000
 80058a8:	f407a5c2 	.word	0xf407a5c2
 80058ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80058b0:	58024000 	.word	0x58024000
 80058b4:	2213      	movs	r2, #19
 80058b6:	2116      	movs	r1, #22
 80058b8:	f104 0010 	add.w	r0, r4, #16
 80058bc:	f000 fc3a 	bl	8006134 <core_set_error>
 80058c0:	e73a      	b.n	8005738 <ai_platform_network_init+0x15c>
 80058c2:	4607      	mov	r7, r0
 80058c4:	4680      	mov	r8, r0
 80058c6:	4684      	mov	ip, r0
 80058c8:	e773      	b.n	80057b2 <ai_platform_network_init+0x1d6>
 80058ca:	f1b9 0f00 	cmp.w	r9, #0
 80058ce:	d002      	beq.n	80058d6 <ai_platform_network_init+0x2fa>
 80058d0:	f04f 0c01 	mov.w	ip, #1
 80058d4:	e7a7      	b.n	8005826 <ai_platform_network_init+0x24a>
 80058d6:	2110      	movs	r1, #16
 80058d8:	2213      	movs	r2, #19
 80058da:	2600      	movs	r6, #0
 80058dc:	1860      	adds	r0, r4, r1
 80058de:	f000 fc29 	bl	8006134 <core_set_error>
 80058e2:	e729      	b.n	8005738 <ai_platform_network_init+0x15c>
 80058e4:	2110      	movs	r1, #16
 80058e6:	2211      	movs	r2, #17
 80058e8:	462e      	mov	r6, r5
 80058ea:	1860      	adds	r0, r4, r1
 80058ec:	f000 fc22 	bl	8006134 <core_set_error>
 80058f0:	e722      	b.n	8005738 <ai_platform_network_init+0x15c>
 80058f2:	2110      	movs	r1, #16
 80058f4:	2212      	movs	r2, #18
 80058f6:	1860      	adds	r0, r4, r1
 80058f8:	f000 fc1c 	bl	8006134 <core_set_error>
 80058fc:	e71c      	b.n	8005738 <ai_platform_network_init+0x15c>
 80058fe:	4666      	mov	r6, ip
 8005900:	e6b7      	b.n	8005672 <ai_platform_network_init+0x96>
 8005902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005904:	6a26      	ldr	r6, [r4, #32]
 8005906:	2701      	movs	r7, #1
 8005908:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800590a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800590e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005912:	e74e      	b.n	80057b2 <ai_platform_network_init+0x1d6>

08005914 <ai_platform_network_post_init>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	2800      	cmp	r0, #0
 8005918:	d04e      	beq.n	80059b8 <ai_platform_network_post_init+0xa4>
 800591a:	4b8c      	ldr	r3, [pc, #560]	@ (8005b4c <ai_platform_network_post_init+0x238>)
 800591c:	4604      	mov	r4, r0
 800591e:	6802      	ldr	r2, [r0, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d149      	bne.n	80059b8 <ai_platform_network_post_init+0xa4>
 8005924:	f7fe ff8c 	bl	8004840 <_ai_platform_acquire_crc>
 8005928:	4b89      	ldr	r3, [pc, #548]	@ (8005b50 <ai_platform_network_post_init+0x23c>)
 800592a:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005934:	189a      	adds	r2, r3, r2
 8005936:	2a01      	cmp	r2, #1
 8005938:	f240 8095 	bls.w	8005a66 <ai_platform_network_post_init+0x152>
 800593c:	f240 4249 	movw	r2, #1097	@ 0x449
 8005940:	4293      	cmp	r3, r2
 8005942:	f000 8090 	beq.w	8005a66 <ai_platform_network_post_init+0x152>
 8005946:	4a83      	ldr	r2, [pc, #524]	@ (8005b54 <ai_platform_network_post_init+0x240>)
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800594e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005952:	f000 8096 	beq.w	8005a82 <ai_platform_network_post_init+0x16e>
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	f240 4183 	movw	r1, #1155	@ 0x483
 800595c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005960:	428b      	cmp	r3, r1
 8005962:	f000 80b8 	beq.w	8005ad6 <ai_platform_network_post_init+0x1c2>
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005970:	f000 80de 	beq.w	8005b30 <ai_platform_network_post_init+0x21c>
 8005974:	6813      	ldr	r3, [r2, #0]
 8005976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 80bd 	beq.w	8005afa <ai_platform_network_post_init+0x1e6>
 8005980:	f7fe ff60 	bl	8004844 <_ai_platform_release_crc>
 8005984:	68e3      	ldr	r3, [r4, #12]
 8005986:	f013 0502 	ands.w	r5, r3, #2
 800598a:	f000 808c 	beq.w	8005aa6 <ai_platform_network_post_init+0x192>
 800598e:	4620      	mov	r0, r4
 8005990:	f002 fbd4 	bl	800813c <ai_layers_post_init_all>
 8005994:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005996:	b16b      	cbz	r3, 80059b4 <ai_platform_network_post_init+0xa0>
 8005998:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800599a:	e007      	b.n	80059ac <ai_platform_network_post_init+0x98>
 800599c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 80059a0:	4798      	blx	r3
 80059a2:	692b      	ldr	r3, [r5, #16]
 80059a4:	b133      	cbz	r3, 80059b4 <ai_platform_network_post_init+0xa0>
 80059a6:	42ab      	cmp	r3, r5
 80059a8:	461d      	mov	r5, r3
 80059aa:	d003      	beq.n	80059b4 <ai_platform_network_post_init+0xa0>
 80059ac:	4629      	mov	r1, r5
 80059ae:	2000      	movs	r0, #0
 80059b0:	2d00      	cmp	r5, #0
 80059b2:	d1f3      	bne.n	800599c <ai_platform_network_post_init+0x88>
 80059b4:	2001      	movs	r0, #1
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	f7fe ff42 	bl	8004840 <_ai_platform_acquire_crc>
 80059bc:	4b64      	ldr	r3, [pc, #400]	@ (8005b50 <ai_platform_network_post_init+0x23c>)
 80059be:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059c8:	185a      	adds	r2, r3, r1
 80059ca:	2a01      	cmp	r2, #1
 80059cc:	d92a      	bls.n	8005a24 <ai_platform_network_post_init+0x110>
 80059ce:	f240 4249 	movw	r2, #1097	@ 0x449
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d026      	beq.n	8005a24 <ai_platform_network_post_init+0x110>
 80059d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005b54 <ai_platform_network_post_init+0x240>)
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059de:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80059e2:	d02c      	beq.n	8005a3e <ai_platform_network_post_init+0x12a>
 80059e4:	6813      	ldr	r3, [r2, #0]
 80059e6:	f240 4183 	movw	r1, #1155	@ 0x483
 80059ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ee:	428b      	cmp	r3, r1
 80059f0:	d060      	beq.n	8005ab4 <ai_platform_network_post_init+0x1a0>
 80059f2:	6813      	ldr	r3, [r2, #0]
 80059f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80059fc:	f000 808b 	beq.w	8005b16 <ai_platform_network_post_init+0x202>
 8005a00:	6813      	ldr	r3, [r2, #0]
 8005a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d129      	bne.n	8005a5e <ai_platform_network_post_init+0x14a>
 8005a0a:	4a53      	ldr	r2, [pc, #332]	@ (8005b58 <ai_platform_network_post_init+0x244>)
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	6093      	str	r3, [r2, #8]
 8005a10:	6893      	ldr	r3, [r2, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1fc      	bne.n	8005a10 <ai_platform_network_post_init+0xfc>
 8005a16:	4951      	ldr	r1, [pc, #324]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005a18:	4b51      	ldr	r3, [pc, #324]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005a1a:	6011      	str	r1, [r2, #0]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d01d      	beq.n	8005a5e <ai_platform_network_post_init+0x14a>
 8005a22:	e7fe      	b.n	8005a22 <ai_platform_network_post_init+0x10e>
 8005a24:	4a4c      	ldr	r2, [pc, #304]	@ (8005b58 <ai_platform_network_post_init+0x244>)
 8005a26:	2301      	movs	r3, #1
 8005a28:	6093      	str	r3, [r2, #8]
 8005a2a:	6893      	ldr	r3, [r2, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1fc      	bne.n	8005a2a <ai_platform_network_post_init+0x116>
 8005a30:	494a      	ldr	r1, [pc, #296]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005a32:	4b4b      	ldr	r3, [pc, #300]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005a34:	6011      	str	r1, [r2, #0]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d010      	beq.n	8005a5e <ai_platform_network_post_init+0x14a>
 8005a3c:	e7fe      	b.n	8005a3c <ai_platform_network_post_init+0x128>
 8005a3e:	4a49      	ldr	r2, [pc, #292]	@ (8005b64 <ai_platform_network_post_init+0x250>)
 8005a40:	2301      	movs	r3, #1
 8005a42:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005a46:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1fb      	bne.n	8005a46 <ai_platform_network_post_init+0x132>
 8005a4e:	4943      	ldr	r1, [pc, #268]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005a50:	4b43      	ldr	r3, [pc, #268]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005a52:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005a56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d110      	bne.n	8005a80 <ai_platform_network_post_init+0x16c>
 8005a5e:	f7fe fef1 	bl	8004844 <_ai_platform_release_crc>
 8005a62:	2000      	movs	r0, #0
 8005a64:	bd38      	pop	{r3, r4, r5, pc}
 8005a66:	4a3c      	ldr	r2, [pc, #240]	@ (8005b58 <ai_platform_network_post_init+0x244>)
 8005a68:	2301      	movs	r3, #1
 8005a6a:	6093      	str	r3, [r2, #8]
 8005a6c:	6893      	ldr	r3, [r2, #8]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1fc      	bne.n	8005a6c <ai_platform_network_post_init+0x158>
 8005a72:	493a      	ldr	r1, [pc, #232]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005a74:	4b3a      	ldr	r3, [pc, #232]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005a76:	6011      	str	r1, [r2, #0]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d080      	beq.n	8005980 <ai_platform_network_post_init+0x6c>
 8005a7e:	e7fe      	b.n	8005a7e <ai_platform_network_post_init+0x16a>
 8005a80:	e7fe      	b.n	8005a80 <ai_platform_network_post_init+0x16c>
 8005a82:	4a38      	ldr	r2, [pc, #224]	@ (8005b64 <ai_platform_network_post_init+0x250>)
 8005a84:	2301      	movs	r3, #1
 8005a86:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005a8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1fb      	bne.n	8005a8a <ai_platform_network_post_init+0x176>
 8005a92:	4932      	ldr	r1, [pc, #200]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005a94:	4b32      	ldr	r3, [pc, #200]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005a96:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005a9a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	f43f af6e 	beq.w	8005980 <ai_platform_network_post_init+0x6c>
 8005aa4:	e7fe      	b.n	8005aa4 <ai_platform_network_post_init+0x190>
 8005aa6:	2210      	movs	r2, #16
 8005aa8:	2111      	movs	r1, #17
 8005aaa:	18a0      	adds	r0, r4, r2
 8005aac:	f000 fb42 	bl	8006134 <core_set_error>
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b64 <ai_platform_network_post_init+0x250>)
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005abc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1fb      	bne.n	8005abc <ai_platform_network_post_init+0x1a8>
 8005ac4:	4925      	ldr	r1, [pc, #148]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005ac6:	4b26      	ldr	r3, [pc, #152]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005ac8:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005acc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d0c4      	beq.n	8005a5e <ai_platform_network_post_init+0x14a>
 8005ad4:	e7fe      	b.n	8005ad4 <ai_platform_network_post_init+0x1c0>
 8005ad6:	4a23      	ldr	r2, [pc, #140]	@ (8005b64 <ai_platform_network_post_init+0x250>)
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005ade:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1fb      	bne.n	8005ade <ai_platform_network_post_init+0x1ca>
 8005ae6:	491d      	ldr	r1, [pc, #116]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005aea:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8005aee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005af2:	429a      	cmp	r2, r3
 8005af4:	f43f af44 	beq.w	8005980 <ai_platform_network_post_init+0x6c>
 8005af8:	e7fe      	b.n	8005af8 <ai_platform_network_post_init+0x1e4>
 8005afa:	4a17      	ldr	r2, [pc, #92]	@ (8005b58 <ai_platform_network_post_init+0x244>)
 8005afc:	2301      	movs	r3, #1
 8005afe:	6093      	str	r3, [r2, #8]
 8005b00:	6893      	ldr	r3, [r2, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1fc      	bne.n	8005b00 <ai_platform_network_post_init+0x1ec>
 8005b06:	4915      	ldr	r1, [pc, #84]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005b08:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005b0a:	6011      	str	r1, [r2, #0]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	f43f af36 	beq.w	8005980 <ai_platform_network_post_init+0x6c>
 8005b14:	e7fe      	b.n	8005b14 <ai_platform_network_post_init+0x200>
 8005b16:	4a10      	ldr	r2, [pc, #64]	@ (8005b58 <ai_platform_network_post_init+0x244>)
 8005b18:	2301      	movs	r3, #1
 8005b1a:	6093      	str	r3, [r2, #8]
 8005b1c:	6893      	ldr	r3, [r2, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1fc      	bne.n	8005b1c <ai_platform_network_post_init+0x208>
 8005b22:	490e      	ldr	r1, [pc, #56]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005b24:	4b0e      	ldr	r3, [pc, #56]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005b26:	6011      	str	r1, [r2, #0]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d097      	beq.n	8005a5e <ai_platform_network_post_init+0x14a>
 8005b2e:	e7fe      	b.n	8005b2e <ai_platform_network_post_init+0x21a>
 8005b30:	4a09      	ldr	r2, [pc, #36]	@ (8005b58 <ai_platform_network_post_init+0x244>)
 8005b32:	2301      	movs	r3, #1
 8005b34:	6093      	str	r3, [r2, #8]
 8005b36:	6893      	ldr	r3, [r2, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1fc      	bne.n	8005b36 <ai_platform_network_post_init+0x222>
 8005b3c:	4907      	ldr	r1, [pc, #28]	@ (8005b5c <ai_platform_network_post_init+0x248>)
 8005b3e:	4b08      	ldr	r3, [pc, #32]	@ (8005b60 <ai_platform_network_post_init+0x24c>)
 8005b40:	6011      	str	r1, [r2, #0]
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	f43f af1b 	beq.w	8005980 <ai_platform_network_post_init+0x6c>
 8005b4a:	e7fe      	b.n	8005b4a <ai_platform_network_post_init+0x236>
 8005b4c:	a1c00100 	.word	0xa1c00100
 8005b50:	e0042000 	.word	0xe0042000
 8005b54:	5c001000 	.word	0x5c001000
 8005b58:	40023000 	.word	0x40023000
 8005b5c:	f407a5c2 	.word	0xf407a5c2
 8005b60:	b5e8b5cd 	.word	0xb5e8b5cd
 8005b64:	58024000 	.word	0x58024000

08005b68 <ai_platform_network_process>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	460e      	mov	r6, r1
 8005b70:	4605      	mov	r5, r0
 8005b72:	9201      	str	r2, [sp, #4]
 8005b74:	b120      	cbz	r0, 8005b80 <ai_platform_network_process+0x18>
 8005b76:	4b24      	ldr	r3, [pc, #144]	@ (8005c08 <ai_platform_network_process+0xa0>)
 8005b78:	6802      	ldr	r2, [r0, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	bf18      	it	ne
 8005b7e:	2500      	movne	r5, #0
 8005b80:	f7fe fe5e 	bl	8004840 <_ai_platform_acquire_crc>
 8005b84:	4b21      	ldr	r3, [pc, #132]	@ (8005c0c <ai_platform_network_process+0xa4>)
 8005b86:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b90:	185a      	adds	r2, r3, r1
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	d92b      	bls.n	8005bee <ai_platform_network_process+0x86>
 8005b96:	f240 4249 	movw	r2, #1097	@ 0x449
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d027      	beq.n	8005bee <ai_platform_network_process+0x86>
 8005b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c10 <ai_platform_network_process+0xa8>)
 8005ba0:	6813      	ldr	r3, [r2, #0]
 8005ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8005baa:	d039      	beq.n	8005c20 <ai_platform_network_process+0xb8>
 8005bac:	6813      	ldr	r3, [r2, #0]
 8005bae:	f240 4183 	movw	r1, #1155	@ 0x483
 8005bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb6:	428b      	cmp	r3, r1
 8005bb8:	f000 819c 	beq.w	8005ef4 <ai_platform_network_process+0x38c>
 8005bbc:	6813      	ldr	r3, [r2, #0]
 8005bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8005bc6:	f000 8179 	beq.w	8005ebc <ai_platform_network_process+0x354>
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d136      	bne.n	8005c42 <ai_platform_network_process+0xda>
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c14 <ai_platform_network_process+0xac>)
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	6093      	str	r3, [r2, #8]
 8005bda:	6893      	ldr	r3, [r2, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1fc      	bne.n	8005bda <ai_platform_network_process+0x72>
 8005be0:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <ai_platform_network_process+0xb0>)
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	4b0d      	ldr	r3, [pc, #52]	@ (8005c1c <ai_platform_network_process+0xb4>)
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d02a      	beq.n	8005c42 <ai_platform_network_process+0xda>
 8005bec:	e7fe      	b.n	8005bec <ai_platform_network_process+0x84>
 8005bee:	4a09      	ldr	r2, [pc, #36]	@ (8005c14 <ai_platform_network_process+0xac>)
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	6093      	str	r3, [r2, #8]
 8005bf4:	6893      	ldr	r3, [r2, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1fc      	bne.n	8005bf4 <ai_platform_network_process+0x8c>
 8005bfa:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <ai_platform_network_process+0xb0>)
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <ai_platform_network_process+0xb4>)
 8005c00:	6812      	ldr	r2, [r2, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d01d      	beq.n	8005c42 <ai_platform_network_process+0xda>
 8005c06:	e7fe      	b.n	8005c06 <ai_platform_network_process+0x9e>
 8005c08:	a1c00100 	.word	0xa1c00100
 8005c0c:	e0042000 	.word	0xe0042000
 8005c10:	5c001000 	.word	0x5c001000
 8005c14:	40023000 	.word	0x40023000
 8005c18:	f407a5c2 	.word	0xf407a5c2
 8005c1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c20:	4ab0      	ldr	r2, [pc, #704]	@ (8005ee4 <ai_platform_network_process+0x37c>)
 8005c22:	2301      	movs	r3, #1
 8005c24:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005c28:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1fb      	bne.n	8005c28 <ai_platform_network_process+0xc0>
 8005c30:	4bad      	ldr	r3, [pc, #692]	@ (8005ee8 <ai_platform_network_process+0x380>)
 8005c32:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005c36:	4bad      	ldr	r3, [pc, #692]	@ (8005eec <ai_platform_network_process+0x384>)
 8005c38:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	f040 812b 	bne.w	8005e98 <ai_platform_network_process+0x330>
 8005c42:	f7fe fdff 	bl	8004844 <_ai_platform_release_crc>
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	f000 8172 	beq.w	8005f30 <ai_platform_network_process+0x3c8>
 8005c4c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8123 	beq.w	8005e9a <ai_platform_network_process+0x332>
 8005c54:	68eb      	ldr	r3, [r5, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	616a      	str	r2, [r5, #20]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	f040 811f 	bne.w	8005ea6 <ai_platform_network_process+0x33e>
 8005c68:	2e00      	cmp	r6, #0
 8005c6a:	f000 8156 	beq.w	8005f1a <ai_platform_network_process+0x3b2>
 8005c6e:	fab8 f788 	clz	r7, r8
 8005c72:	097f      	lsrs	r7, r7, #5
 8005c74:	f1b8 0f00 	cmp.w	r8, #0
 8005c78:	f000 814f 	beq.w	8005f1a <ai_platform_network_process+0x3b2>
 8005c7c:	f8b8 3000 	ldrh.w	r3, [r8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 814a 	beq.w	8005f1a <ai_platform_network_process+0x3b2>
 8005c86:	69b3      	ldr	r3, [r6, #24]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8005c8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d072      	beq.n	8005d7c <ai_platform_network_process+0x214>
 8005c96:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d06e      	beq.n	8005d7c <ai_platform_network_process+0x214>
 8005c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ca2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005ca6:	f8d3 a000 	ldr.w	sl, [r3]
 8005caa:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8005cae:	f000 8133 	beq.w	8005f18 <ai_platform_network_process+0x3b0>
 8005cb2:	69a3      	ldr	r3, [r4, #24]
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	4630      	mov	r0, r6
 8005cb8:	685d      	ldr	r5, [r3, #4]
 8005cba:	f7fe fd73 	bl	80047a4 <ai_buffer_get_size>
 8005cbe:	4285      	cmp	r5, r0
 8005cc0:	f0c0 8138 	bcc.w	8005f34 <ai_platform_network_process+0x3cc>
 8005cc4:	68e0      	ldr	r0, [r4, #12]
 8005cc6:	69b1      	ldr	r1, [r6, #24]
 8005cc8:	68c2      	ldr	r2, [r0, #12]
 8005cca:	68cb      	ldr	r3, [r1, #12]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	f040 8131 	bne.w	8005f34 <ai_platform_network_process+0x3cc>
 8005cd2:	6882      	ldr	r2, [r0, #8]
 8005cd4:	688b      	ldr	r3, [r1, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	f040 812c 	bne.w	8005f34 <ai_platform_network_process+0x3cc>
 8005cdc:	6842      	ldr	r2, [r0, #4]
 8005cde:	684b      	ldr	r3, [r1, #4]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	f040 8127 	bne.w	8005f34 <ai_platform_network_process+0x3cc>
 8005ce6:	69a3      	ldr	r3, [r4, #24]
 8005ce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cec:	f002 fc5a 	bl	80085a4 <ai_array_get_data_byte_size>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f002 fbac 	bl	8008450 <get_tensor_byte_size>
 8005cf8:	4285      	cmp	r5, r0
 8005cfa:	f0c0 811b 	bcc.w	8005f34 <ai_platform_network_process+0x3cc>
 8005cfe:	69a3      	ldr	r3, [r4, #24]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	f002 fbbb 	bl	800847c <ai_array_to_buffer_fmt>
 8005d06:	6833      	ldr	r3, [r6, #0]
 8005d08:	4058      	eors	r0, r3
 8005d0a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8005d0e:	f040 81ca 	bne.w	80060a6 <ai_platform_network_process+0x53e>
 8005d12:	6873      	ldr	r3, [r6, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 81bd 	beq.w	8006094 <ai_platform_network_process+0x52c>
 8005d1a:	69b3      	ldr	r3, [r6, #24]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 81ca 	beq.w	80060b8 <ai_platform_network_process+0x550>
 8005d24:	9a02      	ldr	r2, [sp, #8]
 8005d26:	4620      	mov	r0, r4
 8005d28:	3701      	adds	r7, #1
 8005d2a:	361c      	adds	r6, #28
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	bf38      	it	cc
 8005d30:	461a      	movcc	r2, r3
 8005d32:	9202      	str	r2, [sp, #8]
 8005d34:	f002 fb8c 	bl	8008450 <get_tensor_byte_size>
 8005d38:	f8c9 0008 	str.w	r0, [r9, #8]
 8005d3c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	fb00 f303 	mul.w	r3, r0, r3
 8005d46:	f8c9 300c 	str.w	r3, [r9, #12]
 8005d4a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8005d4e:	440b      	add	r3, r1
 8005d50:	f8c9 1004 	str.w	r1, [r9, #4]
 8005d54:	f84a 300b 	str.w	r3, [sl, fp]
 8005d58:	69a0      	ldr	r0, [r4, #24]
 8005d5a:	6803      	ldr	r3, [r0, #0]
 8005d5c:	009a      	lsls	r2, r3, #2
 8005d5e:	f100 80bb 	bmi.w	8005ed8 <ai_platform_network_process+0x370>
 8005d62:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	4419      	add	r1, r3
 8005d6a:	6081      	str	r1, [r0, #8]
 8005d6c:	69a3      	ldr	r3, [r4, #24]
 8005d6e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	f8b8 3000 	ldrh.w	r3, [r8]
 8005d78:	42bb      	cmp	r3, r7
 8005d7a:	d888      	bhi.n	8005c8e <ai_platform_network_process+0x126>
 8005d7c:	9d03      	ldr	r5, [sp, #12]
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 81a1 	beq.w	80060ca <ai_platform_network_process+0x562>
 8005d88:	2a01      	cmp	r2, #1
 8005d8a:	f240 817b 	bls.w	8006084 <ai_platform_network_process+0x51c>
 8005d8e:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8005d92:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8174 	beq.w	8006084 <ai_platform_network_process+0x51c>
 8005d9c:	9e01      	ldr	r6, [sp, #4]
 8005d9e:	2700      	movs	r7, #0
 8005da0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80d3 	beq.w	8005f50 <ai_platform_network_process+0x3e8>
 8005daa:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005dae:	2c00      	cmp	r4, #0
 8005db0:	f000 80ce 	beq.w	8005f50 <ai_platform_network_process+0x3e8>
 8005db4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005db8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005dbc:	f8d3 8000 	ldr.w	r8, [r3]
 8005dc0:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8005dc4:	f000 819f 	beq.w	8006106 <ai_platform_network_process+0x59e>
 8005dc8:	69a3      	ldr	r3, [r4, #24]
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4630      	mov	r0, r6
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	f7fe fce7 	bl	80047a4 <ai_buffer_get_size>
 8005dd6:	9b01      	ldr	r3, [sp, #4]
 8005dd8:	4283      	cmp	r3, r0
 8005dda:	f0c0 8153 	bcc.w	8006084 <ai_platform_network_process+0x51c>
 8005dde:	68e0      	ldr	r0, [r4, #12]
 8005de0:	69b1      	ldr	r1, [r6, #24]
 8005de2:	68c2      	ldr	r2, [r0, #12]
 8005de4:	68cb      	ldr	r3, [r1, #12]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	f040 814c 	bne.w	8006084 <ai_platform_network_process+0x51c>
 8005dec:	6882      	ldr	r2, [r0, #8]
 8005dee:	688b      	ldr	r3, [r1, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	f040 8147 	bne.w	8006084 <ai_platform_network_process+0x51c>
 8005df6:	6842      	ldr	r2, [r0, #4]
 8005df8:	684b      	ldr	r3, [r1, #4]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	f040 8142 	bne.w	8006084 <ai_platform_network_process+0x51c>
 8005e00:	69a3      	ldr	r3, [r4, #24]
 8005e02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e06:	f002 fbcd 	bl	80085a4 <ai_array_get_data_byte_size>
 8005e0a:	9001      	str	r0, [sp, #4]
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f002 fb1f 	bl	8008450 <get_tensor_byte_size>
 8005e12:	9b01      	ldr	r3, [sp, #4]
 8005e14:	4283      	cmp	r3, r0
 8005e16:	f0c0 8135 	bcc.w	8006084 <ai_platform_network_process+0x51c>
 8005e1a:	69a3      	ldr	r3, [r4, #24]
 8005e1c:	6818      	ldr	r0, [r3, #0]
 8005e1e:	f002 fb2d 	bl	800847c <ai_array_to_buffer_fmt>
 8005e22:	6833      	ldr	r3, [r6, #0]
 8005e24:	4058      	eors	r0, r3
 8005e26:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8005e2a:	f040 815c 	bne.w	80060e6 <ai_platform_network_process+0x57e>
 8005e2e:	6873      	ldr	r3, [r6, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8150 	beq.w	80060d6 <ai_platform_network_process+0x56e>
 8005e36:	69b3      	ldr	r3, [r6, #24]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 815b 	beq.w	80060f6 <ai_platform_network_process+0x58e>
 8005e40:	9a02      	ldr	r2, [sp, #8]
 8005e42:	4620      	mov	r0, r4
 8005e44:	3701      	adds	r7, #1
 8005e46:	361c      	adds	r6, #28
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	bf38      	it	cc
 8005e4c:	461a      	movcc	r2, r3
 8005e4e:	9202      	str	r2, [sp, #8]
 8005e50:	f002 fafe 	bl	8008450 <get_tensor_byte_size>
 8005e54:	f8ca 0008 	str.w	r0, [sl, #8]
 8005e58:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	fb00 f303 	mul.w	r3, r0, r3
 8005e62:	f8ca 300c 	str.w	r3, [sl, #12]
 8005e66:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8005e6a:	440b      	add	r3, r1
 8005e6c:	f8ca 1004 	str.w	r1, [sl, #4]
 8005e70:	f848 300b 	str.w	r3, [r8, fp]
 8005e74:	69a0      	ldr	r0, [r4, #24]
 8005e76:	6803      	ldr	r3, [r0, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	d464      	bmi.n	8005f46 <ai_platform_network_process+0x3de>
 8005e7c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	4419      	add	r1, r3
 8005e84:	6081      	str	r1, [r0, #8]
 8005e86:	69a3      	ldr	r3, [r4, #24]
 8005e88:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005e92:	429f      	cmp	r7, r3
 8005e94:	d384      	bcc.n	8005da0 <ai_platform_network_process+0x238>
 8005e96:	e05b      	b.n	8005f50 <ai_platform_network_process+0x3e8>
 8005e98:	e7fe      	b.n	8005e98 <ai_platform_network_process+0x330>
 8005e9a:	68ea      	ldr	r2, [r5, #12]
 8005e9c:	616b      	str	r3, [r5, #20]
 8005e9e:	f002 0203 	and.w	r2, r2, #3
 8005ea2:	2a03      	cmp	r2, #3
 8005ea4:	d039      	beq.n	8005f1a <ai_platform_network_process+0x3b2>
 8005ea6:	2230      	movs	r2, #48	@ 0x30
 8005ea8:	2111      	movs	r1, #17
 8005eaa:	f105 0010 	add.w	r0, r5, #16
 8005eae:	2400      	movs	r4, #0
 8005eb0:	f000 f940 	bl	8006134 <core_set_error>
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	b005      	add	sp, #20
 8005eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef0 <ai_platform_network_process+0x388>)
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	6093      	str	r3, [r2, #8]
 8005ec2:	6893      	ldr	r3, [r2, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1fc      	bne.n	8005ec2 <ai_platform_network_process+0x35a>
 8005ec8:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <ai_platform_network_process+0x380>)
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <ai_platform_network_process+0x384>)
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	f43f aeb6 	beq.w	8005c42 <ai_platform_network_process+0xda>
 8005ed6:	e7fe      	b.n	8005ed6 <ai_platform_network_process+0x36e>
 8005ed8:	f8b8 3000 	ldrh.w	r3, [r8]
 8005edc:	429f      	cmp	r7, r3
 8005ede:	f4ff aed6 	bcc.w	8005c8e <ai_platform_network_process+0x126>
 8005ee2:	e74b      	b.n	8005d7c <ai_platform_network_process+0x214>
 8005ee4:	58024000 	.word	0x58024000
 8005ee8:	f407a5c2 	.word	0xf407a5c2
 8005eec:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ef0:	40023000 	.word	0x40023000
 8005ef4:	4a88      	ldr	r2, [pc, #544]	@ (8006118 <ai_platform_network_process+0x5b0>)
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8005efc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1fb      	bne.n	8005efc <ai_platform_network_process+0x394>
 8005f04:	4b85      	ldr	r3, [pc, #532]	@ (800611c <ai_platform_network_process+0x5b4>)
 8005f06:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8005f0a:	4b85      	ldr	r3, [pc, #532]	@ (8006120 <ai_platform_network_process+0x5b8>)
 8005f0c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8005f10:	429a      	cmp	r2, r3
 8005f12:	f43f ae96 	beq.w	8005c42 <ai_platform_network_process+0xda>
 8005f16:	e7fe      	b.n	8005f16 <ai_platform_network_process+0x3ae>
 8005f18:	9d03      	ldr	r5, [sp, #12]
 8005f1a:	2400      	movs	r4, #0
 8005f1c:	2217      	movs	r2, #23
 8005f1e:	2112      	movs	r1, #18
 8005f20:	f105 0010 	add.w	r0, r5, #16
 8005f24:	f000 f906 	bl	8006134 <core_set_error>
 8005f28:	4620      	mov	r0, r4
 8005f2a:	b005      	add	sp, #20
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	462c      	mov	r4, r5
 8005f32:	e7bf      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 8005f34:	9d03      	ldr	r5, [sp, #12]
 8005f36:	2218      	movs	r2, #24
 8005f38:	2112      	movs	r1, #18
 8005f3a:	2400      	movs	r4, #0
 8005f3c:	f105 0010 	add.w	r0, r5, #16
 8005f40:	f000 f8f8 	bl	8006134 <core_set_error>
 8005f44:	e7b6      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 8005f46:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005f4a:	429f      	cmp	r7, r3
 8005f4c:	f4ff af28 	bcc.w	8005da0 <ai_platform_network_process+0x238>
 8005f50:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8005f54:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8005f56:	82ab      	strh	r3, [r5, #20]
 8005f58:	2a00      	cmp	r2, #0
 8005f5a:	f040 808d 	bne.w	8006078 <ai_platform_network_process+0x510>
 8005f5e:	4616      	mov	r6, r2
 8005f60:	4617      	mov	r7, r2
 8005f62:	8aec      	ldrh	r4, [r5, #22]
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d2a5      	bcs.n	8005eb4 <ai_platform_network_process+0x34c>
 8005f68:	46ab      	mov	fp, r5
 8005f6a:	2e00      	cmp	r6, #0
 8005f6c:	d030      	beq.n	8005fd0 <ai_platform_network_process+0x468>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	e014      	b.n	8005f9e <ai_platform_network_process+0x436>
 8005f74:	6882      	ldr	r2, [r0, #8]
 8005f76:	68c5      	ldr	r5, [r0, #12]
 8005f78:	6863      	ldr	r3, [r4, #4]
 8005f7a:	1b52      	subs	r2, r2, r5
 8005f7c:	4413      	add	r3, r2
 8005f7e:	6083      	str	r3, [r0, #8]
 8005f80:	698b      	ldr	r3, [r1, #24]
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	f859 200a 	ldr.w	r2, [r9, sl]
 8005f8a:	f108 0801 	add.w	r8, r8, #1
 8005f8e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005f92:	440b      	add	r3, r1
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d301      	bcc.n	8005f9c <ai_platform_network_process+0x434>
 8005f98:	68e3      	ldr	r3, [r4, #12]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	6063      	str	r3, [r4, #4]
 8005f9e:	8833      	ldrh	r3, [r6, #0]
 8005fa0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005fa4:	4543      	cmp	r3, r8
 8005fa6:	d913      	bls.n	8005fd0 <ai_platform_network_process+0x468>
 8005fa8:	6873      	ldr	r3, [r6, #4]
 8005faa:	b18b      	cbz	r3, 8005fd0 <ai_platform_network_process+0x468>
 8005fac:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005fb0:	b171      	cbz	r1, 8005fd0 <ai_platform_network_process+0x468>
 8005fb2:	6988      	ldr	r0, [r1, #24]
 8005fb4:	68b2      	ldr	r2, [r6, #8]
 8005fb6:	6803      	ldr	r3, [r0, #0]
 8005fb8:	f8d2 9000 	ldr.w	r9, [r2]
 8005fbc:	009d      	lsls	r5, r3, #2
 8005fbe:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005fc2:	d5d7      	bpl.n	8005f74 <ai_platform_network_process+0x40c>
 8005fc4:	6880      	ldr	r0, [r0, #8]
 8005fc6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8005fca:	f003 faa2 	bl	8009512 <memcpy>
 8005fce:	e7da      	b.n	8005f86 <ai_platform_network_process+0x41e>
 8005fd0:	4658      	mov	r0, fp
 8005fd2:	f002 f8c7 	bl	8008164 <ai_layers_forward_all>
 8005fd6:	2f00      	cmp	r7, #0
 8005fd8:	d03f      	beq.n	800605a <ai_platform_network_process+0x4f2>
 8005fda:	2400      	movs	r4, #0
 8005fdc:	e016      	b.n	800600c <ai_platform_network_process+0x4a4>
 8005fde:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005fe2:	f859 100a 	ldr.w	r1, [r9, sl]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	d302      	bcc.n	8005ff2 <ai_platform_network_process+0x48a>
 8005fec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ff0:	1acb      	subs	r3, r1, r3
 8005ff2:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ff6:	6981      	ldr	r1, [r0, #24]
 8005ff8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005ffc:	1b52      	subs	r2, r2, r5
 8005ffe:	4413      	add	r3, r2
 8006000:	608b      	str	r3, [r1, #8]
 8006002:	6983      	ldr	r3, [r0, #24]
 8006004:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	3401      	adds	r4, #1
 800600c:	883b      	ldrh	r3, [r7, #0]
 800600e:	42a3      	cmp	r3, r4
 8006010:	d923      	bls.n	800605a <ai_platform_network_process+0x4f2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	b30b      	cbz	r3, 800605a <ai_platform_network_process+0x4f2>
 8006016:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800601a:	b1f0      	cbz	r0, 800605a <ai_platform_network_process+0x4f2>
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8006022:	6983      	ldr	r3, [r0, #24]
 8006024:	f8d2 9000 	ldr.w	r9, [r2]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800602e:	0092      	lsls	r2, r2, #2
 8006030:	d5d5      	bpl.n	8005fde <ai_platform_network_process+0x476>
 8006032:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8006036:	6899      	ldr	r1, [r3, #8]
 8006038:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800603c:	f003 fa69 	bl	8009512 <memcpy>
 8006040:	f859 200a 	ldr.w	r2, [r9, sl]
 8006044:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006048:	440b      	add	r3, r1
 800604a:	4293      	cmp	r3, r2
 800604c:	d302      	bcc.n	8006054 <ai_platform_network_process+0x4ec>
 800604e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f8c8 3004 	str.w	r3, [r8, #4]
 8006058:	e7d7      	b.n	800600a <ai_platform_network_process+0x4a2>
 800605a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800605e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006062:	3401      	adds	r4, #1
 8006064:	b2a4      	uxth	r4, r4
 8006066:	42a3      	cmp	r3, r4
 8006068:	f8ab 4016 	strh.w	r4, [fp, #22]
 800606c:	f63f af7d 	bhi.w	8005f6a <ai_platform_network_process+0x402>
 8006070:	4620      	mov	r0, r4
 8006072:	b005      	add	sp, #20
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006078:	2a01      	cmp	r2, #1
 800607a:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 800607c:	d029      	beq.n	80060d2 <ai_platform_network_process+0x56a>
 800607e:	f106 070c 	add.w	r7, r6, #12
 8006082:	e76e      	b.n	8005f62 <ai_platform_network_process+0x3fa>
 8006084:	2218      	movs	r2, #24
 8006086:	2113      	movs	r1, #19
 8006088:	f105 0010 	add.w	r0, r5, #16
 800608c:	2400      	movs	r4, #0
 800608e:	f000 f851 	bl	8006134 <core_set_error>
 8006092:	e70f      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 8006094:	9d03      	ldr	r5, [sp, #12]
 8006096:	4604      	mov	r4, r0
 8006098:	2217      	movs	r2, #23
 800609a:	2112      	movs	r1, #18
 800609c:	f105 0010 	add.w	r0, r5, #16
 80060a0:	f000 f848 	bl	8006134 <core_set_error>
 80060a4:	e706      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 80060a6:	9d03      	ldr	r5, [sp, #12]
 80060a8:	2219      	movs	r2, #25
 80060aa:	2112      	movs	r1, #18
 80060ac:	2400      	movs	r4, #0
 80060ae:	f105 0010 	add.w	r0, r5, #16
 80060b2:	f000 f83f 	bl	8006134 <core_set_error>
 80060b6:	e6fd      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 80060b8:	9d03      	ldr	r5, [sp, #12]
 80060ba:	4604      	mov	r4, r0
 80060bc:	2221      	movs	r2, #33	@ 0x21
 80060be:	2112      	movs	r1, #18
 80060c0:	f105 0010 	add.w	r0, r5, #16
 80060c4:	f000 f836 	bl	8006134 <core_set_error>
 80060c8:	e6f4      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 80060ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80060ce:	82ab      	strh	r3, [r5, #20]
 80060d0:	e742      	b.n	8005f58 <ai_platform_network_process+0x3f0>
 80060d2:	2700      	movs	r7, #0
 80060d4:	e745      	b.n	8005f62 <ai_platform_network_process+0x3fa>
 80060d6:	4604      	mov	r4, r0
 80060d8:	2217      	movs	r2, #23
 80060da:	2113      	movs	r1, #19
 80060dc:	f105 0010 	add.w	r0, r5, #16
 80060e0:	f000 f828 	bl	8006134 <core_set_error>
 80060e4:	e6e6      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 80060e6:	2219      	movs	r2, #25
 80060e8:	2113      	movs	r1, #19
 80060ea:	f105 0010 	add.w	r0, r5, #16
 80060ee:	2400      	movs	r4, #0
 80060f0:	f000 f820 	bl	8006134 <core_set_error>
 80060f4:	e6de      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 80060f6:	4604      	mov	r4, r0
 80060f8:	2221      	movs	r2, #33	@ 0x21
 80060fa:	2113      	movs	r1, #19
 80060fc:	f105 0010 	add.w	r0, r5, #16
 8006100:	f000 f818 	bl	8006134 <core_set_error>
 8006104:	e6d6      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 8006106:	2217      	movs	r2, #23
 8006108:	2113      	movs	r1, #19
 800610a:	f105 0010 	add.w	r0, r5, #16
 800610e:	4654      	mov	r4, sl
 8006110:	f000 f810 	bl	8006134 <core_set_error>
 8006114:	e6ce      	b.n	8005eb4 <ai_platform_network_process+0x34c>
 8006116:	bf00      	nop
 8006118:	58024000 	.word	0x58024000
 800611c:	f407a5c2 	.word	0xf407a5c2
 8006120:	b5e8b5cd 	.word	0xb5e8b5cd

08006124 <core_init>:
 8006124:	2001      	movs	r0, #1
 8006126:	4770      	bx	lr

08006128 <core_get_error>:
 8006128:	4603      	mov	r3, r0
 800612a:	2200      	movs	r2, #0
 800612c:	6800      	ldr	r0, [r0, #0]
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop

08006134 <core_set_error>:
 8006134:	4603      	mov	r3, r0
 8006136:	7800      	ldrb	r0, [r0, #0]
 8006138:	b108      	cbz	r0, 800613e <core_set_error+0xa>
 800613a:	2000      	movs	r0, #0
 800613c:	4770      	bx	lr
 800613e:	7019      	strb	r1, [r3, #0]
 8006140:	2001      	movs	r0, #1
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	f362 211f 	bfi	r1, r2, #8, #24
 8006148:	6019      	str	r1, [r3, #0]
 800614a:	4770      	bx	lr

0800614c <func_dummy>:
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop

08006150 <ai_conv2d_stripe_f32.constprop.0>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	ed2d 8b0e 	vpush	{d8-d14}
 8006158:	b09d      	sub	sp, #116	@ 0x74
 800615a:	af00      	add	r7, sp, #0
 800615c:	f8d7 90ec 	ldr.w	r9, [r7, #236]	@ 0xec
 8006160:	66f8      	str	r0, [r7, #108]	@ 0x6c
 8006162:	f1b9 0f01 	cmp.w	r9, #1
 8006166:	f8d7 60d0 	ldr.w	r6, [r7, #208]	@ 0xd0
 800616a:	f8d7 50e4 	ldr.w	r5, [r7, #228]	@ 0xe4
 800616e:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	@ 0xfc
 8006172:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	@ 0x104
 8006176:	6579      	str	r1, [r7, #84]	@ 0x54
 8006178:	e9c7 3219 	strd	r3, r2, [r7, #100]	@ 0x64
 800617c:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	@ 0xe8
 8006180:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	@ 0x108
 8006184:	663b      	str	r3, [r7, #96]	@ 0x60
 8006186:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	@ 0xf0
 800618a:	f000 812f 	beq.w	80063ec <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800618e:	45b1      	cmp	r9, r6
 8006190:	f000 8278 	beq.w	8006684 <ai_conv2d_stripe_f32.constprop.0+0x534>
 8006194:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8006198:	2900      	cmp	r1, #0
 800619a:	f000 8114 	beq.w	80063c6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800619e:	eba0 0803 	sub.w	r8, r0, r3
 80061a2:	1898      	adds	r0, r3, r2
 80061a4:	eddf 6a90 	vldr	s13, [pc, #576]	@ 80063e8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 80061a8:	3801      	subs	r0, #1
 80061aa:	fb93 f1f2 	sdiv	r1, r3, r2
 80061ae:	fb90 f0f2 	sdiv	r0, r0, r2
 80061b2:	fb02 3111 	mls	r1, r2, r1, r3
 80061b6:	eba2 0a01 	sub.w	sl, r2, r1
 80061ba:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80061be:	fb01 f100 	mul.w	r1, r1, r0
 80061c2:	fb9a f0f2 	sdiv	r0, sl, r2
 80061c6:	fb02 a010 	mls	r0, r2, r0, sl
 80061ca:	62b9      	str	r1, [r7, #40]	@ 0x28
 80061cc:	4403      	add	r3, r0
 80061ce:	eba8 0100 	sub.w	r1, r8, r0
 80061d2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80061d6:	4463      	add	r3, ip
 80061d8:	4411      	add	r1, r2
 80061da:	fb00 f303 	mul.w	r3, r0, r3
 80061de:	3901      	subs	r1, #1
 80061e0:	fbb6 f4f9 	udiv	r4, r6, r9
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 80061ea:	fb00 f302 	mul.w	r3, r0, r2
 80061ee:	f8c7 a014 	str.w	sl, [r7, #20]
 80061f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f4:	fb0e f306 	mul.w	r3, lr, r6
 80061f8:	1b1b      	subs	r3, r3, r4
 80061fa:	fb91 fbf2 	sdiv	fp, r1, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	eba5 020b 	sub.w	r2, r5, fp
 8006204:	00b1      	lsls	r1, r6, #2
 8006206:	46dc      	mov	ip, fp
 8006208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620e:	61f9      	str	r1, [r7, #28]
 8006210:	fb04 f303 	mul.w	r3, r4, r3
 8006214:	fb02 f303 	mul.w	r3, r2, r3
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
 800621c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006220:	fbb3 f3f9 	udiv	r3, r3, r9
 8006224:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	633b      	str	r3, [r7, #48]	@ 0x30
 800622e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006232:	f1c3 0800 	rsb	r8, r3, #0
 8006236:	ebae 0303 	sub.w	r3, lr, r3
 800623a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800623c:	2300      	movs	r3, #0
 800623e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006240:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006244:	2b00      	cmp	r3, #0
 8006246:	f2c0 80c4 	blt.w	80063d2 <ai_conv2d_stripe_f32.constprop.0+0x282>
 800624a:	2000      	movs	r0, #0
 800624c:	4673      	mov	r3, lr
 800624e:	4672      	mov	r2, lr
 8006250:	4601      	mov	r1, r0
 8006252:	3b01      	subs	r3, #1
 8006254:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8006256:	f8d7 5100 	ldr.w	r5, [r7, #256]	@ 0x100
 800625a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800625e:	fb93 f3fe 	sdiv	r3, r3, lr
 8006262:	4423      	add	r3, r4
 8006264:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 8006266:	fb0a 4303 	mla	r3, sl, r3, r4
 800626a:	fb92 f4fe 	sdiv	r4, r2, lr
 800626e:	fb0e 2214 	mls	r2, lr, r4, r2
 8006272:	f8d7 40d8 	ldr.w	r4, [r7, #216]	@ 0xd8
 8006276:	4444      	add	r4, r8
 8006278:	42ac      	cmp	r4, r5
 800627a:	bf94      	ite	ls
 800627c:	ebc1 0104 	rsbls	r1, r1, r4
 8006280:	ebc1 0105 	rsbhi	r1, r1, r5
 8006284:	6a3c      	ldr	r4, [r7, #32]
 8006286:	1a89      	subs	r1, r1, r2
 8006288:	4471      	add	r1, lr
 800628a:	3901      	subs	r1, #1
 800628c:	fb91 f6fe 	sdiv	r6, r1, lr
 8006290:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8006294:	4421      	add	r1, r4
 8006296:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 8006298:	4401      	add	r1, r0
 800629a:	69f8      	ldr	r0, [r7, #28]
 800629c:	4411      	add	r1, r2
 800629e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80062a0:	fb00 2201 	mla	r2, r0, r1, r2
 80062a4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80062a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80062a8:	460a      	mov	r2, r1
 80062aa:	2900      	cmp	r1, #0
 80062ac:	bf08      	it	eq
 80062ae:	4622      	moveq	r2, r4
 80062b0:	42a2      	cmp	r2, r4
 80062b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80062b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062b6:	fe06 7a87 	vseleq.f32	s14, s13, s14
 80062ba:	fb0e 2116 	mls	r1, lr, r6, r2
 80062be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062c2:	1b92      	subs	r2, r2, r6
 80062c4:	f1b9 0f00 	cmp.w	r9, #0
 80062c8:	d066      	beq.n	8006398 <ai_conv2d_stripe_f32.constprop.0+0x248>
 80062ca:	fb0a f202 	mul.w	r2, sl, r2
 80062ce:	fb00 f101 	mul.w	r1, r0, r1
 80062d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80062d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80062d8:	6479      	str	r1, [r7, #68]	@ 0x44
 80062da:	4591      	cmp	r9, r2
 80062dc:	d85c      	bhi.n	8006398 <ai_conv2d_stripe_f32.constprop.0+0x248>
 80062de:	2500      	movs	r5, #0
 80062e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062e2:	46ab      	mov	fp, r5
 80062e4:	3a01      	subs	r2, #1
 80062e6:	e9c7 e803 	strd	lr, r8, [r7, #12]
 80062ea:	61ba      	str	r2, [r7, #24]
 80062ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062ee:	f04f 0800 	mov.w	r8, #0
 80062f2:	f8c7 b008 	str.w	fp, [r7, #8]
 80062f6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80062fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80062fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062fe:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006302:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006304:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006306:	f1bc 0f00 	cmp.w	ip, #0
 800630a:	ecf2 7a01 	vldmia	r2!, {s15}
 800630e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006312:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006314:	dd21      	ble.n	800635a <ai_conv2d_stripe_f32.constprop.0+0x20a>
 8006316:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006318:	2100      	movs	r1, #0
 800631a:	2e00      	cmp	r6, #0
 800631c:	dd16      	ble.n	800634c <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800631e:	2000      	movs	r0, #0
 8006320:	eb02 040a 	add.w	r4, r2, sl
 8006324:	4294      	cmp	r4, r2
 8006326:	d90c      	bls.n	8006342 <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 8006328:	4696      	mov	lr, r2
 800632a:	469b      	mov	fp, r3
 800632c:	ecbe 6a01 	vldmia	lr!, {s12}
 8006330:	ecfb 5a01 	vldmia	fp!, {s11}
 8006334:	4574      	cmp	r4, lr
 8006336:	eee5 7a86 	vfma.f32	s15, s11, s12
 800633a:	d8f7      	bhi.n	800632c <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800633c:	697c      	ldr	r4, [r7, #20]
 800633e:	4423      	add	r3, r4
 8006340:	4422      	add	r2, r4
 8006342:	3001      	adds	r0, #1
 8006344:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8006346:	4286      	cmp	r6, r0
 8006348:	4422      	add	r2, r4
 800634a:	d1e9      	bne.n	8006320 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800634c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800634e:	3101      	adds	r1, #1
 8006350:	4402      	add	r2, r0
 8006352:	458c      	cmp	ip, r1
 8006354:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8006356:	4403      	add	r3, r0
 8006358:	d1df      	bne.n	800631a <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800635a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800635c:	f108 0801 	add.w	r8, r8, #1
 8006360:	ece2 7a01 	vstmia	r2!, {s15}
 8006364:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006368:	4413      	add	r3, r2
 800636a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800636c:	4542      	cmp	r2, r8
 800636e:	d8c9      	bhi.n	8006304 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 8006370:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006372:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8006376:	4452      	add	r2, sl
 8006378:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800637c:	f10b 0b01 	add.w	fp, fp, #1
 8006380:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4589      	cmp	r9, r1
 8006386:	bf88      	it	hi
 8006388:	2200      	movhi	r2, #0
 800638a:	45d9      	cmp	r9, fp
 800638c:	f102 0201 	add.w	r2, r2, #1
 8006390:	4415      	add	r5, r2
 8006392:	d1ab      	bne.n	80062ec <ai_conv2d_stripe_f32.constprop.0+0x19c>
 8006394:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 8006398:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800639a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800639c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800639e:	440a      	add	r2, r1
 80063a0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 80063a4:	3301      	adds	r3, #1
 80063a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80063aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ac:	4411      	add	r1, r2
 80063ae:	eba8 0802 	sub.w	r8, r8, r2
 80063b2:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80063b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80063b8:	1a8a      	subs	r2, r1, r2
 80063ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80063c0:	429a      	cmp	r2, r3
 80063c2:	f47f af3d 	bne.w	8006240 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 80063c6:	3774      	adds	r7, #116	@ 0x74
 80063c8:	46bd      	mov	sp, r7
 80063ca:	ecbd 8b0e 	vpop	{d8-d14}
 80063ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d2:	fb98 f2fe 	sdiv	r2, r8, lr
 80063d6:	fb0e 8212 	mls	r2, lr, r2, r8
 80063da:	4641      	mov	r1, r8
 80063dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063de:	4640      	mov	r0, r8
 80063e0:	ebae 0202 	sub.w	r2, lr, r2
 80063e4:	e735      	b.n	8006252 <ai_conv2d_stripe_f32.constprop.0+0x102>
 80063e6:	bf00      	nop
 80063e8:	00000000 	.word	0x00000000
 80063ec:	fb0e f102 	mul.w	r1, lr, r2
 80063f0:	2901      	cmp	r1, #1
 80063f2:	f47f aecf 	bne.w	8006194 <ai_conv2d_stripe_f32.constprop.0+0x44>
 80063f6:	1ac2      	subs	r2, r0, r3
 80063f8:	f8d7 40d8 	ldr.w	r4, [r7, #216]	@ 0xd8
 80063fc:	00b0      	lsls	r0, r6, #2
 80063fe:	eb0c 0103 	add.w	r1, ip, r3
 8006402:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006404:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006406:	63b8      	str	r0, [r7, #56]	@ 0x38
 8006408:	f102 4278 	add.w	r2, r2, #4160749568	@ 0xf8000000
 800640c:	fb00 f004 	mul.w	r0, r0, r4
 8006410:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8006412:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8006416:	fb00 4101 	mla	r1, r0, r1, r4
 800641a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800641c:	f080 8263 	bcs.w	80068e6 <ai_conv2d_stripe_f32.constprop.0+0x796>
 8006420:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006424:	2a00      	cmp	r2, #0
 8006426:	d0ce      	beq.n	80063c6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8006428:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800642c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8006430:	fb05 f202 	mul.w	r2, r5, r2
 8006434:	ed1f 6a14 	vldr	s12, [pc, #-80]	@ 80063e8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 8006438:	fb00 f303 	mul.w	r3, r0, r3
 800643c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800643e:	fb06 f302 	mul.w	r3, r6, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	643b      	str	r3, [r7, #64]	@ 0x40
 8006446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006448:	fb03 f306 	mul.w	r3, r3, r6
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006454:	fb03 f306 	mul.w	r3, r3, r6
 8006458:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800645c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800645e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006466:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800646a:	2300      	movs	r3, #0
 800646c:	653b      	str	r3, [r7, #80]	@ 0x50
 800646e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8104 	beq.w	800667e <ai_conv2d_stripe_f32.constprop.0+0x52e>
 8006476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006478:	ecf3 6a01 	vldmia	r3!, {s13}
 800647c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800647e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80e8 	beq.w	8006658 <ai_conv2d_stripe_f32.constprop.0+0x508>
 8006488:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800648c:	f04f 0b00 	mov.w	fp, #0
 8006490:	f8d7 90f8 	ldr.w	r9, [r7, #248]	@ 0xf8
 8006494:	425d      	negs	r5, r3
 8006496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006498:	657b      	str	r3, [r7, #84]	@ 0x54
 800649a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800649c:	647b      	str	r3, [r7, #68]	@ 0x44
 800649e:	f1b9 0f00 	cmp.w	r9, #0
 80064a2:	f2c0 8219 	blt.w	80068d8 <ai_conv2d_stripe_f32.constprop.0+0x788>
 80064a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064a8:	2300      	movs	r3, #0
 80064aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064ac:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80064ae:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 80064b0:	f8d7 40e0 	ldr.w	r4, [r7, #224]	@ 0xe0
 80064b4:	fb02 0c06 	mla	ip, r2, r6, r0
 80064b8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80064bc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064c0:	4428      	add	r0, r5
 80064c2:	42a0      	cmp	r0, r4
 80064c4:	bf94      	ite	ls
 80064c6:	ebc3 0300 	rsbls	r3, r3, r0
 80064ca:	ebc3 0304 	rsbhi	r3, r3, r4
 80064ce:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80064d2:	1ac4      	subs	r4, r0, r3
 80064d4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80064d8:	1ac0      	subs	r0, r0, r3
 80064da:	fb02 f303 	mul.w	r3, r2, r3
 80064de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	f340 81f6 	ble.w	80068d2 <ai_conv2d_stripe_f32.constprop.0+0x782>
 80064e6:	fb06 f204 	mul.w	r2, r6, r4
 80064ea:	f023 040f 	bic.w	r4, r3, #15
 80064ee:	eeb0 7a66 	vmov.f32	s14, s13
 80064f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80064f4:	fb06 f200 	mul.w	r2, r6, r0
 80064f8:	1e60      	subs	r0, r4, #1
 80064fa:	2600      	movs	r6, #0
 80064fc:	0900      	lsrs	r0, r0, #4
 80064fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006500:	3001      	adds	r0, #1
 8006502:	0102      	lsls	r2, r0, #4
 8006504:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8006508:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800650a:	4662      	mov	r2, ip
 800650c:	2c00      	cmp	r4, #0
 800650e:	f340 81e8 	ble.w	80068e2 <ai_conv2d_stripe_f32.constprop.0+0x792>
 8006512:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 8006516:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	ed50 5a0f 	vldr	s11, [r0, #-60]	@ 0xffffffc4
 8006522:	f108 0810 	add.w	r8, r8, #16
 8006526:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 800652a:	3040      	adds	r0, #64	@ 0x40
 800652c:	ed5c 3a10 	vldr	s7, [ip, #-64]	@ 0xffffffc0
 8006530:	45a0      	cmp	r8, r4
 8006532:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006536:	ed10 4a20 	vldr	s8, [r0, #-128]	@ 0xffffff80
 800653a:	ed5c 4a0e 	vldr	s9, [ip, #-56]	@ 0xffffffc8
 800653e:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 8006542:	ed10 5a1e 	vldr	s10, [r0, #-120]	@ 0xffffff88
 8006546:	eee3 7a84 	vfma.f32	s15, s7, s8
 800654a:	ed50 5a1d 	vldr	s11, [r0, #-116]	@ 0xffffff8c
 800654e:	ed1c ea1d 	vldr	s28, [ip, #-116]	@ 0xffffff8c
 8006552:	ed5c da1c 	vldr	s27, [ip, #-112]	@ 0xffffff90
 8006556:	ed10 da1c 	vldr	s26, [r0, #-112]	@ 0xffffff90
 800655a:	ed5c ca1b 	vldr	s25, [ip, #-108]	@ 0xffffff94
 800655e:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8006562:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006566:	ed5c ba1a 	vldr	s23, [ip, #-104]	@ 0xffffff98
 800656a:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 800656e:	ed5c aa19 	vldr	s21, [ip, #-100]	@ 0xffffff9c
 8006572:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8006576:	ed5c 9a18 	vldr	s19, [ip, #-96]	@ 0xffffffa0
 800657a:	ed10 9a18 	vldr	s18, [r0, #-96]	@ 0xffffffa0
 800657e:	eeee 7a25 	vfma.f32	s15, s28, s11
 8006582:	ed5c 8a17 	vldr	s17, [ip, #-92]	@ 0xffffffa4
 8006586:	ed10 8a17 	vldr	s16, [r0, #-92]	@ 0xffffffa4
 800658a:	ed1c 0a16 	vldr	s0, [ip, #-88]	@ 0xffffffa8
 800658e:	ed50 0a16 	vldr	s1, [r0, #-88]	@ 0xffffffa8
 8006592:	ed1c 1a15 	vldr	s2, [ip, #-84]	@ 0xffffffac
 8006596:	ed50 1a15 	vldr	s3, [r0, #-84]	@ 0xffffffac
 800659a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800659e:	ed1c 2a14 	vldr	s4, [ip, #-80]	@ 0xffffffb0
 80065a2:	ed50 2a14 	vldr	s5, [r0, #-80]	@ 0xffffffb0
 80065a6:	ed1c 3a13 	vldr	s6, [ip, #-76]	@ 0xffffffb4
 80065aa:	ed50 3a13 	vldr	s7, [r0, #-76]	@ 0xffffffb4
 80065ae:	ed1c 4a12 	vldr	s8, [ip, #-72]	@ 0xffffffb8
 80065b2:	ed50 4a12 	vldr	s9, [r0, #-72]	@ 0xffffffb8
 80065b6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80065ba:	ed1c 5a11 	vldr	s10, [ip, #-68]	@ 0xffffffbc
 80065be:	ed50 5a11 	vldr	s11, [r0, #-68]	@ 0xffffffbc
 80065c2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80065c6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80065ca:	eee9 7a89 	vfma.f32	s15, s19, s18
 80065ce:	eee8 7a88 	vfma.f32	s15, s17, s16
 80065d2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80065d6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80065da:	eee2 7a22 	vfma.f32	s15, s4, s5
 80065de:	eee3 7a23 	vfma.f32	s15, s6, s7
 80065e2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80065e6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80065ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065ee:	db96      	blt.n	800651e <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 80065f0:	4471      	add	r1, lr
 80065f2:	4472      	add	r2, lr
 80065f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80065f6:	4283      	cmp	r3, r0
 80065f8:	dd11      	ble.n	800661e <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 80065fa:	4684      	mov	ip, r0
 80065fc:	468a      	mov	sl, r1
 80065fe:	4690      	mov	r8, r2
 8006600:	f10c 0c01 	add.w	ip, ip, #1
 8006604:	ecf8 5a01 	vldmia	r8!, {s11}
 8006608:	ecfa 7a01 	vldmia	sl!, {s15}
 800660c:	4563      	cmp	r3, ip
 800660e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006612:	d1f5      	bne.n	8006600 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 8006614:	1a18      	subs	r0, r3, r0
 8006616:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800661a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800661e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006620:	3601      	adds	r6, #1
 8006622:	4401      	add	r1, r0
 8006624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006626:	4402      	add	r2, r0
 8006628:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800662a:	42b0      	cmp	r0, r6
 800662c:	f47f af6e 	bne.w	800650c <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 8006630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006632:	f10b 0b01 	add.w	fp, fp, #1
 8006636:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006638:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800663a:	ed83 7a00 	vstr	s14, [r3]
 800663e:	440b      	add	r3, r1
 8006640:	4491      	add	r9, r2
 8006642:	1aad      	subs	r5, r5, r2
 8006644:	647b      	str	r3, [r7, #68]	@ 0x44
 8006646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664a:	4413      	add	r3, r2
 800664c:	657b      	str	r3, [r7, #84]	@ 0x54
 800664e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006652:	455b      	cmp	r3, fp
 8006654:	f47f af23 	bne.w	800649e <ai_conv2d_stripe_f32.constprop.0+0x34e>
 8006658:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800665a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800665c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800665e:	440a      	add	r2, r1
 8006660:	3301      	adds	r3, #1
 8006662:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006664:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006666:	653b      	str	r3, [r7, #80]	@ 0x50
 8006668:	3204      	adds	r2, #4
 800666a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800666c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006670:	429a      	cmp	r2, r3
 8006672:	f43f aea8 	beq.w	80063c6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8006676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006678:	2b00      	cmp	r3, #0
 800667a:	f47f aefc 	bne.w	8006476 <ai_conv2d_stripe_f32.constprop.0+0x326>
 800667e:	eef0 6a46 	vmov.f32	s13, s12
 8006682:	e6fc      	b.n	800647e <ai_conv2d_stripe_f32.constprop.0+0x32e>
 8006684:	fb0e f102 	mul.w	r1, lr, r2
 8006688:	2901      	cmp	r1, #1
 800668a:	f47f ad83 	bne.w	8006194 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800668e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006692:	2a00      	cmp	r2, #0
 8006694:	f43f ae97 	beq.w	80063c6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8006698:	eb0c 0203 	add.w	r2, ip, r3
 800669c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 80066a0:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 80066a4:	ed5f 3ab0 	vldr	s7, [pc, #-704]	@ 80063e8 <ai_conv2d_stripe_f32.constprop.0+0x298>
 80066a8:	fb01 f202 	mul.w	r2, r1, r2
 80066ac:	1ac1      	subs	r1, r0, r3
 80066ae:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80066b2:	f8c7 60d0 	str.w	r6, [r7, #208]	@ 0xd0
 80066b6:	61fa      	str	r2, [r7, #28]
 80066b8:	1a1a      	subs	r2, r3, r0
 80066ba:	64f9      	str	r1, [r7, #76]	@ 0x4c
 80066bc:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 80066c0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 80066c4:	442a      	add	r2, r5
 80066c6:	fb03 f301 	mul.w	r3, r3, r1
 80066ca:	fb01 f202 	mul.w	r2, r1, r2
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d0:	0093      	lsls	r3, r2, #2
 80066d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066d8:	fbb3 f3f6 	udiv	r3, r3, r6
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066ea:	f1c3 0b00 	rsb	fp, r3, #0
 80066ee:	00f3      	lsls	r3, r6, #3
 80066f0:	623b      	str	r3, [r7, #32]
 80066f2:	2300      	movs	r3, #0
 80066f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80066f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f2c0 80e3 	blt.w	80068c6 <ai_conv2d_stripe_f32.constprop.0+0x776>
 8006700:	2500      	movs	r5, #0
 8006702:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006704:	462b      	mov	r3, r5
 8006706:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800670a:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 800670e:	445a      	add	r2, fp
 8006710:	69fc      	ldr	r4, [r7, #28]
 8006712:	6e7e      	ldr	r6, [r7, #100]	@ 0x64
 8006714:	4282      	cmp	r2, r0
 8006716:	bf28      	it	cs
 8006718:	4602      	movcs	r2, r0
 800671a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	1904      	adds	r4, r0, r4
 8006722:	2e00      	cmp	r6, #0
 8006724:	f000 8228 	beq.w	8006b78 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 8006728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800672a:	647e      	str	r6, [r7, #68]	@ 0x44
 800672c:	429e      	cmp	r6, r3
 800672e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006730:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006738:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800673c:	1a98      	subs	r0, r3, r2
 800673e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006742:	fb03 f000 	mul.w	r0, r3, r0
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	442c      	add	r4, r5
 800674e:	6d7d      	ldr	r5, [r7, #84]	@ 0x54
 8006750:	fb08 5e04 	mla	lr, r8, r4, r5
 8006754:	eb0e 0408 	add.w	r4, lr, r8
 8006758:	45a6      	cmp	lr, r4
 800675a:	62bc      	str	r4, [r7, #40]	@ 0x28
 800675c:	f080 809a 	bcs.w	8006894 <ai_conv2d_stripe_f32.constprop.0+0x744>
 8006760:	0080      	lsls	r0, r0, #2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	6378      	str	r0, [r7, #52]	@ 0x34
 8006766:	633b      	str	r3, [r7, #48]	@ 0x30
 8006768:	f022 0303 	bic.w	r3, r2, #3
 800676c:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	@ 0xd0
 8006770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006772:	42a0      	cmp	r0, r4
 8006774:	f200 808e 	bhi.w	8006894 <ai_conv2d_stripe_f32.constprop.0+0x744>
 8006778:	1e58      	subs	r0, r3, #1
 800677a:	f04f 0900 	mov.w	r9, #0
 800677e:	0880      	lsrs	r0, r0, #2
 8006780:	f8c7 903c 	str.w	r9, [r7, #60]	@ 0x3c
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	fb00 a00a 	mla	r0, r0, sl, sl
 800678a:	6138      	str	r0, [r7, #16]
 800678c:	0118      	lsls	r0, r3, #4
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	6178      	str	r0, [r7, #20]
 8006792:	e9c7 b302 	strd	fp, r3, [r7, #8]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800679a:	4499      	add	r9, r3
 800679c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800679e:	181c      	adds	r4, r3, r0
 80067a0:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80067a4:	65bc      	str	r4, [r7, #88]	@ 0x58
 80067a6:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067aa:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80067ae:	1820      	adds	r0, r4, r0
 80067b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b2:	6438      	str	r0, [r7, #64]	@ 0x40
 80067b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80067b6:	ecb3 7a01 	vldmia	r3!, {s14}
 80067ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067bc:	ee27 7a03 	vmul.f32	s14, s14, s6
 80067c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd55      	ble.n	8006872 <ai_conv2d_stripe_f32.constprop.0+0x722>
 80067c6:	4675      	mov	r5, lr
 80067c8:	f04f 0b00 	mov.w	fp, #0
 80067cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f340 81d0 	ble.w	8006b74 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 80067d4:	6a38      	ldr	r0, [r7, #32]
 80067d6:	f101 0310 	add.w	r3, r1, #16
 80067da:	2600      	movs	r6, #0
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	182c      	adds	r4, r5, r0
 80067e0:	4628      	mov	r0, r5
 80067e2:	eb00 0c08 	add.w	ip, r0, r8
 80067e6:	ed13 4a03 	vldr	s8, [r3, #-12]
 80067ea:	ed53 4a04 	vldr	s9, [r3, #-16]
 80067ee:	3604      	adds	r6, #4
 80067f0:	eddc 7a00 	vldr	s15, [ip]
 80067f4:	eb04 0c08 	add.w	ip, r4, r8
 80067f8:	ed90 5a00 	vldr	s10, [r0]
 80067fc:	3310      	adds	r3, #16
 80067fe:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006802:	edd4 6a00 	vldr	s13, [r4]
 8006806:	ed53 5a06 	vldr	s11, [r3, #-24]	@ 0xffffffe8
 800680a:	4450      	add	r0, sl
 800680c:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8006810:	4454      	add	r4, sl
 8006812:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006816:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006818:	4296      	cmp	r6, r2
 800681a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800681e:	eddc 6a00 	vldr	s13, [ip]
 8006822:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800682a:	dbda      	blt.n	80067e2 <ai_conv2d_stripe_f32.constprop.0+0x692>
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	441d      	add	r5, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	68fc      	ldr	r4, [r7, #12]
 8006836:	4419      	add	r1, r3
 8006838:	42a2      	cmp	r2, r4
 800683a:	dd11      	ble.n	8006860 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800683c:	4620      	mov	r0, r4
 800683e:	462b      	mov	r3, r5
 8006840:	460e      	mov	r6, r1
 8006842:	3001      	adds	r0, #1
 8006844:	edd3 7a00 	vldr	s15, [r3]
 8006848:	ecf6 6a01 	vldmia	r6!, {s13}
 800684c:	4443      	add	r3, r8
 800684e:	4290      	cmp	r0, r2
 8006850:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006854:	d1f5      	bne.n	8006842 <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 8006856:	1b14      	subs	r4, r2, r4
 8006858:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800685c:	fb04 5508 	mla	r5, r4, r8, r5
 8006860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006862:	f10b 0b01 	add.w	fp, fp, #1
 8006866:	441d      	add	r5, r3
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	4419      	add	r1, r3
 800686c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800686e:	459b      	cmp	fp, r3
 8006870:	d1ac      	bne.n	80067cc <ai_conv2d_stripe_f32.constprop.0+0x67c>
 8006872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006874:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006876:	eca3 7a01 	vstmia	r3!, {s14}
 800687a:	643b      	str	r3, [r7, #64]	@ 0x40
 800687c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687e:	4419      	add	r1, r3
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	4283      	cmp	r3, r0
 8006884:	d196      	bne.n	80067b4 <ai_conv2d_stripe_f32.constprop.0+0x664>
 8006886:	f10e 0e04 	add.w	lr, lr, #4
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	459e      	cmp	lr, r3
 800688e:	d382      	bcc.n	8006796 <ai_conv2d_stripe_f32.constprop.0+0x646>
 8006890:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8006894:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006896:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800689a:	440a      	add	r2, r1
 800689c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800689e:	3301      	adds	r3, #1
 80068a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068a2:	ebab 0b01 	sub.w	fp, fp, r1
 80068a6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 80068aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ac:	440a      	add	r2, r1
 80068ae:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80068b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80068b6:	429a      	cmp	r2, r3
 80068b8:	f43f ad85 	beq.w	80063c6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 80068bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f6bf af1d 	bge.w	8006700 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 80068c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068c8:	465b      	mov	r3, fp
 80068ca:	465d      	mov	r5, fp
 80068cc:	eb02 010b 	add.w	r1, r2, fp
 80068d0:	e719      	b.n	8006706 <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 80068d2:	eeb0 7a66 	vmov.f32	s14, s13
 80068d6:	e6ab      	b.n	8006630 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 80068d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068da:	462b      	mov	r3, r5
 80068dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80068de:	442a      	add	r2, r5
 80068e0:	e5e4      	b.n	80064ac <ai_conv2d_stripe_f32.constprop.0+0x35c>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e687      	b.n	80065f6 <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 80068e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80068ea:	4669      	mov	r1, sp
 80068ec:	fb05 f202 	mul.w	r2, r5, r2
 80068f0:	ee0e 1a90 	vmov	s29, r1
 80068f4:	fb06 f202 	mul.w	r2, r6, r2
 80068f8:	0095      	lsls	r5, r2, #2
 80068fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80068fc:	1dea      	adds	r2, r5, #7
 80068fe:	f022 0207 	bic.w	r2, r2, #7
 8006902:	ebad 0d02 	sub.w	sp, sp, r2
 8006906:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800690a:	46e9      	mov	r9, sp
 800690c:	2a00      	cmp	r2, #0
 800690e:	f000 812d 	beq.w	8006b6c <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 8006912:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006916:	46ca      	mov	sl, r9
 8006918:	ed9f 8aa7 	vldr	s16, [pc, #668]	@ 8006bb8 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800691c:	46a9      	mov	r9, r5
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006924:	f8c7 60d0 	str.w	r6, [r7, #208]	@ 0xd0
 8006928:	647b      	str	r3, [r7, #68]	@ 0x44
 800692a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800692c:	fb03 f306 	mul.w	r3, r3, r6
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	623b      	str	r3, [r7, #32]
 8006934:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006938:	fb03 f306 	mul.w	r3, r3, r6
 800693c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
 8006942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800694a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800694c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800694e:	2300      	movs	r3, #0
 8006950:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006954:	b123      	cbz	r3, 8006960 <ai_conv2d_stripe_f32.constprop.0+0x810>
 8006956:	464a      	mov	r2, r9
 8006958:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800695a:	4650      	mov	r0, sl
 800695c:	f002 fdd9 	bl	8009512 <memcpy>
 8006960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 811c 	beq.w	8006ba0 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 8006968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800696a:	ecf3 6a01 	vldmia	r3!, {s13}
 800696e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80eb 	beq.w	8006b50 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800697a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800697e:	f8c7 901c 	str.w	r9, [r7, #28]
 8006982:	425d      	negs	r5, r3
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	653b      	str	r3, [r7, #80]	@ 0x50
 8006988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800698a:	643b      	str	r3, [r7, #64]	@ 0x40
 800698c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006990:	657b      	str	r3, [r7, #84]	@ 0x54
 8006992:	2300      	movs	r3, #0
 8006994:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006998:	2b00      	cmp	r3, #0
 800699a:	f2c0 8107 	blt.w	8006bac <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800699e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069a0:	2300      	movs	r3, #0
 80069a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80069a8:	f8d7 60e0 	ldr.w	r6, [r7, #224]	@ 0xe0
 80069ac:	4428      	add	r0, r5
 80069ae:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80069b0:	42b0      	cmp	r0, r6
 80069b2:	bf94      	ite	ls
 80069b4:	ebc3 0300 	rsbls	r3, r3, r0
 80069b8:	ebc3 0306 	rsbhi	r3, r3, r6
 80069bc:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80069c0:	fb02 a204 	mla	r2, r2, r4, sl
 80069c4:	eba0 0c03 	sub.w	ip, r0, r3
 80069c8:	1af0      	subs	r0, r6, r3
 80069ca:	f8d7 60d0 	ldr.w	r6, [r7, #208]	@ 0xd0
 80069ce:	fb06 f303 	mul.w	r3, r6, r3
 80069d2:	6dfe      	ldr	r6, [r7, #92]	@ 0x5c
 80069d4:	2e00      	cmp	r6, #0
 80069d6:	f340 80e6 	ble.w	8006ba6 <ai_conv2d_stripe_f32.constprop.0+0xa56>
 80069da:	fb04 f000 	mul.w	r0, r4, r0
 80069de:	eeb0 7a66 	vmov.f32	s14, s13
 80069e2:	fb04 fc0c 	mul.w	ip, r4, ip
 80069e6:	f023 040f 	bic.w	r4, r3, #15
 80069ea:	6338      	str	r0, [r7, #48]	@ 0x30
 80069ec:	2600      	movs	r6, #0
 80069ee:	1e60      	subs	r0, r4, #1
 80069f0:	0900      	lsrs	r0, r0, #4
 80069f2:	3001      	adds	r0, #1
 80069f4:	ea4f 1880 	mov.w	r8, r0, lsl #6
 80069f8:	0100      	lsls	r0, r0, #4
 80069fa:	62b8      	str	r0, [r7, #40]	@ 0x28
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	f340 80cd 	ble.w	8006b9c <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 8006a02:	f101 0e40 	add.w	lr, r1, #64	@ 0x40
 8006a06:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	ed10 6a0f 	vldr	s12, [r0, #-60]	@ 0xffffffc4
 8006a12:	f109 0910 	add.w	r9, r9, #16
 8006a16:	ed5e 7a0f 	vldr	s15, [lr, #-60]	@ 0xffffffc4
 8006a1a:	3040      	adds	r0, #64	@ 0x40
 8006a1c:	ed1e 4a10 	vldr	s8, [lr, #-64]	@ 0xffffffc0
 8006a20:	45a1      	cmp	r9, r4
 8006a22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006a26:	ed50 4a20 	vldr	s9, [r0, #-128]	@ 0xffffff80
 8006a2a:	ed1e 5a0e 	vldr	s10, [lr, #-56]	@ 0xffffffc8
 8006a2e:	f10e 0e40 	add.w	lr, lr, #64	@ 0x40
 8006a32:	ed50 5a1e 	vldr	s11, [r0, #-120]	@ 0xffffff88
 8006a36:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006a3a:	ed10 6a1d 	vldr	s12, [r0, #-116]	@ 0xffffff8c
 8006a3e:	ed1e ea1d 	vldr	s28, [lr, #-116]	@ 0xffffff8c
 8006a42:	ed5e da1c 	vldr	s27, [lr, #-112]	@ 0xffffff90
 8006a46:	ed10 da1c 	vldr	s26, [r0, #-112]	@ 0xffffff90
 8006a4a:	ed5e ca1b 	vldr	s25, [lr, #-108]	@ 0xffffff94
 8006a4e:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8006a52:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006a56:	ed5e ba1a 	vldr	s23, [lr, #-104]	@ 0xffffff98
 8006a5a:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 8006a5e:	ed5e aa19 	vldr	s21, [lr, #-100]	@ 0xffffff9c
 8006a62:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8006a66:	ed5e 9a18 	vldr	s19, [lr, #-96]	@ 0xffffffa0
 8006a6a:	ed10 9a18 	vldr	s18, [r0, #-96]	@ 0xffffffa0
 8006a6e:	eeee 7a06 	vfma.f32	s15, s28, s12
 8006a72:	ed5e 8a17 	vldr	s17, [lr, #-92]	@ 0xffffffa4
 8006a76:	ed10 0a17 	vldr	s0, [r0, #-92]	@ 0xffffffa4
 8006a7a:	ed5e 0a16 	vldr	s1, [lr, #-88]	@ 0xffffffa8
 8006a7e:	ed10 1a16 	vldr	s2, [r0, #-88]	@ 0xffffffa8
 8006a82:	ed5e 1a15 	vldr	s3, [lr, #-84]	@ 0xffffffac
 8006a86:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8006a8a:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8006a8e:	ed5e 2a14 	vldr	s5, [lr, #-80]	@ 0xffffffb0
 8006a92:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8006a96:	ed5e 3a13 	vldr	s7, [lr, #-76]	@ 0xffffffb4
 8006a9a:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8006a9e:	ed5e 4a12 	vldr	s9, [lr, #-72]	@ 0xffffffb8
 8006aa2:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8006aa6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006aaa:	ed5e 5a11 	vldr	s11, [lr, #-68]	@ 0xffffffbc
 8006aae:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8006ab2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006ab6:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006aba:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006abe:	eee8 7a80 	vfma.f32	s15, s17, s0
 8006ac2:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006ac6:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006aca:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006ace:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006ad2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006ad6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ade:	db96      	blt.n	8006a0e <ai_conv2d_stripe_f32.constprop.0+0x8be>
 8006ae0:	4441      	add	r1, r8
 8006ae2:	4442      	add	r2, r8
 8006ae4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae6:	4283      	cmp	r3, r0
 8006ae8:	dd11      	ble.n	8006b0e <ai_conv2d_stripe_f32.constprop.0+0x9be>
 8006aea:	4686      	mov	lr, r0
 8006aec:	468b      	mov	fp, r1
 8006aee:	4691      	mov	r9, r2
 8006af0:	f10e 0e01 	add.w	lr, lr, #1
 8006af4:	ecb9 6a01 	vldmia	r9!, {s12}
 8006af8:	ecfb 7a01 	vldmia	fp!, {s15}
 8006afc:	4573      	cmp	r3, lr
 8006afe:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006b02:	d1f5      	bne.n	8006af0 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 8006b04:	1a18      	subs	r0, r3, r0
 8006b06:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006b0a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006b0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b10:	3601      	adds	r6, #1
 8006b12:	4461      	add	r1, ip
 8006b14:	4402      	add	r2, r0
 8006b16:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006b18:	42b0      	cmp	r0, r6
 8006b1a:	f47f af6f 	bne.w	80069fc <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 8006b1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b20:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006b22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b24:	4401      	add	r1, r0
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b28:	ed82 7a00 	vstr	s14, [r2]
 8006b2c:	1a2d      	subs	r5, r5, r0
 8006b2e:	6579      	str	r1, [r7, #84]	@ 0x54
 8006b30:	3301      	adds	r3, #1
 8006b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b36:	440a      	add	r2, r1
 8006b38:	6a39      	ldr	r1, [r7, #32]
 8006b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b3e:	440a      	add	r2, r1
 8006b40:	653a      	str	r2, [r7, #80]	@ 0x50
 8006b42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b46:	429a      	cmp	r2, r3
 8006b48:	f47f af25 	bne.w	8006996 <ai_conv2d_stripe_f32.constprop.0+0x846>
 8006b4c:	f8d7 901c 	ldr.w	r9, [r7, #28]
 8006b50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b54:	444a      	add	r2, r9
 8006b56:	3301      	adds	r3, #1
 8006b58:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006b5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b5e:	3204      	adds	r2, #4
 8006b60:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b62:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006b66:	429a      	cmp	r2, r3
 8006b68:	f47f aef3 	bne.w	8006952 <ai_conv2d_stripe_f32.constprop.0+0x802>
 8006b6c:	ee1e 3a90 	vmov	r3, s29
 8006b70:	469d      	mov	sp, r3
 8006b72:	e428      	b.n	80063c6 <ai_conv2d_stripe_f32.constprop.0+0x276>
 8006b74:	2400      	movs	r4, #0
 8006b76:	e65f      	b.n	8006838 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 8006b78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b7a:	eeb0 3a63 	vmov.f32	s6, s7
 8006b7e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b8a:	1a98      	subs	r0, r3, r2
 8006b8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006b90:	fb03 f000 	mul.w	r0, r3, r0
 8006b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	e5d7      	b.n	800674c <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e7a2      	b.n	8006ae6 <ai_conv2d_stripe_f32.constprop.0+0x996>
 8006ba0:	eef0 6a48 	vmov.f32	s13, s16
 8006ba4:	e6e4      	b.n	8006970 <ai_conv2d_stripe_f32.constprop.0+0x820>
 8006ba6:	eeb0 7a66 	vmov.f32	s14, s13
 8006baa:	e7b8      	b.n	8006b1e <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 8006bac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bae:	462b      	mov	r3, r5
 8006bb0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006bb2:	442a      	add	r2, r5
 8006bb4:	e6f6      	b.n	80069a4 <ai_conv2d_stripe_f32.constprop.0+0x854>
 8006bb6:	bf00      	nop
 8006bb8:	00000000 	.word	0x00000000

08006bbc <ai_dict_decompress_f32>:
 8006bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	9d08      	ldr	r5, [sp, #32]
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006bc8:	d00e      	beq.n	8006be8 <ai_dict_decompress_f32+0x2c>
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d10a      	bne.n	8006be4 <ai_dict_decompress_f32+0x28>
 8006bce:	42a8      	cmp	r0, r5
 8006bd0:	d208      	bcs.n	8006be4 <ai_dict_decompress_f32+0x28>
 8006bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f840 3b04 	str.w	r3, [r0], #4
 8006be0:	4285      	cmp	r5, r0
 8006be2:	d8f6      	bhi.n	8006bd2 <ai_dict_decompress_f32+0x16>
 8006be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	085e      	lsrs	r6, r3, #1
 8006bec:	f003 0701 	and.w	r7, r3, #1
 8006bf0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8006bf4:	f106 38ff 	add.w	r8, r6, #4294967295
 8006bf8:	42a8      	cmp	r0, r5
 8006bfa:	d2f3      	bcs.n	8006be4 <ai_dict_decompress_f32+0x28>
 8006bfc:	b33e      	cbz	r6, 8006c4e <ai_dict_decompress_f32+0x92>
 8006bfe:	f100 0e08 	add.w	lr, r0, #8
 8006c02:	f101 3cff 	add.w	ip, r1, #4294967295
 8006c06:	eb01 0408 	add.w	r4, r1, r8
 8006c0a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8006c0e:	f10e 0e08 	add.w	lr, lr, #8
 8006c12:	091b      	lsrs	r3, r3, #4
 8006c14:	4564      	cmp	r4, ip
 8006c16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f84e 3c10 	str.w	r3, [lr, #-16]
 8006c20:	f89c 3000 	ldrb.w	r3, [ip]
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8006c32:	d1ea      	bne.n	8006c0a <ai_dict_decompress_f32+0x4e>
 8006c34:	4431      	add	r1, r6
 8006c36:	4448      	add	r0, r9
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	d0dd      	beq.n	8006bf8 <ai_dict_decompress_f32+0x3c>
 8006c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c40:	091b      	lsrs	r3, r3, #4
 8006c42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f840 3b04 	str.w	r3, [r0], #4
 8006c4c:	e7d4      	b.n	8006bf8 <ai_dict_decompress_f32+0x3c>
 8006c4e:	2f00      	cmp	r7, #0
 8006c50:	d1f4      	bne.n	8006c3c <ai_dict_decompress_f32+0x80>
 8006c52:	42a8      	cmp	r0, r5
 8006c54:	d3fd      	bcc.n	8006c52 <ai_dict_decompress_f32+0x96>
 8006c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c5a:	bf00      	nop

08006c5c <forward_conv2d_nl_pool>:
 8006c5c:	6981      	ldr	r1, [r0, #24]
 8006c5e:	880b      	ldrh	r3, [r1, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 814a 	beq.w	8006efa <forward_conv2d_nl_pool+0x29e>
 8006c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	ed2d 8b04 	vpush	{d8-d9}
 8006c6e:	684e      	ldr	r6, [r1, #4]
 8006c70:	b0b9      	sub	sp, #228	@ 0xe4
 8006c72:	4604      	mov	r4, r0
 8006c74:	6872      	ldr	r2, [r6, #4]
 8006c76:	b102      	cbz	r2, 8006c7a <forward_conv2d_nl_pool+0x1e>
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	f000 824d 	beq.w	800711a <forward_conv2d_nl_pool+0x4be>
 8006c80:	6930      	ldr	r0, [r6, #16]
 8006c82:	9011      	str	r0, [sp, #68]	@ 0x44
 8006c84:	b108      	cbz	r0, 8006c8a <forward_conv2d_nl_pool+0x2e>
 8006c86:	6800      	ldr	r0, [r0, #0]
 8006c88:	9011      	str	r0, [sp, #68]	@ 0x44
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	f000 8137 	beq.w	8006efe <forward_conv2d_nl_pool+0x2a2>
 8006c90:	69f0      	ldr	r0, [r6, #28]
 8006c92:	2800      	cmp	r0, #0
 8006c94:	f000 8231 	beq.w	80070fa <forward_conv2d_nl_pool+0x49e>
 8006c98:	8b37      	ldrh	r7, [r6, #24]
 8006c9a:	6806      	ldr	r6, [r0, #0]
 8006c9c:	2f01      	cmp	r7, #1
 8006c9e:	f240 8233 	bls.w	8007108 <forward_conv2d_nl_pool+0x4ac>
 8006ca2:	6845      	ldr	r5, [r0, #4]
 8006ca4:	ee08 5a10 	vmov	s16, r5
 8006ca8:	6880      	ldr	r0, [r0, #8]
 8006caa:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8006cae:	6992      	ldr	r2, [r2, #24]
 8006cb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006cb4:	6892      	ldr	r2, [r2, #8]
 8006cb6:	952a      	str	r5, [sp, #168]	@ 0xa8
 8006cb8:	ee09 2a10 	vmov	s18, r2
 8006cbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006cbe:	f8d4 e03c 	ldr.w	lr, [r4, #60]	@ 0x3c
 8006cc2:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8006cc6:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8006cca:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8006cce:	6d67      	ldr	r7, [r4, #84]	@ 0x54
 8006cd0:	951d      	str	r5, [sp, #116]	@ 0x74
 8006cd2:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8006cd6:	69b2      	ldr	r2, [r6, #24]
 8006cd8:	951f      	str	r5, [sp, #124]	@ 0x7c
 8006cda:	f8d8 500c 	ldr.w	r5, [r8, #12]
 8006cde:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8006ce2:	9527      	str	r5, [sp, #156]	@ 0x9c
 8006ce4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8006ce8:	952e      	str	r5, [sp, #184]	@ 0xb8
 8006cea:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
 8006cec:	952f      	str	r5, [sp, #188]	@ 0xbc
 8006cee:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006cf0:	9513      	str	r5, [sp, #76]	@ 0x4c
 8006cf2:	f8de 5000 	ldr.w	r5, [lr]
 8006cf6:	9515      	str	r5, [sp, #84]	@ 0x54
 8006cf8:	e9de a501 	ldrd	sl, r5, [lr, #4]
 8006cfc:	9516      	str	r5, [sp, #88]	@ 0x58
 8006cfe:	69e5      	ldr	r5, [r4, #28]
 8006d00:	9530      	str	r5, [sp, #192]	@ 0xc0
 8006d02:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006d04:	9526      	str	r5, [sp, #152]	@ 0x98
 8006d06:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006d08:	9512      	str	r5, [sp, #72]	@ 0x48
 8006d0a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006d0e:	9528      	str	r5, [sp, #160]	@ 0xa0
 8006d10:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006d14:	9529      	str	r5, [sp, #164]	@ 0xa4
 8006d16:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8006d18:	9522      	str	r5, [sp, #136]	@ 0x88
 8006d1a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8006d1c:	9523      	str	r5, [sp, #140]	@ 0x8c
 8006d1e:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8006d20:	951a      	str	r5, [sp, #104]	@ 0x68
 8006d22:	e9d7 8500 	ldrd	r8, r5, [r7]
 8006d26:	9524      	str	r5, [sp, #144]	@ 0x90
 8006d28:	6895      	ldr	r5, [r2, #8]
 8006d2a:	ee08 5a90 	vmov	s17, r5
 8006d2e:	ee18 5a10 	vmov	r5, s16
 8006d32:	b11d      	cbz	r5, 8006d3c <forward_conv2d_nl_pool+0xe0>
 8006d34:	69af      	ldr	r7, [r5, #24]
 8006d36:	68bd      	ldr	r5, [r7, #8]
 8006d38:	ee08 5a10 	vmov	s16, r5
 8006d3c:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8006d40:	2800      	cmp	r0, #0
 8006d42:	f000 81c7 	beq.w	80070d4 <forward_conv2d_nl_pool+0x478>
 8006d46:	6987      	ldr	r7, [r0, #24]
 8006d48:	2f00      	cmp	r7, #0
 8006d4a:	f000 81cc 	beq.w	80070e6 <forward_conv2d_nl_pool+0x48a>
 8006d4e:	6943      	ldr	r3, [r0, #20]
 8006d50:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d5a:	9333      	str	r3, [sp, #204]	@ 0xcc
 8006d5c:	f001 fbfa 	bl	8008554 <ai_array_get_byte_size>
 8006d60:	69a1      	ldr	r1, [r4, #24]
 8006d62:	69b2      	ldr	r2, [r6, #24]
 8006d64:	880b      	ldrh	r3, [r1, #0]
 8006d66:	9014      	str	r0, [sp, #80]	@ 0x50
 8006d68:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006d6a:	902d      	str	r0, [sp, #180]	@ 0xb4
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f000 81ae 	beq.w	80070ce <forward_conv2d_nl_pool+0x472>
 8006d72:	fa1f f58a 	uxth.w	r5, sl
 8006d76:	f8bd 0054 	ldrh.w	r0, [sp, #84]	@ 0x54
 8006d7a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8006d7e:	9517      	str	r5, [sp, #92]	@ 0x5c
 8006d80:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8006d82:	9015      	str	r0, [sp, #84]	@ 0x54
 8006d84:	fa10 f085 	uxtah	r0, r0, r5
 8006d88:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 8006d8a:	961b      	str	r6, [sp, #108]	@ 0x6c
 8006d8c:	4428      	add	r0, r5
 8006d8e:	f8bd 6048 	ldrh.w	r6, [sp, #72]	@ 0x48
 8006d92:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8006d94:	3e01      	subs	r6, #1
 8006d96:	1e6f      	subs	r7, r5, #1
 8006d98:	fb07 5506 	mla	r5, r7, r6, r5
 8006d9c:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8006d9e:	1b40      	subs	r0, r0, r5
 8006da0:	952b      	str	r5, [sp, #172]	@ 0xac
 8006da2:	9d28      	ldr	r5, [sp, #160]	@ 0xa0
 8006da4:	fbb0 f0f6 	udiv	r0, r0, r6
 8006da8:	f8bd 6098 	ldrh.w	r6, [sp, #152]	@ 0x98
 8006dac:	1e6f      	subs	r7, r5, #1
 8006dae:	9013      	str	r0, [sp, #76]	@ 0x4c
 8006db0:	3e01      	subs	r6, #1
 8006db2:	6810      	ldr	r0, [r2, #0]
 8006db4:	fb07 5506 	mla	r5, r7, r6, r5
 8006db8:	f3c0 4643 	ubfx	r6, r0, #17, #4
 8006dbc:	952c      	str	r5, [sp, #176]	@ 0xb0
 8006dbe:	2e04      	cmp	r6, #4
 8006dc0:	6da5      	ldr	r5, [r4, #88]	@ 0x58
 8006dc2:	9520      	str	r5, [sp, #128]	@ 0x80
 8006dc4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8006dc6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006dc8:	f000 8148 	beq.w	800705c <forward_conv2d_nl_pool+0x400>
 8006dcc:	2e08      	cmp	r6, #8
 8006dce:	f000 8145 	beq.w	800705c <forward_conv2d_nl_pool+0x400>
 8006dd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	fa0f f888 	sxth.w	r8, r8
 8006dda:	6992      	ldr	r2, [r2, #24]
 8006ddc:	921c      	str	r2, [sp, #112]	@ 0x70
 8006dde:	f240 81a1 	bls.w	8007124 <forward_conv2d_nl_pool+0x4c8>
 8006de2:	684b      	ldr	r3, [r1, #4]
 8006de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 819f 	beq.w	800712a <forward_conv2d_nl_pool+0x4ce>
 8006dec:	681e      	ldr	r6, [r3, #0]
 8006dee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006df0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006df2:	425b      	negs	r3, r3
 8006df4:	9316      	str	r3, [sp, #88]	@ 0x58
 8006df6:	68f3      	ldr	r3, [r6, #12]
 8006df8:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8006dfc:	69b3      	ldr	r3, [r6, #24]
 8006dfe:	689c      	ldr	r4, [r3, #8]
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	d070      	beq.n	8006ee6 <forward_conv2d_nl_pool+0x28a>
 8006e04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e06:	fb0a f20b 	mul.w	r2, sl, fp
 8006e0a:	f8cd 8060 	str.w	r8, [sp, #96]	@ 0x60
 8006e0e:	425b      	negs	r3, r3
 8006e10:	9236      	str	r2, [sp, #216]	@ 0xd8
 8006e12:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8006e16:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
 8006e1a:	9331      	str	r3, [sp, #196]	@ 0xc4
 8006e1c:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	@ 0x48
 8006e20:	9234      	str	r2, [sp, #208]	@ 0xd0
 8006e22:	9332      	str	r3, [sp, #200]	@ 0xc8
 8006e24:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006e26:	fb03 f30b 	mul.w	r3, r3, fp
 8006e2a:	fb0a f303 	mul.w	r3, sl, r3
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	9335      	str	r3, [sp, #212]	@ 0xd4
 8006e32:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006e34:	fb03 f30b 	mul.w	r3, r3, fp
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	9325      	str	r3, [sp, #148]	@ 0x94
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006e40:	931e      	str	r3, [sp, #120]	@ 0x78
 8006e42:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8006e46:	9337      	str	r3, [sp, #220]	@ 0xdc
 8006e48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dc6b      	bgt.n	8006f28 <forward_conv2d_nl_pool+0x2cc>
 8006e50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f2c0 80d4 	blt.w	8007000 <forward_conv2d_nl_pool+0x3a4>
 8006e58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e5a:	4598      	cmp	r8, r3
 8006e5c:	d352      	bcc.n	8006f04 <forward_conv2d_nl_pool+0x2a8>
 8006e5e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8006e60:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e62:	69b0      	ldr	r0, [r6, #24]
 8006e64:	440a      	add	r2, r1
 8006e66:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8006e68:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 8006e6a:	9216      	str	r2, [sp, #88]	@ 0x58
 8006e6c:	3701      	adds	r7, #1
 8006e6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e70:	9717      	str	r7, [sp, #92]	@ 0x5c
 8006e72:	3a01      	subs	r2, #1
 8006e74:	9213      	str	r2, [sp, #76]	@ 0x4c
 8006e76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e78:	1a52      	subs	r2, r2, r1
 8006e7a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8006e7c:	9215      	str	r2, [sp, #84]	@ 0x54
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8006e84:	9201      	str	r2, [sp, #4]
 8006e86:	1a52      	subs	r2, r2, r1
 8006e88:	eba8 0803 	sub.w	r8, r8, r3
 8006e8c:	9305      	str	r3, [sp, #20]
 8006e8e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006e90:	b292      	uxth	r2, r2
 8006e92:	fa1f f18a 	uxth.w	r1, sl
 8006e96:	9308      	str	r3, [sp, #32]
 8006e98:	fa0f f888 	sxth.w	r8, r8
 8006e9c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	9307      	str	r3, [sp, #28]
 8006ea6:	f8bd 307c 	ldrh.w	r3, [sp, #124]	@ 0x7c
 8006eaa:	9306      	str	r3, [sp, #24]
 8006eac:	f8bd 308c 	ldrh.w	r3, [sp, #140]	@ 0x8c
 8006eb0:	9304      	str	r3, [sp, #16]
 8006eb2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	@ 0x90
 8006eb6:	9302      	str	r3, [sp, #8]
 8006eb8:	f8bd 3088 	ldrh.w	r3, [sp, #136]	@ 0x88
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	fa1f f38b 	uxth.w	r3, fp
 8006ec2:	47a8      	blx	r5
 8006ec4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8006ec6:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	@ 0x68
 8006eca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006ecc:	1acb      	subs	r3, r1, r3
 8006ece:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ed2:	b219      	sxth	r1, r3
 8006ed4:	6893      	ldr	r3, [r2, #8]
 8006ed6:	9118      	str	r1, [sp, #96]	@ 0x60
 8006ed8:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8006eda:	440b      	add	r3, r1
 8006edc:	6093      	str	r3, [r2, #8]
 8006ede:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006ee0:	42bb      	cmp	r3, r7
 8006ee2:	d8b1      	bhi.n	8006e48 <forward_conv2d_nl_pool+0x1ec>
 8006ee4:	69b3      	ldr	r3, [r6, #24]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	609a      	str	r2, [r3, #8]
 8006eea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006eec:	68d3      	ldr	r3, [r2, #12]
 8006eee:	6093      	str	r3, [r2, #8]
 8006ef0:	b039      	add	sp, #228	@ 0xe4
 8006ef2:	ecbd 8b04 	vpop	{d8-d9}
 8006ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	deff      	udf	#255	@ 0xff
 8006efe:	2300      	movs	r3, #0
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	deff      	udf	#255	@ 0xff
 8006f04:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006f06:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f08:	4413      	add	r3, r2
 8006f0a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006f18:	9315      	str	r3, [sp, #84]	@ 0x54
 8006f1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d9e1      	bls.n	8006ee4 <forward_conv2d_nl_pool+0x288>
 8006f20:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f22:	3301      	adds	r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dd93      	ble.n	8006e50 <forward_conv2d_nl_pool+0x1f4>
 8006f28:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8006f2a:	ee19 1a10 	vmov	r1, s18
 8006f2e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f30:	4620      	mov	r0, r4
 8006f32:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f34:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006f3c:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8006f3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006f40:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f42:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8006f44:	9307      	str	r3, [sp, #28]
 8006f46:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8006f48:	9306      	str	r3, [sp, #24]
 8006f4a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8006f4c:	9305      	str	r3, [sp, #20]
 8006f4e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006f50:	e9cd a303 	strd	sl, r3, [sp, #12]
 8006f54:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8006f56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f5a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006f60:	4413      	add	r3, r2
 8006f62:	bfa8      	it	ge
 8006f64:	2200      	movge	r2, #0
 8006f66:	9208      	str	r2, [sp, #32]
 8006f68:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	bf28      	it	cs
 8006f6e:	4613      	movcs	r3, r2
 8006f70:	ee18 2a90 	vmov	r2, s17
 8006f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f76:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	@ 0x98
 8006f7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8006f7c:	ee18 3a10 	vmov	r3, s16
 8006f80:	f7ff f8e6 	bl	8006150 <ai_conv2d_stripe_f32.constprop.0>
 8006f84:	69b2      	ldr	r2, [r6, #24]
 8006f86:	f1ba 0f00 	cmp.w	sl, #0
 8006f8a:	f000 809e 	beq.w	80070ca <forward_conv2d_nl_pool+0x46e>
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4630      	mov	r0, r6
 8006f92:	465a      	mov	r2, fp
 8006f94:	4656      	mov	r6, sl
 8006f96:	f8cd 8084 	str.w	r8, [sp, #132]	@ 0x84
 8006f9a:	2700      	movs	r7, #0
 8006f9c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8006f9e:	f8dd 80b4 	ldr.w	r8, [sp, #180]	@ 0xb4
 8006fa2:	e9dd ba33 	ldrd	fp, sl, [sp, #204]	@ 0xcc
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	608c      	str	r4, [r1, #8]
 8006faa:	4601      	mov	r1, r0
 8006fac:	445d      	add	r5, fp
 8006fae:	9212      	str	r2, [sp, #72]	@ 0x48
 8006fb0:	4454      	add	r4, sl
 8006fb2:	9011      	str	r0, [sp, #68]	@ 0x44
 8006fb4:	47c0      	blx	r8
 8006fb6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8006fb8:	eba5 0309 	sub.w	r3, r5, r9
 8006fbc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006fbe:	3701      	adds	r7, #1
 8006fc0:	6981      	ldr	r1, [r0, #24]
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	bfa8      	it	ge
 8006fc6:	464d      	movge	r5, r9
 8006fc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006fca:	684b      	ldr	r3, [r1, #4]
 8006fcc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8006fd0:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 8006fd4:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8006fd8:	429c      	cmp	r4, r3
 8006fda:	bf28      	it	cs
 8006fdc:	eba4 040e 	subcs.w	r4, r4, lr
 8006fe0:	42be      	cmp	r6, r7
 8006fe2:	d1e0      	bne.n	8006fa6 <forward_conv2d_nl_pool+0x34a>
 8006fe4:	4693      	mov	fp, r2
 8006fe6:	46b2      	mov	sl, r6
 8006fe8:	460a      	mov	r2, r1
 8006fea:	f8dd 8084 	ldr.w	r8, [sp, #132]	@ 0x84
 8006fee:	4661      	mov	r1, ip
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	9511      	str	r5, [sp, #68]	@ 0x44
 8006ff4:	f108 0801 	add.w	r8, r8, #1
 8006ff8:	6091      	str	r1, [r2, #8]
 8006ffa:	fa0f f888 	sxth.w	r8, r8
 8006ffe:	e72b      	b.n	8006e58 <forward_conv2d_nl_pool+0x1fc>
 8007000:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8007002:	fb03 f208 	mul.w	r2, r3, r8
 8007006:	69b3      	ldr	r3, [r6, #24]
 8007008:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
 800700c:	68d9      	ldr	r1, [r3, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	4291      	cmp	r1, r2
 8007012:	bf88      	it	hi
 8007014:	eb02 0283 	addhi.w	r2, r2, r3, lsl #2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4291      	cmp	r1, r2
 800701c:	d21c      	bcs.n	8007058 <forward_conv2d_nl_pool+0x3fc>
 800701e:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 8007020:	4419      	add	r1, r3
 8007022:	4540      	cmp	r0, r8
 8007024:	d13f      	bne.n	80070a6 <forward_conv2d_nl_pool+0x44a>
 8007026:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8007028:	fa1f f888 	uxth.w	r8, r8
 800702c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800702e:	4402      	add	r2, r0
 8007030:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8007032:	eba2 0208 	sub.w	r2, r2, r8
 8007036:	4404      	add	r4, r0
 8007038:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800703a:	b212      	sxth	r2, r2
 800703c:	428c      	cmp	r4, r1
 800703e:	4480      	add	r8, r0
 8007040:	921e      	str	r2, [sp, #120]	@ 0x78
 8007042:	fa0f f888 	sxth.w	r8, r8
 8007046:	f4ff af07 	bcc.w	8006e58 <forward_conv2d_nl_pool+0x1fc>
 800704a:	425b      	negs	r3, r3
 800704c:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800704e:	441c      	add	r4, r3
 8007050:	428c      	cmp	r4, r1
 8007052:	d2fc      	bcs.n	800704e <forward_conv2d_nl_pool+0x3f2>
 8007054:	9511      	str	r5, [sp, #68]	@ 0x44
 8007056:	e6ff      	b.n	8006e58 <forward_conv2d_nl_pool+0x1fc>
 8007058:	4419      	add	r1, r3
 800705a:	e7e4      	b.n	8007026 <forward_conv2d_nl_pool+0x3ca>
 800705c:	68d6      	ldr	r6, [r2, #12]
 800705e:	2e00      	cmp	r6, #0
 8007060:	f43f aeb7 	beq.w	8006dd2 <forward_conv2d_nl_pool+0x176>
 8007064:	2b03      	cmp	r3, #3
 8007066:	d962      	bls.n	800712e <forward_conv2d_nl_pool+0x4d2>
 8007068:	684b      	ldr	r3, [r1, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d04f      	beq.n	8007110 <forward_conv2d_nl_pool+0x4b4>
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d04c      	beq.n	8007110 <forward_conv2d_nl_pool+0x4b4>
 8007076:	699f      	ldr	r7, [r3, #24]
 8007078:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800707c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8007080:	6891      	ldr	r1, [r2, #8]
 8007082:	4632      	mov	r2, r6
 8007084:	4103      	asrs	r3, r0
 8007086:	e9d7 0601 	ldrd	r0, r6, [r7, #4]
 800708a:	b29b      	uxth	r3, r3
 800708c:	9001      	str	r0, [sp, #4]
 800708e:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 8007090:	9000      	str	r0, [sp, #0]
 8007092:	4630      	mov	r0, r6
 8007094:	f7ff fd92 	bl	8006bbc <ai_dict_decompress_f32>
 8007098:	69a1      	ldr	r1, [r4, #24]
 800709a:	2e00      	cmp	r6, #0
 800709c:	d03b      	beq.n	8007116 <forward_conv2d_nl_pool+0x4ba>
 800709e:	ee08 6a90 	vmov	s17, r6
 80070a2:	880b      	ldrh	r3, [r1, #0]
 80070a4:	e695      	b.n	8006dd2 <forward_conv2d_nl_pool+0x176>
 80070a6:	428a      	cmp	r2, r1
 80070a8:	d2bd      	bcs.n	8007026 <forward_conv2d_nl_pool+0x3ca>
 80070aa:	4620      	mov	r0, r4
 80070ac:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80070ae:	f852 3b04 	ldr.w	r3, [r2], #4
 80070b2:	f840 3b04 	str.w	r3, [r0], #4
 80070b6:	69b1      	ldr	r1, [r6, #24]
 80070b8:	684b      	ldr	r3, [r1, #4]
 80070ba:	68c9      	ldr	r1, [r1, #12]
 80070bc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4291      	cmp	r1, r2
 80070c4:	d8f3      	bhi.n	80070ae <forward_conv2d_nl_pool+0x452>
 80070c6:	9511      	str	r5, [sp, #68]	@ 0x44
 80070c8:	e7ad      	b.n	8007026 <forward_conv2d_nl_pool+0x3ca>
 80070ca:	68d1      	ldr	r1, [r2, #12]
 80070cc:	e792      	b.n	8006ff4 <forward_conv2d_nl_pool+0x398>
 80070ce:	4819      	ldr	r0, [pc, #100]	@ (8007134 <forward_conv2d_nl_pool+0x4d8>)
 80070d0:	902d      	str	r0, [sp, #180]	@ 0xb4
 80070d2:	e64e      	b.n	8006d72 <forward_conv2d_nl_pool+0x116>
 80070d4:	f1b9 0f00 	cmp.w	r9, #0
 80070d8:	d00b      	beq.n	80070f2 <forward_conv2d_nl_pool+0x496>
 80070da:	9033      	str	r0, [sp, #204]	@ 0xcc
 80070dc:	2001      	movs	r0, #1
 80070de:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80070e2:	9014      	str	r0, [sp, #80]	@ 0x50
 80070e4:	e640      	b.n	8006d68 <forward_conv2d_nl_pool+0x10c>
 80070e6:	f1b9 0f00 	cmp.w	r9, #0
 80070ea:	d001      	beq.n	80070f0 <forward_conv2d_nl_pool+0x494>
 80070ec:	f8d9 9008 	ldr.w	r9, [r9, #8]
 80070f0:	2000      	movs	r0, #0
 80070f2:	9033      	str	r0, [sp, #204]	@ 0xcc
 80070f4:	2001      	movs	r0, #1
 80070f6:	9014      	str	r0, [sp, #80]	@ 0x50
 80070f8:	e636      	b.n	8006d68 <forward_conv2d_nl_pool+0x10c>
 80070fa:	8b36      	ldrh	r6, [r6, #24]
 80070fc:	2e01      	cmp	r6, #1
 80070fe:	d90f      	bls.n	8007120 <forward_conv2d_nl_pool+0x4c4>
 8007100:	ee08 0a10 	vmov	s16, r0
 8007104:	4606      	mov	r6, r0
 8007106:	e5d0      	b.n	8006caa <forward_conv2d_nl_pool+0x4e>
 8007108:	2500      	movs	r5, #0
 800710a:	ee08 5a10 	vmov	s16, r5
 800710e:	e5cb      	b.n	8006ca8 <forward_conv2d_nl_pool+0x4c>
 8007110:	2300      	movs	r3, #0
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	deff      	udf	#255	@ 0xff
 8007116:	880b      	ldrh	r3, [r1, #0]
 8007118:	e65b      	b.n	8006dd2 <forward_conv2d_nl_pool+0x176>
 800711a:	2300      	movs	r3, #0
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	deff      	udf	#255	@ 0xff
 8007120:	68c3      	ldr	r3, [r0, #12]
 8007122:	deff      	udf	#255	@ 0xff
 8007124:	2300      	movs	r3, #0
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	deff      	udf	#255	@ 0xff
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	deff      	udf	#255	@ 0xff
 800712e:	2300      	movs	r3, #0
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	deff      	udf	#255	@ 0xff
 8007134:	0800614d 	.word	0x0800614d

08007138 <forward_dense>:
 8007138:	6983      	ldr	r3, [r0, #24]
 800713a:	881a      	ldrh	r2, [r3, #0]
 800713c:	2a00      	cmp	r2, #0
 800713e:	f000 80f0 	beq.w	8007322 <forward_dense+0x1ea>
 8007142:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007146:	ed2d 8b02 	vpush	{d8}
 800714a:	6858      	ldr	r0, [r3, #4]
 800714c:	b09b      	sub	sp, #108	@ 0x6c
 800714e:	6845      	ldr	r5, [r0, #4]
 8007150:	b105      	cbz	r5, 8007154 <forward_dense+0x1c>
 8007152:	682d      	ldr	r5, [r5, #0]
 8007154:	2a01      	cmp	r2, #1
 8007156:	f000 840a 	beq.w	800796e <forward_dense+0x836>
 800715a:	6906      	ldr	r6, [r0, #16]
 800715c:	b106      	cbz	r6, 8007160 <forward_dense+0x28>
 800715e:	6836      	ldr	r6, [r6, #0]
 8007160:	2a02      	cmp	r2, #2
 8007162:	f000 80e0 	beq.w	8007326 <forward_dense+0x1ee>
 8007166:	69c3      	ldr	r3, [r0, #28]
 8007168:	930d      	str	r3, [sp, #52]	@ 0x34
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 83f1 	beq.w	8007952 <forward_dense+0x81a>
 8007170:	4619      	mov	r1, r3
 8007172:	8b03      	ldrh	r3, [r0, #24]
 8007174:	6809      	ldr	r1, [r1, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	910f      	str	r1, [sp, #60]	@ 0x3c
 800717a:	f240 83ec 	bls.w	8007956 <forward_dense+0x81e>
 800717e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	930d      	str	r3, [sp, #52]	@ 0x34
 8007184:	460b      	mov	r3, r1
 8007186:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800718a:	2a03      	cmp	r2, #3
 800718c:	68eb      	ldr	r3, [r5, #12]
 800718e:	68f7      	ldr	r7, [r6, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687c      	ldr	r4, [r7, #4]
 8007194:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007196:	f8d8 3000 	ldr.w	r3, [r8]
 800719a:	4621      	mov	r1, r4
 800719c:	9419      	str	r4, [sp, #100]	@ 0x64
 800719e:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80071a2:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 80071a6:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80071aa:	fb01 f404 	mul.w	r4, r1, r4
 80071ae:	fa4e f10c 	asr.w	r1, lr, ip
 80071b2:	9116      	str	r1, [sp, #88]	@ 0x58
 80071b4:	f000 83d8 	beq.w	8007968 <forward_dense+0x830>
 80071b8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80071ba:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80071be:	2a00      	cmp	r2, #0
 80071c0:	f000 83c2 	beq.w	8007948 <forward_dense+0x810>
 80071c4:	6812      	ldr	r2, [r2, #0]
 80071c6:	2a00      	cmp	r2, #0
 80071c8:	f000 83be 	beq.w	8007948 <forward_dense+0x810>
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80071d2:	f000 83a8 	beq.w	8007926 <forward_dense+0x7ee>
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	f000 83a5 	beq.w	8007926 <forward_dense+0x7ee>
 80071dc:	f04f 0a00 	mov.w	sl, #0
 80071e0:	69ab      	ldr	r3, [r5, #24]
 80071e2:	fb07 f404 	mul.w	r4, r7, r4
 80071e6:	69b2      	ldr	r2, [r6, #24]
 80071e8:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80071ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ee:	6892      	ldr	r2, [r2, #8]
 80071f0:	695b      	ldr	r3, [r3, #20]
 80071f2:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80071f6:	9206      	str	r2, [sp, #24]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	428a      	cmp	r2, r1
 80071fc:	9110      	str	r1, [sp, #64]	@ 0x40
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007202:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8007206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800720a:	900e      	str	r0, [sp, #56]	@ 0x38
 800720c:	9303      	str	r3, [sp, #12]
 800720e:	f080 8380 	bcs.w	8007912 <forward_dense+0x7da>
 8007212:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007214:	4654      	mov	r4, sl
 8007216:	4bb9      	ldr	r3, [pc, #740]	@ (80074fc <forward_dense+0x3c4>)
 8007218:	46ca      	mov	sl, r9
 800721a:	08d0      	lsrs	r0, r2, #3
 800721c:	ed9f 8ab8 	vldr	s16, [pc, #736]	@ 8007500 <forward_dense+0x3c8>
 8007220:	4413      	add	r3, r2
 8007222:	9009      	str	r0, [sp, #36]	@ 0x24
 8007224:	0099      	lsls	r1, r3, #2
 8007226:	f022 0301 	bic.w	r3, r2, #1
 800722a:	f002 0201 	and.w	r2, r2, #1
 800722e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007232:	9118      	str	r1, [sp, #96]	@ 0x60
 8007234:	920a      	str	r2, [sp, #40]	@ 0x28
 8007236:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800723a:	9305      	str	r3, [sp, #20]
 800723c:	f101 0320 	add.w	r3, r1, #32
 8007240:	9207      	str	r2, [sp, #28]
 8007242:	9311      	str	r3, [sp, #68]	@ 0x44
 8007244:	444b      	add	r3, r9
 8007246:	469b      	mov	fp, r3
 8007248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800724a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007252:	b10b      	cbz	r3, 8007258 <forward_dense+0x120>
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2c00      	cmp	r4, #0
 800725a:	f000 834b 	beq.w	80078f4 <forward_dense+0x7bc>
 800725e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8007260:	2904      	cmp	r1, #4
 8007262:	f000 826a 	beq.w	800773a <forward_dense+0x602>
 8007266:	9903      	ldr	r1, [sp, #12]
 8007268:	9806      	ldr	r0, [sp, #24]
 800726a:	4281      	cmp	r1, r0
 800726c:	f240 8356 	bls.w	800791c <forward_dense+0x7e4>
 8007270:	4686      	mov	lr, r0
 8007272:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8007274:	eb00 090a 	add.w	r9, r0, sl
 8007278:	0941      	lsrs	r1, r0, #5
 800727a:	f10a 0004 	add.w	r0, sl, #4
 800727e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007282:	9012      	str	r0, [sp, #72]	@ 0x48
 8007284:	1c48      	adds	r0, r1, #1
 8007286:	00c9      	lsls	r1, r1, #3
 8007288:	3110      	adds	r1, #16
 800728a:	9115      	str	r1, [sp, #84]	@ 0x54
 800728c:	00c1      	lsls	r1, r0, #3
 800728e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007290:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8007294:	9114      	str	r1, [sp, #80]	@ 0x50
 8007296:	f1a9 0104 	sub.w	r1, r9, #4
 800729a:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 800729e:	910c      	str	r1, [sp, #48]	@ 0x30
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8128 	beq.w	80074f6 <forward_dense+0x3be>
 80072a6:	ecb3 5a01 	vldmia	r3!, {s10}
 80072aa:	f1b9 0f07 	cmp.w	r9, #7
 80072ae:	d83d      	bhi.n	800732c <forward_dense+0x1f4>
 80072b0:	45da      	cmp	sl, fp
 80072b2:	d211      	bcs.n	80072d8 <forward_dense+0x1a0>
 80072b4:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8007500 <forward_dense+0x3c8>
 80072b8:	4650      	mov	r0, sl
 80072ba:	4615      	mov	r5, r2
 80072bc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80072c0:	ecb0 7a01 	vldmia	r0!, {s14}
 80072c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80072c8:	4558      	cmp	r0, fp
 80072ca:	edd1 6a00 	vldr	s13, [r1]
 80072ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 80072d2:	d3f3      	bcc.n	80072bc <forward_dense+0x184>
 80072d4:	ee35 5a27 	vadd.f32	s10, s10, s15
 80072d8:	9904      	ldr	r1, [sp, #16]
 80072da:	ecae 5a01 	vstmia	lr!, {s10}
 80072de:	440a      	add	r2, r1
 80072e0:	9903      	ldr	r1, [sp, #12]
 80072e2:	458e      	cmp	lr, r1
 80072e4:	d3dc      	bcc.n	80072a0 <forward_dense+0x168>
 80072e6:	9a06      	ldr	r2, [sp, #24]
 80072e8:	1a8b      	subs	r3, r1, r2
 80072ea:	3b01      	subs	r3, #1
 80072ec:	f023 0303 	bic.w	r3, r3, #3
 80072f0:	3304      	adds	r3, #4
 80072f2:	18d3      	adds	r3, r2, r3
 80072f4:	4619      	mov	r1, r3
 80072f6:	9306      	str	r3, [sp, #24]
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80072fe:	4413      	add	r3, r2
 8007300:	9a07      	ldr	r2, [sp, #28]
 8007302:	4281      	cmp	r1, r0
 8007304:	9303      	str	r3, [sp, #12]
 8007306:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007308:	441a      	add	r2, r3
 800730a:	449b      	add	fp, r3
 800730c:	9207      	str	r2, [sp, #28]
 800730e:	9a05      	ldr	r2, [sp, #20]
 8007310:	441a      	add	r2, r3
 8007312:	9205      	str	r2, [sp, #20]
 8007314:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007316:	4692      	mov	sl, r2
 8007318:	f080 82fb 	bcs.w	8007912 <forward_dense+0x7da>
 800731c:	441a      	add	r2, r3
 800731e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007320:	e793      	b.n	800724a <forward_dense+0x112>
 8007322:	6853      	ldr	r3, [r2, #4]
 8007324:	deff      	udf	#255	@ 0xff
 8007326:	2300      	movs	r3, #0
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	deff      	udf	#255	@ 0xff
 800732c:	f002 0103 	and.w	r1, r2, #3
 8007330:	2902      	cmp	r1, #2
 8007332:	f000 81e6 	beq.w	8007702 <forward_dense+0x5ca>
 8007336:	2903      	cmp	r1, #3
 8007338:	f000 80e4 	beq.w	8007504 <forward_dense+0x3cc>
 800733c:	2901      	cmp	r1, #1
 800733e:	f000 81ef 	beq.w	8007720 <forward_dense+0x5e8>
 8007342:	9908      	ldr	r1, [sp, #32]
 8007344:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8007500 <forward_dense+0x3c8>
 8007348:	458a      	cmp	sl, r1
 800734a:	f200 82e9 	bhi.w	8007920 <forward_dense+0x7e8>
 800734e:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8007350:	f102 0108 	add.w	r1, r2, #8
 8007354:	f10a 0020 	add.w	r0, sl, #32
 8007358:	18ae      	adds	r6, r5, r2
 800735a:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800735e:	3108      	adds	r1, #8
 8007360:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 8007364:	3020      	adds	r0, #32
 8007366:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800736a:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 800736e:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 8007372:	edd5 7a00 	vldr	s15, [r5]
 8007376:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800737a:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800737e:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8007382:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007386:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 800738a:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 800738e:	edd5 2a00 	vldr	s5, [r5]
 8007392:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8007396:	eee2 7a83 	vfma.f32	s15, s5, s6
 800739a:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 800739e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80073a2:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 80073a6:	ed95 3a00 	vldr	s6, [r5]
 80073aa:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80073ae:	eee3 7a23 	vfma.f32	s15, s6, s7
 80073b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80073b6:	edd5 3a00 	vldr	s7, [r5]
 80073ba:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80073be:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80073c2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80073c6:	ed95 4a00 	vldr	s8, [r5]
 80073ca:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80073ce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80073d2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80073d6:	edd5 4a00 	vldr	s9, [r5]
 80073da:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80073de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80073e2:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80073e6:	edd5 5a00 	vldr	s11, [r5]
 80073ea:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80073ee:	428e      	cmp	r6, r1
 80073f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80073f4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80073f8:	ed95 6a00 	vldr	s12, [r5]
 80073fc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007404:	d1a9      	bne.n	800735a <forward_dense+0x222>
 8007406:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007408:	1850      	adds	r0, r2, r1
 800740a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800740c:	4559      	cmp	r1, fp
 800740e:	d26f      	bcs.n	80074f0 <forward_dense+0x3b8>
 8007410:	7805      	ldrb	r5, [r0, #0]
 8007412:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007416:	edd5 7a00 	vldr	s15, [r5]
 800741a:	460d      	mov	r5, r1
 800741c:	ecf5 6a01 	vldmia	r5!, {s13}
 8007420:	45ab      	cmp	fp, r5
 8007422:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007426:	d963      	bls.n	80074f0 <forward_dense+0x3b8>
 8007428:	7845      	ldrb	r5, [r0, #1]
 800742a:	edd1 6a01 	vldr	s13, [r1, #4]
 800742e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007432:	edd5 7a00 	vldr	s15, [r5]
 8007436:	f101 0508 	add.w	r5, r1, #8
 800743a:	45ab      	cmp	fp, r5
 800743c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007440:	d956      	bls.n	80074f0 <forward_dense+0x3b8>
 8007442:	7885      	ldrb	r5, [r0, #2]
 8007444:	edd1 6a02 	vldr	s13, [r1, #8]
 8007448:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800744c:	edd5 7a00 	vldr	s15, [r5]
 8007450:	f101 050c 	add.w	r5, r1, #12
 8007454:	45ab      	cmp	fp, r5
 8007456:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800745a:	d949      	bls.n	80074f0 <forward_dense+0x3b8>
 800745c:	78c5      	ldrb	r5, [r0, #3]
 800745e:	edd1 6a03 	vldr	s13, [r1, #12]
 8007462:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007466:	edd5 7a00 	vldr	s15, [r5]
 800746a:	f101 0510 	add.w	r5, r1, #16
 800746e:	45ab      	cmp	fp, r5
 8007470:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007474:	d93c      	bls.n	80074f0 <forward_dense+0x3b8>
 8007476:	7905      	ldrb	r5, [r0, #4]
 8007478:	edd1 6a04 	vldr	s13, [r1, #16]
 800747c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007480:	edd5 7a00 	vldr	s15, [r5]
 8007484:	f101 0514 	add.w	r5, r1, #20
 8007488:	45ab      	cmp	fp, r5
 800748a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800748e:	d92f      	bls.n	80074f0 <forward_dense+0x3b8>
 8007490:	7945      	ldrb	r5, [r0, #5]
 8007492:	edd1 6a05 	vldr	s13, [r1, #20]
 8007496:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800749a:	edd5 7a00 	vldr	s15, [r5]
 800749e:	f101 0518 	add.w	r5, r1, #24
 80074a2:	45ab      	cmp	fp, r5
 80074a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074a8:	d922      	bls.n	80074f0 <forward_dense+0x3b8>
 80074aa:	7985      	ldrb	r5, [r0, #6]
 80074ac:	edd1 6a06 	vldr	s13, [r1, #24]
 80074b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074b4:	edd5 7a00 	vldr	s15, [r5]
 80074b8:	f101 051c 	add.w	r5, r1, #28
 80074bc:	45ab      	cmp	fp, r5
 80074be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074c2:	d915      	bls.n	80074f0 <forward_dense+0x3b8>
 80074c4:	79c5      	ldrb	r5, [r0, #7]
 80074c6:	edd1 6a07 	vldr	s13, [r1, #28]
 80074ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074ce:	edd5 7a00 	vldr	s15, [r5]
 80074d2:	f101 0520 	add.w	r5, r1, #32
 80074d6:	45ab      	cmp	fp, r5
 80074d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074dc:	d908      	bls.n	80074f0 <forward_dense+0x3b8>
 80074de:	edd1 7a08 	vldr	s15, [r1, #32]
 80074e2:	7a01      	ldrb	r1, [r0, #8]
 80074e4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80074e8:	edd1 6a00 	vldr	s13, [r1]
 80074ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074f0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80074f4:	e6f0      	b.n	80072d8 <forward_dense+0x1a0>
 80074f6:	ed9f 5a02 	vldr	s10, [pc, #8]	@ 8007500 <forward_dense+0x3c8>
 80074fa:	e6d6      	b.n	80072aa <forward_dense+0x172>
 80074fc:	3ffffff8 	.word	0x3ffffff8
 8007500:	00000000 	.word	0x00000000
 8007504:	eeb0 7a48 	vmov.f32	s14, s16
 8007508:	4650      	mov	r0, sl
 800750a:	4611      	mov	r1, r2
 800750c:	468c      	mov	ip, r1
 800750e:	4606      	mov	r6, r0
 8007510:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8007514:	ecf6 7a01 	vldmia	r6!, {s15}
 8007518:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800751c:	edd5 6a00 	vldr	s13, [r5]
 8007520:	9d08      	ldr	r5, [sp, #32]
 8007522:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007526:	42ae      	cmp	r6, r5
 8007528:	d866      	bhi.n	80075f8 <forward_dense+0x4c0>
 800752a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800752c:	f101 0711 	add.w	r7, r1, #17
 8007530:	3109      	adds	r1, #9
 8007532:	eba5 0800 	sub.w	r8, r5, r0
 8007536:	3024      	adds	r0, #36	@ 0x24
 8007538:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800753c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8007540:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007544:	3108      	adds	r1, #8
 8007546:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 800754a:	3020      	adds	r0, #32
 800754c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007550:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8007554:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 8007558:	edd5 7a00 	vldr	s15, [r5]
 800755c:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8007560:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007564:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8007568:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800756c:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 8007570:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 8007574:	edd5 2a00 	vldr	s5, [r5]
 8007578:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800757c:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007580:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 8007584:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007588:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 800758c:	ed95 3a00 	vldr	s6, [r5]
 8007590:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007594:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007598:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800759c:	edd5 3a00 	vldr	s7, [r5]
 80075a0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80075a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075a8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80075ac:	ed95 4a00 	vldr	s8, [r5]
 80075b0:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80075b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80075bc:	edd5 4a00 	vldr	s9, [r5]
 80075c0:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80075c4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075c8:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80075cc:	edd5 5a00 	vldr	s11, [r5]
 80075d0:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80075d4:	428f      	cmp	r7, r1
 80075d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075da:	eee5 7a86 	vfma.f32	s15, s11, s12
 80075de:	ed95 6a00 	vldr	s12, [r5]
 80075e2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80075e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075ea:	d1a9      	bne.n	8007540 <forward_dense+0x408>
 80075ec:	f108 0801 	add.w	r8, r8, #1
 80075f0:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80075f4:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80075f8:	455e      	cmp	r6, fp
 80075fa:	f4bf af79 	bcs.w	80074f0 <forward_dense+0x3b8>
 80075fe:	f89c 1000 	ldrb.w	r1, [ip]
 8007602:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007606:	edd1 7a00 	vldr	s15, [r1]
 800760a:	4631      	mov	r1, r6
 800760c:	ecf1 6a01 	vldmia	r1!, {s13}
 8007610:	458b      	cmp	fp, r1
 8007612:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007616:	f67f af6b 	bls.w	80074f0 <forward_dense+0x3b8>
 800761a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800761e:	edd6 6a01 	vldr	s13, [r6, #4]
 8007622:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007626:	edd1 7a00 	vldr	s15, [r1]
 800762a:	f106 0108 	add.w	r1, r6, #8
 800762e:	458b      	cmp	fp, r1
 8007630:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007634:	f67f af5c 	bls.w	80074f0 <forward_dense+0x3b8>
 8007638:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800763c:	edd6 6a02 	vldr	s13, [r6, #8]
 8007640:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007644:	edd1 7a00 	vldr	s15, [r1]
 8007648:	f106 010c 	add.w	r1, r6, #12
 800764c:	458b      	cmp	fp, r1
 800764e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007652:	f67f af4d 	bls.w	80074f0 <forward_dense+0x3b8>
 8007656:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800765a:	edd6 6a03 	vldr	s13, [r6, #12]
 800765e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007662:	edd1 7a00 	vldr	s15, [r1]
 8007666:	f106 0110 	add.w	r1, r6, #16
 800766a:	458b      	cmp	fp, r1
 800766c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007670:	f67f af3e 	bls.w	80074f0 <forward_dense+0x3b8>
 8007674:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8007678:	edd6 6a04 	vldr	s13, [r6, #16]
 800767c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007680:	edd1 7a00 	vldr	s15, [r1]
 8007684:	f106 0114 	add.w	r1, r6, #20
 8007688:	458b      	cmp	fp, r1
 800768a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800768e:	f67f af2f 	bls.w	80074f0 <forward_dense+0x3b8>
 8007692:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8007696:	edd6 6a05 	vldr	s13, [r6, #20]
 800769a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800769e:	edd1 7a00 	vldr	s15, [r1]
 80076a2:	f106 0118 	add.w	r1, r6, #24
 80076a6:	458b      	cmp	fp, r1
 80076a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076ac:	f67f af20 	bls.w	80074f0 <forward_dense+0x3b8>
 80076b0:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80076b4:	edd6 6a06 	vldr	s13, [r6, #24]
 80076b8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80076bc:	edd1 7a00 	vldr	s15, [r1]
 80076c0:	f106 011c 	add.w	r1, r6, #28
 80076c4:	458b      	cmp	fp, r1
 80076c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076ca:	f67f af11 	bls.w	80074f0 <forward_dense+0x3b8>
 80076ce:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80076d2:	edd6 6a07 	vldr	s13, [r6, #28]
 80076d6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80076da:	edd1 7a00 	vldr	s15, [r1]
 80076de:	f106 0120 	add.w	r1, r6, #32
 80076e2:	458b      	cmp	fp, r1
 80076e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076e8:	f67f af02 	bls.w	80074f0 <forward_dense+0x3b8>
 80076ec:	f89c 1008 	ldrb.w	r1, [ip, #8]
 80076f0:	edd6 7a08 	vldr	s15, [r6, #32]
 80076f4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80076f8:	edd1 6a00 	vldr	s13, [r1]
 80076fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007700:	e6f6      	b.n	80074f0 <forward_dense+0x3b8>
 8007702:	eeb0 7a48 	vmov.f32	s14, s16
 8007706:	4650      	mov	r0, sl
 8007708:	4611      	mov	r1, r2
 800770a:	f811 5b01 	ldrb.w	r5, [r1], #1
 800770e:	ecf0 7a01 	vldmia	r0!, {s15}
 8007712:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007716:	edd5 6a00 	vldr	s13, [r5]
 800771a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800771e:	e6f5      	b.n	800750c <forward_dense+0x3d4>
 8007720:	4611      	mov	r1, r2
 8007722:	edda 7a00 	vldr	s15, [sl]
 8007726:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007728:	f811 5b01 	ldrb.w	r5, [r1], #1
 800772c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007730:	ed95 7a00 	vldr	s14, [r5]
 8007734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007738:	e7e7      	b.n	800770a <forward_dense+0x5d2>
 800773a:	9803      	ldr	r0, [sp, #12]
 800773c:	9906      	ldr	r1, [sp, #24]
 800773e:	4288      	cmp	r0, r1
 8007740:	f67f adda 	bls.w	80072f8 <forward_dense+0x1c0>
 8007744:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007746:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800774a:	468b      	mov	fp, r1
 800774c:	f100 0c01 	add.w	ip, r0, #1
 8007750:	9805      	ldr	r0, [sp, #20]
 8007752:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007756:	3801      	subs	r0, #1
 8007758:	9008      	str	r0, [sp, #32]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80bf 	beq.w	80078de <forward_dense+0x7a6>
 8007760:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007762:	ecf3 2a01 	vldmia	r3!, {s5}
 8007766:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 8007500 <forward_dense+0x3c8>
 800776a:	2900      	cmp	r1, #0
 800776c:	f000 80bf 	beq.w	80078ee <forward_dense+0x7b6>
 8007770:	1d10      	adds	r0, r2, #4
 8007772:	f10a 0120 	add.w	r1, sl, #32
 8007776:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800777a:	3004      	adds	r0, #4
 800777c:	ed11 2a07 	vldr	s4, [r1, #-28]	@ 0xffffffe4
 8007780:	3120      	adds	r1, #32
 8007782:	f007 0e0f 	and.w	lr, r7, #15
 8007786:	093f      	lsrs	r7, r7, #4
 8007788:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800778c:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8007790:	ed11 4a10 	vldr	s8, [r1, #-64]	@ 0xffffffc0
 8007794:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007798:	ed51 3a0e 	vldr	s7, [r1, #-56]	@ 0xffffffc8
 800779c:	edde 7a00 	vldr	s15, [lr]
 80077a0:	ed97 3a00 	vldr	s6, [r7]
 80077a4:	0937      	lsrs	r7, r6, #4
 80077a6:	ee67 7a82 	vmul.f32	s15, s15, s4
 80077aa:	f006 060f 	and.w	r6, r6, #15
 80077ae:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80077b2:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 80077b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80077ba:	ed11 5a0d 	vldr	s10, [r1, #-52]	@ 0xffffffcc
 80077be:	eee3 7a04 	vfma.f32	s15, s6, s8
 80077c2:	ed97 3a00 	vldr	s6, [r7]
 80077c6:	ed96 4a00 	vldr	s8, [r6]
 80077ca:	092e      	lsrs	r6, r5, #4
 80077cc:	ed51 4a0c 	vldr	s9, [r1, #-48]	@ 0xffffffd0
 80077d0:	f005 050f 	and.w	r5, r5, #15
 80077d4:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80077d8:	ed11 6a0b 	vldr	s12, [r1, #-44]	@ 0xffffffd4
 80077dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077e0:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 80077e4:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 80077e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80077ec:	eee4 7a05 	vfma.f32	s15, s8, s10
 80077f0:	ed96 4a00 	vldr	s8, [r6]
 80077f4:	ed95 5a00 	vldr	s10, [r5]
 80077f8:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80077fc:	4560      	cmp	r0, ip
 80077fe:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8007802:	f005 050f 	and.w	r5, r5, #15
 8007806:	eee4 7a24 	vfma.f32	s15, s8, s9
 800780a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800780e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007812:	eee5 7a06 	vfma.f32	s15, s10, s12
 8007816:	ed96 5a00 	vldr	s10, [r6]
 800781a:	ed95 6a00 	vldr	s12, [r5]
 800781e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007822:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800782a:	d1a4      	bne.n	8007776 <forward_dense+0x63e>
 800782c:	f1ac 0804 	sub.w	r8, ip, #4
 8007830:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8007834:	9905      	ldr	r1, [sp, #20]
 8007836:	458e      	cmp	lr, r1
 8007838:	d229      	bcs.n	800788e <forward_dense+0x756>
 800783a:	9908      	ldr	r1, [sp, #32]
 800783c:	f10e 0008 	add.w	r0, lr, #8
 8007840:	f108 36ff 	add.w	r6, r8, #4294967295
 8007844:	eba1 070e 	sub.w	r7, r1, lr
 8007848:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800784c:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8007850:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007854:	3008      	adds	r0, #8
 8007856:	ed50 5a03 	vldr	s11, [r0, #-12]
 800785a:	f001 050f 	and.w	r5, r1, #15
 800785e:	0909      	lsrs	r1, r1, #4
 8007860:	ed50 6a04 	vldr	s13, [r0, #-16]
 8007864:	42b7      	cmp	r7, r6
 8007866:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800786a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800786e:	edd5 7a00 	vldr	s15, [r5]
 8007872:	ed91 6a00 	vldr	s12, [r1]
 8007876:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800787a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800787e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007882:	d1e5      	bne.n	8007850 <forward_dense+0x718>
 8007884:	f109 0901 	add.w	r9, r9, #1
 8007888:	44c8      	add	r8, r9
 800788a:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800788e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007890:	b1c1      	cbz	r1, 80078c4 <forward_dense+0x78c>
 8007892:	f898 1000 	ldrb.w	r1, [r8]
 8007896:	edde 7a00 	vldr	s15, [lr]
 800789a:	0909      	lsrs	r1, r1, #4
 800789c:	9804      	ldr	r0, [sp, #16]
 800789e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80078a2:	4402      	add	r2, r0
 80078a4:	4484      	add	ip, r0
 80078a6:	edd1 6a00 	vldr	s13, [r1]
 80078aa:	9903      	ldr	r1, [sp, #12]
 80078ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80078b0:	ee72 2a87 	vadd.f32	s5, s5, s14
 80078b4:	eceb 2a01 	vstmia	fp!, {s5}
 80078b8:	4559      	cmp	r1, fp
 80078ba:	f63f af4e 	bhi.w	800775a <forward_dense+0x622>
 80078be:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 80078c2:	e510      	b.n	80072e6 <forward_dense+0x1ae>
 80078c4:	9904      	ldr	r1, [sp, #16]
 80078c6:	ee32 7a87 	vadd.f32	s14, s5, s14
 80078ca:	440a      	add	r2, r1
 80078cc:	448c      	add	ip, r1
 80078ce:	9903      	ldr	r1, [sp, #12]
 80078d0:	ecab 7a01 	vstmia	fp!, {s14}
 80078d4:	458b      	cmp	fp, r1
 80078d6:	d2f2      	bcs.n	80078be <forward_dense+0x786>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f47f af41 	bne.w	8007760 <forward_dense+0x628>
 80078de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078e0:	eef0 2a48 	vmov.f32	s5, s16
 80078e4:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8007974 <forward_dense+0x83c>
 80078e8:	2900      	cmp	r1, #0
 80078ea:	f47f af41 	bne.w	8007770 <forward_dense+0x638>
 80078ee:	46d6      	mov	lr, sl
 80078f0:	4690      	mov	r8, r2
 80078f2:	e79f      	b.n	8007834 <forward_dense+0x6fc>
 80078f4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80078f6:	4651      	mov	r1, sl
 80078f8:	9d06      	ldr	r5, [sp, #24]
 80078fa:	9001      	str	r0, [sp, #4]
 80078fc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80078fe:	9000      	str	r0, [sp, #0]
 8007900:	4628      	mov	r0, r5
 8007902:	f000 fc77 	bl	80081f4 <lite_dense_if32of32wf32>
 8007906:	462b      	mov	r3, r5
 8007908:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800790a:	4413      	add	r3, r2
 800790c:	4619      	mov	r1, r3
 800790e:	9306      	str	r3, [sp, #24]
 8007910:	e4f2      	b.n	80072f8 <forward_dense+0x1c0>
 8007912:	b01b      	add	sp, #108	@ 0x6c
 8007914:	ecbd 8b02 	vpop	{d8}
 8007918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791c:	4601      	mov	r1, r0
 800791e:	e4eb      	b.n	80072f8 <forward_dense+0x1c0>
 8007920:	4651      	mov	r1, sl
 8007922:	4610      	mov	r0, r2
 8007924:	e572      	b.n	800740c <forward_dense+0x2d4>
 8007926:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800792a:	f1b9 0f00 	cmp.w	r9, #0
 800792e:	d016      	beq.n	800795e <forward_dense+0x826>
 8007930:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007934:	f000 fe0e 	bl	8008554 <ai_array_get_byte_size>
 8007938:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800793c:	4602      	mov	r2, r0
 800793e:	4641      	mov	r1, r8
 8007940:	4650      	mov	r0, sl
 8007942:	f001 fde6 	bl	8009512 <memcpy>
 8007946:	e44b      	b.n	80071e0 <forward_dense+0xa8>
 8007948:	2b04      	cmp	r3, #4
 800794a:	d00a      	beq.n	8007962 <forward_dense+0x82a>
 800794c:	f04f 0900 	mov.w	r9, #0
 8007950:	e441      	b.n	80071d6 <forward_dense+0x9e>
 8007952:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007954:	e417      	b.n	8007186 <forward_dense+0x4e>
 8007956:	2300      	movs	r3, #0
 8007958:	930d      	str	r3, [sp, #52]	@ 0x34
 800795a:	460b      	mov	r3, r1
 800795c:	e413      	b.n	8007186 <forward_dense+0x4e>
 800795e:	46c2      	mov	sl, r8
 8007960:	e43e      	b.n	80071e0 <forward_dense+0xa8>
 8007962:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8007966:	e43b      	b.n	80071e0 <forward_dense+0xa8>
 8007968:	2300      	movs	r3, #0
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	deff      	udf	#255	@ 0xff
 800796e:	2300      	movs	r3, #0
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	deff      	udf	#255	@ 0xff
 8007974:	00000000 	.word	0x00000000

08007978 <pool_func_mp_array_f32>:
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	b093      	sub	sp, #76	@ 0x4c
 800797e:	468a      	mov	sl, r1
 8007980:	461f      	mov	r7, r3
 8007982:	4693      	mov	fp, r2
 8007984:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8007988:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800798a:	9104      	str	r1, [sp, #16]
 800798c:	f8bd 1074 	ldrh.w	r1, [sp, #116]	@ 0x74
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	9100      	str	r1, [sp, #0]
 8007994:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8007998:	f8bd 207c 	ldrh.w	r2, [sp, #124]	@ 0x7c
 800799c:	9105      	str	r1, [sp, #20]
 800799e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	9106      	str	r1, [sp, #24]
 80079a6:	f8bd 3078 	ldrh.w	r3, [sp, #120]	@ 0x78
 80079aa:	f8bd 1088 	ldrh.w	r1, [sp, #136]	@ 0x88
 80079ae:	ea52 0c03 	orrs.w	ip, r2, r3
 80079b2:	f8d0 9008 	ldr.w	r9, [r0, #8]
 80079b6:	9101      	str	r1, [sp, #4]
 80079b8:	f8bd 108c 	ldrh.w	r1, [sp, #140]	@ 0x8c
 80079bc:	9102      	str	r1, [sp, #8]
 80079be:	d173      	bne.n	8007aa8 <pool_func_mp_array_f32+0x130>
 80079c0:	9904      	ldr	r1, [sp, #16]
 80079c2:	9d01      	ldr	r5, [sp, #4]
 80079c4:	eba1 000a 	sub.w	r0, r1, sl
 80079c8:	9e05      	ldr	r6, [sp, #20]
 80079ca:	1e69      	subs	r1, r5, #1
 80079cc:	3801      	subs	r0, #1
 80079ce:	fb11 0106 	smlabb	r1, r1, r6, r0
 80079d2:	0408      	lsls	r0, r1, #16
 80079d4:	d568      	bpl.n	8007aa8 <pool_func_mp_array_f32+0x130>
 80079d6:	9900      	ldr	r1, [sp, #0]
 80079d8:	9e02      	ldr	r6, [sp, #8]
 80079da:	eba1 000b 	sub.w	r0, r1, fp
 80079de:	9c06      	ldr	r4, [sp, #24]
 80079e0:	1e71      	subs	r1, r6, #1
 80079e2:	3801      	subs	r0, #1
 80079e4:	fb11 0104 	smlabb	r1, r1, r4, r0
 80079e8:	0409      	lsls	r1, r1, #16
 80079ea:	d55d      	bpl.n	8007aa8 <pool_func_mp_array_f32+0x130>
 80079ec:	2e00      	cmp	r6, #0
 80079ee:	d058      	beq.n	8007aa2 <pool_func_mp_array_f32+0x12a>
 80079f0:	2d00      	cmp	r5, #0
 80079f2:	d056      	beq.n	8007aa2 <pool_func_mp_array_f32+0x12a>
 80079f4:	2f00      	cmp	r7, #0
 80079f6:	d054      	beq.n	8007aa2 <pool_func_mp_array_f32+0x12a>
 80079f8:	2f01      	cmp	r7, #1
 80079fa:	f040 815b 	bne.w	8007cb4 <pool_func_mp_array_f32+0x33c>
 80079fe:	46e3      	mov	fp, ip
 8007a00:	4663      	mov	r3, ip
 8007a02:	f8cd c01c 	str.w	ip, [sp, #28]
 8007a06:	9a01      	ldr	r2, [sp, #4]
 8007a08:	2700      	movs	r7, #0
 8007a0a:	f9bd 6000 	ldrsh.w	r6, [sp]
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a16:	46be      	mov	lr, r7
 8007a18:	46bc      	mov	ip, r7
 8007a1a:	9308      	str	r3, [sp, #32]
 8007a1c:	fa0f f38b 	sxth.w	r3, fp
 8007a20:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a22:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007a24:	b23d      	sxth	r5, r7
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	fa0f f088 	sxth.w	r0, r8
 8007a2c:	42b4      	cmp	r4, r6
 8007a2e:	eddf 7aa0 	vldr	s15, [pc, #640]	@ 8007cb0 <pool_func_mp_array_f32+0x338>
 8007a32:	449c      	add	ip, r3
 8007a34:	da12      	bge.n	8007a5c <pool_func_mp_array_f32+0xe4>
 8007a36:	4285      	cmp	r5, r0
 8007a38:	da0c      	bge.n	8007a54 <pool_func_mp_array_f32+0xdc>
 8007a3a:	fb04 520a 	mla	r2, r4, sl, r5
 8007a3e:	462b      	mov	r3, r5
 8007a40:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8007a44:	3301      	adds	r3, #1
 8007a46:	ecb2 7a01 	vldmia	r2!, {s14}
 8007a4a:	b219      	sxth	r1, r3
 8007a4c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007a50:	4281      	cmp	r1, r0
 8007a52:	dbf7      	blt.n	8007a44 <pool_func_mp_array_f32+0xcc>
 8007a54:	3401      	adds	r4, #1
 8007a56:	b224      	sxth	r4, r4
 8007a58:	42b4      	cmp	r4, r6
 8007a5a:	dbec      	blt.n	8007a36 <pool_func_mp_array_f32+0xbe>
 8007a5c:	9b03      	ldr	r3, [sp, #12]
 8007a5e:	f10e 0e01 	add.w	lr, lr, #1
 8007a62:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8007a66:	9b05      	ldr	r3, [sp, #20]
 8007a68:	fa0f fe8e 	sxth.w	lr, lr
 8007a6c:	4498      	add	r8, r3
 8007a6e:	441f      	add	r7, r3
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	edcc 7a00 	vstr	s15, [ip]
 8007a76:	fa1f f888 	uxth.w	r8, r8
 8007a7a:	4573      	cmp	r3, lr
 8007a7c:	b2bf      	uxth	r7, r7
 8007a7e:	46f4      	mov	ip, lr
 8007a80:	dccf      	bgt.n	8007a22 <pool_func_mp_array_f32+0xaa>
 8007a82:	9a07      	ldr	r2, [sp, #28]
 8007a84:	9906      	ldr	r1, [sp, #24]
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	3201      	adds	r2, #1
 8007a8a:	448b      	add	fp, r1
 8007a8c:	b212      	sxth	r2, r2
 8007a8e:	440b      	add	r3, r1
 8007a90:	9902      	ldr	r1, [sp, #8]
 8007a92:	fa1f fb8b 	uxth.w	fp, fp
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	9207      	str	r2, [sp, #28]
 8007a9a:	4291      	cmp	r1, r2
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	dcb1      	bgt.n	8007a06 <pool_func_mp_array_f32+0x8e>
 8007aa2:	b013      	add	sp, #76	@ 0x4c
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	9902      	ldr	r1, [sp, #8]
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	d0f9      	beq.n	8007aa2 <pool_func_mp_array_f32+0x12a>
 8007aae:	9901      	ldr	r1, [sp, #4]
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	d0f6      	beq.n	8007aa2 <pool_func_mp_array_f32+0x12a>
 8007ab4:	2f00      	cmp	r7, #0
 8007ab6:	d0f4      	beq.n	8007aa2 <pool_func_mp_array_f32+0x12a>
 8007ab8:	2f01      	cmp	r7, #1
 8007aba:	9900      	ldr	r1, [sp, #0]
 8007abc:	d16a      	bne.n	8007b94 <pool_func_mp_array_f32+0x21c>
 8007abe:	1a8a      	subs	r2, r1, r2
 8007ac0:	9904      	ldr	r1, [sp, #16]
 8007ac2:	1ac9      	subs	r1, r1, r3
 8007ac4:	425b      	negs	r3, r3
 8007ac6:	b292      	uxth	r2, r2
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	9207      	str	r2, [sp, #28]
 8007acc:	b28a      	uxth	r2, r1
 8007ace:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ad4:	9308      	str	r3, [sp, #32]
 8007ad6:	9a01      	ldr	r2, [sp, #4]
 8007ad8:	f04f 0c00 	mov.w	ip, #0
 8007adc:	fb02 f303 	mul.w	r3, r2, r3
 8007ae0:	9a07      	ldr	r2, [sp, #28]
 8007ae2:	46e6      	mov	lr, ip
 8007ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae6:	b217      	sxth	r7, r2
 8007ae8:	9b00      	ldr	r3, [sp, #0]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	b21b      	sxth	r3, r3
 8007aee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007af0:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	@ 0x2c
 8007af4:	9304      	str	r3, [sp, #16]
 8007af6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007af8:	fa0f f488 	sxth.w	r4, r8
 8007afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afe:	4287      	cmp	r7, r0
 8007b00:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8007b04:	449e      	add	lr, r3
 8007b06:	eddf 7a6a 	vldr	s15, [pc, #424]	@ 8007cb0 <pool_func_mp_array_f32+0x338>
 8007b0a:	dd1e      	ble.n	8007b4a <pool_func_mp_array_f32+0x1d2>
 8007b0c:	42a6      	cmp	r6, r4
 8007b0e:	da18      	bge.n	8007b42 <pool_func_mp_array_f32+0x1ca>
 8007b10:	43c1      	mvns	r1, r0
 8007b12:	4583      	cmp	fp, r0
 8007b14:	fb00 f20a 	mul.w	r2, r0, sl
 8007b18:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 8007b1c:	dd11      	ble.n	8007b42 <pool_func_mp_array_f32+0x1ca>
 8007b1e:	4432      	add	r2, r6
 8007b20:	4633      	mov	r3, r6
 8007b22:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8007b26:	041d      	lsls	r5, r3, #16
 8007b28:	d406      	bmi.n	8007b38 <pool_func_mp_array_f32+0x1c0>
 8007b2a:	b129      	cbz	r1, 8007b38 <pool_func_mp_array_f32+0x1c0>
 8007b2c:	459a      	cmp	sl, r3
 8007b2e:	dd03      	ble.n	8007b38 <pool_func_mp_array_f32+0x1c0>
 8007b30:	ed92 7a00 	vldr	s14, [r2]
 8007b34:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007b38:	3301      	adds	r3, #1
 8007b3a:	3204      	adds	r2, #4
 8007b3c:	b21d      	sxth	r5, r3
 8007b3e:	42a5      	cmp	r5, r4
 8007b40:	dbf1      	blt.n	8007b26 <pool_func_mp_array_f32+0x1ae>
 8007b42:	3001      	adds	r0, #1
 8007b44:	b200      	sxth	r0, r0
 8007b46:	42b8      	cmp	r0, r7
 8007b48:	dbe0      	blt.n	8007b0c <pool_func_mp_array_f32+0x194>
 8007b4a:	9b03      	ldr	r3, [sp, #12]
 8007b4c:	f10c 0c01 	add.w	ip, ip, #1
 8007b50:	9a05      	ldr	r2, [sp, #20]
 8007b52:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8007b56:	9b04      	ldr	r3, [sp, #16]
 8007b58:	fa0f fc8c 	sxth.w	ip, ip
 8007b5c:	4490      	add	r8, r2
 8007b5e:	4413      	add	r3, r2
 8007b60:	edce 7a00 	vstr	s15, [lr]
 8007b64:	fa1f f888 	uxth.w	r8, r8
 8007b68:	46e6      	mov	lr, ip
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	4563      	cmp	r3, ip
 8007b72:	dcc0      	bgt.n	8007af6 <pool_func_mp_array_f32+0x17e>
 8007b74:	9a08      	ldr	r2, [sp, #32]
 8007b76:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8007b7a:	3201      	adds	r2, #1
 8007b7c:	440b      	add	r3, r1
 8007b7e:	9902      	ldr	r1, [sp, #8]
 8007b80:	b212      	sxth	r2, r2
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	4291      	cmp	r1, r2
 8007b86:	9208      	str	r2, [sp, #32]
 8007b88:	9307      	str	r3, [sp, #28]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	dca3      	bgt.n	8007ad6 <pool_func_mp_array_f32+0x15e>
 8007b8e:	b013      	add	sp, #76	@ 0x4c
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	1a88      	subs	r0, r1, r2
 8007b96:	9904      	ldr	r1, [sp, #16]
 8007b98:	4252      	negs	r2, r2
 8007b9a:	f8cd 9038 	str.w	r9, [sp, #56]	@ 0x38
 8007b9e:	1ac9      	subs	r1, r1, r3
 8007ba0:	425b      	negs	r3, r3
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	46b9      	mov	r9, r7
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	b280      	uxth	r0, r0
 8007baa:	9208      	str	r2, [sp, #32]
 8007bac:	9311      	str	r3, [sp, #68]	@ 0x44
 8007bae:	b28a      	uxth	r2, r1
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8007bb6:	9007      	str	r0, [sp, #28]
 8007bb8:	9210      	str	r2, [sp, #64]	@ 0x40
 8007bba:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bbc:	9a01      	ldr	r2, [sp, #4]
 8007bbe:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8007bc2:	fb02 f303 	mul.w	r3, r2, r3
 8007bc6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8007bca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007bcc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007bce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	9200      	str	r2, [sp, #0]
 8007bd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007bd6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007bd8:	9204      	str	r2, [sp, #16]
 8007bda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bdc:	f04f 0e00 	mov.w	lr, #0
 8007be0:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 8007be4:	4413      	add	r3, r2
 8007be6:	f9bd 4000 	ldrsh.w	r4, [sp]
 8007bea:	46f4      	mov	ip, lr
 8007bec:	fb09 f303 	mul.w	r3, r9, r3
 8007bf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007bf4:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 8007cb0 <pool_func_mp_array_f32+0x338>
 8007bf8:	42b8      	cmp	r0, r7
 8007bfa:	da26      	bge.n	8007c4a <pool_func_mp_array_f32+0x2d2>
 8007bfc:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 8007c00:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
 8007c04:	42a6      	cmp	r6, r4
 8007c06:	da1a      	bge.n	8007c3e <pool_func_mp_array_f32+0x2c6>
 8007c08:	43c5      	mvns	r5, r0
 8007c0a:	4558      	cmp	r0, fp
 8007c0c:	fb00 f30a 	mul.w	r3, r0, sl
 8007c10:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 8007c14:	da13      	bge.n	8007c3e <pool_func_mp_array_f32+0x2c6>
 8007c16:	199a      	adds	r2, r3, r6
 8007c18:	4633      	mov	r3, r6
 8007c1a:	fb09 c202 	mla	r2, r9, r2, ip
 8007c1e:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8007c22:	0419      	lsls	r1, r3, #16
 8007c24:	d406      	bmi.n	8007c34 <pool_func_mp_array_f32+0x2bc>
 8007c26:	b12d      	cbz	r5, 8007c34 <pool_func_mp_array_f32+0x2bc>
 8007c28:	459a      	cmp	sl, r3
 8007c2a:	dd03      	ble.n	8007c34 <pool_func_mp_array_f32+0x2bc>
 8007c2c:	ed92 7a00 	vldr	s14, [r2]
 8007c30:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007c34:	3301      	adds	r3, #1
 8007c36:	4442      	add	r2, r8
 8007c38:	b219      	sxth	r1, r3
 8007c3a:	42a1      	cmp	r1, r4
 8007c3c:	dbf1      	blt.n	8007c22 <pool_func_mp_array_f32+0x2aa>
 8007c3e:	3001      	adds	r0, #1
 8007c40:	b200      	sxth	r0, r0
 8007c42:	42b8      	cmp	r0, r7
 8007c44:	dbde      	blt.n	8007c04 <pool_func_mp_array_f32+0x28c>
 8007c46:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8007c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c4c:	f10e 0e01 	add.w	lr, lr, #1
 8007c50:	9a03      	ldr	r2, [sp, #12]
 8007c52:	4463      	add	r3, ip
 8007c54:	fa0f fe8e 	sxth.w	lr, lr
 8007c58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007c5c:	45ce      	cmp	lr, r9
 8007c5e:	46f4      	mov	ip, lr
 8007c60:	edc3 7a00 	vstr	s15, [r3]
 8007c64:	dbc5      	blt.n	8007bf2 <pool_func_mp_array_f32+0x27a>
 8007c66:	9a00      	ldr	r2, [sp, #0]
 8007c68:	9805      	ldr	r0, [sp, #20]
 8007c6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007c6c:	4402      	add	r2, r0
 8007c6e:	9b04      	ldr	r3, [sp, #16]
 8007c70:	3101      	adds	r1, #1
 8007c72:	b292      	uxth	r2, r2
 8007c74:	4403      	add	r3, r0
 8007c76:	b209      	sxth	r1, r1
 8007c78:	9200      	str	r2, [sp, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	9a01      	ldr	r2, [sp, #4]
 8007c7e:	9304      	str	r3, [sp, #16]
 8007c80:	460b      	mov	r3, r1
 8007c82:	428a      	cmp	r2, r1
 8007c84:	910d      	str	r1, [sp, #52]	@ 0x34
 8007c86:	dca8      	bgt.n	8007bda <pool_func_mp_array_f32+0x262>
 8007c88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c8a:	9b08      	ldr	r3, [sp, #32]
 8007c8c:	3101      	adds	r1, #1
 8007c8e:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 8007c92:	b209      	sxth	r1, r1
 8007c94:	4402      	add	r2, r0
 8007c96:	4403      	add	r3, r0
 8007c98:	910c      	str	r1, [sp, #48]	@ 0x30
 8007c9a:	b292      	uxth	r2, r2
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	9207      	str	r2, [sp, #28]
 8007ca0:	9a02      	ldr	r2, [sp, #8]
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	428a      	cmp	r2, r1
 8007ca8:	dc88      	bgt.n	8007bbc <pool_func_mp_array_f32+0x244>
 8007caa:	b013      	add	sp, #76	@ 0x4c
 8007cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb0:	cf000000 	.word	0xcf000000
 8007cb4:	4663      	mov	r3, ip
 8007cb6:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8007cba:	f8cd c020 	str.w	ip, [sp, #32]
 8007cbe:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8007cc2:	9a01      	ldr	r2, [sp, #4]
 8007cc4:	f04f 0800 	mov.w	r8, #0
 8007cc8:	f9bd c000 	ldrsh.w	ip, [sp]
 8007ccc:	fb02 f303 	mul.w	r3, r2, r3
 8007cd0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007cd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8007cd6:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8007cda:	930d      	str	r3, [sp, #52]	@ 0x34
 8007cdc:	9b04      	ldr	r3, [sp, #16]
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	4643      	mov	r3, r8
 8007ce2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ce4:	f04f 0e00 	mov.w	lr, #0
 8007ce8:	fa0f f588 	sxth.w	r5, r8
 8007cec:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	4676      	mov	r6, lr
 8007cf4:	fb07 f303 	mul.w	r3, r7, r3
 8007cf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cfa:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8007cfc:	ed5f 7a14 	vldr	s15, [pc, #-80]	@ 8007cb0 <pool_func_mp_array_f32+0x338>
 8007d00:	4564      	cmp	r4, ip
 8007d02:	da15      	bge.n	8007d30 <pool_func_mp_array_f32+0x3b8>
 8007d04:	4285      	cmp	r5, r0
 8007d06:	da0f      	bge.n	8007d28 <pool_func_mp_array_f32+0x3b0>
 8007d08:	fb0a 5304 	mla	r3, sl, r4, r5
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	fb07 6303 	mla	r3, r7, r3, r6
 8007d12:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007d16:	3201      	adds	r2, #1
 8007d18:	ed93 7a00 	vldr	s14, [r3]
 8007d1c:	445b      	add	r3, fp
 8007d1e:	b211      	sxth	r1, r2
 8007d20:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007d24:	4281      	cmp	r1, r0
 8007d26:	dbf6      	blt.n	8007d16 <pool_func_mp_array_f32+0x39e>
 8007d28:	3401      	adds	r4, #1
 8007d2a:	b224      	sxth	r4, r4
 8007d2c:	4564      	cmp	r4, ip
 8007d2e:	dbe9      	blt.n	8007d04 <pool_func_mp_array_f32+0x38c>
 8007d30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d32:	f10e 0e01 	add.w	lr, lr, #1
 8007d36:	9a03      	ldr	r2, [sp, #12]
 8007d38:	4433      	add	r3, r6
 8007d3a:	fa0f fe8e 	sxth.w	lr, lr
 8007d3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d42:	45be      	cmp	lr, r7
 8007d44:	4676      	mov	r6, lr
 8007d46:	edc3 7a00 	vstr	s15, [r3]
 8007d4a:	dbd6      	blt.n	8007cfa <pool_func_mp_array_f32+0x382>
 8007d4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d4e:	9905      	ldr	r1, [sp, #20]
 8007d50:	9b07      	ldr	r3, [sp, #28]
 8007d52:	3201      	adds	r2, #1
 8007d54:	4488      	add	r8, r1
 8007d56:	b212      	sxth	r2, r2
 8007d58:	440b      	add	r3, r1
 8007d5a:	9901      	ldr	r1, [sp, #4]
 8007d5c:	fa1f f888 	uxth.w	r8, r8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d64:	4291      	cmp	r1, r2
 8007d66:	9307      	str	r3, [sp, #28]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	dcba      	bgt.n	8007ce2 <pool_func_mp_array_f32+0x36a>
 8007d6c:	9a00      	ldr	r2, [sp, #0]
 8007d6e:	9806      	ldr	r0, [sp, #24]
 8007d70:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d72:	4402      	add	r2, r0
 8007d74:	9b08      	ldr	r3, [sp, #32]
 8007d76:	3101      	adds	r1, #1
 8007d78:	b292      	uxth	r2, r2
 8007d7a:	4403      	add	r3, r0
 8007d7c:	b209      	sxth	r1, r1
 8007d7e:	9200      	str	r2, [sp, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	9a02      	ldr	r2, [sp, #8]
 8007d84:	9308      	str	r3, [sp, #32]
 8007d86:	460b      	mov	r3, r1
 8007d88:	428a      	cmp	r2, r1
 8007d8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d8c:	dc99      	bgt.n	8007cc2 <pool_func_mp_array_f32+0x34a>
 8007d8e:	e688      	b.n	8007aa2 <pool_func_mp_array_f32+0x12a>

08007d90 <forward_sigmoid>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	ed2d 8b02 	vpush	{d8}
 8007d96:	6982      	ldr	r2, [r0, #24]
 8007d98:	8813      	ldrh	r3, [r2, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d03b      	beq.n	8007e16 <forward_sigmoid+0x86>
 8007d9e:	6852      	ldr	r2, [r2, #4]
 8007da0:	6854      	ldr	r4, [r2, #4]
 8007da2:	b104      	cbz	r4, 8007da6 <forward_sigmoid+0x16>
 8007da4:	6824      	ldr	r4, [r4, #0]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d034      	beq.n	8007e14 <forward_sigmoid+0x84>
 8007daa:	6915      	ldr	r5, [r2, #16]
 8007dac:	b105      	cbz	r5, 8007db0 <forward_sigmoid+0x20>
 8007dae:	682d      	ldr	r5, [r5, #0]
 8007db0:	68a3      	ldr	r3, [r4, #8]
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	d031      	beq.n	8007e1a <forward_sigmoid+0x8a>
 8007db6:	68e0      	ldr	r0, [r4, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007dbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dc2:	4298      	cmp	r0, r3
 8007dc4:	fb01 f202 	mul.w	r2, r1, r2
 8007dc8:	d1f9      	bne.n	8007dbe <forward_sigmoid+0x2e>
 8007dca:	69a7      	ldr	r7, [r4, #24]
 8007dcc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007dd0:	69a9      	ldr	r1, [r5, #24]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	688e      	ldr	r6, [r1, #8]
 8007dd8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007ddc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007de0:	42aa      	cmp	r2, r5
 8007de2:	d814      	bhi.n	8007e0e <forward_sigmoid+0x7e>
 8007de4:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8007de8:	3504      	adds	r5, #4
 8007dea:	3604      	adds	r6, #4
 8007dec:	462c      	mov	r4, r5
 8007dee:	ed35 0a01 	vldmdb	r5!, {s0}
 8007df2:	eeb1 0a40 	vneg.f32	s0, s0
 8007df6:	3c08      	subs	r4, #8
 8007df8:	f003 f8d4 	bl	800afa4 <expf>
 8007dfc:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007e00:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007e04:	ed66 7a01 	vstmdb	r6!, {s15}
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	d9ee      	bls.n	8007dec <forward_sigmoid+0x5c>
 8007e0e:	ecbd 8b02 	vpop	{d8}
 8007e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e14:	2300      	movs	r3, #0
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	deff      	udf	#255	@ 0xff
 8007e1a:	69ab      	ldr	r3, [r5, #24]
 8007e1c:	69a7      	ldr	r7, [r4, #24]
 8007e1e:	689e      	ldr	r6, [r3, #8]
 8007e20:	68bd      	ldr	r5, [r7, #8]
 8007e22:	e7df      	b.n	8007de4 <forward_sigmoid+0x54>

08007e24 <nl_func_relu_array_f32>:
 8007e24:	b410      	push	{r4}
 8007e26:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007e2a:	698c      	ldr	r4, [r1, #24]
 8007e2c:	6981      	ldr	r1, [r0, #24]
 8007e2e:	4413      	add	r3, r2
 8007e30:	68a0      	ldr	r0, [r4, #8]
 8007e32:	6889      	ldr	r1, [r1, #8]
 8007e34:	009a      	lsls	r2, r3, #2
 8007e36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007e3a:	4298      	cmp	r0, r3
 8007e3c:	d80f      	bhi.n	8007e5e <nl_func_relu_array_f32+0x3a>
 8007e3e:	3204      	adds	r2, #4
 8007e40:	3304      	adds	r3, #4
 8007e42:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8007e64 <nl_func_relu_array_f32+0x40>
 8007e46:	4411      	add	r1, r2
 8007e48:	461a      	mov	r2, r3
 8007e4a:	ed73 7a01 	vldmdb	r3!, {s15}
 8007e4e:	3a08      	subs	r2, #8
 8007e50:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007e54:	ed61 7a01 	vstmdb	r1!, {s15}
 8007e58:	68a0      	ldr	r0, [r4, #8]
 8007e5a:	4290      	cmp	r0, r2
 8007e5c:	d9f4      	bls.n	8007e48 <nl_func_relu_array_f32+0x24>
 8007e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	00000000 	.word	0x00000000

08007e68 <forward_relu>:
 8007e68:	6982      	ldr	r2, [r0, #24]
 8007e6a:	8813      	ldrh	r3, [r2, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d05b      	beq.n	8007f28 <forward_relu+0xc0>
 8007e70:	6851      	ldr	r1, [r2, #4]
 8007e72:	684a      	ldr	r2, [r1, #4]
 8007e74:	b102      	cbz	r2, 8007e78 <forward_relu+0x10>
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	f000 8123 	beq.w	80080c4 <forward_relu+0x25c>
 8007e7e:	b470      	push	{r4, r5, r6}
 8007e80:	690b      	ldr	r3, [r1, #16]
 8007e82:	b103      	cbz	r3, 8007e86 <forward_relu+0x1e>
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69c6      	ldr	r6, [r0, #28]
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	f000 809e 	beq.w	8007fca <forward_relu+0x162>
 8007e8e:	6871      	ldr	r1, [r6, #4]
 8007e90:	6998      	ldr	r0, [r3, #24]
 8007e92:	2901      	cmp	r1, #1
 8007e94:	f000 80c3 	beq.w	800801e <forward_relu+0x1b6>
 8007e98:	6893      	ldr	r3, [r2, #8]
 8007e9a:	6991      	ldr	r1, [r2, #24]
 8007e9c:	0a1b      	lsrs	r3, r3, #8
 8007e9e:	6880      	ldr	r0, [r0, #8]
 8007ea0:	688d      	ldr	r5, [r1, #8]
 8007ea2:	f000 80f2 	beq.w	800808a <forward_relu+0x222>
 8007ea6:	68d4      	ldr	r4, [r2, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007eae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eb2:	42a3      	cmp	r3, r4
 8007eb4:	fb01 f202 	mul.w	r2, r1, r2
 8007eb8:	d1f9      	bne.n	8007eae <forward_relu+0x46>
 8007eba:	68b3      	ldr	r3, [r6, #8]
 8007ebc:	ed93 7a02 	vldr	s14, [r3, #8]
 8007ec0:	edd3 6a00 	vldr	s13, [r3]
 8007ec4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007ec8:	ed93 6a01 	vldr	s12, [r3, #4]
 8007ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed0:	d42c      	bmi.n	8007f2c <forward_relu+0xc4>
 8007ed2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007ed6:	4413      	add	r3, r2
 8007ed8:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8007edc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007ee0:	4295      	cmp	r5, r2
 8007ee2:	d81f      	bhi.n	8007f24 <forward_relu+0xbc>
 8007ee4:	3204      	adds	r2, #4
 8007ee6:	1d01      	adds	r1, r0, #4
 8007ee8:	e00d      	b.n	8007f06 <forward_relu+0x9e>
 8007eea:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef2:	db03      	blt.n	8007efc <forward_relu+0x94>
 8007ef4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ef8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007efc:	3b08      	subs	r3, #8
 8007efe:	ed61 7a01 	vstmdb	r1!, {s15}
 8007f02:	429d      	cmp	r5, r3
 8007f04:	d80e      	bhi.n	8007f24 <forward_relu+0xbc>
 8007f06:	4613      	mov	r3, r2
 8007f08:	ed72 7a01 	vldmdb	r2!, {s15}
 8007f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f14:	d9e9      	bls.n	8007eea <forward_relu+0x82>
 8007f16:	3b08      	subs	r3, #8
 8007f18:	eef0 7a47 	vmov.f32	s15, s14
 8007f1c:	429d      	cmp	r5, r3
 8007f1e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007f22:	d9f0      	bls.n	8007f06 <forward_relu+0x9e>
 8007f24:	bc70      	pop	{r4, r5, r6}
 8007f26:	4770      	bx	lr
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	deff      	udf	#255	@ 0xff
 8007f2c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007f30:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8007f34:	4411      	add	r1, r2
 8007f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007f3e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007f42:	d11f      	bne.n	8007f84 <forward_relu+0x11c>
 8007f44:	429d      	cmp	r5, r3
 8007f46:	d8ed      	bhi.n	8007f24 <forward_relu+0xbc>
 8007f48:	1b5d      	subs	r5, r3, r5
 8007f4a:	1d1a      	adds	r2, r3, #4
 8007f4c:	1d01      	adds	r1, r0, #4
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f025 0503 	bic.w	r5, r5, #3
 8007f54:	1b5b      	subs	r3, r3, r5
 8007f56:	ed72 7a01 	vldmdb	r2!, {s15}
 8007f5a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f62:	dc0a      	bgt.n	8007f7a <forward_relu+0x112>
 8007f64:	429a      	cmp	r2, r3
 8007f66:	f841 0d04 	str.w	r0, [r1, #-4]!
 8007f6a:	d0db      	beq.n	8007f24 <forward_relu+0xbc>
 8007f6c:	ed72 7a01 	vldmdb	r2!, {s15}
 8007f70:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f78:	ddf4      	ble.n	8007f64 <forward_relu+0xfc>
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	ed61 7a01 	vstmdb	r1!, {s15}
 8007f80:	d1e9      	bne.n	8007f56 <forward_relu+0xee>
 8007f82:	e7cf      	b.n	8007f24 <forward_relu+0xbc>
 8007f84:	429d      	cmp	r5, r3
 8007f86:	d8cd      	bhi.n	8007f24 <forward_relu+0xbc>
 8007f88:	1b5d      	subs	r5, r3, r5
 8007f8a:	1d1a      	adds	r2, r3, #4
 8007f8c:	1d01      	adds	r1, r0, #4
 8007f8e:	f025 0503 	bic.w	r5, r5, #3
 8007f92:	1b5b      	subs	r3, r3, r5
 8007f94:	ed72 7a01 	vldmdb	r2!, {s15}
 8007f98:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa0:	db0e      	blt.n	8007fc0 <forward_relu+0x158>
 8007fa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007fac:	ed61 7a01 	vstmdb	r1!, {s15}
 8007fb0:	d0b8      	beq.n	8007f24 <forward_relu+0xbc>
 8007fb2:	ed72 7a01 	vldmdb	r2!, {s15}
 8007fb6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fbe:	daf0      	bge.n	8007fa2 <forward_relu+0x13a>
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	ed61 7a01 	vstmdb	r1!, {s15}
 8007fc6:	d1e5      	bne.n	8007f94 <forward_relu+0x12c>
 8007fc8:	e7ac      	b.n	8007f24 <forward_relu+0xbc>
 8007fca:	6999      	ldr	r1, [r3, #24]
 8007fcc:	6893      	ldr	r3, [r2, #8]
 8007fce:	6990      	ldr	r0, [r2, #24]
 8007fd0:	0a1b      	lsrs	r3, r3, #8
 8007fd2:	6889      	ldr	r1, [r1, #8]
 8007fd4:	6884      	ldr	r4, [r0, #8]
 8007fd6:	d06e      	beq.n	80080b6 <forward_relu+0x24e>
 8007fd8:	68d5      	ldr	r5, [r2, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007fe0:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007fe4:	429d      	cmp	r5, r3
 8007fe6:	fb00 f202 	mul.w	r2, r0, r2
 8007fea:	d1f9      	bne.n	8007fe0 <forward_relu+0x178>
 8007fec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007ff0:	4413      	add	r3, r2
 8007ff2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007ff6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007ffa:	4294      	cmp	r4, r2
 8007ffc:	d892      	bhi.n	8007f24 <forward_relu+0xbc>
 8007ffe:	3204      	adds	r2, #4
 8008000:	3104      	adds	r1, #4
 8008002:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80080cc <forward_relu+0x264>
 8008006:	4613      	mov	r3, r2
 8008008:	ed72 7a01 	vldmdb	r2!, {s15}
 800800c:	3b08      	subs	r3, #8
 800800e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008012:	ed61 7a01 	vstmdb	r1!, {s15}
 8008016:	429c      	cmp	r4, r3
 8008018:	d9f5      	bls.n	8008006 <forward_relu+0x19e>
 800801a:	bc70      	pop	{r4, r5, r6}
 800801c:	4770      	bx	lr
 800801e:	6993      	ldr	r3, [r2, #24]
 8008020:	6880      	ldr	r0, [r0, #8]
 8008022:	689c      	ldr	r4, [r3, #8]
 8008024:	6893      	ldr	r3, [r2, #8]
 8008026:	0a1b      	lsrs	r3, r3, #8
 8008028:	d047      	beq.n	80080ba <forward_relu+0x252>
 800802a:	68d5      	ldr	r5, [r2, #12]
 800802c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008030:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008034:	42ab      	cmp	r3, r5
 8008036:	fb02 f101 	mul.w	r1, r2, r1
 800803a:	d1f9      	bne.n	8008030 <forward_relu+0x1c8>
 800803c:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8008040:	68b3      	ldr	r3, [r6, #8]
 8008042:	440a      	add	r2, r1
 8008044:	ed93 7a00 	vldr	s14, [r3]
 8008048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800804c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008050:	429c      	cmp	r4, r3
 8008052:	f63f af67 	bhi.w	8007f24 <forward_relu+0xbc>
 8008056:	1d02      	adds	r2, r0, #4
 8008058:	3304      	adds	r3, #4
 800805a:	2000      	movs	r0, #0
 800805c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008060:	1f19      	subs	r1, r3, #4
 8008062:	3b08      	subs	r3, #8
 8008064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806c:	d406      	bmi.n	800807c <forward_relu+0x214>
 800806e:	429c      	cmp	r4, r3
 8008070:	f842 0d04 	str.w	r0, [r2, #-4]!
 8008074:	f63f af56 	bhi.w	8007f24 <forward_relu+0xbc>
 8008078:	460b      	mov	r3, r1
 800807a:	e7ef      	b.n	800805c <forward_relu+0x1f4>
 800807c:	429c      	cmp	r4, r3
 800807e:	ed62 7a01 	vstmdb	r2!, {s15}
 8008082:	f63f af4f 	bhi.w	8007f24 <forward_relu+0xbc>
 8008086:	460b      	mov	r3, r1
 8008088:	e7e8      	b.n	800805c <forward_relu+0x1f4>
 800808a:	68b3      	ldr	r3, [r6, #8]
 800808c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008090:	edd3 6a00 	vldr	s13, [r3]
 8008094:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008098:	ed93 6a01 	vldr	s12, [r3, #4]
 800809c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a0:	d401      	bmi.n	80080a6 <forward_relu+0x23e>
 80080a2:	462a      	mov	r2, r5
 80080a4:	e71e      	b.n	8007ee4 <forward_relu+0x7c>
 80080a6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80080aa:	462b      	mov	r3, r5
 80080ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b0:	f47f af6a 	bne.w	8007f88 <forward_relu+0x120>
 80080b4:	e748      	b.n	8007f48 <forward_relu+0xe0>
 80080b6:	4622      	mov	r2, r4
 80080b8:	e7a1      	b.n	8007ffe <forward_relu+0x196>
 80080ba:	68b2      	ldr	r2, [r6, #8]
 80080bc:	4623      	mov	r3, r4
 80080be:	ed92 7a00 	vldr	s14, [r2]
 80080c2:	e7c8      	b.n	8008056 <forward_relu+0x1ee>
 80080c4:	2300      	movs	r3, #0
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	deff      	udf	#255	@ 0xff
 80080ca:	bf00      	nop
 80080cc:	00000000 	.word	0x00000000

080080d0 <ai_check_custom_types>:
 80080d0:	b082      	sub	sp, #8
 80080d2:	4b12      	ldr	r3, [pc, #72]	@ (800811c <ai_check_custom_types+0x4c>)
 80080d4:	9301      	str	r3, [sp, #4]
 80080d6:	b118      	cbz	r0, 80080e0 <ai_check_custom_types+0x10>
 80080d8:	7803      	ldrb	r3, [r0, #0]
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d002      	beq.n	80080e4 <ai_check_custom_types+0x14>
 80080de:	2000      	movs	r0, #0
 80080e0:	b002      	add	sp, #8
 80080e2:	4770      	bx	lr
 80080e4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <ai_check_custom_types+0x26>
 80080ec:	2001      	movs	r0, #1
 80080ee:	f080 0001 	eor.w	r0, r0, #1
 80080f2:	b002      	add	sp, #8
 80080f4:	4770      	bx	lr
 80080f6:	7842      	ldrb	r2, [r0, #1]
 80080f8:	3001      	adds	r0, #1
 80080fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d1f4      	bne.n	80080ec <ai_check_custom_types+0x1c>
 8008102:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008106:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800810a:	429a      	cmp	r2, r3
 800810c:	d1ee      	bne.n	80080ec <ai_check_custom_types+0x1c>
 800810e:	7842      	ldrb	r2, [r0, #1]
 8008110:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008114:	429a      	cmp	r2, r3
 8008116:	d1e9      	bne.n	80080ec <ai_check_custom_types+0x1c>
 8008118:	2000      	movs	r0, #0
 800811a:	e7e8      	b.n	80080ee <ai_check_custom_types+0x1e>
 800811c:	84048403 	.word	0x84048403

08008120 <ai_layers_init_all>:
 8008120:	2100      	movs	r1, #0
 8008122:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008124:	b13b      	cbz	r3, 8008136 <ai_layers_init_all+0x16>
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	3101      	adds	r1, #1
 800812a:	60d8      	str	r0, [r3, #12]
 800812c:	429a      	cmp	r2, r3
 800812e:	4613      	mov	r3, r2
 8008130:	d001      	beq.n	8008136 <ai_layers_init_all+0x16>
 8008132:	2a00      	cmp	r2, #0
 8008134:	d1f6      	bne.n	8008124 <ai_layers_init_all+0x4>
 8008136:	4608      	mov	r0, r1
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop

0800813c <ai_layers_post_init_all>:
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	2500      	movs	r5, #0
 8008140:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008142:	b16c      	cbz	r4, 8008160 <ai_layers_post_init_all+0x24>
 8008144:	6863      	ldr	r3, [r4, #4]
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d504      	bpl.n	8008154 <ai_layers_post_init_all+0x18>
 800814a:	6a23      	ldr	r3, [r4, #32]
 800814c:	4620      	mov	r0, r4
 800814e:	b10b      	cbz	r3, 8008154 <ai_layers_post_init_all+0x18>
 8008150:	3501      	adds	r5, #1
 8008152:	4798      	blx	r3
 8008154:	6923      	ldr	r3, [r4, #16]
 8008156:	42a3      	cmp	r3, r4
 8008158:	461c      	mov	r4, r3
 800815a:	d001      	beq.n	8008160 <ai_layers_post_init_all+0x24>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1f0      	bne.n	8008142 <ai_layers_post_init_all+0x6>
 8008160:	4628      	mov	r0, r5
 8008162:	bd38      	pop	{r3, r4, r5, pc}

08008164 <ai_layers_forward_all>:
 8008164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008168:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 800816c:	4604      	mov	r4, r0
 800816e:	f1b8 0f00 	cmp.w	r8, #0
 8008172:	d02a      	beq.n	80081ca <ai_layers_forward_all+0x66>
 8008174:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8008176:	6381      	str	r1, [r0, #56]	@ 0x38
 8008178:	b319      	cbz	r1, 80081c2 <ai_layers_forward_all+0x5e>
 800817a:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800817c:	2001      	movs	r0, #1
 800817e:	47c0      	blx	r8
 8008180:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008182:	b1f6      	cbz	r6, 80081c2 <ai_layers_forward_all+0x5e>
 8008184:	2700      	movs	r7, #0
 8008186:	4631      	mov	r1, r6
 8008188:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800818a:	2002      	movs	r0, #2
 800818c:	47c0      	blx	r8
 800818e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8008190:	4628      	mov	r0, r5
 8008192:	696b      	ldr	r3, [r5, #20]
 8008194:	4798      	blx	r3
 8008196:	692e      	ldr	r6, [r5, #16]
 8008198:	2003      	movs	r0, #3
 800819a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800819c:	42b5      	cmp	r5, r6
 800819e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80081a0:	d007      	beq.n	80081b2 <ai_layers_forward_all+0x4e>
 80081a2:	47c0      	blx	r8
 80081a4:	3701      	adds	r7, #1
 80081a6:	63a6      	str	r6, [r4, #56]	@ 0x38
 80081a8:	2e00      	cmp	r6, #0
 80081aa:	d1ec      	bne.n	8008186 <ai_layers_forward_all+0x22>
 80081ac:	4638      	mov	r0, r7
 80081ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b2:	2003      	movs	r0, #3
 80081b4:	3701      	adds	r7, #1
 80081b6:	47c0      	blx	r8
 80081b8:	2300      	movs	r3, #0
 80081ba:	4638      	mov	r0, r7
 80081bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80081be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c2:	2700      	movs	r7, #0
 80081c4:	4638      	mov	r0, r7
 80081c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ca:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80081cc:	6385      	str	r5, [r0, #56]	@ 0x38
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	d0f7      	beq.n	80081c2 <ai_layers_forward_all+0x5e>
 80081d2:	4647      	mov	r7, r8
 80081d4:	696b      	ldr	r3, [r5, #20]
 80081d6:	4628      	mov	r0, r5
 80081d8:	4798      	blx	r3
 80081da:	462b      	mov	r3, r5
 80081dc:	692d      	ldr	r5, [r5, #16]
 80081de:	429d      	cmp	r5, r3
 80081e0:	d004      	beq.n	80081ec <ai_layers_forward_all+0x88>
 80081e2:	3701      	adds	r7, #1
 80081e4:	63a5      	str	r5, [r4, #56]	@ 0x38
 80081e6:	2d00      	cmp	r5, #0
 80081e8:	d1f4      	bne.n	80081d4 <ai_layers_forward_all+0x70>
 80081ea:	e7df      	b.n	80081ac <ai_layers_forward_all+0x48>
 80081ec:	2300      	movs	r3, #0
 80081ee:	3701      	adds	r7, #1
 80081f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80081f2:	e7db      	b.n	80081ac <ai_layers_forward_all+0x48>

080081f4 <lite_dense_if32of32wf32>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	ed2d 8b0c 	vpush	{d8-d13}
 80081fc:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	@ 0x54
 8008200:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008204:	4287      	cmp	r7, r0
 8008206:	f240 8105 	bls.w	8008414 <lite_dense_if32of32wf32+0x220>
 800820a:	f1a6 0810 	sub.w	r8, r6, #16
 800820e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8008212:	4605      	mov	r5, r0
 8008214:	f006 0b0f 	and.w	fp, r6, #15
 8008218:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800821c:	f108 0801 	add.w	r8, r8, #1
 8008220:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8008224:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8008228:	2e0f      	cmp	r6, #15
 800822a:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8008440 <lite_dense_if32of32wf32+0x24c>
 800822e:	f240 8102 	bls.w	8008436 <lite_dense_if32of32wf32+0x242>
 8008232:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 8008236:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 800823a:	46b6      	mov	lr, r6
 800823c:	ed54 6a0f 	vldr	s13, [r4, #-60]	@ 0xffffffc4
 8008240:	f1ae 0e10 	sub.w	lr, lr, #16
 8008244:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 8008248:	3440      	adds	r4, #64	@ 0x40
 800824a:	ed5c 4a10 	vldr	s9, [ip, #-64]	@ 0xffffffc0
 800824e:	f1be 0f0f 	cmp.w	lr, #15
 8008252:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008256:	ed14 5a20 	vldr	s10, [r4, #-128]	@ 0xffffff80
 800825a:	ed5c 5a0e 	vldr	s11, [ip, #-56]	@ 0xffffffc8
 800825e:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 8008262:	ed14 6a1e 	vldr	s12, [r4, #-120]	@ 0xffffff88
 8008266:	eee4 7a85 	vfma.f32	s15, s9, s10
 800826a:	ed54 6a1d 	vldr	s13, [r4, #-116]	@ 0xffffff8c
 800826e:	ed1c da1d 	vldr	s26, [ip, #-116]	@ 0xffffff8c
 8008272:	ed5c ca1c 	vldr	s25, [ip, #-112]	@ 0xffffff90
 8008276:	ed14 ca1c 	vldr	s24, [r4, #-112]	@ 0xffffff90
 800827a:	ed5c ba1b 	vldr	s23, [ip, #-108]	@ 0xffffff94
 800827e:	ed14 ba1b 	vldr	s22, [r4, #-108]	@ 0xffffff94
 8008282:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008286:	ed5c aa1a 	vldr	s21, [ip, #-104]	@ 0xffffff98
 800828a:	ed14 aa1a 	vldr	s20, [r4, #-104]	@ 0xffffff98
 800828e:	ed5c 9a19 	vldr	s19, [ip, #-100]	@ 0xffffff9c
 8008292:	ed14 9a19 	vldr	s18, [r4, #-100]	@ 0xffffff9c
 8008296:	ed5c 8a18 	vldr	s17, [ip, #-96]	@ 0xffffffa0
 800829a:	ed14 8a18 	vldr	s16, [r4, #-96]	@ 0xffffffa0
 800829e:	eeed 7a26 	vfma.f32	s15, s26, s13
 80082a2:	ed1c 0a17 	vldr	s0, [ip, #-92]	@ 0xffffffa4
 80082a6:	ed54 0a17 	vldr	s1, [r4, #-92]	@ 0xffffffa4
 80082aa:	ed1c 1a16 	vldr	s2, [ip, #-88]	@ 0xffffffa8
 80082ae:	ed54 1a16 	vldr	s3, [r4, #-88]	@ 0xffffffa8
 80082b2:	ed1c 2a15 	vldr	s4, [ip, #-84]	@ 0xffffffac
 80082b6:	ed54 2a15 	vldr	s5, [r4, #-84]	@ 0xffffffac
 80082ba:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80082be:	ed1c 3a14 	vldr	s6, [ip, #-80]	@ 0xffffffb0
 80082c2:	ed54 3a14 	vldr	s7, [r4, #-80]	@ 0xffffffb0
 80082c6:	ed1c 4a13 	vldr	s8, [ip, #-76]	@ 0xffffffb4
 80082ca:	ed54 4a13 	vldr	s9, [r4, #-76]	@ 0xffffffb4
 80082ce:	ed1c 5a12 	vldr	s10, [ip, #-72]	@ 0xffffffb8
 80082d2:	ed54 5a12 	vldr	s11, [r4, #-72]	@ 0xffffffb8
 80082d6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80082da:	ed1c 6a11 	vldr	s12, [ip, #-68]	@ 0xffffffbc
 80082de:	ed54 6a11 	vldr	s13, [r4, #-68]	@ 0xffffffbc
 80082e2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80082e6:	eee9 7a89 	vfma.f32	s15, s19, s18
 80082ea:	eee8 7a88 	vfma.f32	s15, s17, s16
 80082ee:	eee0 7a20 	vfma.f32	s15, s0, s1
 80082f2:	eee1 7a21 	vfma.f32	s15, s2, s3
 80082f6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80082fa:	eee3 7a23 	vfma.f32	s15, s6, s7
 80082fe:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008302:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008306:	eee6 7a26 	vfma.f32	s15, s12, s13
 800830a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800830e:	d895      	bhi.n	800823c <lite_dense_if32of32wf32+0x48>
 8008310:	eb02 0e0a 	add.w	lr, r2, sl
 8008314:	465c      	mov	r4, fp
 8008316:	46c4      	mov	ip, r8
 8008318:	2c00      	cmp	r4, #0
 800831a:	d075      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800831c:	eddc 6a00 	vldr	s13, [ip]
 8008320:	2c01      	cmp	r4, #1
 8008322:	edde 7a00 	vldr	s15, [lr]
 8008326:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800832a:	d06d      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800832c:	eddc 6a01 	vldr	s13, [ip, #4]
 8008330:	2c02      	cmp	r4, #2
 8008332:	edde 7a01 	vldr	s15, [lr, #4]
 8008336:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800833a:	d065      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800833c:	eddc 6a02 	vldr	s13, [ip, #8]
 8008340:	2c03      	cmp	r4, #3
 8008342:	edde 7a02 	vldr	s15, [lr, #8]
 8008346:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800834a:	d05d      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800834c:	eddc 6a03 	vldr	s13, [ip, #12]
 8008350:	2c04      	cmp	r4, #4
 8008352:	edde 7a03 	vldr	s15, [lr, #12]
 8008356:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800835a:	d055      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800835c:	eddc 6a04 	vldr	s13, [ip, #16]
 8008360:	2c05      	cmp	r4, #5
 8008362:	edde 7a04 	vldr	s15, [lr, #16]
 8008366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800836a:	d04d      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800836c:	eddc 6a05 	vldr	s13, [ip, #20]
 8008370:	2c06      	cmp	r4, #6
 8008372:	edde 7a05 	vldr	s15, [lr, #20]
 8008376:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800837a:	d045      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800837c:	eddc 6a06 	vldr	s13, [ip, #24]
 8008380:	2c07      	cmp	r4, #7
 8008382:	edde 7a06 	vldr	s15, [lr, #24]
 8008386:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800838a:	d03d      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800838c:	eddc 6a07 	vldr	s13, [ip, #28]
 8008390:	2c08      	cmp	r4, #8
 8008392:	edde 7a07 	vldr	s15, [lr, #28]
 8008396:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800839a:	d035      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 800839c:	eddc 6a08 	vldr	s13, [ip, #32]
 80083a0:	2c09      	cmp	r4, #9
 80083a2:	edde 7a08 	vldr	s15, [lr, #32]
 80083a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083aa:	d02d      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 80083ac:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 80083b0:	2c0a      	cmp	r4, #10
 80083b2:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 80083b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083ba:	d025      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 80083bc:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 80083c0:	2c0b      	cmp	r4, #11
 80083c2:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 80083c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083ca:	d01d      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 80083cc:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 80083d0:	2c0c      	cmp	r4, #12
 80083d2:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 80083d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083da:	d015      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 80083dc:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 80083e0:	3c0d      	subs	r4, #13
 80083e2:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 80083e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083ea:	d00d      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 80083ec:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 80083f0:	2c01      	cmp	r4, #1
 80083f2:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 80083f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083fa:	d005      	beq.n	8008408 <lite_dense_if32of32wf32+0x214>
 80083fc:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 8008400:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 8008404:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008408:	eca5 7a01 	vstmia	r5!, {s14}
 800840c:	42af      	cmp	r7, r5
 800840e:	444a      	add	r2, r9
 8008410:	f63f af0a 	bhi.w	8008228 <lite_dense_if32of32wf32+0x34>
 8008414:	b15b      	cbz	r3, 800842e <lite_dense_if32of32wf32+0x23a>
 8008416:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008418:	b14a      	cbz	r2, 800842e <lite_dense_if32of32wf32+0x23a>
 800841a:	edd0 7a00 	vldr	s15, [r0]
 800841e:	ecb3 7a01 	vldmia	r3!, {s14}
 8008422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008426:	ece0 7a01 	vstmia	r0!, {s15}
 800842a:	4287      	cmp	r7, r0
 800842c:	d1f5      	bne.n	800841a <lite_dense_if32of32wf32+0x226>
 800842e:	ecbd 8b0c 	vpop	{d8-d13}
 8008432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	4634      	mov	r4, r6
 8008438:	4696      	mov	lr, r2
 800843a:	468c      	mov	ip, r1
 800843c:	e76c      	b.n	8008318 <lite_dense_if32of32wf32+0x124>
 800843e:	bf00      	nop
 8008440:	00000000 	.word	0x00000000

08008444 <ai_version_get>:
 8008444:	0212      	lsls	r2, r2, #8
 8008446:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800844a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800844e:	4770      	bx	lr

08008450 <get_tensor_byte_size>:
 8008450:	b430      	push	{r4, r5}
 8008452:	6985      	ldr	r5, [r0, #24]
 8008454:	68c4      	ldr	r4, [r0, #12]
 8008456:	6941      	ldr	r1, [r0, #20]
 8008458:	4b06      	ldr	r3, [pc, #24]	@ (8008474 <get_tensor_byte_size+0x24>)
 800845a:	6828      	ldr	r0, [r5, #0]
 800845c:	4a06      	ldr	r2, [pc, #24]	@ (8008478 <get_tensor_byte_size+0x28>)
 800845e:	4003      	ands	r3, r0
 8008460:	68c9      	ldr	r1, [r1, #12]
 8008462:	68e0      	ldr	r0, [r4, #12]
 8008464:	4293      	cmp	r3, r2
 8008466:	fb01 f000 	mul.w	r0, r1, r0
 800846a:	d101      	bne.n	8008470 <get_tensor_byte_size+0x20>
 800846c:	3007      	adds	r0, #7
 800846e:	08c0      	lsrs	r0, r0, #3
 8008470:	bc30      	pop	{r4, r5}
 8008472:	4770      	bx	lr
 8008474:	017fffff 	.word	0x017fffff
 8008478:	000400c0 	.word	0x000400c0

0800847c <ai_array_to_buffer_fmt>:
 800847c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008480:	2b02      	cmp	r3, #2
 8008482:	d050      	beq.n	8008526 <ai_array_to_buffer_fmt+0xaa>
 8008484:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 8008488:	4b29      	ldr	r3, [pc, #164]	@ (8008530 <ai_array_to_buffer_fmt+0xb4>)
 800848a:	429a      	cmp	r2, r3
 800848c:	d00b      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 800848e:	dc1c      	bgt.n	80084ca <ai_array_to_buffer_fmt+0x4e>
 8008490:	4b28      	ldr	r3, [pc, #160]	@ (8008534 <ai_array_to_buffer_fmt+0xb8>)
 8008492:	429a      	cmp	r2, r3
 8008494:	d007      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 8008496:	dd0b      	ble.n	80084b0 <ai_array_to_buffer_fmt+0x34>
 8008498:	4b27      	ldr	r3, [pc, #156]	@ (8008538 <ai_array_to_buffer_fmt+0xbc>)
 800849a:	429a      	cmp	r2, r3
 800849c:	d003      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 800849e:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d131      	bne.n	800850a <ai_array_to_buffer_fmt+0x8e>
 80084a6:	4613      	mov	r3, r2
 80084a8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80084ac:	4318      	orrs	r0, r3
 80084ae:	4770      	bx	lr
 80084b0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d0f6      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 80084b8:	dd2c      	ble.n	8008514 <ai_array_to_buffer_fmt+0x98>
 80084ba:	4b20      	ldr	r3, [pc, #128]	@ (800853c <ai_array_to_buffer_fmt+0xc0>)
 80084bc:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bf18      	it	ne
 80084c4:	2340      	movne	r3, #64	@ 0x40
 80084c6:	4318      	orrs	r0, r3
 80084c8:	4770      	bx	lr
 80084ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008540 <ai_array_to_buffer_fmt+0xc4>)
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d0ea      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 80084d0:	dd0e      	ble.n	80084f0 <ai_array_to_buffer_fmt+0x74>
 80084d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008544 <ai_array_to_buffer_fmt+0xc8>)
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d0e6      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 80084d8:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80084dc:	429a      	cmp	r2, r3
 80084de:	d0e2      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 80084e0:	4b19      	ldr	r3, [pc, #100]	@ (8008548 <ai_array_to_buffer_fmt+0xcc>)
 80084e2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80084e6:	429a      	cmp	r2, r3
 80084e8:	bf18      	it	ne
 80084ea:	2340      	movne	r3, #64	@ 0x40
 80084ec:	4318      	orrs	r0, r3
 80084ee:	4770      	bx	lr
 80084f0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d0d6      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 80084f8:	3307      	adds	r3, #7
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d0d3      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 80084fe:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 8008502:	429a      	cmp	r2, r3
 8008504:	bf18      	it	ne
 8008506:	2340      	movne	r3, #64	@ 0x40
 8008508:	e7ce      	b.n	80084a8 <ai_array_to_buffer_fmt+0x2c>
 800850a:	4b10      	ldr	r3, [pc, #64]	@ (800854c <ai_array_to_buffer_fmt+0xd0>)
 800850c:	429a      	cmp	r2, r3
 800850e:	bf18      	it	ne
 8008510:	2340      	movne	r3, #64	@ 0x40
 8008512:	e7c9      	b.n	80084a8 <ai_array_to_buffer_fmt+0x2c>
 8008514:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8008518:	429a      	cmp	r2, r3
 800851a:	d0c4      	beq.n	80084a6 <ai_array_to_buffer_fmt+0x2a>
 800851c:	3380      	adds	r3, #128	@ 0x80
 800851e:	429a      	cmp	r2, r3
 8008520:	bf18      	it	ne
 8008522:	2340      	movne	r3, #64	@ 0x40
 8008524:	e7c0      	b.n	80084a8 <ai_array_to_buffer_fmt+0x2c>
 8008526:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <ai_array_to_buffer_fmt+0xd4>)
 8008528:	4003      	ands	r3, r0
 800852a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800852e:	e7bb      	b.n	80084a8 <ai_array_to_buffer_fmt+0x2c>
 8008530:	00840040 	.word	0x00840040
 8008534:	00040840 	.word	0x00040840
 8008538:	00041040 	.word	0x00041040
 800853c:	00040447 	.word	0x00040447
 8008540:	00840840 	.word	0x00840840
 8008544:	00841040 	.word	0x00841040
 8008548:	0084084f 	.word	0x0084084f
 800854c:	0004084f 	.word	0x0004084f
 8008550:	00803fff 	.word	0x00803fff

08008554 <ai_array_get_byte_size>:
 8008554:	b319      	cbz	r1, 800859e <ai_array_get_byte_size+0x4a>
 8008556:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800855a:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800855e:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8008562:	11c0      	asrs	r0, r0, #7
 8008564:	fb03 f101 	mul.w	r1, r3, r1
 8008568:	2a04      	cmp	r2, #4
 800856a:	f101 0107 	add.w	r1, r1, #7
 800856e:	f021 0107 	bic.w	r1, r1, #7
 8008572:	fa21 f10c 	lsr.w	r1, r1, ip
 8008576:	d00b      	beq.n	8008590 <ai_array_get_byte_size+0x3c>
 8008578:	2a08      	cmp	r2, #8
 800857a:	d002      	beq.n	8008582 <ai_array_get_byte_size+0x2e>
 800857c:	3107      	adds	r1, #7
 800857e:	08c8      	lsrs	r0, r1, #3
 8008580:	4770      	bx	lr
 8008582:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008586:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800858a:	3107      	adds	r1, #7
 800858c:	08c8      	lsrs	r0, r1, #3
 800858e:	4770      	bx	lr
 8008590:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8008594:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008598:	3107      	adds	r1, #7
 800859a:	08c8      	lsrs	r0, r1, #3
 800859c:	4770      	bx	lr
 800859e:	4608      	mov	r0, r1
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <ai_array_get_data_byte_size>:
 80085a4:	b161      	cbz	r1, 80085c0 <ai_array_get_data_byte_size+0x1c>
 80085a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80085aa:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80085ae:	fb03 f101 	mul.w	r1, r3, r1
 80085b2:	1dc8      	adds	r0, r1, #7
 80085b4:	f020 0007 	bic.w	r0, r0, #7
 80085b8:	40d0      	lsrs	r0, r2
 80085ba:	3007      	adds	r0, #7
 80085bc:	08c0      	lsrs	r0, r0, #3
 80085be:	4770      	bx	lr
 80085c0:	4608      	mov	r0, r1
 80085c2:	4770      	bx	lr

080085c4 <malloc>:
 80085c4:	4b02      	ldr	r3, [pc, #8]	@ (80085d0 <malloc+0xc>)
 80085c6:	4601      	mov	r1, r0
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	f000 b825 	b.w	8008618 <_malloc_r>
 80085ce:	bf00      	nop
 80085d0:	20000944 	.word	0x20000944

080085d4 <sbrk_aligned>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008614 <sbrk_aligned+0x40>)
 80085d8:	460c      	mov	r4, r1
 80085da:	6831      	ldr	r1, [r6, #0]
 80085dc:	4605      	mov	r5, r0
 80085de:	b911      	cbnz	r1, 80085e6 <sbrk_aligned+0x12>
 80085e0:	f000 ff48 	bl	8009474 <_sbrk_r>
 80085e4:	6030      	str	r0, [r6, #0]
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 ff43 	bl	8009474 <_sbrk_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	d103      	bne.n	80085fa <sbrk_aligned+0x26>
 80085f2:	f04f 34ff 	mov.w	r4, #4294967295
 80085f6:	4620      	mov	r0, r4
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	1cc4      	adds	r4, r0, #3
 80085fc:	f024 0403 	bic.w	r4, r4, #3
 8008600:	42a0      	cmp	r0, r4
 8008602:	d0f8      	beq.n	80085f6 <sbrk_aligned+0x22>
 8008604:	1a21      	subs	r1, r4, r0
 8008606:	4628      	mov	r0, r5
 8008608:	f000 ff34 	bl	8009474 <_sbrk_r>
 800860c:	3001      	adds	r0, #1
 800860e:	d1f2      	bne.n	80085f6 <sbrk_aligned+0x22>
 8008610:	e7ef      	b.n	80085f2 <sbrk_aligned+0x1e>
 8008612:	bf00      	nop
 8008614:	20006dc0 	.word	0x20006dc0

08008618 <_malloc_r>:
 8008618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800861c:	1ccd      	adds	r5, r1, #3
 800861e:	f025 0503 	bic.w	r5, r5, #3
 8008622:	3508      	adds	r5, #8
 8008624:	2d0c      	cmp	r5, #12
 8008626:	bf38      	it	cc
 8008628:	250c      	movcc	r5, #12
 800862a:	2d00      	cmp	r5, #0
 800862c:	4606      	mov	r6, r0
 800862e:	db01      	blt.n	8008634 <_malloc_r+0x1c>
 8008630:	42a9      	cmp	r1, r5
 8008632:	d904      	bls.n	800863e <_malloc_r+0x26>
 8008634:	230c      	movs	r3, #12
 8008636:	6033      	str	r3, [r6, #0]
 8008638:	2000      	movs	r0, #0
 800863a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008714 <_malloc_r+0xfc>
 8008642:	f000 f869 	bl	8008718 <__malloc_lock>
 8008646:	f8d8 3000 	ldr.w	r3, [r8]
 800864a:	461c      	mov	r4, r3
 800864c:	bb44      	cbnz	r4, 80086a0 <_malloc_r+0x88>
 800864e:	4629      	mov	r1, r5
 8008650:	4630      	mov	r0, r6
 8008652:	f7ff ffbf 	bl	80085d4 <sbrk_aligned>
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	4604      	mov	r4, r0
 800865a:	d158      	bne.n	800870e <_malloc_r+0xf6>
 800865c:	f8d8 4000 	ldr.w	r4, [r8]
 8008660:	4627      	mov	r7, r4
 8008662:	2f00      	cmp	r7, #0
 8008664:	d143      	bne.n	80086ee <_malloc_r+0xd6>
 8008666:	2c00      	cmp	r4, #0
 8008668:	d04b      	beq.n	8008702 <_malloc_r+0xea>
 800866a:	6823      	ldr	r3, [r4, #0]
 800866c:	4639      	mov	r1, r7
 800866e:	4630      	mov	r0, r6
 8008670:	eb04 0903 	add.w	r9, r4, r3
 8008674:	f000 fefe 	bl	8009474 <_sbrk_r>
 8008678:	4581      	cmp	r9, r0
 800867a:	d142      	bne.n	8008702 <_malloc_r+0xea>
 800867c:	6821      	ldr	r1, [r4, #0]
 800867e:	1a6d      	subs	r5, r5, r1
 8008680:	4629      	mov	r1, r5
 8008682:	4630      	mov	r0, r6
 8008684:	f7ff ffa6 	bl	80085d4 <sbrk_aligned>
 8008688:	3001      	adds	r0, #1
 800868a:	d03a      	beq.n	8008702 <_malloc_r+0xea>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	442b      	add	r3, r5
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	f8d8 3000 	ldr.w	r3, [r8]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	bb62      	cbnz	r2, 80086f4 <_malloc_r+0xdc>
 800869a:	f8c8 7000 	str.w	r7, [r8]
 800869e:	e00f      	b.n	80086c0 <_malloc_r+0xa8>
 80086a0:	6822      	ldr	r2, [r4, #0]
 80086a2:	1b52      	subs	r2, r2, r5
 80086a4:	d420      	bmi.n	80086e8 <_malloc_r+0xd0>
 80086a6:	2a0b      	cmp	r2, #11
 80086a8:	d917      	bls.n	80086da <_malloc_r+0xc2>
 80086aa:	1961      	adds	r1, r4, r5
 80086ac:	42a3      	cmp	r3, r4
 80086ae:	6025      	str	r5, [r4, #0]
 80086b0:	bf18      	it	ne
 80086b2:	6059      	strne	r1, [r3, #4]
 80086b4:	6863      	ldr	r3, [r4, #4]
 80086b6:	bf08      	it	eq
 80086b8:	f8c8 1000 	streq.w	r1, [r8]
 80086bc:	5162      	str	r2, [r4, r5]
 80086be:	604b      	str	r3, [r1, #4]
 80086c0:	4630      	mov	r0, r6
 80086c2:	f000 f82f 	bl	8008724 <__malloc_unlock>
 80086c6:	f104 000b 	add.w	r0, r4, #11
 80086ca:	1d23      	adds	r3, r4, #4
 80086cc:	f020 0007 	bic.w	r0, r0, #7
 80086d0:	1ac2      	subs	r2, r0, r3
 80086d2:	bf1c      	itt	ne
 80086d4:	1a1b      	subne	r3, r3, r0
 80086d6:	50a3      	strne	r3, [r4, r2]
 80086d8:	e7af      	b.n	800863a <_malloc_r+0x22>
 80086da:	6862      	ldr	r2, [r4, #4]
 80086dc:	42a3      	cmp	r3, r4
 80086de:	bf0c      	ite	eq
 80086e0:	f8c8 2000 	streq.w	r2, [r8]
 80086e4:	605a      	strne	r2, [r3, #4]
 80086e6:	e7eb      	b.n	80086c0 <_malloc_r+0xa8>
 80086e8:	4623      	mov	r3, r4
 80086ea:	6864      	ldr	r4, [r4, #4]
 80086ec:	e7ae      	b.n	800864c <_malloc_r+0x34>
 80086ee:	463c      	mov	r4, r7
 80086f0:	687f      	ldr	r7, [r7, #4]
 80086f2:	e7b6      	b.n	8008662 <_malloc_r+0x4a>
 80086f4:	461a      	mov	r2, r3
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	d1fb      	bne.n	80086f4 <_malloc_r+0xdc>
 80086fc:	2300      	movs	r3, #0
 80086fe:	6053      	str	r3, [r2, #4]
 8008700:	e7de      	b.n	80086c0 <_malloc_r+0xa8>
 8008702:	230c      	movs	r3, #12
 8008704:	6033      	str	r3, [r6, #0]
 8008706:	4630      	mov	r0, r6
 8008708:	f000 f80c 	bl	8008724 <__malloc_unlock>
 800870c:	e794      	b.n	8008638 <_malloc_r+0x20>
 800870e:	6005      	str	r5, [r0, #0]
 8008710:	e7d6      	b.n	80086c0 <_malloc_r+0xa8>
 8008712:	bf00      	nop
 8008714:	20006dc4 	.word	0x20006dc4

08008718 <__malloc_lock>:
 8008718:	4801      	ldr	r0, [pc, #4]	@ (8008720 <__malloc_lock+0x8>)
 800871a:	f000 bef8 	b.w	800950e <__retarget_lock_acquire_recursive>
 800871e:	bf00      	nop
 8008720:	20006f08 	.word	0x20006f08

08008724 <__malloc_unlock>:
 8008724:	4801      	ldr	r0, [pc, #4]	@ (800872c <__malloc_unlock+0x8>)
 8008726:	f000 bef3 	b.w	8009510 <__retarget_lock_release_recursive>
 800872a:	bf00      	nop
 800872c:	20006f08 	.word	0x20006f08

08008730 <__cvt>:
 8008730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008734:	ec57 6b10 	vmov	r6, r7, d0
 8008738:	2f00      	cmp	r7, #0
 800873a:	460c      	mov	r4, r1
 800873c:	4619      	mov	r1, r3
 800873e:	463b      	mov	r3, r7
 8008740:	bfbb      	ittet	lt
 8008742:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008746:	461f      	movlt	r7, r3
 8008748:	2300      	movge	r3, #0
 800874a:	232d      	movlt	r3, #45	@ 0x2d
 800874c:	700b      	strb	r3, [r1, #0]
 800874e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008750:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008754:	4691      	mov	r9, r2
 8008756:	f023 0820 	bic.w	r8, r3, #32
 800875a:	bfbc      	itt	lt
 800875c:	4632      	movlt	r2, r6
 800875e:	4616      	movlt	r6, r2
 8008760:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008764:	d005      	beq.n	8008772 <__cvt+0x42>
 8008766:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800876a:	d100      	bne.n	800876e <__cvt+0x3e>
 800876c:	3401      	adds	r4, #1
 800876e:	2102      	movs	r1, #2
 8008770:	e000      	b.n	8008774 <__cvt+0x44>
 8008772:	2103      	movs	r1, #3
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9301      	str	r3, [sp, #4]
 8008778:	ab02      	add	r3, sp, #8
 800877a:	9300      	str	r3, [sp, #0]
 800877c:	ec47 6b10 	vmov	d0, r6, r7
 8008780:	4653      	mov	r3, sl
 8008782:	4622      	mov	r2, r4
 8008784:	f000 ff5c 	bl	8009640 <_dtoa_r>
 8008788:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800878c:	4605      	mov	r5, r0
 800878e:	d119      	bne.n	80087c4 <__cvt+0x94>
 8008790:	f019 0f01 	tst.w	r9, #1
 8008794:	d00e      	beq.n	80087b4 <__cvt+0x84>
 8008796:	eb00 0904 	add.w	r9, r0, r4
 800879a:	2200      	movs	r2, #0
 800879c:	2300      	movs	r3, #0
 800879e:	4630      	mov	r0, r6
 80087a0:	4639      	mov	r1, r7
 80087a2:	f7f8 fa19 	bl	8000bd8 <__aeabi_dcmpeq>
 80087a6:	b108      	cbz	r0, 80087ac <__cvt+0x7c>
 80087a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80087ac:	2230      	movs	r2, #48	@ 0x30
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	454b      	cmp	r3, r9
 80087b2:	d31e      	bcc.n	80087f2 <__cvt+0xc2>
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087b8:	1b5b      	subs	r3, r3, r5
 80087ba:	4628      	mov	r0, r5
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	b004      	add	sp, #16
 80087c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087c8:	eb00 0904 	add.w	r9, r0, r4
 80087cc:	d1e5      	bne.n	800879a <__cvt+0x6a>
 80087ce:	7803      	ldrb	r3, [r0, #0]
 80087d0:	2b30      	cmp	r3, #48	@ 0x30
 80087d2:	d10a      	bne.n	80087ea <__cvt+0xba>
 80087d4:	2200      	movs	r2, #0
 80087d6:	2300      	movs	r3, #0
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f8 f9fc 	bl	8000bd8 <__aeabi_dcmpeq>
 80087e0:	b918      	cbnz	r0, 80087ea <__cvt+0xba>
 80087e2:	f1c4 0401 	rsb	r4, r4, #1
 80087e6:	f8ca 4000 	str.w	r4, [sl]
 80087ea:	f8da 3000 	ldr.w	r3, [sl]
 80087ee:	4499      	add	r9, r3
 80087f0:	e7d3      	b.n	800879a <__cvt+0x6a>
 80087f2:	1c59      	adds	r1, r3, #1
 80087f4:	9103      	str	r1, [sp, #12]
 80087f6:	701a      	strb	r2, [r3, #0]
 80087f8:	e7d9      	b.n	80087ae <__cvt+0x7e>

080087fa <__exponent>:
 80087fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087fc:	2900      	cmp	r1, #0
 80087fe:	bfba      	itte	lt
 8008800:	4249      	neglt	r1, r1
 8008802:	232d      	movlt	r3, #45	@ 0x2d
 8008804:	232b      	movge	r3, #43	@ 0x2b
 8008806:	2909      	cmp	r1, #9
 8008808:	7002      	strb	r2, [r0, #0]
 800880a:	7043      	strb	r3, [r0, #1]
 800880c:	dd29      	ble.n	8008862 <__exponent+0x68>
 800880e:	f10d 0307 	add.w	r3, sp, #7
 8008812:	461d      	mov	r5, r3
 8008814:	270a      	movs	r7, #10
 8008816:	461a      	mov	r2, r3
 8008818:	fbb1 f6f7 	udiv	r6, r1, r7
 800881c:	fb07 1416 	mls	r4, r7, r6, r1
 8008820:	3430      	adds	r4, #48	@ 0x30
 8008822:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008826:	460c      	mov	r4, r1
 8008828:	2c63      	cmp	r4, #99	@ 0x63
 800882a:	f103 33ff 	add.w	r3, r3, #4294967295
 800882e:	4631      	mov	r1, r6
 8008830:	dcf1      	bgt.n	8008816 <__exponent+0x1c>
 8008832:	3130      	adds	r1, #48	@ 0x30
 8008834:	1e94      	subs	r4, r2, #2
 8008836:	f803 1c01 	strb.w	r1, [r3, #-1]
 800883a:	1c41      	adds	r1, r0, #1
 800883c:	4623      	mov	r3, r4
 800883e:	42ab      	cmp	r3, r5
 8008840:	d30a      	bcc.n	8008858 <__exponent+0x5e>
 8008842:	f10d 0309 	add.w	r3, sp, #9
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	42ac      	cmp	r4, r5
 800884a:	bf88      	it	hi
 800884c:	2300      	movhi	r3, #0
 800884e:	3302      	adds	r3, #2
 8008850:	4403      	add	r3, r0
 8008852:	1a18      	subs	r0, r3, r0
 8008854:	b003      	add	sp, #12
 8008856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008858:	f813 6b01 	ldrb.w	r6, [r3], #1
 800885c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008860:	e7ed      	b.n	800883e <__exponent+0x44>
 8008862:	2330      	movs	r3, #48	@ 0x30
 8008864:	3130      	adds	r1, #48	@ 0x30
 8008866:	7083      	strb	r3, [r0, #2]
 8008868:	70c1      	strb	r1, [r0, #3]
 800886a:	1d03      	adds	r3, r0, #4
 800886c:	e7f1      	b.n	8008852 <__exponent+0x58>
	...

08008870 <_printf_float>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	b08d      	sub	sp, #52	@ 0x34
 8008876:	460c      	mov	r4, r1
 8008878:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800887c:	4616      	mov	r6, r2
 800887e:	461f      	mov	r7, r3
 8008880:	4605      	mov	r5, r0
 8008882:	f000 fdbf 	bl	8009404 <_localeconv_r>
 8008886:	6803      	ldr	r3, [r0, #0]
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	4618      	mov	r0, r3
 800888c:	f7f7 fd78 	bl	8000380 <strlen>
 8008890:	2300      	movs	r3, #0
 8008892:	930a      	str	r3, [sp, #40]	@ 0x28
 8008894:	f8d8 3000 	ldr.w	r3, [r8]
 8008898:	9005      	str	r0, [sp, #20]
 800889a:	3307      	adds	r3, #7
 800889c:	f023 0307 	bic.w	r3, r3, #7
 80088a0:	f103 0208 	add.w	r2, r3, #8
 80088a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088a8:	f8d4 b000 	ldr.w	fp, [r4]
 80088ac:	f8c8 2000 	str.w	r2, [r8]
 80088b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088b8:	9307      	str	r3, [sp, #28]
 80088ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80088be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80088c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088c6:	4b9c      	ldr	r3, [pc, #624]	@ (8008b38 <_printf_float+0x2c8>)
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	f7f8 f9b6 	bl	8000c3c <__aeabi_dcmpun>
 80088d0:	bb70      	cbnz	r0, 8008930 <_printf_float+0xc0>
 80088d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088d6:	4b98      	ldr	r3, [pc, #608]	@ (8008b38 <_printf_float+0x2c8>)
 80088d8:	f04f 32ff 	mov.w	r2, #4294967295
 80088dc:	f7f8 f990 	bl	8000c00 <__aeabi_dcmple>
 80088e0:	bb30      	cbnz	r0, 8008930 <_printf_float+0xc0>
 80088e2:	2200      	movs	r2, #0
 80088e4:	2300      	movs	r3, #0
 80088e6:	4640      	mov	r0, r8
 80088e8:	4649      	mov	r1, r9
 80088ea:	f7f8 f97f 	bl	8000bec <__aeabi_dcmplt>
 80088ee:	b110      	cbz	r0, 80088f6 <_printf_float+0x86>
 80088f0:	232d      	movs	r3, #45	@ 0x2d
 80088f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088f6:	4a91      	ldr	r2, [pc, #580]	@ (8008b3c <_printf_float+0x2cc>)
 80088f8:	4b91      	ldr	r3, [pc, #580]	@ (8008b40 <_printf_float+0x2d0>)
 80088fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088fe:	bf94      	ite	ls
 8008900:	4690      	movls	r8, r2
 8008902:	4698      	movhi	r8, r3
 8008904:	2303      	movs	r3, #3
 8008906:	6123      	str	r3, [r4, #16]
 8008908:	f02b 0304 	bic.w	r3, fp, #4
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	f04f 0900 	mov.w	r9, #0
 8008912:	9700      	str	r7, [sp, #0]
 8008914:	4633      	mov	r3, r6
 8008916:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008918:	4621      	mov	r1, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 f9d2 	bl	8008cc4 <_printf_common>
 8008920:	3001      	adds	r0, #1
 8008922:	f040 808d 	bne.w	8008a40 <_printf_float+0x1d0>
 8008926:	f04f 30ff 	mov.w	r0, #4294967295
 800892a:	b00d      	add	sp, #52	@ 0x34
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	4642      	mov	r2, r8
 8008932:	464b      	mov	r3, r9
 8008934:	4640      	mov	r0, r8
 8008936:	4649      	mov	r1, r9
 8008938:	f7f8 f980 	bl	8000c3c <__aeabi_dcmpun>
 800893c:	b140      	cbz	r0, 8008950 <_printf_float+0xe0>
 800893e:	464b      	mov	r3, r9
 8008940:	2b00      	cmp	r3, #0
 8008942:	bfbc      	itt	lt
 8008944:	232d      	movlt	r3, #45	@ 0x2d
 8008946:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800894a:	4a7e      	ldr	r2, [pc, #504]	@ (8008b44 <_printf_float+0x2d4>)
 800894c:	4b7e      	ldr	r3, [pc, #504]	@ (8008b48 <_printf_float+0x2d8>)
 800894e:	e7d4      	b.n	80088fa <_printf_float+0x8a>
 8008950:	6863      	ldr	r3, [r4, #4]
 8008952:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008956:	9206      	str	r2, [sp, #24]
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	d13b      	bne.n	80089d4 <_printf_float+0x164>
 800895c:	2306      	movs	r3, #6
 800895e:	6063      	str	r3, [r4, #4]
 8008960:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008964:	2300      	movs	r3, #0
 8008966:	6022      	str	r2, [r4, #0]
 8008968:	9303      	str	r3, [sp, #12]
 800896a:	ab0a      	add	r3, sp, #40	@ 0x28
 800896c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008970:	ab09      	add	r3, sp, #36	@ 0x24
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	6861      	ldr	r1, [r4, #4]
 8008976:	ec49 8b10 	vmov	d0, r8, r9
 800897a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800897e:	4628      	mov	r0, r5
 8008980:	f7ff fed6 	bl	8008730 <__cvt>
 8008984:	9b06      	ldr	r3, [sp, #24]
 8008986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008988:	2b47      	cmp	r3, #71	@ 0x47
 800898a:	4680      	mov	r8, r0
 800898c:	d129      	bne.n	80089e2 <_printf_float+0x172>
 800898e:	1cc8      	adds	r0, r1, #3
 8008990:	db02      	blt.n	8008998 <_printf_float+0x128>
 8008992:	6863      	ldr	r3, [r4, #4]
 8008994:	4299      	cmp	r1, r3
 8008996:	dd41      	ble.n	8008a1c <_printf_float+0x1ac>
 8008998:	f1aa 0a02 	sub.w	sl, sl, #2
 800899c:	fa5f fa8a 	uxtb.w	sl, sl
 80089a0:	3901      	subs	r1, #1
 80089a2:	4652      	mov	r2, sl
 80089a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80089aa:	f7ff ff26 	bl	80087fa <__exponent>
 80089ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089b0:	1813      	adds	r3, r2, r0
 80089b2:	2a01      	cmp	r2, #1
 80089b4:	4681      	mov	r9, r0
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	dc02      	bgt.n	80089c0 <_printf_float+0x150>
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	07d2      	lsls	r2, r2, #31
 80089be:	d501      	bpl.n	80089c4 <_printf_float+0x154>
 80089c0:	3301      	adds	r3, #1
 80089c2:	6123      	str	r3, [r4, #16]
 80089c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d0a2      	beq.n	8008912 <_printf_float+0xa2>
 80089cc:	232d      	movs	r3, #45	@ 0x2d
 80089ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089d2:	e79e      	b.n	8008912 <_printf_float+0xa2>
 80089d4:	9a06      	ldr	r2, [sp, #24]
 80089d6:	2a47      	cmp	r2, #71	@ 0x47
 80089d8:	d1c2      	bne.n	8008960 <_printf_float+0xf0>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1c0      	bne.n	8008960 <_printf_float+0xf0>
 80089de:	2301      	movs	r3, #1
 80089e0:	e7bd      	b.n	800895e <_printf_float+0xee>
 80089e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089e6:	d9db      	bls.n	80089a0 <_printf_float+0x130>
 80089e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80089ec:	d118      	bne.n	8008a20 <_printf_float+0x1b0>
 80089ee:	2900      	cmp	r1, #0
 80089f0:	6863      	ldr	r3, [r4, #4]
 80089f2:	dd0b      	ble.n	8008a0c <_printf_float+0x19c>
 80089f4:	6121      	str	r1, [r4, #16]
 80089f6:	b913      	cbnz	r3, 80089fe <_printf_float+0x18e>
 80089f8:	6822      	ldr	r2, [r4, #0]
 80089fa:	07d0      	lsls	r0, r2, #31
 80089fc:	d502      	bpl.n	8008a04 <_printf_float+0x194>
 80089fe:	3301      	adds	r3, #1
 8008a00:	440b      	add	r3, r1
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a06:	f04f 0900 	mov.w	r9, #0
 8008a0a:	e7db      	b.n	80089c4 <_printf_float+0x154>
 8008a0c:	b913      	cbnz	r3, 8008a14 <_printf_float+0x1a4>
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	07d2      	lsls	r2, r2, #31
 8008a12:	d501      	bpl.n	8008a18 <_printf_float+0x1a8>
 8008a14:	3302      	adds	r3, #2
 8008a16:	e7f4      	b.n	8008a02 <_printf_float+0x192>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e7f2      	b.n	8008a02 <_printf_float+0x192>
 8008a1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a22:	4299      	cmp	r1, r3
 8008a24:	db05      	blt.n	8008a32 <_printf_float+0x1c2>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	6121      	str	r1, [r4, #16]
 8008a2a:	07d8      	lsls	r0, r3, #31
 8008a2c:	d5ea      	bpl.n	8008a04 <_printf_float+0x194>
 8008a2e:	1c4b      	adds	r3, r1, #1
 8008a30:	e7e7      	b.n	8008a02 <_printf_float+0x192>
 8008a32:	2900      	cmp	r1, #0
 8008a34:	bfd4      	ite	le
 8008a36:	f1c1 0202 	rsble	r2, r1, #2
 8008a3a:	2201      	movgt	r2, #1
 8008a3c:	4413      	add	r3, r2
 8008a3e:	e7e0      	b.n	8008a02 <_printf_float+0x192>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	055a      	lsls	r2, r3, #21
 8008a44:	d407      	bmi.n	8008a56 <_printf_float+0x1e6>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	4642      	mov	r2, r8
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	d12b      	bne.n	8008aac <_printf_float+0x23c>
 8008a54:	e767      	b.n	8008926 <_printf_float+0xb6>
 8008a56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a5a:	f240 80dd 	bls.w	8008c18 <_printf_float+0x3a8>
 8008a5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a62:	2200      	movs	r2, #0
 8008a64:	2300      	movs	r3, #0
 8008a66:	f7f8 f8b7 	bl	8000bd8 <__aeabi_dcmpeq>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d033      	beq.n	8008ad6 <_printf_float+0x266>
 8008a6e:	4a37      	ldr	r2, [pc, #220]	@ (8008b4c <_printf_float+0x2dc>)
 8008a70:	2301      	movs	r3, #1
 8008a72:	4631      	mov	r1, r6
 8008a74:	4628      	mov	r0, r5
 8008a76:	47b8      	blx	r7
 8008a78:	3001      	adds	r0, #1
 8008a7a:	f43f af54 	beq.w	8008926 <_printf_float+0xb6>
 8008a7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a82:	4543      	cmp	r3, r8
 8008a84:	db02      	blt.n	8008a8c <_printf_float+0x21c>
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	07d8      	lsls	r0, r3, #31
 8008a8a:	d50f      	bpl.n	8008aac <_printf_float+0x23c>
 8008a8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a90:	4631      	mov	r1, r6
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f af45 	beq.w	8008926 <_printf_float+0xb6>
 8008a9c:	f04f 0900 	mov.w	r9, #0
 8008aa0:	f108 38ff 	add.w	r8, r8, #4294967295
 8008aa4:	f104 0a1a 	add.w	sl, r4, #26
 8008aa8:	45c8      	cmp	r8, r9
 8008aaa:	dc09      	bgt.n	8008ac0 <_printf_float+0x250>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	079b      	lsls	r3, r3, #30
 8008ab0:	f100 8103 	bmi.w	8008cba <_printf_float+0x44a>
 8008ab4:	68e0      	ldr	r0, [r4, #12]
 8008ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab8:	4298      	cmp	r0, r3
 8008aba:	bfb8      	it	lt
 8008abc:	4618      	movlt	r0, r3
 8008abe:	e734      	b.n	800892a <_printf_float+0xba>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4652      	mov	r2, sl
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f af2b 	beq.w	8008926 <_printf_float+0xb6>
 8008ad0:	f109 0901 	add.w	r9, r9, #1
 8008ad4:	e7e8      	b.n	8008aa8 <_printf_float+0x238>
 8008ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dc39      	bgt.n	8008b50 <_printf_float+0x2e0>
 8008adc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b4c <_printf_float+0x2dc>)
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	f43f af1d 	beq.w	8008926 <_printf_float+0xb6>
 8008aec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008af0:	ea59 0303 	orrs.w	r3, r9, r3
 8008af4:	d102      	bne.n	8008afc <_printf_float+0x28c>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	07d9      	lsls	r1, r3, #31
 8008afa:	d5d7      	bpl.n	8008aac <_printf_float+0x23c>
 8008afc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b00:	4631      	mov	r1, r6
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f af0d 	beq.w	8008926 <_printf_float+0xb6>
 8008b0c:	f04f 0a00 	mov.w	sl, #0
 8008b10:	f104 0b1a 	add.w	fp, r4, #26
 8008b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b16:	425b      	negs	r3, r3
 8008b18:	4553      	cmp	r3, sl
 8008b1a:	dc01      	bgt.n	8008b20 <_printf_float+0x2b0>
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	e793      	b.n	8008a48 <_printf_float+0x1d8>
 8008b20:	2301      	movs	r3, #1
 8008b22:	465a      	mov	r2, fp
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f aefb 	beq.w	8008926 <_printf_float+0xb6>
 8008b30:	f10a 0a01 	add.w	sl, sl, #1
 8008b34:	e7ee      	b.n	8008b14 <_printf_float+0x2a4>
 8008b36:	bf00      	nop
 8008b38:	7fefffff 	.word	0x7fefffff
 8008b3c:	080395c8 	.word	0x080395c8
 8008b40:	080395cc 	.word	0x080395cc
 8008b44:	080395d0 	.word	0x080395d0
 8008b48:	080395d4 	.word	0x080395d4
 8008b4c:	080395d8 	.word	0x080395d8
 8008b50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b56:	4553      	cmp	r3, sl
 8008b58:	bfa8      	it	ge
 8008b5a:	4653      	movge	r3, sl
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	4699      	mov	r9, r3
 8008b60:	dc36      	bgt.n	8008bd0 <_printf_float+0x360>
 8008b62:	f04f 0b00 	mov.w	fp, #0
 8008b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b6a:	f104 021a 	add.w	r2, r4, #26
 8008b6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b70:	9306      	str	r3, [sp, #24]
 8008b72:	eba3 0309 	sub.w	r3, r3, r9
 8008b76:	455b      	cmp	r3, fp
 8008b78:	dc31      	bgt.n	8008bde <_printf_float+0x36e>
 8008b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b7c:	459a      	cmp	sl, r3
 8008b7e:	dc3a      	bgt.n	8008bf6 <_printf_float+0x386>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	07da      	lsls	r2, r3, #31
 8008b84:	d437      	bmi.n	8008bf6 <_printf_float+0x386>
 8008b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b88:	ebaa 0903 	sub.w	r9, sl, r3
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	ebaa 0303 	sub.w	r3, sl, r3
 8008b92:	4599      	cmp	r9, r3
 8008b94:	bfa8      	it	ge
 8008b96:	4699      	movge	r9, r3
 8008b98:	f1b9 0f00 	cmp.w	r9, #0
 8008b9c:	dc33      	bgt.n	8008c06 <_printf_float+0x396>
 8008b9e:	f04f 0800 	mov.w	r8, #0
 8008ba2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ba6:	f104 0b1a 	add.w	fp, r4, #26
 8008baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bac:	ebaa 0303 	sub.w	r3, sl, r3
 8008bb0:	eba3 0309 	sub.w	r3, r3, r9
 8008bb4:	4543      	cmp	r3, r8
 8008bb6:	f77f af79 	ble.w	8008aac <_printf_float+0x23c>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	465a      	mov	r2, fp
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b8      	blx	r7
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	f43f aeae 	beq.w	8008926 <_printf_float+0xb6>
 8008bca:	f108 0801 	add.w	r8, r8, #1
 8008bce:	e7ec      	b.n	8008baa <_printf_float+0x33a>
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	4628      	mov	r0, r5
 8008bd6:	47b8      	blx	r7
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d1c2      	bne.n	8008b62 <_printf_float+0x2f2>
 8008bdc:	e6a3      	b.n	8008926 <_printf_float+0xb6>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	9206      	str	r2, [sp, #24]
 8008be6:	47b8      	blx	r7
 8008be8:	3001      	adds	r0, #1
 8008bea:	f43f ae9c 	beq.w	8008926 <_printf_float+0xb6>
 8008bee:	9a06      	ldr	r2, [sp, #24]
 8008bf0:	f10b 0b01 	add.w	fp, fp, #1
 8008bf4:	e7bb      	b.n	8008b6e <_printf_float+0x2fe>
 8008bf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	d1c0      	bne.n	8008b86 <_printf_float+0x316>
 8008c04:	e68f      	b.n	8008926 <_printf_float+0xb6>
 8008c06:	9a06      	ldr	r2, [sp, #24]
 8008c08:	464b      	mov	r3, r9
 8008c0a:	4442      	add	r2, r8
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4628      	mov	r0, r5
 8008c10:	47b8      	blx	r7
 8008c12:	3001      	adds	r0, #1
 8008c14:	d1c3      	bne.n	8008b9e <_printf_float+0x32e>
 8008c16:	e686      	b.n	8008926 <_printf_float+0xb6>
 8008c18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c1c:	f1ba 0f01 	cmp.w	sl, #1
 8008c20:	dc01      	bgt.n	8008c26 <_printf_float+0x3b6>
 8008c22:	07db      	lsls	r3, r3, #31
 8008c24:	d536      	bpl.n	8008c94 <_printf_float+0x424>
 8008c26:	2301      	movs	r3, #1
 8008c28:	4642      	mov	r2, r8
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b8      	blx	r7
 8008c30:	3001      	adds	r0, #1
 8008c32:	f43f ae78 	beq.w	8008926 <_printf_float+0xb6>
 8008c36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b8      	blx	r7
 8008c40:	3001      	adds	r0, #1
 8008c42:	f43f ae70 	beq.w	8008926 <_printf_float+0xb6>
 8008c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c52:	f7f7 ffc1 	bl	8000bd8 <__aeabi_dcmpeq>
 8008c56:	b9c0      	cbnz	r0, 8008c8a <_printf_float+0x41a>
 8008c58:	4653      	mov	r3, sl
 8008c5a:	f108 0201 	add.w	r2, r8, #1
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	d10c      	bne.n	8008c82 <_printf_float+0x412>
 8008c68:	e65d      	b.n	8008926 <_printf_float+0xb6>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	465a      	mov	r2, fp
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f ae56 	beq.w	8008926 <_printf_float+0xb6>
 8008c7a:	f108 0801 	add.w	r8, r8, #1
 8008c7e:	45d0      	cmp	r8, sl
 8008c80:	dbf3      	blt.n	8008c6a <_printf_float+0x3fa>
 8008c82:	464b      	mov	r3, r9
 8008c84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c88:	e6df      	b.n	8008a4a <_printf_float+0x1da>
 8008c8a:	f04f 0800 	mov.w	r8, #0
 8008c8e:	f104 0b1a 	add.w	fp, r4, #26
 8008c92:	e7f4      	b.n	8008c7e <_printf_float+0x40e>
 8008c94:	2301      	movs	r3, #1
 8008c96:	4642      	mov	r2, r8
 8008c98:	e7e1      	b.n	8008c5e <_printf_float+0x3ee>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	464a      	mov	r2, r9
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	47b8      	blx	r7
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	f43f ae3e 	beq.w	8008926 <_printf_float+0xb6>
 8008caa:	f108 0801 	add.w	r8, r8, #1
 8008cae:	68e3      	ldr	r3, [r4, #12]
 8008cb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cb2:	1a5b      	subs	r3, r3, r1
 8008cb4:	4543      	cmp	r3, r8
 8008cb6:	dcf0      	bgt.n	8008c9a <_printf_float+0x42a>
 8008cb8:	e6fc      	b.n	8008ab4 <_printf_float+0x244>
 8008cba:	f04f 0800 	mov.w	r8, #0
 8008cbe:	f104 0919 	add.w	r9, r4, #25
 8008cc2:	e7f4      	b.n	8008cae <_printf_float+0x43e>

08008cc4 <_printf_common>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	4616      	mov	r6, r2
 8008cca:	4698      	mov	r8, r3
 8008ccc:	688a      	ldr	r2, [r1, #8]
 8008cce:	690b      	ldr	r3, [r1, #16]
 8008cd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	bfb8      	it	lt
 8008cd8:	4613      	movlt	r3, r2
 8008cda:	6033      	str	r3, [r6, #0]
 8008cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ce0:	4607      	mov	r7, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	b10a      	cbz	r2, 8008cea <_printf_common+0x26>
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	6033      	str	r3, [r6, #0]
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	0699      	lsls	r1, r3, #26
 8008cee:	bf42      	ittt	mi
 8008cf0:	6833      	ldrmi	r3, [r6, #0]
 8008cf2:	3302      	addmi	r3, #2
 8008cf4:	6033      	strmi	r3, [r6, #0]
 8008cf6:	6825      	ldr	r5, [r4, #0]
 8008cf8:	f015 0506 	ands.w	r5, r5, #6
 8008cfc:	d106      	bne.n	8008d0c <_printf_common+0x48>
 8008cfe:	f104 0a19 	add.w	sl, r4, #25
 8008d02:	68e3      	ldr	r3, [r4, #12]
 8008d04:	6832      	ldr	r2, [r6, #0]
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	dc26      	bgt.n	8008d5a <_printf_common+0x96>
 8008d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d10:	6822      	ldr	r2, [r4, #0]
 8008d12:	3b00      	subs	r3, #0
 8008d14:	bf18      	it	ne
 8008d16:	2301      	movne	r3, #1
 8008d18:	0692      	lsls	r2, r2, #26
 8008d1a:	d42b      	bmi.n	8008d74 <_printf_common+0xb0>
 8008d1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d20:	4641      	mov	r1, r8
 8008d22:	4638      	mov	r0, r7
 8008d24:	47c8      	blx	r9
 8008d26:	3001      	adds	r0, #1
 8008d28:	d01e      	beq.n	8008d68 <_printf_common+0xa4>
 8008d2a:	6823      	ldr	r3, [r4, #0]
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	f003 0306 	and.w	r3, r3, #6
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	bf02      	ittt	eq
 8008d36:	68e5      	ldreq	r5, [r4, #12]
 8008d38:	6833      	ldreq	r3, [r6, #0]
 8008d3a:	1aed      	subeq	r5, r5, r3
 8008d3c:	68a3      	ldr	r3, [r4, #8]
 8008d3e:	bf0c      	ite	eq
 8008d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d44:	2500      	movne	r5, #0
 8008d46:	4293      	cmp	r3, r2
 8008d48:	bfc4      	itt	gt
 8008d4a:	1a9b      	subgt	r3, r3, r2
 8008d4c:	18ed      	addgt	r5, r5, r3
 8008d4e:	2600      	movs	r6, #0
 8008d50:	341a      	adds	r4, #26
 8008d52:	42b5      	cmp	r5, r6
 8008d54:	d11a      	bne.n	8008d8c <_printf_common+0xc8>
 8008d56:	2000      	movs	r0, #0
 8008d58:	e008      	b.n	8008d6c <_printf_common+0xa8>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4652      	mov	r2, sl
 8008d5e:	4641      	mov	r1, r8
 8008d60:	4638      	mov	r0, r7
 8008d62:	47c8      	blx	r9
 8008d64:	3001      	adds	r0, #1
 8008d66:	d103      	bne.n	8008d70 <_printf_common+0xac>
 8008d68:	f04f 30ff 	mov.w	r0, #4294967295
 8008d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d70:	3501      	adds	r5, #1
 8008d72:	e7c6      	b.n	8008d02 <_printf_common+0x3e>
 8008d74:	18e1      	adds	r1, r4, r3
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	2030      	movs	r0, #48	@ 0x30
 8008d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d7e:	4422      	add	r2, r4
 8008d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d88:	3302      	adds	r3, #2
 8008d8a:	e7c7      	b.n	8008d1c <_printf_common+0x58>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	4622      	mov	r2, r4
 8008d90:	4641      	mov	r1, r8
 8008d92:	4638      	mov	r0, r7
 8008d94:	47c8      	blx	r9
 8008d96:	3001      	adds	r0, #1
 8008d98:	d0e6      	beq.n	8008d68 <_printf_common+0xa4>
 8008d9a:	3601      	adds	r6, #1
 8008d9c:	e7d9      	b.n	8008d52 <_printf_common+0x8e>
	...

08008da0 <_printf_i>:
 8008da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	7e0f      	ldrb	r7, [r1, #24]
 8008da6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008da8:	2f78      	cmp	r7, #120	@ 0x78
 8008daa:	4691      	mov	r9, r2
 8008dac:	4680      	mov	r8, r0
 8008dae:	460c      	mov	r4, r1
 8008db0:	469a      	mov	sl, r3
 8008db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008db6:	d807      	bhi.n	8008dc8 <_printf_i+0x28>
 8008db8:	2f62      	cmp	r7, #98	@ 0x62
 8008dba:	d80a      	bhi.n	8008dd2 <_printf_i+0x32>
 8008dbc:	2f00      	cmp	r7, #0
 8008dbe:	f000 80d2 	beq.w	8008f66 <_printf_i+0x1c6>
 8008dc2:	2f58      	cmp	r7, #88	@ 0x58
 8008dc4:	f000 80b9 	beq.w	8008f3a <_printf_i+0x19a>
 8008dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008dd0:	e03a      	b.n	8008e48 <_printf_i+0xa8>
 8008dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008dd6:	2b15      	cmp	r3, #21
 8008dd8:	d8f6      	bhi.n	8008dc8 <_printf_i+0x28>
 8008dda:	a101      	add	r1, pc, #4	@ (adr r1, 8008de0 <_printf_i+0x40>)
 8008ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008de0:	08008e39 	.word	0x08008e39
 8008de4:	08008e4d 	.word	0x08008e4d
 8008de8:	08008dc9 	.word	0x08008dc9
 8008dec:	08008dc9 	.word	0x08008dc9
 8008df0:	08008dc9 	.word	0x08008dc9
 8008df4:	08008dc9 	.word	0x08008dc9
 8008df8:	08008e4d 	.word	0x08008e4d
 8008dfc:	08008dc9 	.word	0x08008dc9
 8008e00:	08008dc9 	.word	0x08008dc9
 8008e04:	08008dc9 	.word	0x08008dc9
 8008e08:	08008dc9 	.word	0x08008dc9
 8008e0c:	08008f4d 	.word	0x08008f4d
 8008e10:	08008e77 	.word	0x08008e77
 8008e14:	08008f07 	.word	0x08008f07
 8008e18:	08008dc9 	.word	0x08008dc9
 8008e1c:	08008dc9 	.word	0x08008dc9
 8008e20:	08008f6f 	.word	0x08008f6f
 8008e24:	08008dc9 	.word	0x08008dc9
 8008e28:	08008e77 	.word	0x08008e77
 8008e2c:	08008dc9 	.word	0x08008dc9
 8008e30:	08008dc9 	.word	0x08008dc9
 8008e34:	08008f0f 	.word	0x08008f0f
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	1d1a      	adds	r2, r3, #4
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	6032      	str	r2, [r6, #0]
 8008e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e09d      	b.n	8008f88 <_printf_i+0x1e8>
 8008e4c:	6833      	ldr	r3, [r6, #0]
 8008e4e:	6820      	ldr	r0, [r4, #0]
 8008e50:	1d19      	adds	r1, r3, #4
 8008e52:	6031      	str	r1, [r6, #0]
 8008e54:	0606      	lsls	r6, r0, #24
 8008e56:	d501      	bpl.n	8008e5c <_printf_i+0xbc>
 8008e58:	681d      	ldr	r5, [r3, #0]
 8008e5a:	e003      	b.n	8008e64 <_printf_i+0xc4>
 8008e5c:	0645      	lsls	r5, r0, #25
 8008e5e:	d5fb      	bpl.n	8008e58 <_printf_i+0xb8>
 8008e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e64:	2d00      	cmp	r5, #0
 8008e66:	da03      	bge.n	8008e70 <_printf_i+0xd0>
 8008e68:	232d      	movs	r3, #45	@ 0x2d
 8008e6a:	426d      	negs	r5, r5
 8008e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e70:	4859      	ldr	r0, [pc, #356]	@ (8008fd8 <_printf_i+0x238>)
 8008e72:	230a      	movs	r3, #10
 8008e74:	e011      	b.n	8008e9a <_printf_i+0xfa>
 8008e76:	6821      	ldr	r1, [r4, #0]
 8008e78:	6833      	ldr	r3, [r6, #0]
 8008e7a:	0608      	lsls	r0, r1, #24
 8008e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e80:	d402      	bmi.n	8008e88 <_printf_i+0xe8>
 8008e82:	0649      	lsls	r1, r1, #25
 8008e84:	bf48      	it	mi
 8008e86:	b2ad      	uxthmi	r5, r5
 8008e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e8a:	4853      	ldr	r0, [pc, #332]	@ (8008fd8 <_printf_i+0x238>)
 8008e8c:	6033      	str	r3, [r6, #0]
 8008e8e:	bf14      	ite	ne
 8008e90:	230a      	movne	r3, #10
 8008e92:	2308      	moveq	r3, #8
 8008e94:	2100      	movs	r1, #0
 8008e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e9a:	6866      	ldr	r6, [r4, #4]
 8008e9c:	60a6      	str	r6, [r4, #8]
 8008e9e:	2e00      	cmp	r6, #0
 8008ea0:	bfa2      	ittt	ge
 8008ea2:	6821      	ldrge	r1, [r4, #0]
 8008ea4:	f021 0104 	bicge.w	r1, r1, #4
 8008ea8:	6021      	strge	r1, [r4, #0]
 8008eaa:	b90d      	cbnz	r5, 8008eb0 <_printf_i+0x110>
 8008eac:	2e00      	cmp	r6, #0
 8008eae:	d04b      	beq.n	8008f48 <_printf_i+0x1a8>
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eb6:	fb03 5711 	mls	r7, r3, r1, r5
 8008eba:	5dc7      	ldrb	r7, [r0, r7]
 8008ebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ec0:	462f      	mov	r7, r5
 8008ec2:	42bb      	cmp	r3, r7
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	d9f4      	bls.n	8008eb2 <_printf_i+0x112>
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d10b      	bne.n	8008ee4 <_printf_i+0x144>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	07df      	lsls	r7, r3, #31
 8008ed0:	d508      	bpl.n	8008ee4 <_printf_i+0x144>
 8008ed2:	6923      	ldr	r3, [r4, #16]
 8008ed4:	6861      	ldr	r1, [r4, #4]
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	bfde      	ittt	le
 8008eda:	2330      	movle	r3, #48	@ 0x30
 8008edc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ee4:	1b92      	subs	r2, r2, r6
 8008ee6:	6122      	str	r2, [r4, #16]
 8008ee8:	f8cd a000 	str.w	sl, [sp]
 8008eec:	464b      	mov	r3, r9
 8008eee:	aa03      	add	r2, sp, #12
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4640      	mov	r0, r8
 8008ef4:	f7ff fee6 	bl	8008cc4 <_printf_common>
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d14a      	bne.n	8008f92 <_printf_i+0x1f2>
 8008efc:	f04f 30ff 	mov.w	r0, #4294967295
 8008f00:	b004      	add	sp, #16
 8008f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	f043 0320 	orr.w	r3, r3, #32
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	4833      	ldr	r0, [pc, #204]	@ (8008fdc <_printf_i+0x23c>)
 8008f10:	2778      	movs	r7, #120	@ 0x78
 8008f12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	6831      	ldr	r1, [r6, #0]
 8008f1a:	061f      	lsls	r7, r3, #24
 8008f1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f20:	d402      	bmi.n	8008f28 <_printf_i+0x188>
 8008f22:	065f      	lsls	r7, r3, #25
 8008f24:	bf48      	it	mi
 8008f26:	b2ad      	uxthmi	r5, r5
 8008f28:	6031      	str	r1, [r6, #0]
 8008f2a:	07d9      	lsls	r1, r3, #31
 8008f2c:	bf44      	itt	mi
 8008f2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f32:	6023      	strmi	r3, [r4, #0]
 8008f34:	b11d      	cbz	r5, 8008f3e <_printf_i+0x19e>
 8008f36:	2310      	movs	r3, #16
 8008f38:	e7ac      	b.n	8008e94 <_printf_i+0xf4>
 8008f3a:	4827      	ldr	r0, [pc, #156]	@ (8008fd8 <_printf_i+0x238>)
 8008f3c:	e7e9      	b.n	8008f12 <_printf_i+0x172>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	f023 0320 	bic.w	r3, r3, #32
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	e7f6      	b.n	8008f36 <_printf_i+0x196>
 8008f48:	4616      	mov	r6, r2
 8008f4a:	e7bd      	b.n	8008ec8 <_printf_i+0x128>
 8008f4c:	6833      	ldr	r3, [r6, #0]
 8008f4e:	6825      	ldr	r5, [r4, #0]
 8008f50:	6961      	ldr	r1, [r4, #20]
 8008f52:	1d18      	adds	r0, r3, #4
 8008f54:	6030      	str	r0, [r6, #0]
 8008f56:	062e      	lsls	r6, r5, #24
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	d501      	bpl.n	8008f60 <_printf_i+0x1c0>
 8008f5c:	6019      	str	r1, [r3, #0]
 8008f5e:	e002      	b.n	8008f66 <_printf_i+0x1c6>
 8008f60:	0668      	lsls	r0, r5, #25
 8008f62:	d5fb      	bpl.n	8008f5c <_printf_i+0x1bc>
 8008f64:	8019      	strh	r1, [r3, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	6123      	str	r3, [r4, #16]
 8008f6a:	4616      	mov	r6, r2
 8008f6c:	e7bc      	b.n	8008ee8 <_printf_i+0x148>
 8008f6e:	6833      	ldr	r3, [r6, #0]
 8008f70:	1d1a      	adds	r2, r3, #4
 8008f72:	6032      	str	r2, [r6, #0]
 8008f74:	681e      	ldr	r6, [r3, #0]
 8008f76:	6862      	ldr	r2, [r4, #4]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	f7f7 f9b0 	bl	80002e0 <memchr>
 8008f80:	b108      	cbz	r0, 8008f86 <_printf_i+0x1e6>
 8008f82:	1b80      	subs	r0, r0, r6
 8008f84:	6060      	str	r0, [r4, #4]
 8008f86:	6863      	ldr	r3, [r4, #4]
 8008f88:	6123      	str	r3, [r4, #16]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f90:	e7aa      	b.n	8008ee8 <_printf_i+0x148>
 8008f92:	6923      	ldr	r3, [r4, #16]
 8008f94:	4632      	mov	r2, r6
 8008f96:	4649      	mov	r1, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	47d0      	blx	sl
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d0ad      	beq.n	8008efc <_printf_i+0x15c>
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	079b      	lsls	r3, r3, #30
 8008fa4:	d413      	bmi.n	8008fce <_printf_i+0x22e>
 8008fa6:	68e0      	ldr	r0, [r4, #12]
 8008fa8:	9b03      	ldr	r3, [sp, #12]
 8008faa:	4298      	cmp	r0, r3
 8008fac:	bfb8      	it	lt
 8008fae:	4618      	movlt	r0, r3
 8008fb0:	e7a6      	b.n	8008f00 <_printf_i+0x160>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4632      	mov	r2, r6
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	4640      	mov	r0, r8
 8008fba:	47d0      	blx	sl
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d09d      	beq.n	8008efc <_printf_i+0x15c>
 8008fc0:	3501      	adds	r5, #1
 8008fc2:	68e3      	ldr	r3, [r4, #12]
 8008fc4:	9903      	ldr	r1, [sp, #12]
 8008fc6:	1a5b      	subs	r3, r3, r1
 8008fc8:	42ab      	cmp	r3, r5
 8008fca:	dcf2      	bgt.n	8008fb2 <_printf_i+0x212>
 8008fcc:	e7eb      	b.n	8008fa6 <_printf_i+0x206>
 8008fce:	2500      	movs	r5, #0
 8008fd0:	f104 0619 	add.w	r6, r4, #25
 8008fd4:	e7f5      	b.n	8008fc2 <_printf_i+0x222>
 8008fd6:	bf00      	nop
 8008fd8:	080395da 	.word	0x080395da
 8008fdc:	080395eb 	.word	0x080395eb

08008fe0 <std>:
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8008fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fee:	6083      	str	r3, [r0, #8]
 8008ff0:	8181      	strh	r1, [r0, #12]
 8008ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ff4:	81c2      	strh	r2, [r0, #14]
 8008ff6:	6183      	str	r3, [r0, #24]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	305c      	adds	r0, #92	@ 0x5c
 8008ffe:	f000 f9f9 	bl	80093f4 <memset>
 8009002:	4b0d      	ldr	r3, [pc, #52]	@ (8009038 <std+0x58>)
 8009004:	6263      	str	r3, [r4, #36]	@ 0x24
 8009006:	4b0d      	ldr	r3, [pc, #52]	@ (800903c <std+0x5c>)
 8009008:	62a3      	str	r3, [r4, #40]	@ 0x28
 800900a:	4b0d      	ldr	r3, [pc, #52]	@ (8009040 <std+0x60>)
 800900c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800900e:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <std+0x64>)
 8009010:	6323      	str	r3, [r4, #48]	@ 0x30
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <std+0x68>)
 8009014:	6224      	str	r4, [r4, #32]
 8009016:	429c      	cmp	r4, r3
 8009018:	d006      	beq.n	8009028 <std+0x48>
 800901a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800901e:	4294      	cmp	r4, r2
 8009020:	d002      	beq.n	8009028 <std+0x48>
 8009022:	33d0      	adds	r3, #208	@ 0xd0
 8009024:	429c      	cmp	r4, r3
 8009026:	d105      	bne.n	8009034 <std+0x54>
 8009028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009030:	f000 ba6c 	b.w	800950c <__retarget_lock_init_recursive>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	bf00      	nop
 8009038:	08009245 	.word	0x08009245
 800903c:	08009267 	.word	0x08009267
 8009040:	0800929f 	.word	0x0800929f
 8009044:	080092c3 	.word	0x080092c3
 8009048:	20006dc8 	.word	0x20006dc8

0800904c <stdio_exit_handler>:
 800904c:	4a02      	ldr	r2, [pc, #8]	@ (8009058 <stdio_exit_handler+0xc>)
 800904e:	4903      	ldr	r1, [pc, #12]	@ (800905c <stdio_exit_handler+0x10>)
 8009050:	4803      	ldr	r0, [pc, #12]	@ (8009060 <stdio_exit_handler+0x14>)
 8009052:	f000 b869 	b.w	8009128 <_fwalk_sglue>
 8009056:	bf00      	nop
 8009058:	20000938 	.word	0x20000938
 800905c:	0800aced 	.word	0x0800aced
 8009060:	20000948 	.word	0x20000948

08009064 <cleanup_stdio>:
 8009064:	6841      	ldr	r1, [r0, #4]
 8009066:	4b0c      	ldr	r3, [pc, #48]	@ (8009098 <cleanup_stdio+0x34>)
 8009068:	4299      	cmp	r1, r3
 800906a:	b510      	push	{r4, lr}
 800906c:	4604      	mov	r4, r0
 800906e:	d001      	beq.n	8009074 <cleanup_stdio+0x10>
 8009070:	f001 fe3c 	bl	800acec <_fflush_r>
 8009074:	68a1      	ldr	r1, [r4, #8]
 8009076:	4b09      	ldr	r3, [pc, #36]	@ (800909c <cleanup_stdio+0x38>)
 8009078:	4299      	cmp	r1, r3
 800907a:	d002      	beq.n	8009082 <cleanup_stdio+0x1e>
 800907c:	4620      	mov	r0, r4
 800907e:	f001 fe35 	bl	800acec <_fflush_r>
 8009082:	68e1      	ldr	r1, [r4, #12]
 8009084:	4b06      	ldr	r3, [pc, #24]	@ (80090a0 <cleanup_stdio+0x3c>)
 8009086:	4299      	cmp	r1, r3
 8009088:	d004      	beq.n	8009094 <cleanup_stdio+0x30>
 800908a:	4620      	mov	r0, r4
 800908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009090:	f001 be2c 	b.w	800acec <_fflush_r>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	20006dc8 	.word	0x20006dc8
 800909c:	20006e30 	.word	0x20006e30
 80090a0:	20006e98 	.word	0x20006e98

080090a4 <global_stdio_init.part.0>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4b0b      	ldr	r3, [pc, #44]	@ (80090d4 <global_stdio_init.part.0+0x30>)
 80090a8:	4c0b      	ldr	r4, [pc, #44]	@ (80090d8 <global_stdio_init.part.0+0x34>)
 80090aa:	4a0c      	ldr	r2, [pc, #48]	@ (80090dc <global_stdio_init.part.0+0x38>)
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	4620      	mov	r0, r4
 80090b0:	2200      	movs	r2, #0
 80090b2:	2104      	movs	r1, #4
 80090b4:	f7ff ff94 	bl	8008fe0 <std>
 80090b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090bc:	2201      	movs	r2, #1
 80090be:	2109      	movs	r1, #9
 80090c0:	f7ff ff8e 	bl	8008fe0 <std>
 80090c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090c8:	2202      	movs	r2, #2
 80090ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ce:	2112      	movs	r1, #18
 80090d0:	f7ff bf86 	b.w	8008fe0 <std>
 80090d4:	20006f00 	.word	0x20006f00
 80090d8:	20006dc8 	.word	0x20006dc8
 80090dc:	0800904d 	.word	0x0800904d

080090e0 <__sfp_lock_acquire>:
 80090e0:	4801      	ldr	r0, [pc, #4]	@ (80090e8 <__sfp_lock_acquire+0x8>)
 80090e2:	f000 ba14 	b.w	800950e <__retarget_lock_acquire_recursive>
 80090e6:	bf00      	nop
 80090e8:	20006f09 	.word	0x20006f09

080090ec <__sfp_lock_release>:
 80090ec:	4801      	ldr	r0, [pc, #4]	@ (80090f4 <__sfp_lock_release+0x8>)
 80090ee:	f000 ba0f 	b.w	8009510 <__retarget_lock_release_recursive>
 80090f2:	bf00      	nop
 80090f4:	20006f09 	.word	0x20006f09

080090f8 <__sinit>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	4604      	mov	r4, r0
 80090fc:	f7ff fff0 	bl	80090e0 <__sfp_lock_acquire>
 8009100:	6a23      	ldr	r3, [r4, #32]
 8009102:	b11b      	cbz	r3, 800910c <__sinit+0x14>
 8009104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009108:	f7ff bff0 	b.w	80090ec <__sfp_lock_release>
 800910c:	4b04      	ldr	r3, [pc, #16]	@ (8009120 <__sinit+0x28>)
 800910e:	6223      	str	r3, [r4, #32]
 8009110:	4b04      	ldr	r3, [pc, #16]	@ (8009124 <__sinit+0x2c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1f5      	bne.n	8009104 <__sinit+0xc>
 8009118:	f7ff ffc4 	bl	80090a4 <global_stdio_init.part.0>
 800911c:	e7f2      	b.n	8009104 <__sinit+0xc>
 800911e:	bf00      	nop
 8009120:	08009065 	.word	0x08009065
 8009124:	20006f00 	.word	0x20006f00

08009128 <_fwalk_sglue>:
 8009128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800912c:	4607      	mov	r7, r0
 800912e:	4688      	mov	r8, r1
 8009130:	4614      	mov	r4, r2
 8009132:	2600      	movs	r6, #0
 8009134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009138:	f1b9 0901 	subs.w	r9, r9, #1
 800913c:	d505      	bpl.n	800914a <_fwalk_sglue+0x22>
 800913e:	6824      	ldr	r4, [r4, #0]
 8009140:	2c00      	cmp	r4, #0
 8009142:	d1f7      	bne.n	8009134 <_fwalk_sglue+0xc>
 8009144:	4630      	mov	r0, r6
 8009146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d907      	bls.n	8009160 <_fwalk_sglue+0x38>
 8009150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009154:	3301      	adds	r3, #1
 8009156:	d003      	beq.n	8009160 <_fwalk_sglue+0x38>
 8009158:	4629      	mov	r1, r5
 800915a:	4638      	mov	r0, r7
 800915c:	47c0      	blx	r8
 800915e:	4306      	orrs	r6, r0
 8009160:	3568      	adds	r5, #104	@ 0x68
 8009162:	e7e9      	b.n	8009138 <_fwalk_sglue+0x10>

08009164 <iprintf>:
 8009164:	b40f      	push	{r0, r1, r2, r3}
 8009166:	b507      	push	{r0, r1, r2, lr}
 8009168:	4906      	ldr	r1, [pc, #24]	@ (8009184 <iprintf+0x20>)
 800916a:	ab04      	add	r3, sp, #16
 800916c:	6808      	ldr	r0, [r1, #0]
 800916e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009172:	6881      	ldr	r1, [r0, #8]
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	f001 fc1d 	bl	800a9b4 <_vfiprintf_r>
 800917a:	b003      	add	sp, #12
 800917c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009180:	b004      	add	sp, #16
 8009182:	4770      	bx	lr
 8009184:	20000944 	.word	0x20000944

08009188 <_puts_r>:
 8009188:	6a03      	ldr	r3, [r0, #32]
 800918a:	b570      	push	{r4, r5, r6, lr}
 800918c:	6884      	ldr	r4, [r0, #8]
 800918e:	4605      	mov	r5, r0
 8009190:	460e      	mov	r6, r1
 8009192:	b90b      	cbnz	r3, 8009198 <_puts_r+0x10>
 8009194:	f7ff ffb0 	bl	80090f8 <__sinit>
 8009198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800919a:	07db      	lsls	r3, r3, #31
 800919c:	d405      	bmi.n	80091aa <_puts_r+0x22>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	0598      	lsls	r0, r3, #22
 80091a2:	d402      	bmi.n	80091aa <_puts_r+0x22>
 80091a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a6:	f000 f9b2 	bl	800950e <__retarget_lock_acquire_recursive>
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	0719      	lsls	r1, r3, #28
 80091ae:	d502      	bpl.n	80091b6 <_puts_r+0x2e>
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d135      	bne.n	8009222 <_puts_r+0x9a>
 80091b6:	4621      	mov	r1, r4
 80091b8:	4628      	mov	r0, r5
 80091ba:	f000 f8c5 	bl	8009348 <__swsetup_r>
 80091be:	b380      	cbz	r0, 8009222 <_puts_r+0x9a>
 80091c0:	f04f 35ff 	mov.w	r5, #4294967295
 80091c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091c6:	07da      	lsls	r2, r3, #31
 80091c8:	d405      	bmi.n	80091d6 <_puts_r+0x4e>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	059b      	lsls	r3, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <_puts_r+0x4e>
 80091d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091d2:	f000 f99d 	bl	8009510 <__retarget_lock_release_recursive>
 80091d6:	4628      	mov	r0, r5
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da04      	bge.n	80091e8 <_puts_r+0x60>
 80091de:	69a2      	ldr	r2, [r4, #24]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	dc17      	bgt.n	8009214 <_puts_r+0x8c>
 80091e4:	290a      	cmp	r1, #10
 80091e6:	d015      	beq.n	8009214 <_puts_r+0x8c>
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	6022      	str	r2, [r4, #0]
 80091ee:	7019      	strb	r1, [r3, #0]
 80091f0:	68a3      	ldr	r3, [r4, #8]
 80091f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091f6:	3b01      	subs	r3, #1
 80091f8:	60a3      	str	r3, [r4, #8]
 80091fa:	2900      	cmp	r1, #0
 80091fc:	d1ed      	bne.n	80091da <_puts_r+0x52>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	da11      	bge.n	8009226 <_puts_r+0x9e>
 8009202:	4622      	mov	r2, r4
 8009204:	210a      	movs	r1, #10
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f85f 	bl	80092ca <__swbuf_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d0d7      	beq.n	80091c0 <_puts_r+0x38>
 8009210:	250a      	movs	r5, #10
 8009212:	e7d7      	b.n	80091c4 <_puts_r+0x3c>
 8009214:	4622      	mov	r2, r4
 8009216:	4628      	mov	r0, r5
 8009218:	f000 f857 	bl	80092ca <__swbuf_r>
 800921c:	3001      	adds	r0, #1
 800921e:	d1e7      	bne.n	80091f0 <_puts_r+0x68>
 8009220:	e7ce      	b.n	80091c0 <_puts_r+0x38>
 8009222:	3e01      	subs	r6, #1
 8009224:	e7e4      	b.n	80091f0 <_puts_r+0x68>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	6022      	str	r2, [r4, #0]
 800922c:	220a      	movs	r2, #10
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	e7ee      	b.n	8009210 <_puts_r+0x88>
	...

08009234 <puts>:
 8009234:	4b02      	ldr	r3, [pc, #8]	@ (8009240 <puts+0xc>)
 8009236:	4601      	mov	r1, r0
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f7ff bfa5 	b.w	8009188 <_puts_r>
 800923e:	bf00      	nop
 8009240:	20000944 	.word	0x20000944

08009244 <__sread>:
 8009244:	b510      	push	{r4, lr}
 8009246:	460c      	mov	r4, r1
 8009248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800924c:	f000 f900 	bl	8009450 <_read_r>
 8009250:	2800      	cmp	r0, #0
 8009252:	bfab      	itete	ge
 8009254:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009256:	89a3      	ldrhlt	r3, [r4, #12]
 8009258:	181b      	addge	r3, r3, r0
 800925a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800925e:	bfac      	ite	ge
 8009260:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009262:	81a3      	strhlt	r3, [r4, #12]
 8009264:	bd10      	pop	{r4, pc}

08009266 <__swrite>:
 8009266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926a:	461f      	mov	r7, r3
 800926c:	898b      	ldrh	r3, [r1, #12]
 800926e:	05db      	lsls	r3, r3, #23
 8009270:	4605      	mov	r5, r0
 8009272:	460c      	mov	r4, r1
 8009274:	4616      	mov	r6, r2
 8009276:	d505      	bpl.n	8009284 <__swrite+0x1e>
 8009278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800927c:	2302      	movs	r3, #2
 800927e:	2200      	movs	r2, #0
 8009280:	f000 f8d4 	bl	800942c <_lseek_r>
 8009284:	89a3      	ldrh	r3, [r4, #12]
 8009286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800928a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800928e:	81a3      	strh	r3, [r4, #12]
 8009290:	4632      	mov	r2, r6
 8009292:	463b      	mov	r3, r7
 8009294:	4628      	mov	r0, r5
 8009296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800929a:	f000 b8fb 	b.w	8009494 <_write_r>

0800929e <__sseek>:
 800929e:	b510      	push	{r4, lr}
 80092a0:	460c      	mov	r4, r1
 80092a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a6:	f000 f8c1 	bl	800942c <_lseek_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	89a3      	ldrh	r3, [r4, #12]
 80092ae:	bf15      	itete	ne
 80092b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092ba:	81a3      	strheq	r3, [r4, #12]
 80092bc:	bf18      	it	ne
 80092be:	81a3      	strhne	r3, [r4, #12]
 80092c0:	bd10      	pop	{r4, pc}

080092c2 <__sclose>:
 80092c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c6:	f000 b8a1 	b.w	800940c <_close_r>

080092ca <__swbuf_r>:
 80092ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092cc:	460e      	mov	r6, r1
 80092ce:	4614      	mov	r4, r2
 80092d0:	4605      	mov	r5, r0
 80092d2:	b118      	cbz	r0, 80092dc <__swbuf_r+0x12>
 80092d4:	6a03      	ldr	r3, [r0, #32]
 80092d6:	b90b      	cbnz	r3, 80092dc <__swbuf_r+0x12>
 80092d8:	f7ff ff0e 	bl	80090f8 <__sinit>
 80092dc:	69a3      	ldr	r3, [r4, #24]
 80092de:	60a3      	str	r3, [r4, #8]
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	071a      	lsls	r2, r3, #28
 80092e4:	d501      	bpl.n	80092ea <__swbuf_r+0x20>
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	b943      	cbnz	r3, 80092fc <__swbuf_r+0x32>
 80092ea:	4621      	mov	r1, r4
 80092ec:	4628      	mov	r0, r5
 80092ee:	f000 f82b 	bl	8009348 <__swsetup_r>
 80092f2:	b118      	cbz	r0, 80092fc <__swbuf_r+0x32>
 80092f4:	f04f 37ff 	mov.w	r7, #4294967295
 80092f8:	4638      	mov	r0, r7
 80092fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	6922      	ldr	r2, [r4, #16]
 8009300:	1a98      	subs	r0, r3, r2
 8009302:	6963      	ldr	r3, [r4, #20]
 8009304:	b2f6      	uxtb	r6, r6
 8009306:	4283      	cmp	r3, r0
 8009308:	4637      	mov	r7, r6
 800930a:	dc05      	bgt.n	8009318 <__swbuf_r+0x4e>
 800930c:	4621      	mov	r1, r4
 800930e:	4628      	mov	r0, r5
 8009310:	f001 fcec 	bl	800acec <_fflush_r>
 8009314:	2800      	cmp	r0, #0
 8009316:	d1ed      	bne.n	80092f4 <__swbuf_r+0x2a>
 8009318:	68a3      	ldr	r3, [r4, #8]
 800931a:	3b01      	subs	r3, #1
 800931c:	60a3      	str	r3, [r4, #8]
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	1c5a      	adds	r2, r3, #1
 8009322:	6022      	str	r2, [r4, #0]
 8009324:	701e      	strb	r6, [r3, #0]
 8009326:	6962      	ldr	r2, [r4, #20]
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	429a      	cmp	r2, r3
 800932c:	d004      	beq.n	8009338 <__swbuf_r+0x6e>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	07db      	lsls	r3, r3, #31
 8009332:	d5e1      	bpl.n	80092f8 <__swbuf_r+0x2e>
 8009334:	2e0a      	cmp	r6, #10
 8009336:	d1df      	bne.n	80092f8 <__swbuf_r+0x2e>
 8009338:	4621      	mov	r1, r4
 800933a:	4628      	mov	r0, r5
 800933c:	f001 fcd6 	bl	800acec <_fflush_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	d0d9      	beq.n	80092f8 <__swbuf_r+0x2e>
 8009344:	e7d6      	b.n	80092f4 <__swbuf_r+0x2a>
	...

08009348 <__swsetup_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	4b29      	ldr	r3, [pc, #164]	@ (80093f0 <__swsetup_r+0xa8>)
 800934c:	4605      	mov	r5, r0
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	460c      	mov	r4, r1
 8009352:	b118      	cbz	r0, 800935c <__swsetup_r+0x14>
 8009354:	6a03      	ldr	r3, [r0, #32]
 8009356:	b90b      	cbnz	r3, 800935c <__swsetup_r+0x14>
 8009358:	f7ff fece 	bl	80090f8 <__sinit>
 800935c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009360:	0719      	lsls	r1, r3, #28
 8009362:	d422      	bmi.n	80093aa <__swsetup_r+0x62>
 8009364:	06da      	lsls	r2, r3, #27
 8009366:	d407      	bmi.n	8009378 <__swsetup_r+0x30>
 8009368:	2209      	movs	r2, #9
 800936a:	602a      	str	r2, [r5, #0]
 800936c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	f04f 30ff 	mov.w	r0, #4294967295
 8009376:	e033      	b.n	80093e0 <__swsetup_r+0x98>
 8009378:	0758      	lsls	r0, r3, #29
 800937a:	d512      	bpl.n	80093a2 <__swsetup_r+0x5a>
 800937c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800937e:	b141      	cbz	r1, 8009392 <__swsetup_r+0x4a>
 8009380:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009384:	4299      	cmp	r1, r3
 8009386:	d002      	beq.n	800938e <__swsetup_r+0x46>
 8009388:	4628      	mov	r0, r5
 800938a:	f000 ff1d 	bl	800a1c8 <_free_r>
 800938e:	2300      	movs	r3, #0
 8009390:	6363      	str	r3, [r4, #52]	@ 0x34
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009398:	81a3      	strh	r3, [r4, #12]
 800939a:	2300      	movs	r3, #0
 800939c:	6063      	str	r3, [r4, #4]
 800939e:	6923      	ldr	r3, [r4, #16]
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	f043 0308 	orr.w	r3, r3, #8
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	6923      	ldr	r3, [r4, #16]
 80093ac:	b94b      	cbnz	r3, 80093c2 <__swsetup_r+0x7a>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093b8:	d003      	beq.n	80093c2 <__swsetup_r+0x7a>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4628      	mov	r0, r5
 80093be:	f001 fce3 	bl	800ad88 <__smakebuf_r>
 80093c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093c6:	f013 0201 	ands.w	r2, r3, #1
 80093ca:	d00a      	beq.n	80093e2 <__swsetup_r+0x9a>
 80093cc:	2200      	movs	r2, #0
 80093ce:	60a2      	str	r2, [r4, #8]
 80093d0:	6962      	ldr	r2, [r4, #20]
 80093d2:	4252      	negs	r2, r2
 80093d4:	61a2      	str	r2, [r4, #24]
 80093d6:	6922      	ldr	r2, [r4, #16]
 80093d8:	b942      	cbnz	r2, 80093ec <__swsetup_r+0xa4>
 80093da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093de:	d1c5      	bne.n	800936c <__swsetup_r+0x24>
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	0799      	lsls	r1, r3, #30
 80093e4:	bf58      	it	pl
 80093e6:	6962      	ldrpl	r2, [r4, #20]
 80093e8:	60a2      	str	r2, [r4, #8]
 80093ea:	e7f4      	b.n	80093d6 <__swsetup_r+0x8e>
 80093ec:	2000      	movs	r0, #0
 80093ee:	e7f7      	b.n	80093e0 <__swsetup_r+0x98>
 80093f0:	20000944 	.word	0x20000944

080093f4 <memset>:
 80093f4:	4402      	add	r2, r0
 80093f6:	4603      	mov	r3, r0
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d100      	bne.n	80093fe <memset+0xa>
 80093fc:	4770      	bx	lr
 80093fe:	f803 1b01 	strb.w	r1, [r3], #1
 8009402:	e7f9      	b.n	80093f8 <memset+0x4>

08009404 <_localeconv_r>:
 8009404:	4800      	ldr	r0, [pc, #0]	@ (8009408 <_localeconv_r+0x4>)
 8009406:	4770      	bx	lr
 8009408:	20000a84 	.word	0x20000a84

0800940c <_close_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4d06      	ldr	r5, [pc, #24]	@ (8009428 <_close_r+0x1c>)
 8009410:	2300      	movs	r3, #0
 8009412:	4604      	mov	r4, r0
 8009414:	4608      	mov	r0, r1
 8009416:	602b      	str	r3, [r5, #0]
 8009418:	f002 f898 	bl	800b54c <_close>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_close_r+0x1a>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_close_r+0x1a>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	20006f04 	.word	0x20006f04

0800942c <_lseek_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	@ (800944c <_lseek_r+0x20>)
 8009430:	4604      	mov	r4, r0
 8009432:	4608      	mov	r0, r1
 8009434:	4611      	mov	r1, r2
 8009436:	2200      	movs	r2, #0
 8009438:	602a      	str	r2, [r5, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f002 f8ae 	bl	800b59c <_lseek>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_lseek_r+0x1e>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_lseek_r+0x1e>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20006f04 	.word	0x20006f04

08009450 <_read_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4d07      	ldr	r5, [pc, #28]	@ (8009470 <_read_r+0x20>)
 8009454:	4604      	mov	r4, r0
 8009456:	4608      	mov	r0, r1
 8009458:	4611      	mov	r1, r2
 800945a:	2200      	movs	r2, #0
 800945c:	602a      	str	r2, [r5, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	f002 f8a4 	bl	800b5ac <_read>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_read_r+0x1e>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_read_r+0x1e>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20006f04 	.word	0x20006f04

08009474 <_sbrk_r>:
 8009474:	b538      	push	{r3, r4, r5, lr}
 8009476:	4d06      	ldr	r5, [pc, #24]	@ (8009490 <_sbrk_r+0x1c>)
 8009478:	2300      	movs	r3, #0
 800947a:	4604      	mov	r4, r0
 800947c:	4608      	mov	r0, r1
 800947e:	602b      	str	r3, [r5, #0]
 8009480:	f7f8 f9b6 	bl	80017f0 <_sbrk>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_sbrk_r+0x1a>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_sbrk_r+0x1a>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	20006f04 	.word	0x20006f04

08009494 <_write_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d07      	ldr	r5, [pc, #28]	@ (80094b4 <_write_r+0x20>)
 8009498:	4604      	mov	r4, r0
 800949a:	4608      	mov	r0, r1
 800949c:	4611      	mov	r1, r2
 800949e:	2200      	movs	r2, #0
 80094a0:	602a      	str	r2, [r5, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	f002 f88a 	bl	800b5bc <_write>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_write_r+0x1e>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_write_r+0x1e>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	20006f04 	.word	0x20006f04

080094b8 <__errno>:
 80094b8:	4b01      	ldr	r3, [pc, #4]	@ (80094c0 <__errno+0x8>)
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20000944 	.word	0x20000944

080094c4 <__libc_init_array>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	4d0d      	ldr	r5, [pc, #52]	@ (80094fc <__libc_init_array+0x38>)
 80094c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009500 <__libc_init_array+0x3c>)
 80094ca:	1b64      	subs	r4, r4, r5
 80094cc:	10a4      	asrs	r4, r4, #2
 80094ce:	2600      	movs	r6, #0
 80094d0:	42a6      	cmp	r6, r4
 80094d2:	d109      	bne.n	80094e8 <__libc_init_array+0x24>
 80094d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009504 <__libc_init_array+0x40>)
 80094d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009508 <__libc_init_array+0x44>)
 80094d8:	f002 f87a 	bl	800b5d0 <_init>
 80094dc:	1b64      	subs	r4, r4, r5
 80094de:	10a4      	asrs	r4, r4, #2
 80094e0:	2600      	movs	r6, #0
 80094e2:	42a6      	cmp	r6, r4
 80094e4:	d105      	bne.n	80094f2 <__libc_init_array+0x2e>
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ec:	4798      	blx	r3
 80094ee:	3601      	adds	r6, #1
 80094f0:	e7ee      	b.n	80094d0 <__libc_init_array+0xc>
 80094f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f6:	4798      	blx	r3
 80094f8:	3601      	adds	r6, #1
 80094fa:	e7f2      	b.n	80094e2 <__libc_init_array+0x1e>
 80094fc:	08039958 	.word	0x08039958
 8009500:	08039958 	.word	0x08039958
 8009504:	08039958 	.word	0x08039958
 8009508:	0803995c 	.word	0x0803995c

0800950c <__retarget_lock_init_recursive>:
 800950c:	4770      	bx	lr

0800950e <__retarget_lock_acquire_recursive>:
 800950e:	4770      	bx	lr

08009510 <__retarget_lock_release_recursive>:
 8009510:	4770      	bx	lr

08009512 <memcpy>:
 8009512:	440a      	add	r2, r1
 8009514:	4291      	cmp	r1, r2
 8009516:	f100 33ff 	add.w	r3, r0, #4294967295
 800951a:	d100      	bne.n	800951e <memcpy+0xc>
 800951c:	4770      	bx	lr
 800951e:	b510      	push	{r4, lr}
 8009520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009528:	4291      	cmp	r1, r2
 800952a:	d1f9      	bne.n	8009520 <memcpy+0xe>
 800952c:	bd10      	pop	{r4, pc}

0800952e <quorem>:
 800952e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009532:	6903      	ldr	r3, [r0, #16]
 8009534:	690c      	ldr	r4, [r1, #16]
 8009536:	42a3      	cmp	r3, r4
 8009538:	4607      	mov	r7, r0
 800953a:	db7e      	blt.n	800963a <quorem+0x10c>
 800953c:	3c01      	subs	r4, #1
 800953e:	f101 0814 	add.w	r8, r1, #20
 8009542:	00a3      	lsls	r3, r4, #2
 8009544:	f100 0514 	add.w	r5, r0, #20
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009558:	3301      	adds	r3, #1
 800955a:	429a      	cmp	r2, r3
 800955c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009560:	fbb2 f6f3 	udiv	r6, r2, r3
 8009564:	d32e      	bcc.n	80095c4 <quorem+0x96>
 8009566:	f04f 0a00 	mov.w	sl, #0
 800956a:	46c4      	mov	ip, r8
 800956c:	46ae      	mov	lr, r5
 800956e:	46d3      	mov	fp, sl
 8009570:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009574:	b298      	uxth	r0, r3
 8009576:	fb06 a000 	mla	r0, r6, r0, sl
 800957a:	0c02      	lsrs	r2, r0, #16
 800957c:	0c1b      	lsrs	r3, r3, #16
 800957e:	fb06 2303 	mla	r3, r6, r3, r2
 8009582:	f8de 2000 	ldr.w	r2, [lr]
 8009586:	b280      	uxth	r0, r0
 8009588:	b292      	uxth	r2, r2
 800958a:	1a12      	subs	r2, r2, r0
 800958c:	445a      	add	r2, fp
 800958e:	f8de 0000 	ldr.w	r0, [lr]
 8009592:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009596:	b29b      	uxth	r3, r3
 8009598:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800959c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095a0:	b292      	uxth	r2, r2
 80095a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095a6:	45e1      	cmp	r9, ip
 80095a8:	f84e 2b04 	str.w	r2, [lr], #4
 80095ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095b0:	d2de      	bcs.n	8009570 <quorem+0x42>
 80095b2:	9b00      	ldr	r3, [sp, #0]
 80095b4:	58eb      	ldr	r3, [r5, r3]
 80095b6:	b92b      	cbnz	r3, 80095c4 <quorem+0x96>
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	3b04      	subs	r3, #4
 80095bc:	429d      	cmp	r5, r3
 80095be:	461a      	mov	r2, r3
 80095c0:	d32f      	bcc.n	8009622 <quorem+0xf4>
 80095c2:	613c      	str	r4, [r7, #16]
 80095c4:	4638      	mov	r0, r7
 80095c6:	f001 f8c3 	bl	800a750 <__mcmp>
 80095ca:	2800      	cmp	r0, #0
 80095cc:	db25      	blt.n	800961a <quorem+0xec>
 80095ce:	4629      	mov	r1, r5
 80095d0:	2000      	movs	r0, #0
 80095d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80095d6:	f8d1 c000 	ldr.w	ip, [r1]
 80095da:	fa1f fe82 	uxth.w	lr, r2
 80095de:	fa1f f38c 	uxth.w	r3, ip
 80095e2:	eba3 030e 	sub.w	r3, r3, lr
 80095e6:	4403      	add	r3, r0
 80095e8:	0c12      	lsrs	r2, r2, #16
 80095ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095f8:	45c1      	cmp	r9, r8
 80095fa:	f841 3b04 	str.w	r3, [r1], #4
 80095fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009602:	d2e6      	bcs.n	80095d2 <quorem+0xa4>
 8009604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800960c:	b922      	cbnz	r2, 8009618 <quorem+0xea>
 800960e:	3b04      	subs	r3, #4
 8009610:	429d      	cmp	r5, r3
 8009612:	461a      	mov	r2, r3
 8009614:	d30b      	bcc.n	800962e <quorem+0x100>
 8009616:	613c      	str	r4, [r7, #16]
 8009618:	3601      	adds	r6, #1
 800961a:	4630      	mov	r0, r6
 800961c:	b003      	add	sp, #12
 800961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	3b04      	subs	r3, #4
 8009626:	2a00      	cmp	r2, #0
 8009628:	d1cb      	bne.n	80095c2 <quorem+0x94>
 800962a:	3c01      	subs	r4, #1
 800962c:	e7c6      	b.n	80095bc <quorem+0x8e>
 800962e:	6812      	ldr	r2, [r2, #0]
 8009630:	3b04      	subs	r3, #4
 8009632:	2a00      	cmp	r2, #0
 8009634:	d1ef      	bne.n	8009616 <quorem+0xe8>
 8009636:	3c01      	subs	r4, #1
 8009638:	e7ea      	b.n	8009610 <quorem+0xe2>
 800963a:	2000      	movs	r0, #0
 800963c:	e7ee      	b.n	800961c <quorem+0xee>
	...

08009640 <_dtoa_r>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	69c7      	ldr	r7, [r0, #28]
 8009646:	b099      	sub	sp, #100	@ 0x64
 8009648:	ed8d 0b02 	vstr	d0, [sp, #8]
 800964c:	ec55 4b10 	vmov	r4, r5, d0
 8009650:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009652:	9109      	str	r1, [sp, #36]	@ 0x24
 8009654:	4683      	mov	fp, r0
 8009656:	920e      	str	r2, [sp, #56]	@ 0x38
 8009658:	9313      	str	r3, [sp, #76]	@ 0x4c
 800965a:	b97f      	cbnz	r7, 800967c <_dtoa_r+0x3c>
 800965c:	2010      	movs	r0, #16
 800965e:	f7fe ffb1 	bl	80085c4 <malloc>
 8009662:	4602      	mov	r2, r0
 8009664:	f8cb 001c 	str.w	r0, [fp, #28]
 8009668:	b920      	cbnz	r0, 8009674 <_dtoa_r+0x34>
 800966a:	4ba7      	ldr	r3, [pc, #668]	@ (8009908 <_dtoa_r+0x2c8>)
 800966c:	21ef      	movs	r1, #239	@ 0xef
 800966e:	48a7      	ldr	r0, [pc, #668]	@ (800990c <_dtoa_r+0x2cc>)
 8009670:	f001 fbe8 	bl	800ae44 <__assert_func>
 8009674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009678:	6007      	str	r7, [r0, #0]
 800967a:	60c7      	str	r7, [r0, #12]
 800967c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009680:	6819      	ldr	r1, [r3, #0]
 8009682:	b159      	cbz	r1, 800969c <_dtoa_r+0x5c>
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	604a      	str	r2, [r1, #4]
 8009688:	2301      	movs	r3, #1
 800968a:	4093      	lsls	r3, r2
 800968c:	608b      	str	r3, [r1, #8]
 800968e:	4658      	mov	r0, fp
 8009690:	f000 fe24 	bl	800a2dc <_Bfree>
 8009694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	1e2b      	subs	r3, r5, #0
 800969e:	bfb9      	ittee	lt
 80096a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096a4:	9303      	strlt	r3, [sp, #12]
 80096a6:	2300      	movge	r3, #0
 80096a8:	6033      	strge	r3, [r6, #0]
 80096aa:	9f03      	ldr	r7, [sp, #12]
 80096ac:	4b98      	ldr	r3, [pc, #608]	@ (8009910 <_dtoa_r+0x2d0>)
 80096ae:	bfbc      	itt	lt
 80096b0:	2201      	movlt	r2, #1
 80096b2:	6032      	strlt	r2, [r6, #0]
 80096b4:	43bb      	bics	r3, r7
 80096b6:	d112      	bne.n	80096de <_dtoa_r+0x9e>
 80096b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096c4:	4323      	orrs	r3, r4
 80096c6:	f000 854d 	beq.w	800a164 <_dtoa_r+0xb24>
 80096ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009924 <_dtoa_r+0x2e4>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 854f 	beq.w	800a174 <_dtoa_r+0xb34>
 80096d6:	f10a 0303 	add.w	r3, sl, #3
 80096da:	f000 bd49 	b.w	800a170 <_dtoa_r+0xb30>
 80096de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	ec51 0b17 	vmov	r0, r1, d7
 80096e8:	2300      	movs	r3, #0
 80096ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80096ee:	f7f7 fa73 	bl	8000bd8 <__aeabi_dcmpeq>
 80096f2:	4680      	mov	r8, r0
 80096f4:	b158      	cbz	r0, 800970e <_dtoa_r+0xce>
 80096f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096f8:	2301      	movs	r3, #1
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096fe:	b113      	cbz	r3, 8009706 <_dtoa_r+0xc6>
 8009700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009702:	4b84      	ldr	r3, [pc, #528]	@ (8009914 <_dtoa_r+0x2d4>)
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009928 <_dtoa_r+0x2e8>
 800970a:	f000 bd33 	b.w	800a174 <_dtoa_r+0xb34>
 800970e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009712:	aa16      	add	r2, sp, #88	@ 0x58
 8009714:	a917      	add	r1, sp, #92	@ 0x5c
 8009716:	4658      	mov	r0, fp
 8009718:	f001 f8ca 	bl	800a8b0 <__d2b>
 800971c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009720:	4681      	mov	r9, r0
 8009722:	2e00      	cmp	r6, #0
 8009724:	d077      	beq.n	8009816 <_dtoa_r+0x1d6>
 8009726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009728:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800972c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800973c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009740:	4619      	mov	r1, r3
 8009742:	2200      	movs	r2, #0
 8009744:	4b74      	ldr	r3, [pc, #464]	@ (8009918 <_dtoa_r+0x2d8>)
 8009746:	f7f6 fe27 	bl	8000398 <__aeabi_dsub>
 800974a:	a369      	add	r3, pc, #420	@ (adr r3, 80098f0 <_dtoa_r+0x2b0>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f6 ffda 	bl	8000708 <__aeabi_dmul>
 8009754:	a368      	add	r3, pc, #416	@ (adr r3, 80098f8 <_dtoa_r+0x2b8>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 fe1f 	bl	800039c <__adddf3>
 800975e:	4604      	mov	r4, r0
 8009760:	4630      	mov	r0, r6
 8009762:	460d      	mov	r5, r1
 8009764:	f7f6 ff66 	bl	8000634 <__aeabi_i2d>
 8009768:	a365      	add	r3, pc, #404	@ (adr r3, 8009900 <_dtoa_r+0x2c0>)
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f7f6 ffcb 	bl	8000708 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f6 fe0f 	bl	800039c <__adddf3>
 800977e:	4604      	mov	r4, r0
 8009780:	460d      	mov	r5, r1
 8009782:	f7f7 fa71 	bl	8000c68 <__aeabi_d2iz>
 8009786:	2200      	movs	r2, #0
 8009788:	4607      	mov	r7, r0
 800978a:	2300      	movs	r3, #0
 800978c:	4620      	mov	r0, r4
 800978e:	4629      	mov	r1, r5
 8009790:	f7f7 fa2c 	bl	8000bec <__aeabi_dcmplt>
 8009794:	b140      	cbz	r0, 80097a8 <_dtoa_r+0x168>
 8009796:	4638      	mov	r0, r7
 8009798:	f7f6 ff4c 	bl	8000634 <__aeabi_i2d>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f7 fa1a 	bl	8000bd8 <__aeabi_dcmpeq>
 80097a4:	b900      	cbnz	r0, 80097a8 <_dtoa_r+0x168>
 80097a6:	3f01      	subs	r7, #1
 80097a8:	2f16      	cmp	r7, #22
 80097aa:	d851      	bhi.n	8009850 <_dtoa_r+0x210>
 80097ac:	4b5b      	ldr	r3, [pc, #364]	@ (800991c <_dtoa_r+0x2dc>)
 80097ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ba:	f7f7 fa17 	bl	8000bec <__aeabi_dcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d048      	beq.n	8009854 <_dtoa_r+0x214>
 80097c2:	3f01      	subs	r7, #1
 80097c4:	2300      	movs	r3, #0
 80097c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80097c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097ca:	1b9b      	subs	r3, r3, r6
 80097cc:	1e5a      	subs	r2, r3, #1
 80097ce:	bf44      	itt	mi
 80097d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80097d4:	2300      	movmi	r3, #0
 80097d6:	9208      	str	r2, [sp, #32]
 80097d8:	bf54      	ite	pl
 80097da:	f04f 0800 	movpl.w	r8, #0
 80097de:	9308      	strmi	r3, [sp, #32]
 80097e0:	2f00      	cmp	r7, #0
 80097e2:	db39      	blt.n	8009858 <_dtoa_r+0x218>
 80097e4:	9b08      	ldr	r3, [sp, #32]
 80097e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80097e8:	443b      	add	r3, r7
 80097ea:	9308      	str	r3, [sp, #32]
 80097ec:	2300      	movs	r3, #0
 80097ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	d864      	bhi.n	80098c0 <_dtoa_r+0x280>
 80097f6:	2b05      	cmp	r3, #5
 80097f8:	bfc4      	itt	gt
 80097fa:	3b04      	subgt	r3, #4
 80097fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80097fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009800:	f1a3 0302 	sub.w	r3, r3, #2
 8009804:	bfcc      	ite	gt
 8009806:	2400      	movgt	r4, #0
 8009808:	2401      	movle	r4, #1
 800980a:	2b03      	cmp	r3, #3
 800980c:	d863      	bhi.n	80098d6 <_dtoa_r+0x296>
 800980e:	e8df f003 	tbb	[pc, r3]
 8009812:	372a      	.short	0x372a
 8009814:	5535      	.short	0x5535
 8009816:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800981a:	441e      	add	r6, r3
 800981c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009820:	2b20      	cmp	r3, #32
 8009822:	bfc1      	itttt	gt
 8009824:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009828:	409f      	lslgt	r7, r3
 800982a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800982e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009832:	bfd6      	itet	le
 8009834:	f1c3 0320 	rsble	r3, r3, #32
 8009838:	ea47 0003 	orrgt.w	r0, r7, r3
 800983c:	fa04 f003 	lslle.w	r0, r4, r3
 8009840:	f7f6 fee8 	bl	8000614 <__aeabi_ui2d>
 8009844:	2201      	movs	r2, #1
 8009846:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800984a:	3e01      	subs	r6, #1
 800984c:	9214      	str	r2, [sp, #80]	@ 0x50
 800984e:	e777      	b.n	8009740 <_dtoa_r+0x100>
 8009850:	2301      	movs	r3, #1
 8009852:	e7b8      	b.n	80097c6 <_dtoa_r+0x186>
 8009854:	9012      	str	r0, [sp, #72]	@ 0x48
 8009856:	e7b7      	b.n	80097c8 <_dtoa_r+0x188>
 8009858:	427b      	negs	r3, r7
 800985a:	930a      	str	r3, [sp, #40]	@ 0x28
 800985c:	2300      	movs	r3, #0
 800985e:	eba8 0807 	sub.w	r8, r8, r7
 8009862:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009864:	e7c4      	b.n	80097f0 <_dtoa_r+0x1b0>
 8009866:	2300      	movs	r3, #0
 8009868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800986a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800986c:	2b00      	cmp	r3, #0
 800986e:	dc35      	bgt.n	80098dc <_dtoa_r+0x29c>
 8009870:	2301      	movs	r3, #1
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	9307      	str	r3, [sp, #28]
 8009876:	461a      	mov	r2, r3
 8009878:	920e      	str	r2, [sp, #56]	@ 0x38
 800987a:	e00b      	b.n	8009894 <_dtoa_r+0x254>
 800987c:	2301      	movs	r3, #1
 800987e:	e7f3      	b.n	8009868 <_dtoa_r+0x228>
 8009880:	2300      	movs	r3, #0
 8009882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009886:	18fb      	adds	r3, r7, r3
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	3301      	adds	r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	9307      	str	r3, [sp, #28]
 8009890:	bfb8      	it	lt
 8009892:	2301      	movlt	r3, #1
 8009894:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009898:	2100      	movs	r1, #0
 800989a:	2204      	movs	r2, #4
 800989c:	f102 0514 	add.w	r5, r2, #20
 80098a0:	429d      	cmp	r5, r3
 80098a2:	d91f      	bls.n	80098e4 <_dtoa_r+0x2a4>
 80098a4:	6041      	str	r1, [r0, #4]
 80098a6:	4658      	mov	r0, fp
 80098a8:	f000 fcd8 	bl	800a25c <_Balloc>
 80098ac:	4682      	mov	sl, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d13c      	bne.n	800992c <_dtoa_r+0x2ec>
 80098b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009920 <_dtoa_r+0x2e0>)
 80098b4:	4602      	mov	r2, r0
 80098b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80098ba:	e6d8      	b.n	800966e <_dtoa_r+0x2e>
 80098bc:	2301      	movs	r3, #1
 80098be:	e7e0      	b.n	8009882 <_dtoa_r+0x242>
 80098c0:	2401      	movs	r4, #1
 80098c2:	2300      	movs	r3, #0
 80098c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098c8:	f04f 33ff 	mov.w	r3, #4294967295
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	9307      	str	r3, [sp, #28]
 80098d0:	2200      	movs	r2, #0
 80098d2:	2312      	movs	r3, #18
 80098d4:	e7d0      	b.n	8009878 <_dtoa_r+0x238>
 80098d6:	2301      	movs	r3, #1
 80098d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098da:	e7f5      	b.n	80098c8 <_dtoa_r+0x288>
 80098dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	9307      	str	r3, [sp, #28]
 80098e2:	e7d7      	b.n	8009894 <_dtoa_r+0x254>
 80098e4:	3101      	adds	r1, #1
 80098e6:	0052      	lsls	r2, r2, #1
 80098e8:	e7d8      	b.n	800989c <_dtoa_r+0x25c>
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w
 80098f0:	636f4361 	.word	0x636f4361
 80098f4:	3fd287a7 	.word	0x3fd287a7
 80098f8:	8b60c8b3 	.word	0x8b60c8b3
 80098fc:	3fc68a28 	.word	0x3fc68a28
 8009900:	509f79fb 	.word	0x509f79fb
 8009904:	3fd34413 	.word	0x3fd34413
 8009908:	08039609 	.word	0x08039609
 800990c:	08039620 	.word	0x08039620
 8009910:	7ff00000 	.word	0x7ff00000
 8009914:	080395d9 	.word	0x080395d9
 8009918:	3ff80000 	.word	0x3ff80000
 800991c:	08039718 	.word	0x08039718
 8009920:	08039678 	.word	0x08039678
 8009924:	08039605 	.word	0x08039605
 8009928:	080395d8 	.word	0x080395d8
 800992c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009930:	6018      	str	r0, [r3, #0]
 8009932:	9b07      	ldr	r3, [sp, #28]
 8009934:	2b0e      	cmp	r3, #14
 8009936:	f200 80a4 	bhi.w	8009a82 <_dtoa_r+0x442>
 800993a:	2c00      	cmp	r4, #0
 800993c:	f000 80a1 	beq.w	8009a82 <_dtoa_r+0x442>
 8009940:	2f00      	cmp	r7, #0
 8009942:	dd33      	ble.n	80099ac <_dtoa_r+0x36c>
 8009944:	4bad      	ldr	r3, [pc, #692]	@ (8009bfc <_dtoa_r+0x5bc>)
 8009946:	f007 020f 	and.w	r2, r7, #15
 800994a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800994e:	ed93 7b00 	vldr	d7, [r3]
 8009952:	05f8      	lsls	r0, r7, #23
 8009954:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800995c:	d516      	bpl.n	800998c <_dtoa_r+0x34c>
 800995e:	4ba8      	ldr	r3, [pc, #672]	@ (8009c00 <_dtoa_r+0x5c0>)
 8009960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009968:	f7f6 fff8 	bl	800095c <__aeabi_ddiv>
 800996c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009970:	f004 040f 	and.w	r4, r4, #15
 8009974:	2603      	movs	r6, #3
 8009976:	4da2      	ldr	r5, [pc, #648]	@ (8009c00 <_dtoa_r+0x5c0>)
 8009978:	b954      	cbnz	r4, 8009990 <_dtoa_r+0x350>
 800997a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800997e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009982:	f7f6 ffeb 	bl	800095c <__aeabi_ddiv>
 8009986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800998a:	e028      	b.n	80099de <_dtoa_r+0x39e>
 800998c:	2602      	movs	r6, #2
 800998e:	e7f2      	b.n	8009976 <_dtoa_r+0x336>
 8009990:	07e1      	lsls	r1, r4, #31
 8009992:	d508      	bpl.n	80099a6 <_dtoa_r+0x366>
 8009994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800999c:	f7f6 feb4 	bl	8000708 <__aeabi_dmul>
 80099a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099a4:	3601      	adds	r6, #1
 80099a6:	1064      	asrs	r4, r4, #1
 80099a8:	3508      	adds	r5, #8
 80099aa:	e7e5      	b.n	8009978 <_dtoa_r+0x338>
 80099ac:	f000 80d2 	beq.w	8009b54 <_dtoa_r+0x514>
 80099b0:	427c      	negs	r4, r7
 80099b2:	4b92      	ldr	r3, [pc, #584]	@ (8009bfc <_dtoa_r+0x5bc>)
 80099b4:	4d92      	ldr	r5, [pc, #584]	@ (8009c00 <_dtoa_r+0x5c0>)
 80099b6:	f004 020f 	and.w	r2, r4, #15
 80099ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099c6:	f7f6 fe9f 	bl	8000708 <__aeabi_dmul>
 80099ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ce:	1124      	asrs	r4, r4, #4
 80099d0:	2300      	movs	r3, #0
 80099d2:	2602      	movs	r6, #2
 80099d4:	2c00      	cmp	r4, #0
 80099d6:	f040 80b2 	bne.w	8009b3e <_dtoa_r+0x4fe>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1d3      	bne.n	8009986 <_dtoa_r+0x346>
 80099de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80b7 	beq.w	8009b58 <_dtoa_r+0x518>
 80099ea:	4b86      	ldr	r3, [pc, #536]	@ (8009c04 <_dtoa_r+0x5c4>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f7 f8fb 	bl	8000bec <__aeabi_dcmplt>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f000 80ae 	beq.w	8009b58 <_dtoa_r+0x518>
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 80aa 	beq.w	8009b58 <_dtoa_r+0x518>
 8009a04:	9b00      	ldr	r3, [sp, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dd37      	ble.n	8009a7a <_dtoa_r+0x43a>
 8009a0a:	1e7b      	subs	r3, r7, #1
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4b7d      	ldr	r3, [pc, #500]	@ (8009c08 <_dtoa_r+0x5c8>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fe77 	bl	8000708 <__aeabi_dmul>
 8009a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a1e:	9c00      	ldr	r4, [sp, #0]
 8009a20:	3601      	adds	r6, #1
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7f6 fe06 	bl	8000634 <__aeabi_i2d>
 8009a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a2c:	f7f6 fe6c 	bl	8000708 <__aeabi_dmul>
 8009a30:	4b76      	ldr	r3, [pc, #472]	@ (8009c0c <_dtoa_r+0x5cc>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	f7f6 fcb2 	bl	800039c <__adddf3>
 8009a38:	4605      	mov	r5, r0
 8009a3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a3e:	2c00      	cmp	r4, #0
 8009a40:	f040 808d 	bne.w	8009b5e <_dtoa_r+0x51e>
 8009a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a48:	4b71      	ldr	r3, [pc, #452]	@ (8009c10 <_dtoa_r+0x5d0>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f7f6 fca4 	bl	8000398 <__aeabi_dsub>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a58:	462a      	mov	r2, r5
 8009a5a:	4633      	mov	r3, r6
 8009a5c:	f7f7 f8e4 	bl	8000c28 <__aeabi_dcmpgt>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f040 828b 	bne.w	8009f7c <_dtoa_r+0x93c>
 8009a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a70:	f7f7 f8bc 	bl	8000bec <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f040 8128 	bne.w	8009cca <_dtoa_r+0x68a>
 8009a7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f2c0 815a 	blt.w	8009d3e <_dtoa_r+0x6fe>
 8009a8a:	2f0e      	cmp	r7, #14
 8009a8c:	f300 8157 	bgt.w	8009d3e <_dtoa_r+0x6fe>
 8009a90:	4b5a      	ldr	r3, [pc, #360]	@ (8009bfc <_dtoa_r+0x5bc>)
 8009a92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a96:	ed93 7b00 	vldr	d7, [r3]
 8009a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	ed8d 7b00 	vstr	d7, [sp]
 8009aa2:	da03      	bge.n	8009aac <_dtoa_r+0x46c>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f340 8101 	ble.w	8009cae <_dtoa_r+0x66e>
 8009aac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ab0:	4656      	mov	r6, sl
 8009ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f6 ff4f 	bl	800095c <__aeabi_ddiv>
 8009abe:	f7f7 f8d3 	bl	8000c68 <__aeabi_d2iz>
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	f7f6 fdb6 	bl	8000634 <__aeabi_i2d>
 8009ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009acc:	f7f6 fe1c 	bl	8000708 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009adc:	f7f6 fc5c 	bl	8000398 <__aeabi_dsub>
 8009ae0:	f806 4b01 	strb.w	r4, [r6], #1
 8009ae4:	9d07      	ldr	r5, [sp, #28]
 8009ae6:	eba6 040a 	sub.w	r4, r6, sl
 8009aea:	42a5      	cmp	r5, r4
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	f040 8117 	bne.w	8009d22 <_dtoa_r+0x6e2>
 8009af4:	f7f6 fc52 	bl	800039c <__adddf3>
 8009af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afc:	4604      	mov	r4, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	f7f7 f892 	bl	8000c28 <__aeabi_dcmpgt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f040 80f9 	bne.w	8009cfc <_dtoa_r+0x6bc>
 8009b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f7 f861 	bl	8000bd8 <__aeabi_dcmpeq>
 8009b16:	b118      	cbz	r0, 8009b20 <_dtoa_r+0x4e0>
 8009b18:	f018 0f01 	tst.w	r8, #1
 8009b1c:	f040 80ee 	bne.w	8009cfc <_dtoa_r+0x6bc>
 8009b20:	4649      	mov	r1, r9
 8009b22:	4658      	mov	r0, fp
 8009b24:	f000 fbda 	bl	800a2dc <_Bfree>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	7033      	strb	r3, [r6, #0]
 8009b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b2e:	3701      	adds	r7, #1
 8009b30:	601f      	str	r7, [r3, #0]
 8009b32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 831d 	beq.w	800a174 <_dtoa_r+0xb34>
 8009b3a:	601e      	str	r6, [r3, #0]
 8009b3c:	e31a      	b.n	800a174 <_dtoa_r+0xb34>
 8009b3e:	07e2      	lsls	r2, r4, #31
 8009b40:	d505      	bpl.n	8009b4e <_dtoa_r+0x50e>
 8009b42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b46:	f7f6 fddf 	bl	8000708 <__aeabi_dmul>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	1064      	asrs	r4, r4, #1
 8009b50:	3508      	adds	r5, #8
 8009b52:	e73f      	b.n	80099d4 <_dtoa_r+0x394>
 8009b54:	2602      	movs	r6, #2
 8009b56:	e742      	b.n	80099de <_dtoa_r+0x39e>
 8009b58:	9c07      	ldr	r4, [sp, #28]
 8009b5a:	9704      	str	r7, [sp, #16]
 8009b5c:	e761      	b.n	8009a22 <_dtoa_r+0x3e2>
 8009b5e:	4b27      	ldr	r3, [pc, #156]	@ (8009bfc <_dtoa_r+0x5bc>)
 8009b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b6a:	4454      	add	r4, sl
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d053      	beq.n	8009c18 <_dtoa_r+0x5d8>
 8009b70:	4928      	ldr	r1, [pc, #160]	@ (8009c14 <_dtoa_r+0x5d4>)
 8009b72:	2000      	movs	r0, #0
 8009b74:	f7f6 fef2 	bl	800095c <__aeabi_ddiv>
 8009b78:	4633      	mov	r3, r6
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	f7f6 fc0c 	bl	8000398 <__aeabi_dsub>
 8009b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b84:	4656      	mov	r6, sl
 8009b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8a:	f7f7 f86d 	bl	8000c68 <__aeabi_d2iz>
 8009b8e:	4605      	mov	r5, r0
 8009b90:	f7f6 fd50 	bl	8000634 <__aeabi_i2d>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9c:	f7f6 fbfc 	bl	8000398 <__aeabi_dsub>
 8009ba0:	3530      	adds	r5, #48	@ 0x30
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009baa:	f806 5b01 	strb.w	r5, [r6], #1
 8009bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bb2:	f7f7 f81b 	bl	8000bec <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d171      	bne.n	8009c9e <_dtoa_r+0x65e>
 8009bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bbe:	4911      	ldr	r1, [pc, #68]	@ (8009c04 <_dtoa_r+0x5c4>)
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f7f6 fbe9 	bl	8000398 <__aeabi_dsub>
 8009bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bca:	f7f7 f80f 	bl	8000bec <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f040 8095 	bne.w	8009cfe <_dtoa_r+0x6be>
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	f43f af50 	beq.w	8009a7a <_dtoa_r+0x43a>
 8009bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bde:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <_dtoa_r+0x5c8>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	f7f6 fd91 	bl	8000708 <__aeabi_dmul>
 8009be6:	4b08      	ldr	r3, [pc, #32]	@ (8009c08 <_dtoa_r+0x5c8>)
 8009be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bec:	2200      	movs	r2, #0
 8009bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bf2:	f7f6 fd89 	bl	8000708 <__aeabi_dmul>
 8009bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bfa:	e7c4      	b.n	8009b86 <_dtoa_r+0x546>
 8009bfc:	08039718 	.word	0x08039718
 8009c00:	080396f0 	.word	0x080396f0
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	40240000 	.word	0x40240000
 8009c0c:	401c0000 	.word	0x401c0000
 8009c10:	40140000 	.word	0x40140000
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f7f6 fd74 	bl	8000708 <__aeabi_dmul>
 8009c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c24:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c26:	4656      	mov	r6, sl
 8009c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c2c:	f7f7 f81c 	bl	8000c68 <__aeabi_d2iz>
 8009c30:	4605      	mov	r5, r0
 8009c32:	f7f6 fcff 	bl	8000634 <__aeabi_i2d>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c3e:	f7f6 fbab 	bl	8000398 <__aeabi_dsub>
 8009c42:	3530      	adds	r5, #48	@ 0x30
 8009c44:	f806 5b01 	strb.w	r5, [r6], #1
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	42a6      	cmp	r6, r4
 8009c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	d124      	bne.n	8009ca2 <_dtoa_r+0x662>
 8009c58:	4bac      	ldr	r3, [pc, #688]	@ (8009f0c <_dtoa_r+0x8cc>)
 8009c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c5e:	f7f6 fb9d 	bl	800039c <__adddf3>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c6a:	f7f6 ffdd 	bl	8000c28 <__aeabi_dcmpgt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d145      	bne.n	8009cfe <_dtoa_r+0x6be>
 8009c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c76:	49a5      	ldr	r1, [pc, #660]	@ (8009f0c <_dtoa_r+0x8cc>)
 8009c78:	2000      	movs	r0, #0
 8009c7a:	f7f6 fb8d 	bl	8000398 <__aeabi_dsub>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c86:	f7f6 ffb1 	bl	8000bec <__aeabi_dcmplt>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	f43f aef5 	beq.w	8009a7a <_dtoa_r+0x43a>
 8009c90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009c92:	1e73      	subs	r3, r6, #1
 8009c94:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c9a:	2b30      	cmp	r3, #48	@ 0x30
 8009c9c:	d0f8      	beq.n	8009c90 <_dtoa_r+0x650>
 8009c9e:	9f04      	ldr	r7, [sp, #16]
 8009ca0:	e73e      	b.n	8009b20 <_dtoa_r+0x4e0>
 8009ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8009f10 <_dtoa_r+0x8d0>)
 8009ca4:	f7f6 fd30 	bl	8000708 <__aeabi_dmul>
 8009ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cac:	e7bc      	b.n	8009c28 <_dtoa_r+0x5e8>
 8009cae:	d10c      	bne.n	8009cca <_dtoa_r+0x68a>
 8009cb0:	4b98      	ldr	r3, [pc, #608]	@ (8009f14 <_dtoa_r+0x8d4>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cb8:	f7f6 fd26 	bl	8000708 <__aeabi_dmul>
 8009cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cc0:	f7f6 ffa8 	bl	8000c14 <__aeabi_dcmpge>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f000 8157 	beq.w	8009f78 <_dtoa_r+0x938>
 8009cca:	2400      	movs	r4, #0
 8009ccc:	4625      	mov	r5, r4
 8009cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	4656      	mov	r6, sl
 8009cd6:	2700      	movs	r7, #0
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4658      	mov	r0, fp
 8009cdc:	f000 fafe 	bl	800a2dc <_Bfree>
 8009ce0:	2d00      	cmp	r5, #0
 8009ce2:	d0dc      	beq.n	8009c9e <_dtoa_r+0x65e>
 8009ce4:	b12f      	cbz	r7, 8009cf2 <_dtoa_r+0x6b2>
 8009ce6:	42af      	cmp	r7, r5
 8009ce8:	d003      	beq.n	8009cf2 <_dtoa_r+0x6b2>
 8009cea:	4639      	mov	r1, r7
 8009cec:	4658      	mov	r0, fp
 8009cee:	f000 faf5 	bl	800a2dc <_Bfree>
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	4658      	mov	r0, fp
 8009cf6:	f000 faf1 	bl	800a2dc <_Bfree>
 8009cfa:	e7d0      	b.n	8009c9e <_dtoa_r+0x65e>
 8009cfc:	9704      	str	r7, [sp, #16]
 8009cfe:	4633      	mov	r3, r6
 8009d00:	461e      	mov	r6, r3
 8009d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d06:	2a39      	cmp	r2, #57	@ 0x39
 8009d08:	d107      	bne.n	8009d1a <_dtoa_r+0x6da>
 8009d0a:	459a      	cmp	sl, r3
 8009d0c:	d1f8      	bne.n	8009d00 <_dtoa_r+0x6c0>
 8009d0e:	9a04      	ldr	r2, [sp, #16]
 8009d10:	3201      	adds	r2, #1
 8009d12:	9204      	str	r2, [sp, #16]
 8009d14:	2230      	movs	r2, #48	@ 0x30
 8009d16:	f88a 2000 	strb.w	r2, [sl]
 8009d1a:	781a      	ldrb	r2, [r3, #0]
 8009d1c:	3201      	adds	r2, #1
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	e7bd      	b.n	8009c9e <_dtoa_r+0x65e>
 8009d22:	4b7b      	ldr	r3, [pc, #492]	@ (8009f10 <_dtoa_r+0x8d0>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	f7f6 fcef 	bl	8000708 <__aeabi_dmul>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	460d      	mov	r5, r1
 8009d32:	f7f6 ff51 	bl	8000bd8 <__aeabi_dcmpeq>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	f43f aebb 	beq.w	8009ab2 <_dtoa_r+0x472>
 8009d3c:	e6f0      	b.n	8009b20 <_dtoa_r+0x4e0>
 8009d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d40:	2a00      	cmp	r2, #0
 8009d42:	f000 80db 	beq.w	8009efc <_dtoa_r+0x8bc>
 8009d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d48:	2a01      	cmp	r2, #1
 8009d4a:	f300 80bf 	bgt.w	8009ecc <_dtoa_r+0x88c>
 8009d4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d50:	2a00      	cmp	r2, #0
 8009d52:	f000 80b7 	beq.w	8009ec4 <_dtoa_r+0x884>
 8009d56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d5c:	4646      	mov	r6, r8
 8009d5e:	9a08      	ldr	r2, [sp, #32]
 8009d60:	2101      	movs	r1, #1
 8009d62:	441a      	add	r2, r3
 8009d64:	4658      	mov	r0, fp
 8009d66:	4498      	add	r8, r3
 8009d68:	9208      	str	r2, [sp, #32]
 8009d6a:	f000 fb6b 	bl	800a444 <__i2b>
 8009d6e:	4605      	mov	r5, r0
 8009d70:	b15e      	cbz	r6, 8009d8a <_dtoa_r+0x74a>
 8009d72:	9b08      	ldr	r3, [sp, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dd08      	ble.n	8009d8a <_dtoa_r+0x74a>
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	9a08      	ldr	r2, [sp, #32]
 8009d7c:	bfa8      	it	ge
 8009d7e:	4633      	movge	r3, r6
 8009d80:	eba8 0803 	sub.w	r8, r8, r3
 8009d84:	1af6      	subs	r6, r6, r3
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	9308      	str	r3, [sp, #32]
 8009d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d8c:	b1f3      	cbz	r3, 8009dcc <_dtoa_r+0x78c>
 8009d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80b7 	beq.w	8009f04 <_dtoa_r+0x8c4>
 8009d96:	b18c      	cbz	r4, 8009dbc <_dtoa_r+0x77c>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4658      	mov	r0, fp
 8009d9e:	f000 fc11 	bl	800a5c4 <__pow5mult>
 8009da2:	464a      	mov	r2, r9
 8009da4:	4601      	mov	r1, r0
 8009da6:	4605      	mov	r5, r0
 8009da8:	4658      	mov	r0, fp
 8009daa:	f000 fb61 	bl	800a470 <__multiply>
 8009dae:	4649      	mov	r1, r9
 8009db0:	9004      	str	r0, [sp, #16]
 8009db2:	4658      	mov	r0, fp
 8009db4:	f000 fa92 	bl	800a2dc <_Bfree>
 8009db8:	9b04      	ldr	r3, [sp, #16]
 8009dba:	4699      	mov	r9, r3
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dbe:	1b1a      	subs	r2, r3, r4
 8009dc0:	d004      	beq.n	8009dcc <_dtoa_r+0x78c>
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4658      	mov	r0, fp
 8009dc6:	f000 fbfd 	bl	800a5c4 <__pow5mult>
 8009dca:	4681      	mov	r9, r0
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4658      	mov	r0, fp
 8009dd0:	f000 fb38 	bl	800a444 <__i2b>
 8009dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 81cf 	beq.w	800a17c <_dtoa_r+0xb3c>
 8009dde:	461a      	mov	r2, r3
 8009de0:	4601      	mov	r1, r0
 8009de2:	4658      	mov	r0, fp
 8009de4:	f000 fbee 	bl	800a5c4 <__pow5mult>
 8009de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	4604      	mov	r4, r0
 8009dee:	f300 8095 	bgt.w	8009f1c <_dtoa_r+0x8dc>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f040 8087 	bne.w	8009f08 <_dtoa_r+0x8c8>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f040 8089 	bne.w	8009f18 <_dtoa_r+0x8d8>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	0d1b      	lsrs	r3, r3, #20
 8009e0e:	051b      	lsls	r3, r3, #20
 8009e10:	b12b      	cbz	r3, 8009e1e <_dtoa_r+0x7de>
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	3301      	adds	r3, #1
 8009e16:	9308      	str	r3, [sp, #32]
 8009e18:	f108 0801 	add.w	r8, r8, #1
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 81b0 	beq.w	800a188 <_dtoa_r+0xb48>
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e2e:	6918      	ldr	r0, [r3, #16]
 8009e30:	f000 fabc 	bl	800a3ac <__hi0bits>
 8009e34:	f1c0 0020 	rsb	r0, r0, #32
 8009e38:	9b08      	ldr	r3, [sp, #32]
 8009e3a:	4418      	add	r0, r3
 8009e3c:	f010 001f 	ands.w	r0, r0, #31
 8009e40:	d077      	beq.n	8009f32 <_dtoa_r+0x8f2>
 8009e42:	f1c0 0320 	rsb	r3, r0, #32
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	dd6b      	ble.n	8009f22 <_dtoa_r+0x8e2>
 8009e4a:	9b08      	ldr	r3, [sp, #32]
 8009e4c:	f1c0 001c 	rsb	r0, r0, #28
 8009e50:	4403      	add	r3, r0
 8009e52:	4480      	add	r8, r0
 8009e54:	4406      	add	r6, r0
 8009e56:	9308      	str	r3, [sp, #32]
 8009e58:	f1b8 0f00 	cmp.w	r8, #0
 8009e5c:	dd05      	ble.n	8009e6a <_dtoa_r+0x82a>
 8009e5e:	4649      	mov	r1, r9
 8009e60:	4642      	mov	r2, r8
 8009e62:	4658      	mov	r0, fp
 8009e64:	f000 fc08 	bl	800a678 <__lshift>
 8009e68:	4681      	mov	r9, r0
 8009e6a:	9b08      	ldr	r3, [sp, #32]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dd05      	ble.n	8009e7c <_dtoa_r+0x83c>
 8009e70:	4621      	mov	r1, r4
 8009e72:	461a      	mov	r2, r3
 8009e74:	4658      	mov	r0, fp
 8009e76:	f000 fbff 	bl	800a678 <__lshift>
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d059      	beq.n	8009f36 <_dtoa_r+0x8f6>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4648      	mov	r0, r9
 8009e86:	f000 fc63 	bl	800a750 <__mcmp>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	da53      	bge.n	8009f36 <_dtoa_r+0x8f6>
 8009e8e:	1e7b      	subs	r3, r7, #1
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	4649      	mov	r1, r9
 8009e94:	2300      	movs	r3, #0
 8009e96:	220a      	movs	r2, #10
 8009e98:	4658      	mov	r0, fp
 8009e9a:	f000 fa41 	bl	800a320 <__multadd>
 8009e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ea0:	4681      	mov	r9, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 8172 	beq.w	800a18c <_dtoa_r+0xb4c>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4629      	mov	r1, r5
 8009eac:	220a      	movs	r2, #10
 8009eae:	4658      	mov	r0, fp
 8009eb0:	f000 fa36 	bl	800a320 <__multadd>
 8009eb4:	9b00      	ldr	r3, [sp, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	4605      	mov	r5, r0
 8009eba:	dc67      	bgt.n	8009f8c <_dtoa_r+0x94c>
 8009ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	dc41      	bgt.n	8009f46 <_dtoa_r+0x906>
 8009ec2:	e063      	b.n	8009f8c <_dtoa_r+0x94c>
 8009ec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009eca:	e746      	b.n	8009d5a <_dtoa_r+0x71a>
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	1e5c      	subs	r4, r3, #1
 8009ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed2:	42a3      	cmp	r3, r4
 8009ed4:	bfbf      	itttt	lt
 8009ed6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ed8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009eda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009edc:	1ae3      	sublt	r3, r4, r3
 8009ede:	bfb4      	ite	lt
 8009ee0:	18d2      	addlt	r2, r2, r3
 8009ee2:	1b1c      	subge	r4, r3, r4
 8009ee4:	9b07      	ldr	r3, [sp, #28]
 8009ee6:	bfbc      	itt	lt
 8009ee8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009eea:	2400      	movlt	r4, #0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bfb5      	itete	lt
 8009ef0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ef4:	9b07      	ldrge	r3, [sp, #28]
 8009ef6:	2300      	movlt	r3, #0
 8009ef8:	4646      	movge	r6, r8
 8009efa:	e730      	b.n	8009d5e <_dtoa_r+0x71e>
 8009efc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009efe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f00:	4646      	mov	r6, r8
 8009f02:	e735      	b.n	8009d70 <_dtoa_r+0x730>
 8009f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f06:	e75c      	b.n	8009dc2 <_dtoa_r+0x782>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e788      	b.n	8009e1e <_dtoa_r+0x7de>
 8009f0c:	3fe00000 	.word	0x3fe00000
 8009f10:	40240000 	.word	0x40240000
 8009f14:	40140000 	.word	0x40140000
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	e780      	b.n	8009e1e <_dtoa_r+0x7de>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f20:	e782      	b.n	8009e28 <_dtoa_r+0x7e8>
 8009f22:	d099      	beq.n	8009e58 <_dtoa_r+0x818>
 8009f24:	9a08      	ldr	r2, [sp, #32]
 8009f26:	331c      	adds	r3, #28
 8009f28:	441a      	add	r2, r3
 8009f2a:	4498      	add	r8, r3
 8009f2c:	441e      	add	r6, r3
 8009f2e:	9208      	str	r2, [sp, #32]
 8009f30:	e792      	b.n	8009e58 <_dtoa_r+0x818>
 8009f32:	4603      	mov	r3, r0
 8009f34:	e7f6      	b.n	8009f24 <_dtoa_r+0x8e4>
 8009f36:	9b07      	ldr	r3, [sp, #28]
 8009f38:	9704      	str	r7, [sp, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dc20      	bgt.n	8009f80 <_dtoa_r+0x940>
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	dd1e      	ble.n	8009f84 <_dtoa_r+0x944>
 8009f46:	9b00      	ldr	r3, [sp, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f47f aec0 	bne.w	8009cce <_dtoa_r+0x68e>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	2205      	movs	r2, #5
 8009f52:	4658      	mov	r0, fp
 8009f54:	f000 f9e4 	bl	800a320 <__multadd>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4648      	mov	r0, r9
 8009f5e:	f000 fbf7 	bl	800a750 <__mcmp>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	f77f aeb3 	ble.w	8009cce <_dtoa_r+0x68e>
 8009f68:	4656      	mov	r6, sl
 8009f6a:	2331      	movs	r3, #49	@ 0x31
 8009f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f70:	9b04      	ldr	r3, [sp, #16]
 8009f72:	3301      	adds	r3, #1
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	e6ae      	b.n	8009cd6 <_dtoa_r+0x696>
 8009f78:	9c07      	ldr	r4, [sp, #28]
 8009f7a:	9704      	str	r7, [sp, #16]
 8009f7c:	4625      	mov	r5, r4
 8009f7e:	e7f3      	b.n	8009f68 <_dtoa_r+0x928>
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 8104 	beq.w	800a194 <_dtoa_r+0xb54>
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	dd05      	ble.n	8009f9c <_dtoa_r+0x95c>
 8009f90:	4629      	mov	r1, r5
 8009f92:	4632      	mov	r2, r6
 8009f94:	4658      	mov	r0, fp
 8009f96:	f000 fb6f 	bl	800a678 <__lshift>
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d05a      	beq.n	800a058 <_dtoa_r+0xa18>
 8009fa2:	6869      	ldr	r1, [r5, #4]
 8009fa4:	4658      	mov	r0, fp
 8009fa6:	f000 f959 	bl	800a25c <_Balloc>
 8009faa:	4606      	mov	r6, r0
 8009fac:	b928      	cbnz	r0, 8009fba <_dtoa_r+0x97a>
 8009fae:	4b84      	ldr	r3, [pc, #528]	@ (800a1c0 <_dtoa_r+0xb80>)
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fb6:	f7ff bb5a 	b.w	800966e <_dtoa_r+0x2e>
 8009fba:	692a      	ldr	r2, [r5, #16]
 8009fbc:	3202      	adds	r2, #2
 8009fbe:	0092      	lsls	r2, r2, #2
 8009fc0:	f105 010c 	add.w	r1, r5, #12
 8009fc4:	300c      	adds	r0, #12
 8009fc6:	f7ff faa4 	bl	8009512 <memcpy>
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4658      	mov	r0, fp
 8009fd0:	f000 fb52 	bl	800a678 <__lshift>
 8009fd4:	f10a 0301 	add.w	r3, sl, #1
 8009fd8:	9307      	str	r3, [sp, #28]
 8009fda:	9b00      	ldr	r3, [sp, #0]
 8009fdc:	4453      	add	r3, sl
 8009fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	462f      	mov	r7, r5
 8009fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fea:	4605      	mov	r5, r0
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4648      	mov	r0, r9
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	f7ff fa9a 	bl	800952e <quorem>
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	9002      	str	r0, [sp, #8]
 8009ffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a002:	4648      	mov	r0, r9
 800a004:	f000 fba4 	bl	800a750 <__mcmp>
 800a008:	462a      	mov	r2, r5
 800a00a:	9008      	str	r0, [sp, #32]
 800a00c:	4621      	mov	r1, r4
 800a00e:	4658      	mov	r0, fp
 800a010:	f000 fbba 	bl	800a788 <__mdiff>
 800a014:	68c2      	ldr	r2, [r0, #12]
 800a016:	4606      	mov	r6, r0
 800a018:	bb02      	cbnz	r2, 800a05c <_dtoa_r+0xa1c>
 800a01a:	4601      	mov	r1, r0
 800a01c:	4648      	mov	r0, r9
 800a01e:	f000 fb97 	bl	800a750 <__mcmp>
 800a022:	4602      	mov	r2, r0
 800a024:	4631      	mov	r1, r6
 800a026:	4658      	mov	r0, fp
 800a028:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02a:	f000 f957 	bl	800a2dc <_Bfree>
 800a02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a032:	9e07      	ldr	r6, [sp, #28]
 800a034:	ea43 0102 	orr.w	r1, r3, r2
 800a038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a03a:	4319      	orrs	r1, r3
 800a03c:	d110      	bne.n	800a060 <_dtoa_r+0xa20>
 800a03e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a042:	d029      	beq.n	800a098 <_dtoa_r+0xa58>
 800a044:	9b08      	ldr	r3, [sp, #32]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd02      	ble.n	800a050 <_dtoa_r+0xa10>
 800a04a:	9b02      	ldr	r3, [sp, #8]
 800a04c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	f883 8000 	strb.w	r8, [r3]
 800a056:	e63f      	b.n	8009cd8 <_dtoa_r+0x698>
 800a058:	4628      	mov	r0, r5
 800a05a:	e7bb      	b.n	8009fd4 <_dtoa_r+0x994>
 800a05c:	2201      	movs	r2, #1
 800a05e:	e7e1      	b.n	800a024 <_dtoa_r+0x9e4>
 800a060:	9b08      	ldr	r3, [sp, #32]
 800a062:	2b00      	cmp	r3, #0
 800a064:	db04      	blt.n	800a070 <_dtoa_r+0xa30>
 800a066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a068:	430b      	orrs	r3, r1
 800a06a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a06c:	430b      	orrs	r3, r1
 800a06e:	d120      	bne.n	800a0b2 <_dtoa_r+0xa72>
 800a070:	2a00      	cmp	r2, #0
 800a072:	dded      	ble.n	800a050 <_dtoa_r+0xa10>
 800a074:	4649      	mov	r1, r9
 800a076:	2201      	movs	r2, #1
 800a078:	4658      	mov	r0, fp
 800a07a:	f000 fafd 	bl	800a678 <__lshift>
 800a07e:	4621      	mov	r1, r4
 800a080:	4681      	mov	r9, r0
 800a082:	f000 fb65 	bl	800a750 <__mcmp>
 800a086:	2800      	cmp	r0, #0
 800a088:	dc03      	bgt.n	800a092 <_dtoa_r+0xa52>
 800a08a:	d1e1      	bne.n	800a050 <_dtoa_r+0xa10>
 800a08c:	f018 0f01 	tst.w	r8, #1
 800a090:	d0de      	beq.n	800a050 <_dtoa_r+0xa10>
 800a092:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a096:	d1d8      	bne.n	800a04a <_dtoa_r+0xa0a>
 800a098:	9a00      	ldr	r2, [sp, #0]
 800a09a:	2339      	movs	r3, #57	@ 0x39
 800a09c:	7013      	strb	r3, [r2, #0]
 800a09e:	4633      	mov	r3, r6
 800a0a0:	461e      	mov	r6, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0a8:	2a39      	cmp	r2, #57	@ 0x39
 800a0aa:	d052      	beq.n	800a152 <_dtoa_r+0xb12>
 800a0ac:	3201      	adds	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
 800a0b0:	e612      	b.n	8009cd8 <_dtoa_r+0x698>
 800a0b2:	2a00      	cmp	r2, #0
 800a0b4:	dd07      	ble.n	800a0c6 <_dtoa_r+0xa86>
 800a0b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0ba:	d0ed      	beq.n	800a098 <_dtoa_r+0xa58>
 800a0bc:	9a00      	ldr	r2, [sp, #0]
 800a0be:	f108 0301 	add.w	r3, r8, #1
 800a0c2:	7013      	strb	r3, [r2, #0]
 800a0c4:	e608      	b.n	8009cd8 <_dtoa_r+0x698>
 800a0c6:	9b07      	ldr	r3, [sp, #28]
 800a0c8:	9a07      	ldr	r2, [sp, #28]
 800a0ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d028      	beq.n	800a126 <_dtoa_r+0xae6>
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4658      	mov	r0, fp
 800a0dc:	f000 f920 	bl	800a320 <__multadd>
 800a0e0:	42af      	cmp	r7, r5
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	f04f 020a 	mov.w	r2, #10
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	4658      	mov	r0, fp
 800a0f0:	d107      	bne.n	800a102 <_dtoa_r+0xac2>
 800a0f2:	f000 f915 	bl	800a320 <__multadd>
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	9b07      	ldr	r3, [sp, #28]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	e774      	b.n	8009fec <_dtoa_r+0x9ac>
 800a102:	f000 f90d 	bl	800a320 <__multadd>
 800a106:	4629      	mov	r1, r5
 800a108:	4607      	mov	r7, r0
 800a10a:	2300      	movs	r3, #0
 800a10c:	220a      	movs	r2, #10
 800a10e:	4658      	mov	r0, fp
 800a110:	f000 f906 	bl	800a320 <__multadd>
 800a114:	4605      	mov	r5, r0
 800a116:	e7f0      	b.n	800a0fa <_dtoa_r+0xaba>
 800a118:	9b00      	ldr	r3, [sp, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	bfcc      	ite	gt
 800a11e:	461e      	movgt	r6, r3
 800a120:	2601      	movle	r6, #1
 800a122:	4456      	add	r6, sl
 800a124:	2700      	movs	r7, #0
 800a126:	4649      	mov	r1, r9
 800a128:	2201      	movs	r2, #1
 800a12a:	4658      	mov	r0, fp
 800a12c:	f000 faa4 	bl	800a678 <__lshift>
 800a130:	4621      	mov	r1, r4
 800a132:	4681      	mov	r9, r0
 800a134:	f000 fb0c 	bl	800a750 <__mcmp>
 800a138:	2800      	cmp	r0, #0
 800a13a:	dcb0      	bgt.n	800a09e <_dtoa_r+0xa5e>
 800a13c:	d102      	bne.n	800a144 <_dtoa_r+0xb04>
 800a13e:	f018 0f01 	tst.w	r8, #1
 800a142:	d1ac      	bne.n	800a09e <_dtoa_r+0xa5e>
 800a144:	4633      	mov	r3, r6
 800a146:	461e      	mov	r6, r3
 800a148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a14c:	2a30      	cmp	r2, #48	@ 0x30
 800a14e:	d0fa      	beq.n	800a146 <_dtoa_r+0xb06>
 800a150:	e5c2      	b.n	8009cd8 <_dtoa_r+0x698>
 800a152:	459a      	cmp	sl, r3
 800a154:	d1a4      	bne.n	800a0a0 <_dtoa_r+0xa60>
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	3301      	adds	r3, #1
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	2331      	movs	r3, #49	@ 0x31
 800a15e:	f88a 3000 	strb.w	r3, [sl]
 800a162:	e5b9      	b.n	8009cd8 <_dtoa_r+0x698>
 800a164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a166:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a1c4 <_dtoa_r+0xb84>
 800a16a:	b11b      	cbz	r3, 800a174 <_dtoa_r+0xb34>
 800a16c:	f10a 0308 	add.w	r3, sl, #8
 800a170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	4650      	mov	r0, sl
 800a176:	b019      	add	sp, #100	@ 0x64
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17e:	2b01      	cmp	r3, #1
 800a180:	f77f ae37 	ble.w	8009df2 <_dtoa_r+0x7b2>
 800a184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a186:	930a      	str	r3, [sp, #40]	@ 0x28
 800a188:	2001      	movs	r0, #1
 800a18a:	e655      	b.n	8009e38 <_dtoa_r+0x7f8>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f77f aed6 	ble.w	8009f40 <_dtoa_r+0x900>
 800a194:	4656      	mov	r6, sl
 800a196:	4621      	mov	r1, r4
 800a198:	4648      	mov	r0, r9
 800a19a:	f7ff f9c8 	bl	800952e <quorem>
 800a19e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1a2:	f806 8b01 	strb.w	r8, [r6], #1
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	eba6 020a 	sub.w	r2, r6, sl
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	ddb3      	ble.n	800a118 <_dtoa_r+0xad8>
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	220a      	movs	r2, #10
 800a1b6:	4658      	mov	r0, fp
 800a1b8:	f000 f8b2 	bl	800a320 <__multadd>
 800a1bc:	4681      	mov	r9, r0
 800a1be:	e7ea      	b.n	800a196 <_dtoa_r+0xb56>
 800a1c0:	08039678 	.word	0x08039678
 800a1c4:	080395fc 	.word	0x080395fc

0800a1c8 <_free_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d041      	beq.n	800a254 <_free_r+0x8c>
 800a1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d4:	1f0c      	subs	r4, r1, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfb8      	it	lt
 800a1da:	18e4      	addlt	r4, r4, r3
 800a1dc:	f7fe fa9c 	bl	8008718 <__malloc_lock>
 800a1e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a258 <_free_r+0x90>)
 800a1e2:	6813      	ldr	r3, [r2, #0]
 800a1e4:	b933      	cbnz	r3, 800a1f4 <_free_r+0x2c>
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	6014      	str	r4, [r2, #0]
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f0:	f7fe ba98 	b.w	8008724 <__malloc_unlock>
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	d908      	bls.n	800a20a <_free_r+0x42>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	1821      	adds	r1, r4, r0
 800a1fc:	428b      	cmp	r3, r1
 800a1fe:	bf01      	itttt	eq
 800a200:	6819      	ldreq	r1, [r3, #0]
 800a202:	685b      	ldreq	r3, [r3, #4]
 800a204:	1809      	addeq	r1, r1, r0
 800a206:	6021      	streq	r1, [r4, #0]
 800a208:	e7ed      	b.n	800a1e6 <_free_r+0x1e>
 800a20a:	461a      	mov	r2, r3
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	b10b      	cbz	r3, 800a214 <_free_r+0x4c>
 800a210:	42a3      	cmp	r3, r4
 800a212:	d9fa      	bls.n	800a20a <_free_r+0x42>
 800a214:	6811      	ldr	r1, [r2, #0]
 800a216:	1850      	adds	r0, r2, r1
 800a218:	42a0      	cmp	r0, r4
 800a21a:	d10b      	bne.n	800a234 <_free_r+0x6c>
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	4401      	add	r1, r0
 800a220:	1850      	adds	r0, r2, r1
 800a222:	4283      	cmp	r3, r0
 800a224:	6011      	str	r1, [r2, #0]
 800a226:	d1e0      	bne.n	800a1ea <_free_r+0x22>
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	6053      	str	r3, [r2, #4]
 800a22e:	4408      	add	r0, r1
 800a230:	6010      	str	r0, [r2, #0]
 800a232:	e7da      	b.n	800a1ea <_free_r+0x22>
 800a234:	d902      	bls.n	800a23c <_free_r+0x74>
 800a236:	230c      	movs	r3, #12
 800a238:	602b      	str	r3, [r5, #0]
 800a23a:	e7d6      	b.n	800a1ea <_free_r+0x22>
 800a23c:	6820      	ldr	r0, [r4, #0]
 800a23e:	1821      	adds	r1, r4, r0
 800a240:	428b      	cmp	r3, r1
 800a242:	bf04      	itt	eq
 800a244:	6819      	ldreq	r1, [r3, #0]
 800a246:	685b      	ldreq	r3, [r3, #4]
 800a248:	6063      	str	r3, [r4, #4]
 800a24a:	bf04      	itt	eq
 800a24c:	1809      	addeq	r1, r1, r0
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	6054      	str	r4, [r2, #4]
 800a252:	e7ca      	b.n	800a1ea <_free_r+0x22>
 800a254:	bd38      	pop	{r3, r4, r5, pc}
 800a256:	bf00      	nop
 800a258:	20006dc4 	.word	0x20006dc4

0800a25c <_Balloc>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	69c6      	ldr	r6, [r0, #28]
 800a260:	4604      	mov	r4, r0
 800a262:	460d      	mov	r5, r1
 800a264:	b976      	cbnz	r6, 800a284 <_Balloc+0x28>
 800a266:	2010      	movs	r0, #16
 800a268:	f7fe f9ac 	bl	80085c4 <malloc>
 800a26c:	4602      	mov	r2, r0
 800a26e:	61e0      	str	r0, [r4, #28]
 800a270:	b920      	cbnz	r0, 800a27c <_Balloc+0x20>
 800a272:	4b18      	ldr	r3, [pc, #96]	@ (800a2d4 <_Balloc+0x78>)
 800a274:	4818      	ldr	r0, [pc, #96]	@ (800a2d8 <_Balloc+0x7c>)
 800a276:	216b      	movs	r1, #107	@ 0x6b
 800a278:	f000 fde4 	bl	800ae44 <__assert_func>
 800a27c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a280:	6006      	str	r6, [r0, #0]
 800a282:	60c6      	str	r6, [r0, #12]
 800a284:	69e6      	ldr	r6, [r4, #28]
 800a286:	68f3      	ldr	r3, [r6, #12]
 800a288:	b183      	cbz	r3, 800a2ac <_Balloc+0x50>
 800a28a:	69e3      	ldr	r3, [r4, #28]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a292:	b9b8      	cbnz	r0, 800a2c4 <_Balloc+0x68>
 800a294:	2101      	movs	r1, #1
 800a296:	fa01 f605 	lsl.w	r6, r1, r5
 800a29a:	1d72      	adds	r2, r6, #5
 800a29c:	0092      	lsls	r2, r2, #2
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 fdee 	bl	800ae80 <_calloc_r>
 800a2a4:	b160      	cbz	r0, 800a2c0 <_Balloc+0x64>
 800a2a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2aa:	e00e      	b.n	800a2ca <_Balloc+0x6e>
 800a2ac:	2221      	movs	r2, #33	@ 0x21
 800a2ae:	2104      	movs	r1, #4
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fde5 	bl	800ae80 <_calloc_r>
 800a2b6:	69e3      	ldr	r3, [r4, #28]
 800a2b8:	60f0      	str	r0, [r6, #12]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d1e4      	bne.n	800a28a <_Balloc+0x2e>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	bd70      	pop	{r4, r5, r6, pc}
 800a2c4:	6802      	ldr	r2, [r0, #0]
 800a2c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2d0:	e7f7      	b.n	800a2c2 <_Balloc+0x66>
 800a2d2:	bf00      	nop
 800a2d4:	08039609 	.word	0x08039609
 800a2d8:	08039689 	.word	0x08039689

0800a2dc <_Bfree>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	69c6      	ldr	r6, [r0, #28]
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	b976      	cbnz	r6, 800a304 <_Bfree+0x28>
 800a2e6:	2010      	movs	r0, #16
 800a2e8:	f7fe f96c 	bl	80085c4 <malloc>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	61e8      	str	r0, [r5, #28]
 800a2f0:	b920      	cbnz	r0, 800a2fc <_Bfree+0x20>
 800a2f2:	4b09      	ldr	r3, [pc, #36]	@ (800a318 <_Bfree+0x3c>)
 800a2f4:	4809      	ldr	r0, [pc, #36]	@ (800a31c <_Bfree+0x40>)
 800a2f6:	218f      	movs	r1, #143	@ 0x8f
 800a2f8:	f000 fda4 	bl	800ae44 <__assert_func>
 800a2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a300:	6006      	str	r6, [r0, #0]
 800a302:	60c6      	str	r6, [r0, #12]
 800a304:	b13c      	cbz	r4, 800a316 <_Bfree+0x3a>
 800a306:	69eb      	ldr	r3, [r5, #28]
 800a308:	6862      	ldr	r2, [r4, #4]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a310:	6021      	str	r1, [r4, #0]
 800a312:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	08039609 	.word	0x08039609
 800a31c:	08039689 	.word	0x08039689

0800a320 <__multadd>:
 800a320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a324:	690d      	ldr	r5, [r1, #16]
 800a326:	4607      	mov	r7, r0
 800a328:	460c      	mov	r4, r1
 800a32a:	461e      	mov	r6, r3
 800a32c:	f101 0c14 	add.w	ip, r1, #20
 800a330:	2000      	movs	r0, #0
 800a332:	f8dc 3000 	ldr.w	r3, [ip]
 800a336:	b299      	uxth	r1, r3
 800a338:	fb02 6101 	mla	r1, r2, r1, r6
 800a33c:	0c1e      	lsrs	r6, r3, #16
 800a33e:	0c0b      	lsrs	r3, r1, #16
 800a340:	fb02 3306 	mla	r3, r2, r6, r3
 800a344:	b289      	uxth	r1, r1
 800a346:	3001      	adds	r0, #1
 800a348:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a34c:	4285      	cmp	r5, r0
 800a34e:	f84c 1b04 	str.w	r1, [ip], #4
 800a352:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a356:	dcec      	bgt.n	800a332 <__multadd+0x12>
 800a358:	b30e      	cbz	r6, 800a39e <__multadd+0x7e>
 800a35a:	68a3      	ldr	r3, [r4, #8]
 800a35c:	42ab      	cmp	r3, r5
 800a35e:	dc19      	bgt.n	800a394 <__multadd+0x74>
 800a360:	6861      	ldr	r1, [r4, #4]
 800a362:	4638      	mov	r0, r7
 800a364:	3101      	adds	r1, #1
 800a366:	f7ff ff79 	bl	800a25c <_Balloc>
 800a36a:	4680      	mov	r8, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__multadd+0x5a>
 800a36e:	4602      	mov	r2, r0
 800a370:	4b0c      	ldr	r3, [pc, #48]	@ (800a3a4 <__multadd+0x84>)
 800a372:	480d      	ldr	r0, [pc, #52]	@ (800a3a8 <__multadd+0x88>)
 800a374:	21ba      	movs	r1, #186	@ 0xba
 800a376:	f000 fd65 	bl	800ae44 <__assert_func>
 800a37a:	6922      	ldr	r2, [r4, #16]
 800a37c:	3202      	adds	r2, #2
 800a37e:	f104 010c 	add.w	r1, r4, #12
 800a382:	0092      	lsls	r2, r2, #2
 800a384:	300c      	adds	r0, #12
 800a386:	f7ff f8c4 	bl	8009512 <memcpy>
 800a38a:	4621      	mov	r1, r4
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff ffa5 	bl	800a2dc <_Bfree>
 800a392:	4644      	mov	r4, r8
 800a394:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a398:	3501      	adds	r5, #1
 800a39a:	615e      	str	r6, [r3, #20]
 800a39c:	6125      	str	r5, [r4, #16]
 800a39e:	4620      	mov	r0, r4
 800a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a4:	08039678 	.word	0x08039678
 800a3a8:	08039689 	.word	0x08039689

0800a3ac <__hi0bits>:
 800a3ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	bf36      	itet	cc
 800a3b4:	0403      	lslcc	r3, r0, #16
 800a3b6:	2000      	movcs	r0, #0
 800a3b8:	2010      	movcc	r0, #16
 800a3ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3be:	bf3c      	itt	cc
 800a3c0:	021b      	lslcc	r3, r3, #8
 800a3c2:	3008      	addcc	r0, #8
 800a3c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3c8:	bf3c      	itt	cc
 800a3ca:	011b      	lslcc	r3, r3, #4
 800a3cc:	3004      	addcc	r0, #4
 800a3ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d2:	bf3c      	itt	cc
 800a3d4:	009b      	lslcc	r3, r3, #2
 800a3d6:	3002      	addcc	r0, #2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	db05      	blt.n	800a3e8 <__hi0bits+0x3c>
 800a3dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3e0:	f100 0001 	add.w	r0, r0, #1
 800a3e4:	bf08      	it	eq
 800a3e6:	2020      	moveq	r0, #32
 800a3e8:	4770      	bx	lr

0800a3ea <__lo0bits>:
 800a3ea:	6803      	ldr	r3, [r0, #0]
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	f013 0007 	ands.w	r0, r3, #7
 800a3f2:	d00b      	beq.n	800a40c <__lo0bits+0x22>
 800a3f4:	07d9      	lsls	r1, r3, #31
 800a3f6:	d421      	bmi.n	800a43c <__lo0bits+0x52>
 800a3f8:	0798      	lsls	r0, r3, #30
 800a3fa:	bf49      	itett	mi
 800a3fc:	085b      	lsrmi	r3, r3, #1
 800a3fe:	089b      	lsrpl	r3, r3, #2
 800a400:	2001      	movmi	r0, #1
 800a402:	6013      	strmi	r3, [r2, #0]
 800a404:	bf5c      	itt	pl
 800a406:	6013      	strpl	r3, [r2, #0]
 800a408:	2002      	movpl	r0, #2
 800a40a:	4770      	bx	lr
 800a40c:	b299      	uxth	r1, r3
 800a40e:	b909      	cbnz	r1, 800a414 <__lo0bits+0x2a>
 800a410:	0c1b      	lsrs	r3, r3, #16
 800a412:	2010      	movs	r0, #16
 800a414:	b2d9      	uxtb	r1, r3
 800a416:	b909      	cbnz	r1, 800a41c <__lo0bits+0x32>
 800a418:	3008      	adds	r0, #8
 800a41a:	0a1b      	lsrs	r3, r3, #8
 800a41c:	0719      	lsls	r1, r3, #28
 800a41e:	bf04      	itt	eq
 800a420:	091b      	lsreq	r3, r3, #4
 800a422:	3004      	addeq	r0, #4
 800a424:	0799      	lsls	r1, r3, #30
 800a426:	bf04      	itt	eq
 800a428:	089b      	lsreq	r3, r3, #2
 800a42a:	3002      	addeq	r0, #2
 800a42c:	07d9      	lsls	r1, r3, #31
 800a42e:	d403      	bmi.n	800a438 <__lo0bits+0x4e>
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	f100 0001 	add.w	r0, r0, #1
 800a436:	d003      	beq.n	800a440 <__lo0bits+0x56>
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	4770      	bx	lr
 800a43c:	2000      	movs	r0, #0
 800a43e:	4770      	bx	lr
 800a440:	2020      	movs	r0, #32
 800a442:	4770      	bx	lr

0800a444 <__i2b>:
 800a444:	b510      	push	{r4, lr}
 800a446:	460c      	mov	r4, r1
 800a448:	2101      	movs	r1, #1
 800a44a:	f7ff ff07 	bl	800a25c <_Balloc>
 800a44e:	4602      	mov	r2, r0
 800a450:	b928      	cbnz	r0, 800a45e <__i2b+0x1a>
 800a452:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <__i2b+0x24>)
 800a454:	4805      	ldr	r0, [pc, #20]	@ (800a46c <__i2b+0x28>)
 800a456:	f240 1145 	movw	r1, #325	@ 0x145
 800a45a:	f000 fcf3 	bl	800ae44 <__assert_func>
 800a45e:	2301      	movs	r3, #1
 800a460:	6144      	str	r4, [r0, #20]
 800a462:	6103      	str	r3, [r0, #16]
 800a464:	bd10      	pop	{r4, pc}
 800a466:	bf00      	nop
 800a468:	08039678 	.word	0x08039678
 800a46c:	08039689 	.word	0x08039689

0800a470 <__multiply>:
 800a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	4614      	mov	r4, r2
 800a476:	690a      	ldr	r2, [r1, #16]
 800a478:	6923      	ldr	r3, [r4, #16]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	bfa8      	it	ge
 800a47e:	4623      	movge	r3, r4
 800a480:	460f      	mov	r7, r1
 800a482:	bfa4      	itt	ge
 800a484:	460c      	movge	r4, r1
 800a486:	461f      	movge	r7, r3
 800a488:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a48c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a490:	68a3      	ldr	r3, [r4, #8]
 800a492:	6861      	ldr	r1, [r4, #4]
 800a494:	eb0a 0609 	add.w	r6, sl, r9
 800a498:	42b3      	cmp	r3, r6
 800a49a:	b085      	sub	sp, #20
 800a49c:	bfb8      	it	lt
 800a49e:	3101      	addlt	r1, #1
 800a4a0:	f7ff fedc 	bl	800a25c <_Balloc>
 800a4a4:	b930      	cbnz	r0, 800a4b4 <__multiply+0x44>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	4b44      	ldr	r3, [pc, #272]	@ (800a5bc <__multiply+0x14c>)
 800a4aa:	4845      	ldr	r0, [pc, #276]	@ (800a5c0 <__multiply+0x150>)
 800a4ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4b0:	f000 fcc8 	bl	800ae44 <__assert_func>
 800a4b4:	f100 0514 	add.w	r5, r0, #20
 800a4b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4bc:	462b      	mov	r3, r5
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4543      	cmp	r3, r8
 800a4c2:	d321      	bcc.n	800a508 <__multiply+0x98>
 800a4c4:	f107 0114 	add.w	r1, r7, #20
 800a4c8:	f104 0214 	add.w	r2, r4, #20
 800a4cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a4d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a4d4:	9302      	str	r3, [sp, #8]
 800a4d6:	1b13      	subs	r3, r2, r4
 800a4d8:	3b15      	subs	r3, #21
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	3304      	adds	r3, #4
 800a4e0:	f104 0715 	add.w	r7, r4, #21
 800a4e4:	42ba      	cmp	r2, r7
 800a4e6:	bf38      	it	cc
 800a4e8:	2304      	movcc	r3, #4
 800a4ea:	9301      	str	r3, [sp, #4]
 800a4ec:	9b02      	ldr	r3, [sp, #8]
 800a4ee:	9103      	str	r1, [sp, #12]
 800a4f0:	428b      	cmp	r3, r1
 800a4f2:	d80c      	bhi.n	800a50e <__multiply+0x9e>
 800a4f4:	2e00      	cmp	r6, #0
 800a4f6:	dd03      	ble.n	800a500 <__multiply+0x90>
 800a4f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d05b      	beq.n	800a5b8 <__multiply+0x148>
 800a500:	6106      	str	r6, [r0, #16]
 800a502:	b005      	add	sp, #20
 800a504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a508:	f843 2b04 	str.w	r2, [r3], #4
 800a50c:	e7d8      	b.n	800a4c0 <__multiply+0x50>
 800a50e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a512:	f1ba 0f00 	cmp.w	sl, #0
 800a516:	d024      	beq.n	800a562 <__multiply+0xf2>
 800a518:	f104 0e14 	add.w	lr, r4, #20
 800a51c:	46a9      	mov	r9, r5
 800a51e:	f04f 0c00 	mov.w	ip, #0
 800a522:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a526:	f8d9 3000 	ldr.w	r3, [r9]
 800a52a:	fa1f fb87 	uxth.w	fp, r7
 800a52e:	b29b      	uxth	r3, r3
 800a530:	fb0a 330b 	mla	r3, sl, fp, r3
 800a534:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a538:	f8d9 7000 	ldr.w	r7, [r9]
 800a53c:	4463      	add	r3, ip
 800a53e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a542:	fb0a c70b 	mla	r7, sl, fp, ip
 800a546:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a550:	4572      	cmp	r2, lr
 800a552:	f849 3b04 	str.w	r3, [r9], #4
 800a556:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a55a:	d8e2      	bhi.n	800a522 <__multiply+0xb2>
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	f845 c003 	str.w	ip, [r5, r3]
 800a562:	9b03      	ldr	r3, [sp, #12]
 800a564:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a568:	3104      	adds	r1, #4
 800a56a:	f1b9 0f00 	cmp.w	r9, #0
 800a56e:	d021      	beq.n	800a5b4 <__multiply+0x144>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	f104 0c14 	add.w	ip, r4, #20
 800a576:	46ae      	mov	lr, r5
 800a578:	f04f 0a00 	mov.w	sl, #0
 800a57c:	f8bc b000 	ldrh.w	fp, [ip]
 800a580:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a584:	fb09 770b 	mla	r7, r9, fp, r7
 800a588:	4457      	add	r7, sl
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a590:	f84e 3b04 	str.w	r3, [lr], #4
 800a594:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a59c:	f8be 3000 	ldrh.w	r3, [lr]
 800a5a0:	fb09 330a 	mla	r3, r9, sl, r3
 800a5a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a5a8:	4562      	cmp	r2, ip
 800a5aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5ae:	d8e5      	bhi.n	800a57c <__multiply+0x10c>
 800a5b0:	9f01      	ldr	r7, [sp, #4]
 800a5b2:	51eb      	str	r3, [r5, r7]
 800a5b4:	3504      	adds	r5, #4
 800a5b6:	e799      	b.n	800a4ec <__multiply+0x7c>
 800a5b8:	3e01      	subs	r6, #1
 800a5ba:	e79b      	b.n	800a4f4 <__multiply+0x84>
 800a5bc:	08039678 	.word	0x08039678
 800a5c0:	08039689 	.word	0x08039689

0800a5c4 <__pow5mult>:
 800a5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c8:	4615      	mov	r5, r2
 800a5ca:	f012 0203 	ands.w	r2, r2, #3
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	460e      	mov	r6, r1
 800a5d2:	d007      	beq.n	800a5e4 <__pow5mult+0x20>
 800a5d4:	4c25      	ldr	r4, [pc, #148]	@ (800a66c <__pow5mult+0xa8>)
 800a5d6:	3a01      	subs	r2, #1
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5de:	f7ff fe9f 	bl	800a320 <__multadd>
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	10ad      	asrs	r5, r5, #2
 800a5e6:	d03d      	beq.n	800a664 <__pow5mult+0xa0>
 800a5e8:	69fc      	ldr	r4, [r7, #28]
 800a5ea:	b97c      	cbnz	r4, 800a60c <__pow5mult+0x48>
 800a5ec:	2010      	movs	r0, #16
 800a5ee:	f7fd ffe9 	bl	80085c4 <malloc>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	61f8      	str	r0, [r7, #28]
 800a5f6:	b928      	cbnz	r0, 800a604 <__pow5mult+0x40>
 800a5f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a670 <__pow5mult+0xac>)
 800a5fa:	481e      	ldr	r0, [pc, #120]	@ (800a674 <__pow5mult+0xb0>)
 800a5fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a600:	f000 fc20 	bl	800ae44 <__assert_func>
 800a604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a608:	6004      	str	r4, [r0, #0]
 800a60a:	60c4      	str	r4, [r0, #12]
 800a60c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a614:	b94c      	cbnz	r4, 800a62a <__pow5mult+0x66>
 800a616:	f240 2171 	movw	r1, #625	@ 0x271
 800a61a:	4638      	mov	r0, r7
 800a61c:	f7ff ff12 	bl	800a444 <__i2b>
 800a620:	2300      	movs	r3, #0
 800a622:	f8c8 0008 	str.w	r0, [r8, #8]
 800a626:	4604      	mov	r4, r0
 800a628:	6003      	str	r3, [r0, #0]
 800a62a:	f04f 0900 	mov.w	r9, #0
 800a62e:	07eb      	lsls	r3, r5, #31
 800a630:	d50a      	bpl.n	800a648 <__pow5mult+0x84>
 800a632:	4631      	mov	r1, r6
 800a634:	4622      	mov	r2, r4
 800a636:	4638      	mov	r0, r7
 800a638:	f7ff ff1a 	bl	800a470 <__multiply>
 800a63c:	4631      	mov	r1, r6
 800a63e:	4680      	mov	r8, r0
 800a640:	4638      	mov	r0, r7
 800a642:	f7ff fe4b 	bl	800a2dc <_Bfree>
 800a646:	4646      	mov	r6, r8
 800a648:	106d      	asrs	r5, r5, #1
 800a64a:	d00b      	beq.n	800a664 <__pow5mult+0xa0>
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	b938      	cbnz	r0, 800a660 <__pow5mult+0x9c>
 800a650:	4622      	mov	r2, r4
 800a652:	4621      	mov	r1, r4
 800a654:	4638      	mov	r0, r7
 800a656:	f7ff ff0b 	bl	800a470 <__multiply>
 800a65a:	6020      	str	r0, [r4, #0]
 800a65c:	f8c0 9000 	str.w	r9, [r0]
 800a660:	4604      	mov	r4, r0
 800a662:	e7e4      	b.n	800a62e <__pow5mult+0x6a>
 800a664:	4630      	mov	r0, r6
 800a666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66a:	bf00      	nop
 800a66c:	080396e4 	.word	0x080396e4
 800a670:	08039609 	.word	0x08039609
 800a674:	08039689 	.word	0x08039689

0800a678 <__lshift>:
 800a678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a67c:	460c      	mov	r4, r1
 800a67e:	6849      	ldr	r1, [r1, #4]
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a686:	68a3      	ldr	r3, [r4, #8]
 800a688:	4607      	mov	r7, r0
 800a68a:	4691      	mov	r9, r2
 800a68c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a690:	f108 0601 	add.w	r6, r8, #1
 800a694:	42b3      	cmp	r3, r6
 800a696:	db0b      	blt.n	800a6b0 <__lshift+0x38>
 800a698:	4638      	mov	r0, r7
 800a69a:	f7ff fddf 	bl	800a25c <_Balloc>
 800a69e:	4605      	mov	r5, r0
 800a6a0:	b948      	cbnz	r0, 800a6b6 <__lshift+0x3e>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	4b28      	ldr	r3, [pc, #160]	@ (800a748 <__lshift+0xd0>)
 800a6a6:	4829      	ldr	r0, [pc, #164]	@ (800a74c <__lshift+0xd4>)
 800a6a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6ac:	f000 fbca 	bl	800ae44 <__assert_func>
 800a6b0:	3101      	adds	r1, #1
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	e7ee      	b.n	800a694 <__lshift+0x1c>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	f100 0114 	add.w	r1, r0, #20
 800a6bc:	f100 0210 	add.w	r2, r0, #16
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	4553      	cmp	r3, sl
 800a6c4:	db33      	blt.n	800a72e <__lshift+0xb6>
 800a6c6:	6920      	ldr	r0, [r4, #16]
 800a6c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6cc:	f104 0314 	add.w	r3, r4, #20
 800a6d0:	f019 091f 	ands.w	r9, r9, #31
 800a6d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6dc:	d02b      	beq.n	800a736 <__lshift+0xbe>
 800a6de:	f1c9 0e20 	rsb	lr, r9, #32
 800a6e2:	468a      	mov	sl, r1
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	6818      	ldr	r0, [r3, #0]
 800a6e8:	fa00 f009 	lsl.w	r0, r0, r9
 800a6ec:	4310      	orrs	r0, r2
 800a6ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f6:	459c      	cmp	ip, r3
 800a6f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6fc:	d8f3      	bhi.n	800a6e6 <__lshift+0x6e>
 800a6fe:	ebac 0304 	sub.w	r3, ip, r4
 800a702:	3b15      	subs	r3, #21
 800a704:	f023 0303 	bic.w	r3, r3, #3
 800a708:	3304      	adds	r3, #4
 800a70a:	f104 0015 	add.w	r0, r4, #21
 800a70e:	4584      	cmp	ip, r0
 800a710:	bf38      	it	cc
 800a712:	2304      	movcc	r3, #4
 800a714:	50ca      	str	r2, [r1, r3]
 800a716:	b10a      	cbz	r2, 800a71c <__lshift+0xa4>
 800a718:	f108 0602 	add.w	r6, r8, #2
 800a71c:	3e01      	subs	r6, #1
 800a71e:	4638      	mov	r0, r7
 800a720:	612e      	str	r6, [r5, #16]
 800a722:	4621      	mov	r1, r4
 800a724:	f7ff fdda 	bl	800a2dc <_Bfree>
 800a728:	4628      	mov	r0, r5
 800a72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a72e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a732:	3301      	adds	r3, #1
 800a734:	e7c5      	b.n	800a6c2 <__lshift+0x4a>
 800a736:	3904      	subs	r1, #4
 800a738:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a740:	459c      	cmp	ip, r3
 800a742:	d8f9      	bhi.n	800a738 <__lshift+0xc0>
 800a744:	e7ea      	b.n	800a71c <__lshift+0xa4>
 800a746:	bf00      	nop
 800a748:	08039678 	.word	0x08039678
 800a74c:	08039689 	.word	0x08039689

0800a750 <__mcmp>:
 800a750:	690a      	ldr	r2, [r1, #16]
 800a752:	4603      	mov	r3, r0
 800a754:	6900      	ldr	r0, [r0, #16]
 800a756:	1a80      	subs	r0, r0, r2
 800a758:	b530      	push	{r4, r5, lr}
 800a75a:	d10e      	bne.n	800a77a <__mcmp+0x2a>
 800a75c:	3314      	adds	r3, #20
 800a75e:	3114      	adds	r1, #20
 800a760:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a76c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a770:	4295      	cmp	r5, r2
 800a772:	d003      	beq.n	800a77c <__mcmp+0x2c>
 800a774:	d205      	bcs.n	800a782 <__mcmp+0x32>
 800a776:	f04f 30ff 	mov.w	r0, #4294967295
 800a77a:	bd30      	pop	{r4, r5, pc}
 800a77c:	42a3      	cmp	r3, r4
 800a77e:	d3f3      	bcc.n	800a768 <__mcmp+0x18>
 800a780:	e7fb      	b.n	800a77a <__mcmp+0x2a>
 800a782:	2001      	movs	r0, #1
 800a784:	e7f9      	b.n	800a77a <__mcmp+0x2a>
	...

0800a788 <__mdiff>:
 800a788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	4689      	mov	r9, r1
 800a78e:	4606      	mov	r6, r0
 800a790:	4611      	mov	r1, r2
 800a792:	4648      	mov	r0, r9
 800a794:	4614      	mov	r4, r2
 800a796:	f7ff ffdb 	bl	800a750 <__mcmp>
 800a79a:	1e05      	subs	r5, r0, #0
 800a79c:	d112      	bne.n	800a7c4 <__mdiff+0x3c>
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7ff fd5b 	bl	800a25c <_Balloc>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	b928      	cbnz	r0, 800a7b6 <__mdiff+0x2e>
 800a7aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a8a8 <__mdiff+0x120>)
 800a7ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a7b0:	483e      	ldr	r0, [pc, #248]	@ (800a8ac <__mdiff+0x124>)
 800a7b2:	f000 fb47 	bl	800ae44 <__assert_func>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7bc:	4610      	mov	r0, r2
 800a7be:	b003      	add	sp, #12
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	bfbc      	itt	lt
 800a7c6:	464b      	movlt	r3, r9
 800a7c8:	46a1      	movlt	r9, r4
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7d0:	bfba      	itte	lt
 800a7d2:	461c      	movlt	r4, r3
 800a7d4:	2501      	movlt	r5, #1
 800a7d6:	2500      	movge	r5, #0
 800a7d8:	f7ff fd40 	bl	800a25c <_Balloc>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	b918      	cbnz	r0, 800a7e8 <__mdiff+0x60>
 800a7e0:	4b31      	ldr	r3, [pc, #196]	@ (800a8a8 <__mdiff+0x120>)
 800a7e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a7e6:	e7e3      	b.n	800a7b0 <__mdiff+0x28>
 800a7e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7ec:	6926      	ldr	r6, [r4, #16]
 800a7ee:	60c5      	str	r5, [r0, #12]
 800a7f0:	f109 0310 	add.w	r3, r9, #16
 800a7f4:	f109 0514 	add.w	r5, r9, #20
 800a7f8:	f104 0e14 	add.w	lr, r4, #20
 800a7fc:	f100 0b14 	add.w	fp, r0, #20
 800a800:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a804:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	46d9      	mov	r9, fp
 800a80c:	f04f 0c00 	mov.w	ip, #0
 800a810:	9b01      	ldr	r3, [sp, #4]
 800a812:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a816:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	fa1f f38a 	uxth.w	r3, sl
 800a820:	4619      	mov	r1, r3
 800a822:	b283      	uxth	r3, r0
 800a824:	1acb      	subs	r3, r1, r3
 800a826:	0c00      	lsrs	r0, r0, #16
 800a828:	4463      	add	r3, ip
 800a82a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a82e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a832:	b29b      	uxth	r3, r3
 800a834:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a838:	4576      	cmp	r6, lr
 800a83a:	f849 3b04 	str.w	r3, [r9], #4
 800a83e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a842:	d8e5      	bhi.n	800a810 <__mdiff+0x88>
 800a844:	1b33      	subs	r3, r6, r4
 800a846:	3b15      	subs	r3, #21
 800a848:	f023 0303 	bic.w	r3, r3, #3
 800a84c:	3415      	adds	r4, #21
 800a84e:	3304      	adds	r3, #4
 800a850:	42a6      	cmp	r6, r4
 800a852:	bf38      	it	cc
 800a854:	2304      	movcc	r3, #4
 800a856:	441d      	add	r5, r3
 800a858:	445b      	add	r3, fp
 800a85a:	461e      	mov	r6, r3
 800a85c:	462c      	mov	r4, r5
 800a85e:	4544      	cmp	r4, r8
 800a860:	d30e      	bcc.n	800a880 <__mdiff+0xf8>
 800a862:	f108 0103 	add.w	r1, r8, #3
 800a866:	1b49      	subs	r1, r1, r5
 800a868:	f021 0103 	bic.w	r1, r1, #3
 800a86c:	3d03      	subs	r5, #3
 800a86e:	45a8      	cmp	r8, r5
 800a870:	bf38      	it	cc
 800a872:	2100      	movcc	r1, #0
 800a874:	440b      	add	r3, r1
 800a876:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a87a:	b191      	cbz	r1, 800a8a2 <__mdiff+0x11a>
 800a87c:	6117      	str	r7, [r2, #16]
 800a87e:	e79d      	b.n	800a7bc <__mdiff+0x34>
 800a880:	f854 1b04 	ldr.w	r1, [r4], #4
 800a884:	46e6      	mov	lr, ip
 800a886:	0c08      	lsrs	r0, r1, #16
 800a888:	fa1c fc81 	uxtah	ip, ip, r1
 800a88c:	4471      	add	r1, lr
 800a88e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a892:	b289      	uxth	r1, r1
 800a894:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a898:	f846 1b04 	str.w	r1, [r6], #4
 800a89c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8a0:	e7dd      	b.n	800a85e <__mdiff+0xd6>
 800a8a2:	3f01      	subs	r7, #1
 800a8a4:	e7e7      	b.n	800a876 <__mdiff+0xee>
 800a8a6:	bf00      	nop
 800a8a8:	08039678 	.word	0x08039678
 800a8ac:	08039689 	.word	0x08039689

0800a8b0 <__d2b>:
 800a8b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8b4:	460f      	mov	r7, r1
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	ec59 8b10 	vmov	r8, r9, d0
 800a8bc:	4616      	mov	r6, r2
 800a8be:	f7ff fccd 	bl	800a25c <_Balloc>
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	b930      	cbnz	r0, 800a8d4 <__d2b+0x24>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	4b23      	ldr	r3, [pc, #140]	@ (800a958 <__d2b+0xa8>)
 800a8ca:	4824      	ldr	r0, [pc, #144]	@ (800a95c <__d2b+0xac>)
 800a8cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8d0:	f000 fab8 	bl	800ae44 <__assert_func>
 800a8d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8dc:	b10d      	cbz	r5, 800a8e2 <__d2b+0x32>
 800a8de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	f1b8 0300 	subs.w	r3, r8, #0
 800a8e8:	d023      	beq.n	800a932 <__d2b+0x82>
 800a8ea:	4668      	mov	r0, sp
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	f7ff fd7c 	bl	800a3ea <__lo0bits>
 800a8f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8f6:	b1d0      	cbz	r0, 800a92e <__d2b+0x7e>
 800a8f8:	f1c0 0320 	rsb	r3, r0, #32
 800a8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a900:	430b      	orrs	r3, r1
 800a902:	40c2      	lsrs	r2, r0
 800a904:	6163      	str	r3, [r4, #20]
 800a906:	9201      	str	r2, [sp, #4]
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	61a3      	str	r3, [r4, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	bf0c      	ite	eq
 800a910:	2201      	moveq	r2, #1
 800a912:	2202      	movne	r2, #2
 800a914:	6122      	str	r2, [r4, #16]
 800a916:	b1a5      	cbz	r5, 800a942 <__d2b+0x92>
 800a918:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a91c:	4405      	add	r5, r0
 800a91e:	603d      	str	r5, [r7, #0]
 800a920:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a924:	6030      	str	r0, [r6, #0]
 800a926:	4620      	mov	r0, r4
 800a928:	b003      	add	sp, #12
 800a92a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a92e:	6161      	str	r1, [r4, #20]
 800a930:	e7ea      	b.n	800a908 <__d2b+0x58>
 800a932:	a801      	add	r0, sp, #4
 800a934:	f7ff fd59 	bl	800a3ea <__lo0bits>
 800a938:	9b01      	ldr	r3, [sp, #4]
 800a93a:	6163      	str	r3, [r4, #20]
 800a93c:	3020      	adds	r0, #32
 800a93e:	2201      	movs	r2, #1
 800a940:	e7e8      	b.n	800a914 <__d2b+0x64>
 800a942:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a946:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a94a:	6038      	str	r0, [r7, #0]
 800a94c:	6918      	ldr	r0, [r3, #16]
 800a94e:	f7ff fd2d 	bl	800a3ac <__hi0bits>
 800a952:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a956:	e7e5      	b.n	800a924 <__d2b+0x74>
 800a958:	08039678 	.word	0x08039678
 800a95c:	08039689 	.word	0x08039689

0800a960 <__sfputc_r>:
 800a960:	6893      	ldr	r3, [r2, #8]
 800a962:	3b01      	subs	r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	b410      	push	{r4}
 800a968:	6093      	str	r3, [r2, #8]
 800a96a:	da08      	bge.n	800a97e <__sfputc_r+0x1e>
 800a96c:	6994      	ldr	r4, [r2, #24]
 800a96e:	42a3      	cmp	r3, r4
 800a970:	db01      	blt.n	800a976 <__sfputc_r+0x16>
 800a972:	290a      	cmp	r1, #10
 800a974:	d103      	bne.n	800a97e <__sfputc_r+0x1e>
 800a976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a97a:	f7fe bca6 	b.w	80092ca <__swbuf_r>
 800a97e:	6813      	ldr	r3, [r2, #0]
 800a980:	1c58      	adds	r0, r3, #1
 800a982:	6010      	str	r0, [r2, #0]
 800a984:	7019      	strb	r1, [r3, #0]
 800a986:	4608      	mov	r0, r1
 800a988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <__sfputs_r>:
 800a98e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a990:	4606      	mov	r6, r0
 800a992:	460f      	mov	r7, r1
 800a994:	4614      	mov	r4, r2
 800a996:	18d5      	adds	r5, r2, r3
 800a998:	42ac      	cmp	r4, r5
 800a99a:	d101      	bne.n	800a9a0 <__sfputs_r+0x12>
 800a99c:	2000      	movs	r0, #0
 800a99e:	e007      	b.n	800a9b0 <__sfputs_r+0x22>
 800a9a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9a4:	463a      	mov	r2, r7
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7ff ffda 	bl	800a960 <__sfputc_r>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d1f3      	bne.n	800a998 <__sfputs_r+0xa>
 800a9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9b4 <_vfiprintf_r>:
 800a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	b09d      	sub	sp, #116	@ 0x74
 800a9bc:	4614      	mov	r4, r2
 800a9be:	4698      	mov	r8, r3
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	b118      	cbz	r0, 800a9cc <_vfiprintf_r+0x18>
 800a9c4:	6a03      	ldr	r3, [r0, #32]
 800a9c6:	b90b      	cbnz	r3, 800a9cc <_vfiprintf_r+0x18>
 800a9c8:	f7fe fb96 	bl	80090f8 <__sinit>
 800a9cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9ce:	07d9      	lsls	r1, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_vfiprintf_r+0x2a>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	059a      	lsls	r2, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_vfiprintf_r+0x2a>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9da:	f7fe fd98 	bl	800950e <__retarget_lock_acquire_recursive>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	071b      	lsls	r3, r3, #28
 800a9e2:	d501      	bpl.n	800a9e8 <_vfiprintf_r+0x34>
 800a9e4:	692b      	ldr	r3, [r5, #16]
 800a9e6:	b99b      	cbnz	r3, 800aa10 <_vfiprintf_r+0x5c>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7fe fcac 	bl	8009348 <__swsetup_r>
 800a9f0:	b170      	cbz	r0, 800aa10 <_vfiprintf_r+0x5c>
 800a9f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9f4:	07dc      	lsls	r4, r3, #31
 800a9f6:	d504      	bpl.n	800aa02 <_vfiprintf_r+0x4e>
 800a9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fc:	b01d      	add	sp, #116	@ 0x74
 800a9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	0598      	lsls	r0, r3, #22
 800aa06:	d4f7      	bmi.n	800a9f8 <_vfiprintf_r+0x44>
 800aa08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa0a:	f7fe fd81 	bl	8009510 <__retarget_lock_release_recursive>
 800aa0e:	e7f3      	b.n	800a9f8 <_vfiprintf_r+0x44>
 800aa10:	2300      	movs	r3, #0
 800aa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa14:	2320      	movs	r3, #32
 800aa16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa1e:	2330      	movs	r3, #48	@ 0x30
 800aa20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abd0 <_vfiprintf_r+0x21c>
 800aa24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa28:	f04f 0901 	mov.w	r9, #1
 800aa2c:	4623      	mov	r3, r4
 800aa2e:	469a      	mov	sl, r3
 800aa30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa34:	b10a      	cbz	r2, 800aa3a <_vfiprintf_r+0x86>
 800aa36:	2a25      	cmp	r2, #37	@ 0x25
 800aa38:	d1f9      	bne.n	800aa2e <_vfiprintf_r+0x7a>
 800aa3a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa3e:	d00b      	beq.n	800aa58 <_vfiprintf_r+0xa4>
 800aa40:	465b      	mov	r3, fp
 800aa42:	4622      	mov	r2, r4
 800aa44:	4629      	mov	r1, r5
 800aa46:	4630      	mov	r0, r6
 800aa48:	f7ff ffa1 	bl	800a98e <__sfputs_r>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	f000 80a7 	beq.w	800aba0 <_vfiprintf_r+0x1ec>
 800aa52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa54:	445a      	add	r2, fp
 800aa56:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa58:	f89a 3000 	ldrb.w	r3, [sl]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 809f 	beq.w	800aba0 <_vfiprintf_r+0x1ec>
 800aa62:	2300      	movs	r3, #0
 800aa64:	f04f 32ff 	mov.w	r2, #4294967295
 800aa68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa6c:	f10a 0a01 	add.w	sl, sl, #1
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa78:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa7a:	4654      	mov	r4, sl
 800aa7c:	2205      	movs	r2, #5
 800aa7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa82:	4853      	ldr	r0, [pc, #332]	@ (800abd0 <_vfiprintf_r+0x21c>)
 800aa84:	f7f5 fc2c 	bl	80002e0 <memchr>
 800aa88:	9a04      	ldr	r2, [sp, #16]
 800aa8a:	b9d8      	cbnz	r0, 800aac4 <_vfiprintf_r+0x110>
 800aa8c:	06d1      	lsls	r1, r2, #27
 800aa8e:	bf44      	itt	mi
 800aa90:	2320      	movmi	r3, #32
 800aa92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa96:	0713      	lsls	r3, r2, #28
 800aa98:	bf44      	itt	mi
 800aa9a:	232b      	movmi	r3, #43	@ 0x2b
 800aa9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaa0:	f89a 3000 	ldrb.w	r3, [sl]
 800aaa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaa6:	d015      	beq.n	800aad4 <_vfiprintf_r+0x120>
 800aaa8:	9a07      	ldr	r2, [sp, #28]
 800aaaa:	4654      	mov	r4, sl
 800aaac:	2000      	movs	r0, #0
 800aaae:	f04f 0c0a 	mov.w	ip, #10
 800aab2:	4621      	mov	r1, r4
 800aab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aab8:	3b30      	subs	r3, #48	@ 0x30
 800aaba:	2b09      	cmp	r3, #9
 800aabc:	d94b      	bls.n	800ab56 <_vfiprintf_r+0x1a2>
 800aabe:	b1b0      	cbz	r0, 800aaee <_vfiprintf_r+0x13a>
 800aac0:	9207      	str	r2, [sp, #28]
 800aac2:	e014      	b.n	800aaee <_vfiprintf_r+0x13a>
 800aac4:	eba0 0308 	sub.w	r3, r0, r8
 800aac8:	fa09 f303 	lsl.w	r3, r9, r3
 800aacc:	4313      	orrs	r3, r2
 800aace:	9304      	str	r3, [sp, #16]
 800aad0:	46a2      	mov	sl, r4
 800aad2:	e7d2      	b.n	800aa7a <_vfiprintf_r+0xc6>
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	1d19      	adds	r1, r3, #4
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	9103      	str	r1, [sp, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	bfbb      	ittet	lt
 800aae0:	425b      	neglt	r3, r3
 800aae2:	f042 0202 	orrlt.w	r2, r2, #2
 800aae6:	9307      	strge	r3, [sp, #28]
 800aae8:	9307      	strlt	r3, [sp, #28]
 800aaea:	bfb8      	it	lt
 800aaec:	9204      	strlt	r2, [sp, #16]
 800aaee:	7823      	ldrb	r3, [r4, #0]
 800aaf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aaf2:	d10a      	bne.n	800ab0a <_vfiprintf_r+0x156>
 800aaf4:	7863      	ldrb	r3, [r4, #1]
 800aaf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaf8:	d132      	bne.n	800ab60 <_vfiprintf_r+0x1ac>
 800aafa:	9b03      	ldr	r3, [sp, #12]
 800aafc:	1d1a      	adds	r2, r3, #4
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	9203      	str	r2, [sp, #12]
 800ab02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab06:	3402      	adds	r4, #2
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abe0 <_vfiprintf_r+0x22c>
 800ab0e:	7821      	ldrb	r1, [r4, #0]
 800ab10:	2203      	movs	r2, #3
 800ab12:	4650      	mov	r0, sl
 800ab14:	f7f5 fbe4 	bl	80002e0 <memchr>
 800ab18:	b138      	cbz	r0, 800ab2a <_vfiprintf_r+0x176>
 800ab1a:	9b04      	ldr	r3, [sp, #16]
 800ab1c:	eba0 000a 	sub.w	r0, r0, sl
 800ab20:	2240      	movs	r2, #64	@ 0x40
 800ab22:	4082      	lsls	r2, r0
 800ab24:	4313      	orrs	r3, r2
 800ab26:	3401      	adds	r4, #1
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2e:	4829      	ldr	r0, [pc, #164]	@ (800abd4 <_vfiprintf_r+0x220>)
 800ab30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab34:	2206      	movs	r2, #6
 800ab36:	f7f5 fbd3 	bl	80002e0 <memchr>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d03f      	beq.n	800abbe <_vfiprintf_r+0x20a>
 800ab3e:	4b26      	ldr	r3, [pc, #152]	@ (800abd8 <_vfiprintf_r+0x224>)
 800ab40:	bb1b      	cbnz	r3, 800ab8a <_vfiprintf_r+0x1d6>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	3307      	adds	r3, #7
 800ab46:	f023 0307 	bic.w	r3, r3, #7
 800ab4a:	3308      	adds	r3, #8
 800ab4c:	9303      	str	r3, [sp, #12]
 800ab4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab50:	443b      	add	r3, r7
 800ab52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab54:	e76a      	b.n	800aa2c <_vfiprintf_r+0x78>
 800ab56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	2001      	movs	r0, #1
 800ab5e:	e7a8      	b.n	800aab2 <_vfiprintf_r+0xfe>
 800ab60:	2300      	movs	r3, #0
 800ab62:	3401      	adds	r4, #1
 800ab64:	9305      	str	r3, [sp, #20]
 800ab66:	4619      	mov	r1, r3
 800ab68:	f04f 0c0a 	mov.w	ip, #10
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab72:	3a30      	subs	r2, #48	@ 0x30
 800ab74:	2a09      	cmp	r2, #9
 800ab76:	d903      	bls.n	800ab80 <_vfiprintf_r+0x1cc>
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0c6      	beq.n	800ab0a <_vfiprintf_r+0x156>
 800ab7c:	9105      	str	r1, [sp, #20]
 800ab7e:	e7c4      	b.n	800ab0a <_vfiprintf_r+0x156>
 800ab80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab84:	4604      	mov	r4, r0
 800ab86:	2301      	movs	r3, #1
 800ab88:	e7f0      	b.n	800ab6c <_vfiprintf_r+0x1b8>
 800ab8a:	ab03      	add	r3, sp, #12
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4b12      	ldr	r3, [pc, #72]	@ (800abdc <_vfiprintf_r+0x228>)
 800ab92:	a904      	add	r1, sp, #16
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7fd fe6b 	bl	8008870 <_printf_float>
 800ab9a:	4607      	mov	r7, r0
 800ab9c:	1c78      	adds	r0, r7, #1
 800ab9e:	d1d6      	bne.n	800ab4e <_vfiprintf_r+0x19a>
 800aba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aba2:	07d9      	lsls	r1, r3, #31
 800aba4:	d405      	bmi.n	800abb2 <_vfiprintf_r+0x1fe>
 800aba6:	89ab      	ldrh	r3, [r5, #12]
 800aba8:	059a      	lsls	r2, r3, #22
 800abaa:	d402      	bmi.n	800abb2 <_vfiprintf_r+0x1fe>
 800abac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abae:	f7fe fcaf 	bl	8009510 <__retarget_lock_release_recursive>
 800abb2:	89ab      	ldrh	r3, [r5, #12]
 800abb4:	065b      	lsls	r3, r3, #25
 800abb6:	f53f af1f 	bmi.w	800a9f8 <_vfiprintf_r+0x44>
 800abba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abbc:	e71e      	b.n	800a9fc <_vfiprintf_r+0x48>
 800abbe:	ab03      	add	r3, sp, #12
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	462a      	mov	r2, r5
 800abc4:	4b05      	ldr	r3, [pc, #20]	@ (800abdc <_vfiprintf_r+0x228>)
 800abc6:	a904      	add	r1, sp, #16
 800abc8:	4630      	mov	r0, r6
 800abca:	f7fe f8e9 	bl	8008da0 <_printf_i>
 800abce:	e7e4      	b.n	800ab9a <_vfiprintf_r+0x1e6>
 800abd0:	080397e0 	.word	0x080397e0
 800abd4:	080397ea 	.word	0x080397ea
 800abd8:	08008871 	.word	0x08008871
 800abdc:	0800a98f 	.word	0x0800a98f
 800abe0:	080397e6 	.word	0x080397e6

0800abe4 <__sflush_r>:
 800abe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abec:	0716      	lsls	r6, r2, #28
 800abee:	4605      	mov	r5, r0
 800abf0:	460c      	mov	r4, r1
 800abf2:	d454      	bmi.n	800ac9e <__sflush_r+0xba>
 800abf4:	684b      	ldr	r3, [r1, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dc02      	bgt.n	800ac00 <__sflush_r+0x1c>
 800abfa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dd48      	ble.n	800ac92 <__sflush_r+0xae>
 800ac00:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac02:	2e00      	cmp	r6, #0
 800ac04:	d045      	beq.n	800ac92 <__sflush_r+0xae>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac0c:	682f      	ldr	r7, [r5, #0]
 800ac0e:	6a21      	ldr	r1, [r4, #32]
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	d030      	beq.n	800ac76 <__sflush_r+0x92>
 800ac14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	0759      	lsls	r1, r3, #29
 800ac1a:	d505      	bpl.n	800ac28 <__sflush_r+0x44>
 800ac1c:	6863      	ldr	r3, [r4, #4]
 800ac1e:	1ad2      	subs	r2, r2, r3
 800ac20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac22:	b10b      	cbz	r3, 800ac28 <__sflush_r+0x44>
 800ac24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac26:	1ad2      	subs	r2, r2, r3
 800ac28:	2300      	movs	r3, #0
 800ac2a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac2c:	6a21      	ldr	r1, [r4, #32]
 800ac2e:	4628      	mov	r0, r5
 800ac30:	47b0      	blx	r6
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	d106      	bne.n	800ac46 <__sflush_r+0x62>
 800ac38:	6829      	ldr	r1, [r5, #0]
 800ac3a:	291d      	cmp	r1, #29
 800ac3c:	d82b      	bhi.n	800ac96 <__sflush_r+0xb2>
 800ac3e:	4a2a      	ldr	r2, [pc, #168]	@ (800ace8 <__sflush_r+0x104>)
 800ac40:	410a      	asrs	r2, r1
 800ac42:	07d6      	lsls	r6, r2, #31
 800ac44:	d427      	bmi.n	800ac96 <__sflush_r+0xb2>
 800ac46:	2200      	movs	r2, #0
 800ac48:	6062      	str	r2, [r4, #4]
 800ac4a:	04d9      	lsls	r1, r3, #19
 800ac4c:	6922      	ldr	r2, [r4, #16]
 800ac4e:	6022      	str	r2, [r4, #0]
 800ac50:	d504      	bpl.n	800ac5c <__sflush_r+0x78>
 800ac52:	1c42      	adds	r2, r0, #1
 800ac54:	d101      	bne.n	800ac5a <__sflush_r+0x76>
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	b903      	cbnz	r3, 800ac5c <__sflush_r+0x78>
 800ac5a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac5e:	602f      	str	r7, [r5, #0]
 800ac60:	b1b9      	cbz	r1, 800ac92 <__sflush_r+0xae>
 800ac62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac66:	4299      	cmp	r1, r3
 800ac68:	d002      	beq.n	800ac70 <__sflush_r+0x8c>
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f7ff faac 	bl	800a1c8 <_free_r>
 800ac70:	2300      	movs	r3, #0
 800ac72:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac74:	e00d      	b.n	800ac92 <__sflush_r+0xae>
 800ac76:	2301      	movs	r3, #1
 800ac78:	4628      	mov	r0, r5
 800ac7a:	47b0      	blx	r6
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	1c50      	adds	r0, r2, #1
 800ac80:	d1c9      	bne.n	800ac16 <__sflush_r+0x32>
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0c6      	beq.n	800ac16 <__sflush_r+0x32>
 800ac88:	2b1d      	cmp	r3, #29
 800ac8a:	d001      	beq.n	800ac90 <__sflush_r+0xac>
 800ac8c:	2b16      	cmp	r3, #22
 800ac8e:	d11e      	bne.n	800acce <__sflush_r+0xea>
 800ac90:	602f      	str	r7, [r5, #0]
 800ac92:	2000      	movs	r0, #0
 800ac94:	e022      	b.n	800acdc <__sflush_r+0xf8>
 800ac96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac9a:	b21b      	sxth	r3, r3
 800ac9c:	e01b      	b.n	800acd6 <__sflush_r+0xf2>
 800ac9e:	690f      	ldr	r7, [r1, #16]
 800aca0:	2f00      	cmp	r7, #0
 800aca2:	d0f6      	beq.n	800ac92 <__sflush_r+0xae>
 800aca4:	0793      	lsls	r3, r2, #30
 800aca6:	680e      	ldr	r6, [r1, #0]
 800aca8:	bf08      	it	eq
 800acaa:	694b      	ldreq	r3, [r1, #20]
 800acac:	600f      	str	r7, [r1, #0]
 800acae:	bf18      	it	ne
 800acb0:	2300      	movne	r3, #0
 800acb2:	eba6 0807 	sub.w	r8, r6, r7
 800acb6:	608b      	str	r3, [r1, #8]
 800acb8:	f1b8 0f00 	cmp.w	r8, #0
 800acbc:	dde9      	ble.n	800ac92 <__sflush_r+0xae>
 800acbe:	6a21      	ldr	r1, [r4, #32]
 800acc0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acc2:	4643      	mov	r3, r8
 800acc4:	463a      	mov	r2, r7
 800acc6:	4628      	mov	r0, r5
 800acc8:	47b0      	blx	r6
 800acca:	2800      	cmp	r0, #0
 800accc:	dc08      	bgt.n	800ace0 <__sflush_r+0xfc>
 800acce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace0:	4407      	add	r7, r0
 800ace2:	eba8 0800 	sub.w	r8, r8, r0
 800ace6:	e7e7      	b.n	800acb8 <__sflush_r+0xd4>
 800ace8:	dfbffffe 	.word	0xdfbffffe

0800acec <_fflush_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	690b      	ldr	r3, [r1, #16]
 800acf0:	4605      	mov	r5, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	b913      	cbnz	r3, 800acfc <_fflush_r+0x10>
 800acf6:	2500      	movs	r5, #0
 800acf8:	4628      	mov	r0, r5
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	b118      	cbz	r0, 800ad06 <_fflush_r+0x1a>
 800acfe:	6a03      	ldr	r3, [r0, #32]
 800ad00:	b90b      	cbnz	r3, 800ad06 <_fflush_r+0x1a>
 800ad02:	f7fe f9f9 	bl	80090f8 <__sinit>
 800ad06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d0f3      	beq.n	800acf6 <_fflush_r+0xa>
 800ad0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad10:	07d0      	lsls	r0, r2, #31
 800ad12:	d404      	bmi.n	800ad1e <_fflush_r+0x32>
 800ad14:	0599      	lsls	r1, r3, #22
 800ad16:	d402      	bmi.n	800ad1e <_fflush_r+0x32>
 800ad18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad1a:	f7fe fbf8 	bl	800950e <__retarget_lock_acquire_recursive>
 800ad1e:	4628      	mov	r0, r5
 800ad20:	4621      	mov	r1, r4
 800ad22:	f7ff ff5f 	bl	800abe4 <__sflush_r>
 800ad26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad28:	07da      	lsls	r2, r3, #31
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	d4e4      	bmi.n	800acf8 <_fflush_r+0xc>
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	059b      	lsls	r3, r3, #22
 800ad32:	d4e1      	bmi.n	800acf8 <_fflush_r+0xc>
 800ad34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad36:	f7fe fbeb 	bl	8009510 <__retarget_lock_release_recursive>
 800ad3a:	e7dd      	b.n	800acf8 <_fflush_r+0xc>

0800ad3c <__swhatbuf_r>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	460c      	mov	r4, r1
 800ad40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad44:	2900      	cmp	r1, #0
 800ad46:	b096      	sub	sp, #88	@ 0x58
 800ad48:	4615      	mov	r5, r2
 800ad4a:	461e      	mov	r6, r3
 800ad4c:	da0d      	bge.n	800ad6a <__swhatbuf_r+0x2e>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad54:	f04f 0100 	mov.w	r1, #0
 800ad58:	bf14      	ite	ne
 800ad5a:	2340      	movne	r3, #64	@ 0x40
 800ad5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad60:	2000      	movs	r0, #0
 800ad62:	6031      	str	r1, [r6, #0]
 800ad64:	602b      	str	r3, [r5, #0]
 800ad66:	b016      	add	sp, #88	@ 0x58
 800ad68:	bd70      	pop	{r4, r5, r6, pc}
 800ad6a:	466a      	mov	r2, sp
 800ad6c:	f000 f848 	bl	800ae00 <_fstat_r>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	dbec      	blt.n	800ad4e <__swhatbuf_r+0x12>
 800ad74:	9901      	ldr	r1, [sp, #4]
 800ad76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad7e:	4259      	negs	r1, r3
 800ad80:	4159      	adcs	r1, r3
 800ad82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad86:	e7eb      	b.n	800ad60 <__swhatbuf_r+0x24>

0800ad88 <__smakebuf_r>:
 800ad88:	898b      	ldrh	r3, [r1, #12]
 800ad8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad8c:	079d      	lsls	r5, r3, #30
 800ad8e:	4606      	mov	r6, r0
 800ad90:	460c      	mov	r4, r1
 800ad92:	d507      	bpl.n	800ada4 <__smakebuf_r+0x1c>
 800ad94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	6123      	str	r3, [r4, #16]
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	6163      	str	r3, [r4, #20]
 800ada0:	b003      	add	sp, #12
 800ada2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada4:	ab01      	add	r3, sp, #4
 800ada6:	466a      	mov	r2, sp
 800ada8:	f7ff ffc8 	bl	800ad3c <__swhatbuf_r>
 800adac:	9f00      	ldr	r7, [sp, #0]
 800adae:	4605      	mov	r5, r0
 800adb0:	4639      	mov	r1, r7
 800adb2:	4630      	mov	r0, r6
 800adb4:	f7fd fc30 	bl	8008618 <_malloc_r>
 800adb8:	b948      	cbnz	r0, 800adce <__smakebuf_r+0x46>
 800adba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adbe:	059a      	lsls	r2, r3, #22
 800adc0:	d4ee      	bmi.n	800ada0 <__smakebuf_r+0x18>
 800adc2:	f023 0303 	bic.w	r3, r3, #3
 800adc6:	f043 0302 	orr.w	r3, r3, #2
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	e7e2      	b.n	800ad94 <__smakebuf_r+0xc>
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	6020      	str	r0, [r4, #0]
 800add2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add6:	81a3      	strh	r3, [r4, #12]
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adde:	b15b      	cbz	r3, 800adf8 <__smakebuf_r+0x70>
 800ade0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ade4:	4630      	mov	r0, r6
 800ade6:	f000 f81d 	bl	800ae24 <_isatty_r>
 800adea:	b128      	cbz	r0, 800adf8 <__smakebuf_r+0x70>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f023 0303 	bic.w	r3, r3, #3
 800adf2:	f043 0301 	orr.w	r3, r3, #1
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	89a3      	ldrh	r3, [r4, #12]
 800adfa:	431d      	orrs	r5, r3
 800adfc:	81a5      	strh	r5, [r4, #12]
 800adfe:	e7cf      	b.n	800ada0 <__smakebuf_r+0x18>

0800ae00 <_fstat_r>:
 800ae00:	b538      	push	{r3, r4, r5, lr}
 800ae02:	4d07      	ldr	r5, [pc, #28]	@ (800ae20 <_fstat_r+0x20>)
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	4608      	mov	r0, r1
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	f000 fba5 	bl	800b55c <_fstat>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	d102      	bne.n	800ae1c <_fstat_r+0x1c>
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	b103      	cbz	r3, 800ae1c <_fstat_r+0x1c>
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	bd38      	pop	{r3, r4, r5, pc}
 800ae1e:	bf00      	nop
 800ae20:	20006f04 	.word	0x20006f04

0800ae24 <_isatty_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4d06      	ldr	r5, [pc, #24]	@ (800ae40 <_isatty_r+0x1c>)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4604      	mov	r4, r0
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	602b      	str	r3, [r5, #0]
 800ae30:	f000 fba4 	bl	800b57c <_isatty>
 800ae34:	1c43      	adds	r3, r0, #1
 800ae36:	d102      	bne.n	800ae3e <_isatty_r+0x1a>
 800ae38:	682b      	ldr	r3, [r5, #0]
 800ae3a:	b103      	cbz	r3, 800ae3e <_isatty_r+0x1a>
 800ae3c:	6023      	str	r3, [r4, #0]
 800ae3e:	bd38      	pop	{r3, r4, r5, pc}
 800ae40:	20006f04 	.word	0x20006f04

0800ae44 <__assert_func>:
 800ae44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae46:	4614      	mov	r4, r2
 800ae48:	461a      	mov	r2, r3
 800ae4a:	4b09      	ldr	r3, [pc, #36]	@ (800ae70 <__assert_func+0x2c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4605      	mov	r5, r0
 800ae50:	68d8      	ldr	r0, [r3, #12]
 800ae52:	b954      	cbnz	r4, 800ae6a <__assert_func+0x26>
 800ae54:	4b07      	ldr	r3, [pc, #28]	@ (800ae74 <__assert_func+0x30>)
 800ae56:	461c      	mov	r4, r3
 800ae58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae5c:	9100      	str	r1, [sp, #0]
 800ae5e:	462b      	mov	r3, r5
 800ae60:	4905      	ldr	r1, [pc, #20]	@ (800ae78 <__assert_func+0x34>)
 800ae62:	f000 f841 	bl	800aee8 <fiprintf>
 800ae66:	f000 f851 	bl	800af0c <abort>
 800ae6a:	4b04      	ldr	r3, [pc, #16]	@ (800ae7c <__assert_func+0x38>)
 800ae6c:	e7f4      	b.n	800ae58 <__assert_func+0x14>
 800ae6e:	bf00      	nop
 800ae70:	20000944 	.word	0x20000944
 800ae74:	0800b63b 	.word	0x0800b63b
 800ae78:	08039808 	.word	0x08039808
 800ae7c:	080397fb 	.word	0x080397fb

0800ae80 <_calloc_r>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	fba1 5402 	umull	r5, r4, r1, r2
 800ae86:	b93c      	cbnz	r4, 800ae98 <_calloc_r+0x18>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	f7fd fbc5 	bl	8008618 <_malloc_r>
 800ae8e:	4606      	mov	r6, r0
 800ae90:	b928      	cbnz	r0, 800ae9e <_calloc_r+0x1e>
 800ae92:	2600      	movs	r6, #0
 800ae94:	4630      	mov	r0, r6
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	220c      	movs	r2, #12
 800ae9a:	6002      	str	r2, [r0, #0]
 800ae9c:	e7f9      	b.n	800ae92 <_calloc_r+0x12>
 800ae9e:	462a      	mov	r2, r5
 800aea0:	4621      	mov	r1, r4
 800aea2:	f7fe faa7 	bl	80093f4 <memset>
 800aea6:	e7f5      	b.n	800ae94 <_calloc_r+0x14>

0800aea8 <__ascii_mbtowc>:
 800aea8:	b082      	sub	sp, #8
 800aeaa:	b901      	cbnz	r1, 800aeae <__ascii_mbtowc+0x6>
 800aeac:	a901      	add	r1, sp, #4
 800aeae:	b142      	cbz	r2, 800aec2 <__ascii_mbtowc+0x1a>
 800aeb0:	b14b      	cbz	r3, 800aec6 <__ascii_mbtowc+0x1e>
 800aeb2:	7813      	ldrb	r3, [r2, #0]
 800aeb4:	600b      	str	r3, [r1, #0]
 800aeb6:	7812      	ldrb	r2, [r2, #0]
 800aeb8:	1e10      	subs	r0, r2, #0
 800aeba:	bf18      	it	ne
 800aebc:	2001      	movne	r0, #1
 800aebe:	b002      	add	sp, #8
 800aec0:	4770      	bx	lr
 800aec2:	4610      	mov	r0, r2
 800aec4:	e7fb      	b.n	800aebe <__ascii_mbtowc+0x16>
 800aec6:	f06f 0001 	mvn.w	r0, #1
 800aeca:	e7f8      	b.n	800aebe <__ascii_mbtowc+0x16>

0800aecc <__ascii_wctomb>:
 800aecc:	4603      	mov	r3, r0
 800aece:	4608      	mov	r0, r1
 800aed0:	b141      	cbz	r1, 800aee4 <__ascii_wctomb+0x18>
 800aed2:	2aff      	cmp	r2, #255	@ 0xff
 800aed4:	d904      	bls.n	800aee0 <__ascii_wctomb+0x14>
 800aed6:	228a      	movs	r2, #138	@ 0x8a
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	f04f 30ff 	mov.w	r0, #4294967295
 800aede:	4770      	bx	lr
 800aee0:	700a      	strb	r2, [r1, #0]
 800aee2:	2001      	movs	r0, #1
 800aee4:	4770      	bx	lr
	...

0800aee8 <fiprintf>:
 800aee8:	b40e      	push	{r1, r2, r3}
 800aeea:	b503      	push	{r0, r1, lr}
 800aeec:	4601      	mov	r1, r0
 800aeee:	ab03      	add	r3, sp, #12
 800aef0:	4805      	ldr	r0, [pc, #20]	@ (800af08 <fiprintf+0x20>)
 800aef2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aef6:	6800      	ldr	r0, [r0, #0]
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	f7ff fd5b 	bl	800a9b4 <_vfiprintf_r>
 800aefe:	b002      	add	sp, #8
 800af00:	f85d eb04 	ldr.w	lr, [sp], #4
 800af04:	b003      	add	sp, #12
 800af06:	4770      	bx	lr
 800af08:	20000944 	.word	0x20000944

0800af0c <abort>:
 800af0c:	b508      	push	{r3, lr}
 800af0e:	2006      	movs	r0, #6
 800af10:	f000 f82c 	bl	800af6c <raise>
 800af14:	2001      	movs	r0, #1
 800af16:	f000 fb59 	bl	800b5cc <_exit>

0800af1a <_raise_r>:
 800af1a:	291f      	cmp	r1, #31
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	4605      	mov	r5, r0
 800af20:	460c      	mov	r4, r1
 800af22:	d904      	bls.n	800af2e <_raise_r+0x14>
 800af24:	2316      	movs	r3, #22
 800af26:	6003      	str	r3, [r0, #0]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295
 800af2c:	bd38      	pop	{r3, r4, r5, pc}
 800af2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af30:	b112      	cbz	r2, 800af38 <_raise_r+0x1e>
 800af32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af36:	b94b      	cbnz	r3, 800af4c <_raise_r+0x32>
 800af38:	4628      	mov	r0, r5
 800af3a:	f000 f831 	bl	800afa0 <_getpid_r>
 800af3e:	4622      	mov	r2, r4
 800af40:	4601      	mov	r1, r0
 800af42:	4628      	mov	r0, r5
 800af44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af48:	f000 b818 	b.w	800af7c <_kill_r>
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d00a      	beq.n	800af66 <_raise_r+0x4c>
 800af50:	1c59      	adds	r1, r3, #1
 800af52:	d103      	bne.n	800af5c <_raise_r+0x42>
 800af54:	2316      	movs	r3, #22
 800af56:	6003      	str	r3, [r0, #0]
 800af58:	2001      	movs	r0, #1
 800af5a:	e7e7      	b.n	800af2c <_raise_r+0x12>
 800af5c:	2100      	movs	r1, #0
 800af5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af62:	4620      	mov	r0, r4
 800af64:	4798      	blx	r3
 800af66:	2000      	movs	r0, #0
 800af68:	e7e0      	b.n	800af2c <_raise_r+0x12>
	...

0800af6c <raise>:
 800af6c:	4b02      	ldr	r3, [pc, #8]	@ (800af78 <raise+0xc>)
 800af6e:	4601      	mov	r1, r0
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	f7ff bfd2 	b.w	800af1a <_raise_r>
 800af76:	bf00      	nop
 800af78:	20000944 	.word	0x20000944

0800af7c <_kill_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d07      	ldr	r5, [pc, #28]	@ (800af9c <_kill_r+0x20>)
 800af80:	2300      	movs	r3, #0
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	4611      	mov	r1, r2
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	f000 faff 	bl	800b58c <_kill>
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	d102      	bne.n	800af98 <_kill_r+0x1c>
 800af92:	682b      	ldr	r3, [r5, #0]
 800af94:	b103      	cbz	r3, 800af98 <_kill_r+0x1c>
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	bf00      	nop
 800af9c:	20006f04 	.word	0x20006f04

0800afa0 <_getpid_r>:
 800afa0:	f000 bae4 	b.w	800b56c <_getpid>

0800afa4 <expf>:
 800afa4:	b508      	push	{r3, lr}
 800afa6:	ed2d 8b02 	vpush	{d8}
 800afaa:	eef0 8a40 	vmov.f32	s17, s0
 800afae:	f000 f8b5 	bl	800b11c <__ieee754_expf>
 800afb2:	eeb0 8a40 	vmov.f32	s16, s0
 800afb6:	eeb0 0a68 	vmov.f32	s0, s17
 800afba:	f000 f875 	bl	800b0a8 <finitef>
 800afbe:	b160      	cbz	r0, 800afda <expf+0x36>
 800afc0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800b000 <expf+0x5c>
 800afc4:	eef4 8ae7 	vcmpe.f32	s17, s15
 800afc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afcc:	dd0a      	ble.n	800afe4 <expf+0x40>
 800afce:	f7fe fa73 	bl	80094b8 <__errno>
 800afd2:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800b004 <expf+0x60>
 800afd6:	2322      	movs	r3, #34	@ 0x22
 800afd8:	6003      	str	r3, [r0, #0]
 800afda:	eeb0 0a48 	vmov.f32	s0, s16
 800afde:	ecbd 8b02 	vpop	{d8}
 800afe2:	bd08      	pop	{r3, pc}
 800afe4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b008 <expf+0x64>
 800afe8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800afec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff0:	d5f3      	bpl.n	800afda <expf+0x36>
 800aff2:	f7fe fa61 	bl	80094b8 <__errno>
 800aff6:	2322      	movs	r3, #34	@ 0x22
 800aff8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800b00c <expf+0x68>
 800affc:	6003      	str	r3, [r0, #0]
 800affe:	e7ec      	b.n	800afda <expf+0x36>
 800b000:	42b17217 	.word	0x42b17217
 800b004:	7f800000 	.word	0x7f800000
 800b008:	c2cff1b5 	.word	0xc2cff1b5
 800b00c:	00000000 	.word	0x00000000

0800b010 <log10f>:
 800b010:	b508      	push	{r3, lr}
 800b012:	ed2d 8b02 	vpush	{d8}
 800b016:	eeb0 8a40 	vmov.f32	s16, s0
 800b01a:	f000 fa3f 	bl	800b49c <__ieee754_log10f>
 800b01e:	eeb4 8a48 	vcmp.f32	s16, s16
 800b022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b026:	d60f      	bvs.n	800b048 <log10f+0x38>
 800b028:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b030:	d80a      	bhi.n	800b048 <log10f+0x38>
 800b032:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b03a:	d108      	bne.n	800b04e <log10f+0x3e>
 800b03c:	f7fe fa3c 	bl	80094b8 <__errno>
 800b040:	2322      	movs	r3, #34	@ 0x22
 800b042:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b064 <log10f+0x54>
 800b046:	6003      	str	r3, [r0, #0]
 800b048:	ecbd 8b02 	vpop	{d8}
 800b04c:	bd08      	pop	{r3, pc}
 800b04e:	f7fe fa33 	bl	80094b8 <__errno>
 800b052:	ecbd 8b02 	vpop	{d8}
 800b056:	2321      	movs	r3, #33	@ 0x21
 800b058:	6003      	str	r3, [r0, #0]
 800b05a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b05e:	4802      	ldr	r0, [pc, #8]	@ (800b068 <log10f+0x58>)
 800b060:	f000 b82c 	b.w	800b0bc <nanf>
 800b064:	ff800000 	.word	0xff800000
 800b068:	0800b63b 	.word	0x0800b63b

0800b06c <sqrtf>:
 800b06c:	b508      	push	{r3, lr}
 800b06e:	ed2d 8b02 	vpush	{d8}
 800b072:	eeb0 8a40 	vmov.f32	s16, s0
 800b076:	f000 f84d 	bl	800b114 <__ieee754_sqrtf>
 800b07a:	eeb4 8a48 	vcmp.f32	s16, s16
 800b07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b082:	d60c      	bvs.n	800b09e <sqrtf+0x32>
 800b084:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b0a4 <sqrtf+0x38>
 800b088:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b090:	d505      	bpl.n	800b09e <sqrtf+0x32>
 800b092:	f7fe fa11 	bl	80094b8 <__errno>
 800b096:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b09a:	2321      	movs	r3, #33	@ 0x21
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	ecbd 8b02 	vpop	{d8}
 800b0a2:	bd08      	pop	{r3, pc}
 800b0a4:	00000000 	.word	0x00000000

0800b0a8 <finitef>:
 800b0a8:	ee10 3a10 	vmov	r3, s0
 800b0ac:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b0b0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b0b4:	bfac      	ite	ge
 800b0b6:	2000      	movge	r0, #0
 800b0b8:	2001      	movlt	r0, #1
 800b0ba:	4770      	bx	lr

0800b0bc <nanf>:
 800b0bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b0c4 <nanf+0x8>
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	7fc00000 	.word	0x7fc00000

0800b0c8 <with_errnof>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	ed2d 8b02 	vpush	{d8}
 800b0ce:	eeb0 8a40 	vmov.f32	s16, s0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	f7fe f9f0 	bl	80094b8 <__errno>
 800b0d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b0dc:	ecbd 8b02 	vpop	{d8}
 800b0e0:	6004      	str	r4, [r0, #0]
 800b0e2:	bd10      	pop	{r4, pc}

0800b0e4 <xflowf>:
 800b0e4:	b130      	cbz	r0, 800b0f4 <xflowf+0x10>
 800b0e6:	eef1 7a40 	vneg.f32	s15, s0
 800b0ea:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b0ee:	2022      	movs	r0, #34	@ 0x22
 800b0f0:	f7ff bfea 	b.w	800b0c8 <with_errnof>
 800b0f4:	eef0 7a40 	vmov.f32	s15, s0
 800b0f8:	e7f7      	b.n	800b0ea <xflowf+0x6>
	...

0800b0fc <__math_uflowf>:
 800b0fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b104 <__math_uflowf+0x8>
 800b100:	f7ff bff0 	b.w	800b0e4 <xflowf>
 800b104:	10000000 	.word	0x10000000

0800b108 <__math_oflowf>:
 800b108:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b110 <__math_oflowf+0x8>
 800b10c:	f7ff bfea 	b.w	800b0e4 <xflowf>
 800b110:	70000000 	.word	0x70000000

0800b114 <__ieee754_sqrtf>:
 800b114:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b118:	4770      	bx	lr
	...

0800b11c <__ieee754_expf>:
 800b11c:	ee10 2a10 	vmov	r2, s0
 800b120:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800b124:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b128:	d902      	bls.n	800b130 <__ieee754_expf+0x14>
 800b12a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b12e:	4770      	bx	lr
 800b130:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800b134:	d106      	bne.n	800b144 <__ieee754_expf+0x28>
 800b136:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800b270 <__ieee754_expf+0x154>
 800b13a:	2900      	cmp	r1, #0
 800b13c:	bf18      	it	ne
 800b13e:	eeb0 0a67 	vmovne.f32	s0, s15
 800b142:	4770      	bx	lr
 800b144:	484b      	ldr	r0, [pc, #300]	@ (800b274 <__ieee754_expf+0x158>)
 800b146:	4282      	cmp	r2, r0
 800b148:	dd02      	ble.n	800b150 <__ieee754_expf+0x34>
 800b14a:	2000      	movs	r0, #0
 800b14c:	f7ff bfdc 	b.w	800b108 <__math_oflowf>
 800b150:	2a00      	cmp	r2, #0
 800b152:	da05      	bge.n	800b160 <__ieee754_expf+0x44>
 800b154:	4a48      	ldr	r2, [pc, #288]	@ (800b278 <__ieee754_expf+0x15c>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d902      	bls.n	800b160 <__ieee754_expf+0x44>
 800b15a:	2000      	movs	r0, #0
 800b15c:	f7ff bfce 	b.w	800b0fc <__math_uflowf>
 800b160:	4a46      	ldr	r2, [pc, #280]	@ (800b27c <__ieee754_expf+0x160>)
 800b162:	4293      	cmp	r3, r2
 800b164:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800b168:	d952      	bls.n	800b210 <__ieee754_expf+0xf4>
 800b16a:	4a45      	ldr	r2, [pc, #276]	@ (800b280 <__ieee754_expf+0x164>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800b172:	d834      	bhi.n	800b1de <__ieee754_expf+0xc2>
 800b174:	4b43      	ldr	r3, [pc, #268]	@ (800b284 <__ieee754_expf+0x168>)
 800b176:	4413      	add	r3, r2
 800b178:	ed93 7a00 	vldr	s14, [r3]
 800b17c:	4b42      	ldr	r3, [pc, #264]	@ (800b288 <__ieee754_expf+0x16c>)
 800b17e:	4413      	add	r3, r2
 800b180:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b184:	f1c1 0201 	rsb	r2, r1, #1
 800b188:	edd3 7a00 	vldr	s15, [r3]
 800b18c:	1a52      	subs	r2, r2, r1
 800b18e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b192:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b196:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800b28c <__ieee754_expf+0x170>
 800b19a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b290 <__ieee754_expf+0x174>
 800b19e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b1a2:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800b294 <__ieee754_expf+0x178>
 800b1a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1aa:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b298 <__ieee754_expf+0x17c>
 800b1ae:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b1b2:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800b29c <__ieee754_expf+0x180>
 800b1b6:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1ba:	eef0 6a40 	vmov.f32	s13, s0
 800b1be:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b1c2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800b1c6:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b1ca:	bb92      	cbnz	r2, 800b232 <__ieee754_expf+0x116>
 800b1cc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b1d0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b1d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b1d8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b1dc:	4770      	bx	lr
 800b1de:	4b30      	ldr	r3, [pc, #192]	@ (800b2a0 <__ieee754_expf+0x184>)
 800b1e0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800b2a4 <__ieee754_expf+0x188>
 800b1e4:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800b2a8 <__ieee754_expf+0x18c>
 800b1e8:	4413      	add	r3, r2
 800b1ea:	edd3 7a00 	vldr	s15, [r3]
 800b1ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b1f2:	eeb0 7a40 	vmov.f32	s14, s0
 800b1f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1fa:	ee17 2a90 	vmov	r2, s15
 800b1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b202:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b206:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800b2ac <__ieee754_expf+0x190>
 800b20a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b20e:	e7be      	b.n	800b18e <__ieee754_expf+0x72>
 800b210:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800b214:	d20b      	bcs.n	800b22e <__ieee754_expf+0x112>
 800b216:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b2b0 <__ieee754_expf+0x194>
 800b21a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b21e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b226:	dd02      	ble.n	800b22e <__ieee754_expf+0x112>
 800b228:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b22c:	4770      	bx	lr
 800b22e:	2200      	movs	r2, #0
 800b230:	e7af      	b.n	800b192 <__ieee754_expf+0x76>
 800b232:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b236:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800b23a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800b23e:	bfb8      	it	lt
 800b240:	3264      	addlt	r2, #100	@ 0x64
 800b242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b246:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b24a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b24e:	ee17 3a90 	vmov	r3, s15
 800b252:	bfab      	itete	ge
 800b254:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b258:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b25c:	ee00 3a10 	vmovge	s0, r3
 800b260:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800b2b4 <__ieee754_expf+0x198>
 800b264:	bfbc      	itt	lt
 800b266:	ee00 3a10 	vmovlt	s0, r3
 800b26a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b26e:	4770      	bx	lr
 800b270:	00000000 	.word	0x00000000
 800b274:	42b17217 	.word	0x42b17217
 800b278:	42cff1b5 	.word	0x42cff1b5
 800b27c:	3eb17218 	.word	0x3eb17218
 800b280:	3f851591 	.word	0x3f851591
 800b284:	08039940 	.word	0x08039940
 800b288:	08039938 	.word	0x08039938
 800b28c:	3331bb4c 	.word	0x3331bb4c
 800b290:	b5ddea0e 	.word	0xb5ddea0e
 800b294:	388ab355 	.word	0x388ab355
 800b298:	bb360b61 	.word	0xbb360b61
 800b29c:	3e2aaaab 	.word	0x3e2aaaab
 800b2a0:	08039948 	.word	0x08039948
 800b2a4:	3fb8aa3b 	.word	0x3fb8aa3b
 800b2a8:	3f317180 	.word	0x3f317180
 800b2ac:	3717f7d1 	.word	0x3717f7d1
 800b2b0:	7149f2ca 	.word	0x7149f2ca
 800b2b4:	0d800000 	.word	0x0d800000

0800b2b8 <__ieee754_logf>:
 800b2b8:	ee10 3a10 	vmov	r3, s0
 800b2bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b2c0:	d106      	bne.n	800b2d0 <__ieee754_logf+0x18>
 800b2c2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800b45c <__ieee754_logf+0x1a4>
 800b2c6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800b460 <__ieee754_logf+0x1a8>
 800b2ca:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b2ce:	4770      	bx	lr
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	da02      	bge.n	800b2dc <__ieee754_logf+0x24>
 800b2d6:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b2da:	e7f4      	b.n	800b2c6 <__ieee754_logf+0xe>
 800b2dc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b2e0:	db02      	blt.n	800b2e8 <__ieee754_logf+0x30>
 800b2e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b2e6:	4770      	bx	lr
 800b2e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b2ec:	bfb8      	it	lt
 800b2ee:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800b464 <__ieee754_logf+0x1ac>
 800b2f2:	485d      	ldr	r0, [pc, #372]	@ (800b468 <__ieee754_logf+0x1b0>)
 800b2f4:	bfbe      	ittt	lt
 800b2f6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b2fa:	f06f 0118 	mvnlt.w	r1, #24
 800b2fe:	ee17 2a90 	vmovlt	r2, s15
 800b302:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b306:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b30a:	4410      	add	r0, r2
 800b30c:	bfa8      	it	ge
 800b30e:	2100      	movge	r1, #0
 800b310:	3b7f      	subs	r3, #127	@ 0x7f
 800b312:	440b      	add	r3, r1
 800b314:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800b318:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800b31c:	4311      	orrs	r1, r2
 800b31e:	ee00 1a10 	vmov	s0, r1
 800b322:	4952      	ldr	r1, [pc, #328]	@ (800b46c <__ieee754_logf+0x1b4>)
 800b324:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800b328:	f102 000f 	add.w	r0, r2, #15
 800b32c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b330:	4001      	ands	r1, r0
 800b332:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b336:	bb89      	cbnz	r1, 800b39c <__ieee754_logf+0xe4>
 800b338:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b340:	d10f      	bne.n	800b362 <__ieee754_logf+0xaa>
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 8087 	beq.w	800b456 <__ieee754_logf+0x19e>
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800b470 <__ieee754_logf+0x1b8>
 800b350:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800b474 <__ieee754_logf+0x1bc>
 800b354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b358:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b35c:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b360:	4770      	bx	lr
 800b362:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800b478 <__ieee754_logf+0x1c0>
 800b366:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b36a:	eee0 7a66 	vfms.f32	s15, s0, s13
 800b36e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b372:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b376:	b913      	cbnz	r3, 800b37e <__ieee754_logf+0xc6>
 800b378:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b37c:	4770      	bx	lr
 800b37e:	ee07 3a90 	vmov	s15, r3
 800b382:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b470 <__ieee754_logf+0x1b8>
 800b386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b38a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b38e:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b392:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b474 <__ieee754_logf+0x1bc>
 800b396:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b39a:	4770      	bx	lr
 800b39c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800b3a0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b3a4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800b47c <__ieee754_logf+0x1c4>
 800b3a8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800b480 <__ieee754_logf+0x1c8>
 800b3ac:	4935      	ldr	r1, [pc, #212]	@ (800b484 <__ieee754_logf+0x1cc>)
 800b3ae:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800b3b2:	4411      	add	r1, r2
 800b3b4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800b3b8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800b3bc:	430a      	orrs	r2, r1
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	ee07 3a90 	vmov	s15, r3
 800b3c4:	ee26 5a06 	vmul.f32	s10, s12, s12
 800b3c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b3cc:	ee25 7a05 	vmul.f32	s14, s10, s10
 800b3d0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800b488 <__ieee754_logf+0x1d0>
 800b3d4:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b3d8:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800b48c <__ieee754_logf+0x1d4>
 800b3dc:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b3e0:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800b490 <__ieee754_logf+0x1d8>
 800b3e4:	eee7 7a24 	vfma.f32	s15, s14, s9
 800b3e8:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800b494 <__ieee754_logf+0x1dc>
 800b3ec:	eee7 4a87 	vfma.f32	s9, s15, s14
 800b3f0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800b498 <__ieee754_logf+0x1e0>
 800b3f4:	eee4 7a87 	vfma.f32	s15, s9, s14
 800b3f8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b3fc:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b400:	dd1a      	ble.n	800b438 <__ieee754_logf+0x180>
 800b402:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b406:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b40a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b40e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b412:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b416:	b913      	cbnz	r3, 800b41e <__ieee754_logf+0x166>
 800b418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b41c:	e7ac      	b.n	800b378 <__ieee754_logf+0xc0>
 800b41e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800b470 <__ieee754_logf+0x1b8>
 800b422:	eee6 7a86 	vfma.f32	s15, s13, s12
 800b426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b42a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b42e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800b474 <__ieee754_logf+0x1bc>
 800b432:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800b436:	4770      	bx	lr
 800b438:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b43c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b440:	b913      	cbnz	r3, 800b448 <__ieee754_logf+0x190>
 800b442:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b446:	4770      	bx	lr
 800b448:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800b470 <__ieee754_logf+0x1b8>
 800b44c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b450:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b454:	e7eb      	b.n	800b42e <__ieee754_logf+0x176>
 800b456:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800b460 <__ieee754_logf+0x1a8>
 800b45a:	4770      	bx	lr
 800b45c:	cc000000 	.word	0xcc000000
 800b460:	00000000 	.word	0x00000000
 800b464:	4c000000 	.word	0x4c000000
 800b468:	004afb20 	.word	0x004afb20
 800b46c:	007ffff0 	.word	0x007ffff0
 800b470:	3717f7d1 	.word	0x3717f7d1
 800b474:	3f317180 	.word	0x3f317180
 800b478:	3eaaaaab 	.word	0x3eaaaaab
 800b47c:	3e1cd04f 	.word	0x3e1cd04f
 800b480:	3e178897 	.word	0x3e178897
 800b484:	ffcf5c30 	.word	0xffcf5c30
 800b488:	3e638e29 	.word	0x3e638e29
 800b48c:	3ecccccd 	.word	0x3ecccccd
 800b490:	3e3a3325 	.word	0x3e3a3325
 800b494:	3e924925 	.word	0x3e924925
 800b498:	3f2aaaab 	.word	0x3f2aaaab

0800b49c <__ieee754_log10f>:
 800b49c:	b508      	push	{r3, lr}
 800b49e:	ee10 3a10 	vmov	r3, s0
 800b4a2:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b4a6:	ed2d 8b02 	vpush	{d8}
 800b4aa:	d108      	bne.n	800b4be <__ieee754_log10f+0x22>
 800b4ac:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b534 <__ieee754_log10f+0x98>
 800b4b0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800b538 <__ieee754_log10f+0x9c>
 800b4b4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b4b8:	ecbd 8b02 	vpop	{d8}
 800b4bc:	bd08      	pop	{r3, pc}
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	da02      	bge.n	800b4ca <__ieee754_log10f+0x2e>
 800b4c4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b4c8:	e7f2      	b.n	800b4b0 <__ieee754_log10f+0x14>
 800b4ca:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b4ce:	db02      	blt.n	800b4d6 <__ieee754_log10f+0x3a>
 800b4d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b4d4:	e7f0      	b.n	800b4b8 <__ieee754_log10f+0x1c>
 800b4d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b4da:	bfbf      	itttt	lt
 800b4dc:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800b53c <__ieee754_log10f+0xa0>
 800b4e0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b4e4:	f06f 0118 	mvnlt.w	r1, #24
 800b4e8:	ee17 2a90 	vmovlt	r2, s15
 800b4ec:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b4f0:	bfa8      	it	ge
 800b4f2:	2100      	movge	r1, #0
 800b4f4:	3b7f      	subs	r3, #127	@ 0x7f
 800b4f6:	440b      	add	r3, r1
 800b4f8:	0fd9      	lsrs	r1, r3, #31
 800b4fa:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b506:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800b50a:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b50e:	ee00 3a10 	vmov	s0, r3
 800b512:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800b516:	f7ff fecf 	bl	800b2b8 <__ieee754_logf>
 800b51a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b540 <__ieee754_log10f+0xa4>
 800b51e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b522:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800b544 <__ieee754_log10f+0xa8>
 800b526:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b52a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800b548 <__ieee754_log10f+0xac>
 800b52e:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b532:	e7c1      	b.n	800b4b8 <__ieee754_log10f+0x1c>
 800b534:	cc000000 	.word	0xcc000000
 800b538:	00000000 	.word	0x00000000
 800b53c:	4c000000 	.word	0x4c000000
 800b540:	3ede5bd9 	.word	0x3ede5bd9
 800b544:	355427db 	.word	0x355427db
 800b548:	3e9a2080 	.word	0x3e9a2080

0800b54c <_close>:
 800b54c:	4b02      	ldr	r3, [pc, #8]	@ (800b558 <_close+0xc>)
 800b54e:	2258      	movs	r2, #88	@ 0x58
 800b550:	601a      	str	r2, [r3, #0]
 800b552:	f04f 30ff 	mov.w	r0, #4294967295
 800b556:	4770      	bx	lr
 800b558:	20006f04 	.word	0x20006f04

0800b55c <_fstat>:
 800b55c:	4b02      	ldr	r3, [pc, #8]	@ (800b568 <_fstat+0xc>)
 800b55e:	2258      	movs	r2, #88	@ 0x58
 800b560:	601a      	str	r2, [r3, #0]
 800b562:	f04f 30ff 	mov.w	r0, #4294967295
 800b566:	4770      	bx	lr
 800b568:	20006f04 	.word	0x20006f04

0800b56c <_getpid>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	@ (800b578 <_getpid+0xc>)
 800b56e:	2258      	movs	r2, #88	@ 0x58
 800b570:	601a      	str	r2, [r3, #0]
 800b572:	f04f 30ff 	mov.w	r0, #4294967295
 800b576:	4770      	bx	lr
 800b578:	20006f04 	.word	0x20006f04

0800b57c <_isatty>:
 800b57c:	4b02      	ldr	r3, [pc, #8]	@ (800b588 <_isatty+0xc>)
 800b57e:	2258      	movs	r2, #88	@ 0x58
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	2000      	movs	r0, #0
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	20006f04 	.word	0x20006f04

0800b58c <_kill>:
 800b58c:	4b02      	ldr	r3, [pc, #8]	@ (800b598 <_kill+0xc>)
 800b58e:	2258      	movs	r2, #88	@ 0x58
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	f04f 30ff 	mov.w	r0, #4294967295
 800b596:	4770      	bx	lr
 800b598:	20006f04 	.word	0x20006f04

0800b59c <_lseek>:
 800b59c:	4b02      	ldr	r3, [pc, #8]	@ (800b5a8 <_lseek+0xc>)
 800b59e:	2258      	movs	r2, #88	@ 0x58
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a6:	4770      	bx	lr
 800b5a8:	20006f04 	.word	0x20006f04

0800b5ac <_read>:
 800b5ac:	4b02      	ldr	r3, [pc, #8]	@ (800b5b8 <_read+0xc>)
 800b5ae:	2258      	movs	r2, #88	@ 0x58
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b6:	4770      	bx	lr
 800b5b8:	20006f04 	.word	0x20006f04

0800b5bc <_write>:
 800b5bc:	4b02      	ldr	r3, [pc, #8]	@ (800b5c8 <_write+0xc>)
 800b5be:	2258      	movs	r2, #88	@ 0x58
 800b5c0:	601a      	str	r2, [r3, #0]
 800b5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c6:	4770      	bx	lr
 800b5c8:	20006f04 	.word	0x20006f04

0800b5cc <_exit>:
 800b5cc:	e7fe      	b.n	800b5cc <_exit>
	...

0800b5d0 <_init>:
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d2:	bf00      	nop
 800b5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d6:	bc08      	pop	{r3}
 800b5d8:	469e      	mov	lr, r3
 800b5da:	4770      	bx	lr

0800b5dc <_fini>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	bf00      	nop
 800b5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e2:	bc08      	pop	{r3}
 800b5e4:	469e      	mov	lr, r3
 800b5e6:	4770      	bx	lr
