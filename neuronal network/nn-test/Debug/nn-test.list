
nn-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c930  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002e390  0800cb20  0800cb20  0000db20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803aeb0  0803aeb0  0003ccf0  2**0
                  CONTENTS
  4 .ARM          00000008  0803aeb0  0803aeb0  0003beb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803aeb8  0803aeb8  0003ccf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803aeb8  0803aeb8  0003beb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803aebc  0803aebc  0003bebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000cf0  20000000  0803aec0  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f9b4  20000cf0  0803bbb0  0003ccf0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200106a4  0803bbb0  0003d6a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003ccf0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a543  00000000  00000000  0003cd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003da0  00000000  00000000  00057261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0005b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8d  00000000  00000000  0005c438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264e4  00000000  00000000  0005d2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b654  00000000  00000000  000837a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed6f2  00000000  00000000  0009edfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000101  00000000  00000000  0018c4ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b4  00000000  00000000  0018c5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00192aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003ac5  00000000  00000000  00192b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000080  00000000  00000000  001965c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000cf0 	.word	0x20000cf0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800caf8 	.word	0x0800caf8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000cf4 	.word	0x20000cf4
 800021c:	0800caf8 	.word	0x0800caf8

08000220 <arm_bitreversal_32>:
 8000220:	1c4b      	adds	r3, r1, #1
 8000222:	2b01      	cmp	r3, #1
 8000224:	bf98      	it	ls
 8000226:	4770      	bxls	lr
 8000228:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800022c:	1c91      	adds	r1, r2, #2
 800022e:	089b      	lsrs	r3, r3, #2

08000230 <arm_bitreversal_32_0>:
 8000230:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000234:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000238:	880a      	ldrh	r2, [r1, #0]
 800023a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800023e:	4480      	add	r8, r0
 8000240:	4481      	add	r9, r0
 8000242:	4402      	add	r2, r0
 8000244:	4484      	add	ip, r0
 8000246:	f8d9 7000 	ldr.w	r7, [r9]
 800024a:	f8d8 6000 	ldr.w	r6, [r8]
 800024e:	6815      	ldr	r5, [r2, #0]
 8000250:	f8dc 4000 	ldr.w	r4, [ip]
 8000254:	f8c9 6000 	str.w	r6, [r9]
 8000258:	f8c8 7000 	str.w	r7, [r8]
 800025c:	f8cc 5000 	str.w	r5, [ip]
 8000260:	6014      	str	r4, [r2, #0]
 8000262:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000266:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800026a:	6855      	ldr	r5, [r2, #4]
 800026c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000270:	f8c9 6004 	str.w	r6, [r9, #4]
 8000274:	f8c8 7004 	str.w	r7, [r8, #4]
 8000278:	f8cc 5004 	str.w	r5, [ip, #4]
 800027c:	6054      	str	r4, [r2, #4]
 800027e:	3108      	adds	r1, #8
 8000280:	3b01      	subs	r3, #1
 8000282:	d1d5      	bne.n	8000230 <arm_bitreversal_32_0>
 8000284:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000288:	4770      	bx	lr

0800028a <arm_bitreversal_16>:
 800028a:	1c4b      	adds	r3, r1, #1
 800028c:	2b01      	cmp	r3, #1
 800028e:	bf98      	it	ls
 8000290:	4770      	bxls	lr
 8000292:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	1c91      	adds	r1, r2, #2
 8000298:	089b      	lsrs	r3, r3, #2

0800029a <arm_bitreversal_16_0>:
 800029a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800029e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002a2:	880a      	ldrh	r2, [r1, #0]
 80002a4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002a8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002ac:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002b0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002b4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002b8:	f8d9 7000 	ldr.w	r7, [r9]
 80002bc:	f8d8 6000 	ldr.w	r6, [r8]
 80002c0:	6815      	ldr	r5, [r2, #0]
 80002c2:	f8dc 4000 	ldr.w	r4, [ip]
 80002c6:	f8c9 6000 	str.w	r6, [r9]
 80002ca:	f8c8 7000 	str.w	r7, [r8]
 80002ce:	f8cc 5000 	str.w	r5, [ip]
 80002d2:	6014      	str	r4, [r2, #0]
 80002d4:	3108      	adds	r1, #8
 80002d6:	3b01      	subs	r3, #1
 80002d8:	d1df      	bne.n	800029a <arm_bitreversal_16_0>
 80002da:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmpun>:
 8000c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x10>
 8000c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c4a:	d10a      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x20>
 8000c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0001 	mov.w	r0, #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2iz>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c70:	d215      	bcs.n	8000c9e <__aeabi_d2iz+0x36>
 8000c72:	d511      	bpl.n	8000c98 <__aeabi_d2iz+0x30>
 8000c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d912      	bls.n	8000ca4 <__aeabi_d2iz+0x3c>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	4770      	bx	lr
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	4770      	bx	lr
 8000c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ca2:	d105      	bne.n	8000cb0 <__aeabi_d2iz+0x48>
 8000ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	bf08      	it	eq
 8000caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <Preprocessing_Init>:
//    }
//
//    return 0; // Erfolg
//}

void Preprocessing_Init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, 1024);
 8000fac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fb0:	4817      	ldr	r0, [pc, #92]	@ (8001010 <Preprocessing_Init+0x68>)
 8000fb2:	f004 fb29 	bl	8005608 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <Preprocessing_Init+0x6c>)
 8000fb8:	4a15      	ldr	r2, [pc, #84]	@ (8001010 <Preprocessing_Init+0x68>)
 8000fba:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 8000fbc:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <Preprocessing_Init+0x6c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <Preprocessing_Init+0x6c>)
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <Preprocessing_Init+0x70>)
 8000fc6:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = 16000;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <Preprocessing_Init+0x6c>)
 8000fca:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000fce:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = 1024;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <Preprocessing_Init+0x6c>)
 8000fd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd6:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = 1024;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <Preprocessing_Init+0x6c>)
 8000fda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fde:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = mel_spectrogram_column_buffer;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <Preprocessing_Init+0x6c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <Preprocessing_Init+0x74>)
 8000fe4:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <Preprocessing_Init+0x78>)
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	@ (8001024 <Preprocessing_Init+0x7c>)
 8000fea:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = (uint32_t *) melFiltersStopIndices_1024_30;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <Preprocessing_Init+0x78>)
 8000fee:	4a0e      	ldr	r2, [pc, #56]	@ (8001028 <Preprocessing_Init+0x80>)
 8000ff0:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = (float32_t *) melFilterLut_1024_30;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <Preprocessing_Init+0x78>)
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800102c <Preprocessing_Init+0x84>)
 8000ff6:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels       = 30;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <Preprocessing_Init+0x78>)
 8000ffa:	221e      	movs	r2, #30
 8000ffc:	611a      	str	r2, [r3, #16]

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <Preprocessing_Init+0x88>)
 8001000:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <Preprocessing_Init+0x6c>)
 8001002:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <Preprocessing_Init+0x88>)
 8001006:	4a06      	ldr	r2, [pc, #24]	@ (8001020 <Preprocessing_Init+0x78>)
 8001008:	605a      	str	r2, [r3, #4]
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000d0c 	.word	0x20000d0c
 8001014:	20000d24 	.word	0x20000d24
 8001018:	08014c34 	.word	0x08014c34
 800101c:	20000d78 	.word	0x20000d78
 8001020:	20000d48 	.word	0x20000d48
 8001024:	08015c34 	.word	0x08015c34
 8001028:	08015cac 	.word	0x08015cac
 800102c:	08015d24 	.word	0x08015d24
 8001030:	20000d40 	.word	0x20000d40

08001034 <frame_subsamples>:

// splits one subsample in 1024 samples long, 512 samples overlapping frames
void frame_subsamples(float32_t* subsample, int subsample_length) {
 8001034:	b580      	push	{r7, lr}
 8001036:	f5ad 3d00 	sub.w	sp, sp, #131072	@ 0x20000
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	f107 0318 	add.w	r3, r7, #24
 8001042:	f843 0c14 	str.w	r0, [r3, #-20]
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	f843 1c18 	str.w	r1, [r3, #-24]
	float32_t frames[N_FRAMES_PER_SUBSAMPLE][FRAME_LENGTH];

    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 800104e:	2300      	movs	r3, #0
 8001050:	4a3c      	ldr	r2, [pc, #240]	@ (8001144 <frame_subsamples+0x110>)
 8001052:	443a      	add	r2, r7
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e069      	b.n	800112c <frame_subsamples+0xf8>
        int start_index = i * HOP_LENGTH;
 8001058:	4b3a      	ldr	r3, [pc, #232]	@ (8001144 <frame_subsamples+0x110>)
 800105a:	443b      	add	r3, r7
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	025b      	lsls	r3, r3, #9
 8001060:	4a39      	ldr	r2, [pc, #228]	@ (8001148 <frame_subsamples+0x114>)
 8001062:	443a      	add	r2, r7
 8001064:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < FRAME_LENGTH; j++) {
 8001066:	2300      	movs	r3, #0
 8001068:	4a38      	ldr	r2, [pc, #224]	@ (800114c <frame_subsamples+0x118>)
 800106a:	443a      	add	r2, r7
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e042      	b.n	80010f6 <frame_subsamples+0xc2>
            if (start_index + j < subsample_length) {
 8001070:	4b35      	ldr	r3, [pc, #212]	@ (8001148 <frame_subsamples+0x114>)
 8001072:	443b      	add	r3, r7
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b35      	ldr	r3, [pc, #212]	@ (800114c <frame_subsamples+0x118>)
 8001078:	443b      	add	r3, r7
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4413      	add	r3, r2
 800107e:	f107 0218 	add.w	r2, r7, #24
 8001082:	f852 2c18 	ldr.w	r2, [r2, #-24]
 8001086:	429a      	cmp	r2, r3
 8001088:	dd1d      	ble.n	80010c6 <frame_subsamples+0x92>
                frames[i][j] = subsample[start_index + j];
 800108a:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <frame_subsamples+0x114>)
 800108c:	443b      	add	r3, r7
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <frame_subsamples+0x118>)
 8001092:	443b      	add	r3, r7
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	f107 0218 	add.w	r2, r7, #24
 800109e:	f852 2c14 	ldr.w	r2, [r2, #-20]
 80010a2:	4413      	add	r3, r2
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	4618      	mov	r0, r3
 80010ac:	4b25      	ldr	r3, [pc, #148]	@ (8001144 <frame_subsamples+0x110>)
 80010ae:	443b      	add	r3, r7
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	0299      	lsls	r1, r3, #10
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <frame_subsamples+0x118>)
 80010b6:	443b      	add	r3, r7
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	440b      	add	r3, r1
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4403      	add	r3, r0
 80010c0:	3b0c      	subs	r3, #12
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	e010      	b.n	80010e8 <frame_subsamples+0xb4>
            } else {
                frames[i][j] = 0.0f; // pad with zeros
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <frame_subsamples+0x110>)
 80010ce:	443b      	add	r3, r7
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	029a      	lsls	r2, r3, #10
 80010d4:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <frame_subsamples+0x118>)
 80010d6:	443b      	add	r3, r7
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	3b0c      	subs	r3, #12
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < FRAME_LENGTH; j++) {
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <frame_subsamples+0x118>)
 80010ea:	443b      	add	r3, r7
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	4a16      	ldr	r2, [pc, #88]	@ (800114c <frame_subsamples+0x118>)
 80010f2:	443a      	add	r2, r7
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <frame_subsamples+0x118>)
 80010f8:	443b      	add	r3, r7
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001100:	dbb6      	blt.n	8001070 <frame_subsamples+0x3c>
            }
        }
        preprocess_frame(frames[i]);
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <frame_subsamples+0x11c>)
 8001104:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 8001108:	f103 0318 	add.w	r3, r3, #24
 800110c:	443b      	add	r3, r7
 800110e:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <frame_subsamples+0x110>)
 8001110:	443a      	add	r2, r7
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	0312      	lsls	r2, r2, #12
 8001116:	4413      	add	r3, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f81b 	bl	8001154 <preprocess_frame>
    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <frame_subsamples+0x110>)
 8001120:	443b      	add	r3, r7
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <frame_subsamples+0x110>)
 8001128:	443a      	add	r2, r7
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <frame_subsamples+0x110>)
 800112e:	443b      	add	r3, r7
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b1f      	cmp	r3, #31
 8001134:	dd90      	ble.n	8001058 <frame_subsamples+0x24>
    }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	f507 3700 	add.w	r7, r7, #131072	@ 0x20000
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	00020014 	.word	0x00020014
 8001148:	0002000c 	.word	0x0002000c
 800114c:	00020010 	.word	0x00020010
 8001150:	fffdfff4 	.word	0xfffdfff4

08001154 <preprocess_frame>:

// frame = 1 spectrogram column = 1024 samples
void preprocess_frame(float32_t* frame) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]


	// Create a Mel-scaled spectrogram column
	MelSpectrogramColumn(&S_MelSpectr, frame, mel_spectrogram_column_buffer);
 800115c:	4a25      	ldr	r2, [pc, #148]	@ (80011f4 <preprocess_frame+0xa0>)
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	4825      	ldr	r0, [pc, #148]	@ (80011f8 <preprocess_frame+0xa4>)
 8001162:	f003 ff41 	bl	8004fe8 <MelSpectrogramColumn>

	// Reshape and copy into output spectrogram column
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	e010      	b.n	800118e <preprocess_frame+0x3a>
		spectrogram[i * SPECTROGRAM_COLS + spectrogram_col_index] = mel_spectrogram_column_buffer[i];
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	015a      	lsls	r2, r3, #5
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <preprocess_frame+0xa8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4413      	add	r3, r2
 8001176:	491f      	ldr	r1, [pc, #124]	@ (80011f4 <preprocess_frame+0xa0>)
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	440a      	add	r2, r1
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	491f      	ldr	r1, [pc, #124]	@ (8001200 <preprocess_frame+0xac>)
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b1d      	cmp	r3, #29
 8001192:	d9eb      	bls.n	800116c <preprocess_frame+0x18>
	}

    spectrogram_col_index++;
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <preprocess_frame+0xa8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a18      	ldr	r2, [pc, #96]	@ (80011fc <preprocess_frame+0xa8>)
 800119c:	6013      	str	r3, [r2, #0]

    // If we have a full spectrogram (32 columns), process it
    if (spectrogram_col_index == SPECTROGRAM_COLS) {
 800119e:	4b17      	ldr	r3, [pc, #92]	@ (80011fc <preprocess_frame+0xa8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d122      	bne.n	80011ec <preprocess_frame+0x98>
        // Convert power spectrogram to dB
        PowerToDb(spectrogram);
 80011a6:	4816      	ldr	r0, [pc, #88]	@ (8001200 <preprocess_frame+0xac>)
 80011a8:	f000 f830 	bl	800120c <PowerToDb>

        // Run the neural network classification

        if (run_nn_classification(spectrogram, aiOutData) == 0) {
 80011ac:	4915      	ldr	r1, [pc, #84]	@ (8001204 <preprocess_frame+0xb0>)
 80011ae:	4814      	ldr	r0, [pc, #80]	@ (8001200 <preprocess_frame+0xac>)
 80011b0:	f000 f8ee 	bl	8001390 <run_nn_classification>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d115      	bne.n	80011e6 <preprocess_frame+0x92>
        	/* Output results */
			for (uint32_t i = 0; i < AI_NETWORK_1_OUT_1_SIZE; i++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	e00f      	b.n	80011e0 <preprocess_frame+0x8c>
			  printf("%8.6f ", aiOutData[i]);
 80011c0:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <preprocess_frame+0xb0>)
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fa44 	bl	8000658 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <preprocess_frame+0xb4>)
 80011d6:	f009 fa5b 	bl	800a690 <iprintf>
			for (uint32_t i = 0; i < AI_NETWORK_1_OUT_1_SIZE; i++) {
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d9ec      	bls.n	80011c0 <preprocess_frame+0x6c>
			}
        }

        // Reset the column index for the next spectrogram
        spectrogram_col_index = 0;
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <preprocess_frame+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
    }
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000d78 	.word	0x20000d78
 80011f8:	20000d40 	.word	0x20000d40
 80011fc:	2000fe10 	.word	0x2000fe10
 8001200:	2000eefc 	.word	0x2000eefc
 8001204:	2000fdfc 	.word	0x2000fdfc
 8001208:	0800cb20 	.word	0x0800cb20

0800120c <PowerToDb>:

void PowerToDb(float32_t *spectrogram)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  float32_t max_mel_energy = FLT_MIN; // Minimaler positiver Wert, um sicherzustellen, dass er überschrieben wird
 8001214:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001218:	61fb      	str	r3, [r7, #28]
  uint32_t rows = 30;
 800121a:	231e      	movs	r3, #30
 800121c:	617b      	str	r3, [r7, #20]
  uint32_t cols = 32;
 800121e:	2320      	movs	r3, #32
 8001220:	613b      	str	r3, [r7, #16]
  uint32_t i, total_elements = rows * cols;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	60fb      	str	r3, [r7, #12]


  // Find MelEnergy Scaling factor
  for (i = 0; i < total_elements; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	e015      	b.n	800125e <PowerToDb+0x52>
    if (spectrogram[i] > max_mel_energy) {
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124a:	d505      	bpl.n	8001258 <PowerToDb+0x4c>
      max_mel_energy = spectrogram[i];
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < total_elements; i++) {
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	3301      	adds	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	429a      	cmp	r2, r3
 8001264:	d3e5      	bcc.n	8001232 <PowerToDb+0x26>
    }
  }

  // Check if max_mel_energy is zero to avoid division by zero
  if (max_mel_energy == 0.0f) {
 8001266:	edd7 7a07 	vldr	s15, [r7, #28]
 800126a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d110      	bne.n	8001296 <PowerToDb+0x8a>
    // If max_mel_energy is zero, the spectrogram is all zeros, and we can directly set the output to -80 dB
    for (i = 0; i < total_elements; i++) {
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
 8001278:	e008      	b.n	800128c <PowerToDb+0x80>
      spectrogram[i] = -80.0f;
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a22      	ldr	r2, [pc, #136]	@ (800130c <PowerToDb+0x100>)
 8001284:	601a      	str	r2, [r3, #0]
    for (i = 0; i < total_elements; i++) {
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	3301      	adds	r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3f2      	bcc.n	800127a <PowerToDb+0x6e>
    }
    return;
 8001294:	e036      	b.n	8001304 <PowerToDb+0xf8>
  }

  // Scale Mel Energies and convert to dB
  for (i = 0; i < total_elements; i++) {
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	e02f      	b.n	80012fc <PowerToDb+0xf0>
    spectrogram[i] = 10.0f * log10f(spectrogram[i] / max_mel_energy);
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	ed93 7a00 	vldr	s14, [r3]
 80012a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012b0:	eeb0 0a66 	vmov.f32	s0, s13
 80012b4:	f00b f940 	bl	800c538 <log10f>
 80012b8:	eef0 7a40 	vmov.f32	s15, s0
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	4413      	add	r3, r2
 80012c4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012cc:	edc3 7a00 	vstr	s15, [r3]
    // Threshold to -80 dB
    if (spectrogram[i] < -80.0f) {
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8001310 <PowerToDb+0x104>
 80012e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	d505      	bpl.n	80012f6 <PowerToDb+0xea>
      spectrogram[i] = -80.0f;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a06      	ldr	r2, [pc, #24]	@ (800130c <PowerToDb+0x100>)
 80012f4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < total_elements; i++) {
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d3cb      	bcc.n	800129c <PowerToDb+0x90>
    }
  }
}
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	c2a00000 	.word	0xc2a00000
 8001310:	c2a00000 	.word	0xc2a00000

08001314 <init_nn>:


// Function to initialize the neural network
int init_nn() {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
	ai_error err;

	/* Create a local array with the addresses of the activations buffers */
	const ai_handle act_addr[] = { activations };
 800131a:	4b18      	ldr	r3, [pc, #96]	@ (800137c <init_nn+0x68>)
 800131c:	603b      	str	r3, [r7, #0]
	/* Create an instance of the model */
	err = ai_network_1_create_and_init(&network, act_addr, NULL);
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	4816      	ldr	r0, [pc, #88]	@ (8001380 <init_nn+0x6c>)
 8001326:	f004 f853 	bl	80053d0 <ai_network_1_create_and_init>
 800132a:	4603      	mov	r3, r0
 800132c:	607b      	str	r3, [r7, #4]
	if (err.type != AI_ERROR_NONE) {
 800132e:	793b      	ldrb	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <init_nn+0x38>
		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	4619      	mov	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800133e:	461a      	mov	r2, r3
 8001340:	4810      	ldr	r0, [pc, #64]	@ (8001384 <init_nn+0x70>)
 8001342:	f009 f9a5 	bl	800a690 <iprintf>
		return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800134a:	e012      	b.n	8001372 <init_nn+0x5e>
	}
	ai_input = ai_network_1_inputs_get(network, NULL);
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <init_nn+0x6c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f004 f8b0 	bl	80054b8 <ai_network_1_inputs_get>
 8001358:	4603      	mov	r3, r0
 800135a:	4a0b      	ldr	r2, [pc, #44]	@ (8001388 <init_nn+0x74>)
 800135c:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_1_outputs_get(network, NULL);
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <init_nn+0x6c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f004 f8c1 	bl	80054ec <ai_network_1_outputs_get>
 800136a:	4603      	mov	r3, r0
 800136c:	4a07      	ldr	r2, [pc, #28]	@ (800138c <init_nn+0x78>)
 800136e:	6013      	str	r3, [r2, #0]
//		audio_net_ctx.handle = AI_HANDLE_NULL;
//		return -1;
//	}
//
//	return 0; // success
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000df4 	.word	0x20000df4
 8001380:	20000df0 	.word	0x20000df0
 8001384:	0800cb28 	.word	0x0800cb28
 8001388:	2000eef4 	.word	0x2000eef4
 800138c:	2000eef8 	.word	0x2000eef8

08001390 <run_nn_classification>:

// Function to run the neural network and classify input data
int run_nn_classification(float* spectrogram, float* classification_result) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    // Define input and output buffers
//    ai_buffer nn_input_buffer[AI_NETWORK_1_IN_NUM] = AI_NETWORK_1_IN;
//    ai_buffer nn_output_buffer[AI_NETWORK_1_OUT_NUM] = AI_NETWORK_1_OUT;

    /* Update IO handlers with the data payload */
    ai_input[0].data = AI_HANDLE_PTR(spectrogram);
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <run_nn_classification+0x78>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(classification_result);
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <run_nn_classification+0x7c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	605a      	str	r2, [r3, #4]
//    // Set input data pointer
//    nn_input_buffer[0].data = AI_HANDLE_PTR(nn_input);
//
//    // Set output data pointer
//    nn_output_buffer[0].data = AI_HANDLE_PTR(nn_output);
    if(network == AI_HANDLE_NULL)
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <run_nn_classification+0x80>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <run_nn_classification+0x2e>
      {
          printf("E: network handle is NULL\r\n");
 80013b2:	4818      	ldr	r0, [pc, #96]	@ (8001414 <run_nn_classification+0x84>)
 80013b4:	f009 f9d4 	bl	800a760 <puts>
          return -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013bc:	e020      	b.n	8001400 <run_nn_classification+0x70>
      }
    // Run the network
    batch = ai_network_1_run(network, ai_input, ai_output);
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <run_nn_classification+0x80>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a11      	ldr	r2, [pc, #68]	@ (8001408 <run_nn_classification+0x78>)
 80013c4:	6811      	ldr	r1, [r2, #0]
 80013c6:	4a11      	ldr	r2, [pc, #68]	@ (800140c <run_nn_classification+0x7c>)
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 f8e4 	bl	8005598 <ai_network_1_run>
 80013d0:	60f8      	str	r0, [r7, #12]
    if (batch != 1) {
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d012      	beq.n	80013fe <run_nn_classification+0x6e>
        err = ai_network_1_get_error(network);
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <run_nn_classification+0x80>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 ffd5 	bl	800538c <ai_network_1_get_error>
 80013e2:	4603      	mov	r3, r0
 80013e4:	60bb      	str	r3, [r7, #8]
        printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80013e6:	7a3b      	ldrb	r3, [r7, #8]
 80013e8:	4619      	mov	r1, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80013f0:	461a      	mov	r2, r3
 80013f2:	4809      	ldr	r0, [pc, #36]	@ (8001418 <run_nn_classification+0x88>)
 80013f4:	f009 f94c 	bl	800a690 <iprintf>
        return -1;
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fc:	e000      	b.n	8001400 <run_nn_classification+0x70>
//    }
//
//    // Convert output data from int8 to float
//    aiConvertOutputInt8_2_Float(nn_output, classification_result);

    return 0; // Success
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2000eef4 	.word	0x2000eef4
 800140c:	2000eef8 	.word	0x2000eef8
 8001410:	20000df0 	.word	0x20000df0
 8001414:	0800cb54 	.word	0x0800cb54
 8001418:	0800cb70 	.word	0x0800cb70

0800141c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001420:	f3bf 8f4f 	dsb	sy
}
 8001424:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001426:	f3bf 8f6f 	isb	sy
}
 800142a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800142c:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <SCB_EnableICache+0x48>)
 800142e:	2200      	movs	r2, #0
 8001430:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001434:	f3bf 8f4f 	dsb	sy
}
 8001438:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800143a:	f3bf 8f6f 	isb	sy
}
 800143e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <SCB_EnableICache+0x48>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4a07      	ldr	r2, [pc, #28]	@ (8001464 <SCB_EnableICache+0x48>)
 8001446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800144c:	f3bf 8f4f 	dsb	sy
}
 8001450:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001452:	f3bf 8f6f 	isb	sy
}
 8001456:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800146e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <SCB_EnableDCache+0x84>)
 8001470:	2200      	movs	r2, #0
 8001472:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001476:	f3bf 8f4f 	dsb	sy
}
 800147a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <SCB_EnableDCache+0x84>)
 800147e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001482:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	0b5b      	lsrs	r3, r3, #13
 8001488:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800148c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001496:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	015a      	lsls	r2, r3, #5
 800149c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80014a0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014a6:	4911      	ldr	r1, [pc, #68]	@ (80014ec <SCB_EnableDCache+0x84>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	60ba      	str	r2, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ef      	bne.n	8001498 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	60fa      	str	r2, [r7, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e5      	bne.n	800148e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80014c2:	f3bf 8f4f 	dsb	sy
}
 80014c6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <SCB_EnableDCache+0x84>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <SCB_EnableDCache+0x84>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014d4:	f3bf 8f4f 	dsb	sy
}
 80014d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014da:	f3bf 8f6f 	isb	sy
}
 80014de:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	466b      	mov	r3, sp
 80014fa:	461e      	mov	r6, r3
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80014fc:	f7ff ff8e 	bl	800141c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001500:	f7ff ffb2 	bl	8001468 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f000 fcb5 	bl	8001e72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f88e 	bl	8001628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f000 fa18 	bl	8001940 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001510:	f000 f9b6 	bl	8001880 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001514:	f000 f9e4 	bl	80018e0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8001518:	f000 f916 	bl	8001748 <MX_TIM2_Init>
  MX_TIM3_Init();
 800151c:	f000 f962 	bl	80017e4 <MX_TIM3_Init>
  MX_CRC_Init();
 8001520:	f000 f8f0 	bl	8001704 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_CRC_CLK_ENABLE();
 8001524:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <main+0x120>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	4a39      	ldr	r2, [pc, #228]	@ (8001610 <main+0x120>)
 800152a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800152e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001530:	4b37      	ldr	r3, [pc, #220]	@ (8001610 <main+0x120>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
  // Initialisiere das neuronale Netz
  if (init_nn() != 0) {
 800153c:	f7ff feea 	bl	8001314 <init_nn>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <main+0x64>
	  printf("Failed to initialize neural network\n");
 8001546:	4833      	ldr	r0, [pc, #204]	@ (8001614 <main+0x124>)
 8001548:	f009 f90a 	bl	800a760 <puts>
	  return -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001550:	46b5      	mov	sp, r6
 8001552:	e058      	b.n	8001606 <main+0x116>
  }

  // Configure Audio preprocessing
  Preprocessing_Init();
 8001554:	f7ff fd28 	bl	8000fa8 <Preprocessing_Init>

  // Resample das Audio (Platzhalter)
  float32_t resampled_data[audio_data_length];
 8001558:	4b2f      	ldr	r3, [pc, #188]	@ (8001618 <main+0x128>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3b01      	subs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b2d      	ldr	r3, [pc, #180]	@ (8001618 <main+0x128>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	2300      	movs	r3, #0
 8001568:	4690      	mov	r8, r2
 800156a:	4699      	mov	r9, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001578:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800157c:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001580:	4b25      	ldr	r3, [pc, #148]	@ (8001618 <main+0x128>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	2300      	movs	r3, #0
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	016b      	lsls	r3, r5, #5
 8001596:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800159a:	0162      	lsls	r2, r4, #5
 800159c:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <main+0x128>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	3307      	adds	r3, #7
 80015a4:	08db      	lsrs	r3, r3, #3
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	ebad 0d03 	sub.w	sp, sp, r3
 80015ac:	466b      	mov	r3, sp
 80015ae:	3303      	adds	r3, #3
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < audio_data_length; i++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	e014      	b.n	80015e6 <main+0xf6>
	  resampled_data[i] = audio_data[i] / 32768.0f;
 80015bc:	4a17      	ldr	r2, [pc, #92]	@ (800161c <main+0x12c>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001620 <main+0x130>
 80015d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < audio_data_length; i++) {
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <main+0x128>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbe5      	blt.n	80015bc <main+0xcc>
  }

  // Frame die resampleten Daten
  frame_subsamples(resampled_data, audio_data_length);
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <main+0x128>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fd1c 	bl	8001034 <frame_subsamples>


  // Ausgabe des Klassifikationsergebnisses
  printf("Classification completed successfully\n");
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <main+0x134>)
 80015fe:	f009 f8af 	bl	800a760 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001602:	bf00      	nop
 8001604:	e7fd      	b.n	8001602 <main+0x112>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	0800cb9c 	.word	0x0800cb9c
 8001618:	08014c30 	.word	0x08014c30
 800161c:	0800cc30 	.word	0x0800cc30
 8001620:	47000000 	.word	0x47000000
 8001624:	0800cbc0 	.word	0x0800cbc0

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	@ 0x50
 800162c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	2230      	movs	r2, #48	@ 0x30
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f009 f89a 	bl	800a770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800164c:	f001 f960 	bl	8002910 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <SystemClock_Config+0xd4>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	4a29      	ldr	r2, [pc, #164]	@ (80016fc <SystemClock_Config+0xd4>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165a:	6413      	str	r3, [r2, #64]	@ 0x40
 800165c:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <SystemClock_Config+0xd4>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <SystemClock_Config+0xd8>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a24      	ldr	r2, [pc, #144]	@ (8001700 <SystemClock_Config+0xd8>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <SystemClock_Config+0xd8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001680:	2301      	movs	r3, #1
 8001682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001684:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001694:	2304      	movs	r3, #4
 8001696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001698:	23d8      	movs	r3, #216	@ 0xd8
 800169a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016a0:	2309      	movs	r3, #9
 80016a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 f991 	bl	80029d0 <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80016b4:	f000 f9e6 	bl	8001a84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016b8:	f001 f93a 	bl	8002930 <HAL_PWREx_EnableOverDrive>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016c2:	f000 f9df 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c6:	230f      	movs	r3, #15
 80016c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2107      	movs	r1, #7
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fc17 	bl	8002f18 <HAL_RCC_ClockConfig>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80016f0:	f000 f9c8 	bl	8001a84 <Error_Handler>
  }
}
 80016f4:	bf00      	nop
 80016f6:	3750      	adds	r7, #80	@ 0x50
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001708:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <MX_CRC_Init+0x3c>)
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <MX_CRC_Init+0x40>)
 800170c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_CRC_Init+0x3c>)
 8001710:	2200      	movs	r2, #0
 8001712:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <MX_CRC_Init+0x3c>)
 8001716:	2200      	movs	r2, #0
 8001718:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_CRC_Init+0x3c>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <MX_CRC_Init+0x3c>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_CRC_Init+0x3c>)
 8001728:	2201      	movs	r2, #1
 800172a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <MX_CRC_Init+0x3c>)
 800172e:	f000 fd07 	bl	8002140 <HAL_CRC_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001738:	f000 f9a4 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000fe14 	.word	0x2000fe14
 8001744:	40023000 	.word	0x40023000

08001748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800174e:	f107 0310 	add.w	r3, r7, #16
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001766:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001768:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800176c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800177a:	4b19      	ldr	r3, [pc, #100]	@ (80017e0 <MX_TIM2_Init+0x98>)
 800177c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001780:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MX_TIM2_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800178e:	4814      	ldr	r0, [pc, #80]	@ (80017e0 <MX_TIM2_Init+0x98>)
 8001790:	f002 f932 	bl	80039f8 <HAL_TIM_Base_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800179a:	f000 f973 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <MX_TIM2_Init+0x98>)
 80017ac:	f002 f97c 	bl	8003aa8 <HAL_TIM_ConfigClockSource>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017b6:	f000 f965 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <MX_TIM2_Init+0x98>)
 80017c8:	f002 fb72 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017d2:	f000 f957 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000fe38 	.word	0x2000fe38

080017e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <MX_TIM3_Init+0x94>)
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <MX_TIM3_Init+0x98>)
 8001806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <MX_TIM3_Init+0x94>)
 800180a:	2200      	movs	r2, #0
 800180c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_TIM3_Init+0x94>)
 8001810:	2200      	movs	r2, #0
 8001812:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <MX_TIM3_Init+0x94>)
 8001816:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800181a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <MX_TIM3_Init+0x94>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <MX_TIM3_Init+0x94>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001828:	4813      	ldr	r0, [pc, #76]	@ (8001878 <MX_TIM3_Init+0x94>)
 800182a:	f002 f8e5 	bl	80039f8 <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001834:	f000 f926 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800183c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <MX_TIM3_Init+0x94>)
 8001846:	f002 f92f 	bl	8003aa8 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001850:	f000 f918 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_TIM3_Init+0x94>)
 8001862:	f002 fb25 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800186c:	f000 f90a 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3720      	adds	r7, #32
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000fe84 	.word	0x2000fe84
 800187c:	40000400 	.word	0x40000400

08001880 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 8001886:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <MX_USART3_UART_Init+0x5c>)
 8001888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800188a:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 80018be:	2200      	movs	r2, #0
 80018c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	@ (80018d8 <MX_USART3_UART_Init+0x58>)
 80018c4:	f002 fb82 	bl	8003fcc <HAL_UART_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018ce:	f000 f8d9 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000fed0 	.word	0x2000fed0
 80018dc:	40004800 	.word	0x40004800

080018e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018e4:	4b15      	ldr	r3, [pc, #84]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ee:	2206      	movs	r2, #6
 80018f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018f4:	2202      	movs	r2, #2
 80018f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018f8:	4b10      	ldr	r3, [pc, #64]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001900:	2202      	movs	r2, #2
 8001902:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001904:	4b0d      	ldr	r3, [pc, #52]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001906:	2201      	movs	r2, #1
 8001908:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800190a:	4b0c      	ldr	r3, [pc, #48]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001918:	2201      	movs	r2, #1
 800191a:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800191c:	4b07      	ldr	r3, [pc, #28]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800191e:	2201      	movs	r2, #1
 8001920:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001922:	4b06      	ldr	r3, [pc, #24]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001924:	2200      	movs	r2, #0
 8001926:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800192a:	f000 fea8 	bl	800267e <HAL_PCD_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001934:	f000 f8a6 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000ff58 	.word	0x2000ff58

08001940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	@ 0x30
 8001944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <MX_GPIO_Init+0x134>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a46      	ldr	r2, [pc, #280]	@ (8001a74 <MX_GPIO_Init+0x134>)
 800195c:	f043 0304 	orr.w	r3, r3, #4
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <MX_GPIO_Init+0x134>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <MX_GPIO_Init+0x134>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a40      	ldr	r2, [pc, #256]	@ (8001a74 <MX_GPIO_Init+0x134>)
 8001974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a74 <MX_GPIO_Init+0x134>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <MX_GPIO_Init+0x134>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a3a      	ldr	r2, [pc, #232]	@ (8001a74 <MX_GPIO_Init+0x134>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <MX_GPIO_Init+0x134>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a34      	ldr	r2, [pc, #208]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b32      	ldr	r3, [pc, #200]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a28      	ldr	r2, [pc, #160]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <MX_GPIO_Init+0x134>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80019ec:	4822      	ldr	r0, [pc, #136]	@ (8001a78 <MX_GPIO_Init+0x138>)
 80019ee:	f000 fe2d 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2140      	movs	r1, #64	@ 0x40
 80019f6:	4821      	ldr	r0, [pc, #132]	@ (8001a7c <MX_GPIO_Init+0x13c>)
 80019f8:	f000 fe28 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	481b      	ldr	r0, [pc, #108]	@ (8001a80 <MX_GPIO_Init+0x140>)
 8001a14:	f000 fc7e 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001a18:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4811      	ldr	r0, [pc, #68]	@ (8001a78 <MX_GPIO_Init+0x138>)
 8001a32:	f000 fc6f 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a36:	2340      	movs	r3, #64	@ 0x40
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480b      	ldr	r0, [pc, #44]	@ (8001a7c <MX_GPIO_Init+0x13c>)
 8001a4e:	f000 fc61 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a52:	2380      	movs	r3, #128	@ 0x80
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <MX_GPIO_Init+0x13c>)
 8001a66:	f000 fc55 	bl	8002314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a6a:	bf00      	nop
 8001a6c:	3730      	adds	r7, #48	@ 0x30
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40020800 	.word	0x40020800

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <Error_Handler+0x8>

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	4a08      	ldr	r2, [pc, #32]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <HAL_CRC_MspInit+0x38>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d10b      	bne.n	8001b02 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_CRC_MspInit+0x3c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <HAL_CRC_MspInit+0x3c>)
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <HAL_CRC_MspInit+0x3c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023000 	.word	0x40023000
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b28:	d10c      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_TIM_Base_MspInit+0x5c>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_TIM_Base_MspInit+0x5c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b0f      	ldr	r3, [pc, #60]	@ (8001b74 <HAL_TIM_Base_MspInit+0x5c>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b42:	e010      	b.n	8001b66 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0b      	ldr	r2, [pc, #44]	@ (8001b78 <HAL_TIM_Base_MspInit+0x60>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10b      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_TIM_Base_MspInit+0x5c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <HAL_TIM_Base_MspInit+0x5c>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_TIM_Base_MspInit+0x5c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
}
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40000400 	.word	0x40000400

08001b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0aa      	sub	sp, #168	@ 0xa8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2280      	movs	r2, #128	@ 0x80
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f008 fde7 	bl	800a770 <memset>
  if(huart->Instance==USART3)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a22      	ldr	r2, [pc, #136]	@ (8001c30 <HAL_UART_MspInit+0xb4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d13c      	bne.n	8001c26 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fbd2 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bc6:	f7ff ff5d 	bl	8001a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <HAL_UART_MspInit+0xb8>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a19      	ldr	r2, [pc, #100]	@ (8001c34 <HAL_UART_MspInit+0xb8>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <HAL_UART_MspInit+0xb8>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be2:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_UART_MspInit+0xb8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a13      	ldr	r2, [pc, #76]	@ (8001c34 <HAL_UART_MspInit+0xb8>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_UART_MspInit+0xb8>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c14:	2307      	movs	r3, #7
 8001c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <HAL_UART_MspInit+0xbc>)
 8001c22:	f000 fb77 	bl	8002314 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	37a8      	adds	r7, #168	@ 0xa8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40004800 	.word	0x40004800
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020c00 	.word	0x40020c00

08001c3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0aa      	sub	sp, #168	@ 0xa8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f008 fd87 	bl	800a770 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c6a:	d159      	bne.n	8001d20 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f001 fb71 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c88:	f7ff fefc 	bl	8001a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b26      	ldr	r3, [pc, #152]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	4a25      	ldr	r2, [pc, #148]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c98:	4b23      	ldr	r3, [pc, #140]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ca4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ca8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cbe:	230a      	movs	r3, #10
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4818      	ldr	r0, [pc, #96]	@ (8001d2c <HAL_PCD_MspInit+0xf0>)
 8001ccc:	f000 fb22 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4810      	ldr	r0, [pc, #64]	@ (8001d2c <HAL_PCD_MspInit+0xf0>)
 8001cec:	f000 fb12 	bl	8002314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cfa:	6353      	str	r3, [r2, #52]	@ 0x34
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0c:	4a06      	ldr	r2, [pc, #24]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d12:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <HAL_PCD_MspInit+0xec>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	37a8      	adds	r7, #168	@ 0xa8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <NMI_Handler+0x4>

08001d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <MemManage_Handler+0x4>

08001d48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d86:	f000 f8b1 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d98:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <_sbrk+0x5c>)
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <_sbrk+0x60>)
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <_sbrk+0x64>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <_sbrk+0x68>)
 8001db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d207      	bcs.n	8001dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc0:	f008 fcf2 	bl	800a7a8 <__errno>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dce:	e009      	b.n	8001de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <_sbrk+0x64>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	@ (8001df4 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <_sbrk+0x64>)
 8001de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de2:	68fb      	ldr	r3, [r7, #12]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20040000 	.word	0x20040000
 8001df0:	00000800 	.word	0x00000800
 8001df4:	20010460 	.word	0x20010460
 8001df8:	200106a8 	.word	0x200106a8

08001dfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <SystemInit+0x20>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	4a05      	ldr	r2, [pc, #20]	@ (8001e1c <SystemInit+0x20>)
 8001e08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e24:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e26:	490e      	ldr	r1, [pc, #56]	@ (8001e60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e28:	4a0e      	ldr	r2, [pc, #56]	@ (8001e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8001e6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e4a:	f7ff ffd7 	bl	8001dfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f008 fcb1 	bl	800a7b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff fb4d 	bl	80014f0 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e60:	20000cf0 	.word	0x20000cf0
  ldr r2, =_sidata
 8001e64:	0803aec0 	.word	0x0803aec0
  ldr r2, =_sbss
 8001e68:	20000cf0 	.word	0x20000cf0
  ldr r4, =_ebss
 8001e6c:	200106a4 	.word	0x200106a4

08001e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>

08001e72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e76:	2003      	movs	r0, #3
 8001e78:	f000 f92e 	bl	80020d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 f805 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e82:	f7ff fe05 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e94:	4b12      	ldr	r3, [pc, #72]	@ (8001ee0 <HAL_InitTick+0x54>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <HAL_InitTick+0x58>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f93b 	bl	8002126 <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ec8:	f000 f911 	bl	80020ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	@ (8001ee8 <HAL_InitTick+0x5c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	20000004 	.word	0x20000004

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20010464 	.word	0x20010464

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20010464 	.word	0x20010464

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_Delay+0x44>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000008 	.word	0x20000008

08001f74 <__NVIC_SetPriorityGrouping>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00
 8001fb8:	05fa0000 	.word	0x05fa0000

08001fbc <__NVIC_GetPriorityGrouping>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_SetPriority>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	@ (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	@ (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3b01      	subs	r3, #1
 80020a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a4:	d301      	bcc.n	80020aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a6:	2301      	movs	r3, #1
 80020a8:	e00f      	b.n	80020ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020aa:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <SysTick_Config+0x40>)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b2:	210f      	movs	r1, #15
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80020b8:	f7ff ff8e 	bl	8001fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <SysTick_Config+0x40>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c2:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <SysTick_Config+0x40>)
 80020c4:	2207      	movs	r2, #7
 80020c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	e000e010 	.word	0xe000e010

080020d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff47 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
 80020fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002100:	f7ff ff5c 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 8002104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	6978      	ldr	r0, [r7, #20]
 800210c:	f7ff ff8e 	bl	800202c <NVIC_EncodePriority>
 8002110:	4602      	mov	r2, r0
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff5d 	bl	8001fd8 <__NVIC_SetPriority>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffb0 	bl	8002094 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e054      	b.n	80021fc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7f5b      	ldrb	r3, [r3, #29]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fcb8 	bl	8001ad8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	791b      	ldrb	r3, [r3, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <HAL_CRC_Init+0xc4>)
 800217c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0218 	bic.w	r2, r2, #24
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	e00c      	b.n	80021aa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6899      	ldr	r1, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	461a      	mov	r2, r3
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f834 	bl	8002208 <HAL_CRCEx_Polynomial_Set>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e028      	b.n	80021fc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	795b      	ldrb	r3, [r3, #5]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021ba:	611a      	str	r2, [r3, #16]
 80021bc:	e004      	b.n	80021c8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6912      	ldr	r2, [r2, #16]
 80021c6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	04c11db7 	.word	0x04c11db7

08002208 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002218:	231f      	movs	r3, #31
 800221a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800221c:	bf00      	nop
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	613a      	str	r2, [r7, #16]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_CRCEx_Polynomial_Set+0x34>
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b18      	cmp	r3, #24
 8002240:	d846      	bhi.n	80022d0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002242:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	080022d7 	.word	0x080022d7
 800224c:	080022d1 	.word	0x080022d1
 8002250:	080022d1 	.word	0x080022d1
 8002254:	080022d1 	.word	0x080022d1
 8002258:	080022d1 	.word	0x080022d1
 800225c:	080022d1 	.word	0x080022d1
 8002260:	080022d1 	.word	0x080022d1
 8002264:	080022d1 	.word	0x080022d1
 8002268:	080022c5 	.word	0x080022c5
 800226c:	080022d1 	.word	0x080022d1
 8002270:	080022d1 	.word	0x080022d1
 8002274:	080022d1 	.word	0x080022d1
 8002278:	080022d1 	.word	0x080022d1
 800227c:	080022d1 	.word	0x080022d1
 8002280:	080022d1 	.word	0x080022d1
 8002284:	080022d1 	.word	0x080022d1
 8002288:	080022b9 	.word	0x080022b9
 800228c:	080022d1 	.word	0x080022d1
 8002290:	080022d1 	.word	0x080022d1
 8002294:	080022d1 	.word	0x080022d1
 8002298:	080022d1 	.word	0x080022d1
 800229c:	080022d1 	.word	0x080022d1
 80022a0:	080022d1 	.word	0x080022d1
 80022a4:	080022d1 	.word	0x080022d1
 80022a8:	080022ad 	.word	0x080022ad
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d913      	bls.n	80022da <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022b6:	e010      	b.n	80022da <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b07      	cmp	r3, #7
 80022bc:	d90f      	bls.n	80022de <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022c2:	e00c      	b.n	80022de <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b0f      	cmp	r3, #15
 80022c8:	d90b      	bls.n	80022e2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80022ce:	e008      	b.n	80022e2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
      break;
 80022d4:	e006      	b.n	80022e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022d6:	bf00      	nop
 80022d8:	e004      	b.n	80022e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022da:	bf00      	nop
 80022dc:	e002      	b.n	80022e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80022e2:	bf00      	nop
  }
  if (status == HAL_OK)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 0118 	bic.w	r1, r3, #24
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
}
 8002308:	4618      	mov	r0, r3
 800230a:	371c      	adds	r7, #28
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	@ 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e169      	b.n	8002608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	429a      	cmp	r2, r3
 800234e:	f040 8158 	bne.w	8002602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d005      	beq.n	800236a <HAL_GPIO_Init+0x56>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d130      	bne.n	80023cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a0:	2201      	movs	r2, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 0201 	and.w	r2, r3, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d017      	beq.n	8002408 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d123      	bne.n	800245c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	08da      	lsrs	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3208      	adds	r2, #8
 800241c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	69b9      	ldr	r1, [r7, #24]
 8002458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0203 	and.w	r2, r3, #3
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80b2 	beq.w	8002602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	4b60      	ldr	r3, [pc, #384]	@ (8002620 <HAL_GPIO_Init+0x30c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	4a5f      	ldr	r2, [pc, #380]	@ (8002620 <HAL_GPIO_Init+0x30c>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002620 <HAL_GPIO_Init+0x30c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002624 <HAL_GPIO_Init+0x310>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a52      	ldr	r2, [pc, #328]	@ (8002628 <HAL_GPIO_Init+0x314>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02b      	beq.n	800253a <HAL_GPIO_Init+0x226>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a51      	ldr	r2, [pc, #324]	@ (800262c <HAL_GPIO_Init+0x318>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d025      	beq.n	8002536 <HAL_GPIO_Init+0x222>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a50      	ldr	r2, [pc, #320]	@ (8002630 <HAL_GPIO_Init+0x31c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d01f      	beq.n	8002532 <HAL_GPIO_Init+0x21e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002634 <HAL_GPIO_Init+0x320>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d019      	beq.n	800252e <HAL_GPIO_Init+0x21a>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002638 <HAL_GPIO_Init+0x324>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d013      	beq.n	800252a <HAL_GPIO_Init+0x216>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4d      	ldr	r2, [pc, #308]	@ (800263c <HAL_GPIO_Init+0x328>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00d      	beq.n	8002526 <HAL_GPIO_Init+0x212>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4c      	ldr	r2, [pc, #304]	@ (8002640 <HAL_GPIO_Init+0x32c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d007      	beq.n	8002522 <HAL_GPIO_Init+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a4b      	ldr	r2, [pc, #300]	@ (8002644 <HAL_GPIO_Init+0x330>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_GPIO_Init+0x20a>
 800251a:	2307      	movs	r3, #7
 800251c:	e00e      	b.n	800253c <HAL_GPIO_Init+0x228>
 800251e:	2308      	movs	r3, #8
 8002520:	e00c      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002522:	2306      	movs	r3, #6
 8002524:	e00a      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002526:	2305      	movs	r3, #5
 8002528:	e008      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252a:	2304      	movs	r3, #4
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x228>
 800252e:	2303      	movs	r3, #3
 8002530:	e004      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002532:	2302      	movs	r3, #2
 8002534:	e002      	b.n	800253c <HAL_GPIO_Init+0x228>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x228>
 800253a:	2300      	movs	r3, #0
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4093      	lsls	r3, r2
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800254c:	4935      	ldr	r1, [pc, #212]	@ (8002624 <HAL_GPIO_Init+0x310>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255a:	4b3b      	ldr	r3, [pc, #236]	@ (8002648 <HAL_GPIO_Init+0x334>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257e:	4a32      	ldr	r2, [pc, #200]	@ (8002648 <HAL_GPIO_Init+0x334>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002584:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <HAL_GPIO_Init+0x334>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a8:	4a27      	ldr	r2, [pc, #156]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ae:	4b26      	ldr	r3, [pc, #152]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025fc:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <HAL_GPIO_Init+0x334>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f67f ae92 	bls.w	8002334 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40013800 	.word	0x40013800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40020800 	.word	0x40020800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40021400 	.word	0x40021400
 8002640:	40021800 	.word	0x40021800
 8002644:	40021c00 	.word	0x40021c00
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800267e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002680:	b08f      	sub	sp, #60	@ 0x3c
 8002682:	af0a      	add	r7, sp, #40	@ 0x28
 8002684:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e116      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d106      	bne.n	80026b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fac6 	bl	8001c3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 f956 	bl	8004980 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	687e      	ldr	r6, [r7, #4]
 80026dc:	466d      	mov	r5, sp
 80026de:	f106 0410 	add.w	r4, r6, #16
 80026e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80026f2:	1d33      	adds	r3, r6, #4
 80026f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f002 f8ba 	bl	8004870 <USB_CoreInit>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0d7      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f002 f944 	bl	80049a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e04a      	b.n	80027b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	333d      	adds	r3, #61	@ 0x3d
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	333c      	adds	r3, #60	@ 0x3c
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	b298      	uxth	r0, r3
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3344      	adds	r3, #68	@ 0x44
 800275c:	4602      	mov	r2, r0
 800275e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3340      	adds	r3, #64	@ 0x40
 8002770:	2200      	movs	r2, #0
 8002772:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3348      	adds	r3, #72	@ 0x48
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	334c      	adds	r3, #76	@ 0x4c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800279c:	7bfa      	ldrb	r2, [r7, #15]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3354      	adds	r3, #84	@ 0x54
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3af      	bcc.n	8002720 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]
 80027c4:	e044      	b.n	8002850 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	3301      	adds	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	d3b5      	bcc.n	80027c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	603b      	str	r3, [r7, #0]
 8002860:	687e      	ldr	r6, [r7, #4]
 8002862:	466d      	mov	r5, sp
 8002864:	f106 0410 	add.w	r4, r6, #16
 8002868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002870:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002874:	e885 0003 	stmia.w	r5, {r0, r1}
 8002878:	1d33      	adds	r3, r6, #4
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	6838      	ldr	r0, [r7, #0]
 800287e:	f002 f8dd 	bl	8004a3c <USB_DevInit>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e014      	b.n	80028be <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f80b 	bl	80028c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 faab 	bl	8004e12 <USB_DevDisconnect>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_PCDEx_ActivateLPM+0x44>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	10000003 	.word	0x10000003

08002910 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002914:	4b05      	ldr	r3, [pc, #20]	@ (800292c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a04      	ldr	r2, [pc, #16]	@ (800292c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40007000 	.word	0x40007000

08002930 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	@ 0x40
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002952:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1d      	ldr	r2, [pc, #116]	@ (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800295e:	f7ff fad9 	bl	8001f14 <HAL_GetTick>
 8002962:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002964:	e009      	b.n	800297a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002966:	f7ff fad5 	bl	8001f14 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002974:	d901      	bls.n	800297a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e022      	b.n	80029c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800297a:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002986:	d1ee      	bne.n	8002966 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002988:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0f      	ldr	r2, [pc, #60]	@ (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002992:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002994:	f7ff fabe 	bl	8001f14 <HAL_GetTick>
 8002998:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800299a:	e009      	b.n	80029b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800299c:	f7ff faba 	bl	8001f14 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029aa:	d901      	bls.n	80029b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e007      	b.n	80029c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029bc:	d1ee      	bne.n	800299c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40007000 	.word	0x40007000

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e291      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8087 	beq.w	8002b02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f4:	4b96      	ldr	r3, [pc, #600]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d00c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a00:	4b93      	ldr	r3, [pc, #588]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d112      	bne.n	8002a32 <HAL_RCC_OscConfig+0x62>
 8002a0c:	4b90      	ldr	r3, [pc, #576]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d06c      	beq.n	8002b00 <HAL_RCC_OscConfig+0x130>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d168      	bne.n	8002b00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e26b      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x7a>
 8002a3c:	4b84      	ldr	r3, [pc, #528]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e02e      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd8>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x9c>
 8002a52:	4b7f      	ldr	r3, [pc, #508]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7e      	ldr	r2, [pc, #504]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7b      	ldr	r2, [pc, #492]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e01d      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd8>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0xc0>
 8002a76:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a75      	ldr	r2, [pc, #468]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b73      	ldr	r3, [pc, #460]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a72      	ldr	r2, [pc, #456]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd8>
 8002a90:	4b6f      	ldr	r3, [pc, #444]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6e      	ldr	r2, [pc, #440]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6b      	ldr	r2, [pc, #428]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fa30 	bl	8001f14 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fa2c 	bl	8001f14 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	@ 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e21f      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b61      	ldr	r3, [pc, #388]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xe8>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fa1c 	bl	8001f14 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fa18 	bl	8001f14 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e20b      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	4b57      	ldr	r3, [pc, #348]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x110>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d069      	beq.n	8002be2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0e:	4b50      	ldr	r3, [pc, #320]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x190>
 8002b26:	4b4a      	ldr	r3, [pc, #296]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b47      	ldr	r3, [pc, #284]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1df      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b41      	ldr	r3, [pc, #260]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	493d      	ldr	r1, [pc, #244]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e040      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d023      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b39      	ldr	r3, [pc, #228]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a38      	ldr	r2, [pc, #224]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7ff f9ce 	bl	8001f14 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7c:	f7ff f9ca 	bl	8001f14 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1bd      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b30      	ldr	r3, [pc, #192]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4929      	ldr	r1, [pc, #164]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
 8002bae:	e018      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bb0:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a26      	ldr	r2, [pc, #152]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	f023 0301 	bic.w	r3, r3, #1
 8002bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbc:	f7ff f9aa 	bl	8001f14 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc4:	f7ff f9a6 	bl	8001f14 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e199      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d038      	beq.n	8002c60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d019      	beq.n	8002c2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bf6:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfa:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c02:	f7ff f987 	bl	8001f14 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0a:	f7ff f983 	bl	8001f14 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e176      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x23a>
 8002c28:	e01a      	b.n	8002c60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2e:	4a08      	ldr	r2, [pc, #32]	@ (8002c50 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7ff f96d 	bl	8001f14 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7ff f969 	bl	8001f14 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d903      	bls.n	8002c54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e15c      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
 8002c50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	4b91      	ldr	r3, [pc, #580]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ee      	bne.n	8002c3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a4 	beq.w	8002db6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b88      	ldr	r3, [pc, #544]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	4a87      	ldr	r2, [pc, #540]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c86:	4b85      	ldr	r3, [pc, #532]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c96:	4b82      	ldr	r3, [pc, #520]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7ff f931 	bl	8001f14 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7ff f92d 	bl	8001f14 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	@ 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e120      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc8:	4b75      	ldr	r3, [pc, #468]	@ (8002ea0 <HAL_RCC_OscConfig+0x4d0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x31a>
 8002cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x33c>
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	4a69      	ldr	r2, [pc, #420]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfe:	4b67      	ldr	r3, [pc, #412]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	4a66      	ldr	r2, [pc, #408]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x35e>
 8002d14:	4b61      	ldr	r3, [pc, #388]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d18:	4a60      	ldr	r2, [pc, #384]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d20:	4b5e      	ldr	r3, [pc, #376]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d24:	4a5d      	ldr	r2, [pc, #372]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	4a5a      	ldr	r2, [pc, #360]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3a:	4b58      	ldr	r3, [pc, #352]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3e:	4a57      	ldr	r2, [pc, #348]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4e:	f7ff f8e1 	bl	8001f14 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff f8dd 	bl	8001f14 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ce      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x386>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7ff f8cb 	bl	8001f14 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7ff f8c7 	bl	8001f14 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e0b8      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b40      	ldr	r3, [pc, #256]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b3c      	ldr	r3, [pc, #240]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	4a3b      	ldr	r2, [pc, #236]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 80a4 	beq.w	8002f08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d06b      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d149      	bne.n	8002e68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b31      	ldr	r3, [pc, #196]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a30      	ldr	r2, [pc, #192]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff f898 	bl	8001f14 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7ff f894 	bl	8001f14 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e087      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff f868 	bl	8001f14 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7ff f864 	bl	8001f14 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e057      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5a:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x478>
 8002e66:	e04f      	b.n	8002f08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff f84e 	bl	8001f14 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7ff f84a 	bl	8001f14 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e03d      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	4b03      	ldr	r3, [pc, #12]	@ (8002e9c <HAL_RCC_OscConfig+0x4cc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x4ac>
 8002e9a:	e035      	b.n	8002f08 <HAL_RCC_OscConfig+0x538>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_RCC_OscConfig+0x544>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0d0      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b6a      	ldr	r3, [pc, #424]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d910      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b67      	ldr	r3, [pc, #412]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 020f 	bic.w	r2, r3, #15
 8002f46:	4965      	ldr	r1, [pc, #404]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d040      	beq.n	800303c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b41      	ldr	r3, [pc, #260]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e073      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3d      	ldr	r3, [pc, #244]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06b      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b39      	ldr	r3, [pc, #228]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4936      	ldr	r1, [pc, #216]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe ff82 	bl	8001f14 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe ff7e 	bl	8001f14 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e053      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b27      	ldr	r3, [pc, #156]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d210      	bcs.n	800306c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 020f 	bic.w	r2, r3, #15
 8003052:	4922      	ldr	r1, [pc, #136]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003096:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	@ (80030e4 <HAL_RCC_ClockConfig+0x1cc>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	@ (80030e8 <HAL_RCC_ClockConfig+0x1d0>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_RCC_ClockConfig+0x1d4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fede 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	0800cc18 	.word	0x0800cc18
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000004 	.word	0x20000004

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b094      	sub	sp, #80	@ 0x50
 80030f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030f8:	2300      	movs	r3, #0
 80030fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80030fc:	2300      	movs	r3, #0
 80030fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003100:	2300      	movs	r3, #0
 8003102:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003108:	4b79      	ldr	r3, [pc, #484]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d00d      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 8003114:	2b08      	cmp	r3, #8
 8003116:	f200 80e1 	bhi.w	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x34>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e0db      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b73      	ldr	r3, [pc, #460]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003128:	e0db      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b73      	ldr	r3, [pc, #460]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800312c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800312e:	e0d8      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b6f      	ldr	r3, [pc, #444]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003138:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800313a:	4b6d      	ldr	r3, [pc, #436]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	2200      	movs	r2, #0
 800314e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003150:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	633b      	str	r3, [r7, #48]	@ 0x30
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
 800315e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003162:	4622      	mov	r2, r4
 8003164:	462b      	mov	r3, r5
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003174:	0150      	lsls	r0, r2, #5
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4621      	mov	r1, r4
 800317c:	1a51      	subs	r1, r2, r1
 800317e:	6139      	str	r1, [r7, #16]
 8003180:	4629      	mov	r1, r5
 8003182:	eb63 0301 	sbc.w	r3, r3, r1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003194:	4659      	mov	r1, fp
 8003196:	018b      	lsls	r3, r1, #6
 8003198:	4651      	mov	r1, sl
 800319a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800319e:	4651      	mov	r1, sl
 80031a0:	018a      	lsls	r2, r1, #6
 80031a2:	4651      	mov	r1, sl
 80031a4:	ebb2 0801 	subs.w	r8, r2, r1
 80031a8:	4659      	mov	r1, fp
 80031aa:	eb63 0901 	sbc.w	r9, r3, r1
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c2:	4690      	mov	r8, r2
 80031c4:	4699      	mov	r9, r3
 80031c6:	4623      	mov	r3, r4
 80031c8:	eb18 0303 	adds.w	r3, r8, r3
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	462b      	mov	r3, r5
 80031d0:	eb49 0303 	adc.w	r3, r9, r3
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e2:	4629      	mov	r1, r5
 80031e4:	024b      	lsls	r3, r1, #9
 80031e6:	4621      	mov	r1, r4
 80031e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ec:	4621      	mov	r1, r4
 80031ee:	024a      	lsls	r2, r1, #9
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f6:	2200      	movs	r2, #0
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003200:	f7fd fd5a 	bl	8000cb8 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800320c:	e058      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	4618      	mov	r0, r3
 8003218:	4611      	mov	r1, r2
 800321a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
 8003224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323a:	0150      	lsls	r0, r2, #5
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4641      	mov	r1, r8
 8003242:	ebb2 0a01 	subs.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb63 0b01 	sbc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800325c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003260:	ebb2 040a 	subs.w	r4, r2, sl
 8003264:	eb63 050b 	sbc.w	r5, r3, fp
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	464b      	mov	r3, r9
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032aa:	2200      	movs	r2, #0
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	61fa      	str	r2, [r7, #28]
 80032b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b4:	f7fd fd00 	bl	8000cb8 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3750      	adds	r7, #80	@ 0x50
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200

080032fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000000 	.word	0x20000000

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	@ (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	0800cc28 	.word	0x0800cc28

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffdc 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0b5b      	lsrs	r3, r3, #13
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	@ (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	0800cc28 	.word	0x0800cc28

08003364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003388:	4b65      	ldr	r3, [pc, #404]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	4a64      	ldr	r2, [pc, #400]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800338e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003392:	6093      	str	r3, [r2, #8]
 8003394:	4b62      	ldr	r3, [pc, #392]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339c:	4960      	ldr	r1, [pc, #384]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033ba:	4b59      	ldr	r3, [pc, #356]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c8:	4955      	ldr	r1, [pc, #340]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d8:	d101      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	4946      	ldr	r1, [pc, #280]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003414:	d101      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 808b 	beq.w	800354a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003434:	4b3a      	ldr	r3, [pc, #232]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	4a39      	ldr	r2, [pc, #228]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003440:	4b37      	ldr	r3, [pc, #220]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800344c:	4b35      	ldr	r3, [pc, #212]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a34      	ldr	r2, [pc, #208]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003458:	f7fe fd5c 	bl	8001f14 <HAL_GetTick>
 800345c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fe fd58 	bl	8001f14 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e2bc      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003472:	4b2c      	ldr	r3, [pc, #176]	@ (8003524 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800347e:	4b28      	ldr	r3, [pc, #160]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003486:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d035      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	429a      	cmp	r2, r3
 800349a:	d02e      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800349c:	4b20      	ldr	r3, [pc, #128]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034be:	4a18      	ldr	r2, [pc, #96]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034c4:	4b16      	ldr	r3, [pc, #88]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d114      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fd20 	bl	8001f14 <HAL_GetTick>
 80034d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	e00a      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d8:	f7fe fd1c 	bl	8001f14 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d901      	bls.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e27e      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0ee      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003502:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003506:	d111      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003514:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003516:	400b      	ands	r3, r1
 8003518:	4901      	ldr	r1, [pc, #4]	@ (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
 800351e:	e00b      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
 8003528:	0ffffcff 	.word	0x0ffffcff
 800352c:	4ba4      	ldr	r3, [pc, #656]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4aa3      	ldr	r2, [pc, #652]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003532:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003536:	6093      	str	r3, [r2, #8]
 8003538:	4ba1      	ldr	r3, [pc, #644]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800353a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	499e      	ldr	r1, [pc, #632]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003556:	4b9a      	ldr	r3, [pc, #616]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800355c:	4a98      	ldr	r2, [pc, #608]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800355e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003562:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003566:	4b96      	ldr	r3, [pc, #600]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003568:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	4993      	ldr	r1, [pc, #588]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003584:	4b8e      	ldr	r3, [pc, #568]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003592:	498b      	ldr	r1, [pc, #556]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035a6:	4b86      	ldr	r3, [pc, #536]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b4:	4982      	ldr	r1, [pc, #520]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035c8:	4b7d      	ldr	r3, [pc, #500]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035d6:	497a      	ldr	r1, [pc, #488]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ea:	4b75      	ldr	r3, [pc, #468]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f0:	f023 0203 	bic.w	r2, r3, #3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f8:	4971      	ldr	r1, [pc, #452]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800360c:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	f023 020c 	bic.w	r2, r3, #12
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	4969      	ldr	r1, [pc, #420]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800362e:	4b64      	ldr	r3, [pc, #400]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003634:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	4960      	ldr	r1, [pc, #384]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003650:	4b5b      	ldr	r3, [pc, #364]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003656:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	4958      	ldr	r1, [pc, #352]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003672:	4b53      	ldr	r3, [pc, #332]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003680:	494f      	ldr	r1, [pc, #316]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003694:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a2:	4947      	ldr	r1, [pc, #284]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036b6:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	493e      	ldr	r1, [pc, #248]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036d8:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e6:	4936      	ldr	r1, [pc, #216]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d011      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003700:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	492d      	ldr	r1, [pc, #180]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003714:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003718:	d101      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800371a:	2301      	movs	r3, #1
 800371c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372a:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003738:	4921      	ldr	r1, [pc, #132]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800374c:	4b1c      	ldr	r3, [pc, #112]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800375a:	4919      	ldr	r1, [pc, #100]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800376e:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800377c:	4910      	ldr	r1, [pc, #64]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d006      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 809d 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003798:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a08      	ldr	r2, [pc, #32]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800379e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a4:	f7fe fbb6 	bl	8001f14 <HAL_GetTick>
 80037a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037aa:	e00b      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037ac:	f7fe fbb2 	bl	8001f14 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	@ 0x64
 80037b8:	d904      	bls.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e116      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x688>
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037c4:	4b8b      	ldr	r3, [pc, #556]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1ed      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d017      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d113      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037e4:	4b83      	ldr	r3, [pc, #524]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ea:	0e1b      	lsrs	r3, r3, #24
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	019a      	lsls	r2, r3, #6
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	061b      	lsls	r3, r3, #24
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	071b      	lsls	r3, r3, #28
 8003804:	497b      	ldr	r1, [pc, #492]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800381c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d024      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003836:	d11f      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003838:	4b6e      	ldr	r3, [pc, #440]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800383a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383e:	0f1b      	lsrs	r3, r3, #28
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	019a      	lsls	r2, r3, #6
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	431a      	orrs	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	071b      	lsls	r3, r3, #28
 8003858:	4966      	ldr	r1, [pc, #408]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003860:	4b64      	ldr	r3, [pc, #400]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003866:	f023 021f 	bic.w	r2, r3, #31
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	3b01      	subs	r3, #1
 8003870:	4960      	ldr	r1, [pc, #384]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	019a      	lsls	r2, r3, #6
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	061b      	lsls	r3, r3, #24
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	071b      	lsls	r3, r3, #28
 8003898:	4956      	ldr	r1, [pc, #344]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038a0:	4b54      	ldr	r3, [pc, #336]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a53      	ldr	r2, [pc, #332]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fe fb32 	bl	8001f14 <HAL_GetTick>
 80038b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b4:	f7fe fb2e 	bl	8001f14 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	@ 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e092      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038c6:	4b4b      	ldr	r3, [pc, #300]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	f040 8088 	bne.w	80039ea <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038da:	4b46      	ldr	r3, [pc, #280]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a45      	ldr	r2, [pc, #276]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e6:	f7fe fb15 	bl	8001f14 <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038ec:	e008      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038ee:	f7fe fb11 	bl	8001f14 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b64      	cmp	r3, #100	@ 0x64
 80038fa:	d901      	bls.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e075      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003900:	4b3c      	ldr	r3, [pc, #240]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800390c:	d0ef      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800392a:	2b00      	cmp	r3, #0
 800392c:	d024      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	2b00      	cmp	r3, #0
 8003934:	d120      	bne.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003936:	4b2f      	ldr	r3, [pc, #188]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393c:	0c1b      	lsrs	r3, r3, #16
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	019a      	lsls	r2, r3, #6
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	041b      	lsls	r3, r3, #16
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	061b      	lsls	r3, r3, #24
 8003956:	4927      	ldr	r1, [pc, #156]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800395e:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003964:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	3b01      	subs	r3, #1
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	4920      	ldr	r1, [pc, #128]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d018      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800398c:	d113      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800398e:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003994:	0e1b      	lsrs	r3, r3, #24
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	019a      	lsls	r2, r3, #6
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	4911      	ldr	r1, [pc, #68]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039b6:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a0e      	ldr	r2, [pc, #56]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c2:	f7fe faa7 	bl	8001f14 <HAL_GetTick>
 80039c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039ca:	f7fe faa3 	bl	8001f14 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	@ 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e007      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e8:	d1ef      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800

080039f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e049      	b.n	8003a9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe f87a 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3304      	adds	r3, #4
 8003a34:	4619      	mov	r1, r3
 8003a36:	4610      	mov	r0, r2
 8003a38:	f000 f900 	bl	8003c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e0b4      	b.n	8003c2e <HAL_TIM_ConfigClockSource+0x186>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4b56      	ldr	r3, [pc, #344]	@ (8003c38 <HAL_TIM_ConfigClockSource+0x190>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003afc:	d03e      	beq.n	8003b7c <HAL_TIM_ConfigClockSource+0xd4>
 8003afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b02:	f200 8087 	bhi.w	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b0a:	f000 8086 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x172>
 8003b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b12:	d87f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b70      	cmp	r3, #112	@ 0x70
 8003b16:	d01a      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xa6>
 8003b18:	2b70      	cmp	r3, #112	@ 0x70
 8003b1a:	d87b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b60      	cmp	r3, #96	@ 0x60
 8003b1e:	d050      	beq.n	8003bc2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b20:	2b60      	cmp	r3, #96	@ 0x60
 8003b22:	d877      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b50      	cmp	r3, #80	@ 0x50
 8003b26:	d03c      	beq.n	8003ba2 <HAL_TIM_ConfigClockSource+0xfa>
 8003b28:	2b50      	cmp	r3, #80	@ 0x50
 8003b2a:	d873      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b40      	cmp	r3, #64	@ 0x40
 8003b2e:	d058      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b30:	2b40      	cmp	r3, #64	@ 0x40
 8003b32:	d86f      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b30      	cmp	r3, #48	@ 0x30
 8003b36:	d064      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b30      	cmp	r3, #48	@ 0x30
 8003b3a:	d86b      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b3c:	2b20      	cmp	r3, #32
 8003b3e:	d060      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d867      	bhi.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d05c      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d05a      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x15a>
 8003b4c:	e062      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b5e:	f000 f987 	bl	8003e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	609a      	str	r2, [r3, #8]
      break;
 8003b7a:	e04f      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b8c:	f000 f970 	bl	8003e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b9e:	609a      	str	r2, [r3, #8]
      break;
 8003ba0:	e03c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f000 f8e4 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2150      	movs	r1, #80	@ 0x50
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f93d 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003bc0:	e02c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f000 f903 	bl	8003dda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2160      	movs	r1, #96	@ 0x60
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f92d 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003be0:	e01c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 f8c4 	bl	8003d7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2140      	movs	r1, #64	@ 0x40
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f91d 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003c00:	e00c      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f000 f914 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003c12:	e003      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      break;
 8003c18:	e000      	b.n	8003c1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	fffeff88 	.word	0xfffeff88

08003c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a40      	ldr	r2, [pc, #256]	@ (8003d50 <TIM_Base_SetConfig+0x114>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5a:	d00f      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d54 <TIM_Base_SetConfig+0x118>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3c      	ldr	r2, [pc, #240]	@ (8003d58 <TIM_Base_SetConfig+0x11c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d5c <TIM_Base_SetConfig+0x120>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3a      	ldr	r2, [pc, #232]	@ (8003d60 <TIM_Base_SetConfig+0x124>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d108      	bne.n	8003c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2f      	ldr	r2, [pc, #188]	@ (8003d50 <TIM_Base_SetConfig+0x114>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9c:	d027      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <TIM_Base_SetConfig+0x118>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d023      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d58 <TIM_Base_SetConfig+0x11c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d5c <TIM_Base_SetConfig+0x120>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a29      	ldr	r2, [pc, #164]	@ (8003d60 <TIM_Base_SetConfig+0x124>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d017      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	@ (8003d64 <TIM_Base_SetConfig+0x128>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	@ (8003d68 <TIM_Base_SetConfig+0x12c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00f      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a26      	ldr	r2, [pc, #152]	@ (8003d6c <TIM_Base_SetConfig+0x130>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a25      	ldr	r2, [pc, #148]	@ (8003d70 <TIM_Base_SetConfig+0x134>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d007      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a24      	ldr	r2, [pc, #144]	@ (8003d74 <TIM_Base_SetConfig+0x138>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d003      	beq.n	8003cee <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a23      	ldr	r2, [pc, #140]	@ (8003d78 <TIM_Base_SetConfig+0x13c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d108      	bne.n	8003d00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <TIM_Base_SetConfig+0x114>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0xf8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d103      	bne.n	8003d3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	615a      	str	r2, [r3, #20]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40010400 	.word	0x40010400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40014400 	.word	0x40014400
 8003d6c:	40014800 	.word	0x40014800
 8003d70:	40001800 	.word	0x40001800
 8003d74:	40001c00 	.word	0x40001c00
 8003d78:	40002000 	.word	0x40002000

08003d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0201 	bic.w	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f023 030a 	bic.w	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b087      	sub	sp, #28
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f023 0210 	bic.w	r2, r3, #16
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	031b      	lsls	r3, r3, #12
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f043 0307 	orr.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e06d      	b.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a30      	ldr	r2, [pc, #192]	@ (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2f      	ldr	r2, [pc, #188]	@ (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d108      	bne.n	8003f0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a20      	ldr	r2, [pc, #128]	@ (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d022      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3a:	d01d      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d018      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d013      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00e      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a16      	ldr	r2, [pc, #88]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d10c      	bne.n	8003f92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40000400 	.word	0x40000400
 8003fbc:	40000800 	.word	0x40000800
 8003fc0:	40000c00 	.word	0x40000c00
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	40001800 	.word	0x40001800

08003fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e040      	b.n	8004060 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fd fdc4 	bl	8001b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	@ 0x24
 8003ff8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f82c 	bl	8004068 <UART_SetConfig>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e022      	b.n	8004060 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa84 	bl	8004530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 fb0b 	bl	8004674 <UART_CheckIdleState>
 800405e:	4603      	mov	r3, r0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4ba6      	ldr	r3, [pc, #664]	@ (800432c <UART_SetConfig+0x2c4>)
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	430b      	orrs	r3, r1
 800409e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a94      	ldr	r2, [pc, #592]	@ (8004330 <UART_SetConfig+0x2c8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d120      	bne.n	8004126 <UART_SetConfig+0xbe>
 80040e4:	4b93      	ldr	r3, [pc, #588]	@ (8004334 <UART_SetConfig+0x2cc>)
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d816      	bhi.n	8004120 <UART_SetConfig+0xb8>
 80040f2:	a201      	add	r2, pc, #4	@ (adr r2, 80040f8 <UART_SetConfig+0x90>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	08004109 	.word	0x08004109
 80040fc:	08004115 	.word	0x08004115
 8004100:	0800410f 	.word	0x0800410f
 8004104:	0800411b 	.word	0x0800411b
 8004108:	2301      	movs	r3, #1
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e150      	b.n	80043b0 <UART_SetConfig+0x348>
 800410e:	2302      	movs	r3, #2
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e14d      	b.n	80043b0 <UART_SetConfig+0x348>
 8004114:	2304      	movs	r3, #4
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e14a      	b.n	80043b0 <UART_SetConfig+0x348>
 800411a:	2308      	movs	r3, #8
 800411c:	77fb      	strb	r3, [r7, #31]
 800411e:	e147      	b.n	80043b0 <UART_SetConfig+0x348>
 8004120:	2310      	movs	r3, #16
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e144      	b.n	80043b0 <UART_SetConfig+0x348>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a83      	ldr	r2, [pc, #524]	@ (8004338 <UART_SetConfig+0x2d0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d132      	bne.n	8004196 <UART_SetConfig+0x12e>
 8004130:	4b80      	ldr	r3, [pc, #512]	@ (8004334 <UART_SetConfig+0x2cc>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d828      	bhi.n	8004190 <UART_SetConfig+0x128>
 800413e:	a201      	add	r2, pc, #4	@ (adr r2, 8004144 <UART_SetConfig+0xdc>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004179 	.word	0x08004179
 8004148:	08004191 	.word	0x08004191
 800414c:	08004191 	.word	0x08004191
 8004150:	08004191 	.word	0x08004191
 8004154:	08004185 	.word	0x08004185
 8004158:	08004191 	.word	0x08004191
 800415c:	08004191 	.word	0x08004191
 8004160:	08004191 	.word	0x08004191
 8004164:	0800417f 	.word	0x0800417f
 8004168:	08004191 	.word	0x08004191
 800416c:	08004191 	.word	0x08004191
 8004170:	08004191 	.word	0x08004191
 8004174:	0800418b 	.word	0x0800418b
 8004178:	2300      	movs	r3, #0
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e118      	b.n	80043b0 <UART_SetConfig+0x348>
 800417e:	2302      	movs	r3, #2
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e115      	b.n	80043b0 <UART_SetConfig+0x348>
 8004184:	2304      	movs	r3, #4
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e112      	b.n	80043b0 <UART_SetConfig+0x348>
 800418a:	2308      	movs	r3, #8
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e10f      	b.n	80043b0 <UART_SetConfig+0x348>
 8004190:	2310      	movs	r3, #16
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e10c      	b.n	80043b0 <UART_SetConfig+0x348>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a68      	ldr	r2, [pc, #416]	@ (800433c <UART_SetConfig+0x2d4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d120      	bne.n	80041e2 <UART_SetConfig+0x17a>
 80041a0:	4b64      	ldr	r3, [pc, #400]	@ (8004334 <UART_SetConfig+0x2cc>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041aa:	2b30      	cmp	r3, #48	@ 0x30
 80041ac:	d013      	beq.n	80041d6 <UART_SetConfig+0x16e>
 80041ae:	2b30      	cmp	r3, #48	@ 0x30
 80041b0:	d814      	bhi.n	80041dc <UART_SetConfig+0x174>
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d009      	beq.n	80041ca <UART_SetConfig+0x162>
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d810      	bhi.n	80041dc <UART_SetConfig+0x174>
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d002      	beq.n	80041c4 <UART_SetConfig+0x15c>
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d006      	beq.n	80041d0 <UART_SetConfig+0x168>
 80041c2:	e00b      	b.n	80041dc <UART_SetConfig+0x174>
 80041c4:	2300      	movs	r3, #0
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e0f2      	b.n	80043b0 <UART_SetConfig+0x348>
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e0ef      	b.n	80043b0 <UART_SetConfig+0x348>
 80041d0:	2304      	movs	r3, #4
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e0ec      	b.n	80043b0 <UART_SetConfig+0x348>
 80041d6:	2308      	movs	r3, #8
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e0e9      	b.n	80043b0 <UART_SetConfig+0x348>
 80041dc:	2310      	movs	r3, #16
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e0e6      	b.n	80043b0 <UART_SetConfig+0x348>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a56      	ldr	r2, [pc, #344]	@ (8004340 <UART_SetConfig+0x2d8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d120      	bne.n	800422e <UART_SetConfig+0x1c6>
 80041ec:	4b51      	ldr	r3, [pc, #324]	@ (8004334 <UART_SetConfig+0x2cc>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80041f8:	d013      	beq.n	8004222 <UART_SetConfig+0x1ba>
 80041fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80041fc:	d814      	bhi.n	8004228 <UART_SetConfig+0x1c0>
 80041fe:	2b80      	cmp	r3, #128	@ 0x80
 8004200:	d009      	beq.n	8004216 <UART_SetConfig+0x1ae>
 8004202:	2b80      	cmp	r3, #128	@ 0x80
 8004204:	d810      	bhi.n	8004228 <UART_SetConfig+0x1c0>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <UART_SetConfig+0x1a8>
 800420a:	2b40      	cmp	r3, #64	@ 0x40
 800420c:	d006      	beq.n	800421c <UART_SetConfig+0x1b4>
 800420e:	e00b      	b.n	8004228 <UART_SetConfig+0x1c0>
 8004210:	2300      	movs	r3, #0
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e0cc      	b.n	80043b0 <UART_SetConfig+0x348>
 8004216:	2302      	movs	r3, #2
 8004218:	77fb      	strb	r3, [r7, #31]
 800421a:	e0c9      	b.n	80043b0 <UART_SetConfig+0x348>
 800421c:	2304      	movs	r3, #4
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e0c6      	b.n	80043b0 <UART_SetConfig+0x348>
 8004222:	2308      	movs	r3, #8
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e0c3      	b.n	80043b0 <UART_SetConfig+0x348>
 8004228:	2310      	movs	r3, #16
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e0c0      	b.n	80043b0 <UART_SetConfig+0x348>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a44      	ldr	r2, [pc, #272]	@ (8004344 <UART_SetConfig+0x2dc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d125      	bne.n	8004284 <UART_SetConfig+0x21c>
 8004238:	4b3e      	ldr	r3, [pc, #248]	@ (8004334 <UART_SetConfig+0x2cc>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004246:	d017      	beq.n	8004278 <UART_SetConfig+0x210>
 8004248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424c:	d817      	bhi.n	800427e <UART_SetConfig+0x216>
 800424e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004252:	d00b      	beq.n	800426c <UART_SetConfig+0x204>
 8004254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004258:	d811      	bhi.n	800427e <UART_SetConfig+0x216>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <UART_SetConfig+0x1fe>
 800425e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004262:	d006      	beq.n	8004272 <UART_SetConfig+0x20a>
 8004264:	e00b      	b.n	800427e <UART_SetConfig+0x216>
 8004266:	2300      	movs	r3, #0
 8004268:	77fb      	strb	r3, [r7, #31]
 800426a:	e0a1      	b.n	80043b0 <UART_SetConfig+0x348>
 800426c:	2302      	movs	r3, #2
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e09e      	b.n	80043b0 <UART_SetConfig+0x348>
 8004272:	2304      	movs	r3, #4
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e09b      	b.n	80043b0 <UART_SetConfig+0x348>
 8004278:	2308      	movs	r3, #8
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e098      	b.n	80043b0 <UART_SetConfig+0x348>
 800427e:	2310      	movs	r3, #16
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e095      	b.n	80043b0 <UART_SetConfig+0x348>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2f      	ldr	r2, [pc, #188]	@ (8004348 <UART_SetConfig+0x2e0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d125      	bne.n	80042da <UART_SetConfig+0x272>
 800428e:	4b29      	ldr	r3, [pc, #164]	@ (8004334 <UART_SetConfig+0x2cc>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004294:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004298:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800429c:	d017      	beq.n	80042ce <UART_SetConfig+0x266>
 800429e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042a2:	d817      	bhi.n	80042d4 <UART_SetConfig+0x26c>
 80042a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a8:	d00b      	beq.n	80042c2 <UART_SetConfig+0x25a>
 80042aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ae:	d811      	bhi.n	80042d4 <UART_SetConfig+0x26c>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <UART_SetConfig+0x254>
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b8:	d006      	beq.n	80042c8 <UART_SetConfig+0x260>
 80042ba:	e00b      	b.n	80042d4 <UART_SetConfig+0x26c>
 80042bc:	2301      	movs	r3, #1
 80042be:	77fb      	strb	r3, [r7, #31]
 80042c0:	e076      	b.n	80043b0 <UART_SetConfig+0x348>
 80042c2:	2302      	movs	r3, #2
 80042c4:	77fb      	strb	r3, [r7, #31]
 80042c6:	e073      	b.n	80043b0 <UART_SetConfig+0x348>
 80042c8:	2304      	movs	r3, #4
 80042ca:	77fb      	strb	r3, [r7, #31]
 80042cc:	e070      	b.n	80043b0 <UART_SetConfig+0x348>
 80042ce:	2308      	movs	r3, #8
 80042d0:	77fb      	strb	r3, [r7, #31]
 80042d2:	e06d      	b.n	80043b0 <UART_SetConfig+0x348>
 80042d4:	2310      	movs	r3, #16
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e06a      	b.n	80043b0 <UART_SetConfig+0x348>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1b      	ldr	r2, [pc, #108]	@ (800434c <UART_SetConfig+0x2e4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d138      	bne.n	8004356 <UART_SetConfig+0x2ee>
 80042e4:	4b13      	ldr	r3, [pc, #76]	@ (8004334 <UART_SetConfig+0x2cc>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80042ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042f2:	d017      	beq.n	8004324 <UART_SetConfig+0x2bc>
 80042f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80042f8:	d82a      	bhi.n	8004350 <UART_SetConfig+0x2e8>
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fe:	d00b      	beq.n	8004318 <UART_SetConfig+0x2b0>
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004304:	d824      	bhi.n	8004350 <UART_SetConfig+0x2e8>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <UART_SetConfig+0x2aa>
 800430a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430e:	d006      	beq.n	800431e <UART_SetConfig+0x2b6>
 8004310:	e01e      	b.n	8004350 <UART_SetConfig+0x2e8>
 8004312:	2300      	movs	r3, #0
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e04b      	b.n	80043b0 <UART_SetConfig+0x348>
 8004318:	2302      	movs	r3, #2
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e048      	b.n	80043b0 <UART_SetConfig+0x348>
 800431e:	2304      	movs	r3, #4
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e045      	b.n	80043b0 <UART_SetConfig+0x348>
 8004324:	2308      	movs	r3, #8
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e042      	b.n	80043b0 <UART_SetConfig+0x348>
 800432a:	bf00      	nop
 800432c:	efff69f3 	.word	0xefff69f3
 8004330:	40011000 	.word	0x40011000
 8004334:	40023800 	.word	0x40023800
 8004338:	40004400 	.word	0x40004400
 800433c:	40004800 	.word	0x40004800
 8004340:	40004c00 	.word	0x40004c00
 8004344:	40005000 	.word	0x40005000
 8004348:	40011400 	.word	0x40011400
 800434c:	40007800 	.word	0x40007800
 8004350:	2310      	movs	r3, #16
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e02c      	b.n	80043b0 <UART_SetConfig+0x348>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a72      	ldr	r2, [pc, #456]	@ (8004524 <UART_SetConfig+0x4bc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d125      	bne.n	80043ac <UART_SetConfig+0x344>
 8004360:	4b71      	ldr	r3, [pc, #452]	@ (8004528 <UART_SetConfig+0x4c0>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800436a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800436e:	d017      	beq.n	80043a0 <UART_SetConfig+0x338>
 8004370:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004374:	d817      	bhi.n	80043a6 <UART_SetConfig+0x33e>
 8004376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437a:	d00b      	beq.n	8004394 <UART_SetConfig+0x32c>
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004380:	d811      	bhi.n	80043a6 <UART_SetConfig+0x33e>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <UART_SetConfig+0x326>
 8004386:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800438a:	d006      	beq.n	800439a <UART_SetConfig+0x332>
 800438c:	e00b      	b.n	80043a6 <UART_SetConfig+0x33e>
 800438e:	2300      	movs	r3, #0
 8004390:	77fb      	strb	r3, [r7, #31]
 8004392:	e00d      	b.n	80043b0 <UART_SetConfig+0x348>
 8004394:	2302      	movs	r3, #2
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e00a      	b.n	80043b0 <UART_SetConfig+0x348>
 800439a:	2304      	movs	r3, #4
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e007      	b.n	80043b0 <UART_SetConfig+0x348>
 80043a0:	2308      	movs	r3, #8
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e004      	b.n	80043b0 <UART_SetConfig+0x348>
 80043a6:	2310      	movs	r3, #16
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e001      	b.n	80043b0 <UART_SetConfig+0x348>
 80043ac:	2310      	movs	r3, #16
 80043ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043b8:	d15b      	bne.n	8004472 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043ba:	7ffb      	ldrb	r3, [r7, #31]
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d828      	bhi.n	8004412 <UART_SetConfig+0x3aa>
 80043c0:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <UART_SetConfig+0x360>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043fd 	.word	0x080043fd
 80043d4:	08004413 	.word	0x08004413
 80043d8:	08004403 	.word	0x08004403
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004413 	.word	0x08004413
 80043e4:	08004413 	.word	0x08004413
 80043e8:	0800440b 	.word	0x0800440b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7fe ff92 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80043f0:	61b8      	str	r0, [r7, #24]
        break;
 80043f2:	e013      	b.n	800441c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7fe ffa2 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 80043f8:	61b8      	str	r0, [r7, #24]
        break;
 80043fa:	e00f      	b.n	800441c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fc:	4b4b      	ldr	r3, [pc, #300]	@ (800452c <UART_SetConfig+0x4c4>)
 80043fe:	61bb      	str	r3, [r7, #24]
        break;
 8004400:	e00c      	b.n	800441c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004402:	f7fe fe75 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 8004406:	61b8      	str	r0, [r7, #24]
        break;
 8004408:	e008      	b.n	800441c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800440e:	61bb      	str	r3, [r7, #24]
        break;
 8004410:	e004      	b.n	800441c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	77bb      	strb	r3, [r7, #30]
        break;
 800441a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d074      	beq.n	800450c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	005a      	lsls	r2, r3, #1
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	441a      	add	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b0f      	cmp	r3, #15
 800443c:	d916      	bls.n	800446c <UART_SetConfig+0x404>
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004444:	d212      	bcs.n	800446c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f023 030f 	bic.w	r3, r3, #15
 800444e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	b29a      	uxth	r2, r3
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	4313      	orrs	r3, r2
 8004460:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	89fa      	ldrh	r2, [r7, #14]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	e04f      	b.n	800450c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	77bb      	strb	r3, [r7, #30]
 8004470:	e04c      	b.n	800450c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004472:	7ffb      	ldrb	r3, [r7, #31]
 8004474:	2b08      	cmp	r3, #8
 8004476:	d828      	bhi.n	80044ca <UART_SetConfig+0x462>
 8004478:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <UART_SetConfig+0x418>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044a5 	.word	0x080044a5
 8004484:	080044ad 	.word	0x080044ad
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044cb 	.word	0x080044cb
 8004490:	080044bb 	.word	0x080044bb
 8004494:	080044cb 	.word	0x080044cb
 8004498:	080044cb 	.word	0x080044cb
 800449c:	080044cb 	.word	0x080044cb
 80044a0:	080044c3 	.word	0x080044c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a4:	f7fe ff36 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80044a8:	61b8      	str	r0, [r7, #24]
        break;
 80044aa:	e013      	b.n	80044d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ac:	f7fe ff46 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 80044b0:	61b8      	str	r0, [r7, #24]
        break;
 80044b2:	e00f      	b.n	80044d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b4:	4b1d      	ldr	r3, [pc, #116]	@ (800452c <UART_SetConfig+0x4c4>)
 80044b6:	61bb      	str	r3, [r7, #24]
        break;
 80044b8:	e00c      	b.n	80044d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe fe19 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80044be:	61b8      	str	r0, [r7, #24]
        break;
 80044c0:	e008      	b.n	80044d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c6:	61bb      	str	r3, [r7, #24]
        break;
 80044c8:	e004      	b.n	80044d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	77bb      	strb	r3, [r7, #30]
        break;
 80044d2:	bf00      	nop
    }

    if (pclk != 0U)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	085a      	lsrs	r2, r3, #1
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	441a      	add	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b0f      	cmp	r3, #15
 80044f2:	d909      	bls.n	8004508 <UART_SetConfig+0x4a0>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044fa:	d205      	bcs.n	8004508 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	e001      	b.n	800450c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004518:	7fbb      	ldrb	r3, [r7, #30]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3720      	adds	r7, #32
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40007c00 	.word	0x40007c00
 8004528:	40023800 	.word	0x40023800
 800452c:	00f42400 	.word	0x00f42400

08004530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01a      	beq.n	8004646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800462e:	d10a      	bne.n	8004646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af02      	add	r7, sp, #8
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004684:	f7fd fc46 	bl	8001f14 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b08      	cmp	r3, #8
 8004696:	d10e      	bne.n	80046b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004698:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f81b 	bl	80046e2 <UART_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e011      	b.n	80046da <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b09c      	sub	sp, #112	@ 0x70
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f2:	e0a7      	b.n	8004844 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046fa:	f000 80a3 	beq.w	8004844 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fd fc09 	bl	8001f14 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <UART_WaitOnFlagUntilTimeout+0x32>
 800470e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004710:	2b00      	cmp	r3, #0
 8004712:	d13f      	bne.n	8004794 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004724:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004728:	667b      	str	r3, [r7, #100]	@ 0x64
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	461a      	mov	r2, r3
 8004730:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004734:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004738:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8004740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e6      	bne.n	8004714 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3308      	adds	r3, #8
 800474c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	663b      	str	r3, [r7, #96]	@ 0x60
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004766:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004768:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800476c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e068      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d050      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b0:	d148      	bne.n	8004844 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80047d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047da:	637b      	str	r3, [r7, #52]	@ 0x34
 80047dc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80047e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e6      	bne.n	80047bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	613b      	str	r3, [r7, #16]
   return(result);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3308      	adds	r3, #8
 800480c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800480e:	623a      	str	r2, [r7, #32]
 8004810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	69f9      	ldr	r1, [r7, #28]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	61bb      	str	r3, [r7, #24]
   return(result);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e5      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e010      	b.n	8004866 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	429a      	cmp	r2, r3
 8004860:	f43f af48 	beq.w	80046f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3770      	adds	r7, #112	@ 0x70
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004870:	b084      	sub	sp, #16
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	f107 001c 	add.w	r0, r7, #28
 800487e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d126      	bne.n	80048d6 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	4b38      	ldr	r3, [pc, #224]	@ (800497c <USB_CoreInit+0x10c>)
 800489a:	4013      	ands	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f043 0210 	orr.w	r2, r3, #16
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fad0 	bl	8004e70 <USB_CoreReset>
 80048d0:	4603      	mov	r3, r0
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e03a      	b.n	800494c <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d126      	bne.n	800492a <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	4b23      	ldr	r3, [pc, #140]	@ (800497c <USB_CoreInit+0x10c>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f023 0210 	bic.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 800490c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d105      	bne.n	800491e <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 faa6 	bl	8004e70 <USB_CoreReset>
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]
 8004928:	e010      	b.n	800494c <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa9a 	bl	8004e70 <USB_CoreReset>
 800493c:	4603      	mov	r3, r0
 800493e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800494c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494e:	2b01      	cmp	r3, #1
 8004950:	d10b      	bne.n	800496a <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f043 0206 	orr.w	r2, r3, #6
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800496a:	7bfb      	ldrb	r3, [r7, #15]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004976:	b004      	add	sp, #16
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	ffbdffbf 	.word	0xffbdffbf

08004980 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 0201 	bic.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	460b      	mov	r3, r1
 80049ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d115      	bne.n	80049f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049d0:	2001      	movs	r0, #1
 80049d2:	f7fd faab 	bl	8001f2c <HAL_Delay>
      ms++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa39 	bl	8004e54 <USB_GetMode>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d01e      	beq.n	8004a26 <USB_SetCurrentMode+0x84>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b31      	cmp	r3, #49	@ 0x31
 80049ec:	d9f0      	bls.n	80049d0 <USB_SetCurrentMode+0x2e>
 80049ee:	e01a      	b.n	8004a26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d115      	bne.n	8004a22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a02:	2001      	movs	r0, #1
 8004a04:	f7fd fa92 	bl	8001f2c <HAL_Delay>
      ms++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa20 	bl	8004e54 <USB_GetMode>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <USB_SetCurrentMode+0x84>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b31      	cmp	r3, #49	@ 0x31
 8004a1e:	d9f0      	bls.n	8004a02 <USB_SetCurrentMode+0x60>
 8004a20:	e001      	b.n	8004a26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e005      	b.n	8004a32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b32      	cmp	r3, #50	@ 0x32
 8004a2a:	d101      	bne.n	8004a30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e009      	b.n	8004a70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	3340      	adds	r3, #64	@ 0x40
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	2200      	movs	r2, #0
 8004a68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b0e      	cmp	r3, #14
 8004a74:	d9f2      	bls.n	8004a5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d11c      	bne.n	8004ab6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a8a:	f043 0302 	orr.w	r3, r3, #2
 8004a8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a94:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e005      	b.n	8004ac2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2300      	movs	r3, #0
 8004acc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004adc:	461a      	mov	r2, r3
 8004ade:	680b      	ldr	r3, [r1, #0]
 8004ae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10c      	bne.n	8004b02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004aee:	2100      	movs	r1, #0
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f975 	bl	8004de0 <USB_SetDevSpeed>
 8004af6:	e018      	b.n	8004b2a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004af8:	2101      	movs	r1, #1
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f970 	bl	8004de0 <USB_SetDevSpeed>
 8004b00:	e013      	b.n	8004b2a <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d10c      	bne.n	8004b22 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f965 	bl	8004de0 <USB_SetDevSpeed>
 8004b16:	e008      	b.n	8004b2a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b18:	2101      	movs	r1, #1
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f960 	bl	8004de0 <USB_SetDevSpeed>
 8004b20:	e003      	b.n	8004b2a <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b22:	2103      	movs	r1, #3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f95b 	bl	8004de0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f8f3 	bl	8004d18 <USB_FlushTxFifo>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f91f 	bl	8004d80 <USB_FlushRxFifo>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b52:	461a      	mov	r2, r3
 8004b54:	2300      	movs	r3, #0
 8004b56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5e:	461a      	mov	r2, r3
 8004b60:	2300      	movs	r3, #0
 8004b62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b70:	2300      	movs	r3, #0
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	e043      	b.n	8004bfe <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b8c:	d118      	bne.n	8004bc0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e013      	b.n	8004bd2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e008      	b.n	8004bd2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bde:	461a      	mov	r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bf6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d3b7      	bcc.n	8004b76 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	e043      	b.n	8004c94 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c22:	d118      	bne.n	8004c56 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c36:	461a      	mov	r2, r3
 8004c38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	e013      	b.n	8004c68 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e008      	b.n	8004c68 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c62:	461a      	mov	r2, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c74:	461a      	mov	r2, r3
 8004c76:	2300      	movs	r3, #0
 8004c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c86:	461a      	mov	r2, r3
 8004c88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	3301      	adds	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d3b7      	bcc.n	8004c0c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004caa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004cbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d105      	bne.n	8004cd0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f043 0210 	orr.w	r2, r3, #16
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699a      	ldr	r2, [r3, #24]
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d10 <USB_DevInit+0x2d4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f043 0208 	orr.w	r2, r3, #8
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d105      	bne.n	8004d00 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <USB_DevInit+0x2d8>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d0c:	b004      	add	sp, #16
 8004d0e:	4770      	bx	lr
 8004d10:	803c3800 	.word	0x803c3800
 8004d14:	40000004 	.word	0x40000004

08004d18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <USB_FlushTxFifo+0x64>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e01b      	b.n	8004d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	daf2      	bge.n	8004d26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	019b      	lsls	r3, r3, #6
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3301      	adds	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4a08      	ldr	r2, [pc, #32]	@ (8004d7c <USB_FlushTxFifo+0x64>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e006      	b.n	8004d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b20      	cmp	r3, #32
 8004d6c:	d0f0      	beq.n	8004d50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	00030d40 	.word	0x00030d40

08004d80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a11      	ldr	r2, [pc, #68]	@ (8004ddc <USB_FlushRxFifo+0x5c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e018      	b.n	8004dd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	daf2      	bge.n	8004d8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2210      	movs	r2, #16
 8004dae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3301      	adds	r3, #1
 8004db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a08      	ldr	r2, [pc, #32]	@ (8004ddc <USB_FlushRxFifo+0x5c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e006      	b.n	8004dd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d0f0      	beq.n	8004db0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	00030d40 	.word	0x00030d40

08004de0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e2c:	f023 0303 	bic.w	r3, r3, #3
 8004e30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e40:	f043 0302 	orr.w	r3, r3, #2
 8004e44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0301 	and.w	r3, r3, #1
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a13      	ldr	r2, [pc, #76]	@ (8004ed4 <USB_CoreReset+0x64>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e01b      	b.n	8004ec6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	daf2      	bge.n	8004e7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f043 0201 	orr.w	r2, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	4a09      	ldr	r2, [pc, #36]	@ (8004ed4 <USB_CoreReset+0x64>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e006      	b.n	8004ec6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d0f0      	beq.n	8004ea6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	00030d40 	.word	0x00030d40

08004ed8 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	@ 0x30
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t n_fft = S->FFTLen;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *scratch_buffer = S->pScratch;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6899      	ldr	r1, [r3, #8]
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	68b8      	ldr	r0, [r7, #8]
 8004f00:	f001 f8f2 	bl	80060e8 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8004f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	18d0      	adds	r0, r2, r3
 8004f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	2100      	movs	r1, #0
 8004f16:	f005 fc2b 	bl	800a770 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6818      	ldr	r0, [r3, #0]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	6a3a      	ldr	r2, [r7, #32]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	f000 fc24 	bl	8005770 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	ed93 7a00 	vldr	s14, [r3]
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	edd3 7a00 	vldr	s15, [r3]
 8004f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f38:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	ed93 7a00 	vldr	s14, [r3]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	3304      	adds	r3, #4
 8004f48:	edd3 7a00 	vldr	s15, [r3]
 8004f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f50:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f103 0008 	add.w	r0, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	1d19      	adds	r1, r3, #4
 8004f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f001 f864 	bl	8006038 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4413      	add	r3, r2
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	791b      	ldrb	r3, [r3, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d12c      	bne.n	8004fe0 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004f86:	2300      	movs	r3, #0
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f8a:	e023      	b.n	8004fd4 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8004f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4413      	add	r3, r2
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	440b      	add	r3, r1
 8004f9e:	617a      	str	r2, [r7, #20]
 8004fa0:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8004fa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fae:	db09      	blt.n	8004fc4 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8004fb0:	ed97 0a05 	vldr	s0, [r7, #20]
 8004fb4:	f007 faee 	bl	800c594 <sqrtf>
 8004fb8:	eef0 7a40 	vmov.f32	s15, s0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8004fc2:	e004      	b.n	8004fce <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004fcc:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	3301      	adds	r3, #1
 8004fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d3d5      	bcc.n	8004f8c <SpectrogramColumn+0xb4>
    }
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3730      	adds	r7, #48	@ 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff67 	bl	8004ed8 <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f804 	bl	8005020 <MelFilterbank>
}
 8005018:	bf00      	nop
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8005020:	b480      	push	{r7}
 8005022:	b08d      	sub	sp, #52	@ 0x34
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t n_mels = M->NumMels;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8005044:	2300      	movs	r3, #0
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
 8005048:	e034      	b.n	80050b4 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4413      	add	r3, r2
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005068:	8a7b      	ldrh	r3, [r7, #18]
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	e015      	b.n	800509a <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4413      	add	r3, r2
 8005076:	ed93 7a00 	vldr	s14, [r3]
 800507a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005080:	edd3 7a00 	vldr	s15, [r3]
 8005084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005088:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800508c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005090:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	3301      	adds	r3, #1
 8005098:	623b      	str	r3, [r7, #32]
 800509a:	8a3b      	ldrh	r3, [r7, #16]
 800509c:	6a3a      	ldr	r2, [r7, #32]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d9e5      	bls.n	800506e <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	4413      	add	r3, r2
 80050aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050ac:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	3301      	adds	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d3c6      	bcc.n	800504a <MelFilterbank+0x2a>
  }
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	3734      	adds	r7, #52	@ 0x34
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
	...

080050cc <network_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_1_activations_map, 1, params)) {
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	4841      	ldr	r0, [pc, #260]	@ (80051e0 <network_1_configure_activations+0x114>)
 80050dc:	f001 fbe6 	bl	80068ac <ai_platform_get_activations_map>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d071      	beq.n	80051ca <network_1_configure_activations+0xfe>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80050e6:	4b3e      	ldr	r3, [pc, #248]	@ (80051e0 <network_1_configure_activations+0x114>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3e      	ldr	r2, [pc, #248]	@ (80051e4 <network_1_configure_activations+0x118>)
 80050ec:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 80050ee:	4b3c      	ldr	r3, [pc, #240]	@ (80051e0 <network_1_configure_activations+0x114>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a3c      	ldr	r2, [pc, #240]	@ (80051e4 <network_1_configure_activations+0x118>)
 80050f4:	60d3      	str	r3, [r2, #12]
    
    conv2d_conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 3840);
 80050f6:	4b3a      	ldr	r3, [pc, #232]	@ (80051e0 <network_1_configure_activations+0x114>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 80050fe:	4a3a      	ldr	r2, [pc, #232]	@ (80051e8 <network_1_configure_activations+0x11c>)
 8005100:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 3840);
 8005102:	4b37      	ldr	r3, [pc, #220]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 800510a:	4a37      	ldr	r2, [pc, #220]	@ (80051e8 <network_1_configure_activations+0x11c>)
 800510c:	60d3      	str	r3, [r2, #12]
    
    conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 3840);
 800510e:	4b34      	ldr	r3, [pc, #208]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 8005116:	4a35      	ldr	r2, [pc, #212]	@ (80051ec <network_1_configure_activations+0x120>)
 8005118:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 3840);
 800511a:	4b31      	ldr	r3, [pc, #196]	@ (80051e0 <network_1_configure_activations+0x114>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 8005122:	4a32      	ldr	r2, [pc, #200]	@ (80051ec <network_1_configure_activations+0x120>)
 8005124:	60d3      	str	r3, [r2, #12]
    
    max_pooling2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 3840);
 8005126:	4b2e      	ldr	r3, [pc, #184]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 800512e:	4a30      	ldr	r2, [pc, #192]	@ (80051f0 <network_1_configure_activations+0x124>)
 8005130:	6093      	str	r3, [r2, #8]
    max_pooling2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 3840);
 8005132:	4b2b      	ldr	r3, [pc, #172]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 800513a:	4a2d      	ldr	r2, [pc, #180]	@ (80051f0 <network_1_configure_activations+0x124>)
 800513c:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 17280);
 800513e:	4b28      	ldr	r3, [pc, #160]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f503 4387 	add.w	r3, r3, #17280	@ 0x4380
 8005146:	4a2b      	ldr	r2, [pc, #172]	@ (80051f4 <network_1_configure_activations+0x128>)
 8005148:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 17280);
 800514a:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <network_1_configure_activations+0x114>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f503 4387 	add.w	r3, r3, #17280	@ 0x4380
 8005152:	4a28      	ldr	r2, [pc, #160]	@ (80051f4 <network_1_configure_activations+0x128>)
 8005154:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 8005156:	4b22      	ldr	r3, [pc, #136]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a27      	ldr	r2, [pc, #156]	@ (80051f8 <network_1_configure_activations+0x12c>)
 800515c:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800515e:	4b20      	ldr	r3, [pc, #128]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a25      	ldr	r2, [pc, #148]	@ (80051f8 <network_1_configure_activations+0x12c>)
 8005164:	60d3      	str	r3, [r2, #12]
    
    max_pooling2d_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 9984);
 8005166:	4b1e      	ldr	r3, [pc, #120]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800516e:	4a23      	ldr	r2, [pc, #140]	@ (80051fc <network_1_configure_activations+0x130>)
 8005170:	6093      	str	r3, [r2, #8]
    max_pooling2d_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 9984);
 8005172:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800517a:	4a20      	ldr	r2, [pc, #128]	@ (80051fc <network_1_configure_activations+0x130>)
 800517c:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 800517e:	4b18      	ldr	r3, [pc, #96]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1f      	ldr	r2, [pc, #124]	@ (8005200 <network_1_configure_activations+0x134>)
 8005184:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 8005186:	4b16      	ldr	r3, [pc, #88]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <network_1_configure_activations+0x134>)
 800518c:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 100);
 800518e:	4b14      	ldr	r3, [pc, #80]	@ (80051e0 <network_1_configure_activations+0x114>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3364      	adds	r3, #100	@ 0x64
 8005194:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <network_1_configure_activations+0x138>)
 8005196:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 100);
 8005198:	4b11      	ldr	r3, [pc, #68]	@ (80051e0 <network_1_configure_activations+0x114>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3364      	adds	r3, #100	@ 0x64
 800519e:	4a19      	ldr	r2, [pc, #100]	@ (8005204 <network_1_configure_activations+0x138>)
 80051a0:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80051a2:	4b0f      	ldr	r3, [pc, #60]	@ (80051e0 <network_1_configure_activations+0x114>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a18      	ldr	r2, [pc, #96]	@ (8005208 <network_1_configure_activations+0x13c>)
 80051a8:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 80051aa:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <network_1_configure_activations+0x114>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a16      	ldr	r2, [pc, #88]	@ (8005208 <network_1_configure_activations+0x13c>)
 80051b0:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 20);
 80051b2:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <network_1_configure_activations+0x114>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	4a14      	ldr	r2, [pc, #80]	@ (800520c <network_1_configure_activations+0x140>)
 80051ba:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 20);
 80051bc:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <network_1_configure_activations+0x114>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3314      	adds	r3, #20
 80051c2:	4a12      	ldr	r2, [pc, #72]	@ (800520c <network_1_configure_activations+0x140>)
 80051c4:	60d3      	str	r3, [r2, #12]
    
    return true;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e005      	b.n	80051d6 <network_1_configure_activations+0x10a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80051ca:	2213      	movs	r2, #19
 80051cc:	2130      	movs	r1, #48	@ 0x30
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f001 fcea 	bl	8006ba8 <ai_platform_network_set_error>
  return false;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20010468 	.word	0x20010468
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	2000001c 	.word	0x2000001c
 80051ec:	2000002c 	.word	0x2000002c
 80051f0:	2000003c 	.word	0x2000003c
 80051f4:	2000004c 	.word	0x2000004c
 80051f8:	2000005c 	.word	0x2000005c
 80051fc:	2000006c 	.word	0x2000006c
 8005200:	2000007c 	.word	0x2000007c
 8005204:	2000008c 	.word	0x2000008c
 8005208:	2000009c 	.word	0x2000009c
 800520c:	200000ac 	.word	0x200000ac

08005210 <network_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_1_weights_map, 1, params)) {
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	2101      	movs	r1, #1
 800521e:	484f      	ldr	r0, [pc, #316]	@ (800535c <network_1_configure_weights+0x14c>)
 8005220:	f001 faec 	bl	80067fc <ai_platform_get_weights_map>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 808e 	beq.w	8005348 <network_1_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800522c:	4b4c      	ldr	r3, [pc, #304]	@ (8005360 <network_1_configure_weights+0x150>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005234:	4a4a      	ldr	r2, [pc, #296]	@ (8005360 <network_1_configure_weights+0x150>)
 8005236:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 0);
 8005238:	4b48      	ldr	r3, [pc, #288]	@ (800535c <network_1_configure_weights+0x14c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a48      	ldr	r2, [pc, #288]	@ (8005360 <network_1_configure_weights+0x150>)
 800523e:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 0);
 8005240:	4b46      	ldr	r3, [pc, #280]	@ (800535c <network_1_configure_weights+0x14c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a46      	ldr	r2, [pc, #280]	@ (8005360 <network_1_configure_weights+0x150>)
 8005246:	60d3      	str	r3, [r2, #12]
    
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005248:	4b46      	ldr	r3, [pc, #280]	@ (8005364 <network_1_configure_weights+0x154>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005250:	4a44      	ldr	r2, [pc, #272]	@ (8005364 <network_1_configure_weights+0x154>)
 8005252:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 576);
 8005254:	4b41      	ldr	r3, [pc, #260]	@ (800535c <network_1_configure_weights+0x14c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800525c:	4a41      	ldr	r2, [pc, #260]	@ (8005364 <network_1_configure_weights+0x154>)
 800525e:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 576);
 8005260:	4b3e      	ldr	r3, [pc, #248]	@ (800535c <network_1_configure_weights+0x14c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005268:	4a3e      	ldr	r2, [pc, #248]	@ (8005364 <network_1_configure_weights+0x154>)
 800526a:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 800526c:	4b3e      	ldr	r3, [pc, #248]	@ (8005368 <network_1_configure_weights+0x158>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005274:	4a3c      	ldr	r2, [pc, #240]	@ (8005368 <network_1_configure_weights+0x158>)
 8005276:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 640);
 8005278:	4b38      	ldr	r3, [pc, #224]	@ (800535c <network_1_configure_weights+0x14c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8005280:	4a39      	ldr	r2, [pc, #228]	@ (8005368 <network_1_configure_weights+0x158>)
 8005282:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 640);
 8005284:	4b35      	ldr	r3, [pc, #212]	@ (800535c <network_1_configure_weights+0x14c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800528c:	4a36      	ldr	r2, [pc, #216]	@ (8005368 <network_1_configure_weights+0x158>)
 800528e:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8005290:	4b36      	ldr	r3, [pc, #216]	@ (800536c <network_1_configure_weights+0x15c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005298:	4a34      	ldr	r2, [pc, #208]	@ (800536c <network_1_configure_weights+0x15c>)
 800529a:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 9856);
 800529c:	4b2f      	ldr	r3, [pc, #188]	@ (800535c <network_1_configure_weights+0x14c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 80052a4:	4a31      	ldr	r2, [pc, #196]	@ (800536c <network_1_configure_weights+0x15c>)
 80052a6:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 9856);
 80052a8:	4b2c      	ldr	r3, [pc, #176]	@ (800535c <network_1_configure_weights+0x14c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 80052b0:	4a2e      	ldr	r2, [pc, #184]	@ (800536c <network_1_configure_weights+0x15c>)
 80052b2:	60d3      	str	r3, [r2, #12]
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80052b4:	4b2e      	ldr	r3, [pc, #184]	@ (8005370 <network_1_configure_weights+0x160>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005370 <network_1_configure_weights+0x160>)
 80052be:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 9920);
 80052c0:	4b26      	ldr	r3, [pc, #152]	@ (800535c <network_1_configure_weights+0x14c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 80052c8:	4a29      	ldr	r2, [pc, #164]	@ (8005370 <network_1_configure_weights+0x160>)
 80052ca:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 9920);
 80052cc:	4b23      	ldr	r3, [pc, #140]	@ (800535c <network_1_configure_weights+0x14c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 80052d4:	4a26      	ldr	r2, [pc, #152]	@ (8005370 <network_1_configure_weights+0x160>)
 80052d6:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80052d8:	4b26      	ldr	r3, [pc, #152]	@ (8005374 <network_1_configure_weights+0x164>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052e0:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <network_1_configure_weights+0x164>)
 80052e2:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 67520);
 80052e4:	4b1d      	ldr	r3, [pc, #116]	@ (800535c <network_1_configure_weights+0x14c>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b23      	ldr	r3, [pc, #140]	@ (8005378 <network_1_configure_weights+0x168>)
 80052ea:	4413      	add	r3, r2
 80052ec:	4a21      	ldr	r2, [pc, #132]	@ (8005374 <network_1_configure_weights+0x164>)
 80052ee:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 67520);
 80052f0:	4b1a      	ldr	r3, [pc, #104]	@ (800535c <network_1_configure_weights+0x14c>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <network_1_configure_weights+0x168>)
 80052f6:	4413      	add	r3, r2
 80052f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005374 <network_1_configure_weights+0x164>)
 80052fa:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80052fc:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <network_1_configure_weights+0x16c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005304:	4a1d      	ldr	r2, [pc, #116]	@ (800537c <network_1_configure_weights+0x16c>)
 8005306:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 67620);
 8005308:	4b14      	ldr	r3, [pc, #80]	@ (800535c <network_1_configure_weights+0x14c>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4b1c      	ldr	r3, [pc, #112]	@ (8005380 <network_1_configure_weights+0x170>)
 800530e:	4413      	add	r3, r2
 8005310:	4a1a      	ldr	r2, [pc, #104]	@ (800537c <network_1_configure_weights+0x16c>)
 8005312:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 67620);
 8005314:	4b11      	ldr	r3, [pc, #68]	@ (800535c <network_1_configure_weights+0x14c>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	4b19      	ldr	r3, [pc, #100]	@ (8005380 <network_1_configure_weights+0x170>)
 800531a:	4413      	add	r3, r2
 800531c:	4a17      	ldr	r2, [pc, #92]	@ (800537c <network_1_configure_weights+0x16c>)
 800531e:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8005320:	4b18      	ldr	r3, [pc, #96]	@ (8005384 <network_1_configure_weights+0x174>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005328:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <network_1_configure_weights+0x174>)
 800532a:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 68120);
 800532c:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <network_1_configure_weights+0x14c>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b15      	ldr	r3, [pc, #84]	@ (8005388 <network_1_configure_weights+0x178>)
 8005332:	4413      	add	r3, r2
 8005334:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <network_1_configure_weights+0x174>)
 8005336:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 68120);
 8005338:	4b08      	ldr	r3, [pc, #32]	@ (800535c <network_1_configure_weights+0x14c>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4b12      	ldr	r3, [pc, #72]	@ (8005388 <network_1_configure_weights+0x178>)
 800533e:	4413      	add	r3, r2
 8005340:	4a10      	ldr	r2, [pc, #64]	@ (8005384 <network_1_configure_weights+0x174>)
 8005342:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005344:	2301      	movs	r3, #1
 8005346:	e005      	b.n	8005354 <network_1_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005348:	2212      	movs	r2, #18
 800534a:	2130      	movs	r1, #48	@ 0x30
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 fc2b 	bl	8006ba8 <ai_platform_network_set_error>
  return false;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	2001046c 	.word	0x2001046c
 8005360:	200000bc 	.word	0x200000bc
 8005364:	200000cc 	.word	0x200000cc
 8005368:	200000dc 	.word	0x200000dc
 800536c:	200000ec 	.word	0x200000ec
 8005370:	200000fc 	.word	0x200000fc
 8005374:	2000010c 	.word	0x2000010c
 8005378:	000107c0 	.word	0x000107c0
 800537c:	2000011c 	.word	0x2000011c
 8005380:	00010824 	.word	0x00010824
 8005384:	2000012c 	.word	0x2000012c
 8005388:	00010a18 	.word	0x00010a18

0800538c <ai_network_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_1_get_error(ai_handle network)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f001 fafb 	bl	8006990 <ai_platform_network_get_error>
 800539a:	4603      	mov	r3, r0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <ai_network_1_create>:

AI_API_ENTRY
ai_error ai_network_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80053ae:	2300      	movs	r3, #0
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	2305      	movs	r3, #5
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2301      	movs	r3, #1
 80053b8:	4a04      	ldr	r2, [pc, #16]	@ (80053cc <ai_network_1_create+0x28>)
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 ff0d 	bl	80071dc <ai_platform_network_create>
 80053c2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20000a84 	.word	0x20000a84

080053d0 <ai_network_1_create_and_init>:

AI_API_ENTRY
ai_error ai_network_1_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b096      	sub	sp, #88	@ 0x58
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_1_create(network, AI_NETWORK_1_DATA_CONFIG);
 80053dc:	2100      	movs	r1, #0
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff ffe0 	bl	80053a4 <ai_network_1_create>
 80053e4:	4603      	mov	r3, r0
 80053e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (err.type != AI_ERROR_NONE)
 80053e8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <ai_network_1_create_and_init+0x24>
        return err;
 80053f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053f2:	e05d      	b.n	80054b0 <ai_network_1_create_and_init+0xe0>
    if (ai_network_1_data_params_get(&params) != true) {
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 f8dd 	bl	80055b8 <ai_network_1_data_params_get>
 80053fe:	4603      	mov	r3, r0
 8005400:	f083 0301 	eor.w	r3, r3, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <ai_network_1_create_and_init+0x4c>
        err = ai_network_1_get_error(*network);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff ffbc 	bl	800538c <ai_network_1_get_error>
 8005414:	4603      	mov	r3, r0
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
        return err;
 8005418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800541a:	e049      	b.n	80054b0 <ai_network_1_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_1_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d016      	beq.n	8005450 <ai_network_1_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005422:	2300      	movs	r3, #0
 8005424:	657b      	str	r3, [r7, #84]	@ 0x54
 8005426:	e00e      	b.n	8005446 <ai_network_1_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005428:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800542a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	4413      	add	r3, r2
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	f107 0314 	add.w	r3, r7, #20
 8005438:	330c      	adds	r3, #12
 800543a:	4618      	mov	r0, r3
 800543c:	f001 f9ca 	bl	80067d4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005442:	3301      	adds	r3, #1
 8005444:	657b      	str	r3, [r7, #84]	@ 0x54
 8005446:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005448:	461a      	mov	r2, r3
 800544a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544c:	4293      	cmp	r3, r2
 800544e:	dbeb      	blt.n	8005428 <ai_network_1_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_1_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <ai_network_1_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005456:	2300      	movs	r3, #0
 8005458:	653b      	str	r3, [r7, #80]	@ 0x50
 800545a:	e00e      	b.n	800547a <ai_network_1_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800545c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800545e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	f107 0314 	add.w	r3, r7, #20
 800546c:	3304      	adds	r3, #4
 800546e:	4618      	mov	r0, r3
 8005470:	f001 f9b0 	bl	80067d4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005476:	3301      	adds	r3, #1
 8005478:	653b      	str	r3, [r7, #80]	@ 0x50
 800547a:	8b7b      	ldrh	r3, [r7, #26]
 800547c:	461a      	mov	r2, r3
 800547e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005480:	4293      	cmp	r3, r2
 8005482:	dbeb      	blt.n	800545c <ai_network_1_create_and_init+0x8c>
    }
#endif
    if (ai_network_1_init(*network, &params) != true) {
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f107 0214 	add.w	r2, r7, #20
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f846 	bl	8005520 <ai_network_1_init>
 8005494:	4603      	mov	r3, r0
 8005496:	f083 0301 	eor.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d006      	beq.n	80054ae <ai_network_1_create_and_init+0xde>
        err = ai_network_1_get_error(*network);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff ff71 	bl	800538c <ai_network_1_get_error>
 80054aa:	4603      	mov	r3, r0
 80054ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    return err;
 80054ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3758      	adds	r7, #88	@ 0x58
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <ai_network_1_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <ai_network_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80054c8:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <ai_network_1_inputs_get+0x2c>)
 80054ca:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a06      	ldr	r2, [pc, #24]	@ (80054e8 <ai_network_1_inputs_get+0x30>)
 80054d0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 fb6d 	bl	8006bb4 <ai_platform_inputs_get>
 80054da:	4603      	mov	r3, r0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000a84 	.word	0x20000a84
 80054e8:	a1c00100 	.word	0xa1c00100

080054ec <ai_network_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <ai_network_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <ai_network_1_outputs_get+0x2c>)
 80054fe:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a06      	ldr	r2, [pc, #24]	@ (800551c <ai_network_1_outputs_get+0x30>)
 8005504:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 fcdf 	bl	8006ecc <ai_platform_outputs_get>
 800550e:	4603      	mov	r3, r0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000a84 	.word	0x20000a84
 800551c:	a1c00100 	.word	0xa1c00100

08005520 <ai_network_1_init>:
}

AI_API_ENTRY
ai_bool ai_network_1_init(
  ai_handle network, const ai_network_params* params)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800552a:	6839      	ldr	r1, [r7, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f002 f82f 	bl	8007590 <ai_platform_network_init>
 8005532:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <ai_network_1_init+0x1e>
 800553a:	2300      	movs	r3, #0
 800553c:	e028      	b.n	8005590 <ai_network_1_init+0x70>

  ai_bool ok = true;
 800553e:	2301      	movs	r3, #1
 8005540:	72fb      	strb	r3, [r7, #11]
  ok &= network_1_configure_weights(net_ctx, params);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff fe63 	bl	8005210 <network_1_configure_weights>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	7afb      	ldrb	r3, [r7, #11]
 8005550:	4013      	ands	r3, r2
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf14      	ite	ne
 8005556:	2301      	movne	r3, #1
 8005558:	2300      	moveq	r3, #0
 800555a:	72fb      	strb	r3, [r7, #11]
  ok &= network_1_configure_activations(net_ctx, params);
 800555c:	6839      	ldr	r1, [r7, #0]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7ff fdb4 	bl	80050cc <network_1_configure_activations>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	7afb      	ldrb	r3, [r7, #11]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f002 f9a6 	bl	80078c8 <ai_platform_network_post_init>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800558e:	7afb      	ldrb	r3, [r7, #11]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <ai_network_1_run>:


AI_API_ENTRY
ai_i32 ai_network_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f002 fab7 	bl	8007b1c <ai_platform_network_process>
 80055ae:	4603      	mov	r3, r0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <ai_network_1_data_params_get>:
 * @ingroup network_1_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_1_data_params_get(ai_network_params* params)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <ai_network_1_data_params_get+0x12>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e016      	b.n	80055f8 <ai_network_1_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80055ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005600 <ai_network_1_data_params_get+0x48>)
 80055cc:	f107 0310 	add.w	r3, r7, #16
 80055d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055d4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_ACTIVATIONS_COUNT, g_network_1_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80055d8:	4a0a      	ldr	r2, [pc, #40]	@ (8005604 <ai_network_1_data_params_get+0x4c>)
 80055da:	f107 0308 	add.w	r3, r7, #8
 80055de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80055e2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_WEIGHTS_COUNT, g_network_1_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80055e6:	f107 0210 	add.w	r2, r7, #16
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	4619      	mov	r1, r3
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f001 f9b3 	bl	800695c <ai_platform_bind_network_params>
 80055f6:	4603      	mov	r3, r0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	0800cc08 	.word	0x0800cc08
 8005604:	0800cc10 	.word	0x0800cc10

08005608 <arm_rfft_fast_init_f32>:
 8005608:	084b      	lsrs	r3, r1, #1
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	b430      	push	{r4, r5}
 800560e:	8201      	strh	r1, [r0, #16]
 8005610:	8003      	strh	r3, [r0, #0]
 8005612:	d070      	beq.n	80056f6 <arm_rfft_fast_init_f32+0xee>
 8005614:	d916      	bls.n	8005644 <arm_rfft_fast_init_f32+0x3c>
 8005616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800561a:	d05f      	beq.n	80056dc <arm_rfft_fast_init_f32+0xd4>
 800561c:	d936      	bls.n	800568c <arm_rfft_fast_init_f32+0x84>
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005622:	d026      	beq.n	8005672 <arm_rfft_fast_init_f32+0x6a>
 8005624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005628:	d112      	bne.n	8005650 <arm_rfft_fast_init_f32+0x48>
 800562a:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800562e:	4c38      	ldr	r4, [pc, #224]	@ (8005710 <arm_rfft_fast_init_f32+0x108>)
 8005630:	4938      	ldr	r1, [pc, #224]	@ (8005714 <arm_rfft_fast_init_f32+0x10c>)
 8005632:	2300      	movs	r3, #0
 8005634:	4a38      	ldr	r2, [pc, #224]	@ (8005718 <arm_rfft_fast_init_f32+0x110>)
 8005636:	8185      	strh	r5, [r0, #12]
 8005638:	6084      	str	r4, [r0, #8]
 800563a:	6041      	str	r1, [r0, #4]
 800563c:	6142      	str	r2, [r0, #20]
 800563e:	4618      	mov	r0, r3
 8005640:	bc30      	pop	{r4, r5}
 8005642:	4770      	bx	lr
 8005644:	2b20      	cmp	r3, #32
 8005646:	d031      	beq.n	80056ac <arm_rfft_fast_init_f32+0xa4>
 8005648:	2b40      	cmp	r3, #64	@ 0x40
 800564a:	d006      	beq.n	800565a <arm_rfft_fast_init_f32+0x52>
 800564c:	2b10      	cmp	r3, #16
 800564e:	d039      	beq.n	80056c4 <arm_rfft_fast_init_f32+0xbc>
 8005650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005654:	bc30      	pop	{r4, r5}
 8005656:	4618      	mov	r0, r3
 8005658:	4770      	bx	lr
 800565a:	2538      	movs	r5, #56	@ 0x38
 800565c:	4c2f      	ldr	r4, [pc, #188]	@ (800571c <arm_rfft_fast_init_f32+0x114>)
 800565e:	4930      	ldr	r1, [pc, #192]	@ (8005720 <arm_rfft_fast_init_f32+0x118>)
 8005660:	2300      	movs	r3, #0
 8005662:	4a30      	ldr	r2, [pc, #192]	@ (8005724 <arm_rfft_fast_init_f32+0x11c>)
 8005664:	8185      	strh	r5, [r0, #12]
 8005666:	6084      	str	r4, [r0, #8]
 8005668:	6041      	str	r1, [r0, #4]
 800566a:	6142      	str	r2, [r0, #20]
 800566c:	4618      	mov	r0, r3
 800566e:	bc30      	pop	{r4, r5}
 8005670:	4770      	bx	lr
 8005672:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 8005676:	4c2c      	ldr	r4, [pc, #176]	@ (8005728 <arm_rfft_fast_init_f32+0x120>)
 8005678:	492c      	ldr	r1, [pc, #176]	@ (800572c <arm_rfft_fast_init_f32+0x124>)
 800567a:	2300      	movs	r3, #0
 800567c:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <arm_rfft_fast_init_f32+0x128>)
 800567e:	8185      	strh	r5, [r0, #12]
 8005680:	6084      	str	r4, [r0, #8]
 8005682:	6041      	str	r1, [r0, #4]
 8005684:	6142      	str	r2, [r0, #20]
 8005686:	4618      	mov	r0, r3
 8005688:	bc30      	pop	{r4, r5}
 800568a:	4770      	bx	lr
 800568c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005690:	d1de      	bne.n	8005650 <arm_rfft_fast_init_f32+0x48>
 8005692:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 8005696:	4c27      	ldr	r4, [pc, #156]	@ (8005734 <arm_rfft_fast_init_f32+0x12c>)
 8005698:	4927      	ldr	r1, [pc, #156]	@ (8005738 <arm_rfft_fast_init_f32+0x130>)
 800569a:	2300      	movs	r3, #0
 800569c:	4a27      	ldr	r2, [pc, #156]	@ (800573c <arm_rfft_fast_init_f32+0x134>)
 800569e:	8185      	strh	r5, [r0, #12]
 80056a0:	6084      	str	r4, [r0, #8]
 80056a2:	6041      	str	r1, [r0, #4]
 80056a4:	6142      	str	r2, [r0, #20]
 80056a6:	4618      	mov	r0, r3
 80056a8:	bc30      	pop	{r4, r5}
 80056aa:	4770      	bx	lr
 80056ac:	2530      	movs	r5, #48	@ 0x30
 80056ae:	4c24      	ldr	r4, [pc, #144]	@ (8005740 <arm_rfft_fast_init_f32+0x138>)
 80056b0:	4924      	ldr	r1, [pc, #144]	@ (8005744 <arm_rfft_fast_init_f32+0x13c>)
 80056b2:	2300      	movs	r3, #0
 80056b4:	4a24      	ldr	r2, [pc, #144]	@ (8005748 <arm_rfft_fast_init_f32+0x140>)
 80056b6:	8185      	strh	r5, [r0, #12]
 80056b8:	6084      	str	r4, [r0, #8]
 80056ba:	6041      	str	r1, [r0, #4]
 80056bc:	6142      	str	r2, [r0, #20]
 80056be:	4618      	mov	r0, r3
 80056c0:	bc30      	pop	{r4, r5}
 80056c2:	4770      	bx	lr
 80056c4:	2514      	movs	r5, #20
 80056c6:	4c21      	ldr	r4, [pc, #132]	@ (800574c <arm_rfft_fast_init_f32+0x144>)
 80056c8:	4921      	ldr	r1, [pc, #132]	@ (8005750 <arm_rfft_fast_init_f32+0x148>)
 80056ca:	2300      	movs	r3, #0
 80056cc:	4a21      	ldr	r2, [pc, #132]	@ (8005754 <arm_rfft_fast_init_f32+0x14c>)
 80056ce:	8185      	strh	r5, [r0, #12]
 80056d0:	6084      	str	r4, [r0, #8]
 80056d2:	6041      	str	r1, [r0, #4]
 80056d4:	6142      	str	r2, [r0, #20]
 80056d6:	4618      	mov	r0, r3
 80056d8:	bc30      	pop	{r4, r5}
 80056da:	4770      	bx	lr
 80056dc:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 80056e0:	4c1d      	ldr	r4, [pc, #116]	@ (8005758 <arm_rfft_fast_init_f32+0x150>)
 80056e2:	491e      	ldr	r1, [pc, #120]	@ (800575c <arm_rfft_fast_init_f32+0x154>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005760 <arm_rfft_fast_init_f32+0x158>)
 80056e8:	8185      	strh	r5, [r0, #12]
 80056ea:	6084      	str	r4, [r0, #8]
 80056ec:	6041      	str	r1, [r0, #4]
 80056ee:	6142      	str	r2, [r0, #20]
 80056f0:	4618      	mov	r0, r3
 80056f2:	bc30      	pop	{r4, r5}
 80056f4:	4770      	bx	lr
 80056f6:	25d0      	movs	r5, #208	@ 0xd0
 80056f8:	4c1a      	ldr	r4, [pc, #104]	@ (8005764 <arm_rfft_fast_init_f32+0x15c>)
 80056fa:	491b      	ldr	r1, [pc, #108]	@ (8005768 <arm_rfft_fast_init_f32+0x160>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4a1b      	ldr	r2, [pc, #108]	@ (800576c <arm_rfft_fast_init_f32+0x164>)
 8005700:	8185      	strh	r5, [r0, #12]
 8005702:	6084      	str	r4, [r0, #8]
 8005704:	6041      	str	r1, [r0, #4]
 8005706:	6142      	str	r2, [r0, #20]
 8005708:	4618      	mov	r0, r3
 800570a:	bc30      	pop	{r4, r5}
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	080364d8 	.word	0x080364d8
 8005714:	080276d0 	.word	0x080276d0
 8005718:	0802d840 	.word	0x0802d840
 800571c:	0802b7d0 	.word	0x0802b7d0
 8005720:	08038298 	.word	0x08038298
 8005724:	0803a788 	.word	0x0803a788
 8005728:	080341c0 	.word	0x080341c0
 800572c:	080320c0 	.word	0x080320c0
 8005730:	0802b840 	.word	0x0802b840
 8005734:	0803a418 	.word	0x0803a418
 8005738:	08031840 	.word	0x08031840
 800573c:	08038498 	.word	0x08038498
 8005740:	08035078 	.word	0x08035078
 8005744:	080340c0 	.word	0x080340c0
 8005748:	0802b6d0 	.word	0x0802b6d0
 800574c:	08034fd0 	.word	0x08034fd0
 8005750:	08032040 	.word	0x08032040
 8005754:	08034ff8 	.word	0x08034ff8
 8005758:	08038c98 	.word	0x08038c98
 800575c:	080354d8 	.word	0x080354d8
 8005760:	08039018 	.word	0x08039018
 8005764:	0803a988 	.word	0x0803a988
 8005768:	080350d8 	.word	0x080350d8
 800576c:	0803a018 	.word	0x0803a018

08005770 <arm_rfft_fast_f32>:
 8005770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	8a05      	ldrh	r5, [r0, #16]
 8005776:	4606      	mov	r6, r0
 8005778:	4617      	mov	r7, r2
 800577a:	460c      	mov	r4, r1
 800577c:	086d      	lsrs	r5, r5, #1
 800577e:	8005      	strh	r5, [r0, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d15e      	bne.n	8005842 <arm_rfft_fast_f32+0xd2>
 8005784:	461a      	mov	r2, r3
 8005786:	2301      	movs	r3, #1
 8005788:	f000 fbde 	bl	8005f48 <arm_cfft_f32>
 800578c:	edd4 7a00 	vldr	s15, [r4]
 8005790:	ed94 7a01 	vldr	s14, [r4, #4]
 8005794:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005798:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800579c:	8832      	ldrh	r2, [r6, #0]
 800579e:	ee37 7a07 	vadd.f32	s14, s14, s14
 80057a2:	6975      	ldr	r5, [r6, #20]
 80057a4:	3a01      	subs	r2, #1
 80057a6:	eeb0 3a46 	vmov.f32	s6, s12
 80057aa:	3510      	adds	r5, #16
 80057ac:	f107 0610 	add.w	r6, r7, #16
 80057b0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80057b4:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 80057b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057bc:	f104 0310 	add.w	r3, r4, #16
 80057c0:	3808      	subs	r0, #8
 80057c2:	ee26 7a86 	vmul.f32	s14, s13, s12
 80057c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80057ca:	ed87 7a00 	vstr	s14, [r7]
 80057ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80057d2:	ed90 7a02 	vldr	s14, [r0, #8]
 80057d6:	3a01      	subs	r2, #1
 80057d8:	ed53 6a02 	vldr	s13, [r3, #-8]
 80057dc:	f1a0 0008 	sub.w	r0, r0, #8
 80057e0:	ed15 6a02 	vldr	s12, [r5, #-8]
 80057e4:	f103 0308 	add.w	r3, r3, #8
 80057e8:	ee77 7a66 	vsub.f32	s15, s14, s13
 80057ec:	edd0 3a05 	vldr	s7, [r0, #20]
 80057f0:	ed13 5a03 	vldr	s10, [r3, #-12]
 80057f4:	ee77 4a26 	vadd.f32	s9, s14, s13
 80057f8:	ed55 5a01 	vldr	s11, [r5, #-4]
 80057fc:	f106 0608 	add.w	r6, r6, #8
 8005800:	ee66 6a27 	vmul.f32	s13, s12, s15
 8005804:	f105 0508 	add.w	r5, r5, #8
 8005808:	ee33 4a85 	vadd.f32	s8, s7, s10
 800580c:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005810:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005814:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005818:	ee26 6a04 	vmul.f32	s12, s12, s8
 800581c:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005820:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005824:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005828:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800582c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005830:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005834:	ed46 7a03 	vstr	s15, [r6, #-12]
 8005838:	ed06 7a04 	vstr	s14, [r6, #-16]
 800583c:	d1c9      	bne.n	80057d2 <arm_rfft_fast_f32+0x62>
 800583e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005842:	edd1 7a00 	vldr	s15, [r1]
 8005846:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800584a:	edd1 6a01 	vldr	s13, [r1, #4]
 800584e:	1e68      	subs	r0, r5, #1
 8005850:	6975      	ldr	r5, [r6, #20]
 8005852:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005856:	00c1      	lsls	r1, r0, #3
 8005858:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800585c:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005860:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005864:	ed82 7a00 	vstr	s14, [r2]
 8005868:	edc2 7a01 	vstr	s15, [r2, #4]
 800586c:	b3e0      	cbz	r0, 80058e8 <arm_rfft_fast_f32+0x178>
 800586e:	3908      	subs	r1, #8
 8005870:	f104 0210 	add.w	r2, r4, #16
 8005874:	3510      	adds	r5, #16
 8005876:	440c      	add	r4, r1
 8005878:	f107 0110 	add.w	r1, r7, #16
 800587c:	ed94 7a02 	vldr	s14, [r4, #8]
 8005880:	3801      	subs	r0, #1
 8005882:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005886:	f1a4 0408 	sub.w	r4, r4, #8
 800588a:	ed15 6a02 	vldr	s12, [r5, #-8]
 800588e:	f102 0208 	add.w	r2, r2, #8
 8005892:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005896:	ed94 4a05 	vldr	s8, [r4, #20]
 800589a:	ed12 5a03 	vldr	s10, [r2, #-12]
 800589e:	ee77 6a26 	vadd.f32	s13, s14, s13
 80058a2:	ed55 5a01 	vldr	s11, [r5, #-4]
 80058a6:	f101 0108 	add.w	r1, r1, #8
 80058aa:	ee26 3a27 	vmul.f32	s6, s12, s15
 80058ae:	f105 0508 	add.w	r5, r5, #8
 80058b2:	ee74 4a05 	vadd.f32	s9, s8, s10
 80058b6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 80058ba:	ee35 5a44 	vsub.f32	s10, s10, s8
 80058be:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80058c2:	ee26 6a24 	vmul.f32	s12, s12, s9
 80058c6:	ee77 7a05 	vadd.f32	s15, s14, s10
 80058ca:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80058ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80058d2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80058d6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80058da:	ee27 7a23 	vmul.f32	s14, s14, s7
 80058de:	ed41 7a03 	vstr	s15, [r1, #-12]
 80058e2:	ed01 7a04 	vstr	s14, [r1, #-16]
 80058e6:	d1c9      	bne.n	800587c <arm_rfft_fast_f32+0x10c>
 80058e8:	461a      	mov	r2, r3
 80058ea:	4639      	mov	r1, r7
 80058ec:	4630      	mov	r0, r6
 80058ee:	2301      	movs	r3, #1
 80058f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f4:	f000 bb28 	b.w	8005f48 <arm_cfft_f32>

080058f8 <arm_cfft_radix8by2_f32>:
 80058f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058fc:	4607      	mov	r7, r0
 80058fe:	4608      	mov	r0, r1
 8005900:	ed2d 8b06 	vpush	{d8-d10}
 8005904:	f8b7 e000 	ldrh.w	lr, [r7]
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800590e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8005912:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005916:	f000 80b0 	beq.w	8005a7a <arm_cfft_radix8by2_f32+0x182>
 800591a:	008b      	lsls	r3, r1, #2
 800591c:	3210      	adds	r2, #16
 800591e:	f100 0610 	add.w	r6, r0, #16
 8005922:	f108 0510 	add.w	r5, r8, #16
 8005926:	3310      	adds	r3, #16
 8005928:	18c4      	adds	r4, r0, r3
 800592a:	4443      	add	r3, r8
 800592c:	ed55 6a04 	vldr	s13, [r5, #-16]
 8005930:	f1be 0e01 	subs.w	lr, lr, #1
 8005934:	ed56 4a04 	vldr	s9, [r6, #-16]
 8005938:	f104 0410 	add.w	r4, r4, #16
 800593c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8005940:	f106 0610 	add.w	r6, r6, #16
 8005944:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8005948:	ed55 7a02 	vldr	s15, [r5, #-8]
 800594c:	ed55 2a01 	vldr	s5, [r5, #-4]
 8005950:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8005954:	ed53 0a04 	vldr	s1, [r3, #-16]
 8005958:	f102 0210 	add.w	r2, r2, #16
 800595c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005960:	f105 0510 	add.w	r5, r5, #16
 8005964:	ed13 3a02 	vldr	s6, [r3, #-8]
 8005968:	f103 0310 	add.w	r3, r3, #16
 800596c:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 8005970:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 8005974:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 8005978:	ee33 8a83 	vadd.f32	s16, s7, s6
 800597c:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 8005980:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 8005984:	ee34 0a06 	vadd.f32	s0, s8, s12
 8005988:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 800598c:	ee76 aa87 	vadd.f32	s21, s13, s14
 8005990:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 8005994:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005998:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 800599c:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80059a0:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 80059a4:	ee71 8a05 	vadd.f32	s17, s2, s10
 80059a8:	ee31 aaa7 	vadd.f32	s20, s3, s15
 80059ac:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 80059b0:	ee72 9a22 	vadd.f32	s19, s4, s5
 80059b4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80059b8:	ee35 5a41 	vsub.f32	s10, s10, s2
 80059bc:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 80059c0:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 80059c4:	ee36 6a44 	vsub.f32	s12, s12, s8
 80059c8:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 80059cc:	ee71 1ae7 	vsub.f32	s3, s3, s15
 80059d0:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 80059d4:	ee72 7a62 	vsub.f32	s15, s4, s5
 80059d8:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 80059dc:	ee73 2a63 	vsub.f32	s5, s6, s7
 80059e0:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 80059e4:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 80059e8:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 80059ec:	ee24 3a84 	vmul.f32	s6, s9, s8
 80059f0:	ee27 2a26 	vmul.f32	s4, s14, s13
 80059f4:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80059f8:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80059fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005a00:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005a04:	ee65 6a26 	vmul.f32	s13, s10, s13
 8005a08:	ee25 5a04 	vmul.f32	s10, s10, s8
 8005a0c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005a10:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005a14:	ee33 4a02 	vadd.f32	s8, s6, s4
 8005a18:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005a1c:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 8005a20:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8005a24:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8005a28:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8005a2c:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 8005a30:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8005a34:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8005a38:	ee27 4a87 	vmul.f32	s8, s15, s14
 8005a3c:	ee61 5a87 	vmul.f32	s11, s3, s14
 8005a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a44:	ee22 5a87 	vmul.f32	s10, s5, s14
 8005a48:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005a4c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8005a50:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8005a54:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005a58:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005a5c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005a60:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005a64:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 8005a68:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 8005a6c:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 8005a70:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 8005a74:	f47f af5a 	bne.w	800592c <arm_cfft_radix8by2_f32+0x34>
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	b28c      	uxth	r4, r1
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	4621      	mov	r1, r4
 8005a80:	f000 fb78 	bl	8006174 <arm_radix8_butterfly_f32>
 8005a84:	4621      	mov	r1, r4
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	4640      	mov	r0, r8
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	ecbd 8b06 	vpop	{d8-d10}
 8005a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a94:	f000 bb6e 	b.w	8006174 <arm_radix8_butterfly_f32>

08005a98 <arm_cfft_radix8by4_f32>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	ed2d 8b06 	vpush	{d8-d10}
 8005aa0:	8804      	ldrh	r4, [r0, #0]
 8005aa2:	b08f      	sub	sp, #60	@ 0x3c
 8005aa4:	ed91 6a00 	vldr	s12, [r1]
 8005aa8:	460a      	mov	r2, r1
 8005aaa:	0864      	lsrs	r4, r4, #1
 8005aac:	ed91 7a01 	vldr	s14, [r1, #4]
 8005ab0:	9101      	str	r1, [sp, #4]
 8005ab2:	00a3      	lsls	r3, r4, #2
 8005ab4:	6841      	ldr	r1, [r0, #4]
 8005ab6:	0864      	lsrs	r4, r4, #1
 8005ab8:	900c      	str	r0, [sp, #48]	@ 0x30
 8005aba:	9205      	str	r2, [sp, #20]
 8005abc:	f101 0610 	add.w	r6, r1, #16
 8005ac0:	4625      	mov	r5, r4
 8005ac2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ac4:	f101 0408 	add.w	r4, r1, #8
 8005ac8:	9602      	str	r6, [sp, #8]
 8005aca:	9407      	str	r4, [sp, #28]
 8005acc:	18d4      	adds	r4, r2, r3
 8005ace:	1eaa      	subs	r2, r5, #2
 8005ad0:	f101 0518 	add.w	r5, r1, #24
 8005ad4:	18e0      	adds	r0, r4, r3
 8005ad6:	edd4 4a00 	vldr	s9, [r4]
 8005ada:	ed94 4a01 	vldr	s8, [r4, #4]
 8005ade:	46a6      	mov	lr, r4
 8005ae0:	edd0 6a00 	vldr	s13, [r0]
 8005ae4:	18c7      	adds	r7, r0, r3
 8005ae6:	edd0 7a01 	vldr	s15, [r0, #4]
 8005aea:	46a0      	mov	r8, r4
 8005aec:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005af0:	ed97 5a00 	vldr	s10, [r7]
 8005af4:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005af8:	4604      	mov	r4, r0
 8005afa:	9506      	str	r5, [sp, #24]
 8005afc:	4605      	mov	r5, r0
 8005afe:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8005b02:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b04:	9801      	ldr	r0, [sp, #4]
 8005b06:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b0e:	ed97 3a01 	vldr	s6, [r7, #4]
 8005b12:	ee72 2a85 	vadd.f32	s5, s5, s10
 8005b16:	46bc      	mov	ip, r7
 8005b18:	ee76 3a84 	vadd.f32	s7, s13, s8
 8005b1c:	9704      	str	r7, [sp, #16]
 8005b1e:	ee36 7a44 	vsub.f32	s14, s12, s8
 8005b22:	f8cd e00c 	str.w	lr, [sp, #12]
 8005b26:	ee12 9a90 	vmov	r9, s5
 8005b2a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005b2e:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005b32:	1f3e      	subs	r6, r7, #4
 8005b34:	f840 9b08 	str.w	r9, [r0], #8
 8005b38:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8005b3c:	edde 2a01 	vldr	s5, [lr, #4]
 8005b40:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8005b44:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005b48:	eddc 4a01 	vldr	s9, [ip, #4]
 8005b4c:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005b50:	9001      	str	r0, [sp, #4]
 8005b52:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8005b56:	9805      	ldr	r0, [sp, #20]
 8005b58:	ee13 9a90 	vmov	r9, s7
 8005b5c:	ee37 7a43 	vsub.f32	s14, s14, s6
 8005b60:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005b64:	f1ae 0704 	sub.w	r7, lr, #4
 8005b68:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005b6c:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005b70:	ed80 6a01 	vstr	s12, [r0, #4]
 8005b74:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005b78:	f848 9b08 	str.w	r9, [r8], #8
 8005b7c:	edce 4a01 	vstr	s9, [lr, #4]
 8005b80:	ee15 ea90 	vmov	lr, s11
 8005b84:	f844 eb08 	str.w	lr, [r4], #8
 8005b88:	ee16 ea90 	vmov	lr, s13
 8005b8c:	9408      	str	r4, [sp, #32]
 8005b8e:	462c      	mov	r4, r5
 8005b90:	ed85 7a01 	vstr	s14, [r5, #4]
 8005b94:	9d04      	ldr	r5, [sp, #16]
 8005b96:	f84c eb08 	str.w	lr, [ip], #8
 8005b9a:	edc5 7a01 	vstr	s15, [r5, #4]
 8005b9e:	0855      	lsrs	r5, r2, #1
 8005ba0:	9509      	str	r5, [sp, #36]	@ 0x24
 8005ba2:	f000 8130 	beq.w	8005e06 <arm_cfft_radix8by4_f32+0x36e>
 8005ba6:	9805      	ldr	r0, [sp, #20]
 8005ba8:	3b08      	subs	r3, #8
 8005baa:	46ab      	mov	fp, r5
 8005bac:	f1a4 020c 	sub.w	r2, r4, #12
 8005bb0:	f100 0510 	add.w	r5, r0, #16
 8005bb4:	f101 0920 	add.w	r9, r1, #32
 8005bb8:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8005bbc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005bc0:	4433      	add	r3, r6
 8005bc2:	3410      	adds	r4, #16
 8005bc4:	4660      	mov	r0, ip
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8005bcc:	ed54 6a02 	vldr	s13, [r4, #-8]
 8005bd0:	f1bb 0b01 	subs.w	fp, fp, #1
 8005bd4:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005bd8:	f10a 0a08 	add.w	sl, sl, #8
 8005bdc:	edd1 7a00 	vldr	s15, [r1]
 8005be0:	f105 0508 	add.w	r5, r5, #8
 8005be4:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8005be8:	edd0 2a00 	vldr	s5, [r0]
 8005bec:	ed14 7a01 	vldr	s14, [r4, #-4]
 8005bf0:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8005bf4:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005bf8:	f1a2 0208 	sub.w	r2, r2, #8
 8005bfc:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8005c00:	ed90 2a01 	vldr	s4, [r0, #4]
 8005c04:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005c08:	ed91 6a01 	vldr	s12, [r1, #4]
 8005c0c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005c10:	f109 0910 	add.w	r9, r9, #16
 8005c14:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8005c18:	f104 0408 	add.w	r4, r4, #8
 8005c1c:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8005c20:	f10e 0e18 	add.w	lr, lr, #24
 8005c24:	ee37 3a67 	vsub.f32	s6, s14, s15
 8005c28:	f1a3 0308 	sub.w	r3, r3, #8
 8005c2c:	ed45 6a04 	vstr	s13, [r5, #-16]
 8005c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c34:	edd1 6a01 	vldr	s13, [r1, #4]
 8005c38:	ee75 1a86 	vadd.f32	s3, s11, s12
 8005c3c:	edd0 4a01 	vldr	s9, [r0, #4]
 8005c40:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005c44:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005c48:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005c4c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005c50:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005c54:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005c58:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005c5c:	ed45 6a03 	vstr	s13, [r5, #-12]
 8005c60:	ee36 2a02 	vadd.f32	s4, s12, s4
 8005c64:	edd6 7a00 	vldr	s15, [r6]
 8005c68:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005c6c:	ed97 1a00 	vldr	s2, [r7]
 8005c70:	ee77 2a62 	vsub.f32	s5, s14, s5
 8005c74:	ed92 8a04 	vldr	s16, [r2, #16]
 8005c78:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005c7c:	ed93 aa04 	vldr	s20, [r3, #16]
 8005c80:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005c84:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005c88:	ed57 0a01 	vldr	s1, [r7, #-4]
 8005c8c:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8005c90:	ee38 6a88 	vadd.f32	s12, s17, s16
 8005c94:	edd3 9a03 	vldr	s19, [r3, #12]
 8005c98:	ee30 0a87 	vadd.f32	s0, s1, s14
 8005c9c:	ed92 9a03 	vldr	s18, [r2, #12]
 8005ca0:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8005ca4:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8005ca8:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8005cac:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8005cb0:	ee16 ca10 	vmov	ip, s12
 8005cb4:	ee30 6a49 	vsub.f32	s12, s0, s18
 8005cb8:	ee77 4a01 	vadd.f32	s9, s14, s2
 8005cbc:	f847 c908 	str.w	ip, [r7], #-8
 8005cc0:	ee34 4a29 	vadd.f32	s8, s8, s19
 8005cc4:	edd2 8a03 	vldr	s17, [r2, #12]
 8005cc8:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8005ccc:	ed93 8a03 	vldr	s16, [r3, #12]
 8005cd0:	ee71 0a47 	vsub.f32	s1, s2, s14
 8005cd4:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005cd8:	ee39 1a67 	vsub.f32	s2, s18, s15
 8005cdc:	ee36 6a69 	vsub.f32	s12, s12, s19
 8005ce0:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005ce4:	ee75 5aca 	vsub.f32	s11, s11, s20
 8005ce8:	ed87 0a01 	vstr	s0, [r7, #4]
 8005cec:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8005cf0:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8005cf4:	ee21 8a80 	vmul.f32	s16, s3, s0
 8005cf8:	ee23 7a26 	vmul.f32	s14, s6, s13
 8005cfc:	ee64 7a26 	vmul.f32	s15, s8, s13
 8005d00:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8005d04:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005d08:	ee23 3a00 	vmul.f32	s6, s6, s0
 8005d0c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005d10:	ee24 0a80 	vmul.f32	s0, s9, s0
 8005d14:	ee38 7a07 	vadd.f32	s14, s16, s14
 8005d18:	ee76 6a84 	vadd.f32	s13, s13, s8
 8005d1c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005d20:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005d24:	ee17 ca10 	vmov	ip, s14
 8005d28:	f841 cb08 	str.w	ip, [r1], #8
 8005d2c:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005d30:	ed82 0a04 	vstr	s0, [r2, #16]
 8005d34:	edc2 6a03 	vstr	s13, [r2, #12]
 8005d38:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8005d3c:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8005d40:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8005d44:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005d48:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005d4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005d50:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8005d54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d58:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005d5c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d64:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005d68:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005d6c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005d70:	ee17 ca90 	vmov	ip, s15
 8005d74:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005d78:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005d7c:	f846 c908 	str.w	ip, [r6], #-8
 8005d80:	edc6 6a01 	vstr	s13, [r6, #4]
 8005d84:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8005d88:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8005d8c:	ee62 5a27 	vmul.f32	s11, s4, s15
 8005d90:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005d94:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005d98:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005d9c:	ee61 6a07 	vmul.f32	s13, s2, s14
 8005da0:	ee20 7a87 	vmul.f32	s14, s1, s14
 8005da4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005da8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8005dac:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005db0:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8005db4:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dbc:	ee16 ca10 	vmov	ip, s12
 8005dc0:	f840 cb08 	str.w	ip, [r0], #8
 8005dc4:	ed40 2a01 	vstr	s5, [r0, #-4]
 8005dc8:	edc3 0a04 	vstr	s1, [r3, #16]
 8005dcc:	edc3 7a03 	vstr	s15, [r3, #12]
 8005dd0:	f47f aefc 	bne.w	8005bcc <arm_cfft_radix8by4_f32+0x134>
 8005dd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005dd6:	9802      	ldr	r0, [sp, #8]
 8005dd8:	00cb      	lsls	r3, r1, #3
 8005dda:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8005dde:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005de2:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005de6:	4498      	add	r8, r3
 8005de8:	449c      	add	ip, r3
 8005dea:	9102      	str	r1, [sp, #8]
 8005dec:	9901      	ldr	r1, [sp, #4]
 8005dee:	4419      	add	r1, r3
 8005df0:	9101      	str	r1, [sp, #4]
 8005df2:	9907      	ldr	r1, [sp, #28]
 8005df4:	4419      	add	r1, r3
 8005df6:	9107      	str	r1, [sp, #28]
 8005df8:	9908      	ldr	r1, [sp, #32]
 8005dfa:	4419      	add	r1, r3
 8005dfc:	9b06      	ldr	r3, [sp, #24]
 8005dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e02:	9108      	str	r1, [sp, #32]
 8005e04:	9306      	str	r3, [sp, #24]
 8005e06:	9a01      	ldr	r2, [sp, #4]
 8005e08:	2304      	movs	r3, #4
 8005e0a:	9e08      	ldr	r6, [sp, #32]
 8005e0c:	edd2 7a00 	vldr	s15, [r2]
 8005e10:	ed96 7a00 	vldr	s14, [r6]
 8005e14:	edd8 2a00 	vldr	s5, [r8]
 8005e18:	ee77 5a87 	vadd.f32	s11, s15, s14
 8005e1c:	ed9c 3a00 	vldr	s6, [ip]
 8005e20:	ed92 6a01 	vldr	s12, [r2, #4]
 8005e24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005e28:	edd6 6a01 	vldr	s13, [r6, #4]
 8005e2c:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8005e30:	ed9c 2a01 	vldr	s4, [ip, #4]
 8005e34:	ee36 5a26 	vadd.f32	s10, s12, s13
 8005e38:	edd8 7a01 	vldr	s15, [r8, #4]
 8005e3c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005e40:	9d02      	ldr	r5, [sp, #8]
 8005e42:	ee34 6a83 	vadd.f32	s12, s9, s6
 8005e46:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8005e4a:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005e4e:	9805      	ldr	r0, [sp, #20]
 8005e50:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8005e54:	4621      	mov	r1, r4
 8005e56:	ed82 6a00 	vstr	s12, [r2]
 8005e5a:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8005e5e:	edd8 3a01 	vldr	s7, [r8, #4]
 8005e62:	ee75 5a67 	vsub.f32	s11, s10, s15
 8005e66:	eddc 1a01 	vldr	s3, [ip, #4]
 8005e6a:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005e6e:	ee75 3a23 	vadd.f32	s7, s10, s7
 8005e72:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005e76:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005e7a:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8005e7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e82:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005e86:	ed82 5a01 	vstr	s10, [r2, #4]
 8005e8a:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005e8e:	9a07      	ldr	r2, [sp, #28]
 8005e90:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005e94:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8005e98:	edd2 2a00 	vldr	s5, [r2]
 8005e9c:	ed92 5a01 	vldr	s10, [r2, #4]
 8005ea0:	ee64 3a22 	vmul.f32	s7, s8, s5
 8005ea4:	ee24 4a05 	vmul.f32	s8, s8, s10
 8005ea8:	ee24 5a85 	vmul.f32	s10, s9, s10
 8005eac:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8005eb0:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005eb4:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8005eb8:	ed88 5a00 	vstr	s10, [r8]
 8005ebc:	edc8 4a01 	vstr	s9, [r8, #4]
 8005ec0:	edd5 4a01 	vldr	s9, [r5, #4]
 8005ec4:	edd5 6a00 	vldr	s13, [r5]
 8005ec8:	9d06      	ldr	r5, [sp, #24]
 8005eca:	ee26 5a26 	vmul.f32	s10, s12, s13
 8005ece:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005ed2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8005ed6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005eda:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8005ede:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005ee2:	ed86 6a01 	vstr	s12, [r6, #4]
 8005ee6:	edc6 5a00 	vstr	s11, [r6]
 8005eea:	edd5 5a01 	vldr	s11, [r5, #4]
 8005eee:	edd5 6a00 	vldr	s13, [r5]
 8005ef2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ef4:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005ef8:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005efc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005f00:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005f04:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f08:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005f0c:	edcc 7a01 	vstr	s15, [ip, #4]
 8005f10:	ed8c 7a00 	vstr	s14, [ip]
 8005f14:	6872      	ldr	r2, [r6, #4]
 8005f16:	f000 f92d 	bl	8006174 <arm_radix8_butterfly_f32>
 8005f1a:	9803      	ldr	r0, [sp, #12]
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	6872      	ldr	r2, [r6, #4]
 8005f20:	2304      	movs	r3, #4
 8005f22:	f000 f927 	bl	8006174 <arm_radix8_butterfly_f32>
 8005f26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005f28:	4621      	mov	r1, r4
 8005f2a:	6872      	ldr	r2, [r6, #4]
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f000 f921 	bl	8006174 <arm_radix8_butterfly_f32>
 8005f32:	4621      	mov	r1, r4
 8005f34:	6872      	ldr	r2, [r6, #4]
 8005f36:	2304      	movs	r3, #4
 8005f38:	9804      	ldr	r0, [sp, #16]
 8005f3a:	b00f      	add	sp, #60	@ 0x3c
 8005f3c:	ecbd 8b06 	vpop	{d8-d10}
 8005f40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	f000 b916 	b.w	8006174 <arm_radix8_butterfly_f32>

08005f48 <arm_cfft_f32>:
 8005f48:	2a01      	cmp	r2, #1
 8005f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4e:	4606      	mov	r6, r0
 8005f50:	4617      	mov	r7, r2
 8005f52:	460c      	mov	r4, r1
 8005f54:	4698      	mov	r8, r3
 8005f56:	8805      	ldrh	r5, [r0, #0]
 8005f58:	d053      	beq.n	8006002 <arm_cfft_f32+0xba>
 8005f5a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005f5e:	d04b      	beq.n	8005ff8 <arm_cfft_f32+0xb0>
 8005f60:	d916      	bls.n	8005f90 <arm_cfft_f32+0x48>
 8005f62:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8005f66:	d01a      	beq.n	8005f9e <arm_cfft_f32+0x56>
 8005f68:	d95a      	bls.n	8006020 <arm_cfft_f32+0xd8>
 8005f6a:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8005f6e:	d043      	beq.n	8005ff8 <arm_cfft_f32+0xb0>
 8005f70:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005f74:	d105      	bne.n	8005f82 <arm_cfft_f32+0x3a>
 8005f76:	2301      	movs	r3, #1
 8005f78:	6872      	ldr	r2, [r6, #4]
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 f8f9 	bl	8006174 <arm_radix8_butterfly_f32>
 8005f82:	f1b8 0f00 	cmp.w	r8, #0
 8005f86:	d111      	bne.n	8005fac <arm_cfft_f32+0x64>
 8005f88:	2f01      	cmp	r7, #1
 8005f8a:	d016      	beq.n	8005fba <arm_cfft_f32+0x72>
 8005f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f90:	2d20      	cmp	r5, #32
 8005f92:	d031      	beq.n	8005ff8 <arm_cfft_f32+0xb0>
 8005f94:	d948      	bls.n	8006028 <arm_cfft_f32+0xe0>
 8005f96:	2d40      	cmp	r5, #64	@ 0x40
 8005f98:	d0ed      	beq.n	8005f76 <arm_cfft_f32+0x2e>
 8005f9a:	2d80      	cmp	r5, #128	@ 0x80
 8005f9c:	d1f1      	bne.n	8005f82 <arm_cfft_f32+0x3a>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f7ff fca9 	bl	80058f8 <arm_cfft_radix8by2_f32>
 8005fa6:	f1b8 0f00 	cmp.w	r8, #0
 8005faa:	d0ed      	beq.n	8005f88 <arm_cfft_f32+0x40>
 8005fac:	68b2      	ldr	r2, [r6, #8]
 8005fae:	4620      	mov	r0, r4
 8005fb0:	89b1      	ldrh	r1, [r6, #12]
 8005fb2:	f7fa f935 	bl	8000220 <arm_bitreversal_32>
 8005fb6:	2f01      	cmp	r7, #1
 8005fb8:	d1e8      	bne.n	8005f8c <arm_cfft_f32+0x44>
 8005fba:	ee07 5a90 	vmov	s15, r5
 8005fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	d0de      	beq.n	8005f8c <arm_cfft_f32+0x44>
 8005fce:	f104 0108 	add.w	r1, r4, #8
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005fde:	3108      	adds	r1, #8
 8005fe0:	429d      	cmp	r5, r3
 8005fe2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005fe6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005fea:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005fee:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005ff2:	d1ef      	bne.n	8005fd4 <arm_cfft_f32+0x8c>
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff fd4c 	bl	8005a98 <arm_cfft_radix8by4_f32>
 8006000:	e7bf      	b.n	8005f82 <arm_cfft_f32+0x3a>
 8006002:	b1a5      	cbz	r5, 800602e <arm_cfft_f32+0xe6>
 8006004:	f101 030c 	add.w	r3, r1, #12
 8006008:	2200      	movs	r2, #0
 800600a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800600e:	3201      	adds	r2, #1
 8006010:	3308      	adds	r3, #8
 8006012:	eef1 7a67 	vneg.f32	s15, s15
 8006016:	4295      	cmp	r5, r2
 8006018:	ed43 7a04 	vstr	s15, [r3, #-16]
 800601c:	d1f5      	bne.n	800600a <arm_cfft_f32+0xc2>
 800601e:	e79c      	b.n	8005f5a <arm_cfft_f32+0x12>
 8006020:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006024:	d0a7      	beq.n	8005f76 <arm_cfft_f32+0x2e>
 8006026:	e7ac      	b.n	8005f82 <arm_cfft_f32+0x3a>
 8006028:	2d10      	cmp	r5, #16
 800602a:	d0b8      	beq.n	8005f9e <arm_cfft_f32+0x56>
 800602c:	e7a9      	b.n	8005f82 <arm_cfft_f32+0x3a>
 800602e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006032:	d896      	bhi.n	8005f62 <arm_cfft_f32+0x1a>
 8006034:	e7ac      	b.n	8005f90 <arm_cfft_f32+0x48>
 8006036:	bf00      	nop

08006038 <arm_cmplx_mag_squared_f32>:
 8006038:	b470      	push	{r4, r5, r6}
 800603a:	0896      	lsrs	r6, r2, #2
 800603c:	d03e      	beq.n	80060bc <arm_cmplx_mag_squared_f32+0x84>
 800603e:	f100 0320 	add.w	r3, r0, #32
 8006042:	f101 0410 	add.w	r4, r1, #16
 8006046:	4635      	mov	r5, r6
 8006048:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 800604c:	3d01      	subs	r5, #1
 800604e:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 8006052:	f104 0410 	add.w	r4, r4, #16
 8006056:	ed53 5a07 	vldr	s11, [r3, #-28]	@ 0xffffffe4
 800605a:	ee27 5a07 	vmul.f32	s10, s14, s14
 800605e:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
 8006062:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006066:	ed13 7a04 	vldr	s14, [r3, #-16]
 800606a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800606e:	ed13 4a03 	vldr	s8, [r3, #-12]
 8006072:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8006076:	ed53 7a02 	vldr	s15, [r3, #-8]
 800607a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800607e:	ed53 4a01 	vldr	s9, [r3, #-4]
 8006082:	ee24 4a04 	vmul.f32	s8, s8, s8
 8006086:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800608a:	f103 0320 	add.w	r3, r3, #32
 800608e:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8006092:	ee75 5a25 	vadd.f32	s11, s10, s11
 8006096:	ee76 6a26 	vadd.f32	s13, s12, s13
 800609a:	ee37 7a04 	vadd.f32	s14, s14, s8
 800609e:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80060a2:	ed44 5a08 	vstr	s11, [r4, #-32]	@ 0xffffffe0
 80060a6:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 80060aa:	ed04 7a06 	vstr	s14, [r4, #-24]	@ 0xffffffe8
 80060ae:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80060b2:	d1c9      	bne.n	8006048 <arm_cmplx_mag_squared_f32+0x10>
 80060b4:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 80060b8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80060bc:	f012 0203 	ands.w	r2, r2, #3
 80060c0:	d010      	beq.n	80060e4 <arm_cmplx_mag_squared_f32+0xac>
 80060c2:	3008      	adds	r0, #8
 80060c4:	ed50 7a02 	vldr	s15, [r0, #-8]
 80060c8:	3a01      	subs	r2, #1
 80060ca:	ed10 7a01 	vldr	s14, [r0, #-4]
 80060ce:	f100 0008 	add.w	r0, r0, #8
 80060d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060d6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80060da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80060de:	ece1 7a01 	vstmia	r1!, {s15}
 80060e2:	d1ef      	bne.n	80060c4 <arm_cmplx_mag_squared_f32+0x8c>
 80060e4:	bc70      	pop	{r4, r5, r6}
 80060e6:	4770      	bx	lr

080060e8 <arm_mult_f32>:
 80060e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ea:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80060ee:	d033      	beq.n	8006158 <arm_mult_f32+0x70>
 80060f0:	f100 0610 	add.w	r6, r0, #16
 80060f4:	f101 0510 	add.w	r5, r1, #16
 80060f8:	f102 0410 	add.w	r4, r2, #16
 80060fc:	4677      	mov	r7, lr
 80060fe:	ed16 7a04 	vldr	s14, [r6, #-16]
 8006102:	3f01      	subs	r7, #1
 8006104:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006108:	f106 0610 	add.w	r6, r6, #16
 800610c:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 8006110:	f105 0510 	add.w	r5, r5, #16
 8006114:	ee27 6a06 	vmul.f32	s12, s14, s12
 8006118:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 800611c:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 8006120:	f104 0410 	add.w	r4, r4, #16
 8006124:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 8006128:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800612c:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 8006130:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 8006134:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006138:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 800613c:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 8006140:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006144:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 8006148:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 800614c:	d1d7      	bne.n	80060fe <arm_mult_f32+0x16>
 800614e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006152:	4420      	add	r0, r4
 8006154:	4421      	add	r1, r4
 8006156:	4422      	add	r2, r4
 8006158:	f013 0303 	ands.w	r3, r3, #3
 800615c:	d009      	beq.n	8006172 <arm_mult_f32+0x8a>
 800615e:	ecf0 7a01 	vldmia	r0!, {s15}
 8006162:	3b01      	subs	r3, #1
 8006164:	ecb1 7a01 	vldmia	r1!, {s14}
 8006168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800616c:	ece2 7a01 	vstmia	r2!, {s15}
 8006170:	d1f5      	bne.n	800615e <arm_mult_f32+0x76>
 8006172:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006174 <arm_radix8_butterfly_f32>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	469e      	mov	lr, r3
 800617a:	4603      	mov	r3, r0
 800617c:	468a      	mov	sl, r1
 800617e:	468b      	mov	fp, r1
 8006180:	3304      	adds	r3, #4
 8006182:	ed2d 8b10 	vpush	{d8-d15}
 8006186:	469c      	mov	ip, r3
 8006188:	b09d      	sub	sp, #116	@ 0x74
 800618a:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 8006498 <arm_radix8_butterfly_f32+0x324>
 800618e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006190:	921a      	str	r2, [sp, #104]	@ 0x68
 8006192:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006194:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8006198:	f04f 0800 	mov.w	r8, #0
 800619c:	461a      	mov	r2, r3
 800619e:	9311      	str	r3, [sp, #68]	@ 0x44
 80061a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061a4:	4611      	mov	r1, r2
 80061a6:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	0053      	lsls	r3, r2, #1
 80061ae:	18d5      	adds	r5, r2, r3
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	0113      	lsls	r3, r2, #4
 80061b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80061b6:	194c      	adds	r4, r1, r5
 80061b8:	eb02 0609 	add.w	r6, r2, r9
 80061bc:	9302      	str	r3, [sp, #8]
 80061be:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80061c2:	4613      	mov	r3, r2
 80061c4:	190a      	adds	r2, r1, r4
 80061c6:	eb06 0709 	add.w	r7, r6, r9
 80061ca:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80061ce:	1888      	adds	r0, r1, r2
 80061d0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80061d4:	4401      	add	r1, r0
 80061d6:	3204      	adds	r2, #4
 80061d8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80061dc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80061e0:	9b00      	ldr	r3, [sp, #0]
 80061e2:	3104      	adds	r1, #4
 80061e4:	ed5c 7a01 	vldr	s15, [ip, #-4]
 80061e8:	44d8      	add	r8, fp
 80061ea:	ed90 7a00 	vldr	s14, [r0]
 80061ee:	ed94 5a00 	vldr	s10, [r4]
 80061f2:	45c2      	cmp	sl, r8
 80061f4:	edd7 3a00 	vldr	s7, [r7]
 80061f8:	ed96 6a00 	vldr	s12, [r6]
 80061fc:	ee37 1a85 	vadd.f32	s2, s15, s10
 8006200:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006204:	ee73 4a87 	vadd.f32	s9, s7, s14
 8006208:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800620c:	edd5 7a00 	vldr	s15, [r5]
 8006210:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8006214:	ed11 7a01 	vldr	s14, [r1, #-4]
 8006218:	ee36 2a26 	vadd.f32	s4, s12, s13
 800621c:	ee37 4a87 	vadd.f32	s8, s15, s14
 8006220:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006224:	ee71 5a24 	vadd.f32	s11, s2, s9
 8006228:	ee32 6a04 	vadd.f32	s12, s4, s8
 800622c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006230:	ee31 1a64 	vsub.f32	s2, s2, s9
 8006234:	ee75 4a86 	vadd.f32	s9, s11, s12
 8006238:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800623c:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8006240:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8006244:	ee32 2a44 	vsub.f32	s4, s4, s8
 8006248:	ee67 7a89 	vmul.f32	s15, s15, s18
 800624c:	ed94 0a01 	vldr	s0, [r4, #4]
 8006250:	edc4 5a00 	vstr	s11, [r4]
 8006254:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006258:	edd6 5a01 	vldr	s11, [r6, #4]
 800625c:	edd5 2a01 	vldr	s5, [r5, #4]
 8006260:	ee75 1a27 	vadd.f32	s3, s10, s15
 8006264:	ed92 4a00 	vldr	s8, [r2]
 8006268:	ee75 7a67 	vsub.f32	s15, s10, s15
 800626c:	edd1 4a00 	vldr	s9, [r1]
 8006270:	ee27 7a09 	vmul.f32	s14, s14, s18
 8006274:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8006278:	ed9c 6a00 	vldr	s12, [ip]
 800627c:	ee72 6ae4 	vsub.f32	s13, s5, s9
 8006280:	edd0 0a01 	vldr	s1, [r0, #4]
 8006284:	ed97 5a01 	vldr	s10, [r7, #4]
 8006288:	ee35 4a84 	vadd.f32	s8, s11, s8
 800628c:	ee72 4aa4 	vadd.f32	s9, s5, s9
 8006290:	ee73 5a26 	vadd.f32	s11, s6, s13
 8006294:	ee76 2a00 	vadd.f32	s5, s12, s0
 8006298:	ee73 6a66 	vsub.f32	s13, s6, s13
 800629c:	ee36 6a40 	vsub.f32	s12, s12, s0
 80062a0:	ee35 0a20 	vadd.f32	s0, s10, s1
 80062a4:	ee65 5a89 	vmul.f32	s11, s11, s18
 80062a8:	ee35 5a60 	vsub.f32	s10, s10, s1
 80062ac:	ee32 3a80 	vadd.f32	s6, s5, s0
 80062b0:	ee74 0a24 	vadd.f32	s1, s8, s9
 80062b4:	ee66 6a89 	vmul.f32	s13, s13, s18
 80062b8:	ee74 4a64 	vsub.f32	s9, s8, s9
 80062bc:	ee32 4ac0 	vsub.f32	s8, s5, s0
 80062c0:	ee75 2a25 	vadd.f32	s5, s10, s11
 80062c4:	ee33 0a20 	vadd.f32	s0, s6, s1
 80062c8:	ee75 5a65 	vsub.f32	s11, s10, s11
 80062cc:	ee33 3a60 	vsub.f32	s6, s6, s1
 80062d0:	ee36 5a26 	vadd.f32	s10, s12, s13
 80062d4:	ed8c 0a00 	vstr	s0, [ip]
 80062d8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80062dc:	449c      	add	ip, r3
 80062de:	ee33 6a87 	vadd.f32	s12, s7, s14
 80062e2:	ed84 3a01 	vstr	s6, [r4, #4]
 80062e6:	ee33 7ac7 	vsub.f32	s14, s7, s14
 80062ea:	441c      	add	r4, r3
 80062ec:	ee71 3a24 	vadd.f32	s7, s2, s9
 80062f0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80062f4:	ee31 3aa2 	vadd.f32	s6, s3, s5
 80062f8:	edc7 3a00 	vstr	s7, [r7]
 80062fc:	ee34 1a42 	vsub.f32	s2, s8, s4
 8006300:	edc0 4a00 	vstr	s9, [r0]
 8006304:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8006308:	ee75 4a46 	vsub.f32	s9, s10, s12
 800630c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006310:	ed87 1a01 	vstr	s2, [r7, #4]
 8006314:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8006318:	441f      	add	r7, r3
 800631a:	ee32 4a04 	vadd.f32	s8, s4, s8
 800631e:	ee71 1ae2 	vsub.f32	s3, s3, s5
 8006322:	ee36 6a05 	vadd.f32	s12, s12, s10
 8006326:	ee37 7a26 	vadd.f32	s14, s14, s13
 800632a:	ed80 4a01 	vstr	s8, [r0, #4]
 800632e:	ed86 3a00 	vstr	s6, [r6]
 8006332:	4418      	add	r0, r3
 8006334:	ed41 1a01 	vstr	s3, [r1, #-4]
 8006338:	ed42 3a01 	vstr	s7, [r2, #-4]
 800633c:	edc5 7a00 	vstr	s15, [r5]
 8006340:	edc6 4a01 	vstr	s9, [r6, #4]
 8006344:	441e      	add	r6, r3
 8006346:	ed81 6a00 	vstr	s12, [r1]
 800634a:	4419      	add	r1, r3
 800634c:	edc2 5a00 	vstr	s11, [r2]
 8006350:	441a      	add	r2, r3
 8006352:	ed85 7a01 	vstr	s14, [r5, #4]
 8006356:	441d      	add	r5, r3
 8006358:	f63f af44 	bhi.w	80061e4 <arm_radix8_butterfly_f32+0x70>
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006360:	2b07      	cmp	r3, #7
 8006362:	f240 81f4 	bls.w	800674e <arm_radix8_butterfly_f32+0x5da>
 8006366:	9901      	ldr	r1, [sp, #4]
 8006368:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800636c:	9d02      	ldr	r5, [sp, #8]
 800636e:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 8006372:	3101      	adds	r1, #1
 8006374:	eb04 000e 	add.w	r0, r4, lr
 8006378:	00e4      	lsls	r4, r4, #3
 800637a:	3508      	adds	r5, #8
 800637c:	4419      	add	r1, r3
 800637e:	eb00 0c0e 	add.w	ip, r0, lr
 8006382:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006384:	00c0      	lsls	r0, r0, #3
 8006386:	185e      	adds	r6, r3, r1
 8006388:	4617      	mov	r7, r2
 800638a:	9218      	str	r2, [sp, #96]	@ 0x60
 800638c:	f109 0908 	add.w	r9, r9, #8
 8006390:	199c      	adds	r4, r3, r6
 8006392:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006394:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006396:	9012      	str	r0, [sp, #72]	@ 0x48
 8006398:	195d      	adds	r5, r3, r5
 800639a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800639c:	443a      	add	r2, r7
 800639e:	950c      	str	r5, [sp, #48]	@ 0x30
 80063a0:	4698      	mov	r8, r3
 80063a2:	4420      	add	r0, r4
 80063a4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80063a6:	19d7      	adds	r7, r2, r7
 80063a8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80063ac:	4405      	add	r5, r0
 80063ae:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80063b2:	9710      	str	r7, [sp, #64]	@ 0x40
 80063b4:	eb0c 070e 	add.w	r7, ip, lr
 80063b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80063bc:	3404      	adds	r4, #4
 80063be:	3004      	adds	r0, #4
 80063c0:	44c8      	add	r8, r9
 80063c2:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 80063c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80063c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80063ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80063cc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80063d0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80063d2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80063d6:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80063d8:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 80063dc:	eb07 080e 	add.w	r8, r7, lr
 80063e0:	eb04 0900 	add.w	r9, r4, r0
 80063e4:	00f8      	lsls	r0, r7, #3
 80063e6:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80063ea:	3504      	adds	r5, #4
 80063ec:	4607      	mov	r7, r0
 80063ee:	9017      	str	r0, [sp, #92]	@ 0x5c
 80063f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80063f2:	4618      	mov	r0, r3
 80063f4:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 80063f8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80063fa:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 80063fe:	18e3      	adds	r3, r4, r3
 8006400:	9508      	str	r5, [sp, #32]
 8006402:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006404:	910e      	str	r1, [sp, #56]	@ 0x38
 8006406:	4621      	mov	r1, r4
 8006408:	eb04 0805 	add.w	r8, r4, r5
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	19e5      	adds	r5, r4, r7
 8006410:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8006414:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006416:	9316      	str	r3, [sp, #88]	@ 0x58
 8006418:	190b      	adds	r3, r1, r4
 800641a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800641c:	9505      	str	r5, [sp, #20]
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	f100 0308 	add.w	r3, r0, #8
 8006424:	9707      	str	r7, [sp, #28]
 8006426:	4638      	mov	r0, r7
 8006428:	930f      	str	r3, [sp, #60]	@ 0x3c
 800642a:	2301      	movs	r3, #1
 800642c:	9306      	str	r3, [sp, #24]
 800642e:	9b00      	ldr	r3, [sp, #0]
 8006430:	ed90 fa00 	vldr	s30, [r0]
 8006434:	edd0 ba01 	vldr	s23, [r0, #4]
 8006438:	9803      	ldr	r0, [sp, #12]
 800643a:	9903      	ldr	r1, [sp, #12]
 800643c:	ed90 ba01 	vldr	s22, [r0, #4]
 8006440:	9804      	ldr	r0, [sp, #16]
 8006442:	edd1 ea00 	vldr	s29, [r1]
 8006446:	edd0 aa01 	vldr	s21, [r0, #4]
 800644a:	9805      	ldr	r0, [sp, #20]
 800644c:	9905      	ldr	r1, [sp, #20]
 800644e:	edd0 7a01 	vldr	s15, [r0, #4]
 8006452:	ed91 da00 	vldr	s26, [r1]
 8006456:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006458:	9c04      	ldr	r4, [sp, #16]
 800645a:	edcd 7a01 	vstr	s15, [sp, #4]
 800645e:	edd8 7a01 	vldr	s15, [r8, #4]
 8006462:	9100      	str	r1, [sp, #0]
 8006464:	edd2 fa00 	vldr	s31, [r2]
 8006468:	ed94 ea00 	vldr	s28, [r4]
 800646c:	ed92 ca01 	vldr	s24, [r2, #4]
 8006470:	f8dd e020 	ldr.w	lr, [sp, #32]
 8006474:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006476:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006478:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800647a:	edd9 da00 	vldr	s27, [r9]
 800647e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006480:	edd8 ca00 	vldr	s25, [r8]
 8006484:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006486:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006488:	f8dd c018 	ldr.w	ip, [sp, #24]
 800648c:	ed99 aa01 	vldr	s20, [r9, #4]
 8006490:	edcd 7a02 	vstr	s15, [sp, #8]
 8006494:	9800      	ldr	r0, [sp, #0]
 8006496:	e001      	b.n	800649c <arm_radix8_butterfly_f32+0x328>
 8006498:	3f3504f3 	.word	0x3f3504f3
 800649c:	edd5 3a00 	vldr	s7, [r5]
 80064a0:	44dc      	add	ip, fp
 80064a2:	ed91 7a00 	vldr	s14, [r1]
 80064a6:	edd4 8a00 	vldr	s17, [r4]
 80064aa:	45e2      	cmp	sl, ip
 80064ac:	ed57 7a01 	vldr	s15, [r7, #-4]
 80064b0:	ed90 5a00 	vldr	s10, [r0]
 80064b4:	ed56 5a01 	vldr	s11, [r6, #-4]
 80064b8:	ee38 6aa7 	vadd.f32	s12, s17, s15
 80064bc:	ed92 1a00 	vldr	s2, [r2]
 80064c0:	ee78 4ae7 	vsub.f32	s9, s17, s15
 80064c4:	ed1e 4a01 	vldr	s8, [lr, #-4]
 80064c8:	ee75 9a25 	vadd.f32	s19, s10, s11
 80064cc:	ee31 3a07 	vadd.f32	s6, s2, s14
 80064d0:	ed92 8a01 	vldr	s16, [r2, #4]
 80064d4:	ee73 6a84 	vadd.f32	s13, s7, s8
 80064d8:	ee75 5a65 	vsub.f32	s11, s10, s11
 80064dc:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80064e0:	ee73 1a06 	vadd.f32	s3, s6, s12
 80064e4:	ee39 5aa6 	vadd.f32	s10, s19, s13
 80064e8:	ee75 7a84 	vadd.f32	s15, s11, s8
 80064ec:	ee31 1a47 	vsub.f32	s2, s2, s14
 80064f0:	ee31 7a85 	vadd.f32	s14, s3, s10
 80064f4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80064f8:	ee33 3a46 	vsub.f32	s6, s6, s12
 80064fc:	ed82 7a00 	vstr	s14, [r2]
 8006500:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8006504:	ed96 6a00 	vldr	s12, [r6]
 8006508:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800650c:	edd5 3a01 	vldr	s7, [r5, #4]
 8006510:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8006514:	ed90 7a01 	vldr	s14, [r0, #4]
 8006518:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800651c:	edde 4a00 	vldr	s9, [lr]
 8006520:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8006524:	ee77 2a46 	vsub.f32	s5, s14, s12
 8006528:	edd1 6a01 	vldr	s13, [r1, #4]
 800652c:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8006530:	edd7 0a00 	vldr	s1, [r7]
 8006534:	ee77 5a06 	vadd.f32	s11, s14, s12
 8006538:	ed94 7a01 	vldr	s14, [r4, #4]
 800653c:	ee33 6aa4 	vadd.f32	s12, s7, s9
 8006540:	ee32 0ae7 	vsub.f32	s0, s5, s15
 8006544:	ee78 4a66 	vsub.f32	s9, s16, s13
 8006548:	ee78 3a26 	vadd.f32	s7, s16, s13
 800654c:	ee72 2aa7 	vadd.f32	s5, s5, s15
 8006550:	ee77 6a20 	vadd.f32	s13, s14, s1
 8006554:	ee24 4a09 	vmul.f32	s8, s8, s18
 8006558:	ee37 7a60 	vsub.f32	s14, s14, s1
 800655c:	ee20 8a09 	vmul.f32	s16, s0, s18
 8006560:	ee75 0a86 	vadd.f32	s1, s11, s12
 8006564:	ee33 0aa6 	vadd.f32	s0, s7, s13
 8006568:	ee62 2a89 	vmul.f32	s5, s5, s18
 800656c:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8006570:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8006574:	ee77 7a62 	vsub.f32	s15, s14, s5
 8006578:	ee74 5a88 	vadd.f32	s11, s9, s16
 800657c:	ee34 8ac8 	vsub.f32	s16, s9, s16
 8006580:	ee77 4a22 	vadd.f32	s9, s14, s5
 8006584:	ee71 2a04 	vadd.f32	s5, s2, s8
 8006588:	ee31 7a44 	vsub.f32	s14, s2, s8
 800658c:	ee30 1a60 	vsub.f32	s2, s0, s1
 8006590:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006594:	ee33 6a46 	vsub.f32	s12, s6, s12
 8006598:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800659c:	ee79 6aa3 	vadd.f32	s13, s19, s7
 80065a0:	ee38 4a68 	vsub.f32	s8, s16, s17
 80065a4:	ee75 3ac2 	vsub.f32	s7, s11, s4
 80065a8:	ee72 5a25 	vadd.f32	s11, s4, s11
 80065ac:	ee32 2aa4 	vadd.f32	s4, s5, s9
 80065b0:	ee72 4ae4 	vsub.f32	s9, s5, s9
 80065b4:	ee77 2a27 	vadd.f32	s5, s14, s15
 80065b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065bc:	ee78 7a88 	vadd.f32	s15, s17, s16
 80065c0:	ee6e 8a05 	vmul.f32	s17, s28, s10
 80065c4:	ee2a 8a81 	vmul.f32	s16, s21, s2
 80065c8:	ee2a 5a85 	vmul.f32	s10, s21, s10
 80065cc:	ee2e 1a01 	vmul.f32	s2, s28, s2
 80065d0:	ee6f 9a21 	vmul.f32	s19, s30, s3
 80065d4:	ee70 0a20 	vadd.f32	s1, s0, s1
 80065d8:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 80065dc:	ee2b 0a83 	vmul.f32	s0, s23, s6
 80065e0:	ee2f 3a03 	vmul.f32	s6, s30, s6
 80065e4:	edc2 0a01 	vstr	s1, [r2, #4]
 80065e8:	ee38 8a88 	vadd.f32	s16, s17, s16
 80065ec:	441a      	add	r2, r3
 80065ee:	ee6c 8a23 	vmul.f32	s17, s24, s7
 80065f2:	ee31 5a45 	vsub.f32	s10, s2, s10
 80065f6:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 80065fa:	ed81 8a00 	vstr	s16, [r1]
 80065fe:	ee39 0a80 	vadd.f32	s0, s19, s0
 8006602:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006606:	ed81 5a01 	vstr	s10, [r1, #4]
 800660a:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800660e:	edcd 3a00 	vstr	s7, [sp]
 8006612:	ed9d 5a02 	vldr	s10, [sp, #8]
 8006616:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800661a:	eddd 3a01 	vldr	s7, [sp, #4]
 800661e:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 8006622:	ed84 0a00 	vstr	s0, [r4]
 8006626:	ee65 4a24 	vmul.f32	s9, s10, s9
 800662a:	ed84 3a01 	vstr	s6, [r4, #4]
 800662e:	ee23 1aa6 	vmul.f32	s2, s7, s13
 8006632:	ee23 6a86 	vmul.f32	s12, s7, s12
 8006636:	eddd 3a00 	vldr	s7, [sp]
 800663a:	ee25 5a25 	vmul.f32	s10, s10, s11
 800663e:	4419      	add	r1, r3
 8006640:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 8006644:	441c      	add	r4, r3
 8006646:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800664a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800664e:	ee2e 3a87 	vmul.f32	s6, s29, s14
 8006652:	ee6b 8a27 	vmul.f32	s17, s22, s15
 8006656:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800665a:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800665e:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 8006662:	ee6a 2a22 	vmul.f32	s5, s20, s5
 8006666:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800666a:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800666e:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 8006672:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006676:	ee38 8a01 	vadd.f32	s16, s16, s2
 800667a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800667e:	ee39 5a85 	vadd.f32	s10, s19, s10
 8006682:	ee75 4ae4 	vsub.f32	s9, s11, s9
 8006686:	ed07 8a01 	vstr	s16, [r7, #-4]
 800668a:	ee30 0a21 	vadd.f32	s0, s0, s3
 800668e:	ed87 6a00 	vstr	s12, [r7]
 8006692:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006696:	edc0 0a00 	vstr	s1, [r0]
 800669a:	ee33 3a28 	vadd.f32	s6, s6, s17
 800669e:	edc0 3a01 	vstr	s7, [r0, #4]
 80066a2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066a6:	ed0e 5a01 	vstr	s10, [lr, #-4]
 80066aa:	edce 4a00 	vstr	s9, [lr]
 80066ae:	4418      	add	r0, r3
 80066b0:	ed06 0a01 	vstr	s0, [r6, #-4]
 80066b4:	441f      	add	r7, r3
 80066b6:	edc6 2a00 	vstr	s5, [r6]
 80066ba:	449e      	add	lr, r3
 80066bc:	ed85 3a00 	vstr	s6, [r5]
 80066c0:	441e      	add	r6, r3
 80066c2:	ed85 7a01 	vstr	s14, [r5, #4]
 80066c6:	441d      	add	r5, r3
 80066c8:	f63f aee8 	bhi.w	800649c <arm_radix8_butterfly_f32+0x328>
 80066cc:	9a06      	ldr	r2, [sp, #24]
 80066ce:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80066d0:	3201      	adds	r2, #1
 80066d2:	4611      	mov	r1, r2
 80066d4:	9206      	str	r2, [sp, #24]
 80066d6:	9a07      	ldr	r2, [sp, #28]
 80066d8:	4402      	add	r2, r0
 80066da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80066dc:	9207      	str	r2, [sp, #28]
 80066de:	9a03      	ldr	r2, [sp, #12]
 80066e0:	4402      	add	r2, r0
 80066e2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80066e4:	9203      	str	r2, [sp, #12]
 80066e6:	9a04      	ldr	r2, [sp, #16]
 80066e8:	4402      	add	r2, r0
 80066ea:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80066ec:	9204      	str	r2, [sp, #16]
 80066ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80066f0:	4491      	add	r9, r2
 80066f2:	9a05      	ldr	r2, [sp, #20]
 80066f4:	4402      	add	r2, r0
 80066f6:	9205      	str	r2, [sp, #20]
 80066f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80066fa:	4490      	add	r8, r2
 80066fc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066fe:	3208      	adds	r2, #8
 8006700:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006704:	3208      	adds	r2, #8
 8006706:	920e      	str	r2, [sp, #56]	@ 0x38
 8006708:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800670a:	3208      	adds	r2, #8
 800670c:	920d      	str	r2, [sp, #52]	@ 0x34
 800670e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006710:	3208      	adds	r2, #8
 8006712:	920c      	str	r2, [sp, #48]	@ 0x30
 8006714:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006716:	3208      	adds	r2, #8
 8006718:	920b      	str	r2, [sp, #44]	@ 0x2c
 800671a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800671c:	3208      	adds	r2, #8
 800671e:	920a      	str	r2, [sp, #40]	@ 0x28
 8006720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006722:	3208      	adds	r2, #8
 8006724:	9209      	str	r2, [sp, #36]	@ 0x24
 8006726:	9a08      	ldr	r2, [sp, #32]
 8006728:	3208      	adds	r2, #8
 800672a:	9208      	str	r2, [sp, #32]
 800672c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800672e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8006730:	4622      	mov	r2, r4
 8006732:	4288      	cmp	r0, r1
 8006734:	d005      	beq.n	8006742 <arm_radix8_butterfly_f32+0x5ce>
 8006736:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006738:	4621      	mov	r1, r4
 800673a:	4401      	add	r1, r0
 800673c:	9807      	ldr	r0, [sp, #28]
 800673e:	9110      	str	r1, [sp, #64]	@ 0x40
 8006740:	e676      	b.n	8006430 <arm_radix8_butterfly_f32+0x2bc>
 8006742:	4683      	mov	fp, r0
 8006744:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 8006748:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 800674c:	e522      	b.n	8006194 <arm_radix8_butterfly_f32+0x20>
 800674e:	b01d      	add	sp, #116	@ 0x74
 8006750:	ecbd 8b10 	vpop	{d8-d15}
 8006754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006758 <ai_buffer_get_size>:
 8006758:	b368      	cbz	r0, 80067b6 <ai_buffer_get_size+0x5e>
 800675a:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <ai_buffer_get_size+0x60>)
 800675c:	4a17      	ldr	r2, [pc, #92]	@ (80067bc <ai_buffer_get_size+0x64>)
 800675e:	b410      	push	{r4}
 8006760:	6804      	ldr	r4, [r0, #0]
 8006762:	4023      	ands	r3, r4
 8006764:	4293      	cmp	r3, r2
 8006766:	d123      	bne.n	80067b0 <ai_buffer_get_size+0x58>
 8006768:	b311      	cbz	r1, 80067b0 <ai_buffer_get_size+0x58>
 800676a:	6984      	ldr	r4, [r0, #24]
 800676c:	6862      	ldr	r2, [r4, #4]
 800676e:	321f      	adds	r2, #31
 8006770:	f022 021f 	bic.w	r2, r2, #31
 8006774:	7d03      	ldrb	r3, [r0, #20]
 8006776:	6941      	ldr	r1, [r0, #20]
 8006778:	f1a3 0301 	sub.w	r3, r3, #1
 800677c:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8006780:	fab3 f383 	clz	r3, r3
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800678a:	da0c      	bge.n	80067a6 <ai_buffer_get_size+0x4e>
 800678c:	2b01      	cmp	r3, #1
 800678e:	d103      	bne.n	8006798 <ai_buffer_get_size+0x40>
 8006790:	2802      	cmp	r0, #2
 8006792:	f04f 0302 	mov.w	r3, #2
 8006796:	d006      	beq.n	80067a6 <ai_buffer_get_size+0x4e>
 8006798:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800679c:	3301      	adds	r3, #1
 800679e:	4298      	cmp	r0, r3
 80067a0:	fb01 f202 	mul.w	r2, r1, r2
 80067a4:	d1f2      	bne.n	800678c <ai_buffer_get_size+0x34>
 80067a6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80067aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	6984      	ldr	r4, [r0, #24]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	e7de      	b.n	8006774 <ai_buffer_get_size+0x1c>
 80067b6:	4770      	bx	lr
 80067b8:	017fffff 	.word	0x017fffff
 80067bc:	000400c0 	.word	0x000400c0

080067c0 <ai_buffer_array_sane>:
 80067c0:	b138      	cbz	r0, 80067d2 <ai_buffer_array_sane+0x12>
 80067c2:	6843      	ldr	r3, [r0, #4]
 80067c4:	b123      	cbz	r3, 80067d0 <ai_buffer_array_sane+0x10>
 80067c6:	8840      	ldrh	r0, [r0, #2]
 80067c8:	3800      	subs	r0, #0
 80067ca:	bf18      	it	ne
 80067cc:	2001      	movne	r0, #1
 80067ce:	4770      	bx	lr
 80067d0:	4618      	mov	r0, r3
 80067d2:	4770      	bx	lr

080067d4 <ai_buffer_array_item_set_address>:
 80067d4:	b150      	cbz	r0, 80067ec <ai_buffer_array_item_set_address+0x18>
 80067d6:	6843      	ldr	r3, [r0, #4]
 80067d8:	b14b      	cbz	r3, 80067ee <ai_buffer_array_item_set_address+0x1a>
 80067da:	8840      	ldrh	r0, [r0, #2]
 80067dc:	b900      	cbnz	r0, 80067e0 <ai_buffer_array_item_set_address+0xc>
 80067de:	4770      	bx	lr
 80067e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80067e4:	2001      	movs	r0, #1
 80067e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80067ea:	604a      	str	r2, [r1, #4]
 80067ec:	4770      	bx	lr
 80067ee:	4618      	mov	r0, r3
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <_ai_platform_acquire_crc>:
 80067f4:	2001      	movs	r0, #1
 80067f6:	4770      	bx	lr

080067f8 <_ai_platform_release_crc>:
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <ai_platform_get_weights_map>:
 80067fc:	2900      	cmp	r1, #0
 80067fe:	bf18      	it	ne
 8006800:	2800      	cmpne	r0, #0
 8006802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006804:	bf0c      	ite	eq
 8006806:	2401      	moveq	r4, #1
 8006808:	2400      	movne	r4, #0
 800680a:	2a00      	cmp	r2, #0
 800680c:	bf08      	it	eq
 800680e:	f044 0401 	orreq.w	r4, r4, #1
 8006812:	b114      	cbz	r4, 800681a <ai_platform_get_weights_map+0x1e>
 8006814:	2400      	movs	r4, #0
 8006816:	4620      	mov	r0, r4
 8006818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800681a:	4616      	mov	r6, r2
 800681c:	4b22      	ldr	r3, [pc, #136]	@ (80068a8 <ai_platform_get_weights_map+0xac>)
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	4605      	mov	r5, r0
 8006822:	460f      	mov	r7, r1
 8006824:	429a      	cmp	r2, r3
 8006826:	d022      	beq.n	800686e <ai_platform_get_weights_map+0x72>
 8006828:	6870      	ldr	r0, [r6, #4]
 800682a:	2800      	cmp	r0, #0
 800682c:	d0f2      	beq.n	8006814 <ai_platform_get_weights_map+0x18>
 800682e:	6806      	ldr	r6, [r0, #0]
 8006830:	429e      	cmp	r6, r3
 8006832:	d006      	beq.n	8006842 <ai_platform_get_weights_map+0x46>
 8006834:	f1a1 0401 	sub.w	r4, r1, #1
 8006838:	6028      	str	r0, [r5, #0]
 800683a:	fab4 f484 	clz	r4, r4
 800683e:	0964      	lsrs	r4, r4, #5
 8006840:	e7e9      	b.n	8006816 <ai_platform_get_weights_map+0x1a>
 8006842:	3d04      	subs	r5, #4
 8006844:	4602      	mov	r2, r0
 8006846:	4621      	mov	r1, r4
 8006848:	e000      	b.n	800684c <ai_platform_get_weights_map+0x50>
 800684a:	4619      	mov	r1, r3
 800684c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006850:	42b3      	cmp	r3, r6
 8006852:	d025      	beq.n	80068a0 <ai_platform_get_weights_map+0xa4>
 8006854:	f845 3f04 	str.w	r3, [r5, #4]!
 8006858:	1c4b      	adds	r3, r1, #1
 800685a:	429f      	cmp	r7, r3
 800685c:	d8f5      	bhi.n	800684a <ai_platform_get_weights_map+0x4e>
 800685e:	d1da      	bne.n	8006816 <ai_platform_get_weights_map+0x1a>
 8006860:	3102      	adds	r1, #2
 8006862:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006866:	42b3      	cmp	r3, r6
 8006868:	d1d5      	bne.n	8006816 <ai_platform_get_weights_map+0x1a>
 800686a:	2401      	movs	r4, #1
 800686c:	e7d3      	b.n	8006816 <ai_platform_get_weights_map+0x1a>
 800686e:	1d30      	adds	r0, r6, #4
 8006870:	f7ff ffa6 	bl	80067c0 <ai_buffer_array_sane>
 8006874:	2800      	cmp	r0, #0
 8006876:	d0cd      	beq.n	8006814 <ai_platform_get_weights_map+0x18>
 8006878:	88f3      	ldrh	r3, [r6, #6]
 800687a:	429f      	cmp	r7, r3
 800687c:	d1ca      	bne.n	8006814 <ai_platform_get_weights_map+0x18>
 800687e:	3d04      	subs	r5, #4
 8006880:	4622      	mov	r2, r4
 8006882:	68b3      	ldr	r3, [r6, #8]
 8006884:	4423      	add	r3, r4
 8006886:	341c      	adds	r4, #28
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	b123      	cbz	r3, 8006896 <ai_platform_get_weights_map+0x9a>
 800688c:	3201      	adds	r2, #1
 800688e:	f845 3f04 	str.w	r3, [r5, #4]!
 8006892:	4297      	cmp	r7, r2
 8006894:	d8f5      	bhi.n	8006882 <ai_platform_get_weights_map+0x86>
 8006896:	1abc      	subs	r4, r7, r2
 8006898:	fab4 f484 	clz	r4, r4
 800689c:	0964      	lsrs	r4, r4, #5
 800689e:	e7ba      	b.n	8006816 <ai_platform_get_weights_map+0x1a>
 80068a0:	428f      	cmp	r7, r1
 80068a2:	d1b8      	bne.n	8006816 <ai_platform_get_weights_map+0x1a>
 80068a4:	e7e1      	b.n	800686a <ai_platform_get_weights_map+0x6e>
 80068a6:	bf00      	nop
 80068a8:	a1facade 	.word	0xa1facade

080068ac <ai_platform_get_activations_map>:
 80068ac:	2900      	cmp	r1, #0
 80068ae:	bf18      	it	ne
 80068b0:	2800      	cmpne	r0, #0
 80068b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b4:	bf0c      	ite	eq
 80068b6:	2401      	moveq	r4, #1
 80068b8:	2400      	movne	r4, #0
 80068ba:	2a00      	cmp	r2, #0
 80068bc:	bf08      	it	eq
 80068be:	f044 0401 	orreq.w	r4, r4, #1
 80068c2:	b114      	cbz	r4, 80068ca <ai_platform_get_activations_map+0x1e>
 80068c4:	2400      	movs	r4, #0
 80068c6:	4620      	mov	r0, r4
 80068c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ca:	4616      	mov	r6, r2
 80068cc:	4b22      	ldr	r3, [pc, #136]	@ (8006958 <ai_platform_get_activations_map+0xac>)
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	4605      	mov	r5, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d022      	beq.n	800691e <ai_platform_get_activations_map+0x72>
 80068d8:	6a30      	ldr	r0, [r6, #32]
 80068da:	2800      	cmp	r0, #0
 80068dc:	d0f2      	beq.n	80068c4 <ai_platform_get_activations_map+0x18>
 80068de:	6806      	ldr	r6, [r0, #0]
 80068e0:	429e      	cmp	r6, r3
 80068e2:	d006      	beq.n	80068f2 <ai_platform_get_activations_map+0x46>
 80068e4:	f1a1 0401 	sub.w	r4, r1, #1
 80068e8:	6028      	str	r0, [r5, #0]
 80068ea:	fab4 f484 	clz	r4, r4
 80068ee:	0964      	lsrs	r4, r4, #5
 80068f0:	e7e9      	b.n	80068c6 <ai_platform_get_activations_map+0x1a>
 80068f2:	3d04      	subs	r5, #4
 80068f4:	4602      	mov	r2, r0
 80068f6:	4621      	mov	r1, r4
 80068f8:	e000      	b.n	80068fc <ai_platform_get_activations_map+0x50>
 80068fa:	4619      	mov	r1, r3
 80068fc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8006900:	42b3      	cmp	r3, r6
 8006902:	d026      	beq.n	8006952 <ai_platform_get_activations_map+0xa6>
 8006904:	f845 3f04 	str.w	r3, [r5, #4]!
 8006908:	1c4b      	adds	r3, r1, #1
 800690a:	429f      	cmp	r7, r3
 800690c:	d8f5      	bhi.n	80068fa <ai_platform_get_activations_map+0x4e>
 800690e:	d1da      	bne.n	80068c6 <ai_platform_get_activations_map+0x1a>
 8006910:	3102      	adds	r1, #2
 8006912:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006916:	42b3      	cmp	r3, r6
 8006918:	d1d5      	bne.n	80068c6 <ai_platform_get_activations_map+0x1a>
 800691a:	2401      	movs	r4, #1
 800691c:	e7d3      	b.n	80068c6 <ai_platform_get_activations_map+0x1a>
 800691e:	f106 000c 	add.w	r0, r6, #12
 8006922:	f7ff ff4d 	bl	80067c0 <ai_buffer_array_sane>
 8006926:	2800      	cmp	r0, #0
 8006928:	d0cc      	beq.n	80068c4 <ai_platform_get_activations_map+0x18>
 800692a:	89f3      	ldrh	r3, [r6, #14]
 800692c:	429f      	cmp	r7, r3
 800692e:	d1c9      	bne.n	80068c4 <ai_platform_get_activations_map+0x18>
 8006930:	3d04      	subs	r5, #4
 8006932:	4622      	mov	r2, r4
 8006934:	6933      	ldr	r3, [r6, #16]
 8006936:	4423      	add	r3, r4
 8006938:	341c      	adds	r4, #28
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	b123      	cbz	r3, 8006948 <ai_platform_get_activations_map+0x9c>
 800693e:	3201      	adds	r2, #1
 8006940:	f845 3f04 	str.w	r3, [r5, #4]!
 8006944:	4297      	cmp	r7, r2
 8006946:	d8f5      	bhi.n	8006934 <ai_platform_get_activations_map+0x88>
 8006948:	1abc      	subs	r4, r7, r2
 800694a:	fab4 f484 	clz	r4, r4
 800694e:	0964      	lsrs	r4, r4, #5
 8006950:	e7b9      	b.n	80068c6 <ai_platform_get_activations_map+0x1a>
 8006952:	428f      	cmp	r7, r1
 8006954:	d1b7      	bne.n	80068c6 <ai_platform_get_activations_map+0x1a>
 8006956:	e7e0      	b.n	800691a <ai_platform_get_activations_map+0x6e>
 8006958:	a1facade 	.word	0xa1facade

0800695c <ai_platform_bind_network_params>:
 800695c:	2a00      	cmp	r2, #0
 800695e:	bf18      	it	ne
 8006960:	2900      	cmpne	r1, #0
 8006962:	d010      	beq.n	8006986 <ai_platform_bind_network_params+0x2a>
 8006964:	b178      	cbz	r0, 8006986 <ai_platform_bind_network_params+0x2a>
 8006966:	4603      	mov	r3, r0
 8006968:	4808      	ldr	r0, [pc, #32]	@ (800698c <ai_platform_bind_network_params+0x30>)
 800696a:	f103 0c0c 	add.w	ip, r3, #12
 800696e:	f843 0b04 	str.w	r0, [r3], #4
 8006972:	c903      	ldmia	r1, {r0, r1}
 8006974:	e883 0003 	stmia.w	r3, {r0, r1}
 8006978:	2301      	movs	r3, #1
 800697a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800697e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8006982:	4618      	mov	r0, r3
 8006984:	4770      	bx	lr
 8006986:	2300      	movs	r3, #0
 8006988:	4618      	mov	r0, r3
 800698a:	4770      	bx	lr
 800698c:	a1facade 	.word	0xa1facade

08006990 <ai_platform_network_get_error>:
 8006990:	b510      	push	{r4, lr}
 8006992:	2800      	cmp	r0, #0
 8006994:	d03f      	beq.n	8006a16 <ai_platform_network_get_error+0x86>
 8006996:	4b7d      	ldr	r3, [pc, #500]	@ (8006b8c <ai_platform_network_get_error+0x1fc>)
 8006998:	4604      	mov	r4, r0
 800699a:	6802      	ldr	r2, [r0, #0]
 800699c:	429a      	cmp	r2, r3
 800699e:	d13a      	bne.n	8006a16 <ai_platform_network_get_error+0x86>
 80069a0:	f7ff ff28 	bl	80067f4 <_ai_platform_acquire_crc>
 80069a4:	4b7a      	ldr	r3, [pc, #488]	@ (8006b90 <ai_platform_network_get_error+0x200>)
 80069a6:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069b0:	189a      	adds	r2, r3, r2
 80069b2:	2a01      	cmp	r2, #1
 80069b4:	f240 8086 	bls.w	8006ac4 <ai_platform_network_get_error+0x134>
 80069b8:	f240 4249 	movw	r2, #1097	@ 0x449
 80069bc:	4293      	cmp	r3, r2
 80069be:	f000 8081 	beq.w	8006ac4 <ai_platform_network_get_error+0x134>
 80069c2:	4a74      	ldr	r2, [pc, #464]	@ (8006b94 <ai_platform_network_get_error+0x204>)
 80069c4:	6813      	ldr	r3, [r2, #0]
 80069c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069ca:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80069ce:	f000 8087 	beq.w	8006ae0 <ai_platform_network_get_error+0x150>
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	f240 4183 	movw	r1, #1155	@ 0x483
 80069d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069dc:	428b      	cmp	r3, r1
 80069de:	f000 80a9 	beq.w	8006b34 <ai_platform_network_get_error+0x1a4>
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069e8:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80069ec:	f000 80c0 	beq.w	8006b70 <ai_platform_network_get_error+0x1e0>
 80069f0:	6813      	ldr	r3, [r2, #0]
 80069f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f040 8082 	bne.w	8006b00 <ai_platform_network_get_error+0x170>
 80069fc:	4a66      	ldr	r2, [pc, #408]	@ (8006b98 <ai_platform_network_get_error+0x208>)
 80069fe:	2301      	movs	r3, #1
 8006a00:	6093      	str	r3, [r2, #8]
 8006a02:	6893      	ldr	r3, [r2, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1fc      	bne.n	8006a02 <ai_platform_network_get_error+0x72>
 8006a08:	4964      	ldr	r1, [pc, #400]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006a0a:	4b65      	ldr	r3, [pc, #404]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006a0c:	6011      	str	r1, [r2, #0]
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d075      	beq.n	8006b00 <ai_platform_network_get_error+0x170>
 8006a14:	e7fe      	b.n	8006a14 <ai_platform_network_get_error+0x84>
 8006a16:	f7ff feed 	bl	80067f4 <_ai_platform_acquire_crc>
 8006a1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006b90 <ai_platform_network_get_error+0x200>)
 8006a1c:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a26:	185a      	adds	r2, r3, r1
 8006a28:	2a01      	cmp	r2, #1
 8006a2a:	d929      	bls.n	8006a80 <ai_platform_network_get_error+0xf0>
 8006a2c:	f240 4249 	movw	r2, #1097	@ 0x449
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d025      	beq.n	8006a80 <ai_platform_network_get_error+0xf0>
 8006a34:	4a57      	ldr	r2, [pc, #348]	@ (8006b94 <ai_platform_network_get_error+0x204>)
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006a40:	d02b      	beq.n	8006a9a <ai_platform_network_get_error+0x10a>
 8006a42:	6813      	ldr	r3, [r2, #0]
 8006a44:	f240 4183 	movw	r1, #1155	@ 0x483
 8006a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	d060      	beq.n	8006b12 <ai_platform_network_get_error+0x182>
 8006a50:	6813      	ldr	r3, [r2, #0]
 8006a52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a56:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006a5a:	d07c      	beq.n	8006b56 <ai_platform_network_get_error+0x1c6>
 8006a5c:	6813      	ldr	r3, [r2, #0]
 8006a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d129      	bne.n	8006aba <ai_platform_network_get_error+0x12a>
 8006a66:	4a4c      	ldr	r2, [pc, #304]	@ (8006b98 <ai_platform_network_get_error+0x208>)
 8006a68:	2301      	movs	r3, #1
 8006a6a:	6093      	str	r3, [r2, #8]
 8006a6c:	6893      	ldr	r3, [r2, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1fc      	bne.n	8006a6c <ai_platform_network_get_error+0xdc>
 8006a72:	494a      	ldr	r1, [pc, #296]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006a74:	4b4a      	ldr	r3, [pc, #296]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006a76:	6011      	str	r1, [r2, #0]
 8006a78:	6812      	ldr	r2, [r2, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d01d      	beq.n	8006aba <ai_platform_network_get_error+0x12a>
 8006a7e:	e7fe      	b.n	8006a7e <ai_platform_network_get_error+0xee>
 8006a80:	4a45      	ldr	r2, [pc, #276]	@ (8006b98 <ai_platform_network_get_error+0x208>)
 8006a82:	2301      	movs	r3, #1
 8006a84:	6093      	str	r3, [r2, #8]
 8006a86:	6893      	ldr	r3, [r2, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1fc      	bne.n	8006a86 <ai_platform_network_get_error+0xf6>
 8006a8c:	4943      	ldr	r1, [pc, #268]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006a8e:	4b44      	ldr	r3, [pc, #272]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006a90:	6011      	str	r1, [r2, #0]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d010      	beq.n	8006aba <ai_platform_network_get_error+0x12a>
 8006a98:	e7fe      	b.n	8006a98 <ai_platform_network_get_error+0x108>
 8006a9a:	4a42      	ldr	r2, [pc, #264]	@ (8006ba4 <ai_platform_network_get_error+0x214>)
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006aa2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1fb      	bne.n	8006aa2 <ai_platform_network_get_error+0x112>
 8006aaa:	493c      	ldr	r1, [pc, #240]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006aac:	4b3c      	ldr	r3, [pc, #240]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006aae:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006ab2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d111      	bne.n	8006ade <ai_platform_network_get_error+0x14e>
 8006aba:	f7ff fe9d 	bl	80067f8 <_ai_platform_release_crc>
 8006abe:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006ac2:	bd10      	pop	{r4, pc}
 8006ac4:	4a34      	ldr	r2, [pc, #208]	@ (8006b98 <ai_platform_network_get_error+0x208>)
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	6093      	str	r3, [r2, #8]
 8006aca:	6893      	ldr	r3, [r2, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1fc      	bne.n	8006aca <ai_platform_network_get_error+0x13a>
 8006ad0:	4932      	ldr	r1, [pc, #200]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006ad2:	4b33      	ldr	r3, [pc, #204]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006ad4:	6011      	str	r1, [r2, #0]
 8006ad6:	6812      	ldr	r2, [r2, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d011      	beq.n	8006b00 <ai_platform_network_get_error+0x170>
 8006adc:	e7fe      	b.n	8006adc <ai_platform_network_get_error+0x14c>
 8006ade:	e7fe      	b.n	8006ade <ai_platform_network_get_error+0x14e>
 8006ae0:	4a30      	ldr	r2, [pc, #192]	@ (8006ba4 <ai_platform_network_get_error+0x214>)
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006ae8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1fb      	bne.n	8006ae8 <ai_platform_network_get_error+0x158>
 8006af0:	492a      	ldr	r1, [pc, #168]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006af2:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006af4:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006af8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d107      	bne.n	8006b10 <ai_platform_network_get_error+0x180>
 8006b00:	f7ff fe7a 	bl	80067f8 <_ai_platform_release_crc>
 8006b04:	f104 0010 	add.w	r0, r4, #16
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f001 bae4 	b.w	80080d8 <core_get_error>
 8006b10:	e7fe      	b.n	8006b10 <ai_platform_network_get_error+0x180>
 8006b12:	4a24      	ldr	r2, [pc, #144]	@ (8006ba4 <ai_platform_network_get_error+0x214>)
 8006b14:	2301      	movs	r3, #1
 8006b16:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006b1a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1fb      	bne.n	8006b1a <ai_platform_network_get_error+0x18a>
 8006b22:	491e      	ldr	r1, [pc, #120]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006b24:	4b1e      	ldr	r3, [pc, #120]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006b26:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006b2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d0c3      	beq.n	8006aba <ai_platform_network_get_error+0x12a>
 8006b32:	e7fe      	b.n	8006b32 <ai_platform_network_get_error+0x1a2>
 8006b34:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba4 <ai_platform_network_get_error+0x214>)
 8006b36:	2301      	movs	r3, #1
 8006b38:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006b3c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1fb      	bne.n	8006b3c <ai_platform_network_get_error+0x1ac>
 8006b44:	4915      	ldr	r1, [pc, #84]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006b46:	4b16      	ldr	r3, [pc, #88]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006b48:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006b4c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d0d5      	beq.n	8006b00 <ai_platform_network_get_error+0x170>
 8006b54:	e7fe      	b.n	8006b54 <ai_platform_network_get_error+0x1c4>
 8006b56:	4a10      	ldr	r2, [pc, #64]	@ (8006b98 <ai_platform_network_get_error+0x208>)
 8006b58:	2301      	movs	r3, #1
 8006b5a:	6093      	str	r3, [r2, #8]
 8006b5c:	6893      	ldr	r3, [r2, #8]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1fc      	bne.n	8006b5c <ai_platform_network_get_error+0x1cc>
 8006b62:	490e      	ldr	r1, [pc, #56]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006b64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006b66:	6011      	str	r1, [r2, #0]
 8006b68:	6812      	ldr	r2, [r2, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d0a5      	beq.n	8006aba <ai_platform_network_get_error+0x12a>
 8006b6e:	e7fe      	b.n	8006b6e <ai_platform_network_get_error+0x1de>
 8006b70:	4a09      	ldr	r2, [pc, #36]	@ (8006b98 <ai_platform_network_get_error+0x208>)
 8006b72:	2301      	movs	r3, #1
 8006b74:	6093      	str	r3, [r2, #8]
 8006b76:	6893      	ldr	r3, [r2, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1fc      	bne.n	8006b76 <ai_platform_network_get_error+0x1e6>
 8006b7c:	4907      	ldr	r1, [pc, #28]	@ (8006b9c <ai_platform_network_get_error+0x20c>)
 8006b7e:	4b08      	ldr	r3, [pc, #32]	@ (8006ba0 <ai_platform_network_get_error+0x210>)
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d0bb      	beq.n	8006b00 <ai_platform_network_get_error+0x170>
 8006b88:	e7fe      	b.n	8006b88 <ai_platform_network_get_error+0x1f8>
 8006b8a:	bf00      	nop
 8006b8c:	a1c00100 	.word	0xa1c00100
 8006b90:	e0042000 	.word	0xe0042000
 8006b94:	5c001000 	.word	0x5c001000
 8006b98:	40023000 	.word	0x40023000
 8006b9c:	f407a5c2 	.word	0xf407a5c2
 8006ba0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ba4:	58024000 	.word	0x58024000

08006ba8 <ai_platform_network_set_error>:
 8006ba8:	b110      	cbz	r0, 8006bb0 <ai_platform_network_set_error+0x8>
 8006baa:	3010      	adds	r0, #16
 8006bac:	f001 ba9a 	b.w	80080e4 <core_set_error>
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop

08006bb4 <ai_platform_inputs_get>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	9102      	str	r1, [sp, #8]
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	f000 8093 	beq.w	8006ce8 <ai_platform_inputs_get+0x134>
 8006bc2:	4baa      	ldr	r3, [pc, #680]	@ (8006e6c <ai_platform_inputs_get+0x2b8>)
 8006bc4:	4681      	mov	r9, r0
 8006bc6:	6802      	ldr	r2, [r0, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	f040 808d 	bne.w	8006ce8 <ai_platform_inputs_get+0x134>
 8006bce:	f7ff fe11 	bl	80067f4 <_ai_platform_acquire_crc>
 8006bd2:	4ba7      	ldr	r3, [pc, #668]	@ (8006e70 <ai_platform_inputs_get+0x2bc>)
 8006bd4:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bde:	189a      	adds	r2, r3, r2
 8006be0:	2a01      	cmp	r2, #1
 8006be2:	f240 80da 	bls.w	8006d9a <ai_platform_inputs_get+0x1e6>
 8006be6:	f240 4249 	movw	r2, #1097	@ 0x449
 8006bea:	4293      	cmp	r3, r2
 8006bec:	f000 80d5 	beq.w	8006d9a <ai_platform_inputs_get+0x1e6>
 8006bf0:	4aa0      	ldr	r2, [pc, #640]	@ (8006e74 <ai_platform_inputs_get+0x2c0>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bf8:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006bfc:	f000 80dc 	beq.w	8006db8 <ai_platform_inputs_get+0x204>
 8006c00:	6813      	ldr	r3, [r2, #0]
 8006c02:	f240 4183 	movw	r1, #1155	@ 0x483
 8006c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c0a:	428b      	cmp	r3, r1
 8006c0c:	f000 810e 	beq.w	8006e2c <ai_platform_inputs_get+0x278>
 8006c10:	6813      	ldr	r3, [r2, #0]
 8006c12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c16:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006c1a:	f000 8143 	beq.w	8006ea4 <ai_platform_inputs_get+0x2f0>
 8006c1e:	6813      	ldr	r3, [r2, #0]
 8006c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 8113 	beq.w	8006e50 <ai_platform_inputs_get+0x29c>
 8006c2a:	f7ff fde5 	bl	80067f8 <_ai_platform_release_crc>
 8006c2e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80d2 	beq.w	8006ddc <ai_platform_inputs_get+0x228>
 8006c38:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8006c3c:	f1ba 0f00 	cmp.w	sl, #0
 8006c40:	f000 80cc 	beq.w	8006ddc <ai_platform_inputs_get+0x228>
 8006c44:	2100      	movs	r1, #0
 8006c46:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c4a:	460d      	mov	r5, r1
 8006c4c:	4689      	mov	r9, r1
 8006c4e:	e016      	b.n	8006c7e <ai_platform_inputs_get+0xca>
 8006c50:	9a01      	ldr	r2, [sp, #4]
 8006c52:	2301      	movs	r3, #1
 8006c54:	f848 3002 	str.w	r3, [r8, r2]
 8006c58:	69b2      	ldr	r2, [r6, #24]
 8006c5a:	f04f 0301 	mov.w	r3, #1
 8006c5e:	6856      	ldr	r6, [r2, #4]
 8006c60:	3501      	adds	r5, #1
 8006c62:	f109 091c 	add.w	r9, r9, #28
 8006c66:	7523      	strb	r3, [r4, #20]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6962      	ldr	r2, [r4, #20]
 8006c6c:	60a7      	str	r7, [r4, #8]
 8006c6e:	f36b 221f 	bfi	r2, fp, #8, #24
 8006c72:	6126      	str	r6, [r4, #16]
 8006c74:	61a1      	str	r1, [r4, #24]
 8006c76:	60e3      	str	r3, [r4, #12]
 8006c78:	6162      	str	r2, [r4, #20]
 8006c7a:	e9c4 0c00 	strd	r0, ip, [r4]
 8006c7e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006c82:	b2ac      	uxth	r4, r5
 8006c84:	42ab      	cmp	r3, r5
 8006c86:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006c8a:	9301      	str	r3, [sp, #4]
 8006c8c:	f240 80b5 	bls.w	8006dfa <ai_platform_inputs_get+0x246>
 8006c90:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80b0 	beq.w	8006dfa <ai_platform_inputs_get+0x246>
 8006c9a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	f000 80ab 	beq.w	8006dfa <ai_platform_inputs_get+0x246>
 8006ca4:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006ca8:	69b2      	ldr	r2, [r6, #24]
 8006caa:	68f1      	ldr	r1, [r6, #12]
 8006cac:	6810      	ldr	r0, [r2, #0]
 8006cae:	9100      	str	r1, [sp, #0]
 8006cb0:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006cb4:	68b3      	ldr	r3, [r6, #8]
 8006cb6:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006cba:	444c      	add	r4, r9
 8006cbc:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006cc0:	f002 fe56 	bl	8009970 <ai_array_to_buffer_fmt>
 8006cc4:	69b2      	ldr	r2, [r6, #24]
 8006cc6:	9900      	ldr	r1, [sp, #0]
 8006cc8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006ccc:	2f00      	cmp	r7, #0
 8006cce:	d0c4      	beq.n	8006c5a <ai_platform_inputs_get+0xa6>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006cd6:	6832      	ldr	r2, [r6, #0]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	b112      	cbz	r2, 8006ce2 <ai_platform_inputs_get+0x12e>
 8006cdc:	8852      	ldrh	r2, [r2, #2]
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d1b6      	bne.n	8006c50 <ai_platform_inputs_get+0x9c>
 8006ce2:	69b2      	ldr	r2, [r6, #24]
 8006ce4:	2700      	movs	r7, #0
 8006ce6:	e7b8      	b.n	8006c5a <ai_platform_inputs_get+0xa6>
 8006ce8:	f7ff fd84 	bl	80067f4 <_ai_platform_acquire_crc>
 8006cec:	4b60      	ldr	r3, [pc, #384]	@ (8006e70 <ai_platform_inputs_get+0x2bc>)
 8006cee:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf8:	185a      	adds	r2, r3, r1
 8006cfa:	2a01      	cmp	r2, #1
 8006cfc:	d92a      	bls.n	8006d54 <ai_platform_inputs_get+0x1a0>
 8006cfe:	f240 4249 	movw	r2, #1097	@ 0x449
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d026      	beq.n	8006d54 <ai_platform_inputs_get+0x1a0>
 8006d06:	4a5b      	ldr	r2, [pc, #364]	@ (8006e74 <ai_platform_inputs_get+0x2c0>)
 8006d08:	6813      	ldr	r3, [r2, #0]
 8006d0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d0e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006d12:	d02c      	beq.n	8006d6e <ai_platform_inputs_get+0x1ba>
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	f240 4183 	movw	r1, #1155	@ 0x483
 8006d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d1e:	428b      	cmp	r3, r1
 8006d20:	d073      	beq.n	8006e0a <ai_platform_inputs_get+0x256>
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d28:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006d2c:	f000 80ac 	beq.w	8006e88 <ai_platform_inputs_get+0x2d4>
 8006d30:	6813      	ldr	r3, [r2, #0]
 8006d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d129      	bne.n	8006d8e <ai_platform_inputs_get+0x1da>
 8006d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8006e78 <ai_platform_inputs_get+0x2c4>)
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	6093      	str	r3, [r2, #8]
 8006d40:	6893      	ldr	r3, [r2, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1fc      	bne.n	8006d40 <ai_platform_inputs_get+0x18c>
 8006d46:	494d      	ldr	r1, [pc, #308]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006d48:	4b4d      	ldr	r3, [pc, #308]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006d4a:	6011      	str	r1, [r2, #0]
 8006d4c:	6812      	ldr	r2, [r2, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d01d      	beq.n	8006d8e <ai_platform_inputs_get+0x1da>
 8006d52:	e7fe      	b.n	8006d52 <ai_platform_inputs_get+0x19e>
 8006d54:	4a48      	ldr	r2, [pc, #288]	@ (8006e78 <ai_platform_inputs_get+0x2c4>)
 8006d56:	2301      	movs	r3, #1
 8006d58:	6093      	str	r3, [r2, #8]
 8006d5a:	6893      	ldr	r3, [r2, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1fc      	bne.n	8006d5a <ai_platform_inputs_get+0x1a6>
 8006d60:	4946      	ldr	r1, [pc, #280]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006d62:	4b47      	ldr	r3, [pc, #284]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006d64:	6011      	str	r1, [r2, #0]
 8006d66:	6812      	ldr	r2, [r2, #0]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d010      	beq.n	8006d8e <ai_platform_inputs_get+0x1da>
 8006d6c:	e7fe      	b.n	8006d6c <ai_platform_inputs_get+0x1b8>
 8006d6e:	4a45      	ldr	r2, [pc, #276]	@ (8006e84 <ai_platform_inputs_get+0x2d0>)
 8006d70:	2301      	movs	r3, #1
 8006d72:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006d76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1fb      	bne.n	8006d76 <ai_platform_inputs_get+0x1c2>
 8006d7e:	493f      	ldr	r1, [pc, #252]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006d80:	4b3f      	ldr	r3, [pc, #252]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006d82:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006d86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d113      	bne.n	8006db6 <ai_platform_inputs_get+0x202>
 8006d8e:	f7ff fd33 	bl	80067f8 <_ai_platform_release_crc>
 8006d92:	2000      	movs	r0, #0
 8006d94:	b005      	add	sp, #20
 8006d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d9a:	4a37      	ldr	r2, [pc, #220]	@ (8006e78 <ai_platform_inputs_get+0x2c4>)
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	6093      	str	r3, [r2, #8]
 8006da0:	6893      	ldr	r3, [r2, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1fc      	bne.n	8006da0 <ai_platform_inputs_get+0x1ec>
 8006da6:	4b35      	ldr	r3, [pc, #212]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	4b35      	ldr	r3, [pc, #212]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f43f af3b 	beq.w	8006c2a <ai_platform_inputs_get+0x76>
 8006db4:	e7fe      	b.n	8006db4 <ai_platform_inputs_get+0x200>
 8006db6:	e7fe      	b.n	8006db6 <ai_platform_inputs_get+0x202>
 8006db8:	4a32      	ldr	r2, [pc, #200]	@ (8006e84 <ai_platform_inputs_get+0x2d0>)
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006dc0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1fb      	bne.n	8006dc0 <ai_platform_inputs_get+0x20c>
 8006dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006dca:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006dce:	4b2c      	ldr	r3, [pc, #176]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006dd0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	f43f af28 	beq.w	8006c2a <ai_platform_inputs_get+0x76>
 8006dda:	e7fe      	b.n	8006dda <ai_platform_inputs_get+0x226>
 8006ddc:	2400      	movs	r4, #0
 8006dde:	2218      	movs	r2, #24
 8006de0:	2111      	movs	r1, #17
 8006de2:	f109 0010 	add.w	r0, r9, #16
 8006de6:	f001 f97d 	bl	80080e4 <core_set_error>
 8006dea:	4620      	mov	r0, r4
 8006dec:	9b02      	ldr	r3, [sp, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0d0      	beq.n	8006d94 <ai_platform_inputs_get+0x1e0>
 8006df2:	801c      	strh	r4, [r3, #0]
 8006df4:	b005      	add	sp, #20
 8006df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006dfe:	2c00      	cmp	r4, #0
 8006e00:	d0ec      	beq.n	8006ddc <ai_platform_inputs_get+0x228>
 8006e02:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006e06:	6858      	ldr	r0, [r3, #4]
 8006e08:	e7f0      	b.n	8006dec <ai_platform_inputs_get+0x238>
 8006e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e84 <ai_platform_inputs_get+0x2d0>)
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e12:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1fb      	bne.n	8006e12 <ai_platform_inputs_get+0x25e>
 8006e1a:	4918      	ldr	r1, [pc, #96]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006e1c:	4b18      	ldr	r3, [pc, #96]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006e1e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006e22:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d0b1      	beq.n	8006d8e <ai_platform_inputs_get+0x1da>
 8006e2a:	e7fe      	b.n	8006e2a <ai_platform_inputs_get+0x276>
 8006e2c:	4a15      	ldr	r2, [pc, #84]	@ (8006e84 <ai_platform_inputs_get+0x2d0>)
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006e34:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1fb      	bne.n	8006e34 <ai_platform_inputs_get+0x280>
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006e3e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006e42:	4b0f      	ldr	r3, [pc, #60]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006e44:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	f43f aeee 	beq.w	8006c2a <ai_platform_inputs_get+0x76>
 8006e4e:	e7fe      	b.n	8006e4e <ai_platform_inputs_get+0x29a>
 8006e50:	4a09      	ldr	r2, [pc, #36]	@ (8006e78 <ai_platform_inputs_get+0x2c4>)
 8006e52:	2301      	movs	r3, #1
 8006e54:	6093      	str	r3, [r2, #8]
 8006e56:	6893      	ldr	r3, [r2, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1fc      	bne.n	8006e56 <ai_platform_inputs_get+0x2a2>
 8006e5c:	4b07      	ldr	r3, [pc, #28]	@ (8006e7c <ai_platform_inputs_get+0x2c8>)
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	4b07      	ldr	r3, [pc, #28]	@ (8006e80 <ai_platform_inputs_get+0x2cc>)
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	f43f aee0 	beq.w	8006c2a <ai_platform_inputs_get+0x76>
 8006e6a:	e7fe      	b.n	8006e6a <ai_platform_inputs_get+0x2b6>
 8006e6c:	a1c00100 	.word	0xa1c00100
 8006e70:	e0042000 	.word	0xe0042000
 8006e74:	5c001000 	.word	0x5c001000
 8006e78:	40023000 	.word	0x40023000
 8006e7c:	f407a5c2 	.word	0xf407a5c2
 8006e80:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e84:	58024000 	.word	0x58024000
 8006e88:	4a0d      	ldr	r2, [pc, #52]	@ (8006ec0 <ai_platform_inputs_get+0x30c>)
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	6093      	str	r3, [r2, #8]
 8006e8e:	6893      	ldr	r3, [r2, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1fc      	bne.n	8006e8e <ai_platform_inputs_get+0x2da>
 8006e94:	490b      	ldr	r1, [pc, #44]	@ (8006ec4 <ai_platform_inputs_get+0x310>)
 8006e96:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec8 <ai_platform_inputs_get+0x314>)
 8006e98:	6011      	str	r1, [r2, #0]
 8006e9a:	6812      	ldr	r2, [r2, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	f43f af76 	beq.w	8006d8e <ai_platform_inputs_get+0x1da>
 8006ea2:	e7fe      	b.n	8006ea2 <ai_platform_inputs_get+0x2ee>
 8006ea4:	4a06      	ldr	r2, [pc, #24]	@ (8006ec0 <ai_platform_inputs_get+0x30c>)
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	6093      	str	r3, [r2, #8]
 8006eaa:	6893      	ldr	r3, [r2, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1fc      	bne.n	8006eaa <ai_platform_inputs_get+0x2f6>
 8006eb0:	4b04      	ldr	r3, [pc, #16]	@ (8006ec4 <ai_platform_inputs_get+0x310>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	4b04      	ldr	r3, [pc, #16]	@ (8006ec8 <ai_platform_inputs_get+0x314>)
 8006eb6:	6812      	ldr	r2, [r2, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	f43f aeb6 	beq.w	8006c2a <ai_platform_inputs_get+0x76>
 8006ebe:	e7fe      	b.n	8006ebe <ai_platform_inputs_get+0x30a>
 8006ec0:	40023000 	.word	0x40023000
 8006ec4:	f407a5c2 	.word	0xf407a5c2
 8006ec8:	b5e8b5cd 	.word	0xb5e8b5cd

08006ecc <ai_platform_outputs_get>:
 8006ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	9102      	str	r1, [sp, #8]
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f000 808f 	beq.w	8006ff8 <ai_platform_outputs_get+0x12c>
 8006eda:	4ba8      	ldr	r3, [pc, #672]	@ (800717c <ai_platform_outputs_get+0x2b0>)
 8006edc:	4681      	mov	r9, r0
 8006ede:	6802      	ldr	r2, [r0, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	f040 8089 	bne.w	8006ff8 <ai_platform_outputs_get+0x12c>
 8006ee6:	f7ff fc85 	bl	80067f4 <_ai_platform_acquire_crc>
 8006eea:	4ba5      	ldr	r3, [pc, #660]	@ (8007180 <ai_platform_outputs_get+0x2b4>)
 8006eec:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ef6:	189a      	adds	r2, r3, r2
 8006ef8:	2a01      	cmp	r2, #1
 8006efa:	f240 80d6 	bls.w	80070aa <ai_platform_outputs_get+0x1de>
 8006efe:	f240 4249 	movw	r2, #1097	@ 0x449
 8006f02:	4293      	cmp	r3, r2
 8006f04:	f000 80d1 	beq.w	80070aa <ai_platform_outputs_get+0x1de>
 8006f08:	4a9e      	ldr	r2, [pc, #632]	@ (8007184 <ai_platform_outputs_get+0x2b8>)
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f10:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006f14:	f000 80d8 	beq.w	80070c8 <ai_platform_outputs_get+0x1fc>
 8006f18:	6813      	ldr	r3, [r2, #0]
 8006f1a:	f240 4183 	movw	r1, #1155	@ 0x483
 8006f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f22:	428b      	cmp	r3, r1
 8006f24:	f000 8109 	beq.w	800713a <ai_platform_outputs_get+0x26e>
 8006f28:	6813      	ldr	r3, [r2, #0]
 8006f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f2e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006f32:	f000 813f 	beq.w	80071b4 <ai_platform_outputs_get+0x2e8>
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 810e 	beq.w	800715e <ai_platform_outputs_get+0x292>
 8006f42:	f7ff fc59 	bl	80067f8 <_ai_platform_release_crc>
 8006f46:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	f240 80db 	bls.w	8007106 <ai_platform_outputs_get+0x23a>
 8006f50:	2100      	movs	r1, #0
 8006f52:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8006f56:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	e016      	b.n	8006f8e <ai_platform_outputs_get+0xc2>
 8006f60:	9a01      	ldr	r2, [sp, #4]
 8006f62:	2301      	movs	r3, #1
 8006f64:	f848 3002 	str.w	r3, [r8, r2]
 8006f68:	69b2      	ldr	r2, [r6, #24]
 8006f6a:	f04f 0301 	mov.w	r3, #1
 8006f6e:	6856      	ldr	r6, [r2, #4]
 8006f70:	3501      	adds	r5, #1
 8006f72:	f109 091c 	add.w	r9, r9, #28
 8006f76:	7523      	strb	r3, [r4, #20]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	6962      	ldr	r2, [r4, #20]
 8006f7c:	60a7      	str	r7, [r4, #8]
 8006f7e:	f36b 221f 	bfi	r2, fp, #8, #24
 8006f82:	6126      	str	r6, [r4, #16]
 8006f84:	61a1      	str	r1, [r4, #24]
 8006f86:	60e3      	str	r3, [r4, #12]
 8006f88:	6162      	str	r2, [r4, #20]
 8006f8a:	e9c4 0c00 	strd	r0, ip, [r4]
 8006f8e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006f92:	b2ac      	uxth	r4, r5
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006f9a:	9301      	str	r3, [sp, #4]
 8006f9c:	f240 80a6 	bls.w	80070ec <ai_platform_outputs_get+0x220>
 8006fa0:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 80a1 	beq.w	80070ec <ai_platform_outputs_get+0x220>
 8006faa:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	f000 809c 	beq.w	80070ec <ai_platform_outputs_get+0x220>
 8006fb4:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006fb8:	69b2      	ldr	r2, [r6, #24]
 8006fba:	68f1      	ldr	r1, [r6, #12]
 8006fbc:	6810      	ldr	r0, [r2, #0]
 8006fbe:	9100      	str	r1, [sp, #0]
 8006fc0:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006fc4:	68b3      	ldr	r3, [r6, #8]
 8006fc6:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006fca:	444c      	add	r4, r9
 8006fcc:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006fd0:	f002 fcce 	bl	8009970 <ai_array_to_buffer_fmt>
 8006fd4:	69b2      	ldr	r2, [r6, #24]
 8006fd6:	9900      	ldr	r1, [sp, #0]
 8006fd8:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006fdc:	2f00      	cmp	r7, #0
 8006fde:	d0c4      	beq.n	8006f6a <ai_platform_outputs_get+0x9e>
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006fe6:	6832      	ldr	r2, [r6, #0]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	b112      	cbz	r2, 8006ff2 <ai_platform_outputs_get+0x126>
 8006fec:	8852      	ldrh	r2, [r2, #2]
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	d1b6      	bne.n	8006f60 <ai_platform_outputs_get+0x94>
 8006ff2:	69b2      	ldr	r2, [r6, #24]
 8006ff4:	2700      	movs	r7, #0
 8006ff6:	e7b8      	b.n	8006f6a <ai_platform_outputs_get+0x9e>
 8006ff8:	f7ff fbfc 	bl	80067f4 <_ai_platform_acquire_crc>
 8006ffc:	4b60      	ldr	r3, [pc, #384]	@ (8007180 <ai_platform_outputs_get+0x2b4>)
 8006ffe:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007008:	185a      	adds	r2, r3, r1
 800700a:	2a01      	cmp	r2, #1
 800700c:	d92a      	bls.n	8007064 <ai_platform_outputs_get+0x198>
 800700e:	f240 4249 	movw	r2, #1097	@ 0x449
 8007012:	4293      	cmp	r3, r2
 8007014:	d026      	beq.n	8007064 <ai_platform_outputs_get+0x198>
 8007016:	4a5b      	ldr	r2, [pc, #364]	@ (8007184 <ai_platform_outputs_get+0x2b8>)
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800701e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007022:	d02c      	beq.n	800707e <ai_platform_outputs_get+0x1b2>
 8007024:	6813      	ldr	r3, [r2, #0]
 8007026:	f240 4183 	movw	r1, #1155	@ 0x483
 800702a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800702e:	428b      	cmp	r3, r1
 8007030:	d072      	beq.n	8007118 <ai_platform_outputs_get+0x24c>
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007038:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800703c:	f000 80ac 	beq.w	8007198 <ai_platform_outputs_get+0x2cc>
 8007040:	6813      	ldr	r3, [r2, #0]
 8007042:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007046:	2b00      	cmp	r3, #0
 8007048:	d129      	bne.n	800709e <ai_platform_outputs_get+0x1d2>
 800704a:	4a4f      	ldr	r2, [pc, #316]	@ (8007188 <ai_platform_outputs_get+0x2bc>)
 800704c:	2301      	movs	r3, #1
 800704e:	6093      	str	r3, [r2, #8]
 8007050:	6893      	ldr	r3, [r2, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1fc      	bne.n	8007050 <ai_platform_outputs_get+0x184>
 8007056:	494d      	ldr	r1, [pc, #308]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 8007058:	4b4d      	ldr	r3, [pc, #308]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 800705a:	6011      	str	r1, [r2, #0]
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d01d      	beq.n	800709e <ai_platform_outputs_get+0x1d2>
 8007062:	e7fe      	b.n	8007062 <ai_platform_outputs_get+0x196>
 8007064:	4a48      	ldr	r2, [pc, #288]	@ (8007188 <ai_platform_outputs_get+0x2bc>)
 8007066:	2301      	movs	r3, #1
 8007068:	6093      	str	r3, [r2, #8]
 800706a:	6893      	ldr	r3, [r2, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1fc      	bne.n	800706a <ai_platform_outputs_get+0x19e>
 8007070:	4946      	ldr	r1, [pc, #280]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 8007072:	4b47      	ldr	r3, [pc, #284]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d010      	beq.n	800709e <ai_platform_outputs_get+0x1d2>
 800707c:	e7fe      	b.n	800707c <ai_platform_outputs_get+0x1b0>
 800707e:	4a45      	ldr	r2, [pc, #276]	@ (8007194 <ai_platform_outputs_get+0x2c8>)
 8007080:	2301      	movs	r3, #1
 8007082:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007086:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1fb      	bne.n	8007086 <ai_platform_outputs_get+0x1ba>
 800708e:	493f      	ldr	r1, [pc, #252]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 8007090:	4b3f      	ldr	r3, [pc, #252]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 8007092:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007096:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800709a:	429a      	cmp	r2, r3
 800709c:	d113      	bne.n	80070c6 <ai_platform_outputs_get+0x1fa>
 800709e:	f7ff fbab 	bl	80067f8 <_ai_platform_release_crc>
 80070a2:	2000      	movs	r0, #0
 80070a4:	b005      	add	sp, #20
 80070a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070aa:	4a37      	ldr	r2, [pc, #220]	@ (8007188 <ai_platform_outputs_get+0x2bc>)
 80070ac:	2301      	movs	r3, #1
 80070ae:	6093      	str	r3, [r2, #8]
 80070b0:	6893      	ldr	r3, [r2, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1fc      	bne.n	80070b0 <ai_platform_outputs_get+0x1e4>
 80070b6:	4b35      	ldr	r3, [pc, #212]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	4b35      	ldr	r3, [pc, #212]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	f43f af3f 	beq.w	8006f42 <ai_platform_outputs_get+0x76>
 80070c4:	e7fe      	b.n	80070c4 <ai_platform_outputs_get+0x1f8>
 80070c6:	e7fe      	b.n	80070c6 <ai_platform_outputs_get+0x1fa>
 80070c8:	4a32      	ldr	r2, [pc, #200]	@ (8007194 <ai_platform_outputs_get+0x2c8>)
 80070ca:	2301      	movs	r3, #1
 80070cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80070d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1fb      	bne.n	80070d0 <ai_platform_outputs_get+0x204>
 80070d8:	4b2c      	ldr	r3, [pc, #176]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 80070da:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80070de:	4b2c      	ldr	r3, [pc, #176]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 80070e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80070e4:	429a      	cmp	r2, r3
 80070e6:	f43f af2c 	beq.w	8006f42 <ai_platform_outputs_get+0x76>
 80070ea:	e7fe      	b.n	80070ea <ai_platform_outputs_get+0x21e>
 80070ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80070f0:	b14c      	cbz	r4, 8007106 <ai_platform_outputs_get+0x23a>
 80070f2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80070f6:	6858      	ldr	r0, [r3, #4]
 80070f8:	9b02      	ldr	r3, [sp, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d0d2      	beq.n	80070a4 <ai_platform_outputs_get+0x1d8>
 80070fe:	801c      	strh	r4, [r3, #0]
 8007100:	b005      	add	sp, #20
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	2400      	movs	r4, #0
 8007108:	2218      	movs	r2, #24
 800710a:	2111      	movs	r1, #17
 800710c:	f109 0010 	add.w	r0, r9, #16
 8007110:	f000 ffe8 	bl	80080e4 <core_set_error>
 8007114:	4620      	mov	r0, r4
 8007116:	e7ef      	b.n	80070f8 <ai_platform_outputs_get+0x22c>
 8007118:	4a1e      	ldr	r2, [pc, #120]	@ (8007194 <ai_platform_outputs_get+0x2c8>)
 800711a:	2301      	movs	r3, #1
 800711c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007120:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1fb      	bne.n	8007120 <ai_platform_outputs_get+0x254>
 8007128:	4918      	ldr	r1, [pc, #96]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 800712a:	4b19      	ldr	r3, [pc, #100]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 800712c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007130:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007134:	429a      	cmp	r2, r3
 8007136:	d0b2      	beq.n	800709e <ai_platform_outputs_get+0x1d2>
 8007138:	e7fe      	b.n	8007138 <ai_platform_outputs_get+0x26c>
 800713a:	4a16      	ldr	r2, [pc, #88]	@ (8007194 <ai_platform_outputs_get+0x2c8>)
 800713c:	2301      	movs	r3, #1
 800713e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007142:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1fb      	bne.n	8007142 <ai_platform_outputs_get+0x276>
 800714a:	4b10      	ldr	r3, [pc, #64]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 800714c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007150:	4b0f      	ldr	r3, [pc, #60]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 8007152:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007156:	429a      	cmp	r2, r3
 8007158:	f43f aef3 	beq.w	8006f42 <ai_platform_outputs_get+0x76>
 800715c:	e7fe      	b.n	800715c <ai_platform_outputs_get+0x290>
 800715e:	4a0a      	ldr	r2, [pc, #40]	@ (8007188 <ai_platform_outputs_get+0x2bc>)
 8007160:	2301      	movs	r3, #1
 8007162:	6093      	str	r3, [r2, #8]
 8007164:	6893      	ldr	r3, [r2, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1fc      	bne.n	8007164 <ai_platform_outputs_get+0x298>
 800716a:	4b08      	ldr	r3, [pc, #32]	@ (800718c <ai_platform_outputs_get+0x2c0>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	4b08      	ldr	r3, [pc, #32]	@ (8007190 <ai_platform_outputs_get+0x2c4>)
 8007170:	6812      	ldr	r2, [r2, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	f43f aee5 	beq.w	8006f42 <ai_platform_outputs_get+0x76>
 8007178:	e7fe      	b.n	8007178 <ai_platform_outputs_get+0x2ac>
 800717a:	bf00      	nop
 800717c:	a1c00100 	.word	0xa1c00100
 8007180:	e0042000 	.word	0xe0042000
 8007184:	5c001000 	.word	0x5c001000
 8007188:	40023000 	.word	0x40023000
 800718c:	f407a5c2 	.word	0xf407a5c2
 8007190:	b5e8b5cd 	.word	0xb5e8b5cd
 8007194:	58024000 	.word	0x58024000
 8007198:	4a0d      	ldr	r2, [pc, #52]	@ (80071d0 <ai_platform_outputs_get+0x304>)
 800719a:	2301      	movs	r3, #1
 800719c:	6093      	str	r3, [r2, #8]
 800719e:	6893      	ldr	r3, [r2, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1fc      	bne.n	800719e <ai_platform_outputs_get+0x2d2>
 80071a4:	490b      	ldr	r1, [pc, #44]	@ (80071d4 <ai_platform_outputs_get+0x308>)
 80071a6:	4b0c      	ldr	r3, [pc, #48]	@ (80071d8 <ai_platform_outputs_get+0x30c>)
 80071a8:	6011      	str	r1, [r2, #0]
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	f43f af76 	beq.w	800709e <ai_platform_outputs_get+0x1d2>
 80071b2:	e7fe      	b.n	80071b2 <ai_platform_outputs_get+0x2e6>
 80071b4:	4a06      	ldr	r2, [pc, #24]	@ (80071d0 <ai_platform_outputs_get+0x304>)
 80071b6:	2301      	movs	r3, #1
 80071b8:	6093      	str	r3, [r2, #8]
 80071ba:	6893      	ldr	r3, [r2, #8]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1fc      	bne.n	80071ba <ai_platform_outputs_get+0x2ee>
 80071c0:	4b04      	ldr	r3, [pc, #16]	@ (80071d4 <ai_platform_outputs_get+0x308>)
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	4b04      	ldr	r3, [pc, #16]	@ (80071d8 <ai_platform_outputs_get+0x30c>)
 80071c6:	6812      	ldr	r2, [r2, #0]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	f43f aeba 	beq.w	8006f42 <ai_platform_outputs_get+0x76>
 80071ce:	e7fe      	b.n	80071ce <ai_platform_outputs_get+0x302>
 80071d0:	40023000 	.word	0x40023000
 80071d4:	f407a5c2 	.word	0xf407a5c2
 80071d8:	b5e8b5cd 	.word	0xb5e8b5cd

080071dc <ai_platform_network_create>:
 80071dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071e0:	b083      	sub	sp, #12
 80071e2:	4604      	mov	r4, r0
 80071e4:	4615      	mov	r5, r2
 80071e6:	461e      	mov	r6, r3
 80071e8:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80071ec:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80071f0:	f7ff fb00 	bl	80067f4 <_ai_platform_acquire_crc>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f000 80bd 	beq.w	8007374 <ai_platform_network_create+0x198>
 80071fa:	4ba5      	ldr	r3, [pc, #660]	@ (8007490 <ai_platform_network_create+0x2b4>)
 80071fc:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 8007200:	4601      	mov	r1, r0
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007208:	eb03 020c 	add.w	r2, r3, ip
 800720c:	2a01      	cmp	r2, #1
 800720e:	f240 80a8 	bls.w	8007362 <ai_platform_network_create+0x186>
 8007212:	f240 4249 	movw	r2, #1097	@ 0x449
 8007216:	4293      	cmp	r3, r2
 8007218:	f000 80a3 	beq.w	8007362 <ai_platform_network_create+0x186>
 800721c:	4a9d      	ldr	r2, [pc, #628]	@ (8007494 <ai_platform_network_create+0x2b8>)
 800721e:	6813      	ldr	r3, [r2, #0]
 8007220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007224:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007228:	f000 80b9 	beq.w	800739e <ai_platform_network_create+0x1c2>
 800722c:	6813      	ldr	r3, [r2, #0]
 800722e:	f240 4c83 	movw	ip, #1155	@ 0x483
 8007232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007236:	4563      	cmp	r3, ip
 8007238:	f000 80a1 	beq.w	800737e <ai_platform_network_create+0x1a2>
 800723c:	6813      	ldr	r3, [r2, #0]
 800723e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007242:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007246:	f000 8153 	beq.w	80074f0 <ai_platform_network_create+0x314>
 800724a:	6813      	ldr	r3, [r2, #0]
 800724c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007250:	2b00      	cmp	r3, #0
 8007252:	f040 808d 	bne.w	8007370 <ai_platform_network_create+0x194>
 8007256:	4a90      	ldr	r2, [pc, #576]	@ (8007498 <ai_platform_network_create+0x2bc>)
 8007258:	2318      	movs	r3, #24
 800725a:	6093      	str	r3, [r2, #8]
 800725c:	6893      	ldr	r3, [r2, #8]
 800725e:	2b18      	cmp	r3, #24
 8007260:	f040 8086 	bne.w	8007370 <ai_platform_network_create+0x194>
 8007264:	2301      	movs	r3, #1
 8007266:	6093      	str	r3, [r2, #8]
 8007268:	6893      	ldr	r3, [r2, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1fc      	bne.n	8007268 <ai_platform_network_create+0x8c>
 800726e:	4608      	mov	r0, r1
 8007270:	f7ff fac2 	bl	80067f8 <_ai_platform_release_crc>
 8007274:	f7ff fabe 	bl	80067f4 <_ai_platform_acquire_crc>
 8007278:	4b85      	ldr	r3, [pc, #532]	@ (8007490 <ai_platform_network_create+0x2b4>)
 800727a:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007284:	189a      	adds	r2, r3, r2
 8007286:	2a01      	cmp	r2, #1
 8007288:	f240 809f 	bls.w	80073ca <ai_platform_network_create+0x1ee>
 800728c:	f240 4249 	movw	r2, #1097	@ 0x449
 8007290:	4293      	cmp	r3, r2
 8007292:	f000 809a 	beq.w	80073ca <ai_platform_network_create+0x1ee>
 8007296:	4a7f      	ldr	r2, [pc, #508]	@ (8007494 <ai_platform_network_create+0x2b8>)
 8007298:	6813      	ldr	r3, [r2, #0]
 800729a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800729e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80072a2:	f000 80a0 	beq.w	80073e6 <ai_platform_network_create+0x20a>
 80072a6:	6813      	ldr	r3, [r2, #0]
 80072a8:	f240 4183 	movw	r1, #1155	@ 0x483
 80072ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072b0:	428b      	cmp	r3, r1
 80072b2:	f000 80bf 	beq.w	8007434 <ai_platform_network_create+0x258>
 80072b6:	6813      	ldr	r3, [r2, #0]
 80072b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072bc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80072c0:	f000 8123 	beq.w	800750a <ai_platform_network_create+0x32e>
 80072c4:	6813      	ldr	r3, [r2, #0]
 80072c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 80c4 	beq.w	8007458 <ai_platform_network_create+0x27c>
 80072d0:	f7ff fa92 	bl	80067f8 <_ai_platform_release_crc>
 80072d4:	2c00      	cmp	r4, #0
 80072d6:	f000 80aa 	beq.w	800742e <ai_platform_network_create+0x252>
 80072da:	4b70      	ldr	r3, [pc, #448]	@ (800749c <ai_platform_network_create+0x2c0>)
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	6025      	str	r5, [r4, #0]
 80072e0:	f000 fef8 	bl	80080d4 <core_init>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	f000 8090 	beq.w	800740a <ai_platform_network_create+0x22e>
 80072ea:	f7ff fa83 	bl	80067f4 <_ai_platform_acquire_crc>
 80072ee:	4b68      	ldr	r3, [pc, #416]	@ (8007490 <ai_platform_network_create+0x2b4>)
 80072f0:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072fa:	185a      	adds	r2, r3, r1
 80072fc:	2a01      	cmp	r2, #1
 80072fe:	f240 80b9 	bls.w	8007474 <ai_platform_network_create+0x298>
 8007302:	f240 4249 	movw	r2, #1097	@ 0x449
 8007306:	4293      	cmp	r3, r2
 8007308:	f000 80b4 	beq.w	8007474 <ai_platform_network_create+0x298>
 800730c:	4a61      	ldr	r2, [pc, #388]	@ (8007494 <ai_platform_network_create+0x2b8>)
 800730e:	6813      	ldr	r3, [r2, #0]
 8007310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007314:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007318:	f000 80c8 	beq.w	80074ac <ai_platform_network_create+0x2d0>
 800731c:	6813      	ldr	r3, [r2, #0]
 800731e:	f240 4183 	movw	r1, #1155	@ 0x483
 8007322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007326:	428b      	cmp	r3, r1
 8007328:	f000 8107 	beq.w	800753a <ai_platform_network_create+0x35e>
 800732c:	6813      	ldr	r3, [r2, #0]
 800732e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007332:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007336:	f000 8111 	beq.w	800755c <ai_platform_network_create+0x380>
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 80c3 	bne.w	80074cc <ai_platform_network_create+0x2f0>
 8007346:	4b54      	ldr	r3, [pc, #336]	@ (8007498 <ai_platform_network_create+0x2bc>)
 8007348:	2201      	movs	r2, #1
 800734a:	609a      	str	r2, [r3, #8]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	2a00      	cmp	r2, #0
 8007350:	d1fc      	bne.n	800734c <ai_platform_network_create+0x170>
 8007352:	4a53      	ldr	r2, [pc, #332]	@ (80074a0 <ai_platform_network_create+0x2c4>)
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	4b52      	ldr	r3, [pc, #328]	@ (80074a4 <ai_platform_network_create+0x2c8>)
 800735a:	429a      	cmp	r2, r3
 800735c:	f000 80b6 	beq.w	80074cc <ai_platform_network_create+0x2f0>
 8007360:	e7fe      	b.n	8007360 <ai_platform_network_create+0x184>
 8007362:	4b4d      	ldr	r3, [pc, #308]	@ (8007498 <ai_platform_network_create+0x2bc>)
 8007364:	2218      	movs	r2, #24
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	2a18      	cmp	r2, #24
 800736c:	d027      	beq.n	80073be <ai_platform_network_create+0x1e2>
 800736e:	4608      	mov	r0, r1
 8007370:	f7ff fa42 	bl	80067f8 <_ai_platform_release_crc>
 8007374:	f244 1033 	movw	r0, #16691	@ 0x4133
 8007378:	b003      	add	sp, #12
 800737a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800737e:	4a4a      	ldr	r2, [pc, #296]	@ (80074a8 <ai_platform_network_create+0x2cc>)
 8007380:	2318      	movs	r3, #24
 8007382:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007386:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800738a:	2b18      	cmp	r3, #24
 800738c:	d1f0      	bne.n	8007370 <ai_platform_network_create+0x194>
 800738e:	2301      	movs	r3, #1
 8007390:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007394:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1fb      	bne.n	8007394 <ai_platform_network_create+0x1b8>
 800739c:	e767      	b.n	800726e <ai_platform_network_create+0x92>
 800739e:	4a42      	ldr	r2, [pc, #264]	@ (80074a8 <ai_platform_network_create+0x2cc>)
 80073a0:	2318      	movs	r3, #24
 80073a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80073a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80073aa:	2b18      	cmp	r3, #24
 80073ac:	d1e0      	bne.n	8007370 <ai_platform_network_create+0x194>
 80073ae:	2301      	movs	r3, #1
 80073b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80073b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1fb      	bne.n	80073b4 <ai_platform_network_create+0x1d8>
 80073bc:	e757      	b.n	800726e <ai_platform_network_create+0x92>
 80073be:	2201      	movs	r2, #1
 80073c0:	609a      	str	r2, [r3, #8]
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	d1fc      	bne.n	80073c2 <ai_platform_network_create+0x1e6>
 80073c8:	e751      	b.n	800726e <ai_platform_network_create+0x92>
 80073ca:	4a33      	ldr	r2, [pc, #204]	@ (8007498 <ai_platform_network_create+0x2bc>)
 80073cc:	2301      	movs	r3, #1
 80073ce:	6093      	str	r3, [r2, #8]
 80073d0:	6891      	ldr	r1, [r2, #8]
 80073d2:	2900      	cmp	r1, #0
 80073d4:	d1fc      	bne.n	80073d0 <ai_platform_network_create+0x1f4>
 80073d6:	4b32      	ldr	r3, [pc, #200]	@ (80074a0 <ai_platform_network_create+0x2c4>)
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	4b32      	ldr	r3, [pc, #200]	@ (80074a4 <ai_platform_network_create+0x2c8>)
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	429a      	cmp	r2, r3
 80073e0:	f43f af76 	beq.w	80072d0 <ai_platform_network_create+0xf4>
 80073e4:	e7fe      	b.n	80073e4 <ai_platform_network_create+0x208>
 80073e6:	4a30      	ldr	r2, [pc, #192]	@ (80074a8 <ai_platform_network_create+0x2cc>)
 80073e8:	2301      	movs	r3, #1
 80073ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80073ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1fb      	bne.n	80073ee <ai_platform_network_create+0x212>
 80073f6:	4b2a      	ldr	r3, [pc, #168]	@ (80074a0 <ai_platform_network_create+0x2c4>)
 80073f8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80073fc:	4b29      	ldr	r3, [pc, #164]	@ (80074a4 <ai_platform_network_create+0x2c8>)
 80073fe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007402:	429a      	cmp	r2, r3
 8007404:	f43f af64 	beq.w	80072d0 <ai_platform_network_create+0xf4>
 8007408:	e7fe      	b.n	8007408 <ai_platform_network_create+0x22c>
 800740a:	f04f 0930 	mov.w	r9, #48	@ 0x30
 800740e:	2300      	movs	r3, #0
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	2410      	movs	r4, #16
 8007414:	4642      	mov	r2, r8
 8007416:	4639      	mov	r1, r7
 8007418:	4630      	mov	r0, r6
 800741a:	f002 fb4d 	bl	8009ab8 <ai_version_get>
 800741e:	4603      	mov	r3, r0
 8007420:	2000      	movs	r0, #0
 8007422:	64ab      	str	r3, [r5, #72]	@ 0x48
 8007424:	f369 0007 	bfi	r0, r9, #0, #8
 8007428:	f364 201f 	bfi	r0, r4, #8, #24
 800742c:	e7a4      	b.n	8007378 <ai_platform_network_create+0x19c>
 800742e:	f241 0010 	movw	r0, #4112	@ 0x1010
 8007432:	e7a1      	b.n	8007378 <ai_platform_network_create+0x19c>
 8007434:	4a1c      	ldr	r2, [pc, #112]	@ (80074a8 <ai_platform_network_create+0x2cc>)
 8007436:	2301      	movs	r3, #1
 8007438:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800743c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1fb      	bne.n	800743c <ai_platform_network_create+0x260>
 8007444:	4b16      	ldr	r3, [pc, #88]	@ (80074a0 <ai_platform_network_create+0x2c4>)
 8007446:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800744a:	4b16      	ldr	r3, [pc, #88]	@ (80074a4 <ai_platform_network_create+0x2c8>)
 800744c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007450:	429a      	cmp	r2, r3
 8007452:	f43f af3d 	beq.w	80072d0 <ai_platform_network_create+0xf4>
 8007456:	e7fe      	b.n	8007456 <ai_platform_network_create+0x27a>
 8007458:	4a0f      	ldr	r2, [pc, #60]	@ (8007498 <ai_platform_network_create+0x2bc>)
 800745a:	2301      	movs	r3, #1
 800745c:	6093      	str	r3, [r2, #8]
 800745e:	6893      	ldr	r3, [r2, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1fc      	bne.n	800745e <ai_platform_network_create+0x282>
 8007464:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <ai_platform_network_create+0x2c4>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	4b0e      	ldr	r3, [pc, #56]	@ (80074a4 <ai_platform_network_create+0x2c8>)
 800746a:	6812      	ldr	r2, [r2, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	f43f af2f 	beq.w	80072d0 <ai_platform_network_create+0xf4>
 8007472:	e7fe      	b.n	8007472 <ai_platform_network_create+0x296>
 8007474:	4a08      	ldr	r2, [pc, #32]	@ (8007498 <ai_platform_network_create+0x2bc>)
 8007476:	2301      	movs	r3, #1
 8007478:	6093      	str	r3, [r2, #8]
 800747a:	6893      	ldr	r3, [r2, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1fc      	bne.n	800747a <ai_platform_network_create+0x29e>
 8007480:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <ai_platform_network_create+0x2c4>)
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	4b07      	ldr	r3, [pc, #28]	@ (80074a4 <ai_platform_network_create+0x2c8>)
 8007486:	6812      	ldr	r2, [r2, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d01f      	beq.n	80074cc <ai_platform_network_create+0x2f0>
 800748c:	e7fe      	b.n	800748c <ai_platform_network_create+0x2b0>
 800748e:	bf00      	nop
 8007490:	e0042000 	.word	0xe0042000
 8007494:	5c001000 	.word	0x5c001000
 8007498:	40023000 	.word	0x40023000
 800749c:	a1c00100 	.word	0xa1c00100
 80074a0:	f407a5c2 	.word	0xf407a5c2
 80074a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80074a8:	58024000 	.word	0x58024000
 80074ac:	4a33      	ldr	r2, [pc, #204]	@ (800757c <ai_platform_network_create+0x3a0>)
 80074ae:	2301      	movs	r3, #1
 80074b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80074b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1fb      	bne.n	80074b4 <ai_platform_network_create+0x2d8>
 80074bc:	4b30      	ldr	r3, [pc, #192]	@ (8007580 <ai_platform_network_create+0x3a4>)
 80074be:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80074c2:	4b30      	ldr	r3, [pc, #192]	@ (8007584 <ai_platform_network_create+0x3a8>)
 80074c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d12c      	bne.n	8007526 <ai_platform_network_create+0x34a>
 80074cc:	f7ff f994 	bl	80067f8 <_ai_platform_release_crc>
 80074d0:	2200      	movs	r2, #0
 80074d2:	4639      	mov	r1, r7
 80074d4:	4630      	mov	r0, r6
 80074d6:	f002 faef 	bl	8009ab8 <ai_version_get>
 80074da:	4681      	mov	r9, r0
 80074dc:	2200      	movs	r2, #0
 80074de:	2105      	movs	r1, #5
 80074e0:	2001      	movs	r0, #1
 80074e2:	f002 fae9 	bl	8009ab8 <ai_version_get>
 80074e6:	4581      	cmp	r9, r0
 80074e8:	d01e      	beq.n	8007528 <ai_platform_network_create+0x34c>
 80074ea:	f04f 0901 	mov.w	r9, #1
 80074ee:	e78e      	b.n	800740e <ai_platform_network_create+0x232>
 80074f0:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <ai_platform_network_create+0x3ac>)
 80074f2:	2218      	movs	r2, #24
 80074f4:	609a      	str	r2, [r3, #8]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	2a18      	cmp	r2, #24
 80074fa:	f47f af39 	bne.w	8007370 <ai_platform_network_create+0x194>
 80074fe:	2201      	movs	r2, #1
 8007500:	609a      	str	r2, [r3, #8]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	2a00      	cmp	r2, #0
 8007506:	d1fc      	bne.n	8007502 <ai_platform_network_create+0x326>
 8007508:	e6b1      	b.n	800726e <ai_platform_network_create+0x92>
 800750a:	4a1f      	ldr	r2, [pc, #124]	@ (8007588 <ai_platform_network_create+0x3ac>)
 800750c:	2301      	movs	r3, #1
 800750e:	6093      	str	r3, [r2, #8]
 8007510:	6893      	ldr	r3, [r2, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1fc      	bne.n	8007510 <ai_platform_network_create+0x334>
 8007516:	4b1a      	ldr	r3, [pc, #104]	@ (8007580 <ai_platform_network_create+0x3a4>)
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	4b1a      	ldr	r3, [pc, #104]	@ (8007584 <ai_platform_network_create+0x3a8>)
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	f43f aed6 	beq.w	80072d0 <ai_platform_network_create+0xf4>
 8007524:	e7fe      	b.n	8007524 <ai_platform_network_create+0x348>
 8007526:	e7fe      	b.n	8007526 <ai_platform_network_create+0x34a>
 8007528:	4b18      	ldr	r3, [pc, #96]	@ (800758c <ai_platform_network_create+0x3b0>)
 800752a:	a801      	add	r0, sp, #4
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	f000 fde5 	bl	80080fc <ai_check_custom_types>
 8007532:	b300      	cbz	r0, 8007576 <ai_platform_network_create+0x39a>
 8007534:	2400      	movs	r4, #0
 8007536:	46a1      	mov	r9, r4
 8007538:	e76c      	b.n	8007414 <ai_platform_network_create+0x238>
 800753a:	4b10      	ldr	r3, [pc, #64]	@ (800757c <ai_platform_network_create+0x3a0>)
 800753c:	2201      	movs	r2, #1
 800753e:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 8007542:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 8007546:	2a00      	cmp	r2, #0
 8007548:	d1fb      	bne.n	8007542 <ai_platform_network_create+0x366>
 800754a:	4a0d      	ldr	r2, [pc, #52]	@ (8007580 <ai_platform_network_create+0x3a4>)
 800754c:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 8007550:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 8007554:	4b0b      	ldr	r3, [pc, #44]	@ (8007584 <ai_platform_network_create+0x3a8>)
 8007556:	429a      	cmp	r2, r3
 8007558:	d0b8      	beq.n	80074cc <ai_platform_network_create+0x2f0>
 800755a:	e7fe      	b.n	800755a <ai_platform_network_create+0x37e>
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <ai_platform_network_create+0x3ac>)
 800755e:	2201      	movs	r2, #1
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	2a00      	cmp	r2, #0
 8007566:	d1fc      	bne.n	8007562 <ai_platform_network_create+0x386>
 8007568:	4a05      	ldr	r2, [pc, #20]	@ (8007580 <ai_platform_network_create+0x3a4>)
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b05      	ldr	r3, [pc, #20]	@ (8007584 <ai_platform_network_create+0x3a8>)
 8007570:	429a      	cmp	r2, r3
 8007572:	d0ab      	beq.n	80074cc <ai_platform_network_create+0x2f0>
 8007574:	e7fe      	b.n	8007574 <ai_platform_network_create+0x398>
 8007576:	f04f 0902 	mov.w	r9, #2
 800757a:	e748      	b.n	800740e <ai_platform_network_create+0x232>
 800757c:	58024000 	.word	0x58024000
 8007580:	f407a5c2 	.word	0xf407a5c2
 8007584:	b5e8b5cd 	.word	0xb5e8b5cd
 8007588:	40023000 	.word	0x40023000
 800758c:	84048403 	.word	0x84048403

08007590 <ai_platform_network_init>:
 8007590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007594:	2800      	cmp	r0, #0
 8007596:	d052      	beq.n	800763e <ai_platform_network_init+0xae>
 8007598:	4bab      	ldr	r3, [pc, #684]	@ (8007848 <ai_platform_network_init+0x2b8>)
 800759a:	4604      	mov	r4, r0
 800759c:	6802      	ldr	r2, [r0, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d14d      	bne.n	800763e <ai_platform_network_init+0xae>
 80075a2:	460d      	mov	r5, r1
 80075a4:	f7ff f926 	bl	80067f4 <_ai_platform_acquire_crc>
 80075a8:	4ba8      	ldr	r3, [pc, #672]	@ (800784c <ai_platform_network_init+0x2bc>)
 80075aa:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b4:	189a      	adds	r2, r3, r2
 80075b6:	2a01      	cmp	r2, #1
 80075b8:	f240 809b 	bls.w	80076f2 <ai_platform_network_init+0x162>
 80075bc:	f240 4249 	movw	r2, #1097	@ 0x449
 80075c0:	4293      	cmp	r3, r2
 80075c2:	f000 8096 	beq.w	80076f2 <ai_platform_network_init+0x162>
 80075c6:	4aa2      	ldr	r2, [pc, #648]	@ (8007850 <ai_platform_network_init+0x2c0>)
 80075c8:	6813      	ldr	r3, [r2, #0]
 80075ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ce:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80075d2:	f000 809d 	beq.w	8007710 <ai_platform_network_init+0x180>
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	f240 4183 	movw	r1, #1155	@ 0x483
 80075dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075e0:	428b      	cmp	r3, r1
 80075e2:	f000 80e4 	beq.w	80077ae <ai_platform_network_init+0x21e>
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ec:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80075f0:	f000 811b 	beq.w	800782a <ai_platform_network_init+0x29a>
 80075f4:	6813      	ldr	r3, [r2, #0]
 80075f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 80f9 	beq.w	80077f2 <ai_platform_network_init+0x262>
 8007600:	f7ff f8fa 	bl	80067f8 <_ai_platform_release_crc>
 8007604:	2d00      	cmp	r5, #0
 8007606:	f000 8147 	beq.w	8007898 <ai_platform_network_init+0x308>
 800760a:	4b92      	ldr	r3, [pc, #584]	@ (8007854 <ai_platform_network_init+0x2c4>)
 800760c:	682a      	ldr	r2, [r5, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	f040 8090 	bne.w	8007734 <ai_platform_network_init+0x1a4>
 8007614:	692b      	ldr	r3, [r5, #16]
 8007616:	89ae      	ldrh	r6, [r5, #12]
 8007618:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800761c:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8007620:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007622:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8007626:	2303      	movs	r3, #3
 8007628:	84a6      	strh	r6, [r4, #36]	@ 0x24
 800762a:	4626      	mov	r6, r4
 800762c:	4620      	mov	r0, r4
 800762e:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 8007632:	60e3      	str	r3, [r4, #12]
 8007634:	f000 fd8a 	bl	800814c <ai_layers_init_all>
 8007638:	4630      	mov	r0, r6
 800763a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800763e:	f7ff f8d9 	bl	80067f4 <_ai_platform_acquire_crc>
 8007642:	4b82      	ldr	r3, [pc, #520]	@ (800784c <ai_platform_network_init+0x2bc>)
 8007644:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800764e:	185a      	adds	r2, r3, r1
 8007650:	2a01      	cmp	r2, #1
 8007652:	d92b      	bls.n	80076ac <ai_platform_network_init+0x11c>
 8007654:	f240 4249 	movw	r2, #1097	@ 0x449
 8007658:	4293      	cmp	r3, r2
 800765a:	d027      	beq.n	80076ac <ai_platform_network_init+0x11c>
 800765c:	4a7c      	ldr	r2, [pc, #496]	@ (8007850 <ai_platform_network_init+0x2c0>)
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007664:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007668:	d02d      	beq.n	80076c6 <ai_platform_network_init+0x136>
 800766a:	6813      	ldr	r3, [r2, #0]
 800766c:	f240 4183 	movw	r1, #1155	@ 0x483
 8007670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007674:	428b      	cmp	r3, r1
 8007676:	f000 8089 	beq.w	800778c <ai_platform_network_init+0x1fc>
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007680:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007684:	f000 80c3 	beq.w	800780e <ai_platform_network_init+0x27e>
 8007688:	6813      	ldr	r3, [r2, #0]
 800768a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800768e:	2b00      	cmp	r3, #0
 8007690:	d129      	bne.n	80076e6 <ai_platform_network_init+0x156>
 8007692:	4a71      	ldr	r2, [pc, #452]	@ (8007858 <ai_platform_network_init+0x2c8>)
 8007694:	2301      	movs	r3, #1
 8007696:	6093      	str	r3, [r2, #8]
 8007698:	6893      	ldr	r3, [r2, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1fc      	bne.n	8007698 <ai_platform_network_init+0x108>
 800769e:	496f      	ldr	r1, [pc, #444]	@ (800785c <ai_platform_network_init+0x2cc>)
 80076a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007860 <ai_platform_network_init+0x2d0>)
 80076a2:	6011      	str	r1, [r2, #0]
 80076a4:	6812      	ldr	r2, [r2, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d01d      	beq.n	80076e6 <ai_platform_network_init+0x156>
 80076aa:	e7fe      	b.n	80076aa <ai_platform_network_init+0x11a>
 80076ac:	4a6a      	ldr	r2, [pc, #424]	@ (8007858 <ai_platform_network_init+0x2c8>)
 80076ae:	2301      	movs	r3, #1
 80076b0:	6093      	str	r3, [r2, #8]
 80076b2:	6893      	ldr	r3, [r2, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1fc      	bne.n	80076b2 <ai_platform_network_init+0x122>
 80076b8:	4968      	ldr	r1, [pc, #416]	@ (800785c <ai_platform_network_init+0x2cc>)
 80076ba:	4b69      	ldr	r3, [pc, #420]	@ (8007860 <ai_platform_network_init+0x2d0>)
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	6812      	ldr	r2, [r2, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d010      	beq.n	80076e6 <ai_platform_network_init+0x156>
 80076c4:	e7fe      	b.n	80076c4 <ai_platform_network_init+0x134>
 80076c6:	4a67      	ldr	r2, [pc, #412]	@ (8007864 <ai_platform_network_init+0x2d4>)
 80076c8:	2301      	movs	r3, #1
 80076ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80076ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1fb      	bne.n	80076ce <ai_platform_network_init+0x13e>
 80076d6:	4961      	ldr	r1, [pc, #388]	@ (800785c <ai_platform_network_init+0x2cc>)
 80076d8:	4b61      	ldr	r3, [pc, #388]	@ (8007860 <ai_platform_network_init+0x2d0>)
 80076da:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80076de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d113      	bne.n	800770e <ai_platform_network_init+0x17e>
 80076e6:	2600      	movs	r6, #0
 80076e8:	f7ff f886 	bl	80067f8 <_ai_platform_release_crc>
 80076ec:	4630      	mov	r0, r6
 80076ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f2:	4a59      	ldr	r2, [pc, #356]	@ (8007858 <ai_platform_network_init+0x2c8>)
 80076f4:	2301      	movs	r3, #1
 80076f6:	6093      	str	r3, [r2, #8]
 80076f8:	6893      	ldr	r3, [r2, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1fc      	bne.n	80076f8 <ai_platform_network_init+0x168>
 80076fe:	4b57      	ldr	r3, [pc, #348]	@ (800785c <ai_platform_network_init+0x2cc>)
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	4b57      	ldr	r3, [pc, #348]	@ (8007860 <ai_platform_network_init+0x2d0>)
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	f43f af7a 	beq.w	8007600 <ai_platform_network_init+0x70>
 800770c:	e7fe      	b.n	800770c <ai_platform_network_init+0x17c>
 800770e:	e7fe      	b.n	800770e <ai_platform_network_init+0x17e>
 8007710:	4a54      	ldr	r2, [pc, #336]	@ (8007864 <ai_platform_network_init+0x2d4>)
 8007712:	2301      	movs	r3, #1
 8007714:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007718:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1fb      	bne.n	8007718 <ai_platform_network_init+0x188>
 8007720:	4b4e      	ldr	r3, [pc, #312]	@ (800785c <ai_platform_network_init+0x2cc>)
 8007722:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007726:	4b4e      	ldr	r3, [pc, #312]	@ (8007860 <ai_platform_network_init+0x2d0>)
 8007728:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800772c:	429a      	cmp	r2, r3
 800772e:	f43f af67 	beq.w	8007600 <ai_platform_network_init+0x70>
 8007732:	e7fe      	b.n	8007732 <ai_platform_network_init+0x1a2>
 8007734:	2101      	movs	r1, #1
 8007736:	4628      	mov	r0, r5
 8007738:	f105 081c 	add.w	r8, r5, #28
 800773c:	686e      	ldr	r6, [r5, #4]
 800773e:	f7ff f80b 	bl	8006758 <ai_buffer_get_size>
 8007742:	4607      	mov	r7, r0
 8007744:	2101      	movs	r1, #1
 8007746:	4640      	mov	r0, r8
 8007748:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800774c:	f7ff f804 	bl	8006758 <ai_buffer_get_size>
 8007750:	2f00      	cmp	r7, #0
 8007752:	d13e      	bne.n	80077d2 <ai_platform_network_init+0x242>
 8007754:	2800      	cmp	r0, #0
 8007756:	f000 808e 	beq.w	8007876 <ai_platform_network_init+0x2e6>
 800775a:	f1b9 0f00 	cmp.w	r9, #0
 800775e:	f000 8094 	beq.w	800788a <ai_platform_network_init+0x2fa>
 8007762:	f04f 0c01 	mov.w	ip, #1
 8007766:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8007768:	2600      	movs	r6, #0
 800776a:	83e7      	strh	r7, [r4, #30]
 800776c:	4563      	cmp	r3, ip
 800776e:	83a6      	strh	r6, [r4, #28]
 8007770:	d37a      	bcc.n	8007868 <ai_platform_network_init+0x2d8>
 8007772:	f1bc 0f00 	cmp.w	ip, #0
 8007776:	f000 809c 	beq.w	80078b2 <ai_platform_network_init+0x322>
 800777a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800777c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8007780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007782:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8007786:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800778a:	e74c      	b.n	8007626 <ai_platform_network_init+0x96>
 800778c:	4a35      	ldr	r2, [pc, #212]	@ (8007864 <ai_platform_network_init+0x2d4>)
 800778e:	2301      	movs	r3, #1
 8007790:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007794:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1fb      	bne.n	8007794 <ai_platform_network_init+0x204>
 800779c:	492f      	ldr	r1, [pc, #188]	@ (800785c <ai_platform_network_init+0x2cc>)
 800779e:	4b30      	ldr	r3, [pc, #192]	@ (8007860 <ai_platform_network_init+0x2d0>)
 80077a0:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80077a4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d09c      	beq.n	80076e6 <ai_platform_network_init+0x156>
 80077ac:	e7fe      	b.n	80077ac <ai_platform_network_init+0x21c>
 80077ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007864 <ai_platform_network_init+0x2d4>)
 80077b0:	2301      	movs	r3, #1
 80077b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80077b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1fb      	bne.n	80077b6 <ai_platform_network_init+0x226>
 80077be:	4b27      	ldr	r3, [pc, #156]	@ (800785c <ai_platform_network_init+0x2cc>)
 80077c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80077c4:	4b26      	ldr	r3, [pc, #152]	@ (8007860 <ai_platform_network_init+0x2d0>)
 80077c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80077ca:	429a      	cmp	r2, r3
 80077cc:	f43f af18 	beq.w	8007600 <ai_platform_network_init+0x70>
 80077d0:	e7fe      	b.n	80077d0 <ai_platform_network_init+0x240>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d153      	bne.n	800787e <ai_platform_network_init+0x2ee>
 80077d6:	4680      	mov	r8, r0
 80077d8:	4684      	mov	ip, r0
 80077da:	2e00      	cmp	r6, #0
 80077dc:	d063      	beq.n	80078a6 <ai_platform_network_init+0x316>
 80077de:	8be6      	ldrh	r6, [r4, #30]
 80077e0:	2e00      	cmp	r6, #0
 80077e2:	d168      	bne.n	80078b6 <ai_platform_network_init+0x326>
 80077e4:	2212      	movs	r2, #18
 80077e6:	2116      	movs	r1, #22
 80077e8:	f104 0010 	add.w	r0, r4, #16
 80077ec:	f000 fc7a 	bl	80080e4 <core_set_error>
 80077f0:	e77c      	b.n	80076ec <ai_platform_network_init+0x15c>
 80077f2:	4a19      	ldr	r2, [pc, #100]	@ (8007858 <ai_platform_network_init+0x2c8>)
 80077f4:	2301      	movs	r3, #1
 80077f6:	6093      	str	r3, [r2, #8]
 80077f8:	6893      	ldr	r3, [r2, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1fc      	bne.n	80077f8 <ai_platform_network_init+0x268>
 80077fe:	4b17      	ldr	r3, [pc, #92]	@ (800785c <ai_platform_network_init+0x2cc>)
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	4b17      	ldr	r3, [pc, #92]	@ (8007860 <ai_platform_network_init+0x2d0>)
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	f43f aefa 	beq.w	8007600 <ai_platform_network_init+0x70>
 800780c:	e7fe      	b.n	800780c <ai_platform_network_init+0x27c>
 800780e:	4a12      	ldr	r2, [pc, #72]	@ (8007858 <ai_platform_network_init+0x2c8>)
 8007810:	2301      	movs	r3, #1
 8007812:	6093      	str	r3, [r2, #8]
 8007814:	6893      	ldr	r3, [r2, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1fc      	bne.n	8007814 <ai_platform_network_init+0x284>
 800781a:	4910      	ldr	r1, [pc, #64]	@ (800785c <ai_platform_network_init+0x2cc>)
 800781c:	4b10      	ldr	r3, [pc, #64]	@ (8007860 <ai_platform_network_init+0x2d0>)
 800781e:	6011      	str	r1, [r2, #0]
 8007820:	6812      	ldr	r2, [r2, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	f43f af5f 	beq.w	80076e6 <ai_platform_network_init+0x156>
 8007828:	e7fe      	b.n	8007828 <ai_platform_network_init+0x298>
 800782a:	4a0b      	ldr	r2, [pc, #44]	@ (8007858 <ai_platform_network_init+0x2c8>)
 800782c:	2301      	movs	r3, #1
 800782e:	6093      	str	r3, [r2, #8]
 8007830:	6893      	ldr	r3, [r2, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1fc      	bne.n	8007830 <ai_platform_network_init+0x2a0>
 8007836:	4b09      	ldr	r3, [pc, #36]	@ (800785c <ai_platform_network_init+0x2cc>)
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <ai_platform_network_init+0x2d0>)
 800783c:	6812      	ldr	r2, [r2, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	f43f aede 	beq.w	8007600 <ai_platform_network_init+0x70>
 8007844:	e7fe      	b.n	8007844 <ai_platform_network_init+0x2b4>
 8007846:	bf00      	nop
 8007848:	a1c00100 	.word	0xa1c00100
 800784c:	e0042000 	.word	0xe0042000
 8007850:	5c001000 	.word	0x5c001000
 8007854:	a1facade 	.word	0xa1facade
 8007858:	40023000 	.word	0x40023000
 800785c:	f407a5c2 	.word	0xf407a5c2
 8007860:	b5e8b5cd 	.word	0xb5e8b5cd
 8007864:	58024000 	.word	0x58024000
 8007868:	2213      	movs	r2, #19
 800786a:	2116      	movs	r1, #22
 800786c:	f104 0010 	add.w	r0, r4, #16
 8007870:	f000 fc38 	bl	80080e4 <core_set_error>
 8007874:	e73a      	b.n	80076ec <ai_platform_network_init+0x15c>
 8007876:	4607      	mov	r7, r0
 8007878:	4680      	mov	r8, r0
 800787a:	4684      	mov	ip, r0
 800787c:	e773      	b.n	8007766 <ai_platform_network_init+0x1d6>
 800787e:	f1b9 0f00 	cmp.w	r9, #0
 8007882:	d002      	beq.n	800788a <ai_platform_network_init+0x2fa>
 8007884:	f04f 0c01 	mov.w	ip, #1
 8007888:	e7a7      	b.n	80077da <ai_platform_network_init+0x24a>
 800788a:	2110      	movs	r1, #16
 800788c:	2213      	movs	r2, #19
 800788e:	2600      	movs	r6, #0
 8007890:	1860      	adds	r0, r4, r1
 8007892:	f000 fc27 	bl	80080e4 <core_set_error>
 8007896:	e729      	b.n	80076ec <ai_platform_network_init+0x15c>
 8007898:	2110      	movs	r1, #16
 800789a:	2211      	movs	r2, #17
 800789c:	462e      	mov	r6, r5
 800789e:	1860      	adds	r0, r4, r1
 80078a0:	f000 fc20 	bl	80080e4 <core_set_error>
 80078a4:	e722      	b.n	80076ec <ai_platform_network_init+0x15c>
 80078a6:	2110      	movs	r1, #16
 80078a8:	2212      	movs	r2, #18
 80078aa:	1860      	adds	r0, r4, r1
 80078ac:	f000 fc1a 	bl	80080e4 <core_set_error>
 80078b0:	e71c      	b.n	80076ec <ai_platform_network_init+0x15c>
 80078b2:	4666      	mov	r6, ip
 80078b4:	e6b7      	b.n	8007626 <ai_platform_network_init+0x96>
 80078b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078b8:	6a26      	ldr	r6, [r4, #32]
 80078ba:	2701      	movs	r7, #1
 80078bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80078be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80078c2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80078c6:	e74e      	b.n	8007766 <ai_platform_network_init+0x1d6>

080078c8 <ai_platform_network_post_init>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d04e      	beq.n	800796c <ai_platform_network_post_init+0xa4>
 80078ce:	4b8c      	ldr	r3, [pc, #560]	@ (8007b00 <ai_platform_network_post_init+0x238>)
 80078d0:	4604      	mov	r4, r0
 80078d2:	6802      	ldr	r2, [r0, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d149      	bne.n	800796c <ai_platform_network_post_init+0xa4>
 80078d8:	f7fe ff8c 	bl	80067f4 <_ai_platform_acquire_crc>
 80078dc:	4b89      	ldr	r3, [pc, #548]	@ (8007b04 <ai_platform_network_post_init+0x23c>)
 80078de:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078e8:	189a      	adds	r2, r3, r2
 80078ea:	2a01      	cmp	r2, #1
 80078ec:	f240 8095 	bls.w	8007a1a <ai_platform_network_post_init+0x152>
 80078f0:	f240 4249 	movw	r2, #1097	@ 0x449
 80078f4:	4293      	cmp	r3, r2
 80078f6:	f000 8090 	beq.w	8007a1a <ai_platform_network_post_init+0x152>
 80078fa:	4a83      	ldr	r2, [pc, #524]	@ (8007b08 <ai_platform_network_post_init+0x240>)
 80078fc:	6813      	ldr	r3, [r2, #0]
 80078fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007902:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007906:	f000 8096 	beq.w	8007a36 <ai_platform_network_post_init+0x16e>
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	f240 4183 	movw	r1, #1155	@ 0x483
 8007910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007914:	428b      	cmp	r3, r1
 8007916:	f000 80b8 	beq.w	8007a8a <ai_platform_network_post_init+0x1c2>
 800791a:	6813      	ldr	r3, [r2, #0]
 800791c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007920:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007924:	f000 80de 	beq.w	8007ae4 <ai_platform_network_post_init+0x21c>
 8007928:	6813      	ldr	r3, [r2, #0]
 800792a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80bd 	beq.w	8007aae <ai_platform_network_post_init+0x1e6>
 8007934:	f7fe ff60 	bl	80067f8 <_ai_platform_release_crc>
 8007938:	68e3      	ldr	r3, [r4, #12]
 800793a:	f013 0502 	ands.w	r5, r3, #2
 800793e:	f000 808c 	beq.w	8007a5a <ai_platform_network_post_init+0x192>
 8007942:	4620      	mov	r0, r4
 8007944:	f000 fc10 	bl	8008168 <ai_layers_post_init_all>
 8007948:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800794a:	b16b      	cbz	r3, 8007968 <ai_platform_network_post_init+0xa0>
 800794c:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800794e:	e007      	b.n	8007960 <ai_platform_network_post_init+0x98>
 8007950:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 8007954:	4798      	blx	r3
 8007956:	692b      	ldr	r3, [r5, #16]
 8007958:	b133      	cbz	r3, 8007968 <ai_platform_network_post_init+0xa0>
 800795a:	42ab      	cmp	r3, r5
 800795c:	461d      	mov	r5, r3
 800795e:	d003      	beq.n	8007968 <ai_platform_network_post_init+0xa0>
 8007960:	4629      	mov	r1, r5
 8007962:	2000      	movs	r0, #0
 8007964:	2d00      	cmp	r5, #0
 8007966:	d1f3      	bne.n	8007950 <ai_platform_network_post_init+0x88>
 8007968:	2001      	movs	r0, #1
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	f7fe ff42 	bl	80067f4 <_ai_platform_acquire_crc>
 8007970:	4b64      	ldr	r3, [pc, #400]	@ (8007b04 <ai_platform_network_post_init+0x23c>)
 8007972:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800797c:	185a      	adds	r2, r3, r1
 800797e:	2a01      	cmp	r2, #1
 8007980:	d92a      	bls.n	80079d8 <ai_platform_network_post_init+0x110>
 8007982:	f240 4249 	movw	r2, #1097	@ 0x449
 8007986:	4293      	cmp	r3, r2
 8007988:	d026      	beq.n	80079d8 <ai_platform_network_post_init+0x110>
 800798a:	4a5f      	ldr	r2, [pc, #380]	@ (8007b08 <ai_platform_network_post_init+0x240>)
 800798c:	6813      	ldr	r3, [r2, #0]
 800798e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007992:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007996:	d02c      	beq.n	80079f2 <ai_platform_network_post_init+0x12a>
 8007998:	6813      	ldr	r3, [r2, #0]
 800799a:	f240 4183 	movw	r1, #1155	@ 0x483
 800799e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079a2:	428b      	cmp	r3, r1
 80079a4:	d060      	beq.n	8007a68 <ai_platform_network_post_init+0x1a0>
 80079a6:	6813      	ldr	r3, [r2, #0]
 80079a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ac:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80079b0:	f000 808b 	beq.w	8007aca <ai_platform_network_post_init+0x202>
 80079b4:	6813      	ldr	r3, [r2, #0]
 80079b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d129      	bne.n	8007a12 <ai_platform_network_post_init+0x14a>
 80079be:	4a53      	ldr	r2, [pc, #332]	@ (8007b0c <ai_platform_network_post_init+0x244>)
 80079c0:	2301      	movs	r3, #1
 80079c2:	6093      	str	r3, [r2, #8]
 80079c4:	6893      	ldr	r3, [r2, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1fc      	bne.n	80079c4 <ai_platform_network_post_init+0xfc>
 80079ca:	4951      	ldr	r1, [pc, #324]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 80079cc:	4b51      	ldr	r3, [pc, #324]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 80079ce:	6011      	str	r1, [r2, #0]
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d01d      	beq.n	8007a12 <ai_platform_network_post_init+0x14a>
 80079d6:	e7fe      	b.n	80079d6 <ai_platform_network_post_init+0x10e>
 80079d8:	4a4c      	ldr	r2, [pc, #304]	@ (8007b0c <ai_platform_network_post_init+0x244>)
 80079da:	2301      	movs	r3, #1
 80079dc:	6093      	str	r3, [r2, #8]
 80079de:	6893      	ldr	r3, [r2, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1fc      	bne.n	80079de <ai_platform_network_post_init+0x116>
 80079e4:	494a      	ldr	r1, [pc, #296]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 80079e6:	4b4b      	ldr	r3, [pc, #300]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 80079e8:	6011      	str	r1, [r2, #0]
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d010      	beq.n	8007a12 <ai_platform_network_post_init+0x14a>
 80079f0:	e7fe      	b.n	80079f0 <ai_platform_network_post_init+0x128>
 80079f2:	4a49      	ldr	r2, [pc, #292]	@ (8007b18 <ai_platform_network_post_init+0x250>)
 80079f4:	2301      	movs	r3, #1
 80079f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80079fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1fb      	bne.n	80079fa <ai_platform_network_post_init+0x132>
 8007a02:	4943      	ldr	r1, [pc, #268]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007a04:	4b43      	ldr	r3, [pc, #268]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007a06:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007a0a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d110      	bne.n	8007a34 <ai_platform_network_post_init+0x16c>
 8007a12:	f7fe fef1 	bl	80067f8 <_ai_platform_release_crc>
 8007a16:	2000      	movs	r0, #0
 8007a18:	bd38      	pop	{r3, r4, r5, pc}
 8007a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8007b0c <ai_platform_network_post_init+0x244>)
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	6093      	str	r3, [r2, #8]
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1fc      	bne.n	8007a20 <ai_platform_network_post_init+0x158>
 8007a26:	493a      	ldr	r1, [pc, #232]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007a28:	4b3a      	ldr	r3, [pc, #232]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007a2a:	6011      	str	r1, [r2, #0]
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d080      	beq.n	8007934 <ai_platform_network_post_init+0x6c>
 8007a32:	e7fe      	b.n	8007a32 <ai_platform_network_post_init+0x16a>
 8007a34:	e7fe      	b.n	8007a34 <ai_platform_network_post_init+0x16c>
 8007a36:	4a38      	ldr	r2, [pc, #224]	@ (8007b18 <ai_platform_network_post_init+0x250>)
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007a3e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1fb      	bne.n	8007a3e <ai_platform_network_post_init+0x176>
 8007a46:	4932      	ldr	r1, [pc, #200]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007a48:	4b32      	ldr	r3, [pc, #200]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007a4a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007a4e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007a52:	429a      	cmp	r2, r3
 8007a54:	f43f af6e 	beq.w	8007934 <ai_platform_network_post_init+0x6c>
 8007a58:	e7fe      	b.n	8007a58 <ai_platform_network_post_init+0x190>
 8007a5a:	2210      	movs	r2, #16
 8007a5c:	2111      	movs	r1, #17
 8007a5e:	18a0      	adds	r0, r4, r2
 8007a60:	f000 fb40 	bl	80080e4 <core_set_error>
 8007a64:	4628      	mov	r0, r5
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	4a2b      	ldr	r2, [pc, #172]	@ (8007b18 <ai_platform_network_post_init+0x250>)
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007a70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1fb      	bne.n	8007a70 <ai_platform_network_post_init+0x1a8>
 8007a78:	4925      	ldr	r1, [pc, #148]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007a7a:	4b26      	ldr	r3, [pc, #152]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007a7c:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007a80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d0c4      	beq.n	8007a12 <ai_platform_network_post_init+0x14a>
 8007a88:	e7fe      	b.n	8007a88 <ai_platform_network_post_init+0x1c0>
 8007a8a:	4a23      	ldr	r2, [pc, #140]	@ (8007b18 <ai_platform_network_post_init+0x250>)
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007a92:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1fb      	bne.n	8007a92 <ai_platform_network_post_init+0x1ca>
 8007a9a:	491d      	ldr	r1, [pc, #116]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007a9e:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007aa2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	f43f af44 	beq.w	8007934 <ai_platform_network_post_init+0x6c>
 8007aac:	e7fe      	b.n	8007aac <ai_platform_network_post_init+0x1e4>
 8007aae:	4a17      	ldr	r2, [pc, #92]	@ (8007b0c <ai_platform_network_post_init+0x244>)
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	6093      	str	r3, [r2, #8]
 8007ab4:	6893      	ldr	r3, [r2, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1fc      	bne.n	8007ab4 <ai_platform_network_post_init+0x1ec>
 8007aba:	4915      	ldr	r1, [pc, #84]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007abc:	4b15      	ldr	r3, [pc, #84]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007abe:	6011      	str	r1, [r2, #0]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	f43f af36 	beq.w	8007934 <ai_platform_network_post_init+0x6c>
 8007ac8:	e7fe      	b.n	8007ac8 <ai_platform_network_post_init+0x200>
 8007aca:	4a10      	ldr	r2, [pc, #64]	@ (8007b0c <ai_platform_network_post_init+0x244>)
 8007acc:	2301      	movs	r3, #1
 8007ace:	6093      	str	r3, [r2, #8]
 8007ad0:	6893      	ldr	r3, [r2, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1fc      	bne.n	8007ad0 <ai_platform_network_post_init+0x208>
 8007ad6:	490e      	ldr	r1, [pc, #56]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007ada:	6011      	str	r1, [r2, #0]
 8007adc:	6812      	ldr	r2, [r2, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d097      	beq.n	8007a12 <ai_platform_network_post_init+0x14a>
 8007ae2:	e7fe      	b.n	8007ae2 <ai_platform_network_post_init+0x21a>
 8007ae4:	4a09      	ldr	r2, [pc, #36]	@ (8007b0c <ai_platform_network_post_init+0x244>)
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	6093      	str	r3, [r2, #8]
 8007aea:	6893      	ldr	r3, [r2, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1fc      	bne.n	8007aea <ai_platform_network_post_init+0x222>
 8007af0:	4907      	ldr	r1, [pc, #28]	@ (8007b10 <ai_platform_network_post_init+0x248>)
 8007af2:	4b08      	ldr	r3, [pc, #32]	@ (8007b14 <ai_platform_network_post_init+0x24c>)
 8007af4:	6011      	str	r1, [r2, #0]
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	f43f af1b 	beq.w	8007934 <ai_platform_network_post_init+0x6c>
 8007afe:	e7fe      	b.n	8007afe <ai_platform_network_post_init+0x236>
 8007b00:	a1c00100 	.word	0xa1c00100
 8007b04:	e0042000 	.word	0xe0042000
 8007b08:	5c001000 	.word	0x5c001000
 8007b0c:	40023000 	.word	0x40023000
 8007b10:	f407a5c2 	.word	0xf407a5c2
 8007b14:	b5e8b5cd 	.word	0xb5e8b5cd
 8007b18:	58024000 	.word	0x58024000

08007b1c <ai_platform_network_process>:
 8007b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	b085      	sub	sp, #20
 8007b22:	460e      	mov	r6, r1
 8007b24:	4605      	mov	r5, r0
 8007b26:	9201      	str	r2, [sp, #4]
 8007b28:	b120      	cbz	r0, 8007b34 <ai_platform_network_process+0x18>
 8007b2a:	4b24      	ldr	r3, [pc, #144]	@ (8007bbc <ai_platform_network_process+0xa0>)
 8007b2c:	6802      	ldr	r2, [r0, #0]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	bf18      	it	ne
 8007b32:	2500      	movne	r5, #0
 8007b34:	f7fe fe5e 	bl	80067f4 <_ai_platform_acquire_crc>
 8007b38:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <ai_platform_network_process+0xa4>)
 8007b3a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b44:	185a      	adds	r2, r3, r1
 8007b46:	2a01      	cmp	r2, #1
 8007b48:	d92b      	bls.n	8007ba2 <ai_platform_network_process+0x86>
 8007b4a:	f240 4249 	movw	r2, #1097	@ 0x449
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d027      	beq.n	8007ba2 <ai_platform_network_process+0x86>
 8007b52:	4a1c      	ldr	r2, [pc, #112]	@ (8007bc4 <ai_platform_network_process+0xa8>)
 8007b54:	6813      	ldr	r3, [r2, #0]
 8007b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b5a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007b5e:	d039      	beq.n	8007bd4 <ai_platform_network_process+0xb8>
 8007b60:	6813      	ldr	r3, [r2, #0]
 8007b62:	f240 4183 	movw	r1, #1155	@ 0x483
 8007b66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b6a:	428b      	cmp	r3, r1
 8007b6c:	f000 819c 	beq.w	8007ea8 <ai_platform_network_process+0x38c>
 8007b70:	6813      	ldr	r3, [r2, #0]
 8007b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b76:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007b7a:	f000 8179 	beq.w	8007e70 <ai_platform_network_process+0x354>
 8007b7e:	6813      	ldr	r3, [r2, #0]
 8007b80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d136      	bne.n	8007bf6 <ai_platform_network_process+0xda>
 8007b88:	4a0f      	ldr	r2, [pc, #60]	@ (8007bc8 <ai_platform_network_process+0xac>)
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	6093      	str	r3, [r2, #8]
 8007b8e:	6893      	ldr	r3, [r2, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1fc      	bne.n	8007b8e <ai_platform_network_process+0x72>
 8007b94:	4b0d      	ldr	r3, [pc, #52]	@ (8007bcc <ai_platform_network_process+0xb0>)
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <ai_platform_network_process+0xb4>)
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d02a      	beq.n	8007bf6 <ai_platform_network_process+0xda>
 8007ba0:	e7fe      	b.n	8007ba0 <ai_platform_network_process+0x84>
 8007ba2:	4a09      	ldr	r2, [pc, #36]	@ (8007bc8 <ai_platform_network_process+0xac>)
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	6093      	str	r3, [r2, #8]
 8007ba8:	6893      	ldr	r3, [r2, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1fc      	bne.n	8007ba8 <ai_platform_network_process+0x8c>
 8007bae:	4b07      	ldr	r3, [pc, #28]	@ (8007bcc <ai_platform_network_process+0xb0>)
 8007bb0:	6013      	str	r3, [r2, #0]
 8007bb2:	4b07      	ldr	r3, [pc, #28]	@ (8007bd0 <ai_platform_network_process+0xb4>)
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d01d      	beq.n	8007bf6 <ai_platform_network_process+0xda>
 8007bba:	e7fe      	b.n	8007bba <ai_platform_network_process+0x9e>
 8007bbc:	a1c00100 	.word	0xa1c00100
 8007bc0:	e0042000 	.word	0xe0042000
 8007bc4:	5c001000 	.word	0x5c001000
 8007bc8:	40023000 	.word	0x40023000
 8007bcc:	f407a5c2 	.word	0xf407a5c2
 8007bd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8007bd4:	4ab0      	ldr	r2, [pc, #704]	@ (8007e98 <ai_platform_network_process+0x37c>)
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007bdc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1fb      	bne.n	8007bdc <ai_platform_network_process+0xc0>
 8007be4:	4bad      	ldr	r3, [pc, #692]	@ (8007e9c <ai_platform_network_process+0x380>)
 8007be6:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007bea:	4bad      	ldr	r3, [pc, #692]	@ (8007ea0 <ai_platform_network_process+0x384>)
 8007bec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	f040 812b 	bne.w	8007e4c <ai_platform_network_process+0x330>
 8007bf6:	f7fe fdff 	bl	80067f8 <_ai_platform_release_crc>
 8007bfa:	2d00      	cmp	r5, #0
 8007bfc:	f000 8172 	beq.w	8007ee4 <ai_platform_network_process+0x3c8>
 8007c00:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 8123 	beq.w	8007e4e <ai_platform_network_process+0x332>
 8007c08:	68eb      	ldr	r3, [r5, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	616a      	str	r2, [r5, #20]
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	f040 811f 	bne.w	8007e5a <ai_platform_network_process+0x33e>
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	f000 8156 	beq.w	8007ece <ai_platform_network_process+0x3b2>
 8007c22:	fab8 f788 	clz	r7, r8
 8007c26:	097f      	lsrs	r7, r7, #5
 8007c28:	f1b8 0f00 	cmp.w	r8, #0
 8007c2c:	f000 814f 	beq.w	8007ece <ai_platform_network_process+0x3b2>
 8007c30:	f8b8 3000 	ldrh.w	r3, [r8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 814a 	beq.w	8007ece <ai_platform_network_process+0x3b2>
 8007c3a:	69b3      	ldr	r3, [r6, #24]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8007c42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d072      	beq.n	8007d30 <ai_platform_network_process+0x214>
 8007c4a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007c4e:	2c00      	cmp	r4, #0
 8007c50:	d06e      	beq.n	8007d30 <ai_platform_network_process+0x214>
 8007c52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c56:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007c5a:	f8d3 a000 	ldr.w	sl, [r3]
 8007c5e:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8007c62:	f000 8133 	beq.w	8007ecc <ai_platform_network_process+0x3b0>
 8007c66:	69a3      	ldr	r3, [r4, #24]
 8007c68:	2101      	movs	r1, #1
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	685d      	ldr	r5, [r3, #4]
 8007c6e:	f7fe fd73 	bl	8006758 <ai_buffer_get_size>
 8007c72:	4285      	cmp	r5, r0
 8007c74:	f0c0 8138 	bcc.w	8007ee8 <ai_platform_network_process+0x3cc>
 8007c78:	68e0      	ldr	r0, [r4, #12]
 8007c7a:	69b1      	ldr	r1, [r6, #24]
 8007c7c:	68c2      	ldr	r2, [r0, #12]
 8007c7e:	68cb      	ldr	r3, [r1, #12]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	f040 8131 	bne.w	8007ee8 <ai_platform_network_process+0x3cc>
 8007c86:	6882      	ldr	r2, [r0, #8]
 8007c88:	688b      	ldr	r3, [r1, #8]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	f040 812c 	bne.w	8007ee8 <ai_platform_network_process+0x3cc>
 8007c90:	6842      	ldr	r2, [r0, #4]
 8007c92:	684b      	ldr	r3, [r1, #4]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	f040 8127 	bne.w	8007ee8 <ai_platform_network_process+0x3cc>
 8007c9a:	69a3      	ldr	r3, [r4, #24]
 8007c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ca0:	f001 fefa 	bl	8009a98 <ai_array_get_data_byte_size>
 8007ca4:	4605      	mov	r5, r0
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 ff0c 	bl	8009ac4 <get_tensor_byte_size>
 8007cac:	4285      	cmp	r5, r0
 8007cae:	f0c0 811b 	bcc.w	8007ee8 <ai_platform_network_process+0x3cc>
 8007cb2:	69a3      	ldr	r3, [r4, #24]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	f001 fe5b 	bl	8009970 <ai_array_to_buffer_fmt>
 8007cba:	6833      	ldr	r3, [r6, #0]
 8007cbc:	4058      	eors	r0, r3
 8007cbe:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007cc2:	f040 81c8 	bne.w	8008056 <ai_platform_network_process+0x53a>
 8007cc6:	6873      	ldr	r3, [r6, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 81bb 	beq.w	8008044 <ai_platform_network_process+0x528>
 8007cce:	69b3      	ldr	r3, [r6, #24]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 81c8 	beq.w	8008068 <ai_platform_network_process+0x54c>
 8007cd8:	9a02      	ldr	r2, [sp, #8]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	3701      	adds	r7, #1
 8007cde:	361c      	adds	r6, #28
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	bf38      	it	cc
 8007ce4:	461a      	movcc	r2, r3
 8007ce6:	9202      	str	r2, [sp, #8]
 8007ce8:	f001 feec 	bl	8009ac4 <get_tensor_byte_size>
 8007cec:	f8c9 0008 	str.w	r0, [r9, #8]
 8007cf0:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	fb00 f303 	mul.w	r3, r0, r3
 8007cfa:	f8c9 300c 	str.w	r3, [r9, #12]
 8007cfe:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007d02:	440b      	add	r3, r1
 8007d04:	f8c9 1004 	str.w	r1, [r9, #4]
 8007d08:	f84a 300b 	str.w	r3, [sl, fp]
 8007d0c:	69a0      	ldr	r0, [r4, #24]
 8007d0e:	6803      	ldr	r3, [r0, #0]
 8007d10:	009a      	lsls	r2, r3, #2
 8007d12:	f100 80bb 	bmi.w	8007e8c <ai_platform_network_process+0x370>
 8007d16:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	4419      	add	r1, r3
 8007d1e:	6081      	str	r1, [r0, #8]
 8007d20:	69a3      	ldr	r3, [r4, #24]
 8007d22:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007d26:	60da      	str	r2, [r3, #12]
 8007d28:	f8b8 3000 	ldrh.w	r3, [r8]
 8007d2c:	42bb      	cmp	r3, r7
 8007d2e:	d888      	bhi.n	8007c42 <ai_platform_network_process+0x126>
 8007d30:	9d03      	ldr	r5, [sp, #12]
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 819f 	beq.w	800807a <ai_platform_network_process+0x55e>
 8007d3c:	2a01      	cmp	r2, #1
 8007d3e:	f240 8179 	bls.w	8008034 <ai_platform_network_process+0x518>
 8007d42:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8007d46:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8172 	beq.w	8008034 <ai_platform_network_process+0x518>
 8007d50:	9e01      	ldr	r6, [sp, #4]
 8007d52:	2700      	movs	r7, #0
 8007d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 80d3 	beq.w	8007f04 <ai_platform_network_process+0x3e8>
 8007d5e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007d62:	2c00      	cmp	r4, #0
 8007d64:	f000 80ce 	beq.w	8007f04 <ai_platform_network_process+0x3e8>
 8007d68:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007d6c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007d70:	f8d3 8000 	ldr.w	r8, [r3]
 8007d74:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007d78:	f000 819d 	beq.w	80080b6 <ai_platform_network_process+0x59a>
 8007d7c:	69a3      	ldr	r3, [r4, #24]
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4630      	mov	r0, r6
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	f7fe fce7 	bl	8006758 <ai_buffer_get_size>
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	4283      	cmp	r3, r0
 8007d8e:	f0c0 8151 	bcc.w	8008034 <ai_platform_network_process+0x518>
 8007d92:	68e0      	ldr	r0, [r4, #12]
 8007d94:	69b1      	ldr	r1, [r6, #24]
 8007d96:	68c2      	ldr	r2, [r0, #12]
 8007d98:	68cb      	ldr	r3, [r1, #12]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	f040 814a 	bne.w	8008034 <ai_platform_network_process+0x518>
 8007da0:	6882      	ldr	r2, [r0, #8]
 8007da2:	688b      	ldr	r3, [r1, #8]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	f040 8145 	bne.w	8008034 <ai_platform_network_process+0x518>
 8007daa:	6842      	ldr	r2, [r0, #4]
 8007dac:	684b      	ldr	r3, [r1, #4]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	f040 8140 	bne.w	8008034 <ai_platform_network_process+0x518>
 8007db4:	69a3      	ldr	r3, [r4, #24]
 8007db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dba:	f001 fe6d 	bl	8009a98 <ai_array_get_data_byte_size>
 8007dbe:	9001      	str	r0, [sp, #4]
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f001 fe7f 	bl	8009ac4 <get_tensor_byte_size>
 8007dc6:	9b01      	ldr	r3, [sp, #4]
 8007dc8:	4283      	cmp	r3, r0
 8007dca:	f0c0 8133 	bcc.w	8008034 <ai_platform_network_process+0x518>
 8007dce:	69a3      	ldr	r3, [r4, #24]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f001 fdcd 	bl	8009970 <ai_array_to_buffer_fmt>
 8007dd6:	6833      	ldr	r3, [r6, #0]
 8007dd8:	4058      	eors	r0, r3
 8007dda:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007dde:	f040 815a 	bne.w	8008096 <ai_platform_network_process+0x57a>
 8007de2:	6873      	ldr	r3, [r6, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 814e 	beq.w	8008086 <ai_platform_network_process+0x56a>
 8007dea:	69b3      	ldr	r3, [r6, #24]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 8159 	beq.w	80080a6 <ai_platform_network_process+0x58a>
 8007df4:	9a02      	ldr	r2, [sp, #8]
 8007df6:	4620      	mov	r0, r4
 8007df8:	3701      	adds	r7, #1
 8007dfa:	361c      	adds	r6, #28
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	bf38      	it	cc
 8007e00:	461a      	movcc	r2, r3
 8007e02:	9202      	str	r2, [sp, #8]
 8007e04:	f001 fe5e 	bl	8009ac4 <get_tensor_byte_size>
 8007e08:	f8ca 0008 	str.w	r0, [sl, #8]
 8007e0c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	fb00 f303 	mul.w	r3, r0, r3
 8007e16:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e1a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007e1e:	440b      	add	r3, r1
 8007e20:	f8ca 1004 	str.w	r1, [sl, #4]
 8007e24:	f848 300b 	str.w	r3, [r8, fp]
 8007e28:	69a0      	ldr	r0, [r4, #24]
 8007e2a:	6803      	ldr	r3, [r0, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	d464      	bmi.n	8007efa <ai_platform_network_process+0x3de>
 8007e30:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	4419      	add	r1, r3
 8007e38:	6081      	str	r1, [r0, #8]
 8007e3a:	69a3      	ldr	r3, [r4, #24]
 8007e3c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007e40:	60da      	str	r2, [r3, #12]
 8007e42:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007e46:	429f      	cmp	r7, r3
 8007e48:	d384      	bcc.n	8007d54 <ai_platform_network_process+0x238>
 8007e4a:	e05b      	b.n	8007f04 <ai_platform_network_process+0x3e8>
 8007e4c:	e7fe      	b.n	8007e4c <ai_platform_network_process+0x330>
 8007e4e:	68ea      	ldr	r2, [r5, #12]
 8007e50:	616b      	str	r3, [r5, #20]
 8007e52:	f002 0203 	and.w	r2, r2, #3
 8007e56:	2a03      	cmp	r2, #3
 8007e58:	d039      	beq.n	8007ece <ai_platform_network_process+0x3b2>
 8007e5a:	2230      	movs	r2, #48	@ 0x30
 8007e5c:	2111      	movs	r1, #17
 8007e5e:	f105 0010 	add.w	r0, r5, #16
 8007e62:	2400      	movs	r4, #0
 8007e64:	f000 f93e 	bl	80080e4 <core_set_error>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	b005      	add	sp, #20
 8007e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e70:	4a0c      	ldr	r2, [pc, #48]	@ (8007ea4 <ai_platform_network_process+0x388>)
 8007e72:	2301      	movs	r3, #1
 8007e74:	6093      	str	r3, [r2, #8]
 8007e76:	6893      	ldr	r3, [r2, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1fc      	bne.n	8007e76 <ai_platform_network_process+0x35a>
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <ai_platform_network_process+0x380>)
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <ai_platform_network_process+0x384>)
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	f43f aeb6 	beq.w	8007bf6 <ai_platform_network_process+0xda>
 8007e8a:	e7fe      	b.n	8007e8a <ai_platform_network_process+0x36e>
 8007e8c:	f8b8 3000 	ldrh.w	r3, [r8]
 8007e90:	429f      	cmp	r7, r3
 8007e92:	f4ff aed6 	bcc.w	8007c42 <ai_platform_network_process+0x126>
 8007e96:	e74b      	b.n	8007d30 <ai_platform_network_process+0x214>
 8007e98:	58024000 	.word	0x58024000
 8007e9c:	f407a5c2 	.word	0xf407a5c2
 8007ea0:	b5e8b5cd 	.word	0xb5e8b5cd
 8007ea4:	40023000 	.word	0x40023000
 8007ea8:	4a87      	ldr	r2, [pc, #540]	@ (80080c8 <ai_platform_network_process+0x5ac>)
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007eb0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1fb      	bne.n	8007eb0 <ai_platform_network_process+0x394>
 8007eb8:	4b84      	ldr	r3, [pc, #528]	@ (80080cc <ai_platform_network_process+0x5b0>)
 8007eba:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007ebe:	4b84      	ldr	r3, [pc, #528]	@ (80080d0 <ai_platform_network_process+0x5b4>)
 8007ec0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	f43f ae96 	beq.w	8007bf6 <ai_platform_network_process+0xda>
 8007eca:	e7fe      	b.n	8007eca <ai_platform_network_process+0x3ae>
 8007ecc:	9d03      	ldr	r5, [sp, #12]
 8007ece:	2400      	movs	r4, #0
 8007ed0:	2217      	movs	r2, #23
 8007ed2:	2112      	movs	r1, #18
 8007ed4:	f105 0010 	add.w	r0, r5, #16
 8007ed8:	f000 f904 	bl	80080e4 <core_set_error>
 8007edc:	4620      	mov	r0, r4
 8007ede:	b005      	add	sp, #20
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	462c      	mov	r4, r5
 8007ee6:	e7bf      	b.n	8007e68 <ai_platform_network_process+0x34c>
 8007ee8:	9d03      	ldr	r5, [sp, #12]
 8007eea:	2218      	movs	r2, #24
 8007eec:	2112      	movs	r1, #18
 8007eee:	2400      	movs	r4, #0
 8007ef0:	f105 0010 	add.w	r0, r5, #16
 8007ef4:	f000 f8f6 	bl	80080e4 <core_set_error>
 8007ef8:	e7b6      	b.n	8007e68 <ai_platform_network_process+0x34c>
 8007efa:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007efe:	429f      	cmp	r7, r3
 8007f00:	f4ff af28 	bcc.w	8007d54 <ai_platform_network_process+0x238>
 8007f04:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007f08:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8007f0a:	82ab      	strh	r3, [r5, #20]
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	f040 808b 	bne.w	8008028 <ai_platform_network_process+0x50c>
 8007f12:	4616      	mov	r6, r2
 8007f14:	4617      	mov	r7, r2
 8007f16:	8aec      	ldrh	r4, [r5, #22]
 8007f18:	429c      	cmp	r4, r3
 8007f1a:	d2a5      	bcs.n	8007e68 <ai_platform_network_process+0x34c>
 8007f1c:	46ab      	mov	fp, r5
 8007f1e:	2e00      	cmp	r6, #0
 8007f20:	d030      	beq.n	8007f84 <ai_platform_network_process+0x468>
 8007f22:	f04f 0800 	mov.w	r8, #0
 8007f26:	e014      	b.n	8007f52 <ai_platform_network_process+0x436>
 8007f28:	6882      	ldr	r2, [r0, #8]
 8007f2a:	68c5      	ldr	r5, [r0, #12]
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	1b52      	subs	r2, r2, r5
 8007f30:	4413      	add	r3, r2
 8007f32:	6083      	str	r3, [r0, #8]
 8007f34:	698b      	ldr	r3, [r1, #24]
 8007f36:	6862      	ldr	r2, [r4, #4]
 8007f38:	60da      	str	r2, [r3, #12]
 8007f3a:	f859 200a 	ldr.w	r2, [r9, sl]
 8007f3e:	f108 0801 	add.w	r8, r8, #1
 8007f42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007f46:	440b      	add	r3, r1
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d301      	bcc.n	8007f50 <ai_platform_network_process+0x434>
 8007f4c:	68e3      	ldr	r3, [r4, #12]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	6063      	str	r3, [r4, #4]
 8007f52:	8833      	ldrh	r3, [r6, #0]
 8007f54:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007f58:	4543      	cmp	r3, r8
 8007f5a:	d913      	bls.n	8007f84 <ai_platform_network_process+0x468>
 8007f5c:	6873      	ldr	r3, [r6, #4]
 8007f5e:	b18b      	cbz	r3, 8007f84 <ai_platform_network_process+0x468>
 8007f60:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007f64:	b171      	cbz	r1, 8007f84 <ai_platform_network_process+0x468>
 8007f66:	6988      	ldr	r0, [r1, #24]
 8007f68:	68b2      	ldr	r2, [r6, #8]
 8007f6a:	6803      	ldr	r3, [r0, #0]
 8007f6c:	f8d2 9000 	ldr.w	r9, [r2]
 8007f70:	009d      	lsls	r5, r3, #2
 8007f72:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007f76:	d5d7      	bpl.n	8007f28 <ai_platform_network_process+0x40c>
 8007f78:	6881      	ldr	r1, [r0, #8]
 8007f7a:	68a2      	ldr	r2, [r4, #8]
 8007f7c:	6860      	ldr	r0, [r4, #4]
 8007f7e:	f001 fc6f 	bl	8009860 <st_int8_copy>
 8007f82:	e7da      	b.n	8007f3a <ai_platform_network_process+0x41e>
 8007f84:	4658      	mov	r0, fp
 8007f86:	f000 f903 	bl	8008190 <ai_layers_forward_all>
 8007f8a:	2f00      	cmp	r7, #0
 8007f8c:	d03d      	beq.n	800800a <ai_platform_network_process+0x4ee>
 8007f8e:	2400      	movs	r4, #0
 8007f90:	e016      	b.n	8007fc0 <ai_platform_network_process+0x4a4>
 8007f92:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007f96:	f859 100a 	ldr.w	r1, [r9, sl]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	428b      	cmp	r3, r1
 8007f9e:	d302      	bcc.n	8007fa6 <ai_platform_network_process+0x48a>
 8007fa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fa4:	1acb      	subs	r3, r1, r3
 8007fa6:	f8c8 3004 	str.w	r3, [r8, #4]
 8007faa:	6981      	ldr	r1, [r0, #24]
 8007fac:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007fb0:	1b52      	subs	r2, r2, r5
 8007fb2:	4413      	add	r3, r2
 8007fb4:	608b      	str	r3, [r1, #8]
 8007fb6:	6983      	ldr	r3, [r0, #24]
 8007fb8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007fbc:	60da      	str	r2, [r3, #12]
 8007fbe:	3401      	adds	r4, #1
 8007fc0:	883b      	ldrh	r3, [r7, #0]
 8007fc2:	42a3      	cmp	r3, r4
 8007fc4:	d921      	bls.n	800800a <ai_platform_network_process+0x4ee>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	b1fb      	cbz	r3, 800800a <ai_platform_network_process+0x4ee>
 8007fca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007fce:	b1e0      	cbz	r0, 800800a <ai_platform_network_process+0x4ee>
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007fd6:	6983      	ldr	r3, [r0, #24]
 8007fd8:	f8d2 9000 	ldr.w	r9, [r2]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007fe2:	0092      	lsls	r2, r2, #2
 8007fe4:	d5d5      	bpl.n	8007f92 <ai_platform_network_process+0x476>
 8007fe6:	6898      	ldr	r0, [r3, #8]
 8007fe8:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007fec:	f001 fc38 	bl	8009860 <st_int8_copy>
 8007ff0:	f859 200a 	ldr.w	r2, [r9, sl]
 8007ff4:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007ff8:	440b      	add	r3, r1
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d302      	bcc.n	8008004 <ai_platform_network_process+0x4e8>
 8007ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	f8c8 3004 	str.w	r3, [r8, #4]
 8008008:	e7d9      	b.n	8007fbe <ai_platform_network_process+0x4a2>
 800800a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800800e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8008012:	3401      	adds	r4, #1
 8008014:	b2a4      	uxth	r4, r4
 8008016:	42a3      	cmp	r3, r4
 8008018:	f8ab 4016 	strh.w	r4, [fp, #22]
 800801c:	f63f af7f 	bhi.w	8007f1e <ai_platform_network_process+0x402>
 8008020:	4620      	mov	r0, r4
 8008022:	b005      	add	sp, #20
 8008024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008028:	2a01      	cmp	r2, #1
 800802a:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 800802c:	d029      	beq.n	8008082 <ai_platform_network_process+0x566>
 800802e:	f106 070c 	add.w	r7, r6, #12
 8008032:	e770      	b.n	8007f16 <ai_platform_network_process+0x3fa>
 8008034:	2218      	movs	r2, #24
 8008036:	2113      	movs	r1, #19
 8008038:	f105 0010 	add.w	r0, r5, #16
 800803c:	2400      	movs	r4, #0
 800803e:	f000 f851 	bl	80080e4 <core_set_error>
 8008042:	e711      	b.n	8007e68 <ai_platform_network_process+0x34c>
 8008044:	9d03      	ldr	r5, [sp, #12]
 8008046:	4604      	mov	r4, r0
 8008048:	2217      	movs	r2, #23
 800804a:	2112      	movs	r1, #18
 800804c:	f105 0010 	add.w	r0, r5, #16
 8008050:	f000 f848 	bl	80080e4 <core_set_error>
 8008054:	e708      	b.n	8007e68 <ai_platform_network_process+0x34c>
 8008056:	9d03      	ldr	r5, [sp, #12]
 8008058:	2219      	movs	r2, #25
 800805a:	2112      	movs	r1, #18
 800805c:	2400      	movs	r4, #0
 800805e:	f105 0010 	add.w	r0, r5, #16
 8008062:	f000 f83f 	bl	80080e4 <core_set_error>
 8008066:	e6ff      	b.n	8007e68 <ai_platform_network_process+0x34c>
 8008068:	9d03      	ldr	r5, [sp, #12]
 800806a:	4604      	mov	r4, r0
 800806c:	2221      	movs	r2, #33	@ 0x21
 800806e:	2112      	movs	r1, #18
 8008070:	f105 0010 	add.w	r0, r5, #16
 8008074:	f000 f836 	bl	80080e4 <core_set_error>
 8008078:	e6f6      	b.n	8007e68 <ai_platform_network_process+0x34c>
 800807a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800807e:	82ab      	strh	r3, [r5, #20]
 8008080:	e744      	b.n	8007f0c <ai_platform_network_process+0x3f0>
 8008082:	2700      	movs	r7, #0
 8008084:	e747      	b.n	8007f16 <ai_platform_network_process+0x3fa>
 8008086:	4604      	mov	r4, r0
 8008088:	2217      	movs	r2, #23
 800808a:	2113      	movs	r1, #19
 800808c:	f105 0010 	add.w	r0, r5, #16
 8008090:	f000 f828 	bl	80080e4 <core_set_error>
 8008094:	e6e8      	b.n	8007e68 <ai_platform_network_process+0x34c>
 8008096:	2219      	movs	r2, #25
 8008098:	2113      	movs	r1, #19
 800809a:	f105 0010 	add.w	r0, r5, #16
 800809e:	2400      	movs	r4, #0
 80080a0:	f000 f820 	bl	80080e4 <core_set_error>
 80080a4:	e6e0      	b.n	8007e68 <ai_platform_network_process+0x34c>
 80080a6:	4604      	mov	r4, r0
 80080a8:	2221      	movs	r2, #33	@ 0x21
 80080aa:	2113      	movs	r1, #19
 80080ac:	f105 0010 	add.w	r0, r5, #16
 80080b0:	f000 f818 	bl	80080e4 <core_set_error>
 80080b4:	e6d8      	b.n	8007e68 <ai_platform_network_process+0x34c>
 80080b6:	2217      	movs	r2, #23
 80080b8:	2113      	movs	r1, #19
 80080ba:	f105 0010 	add.w	r0, r5, #16
 80080be:	4654      	mov	r4, sl
 80080c0:	f000 f810 	bl	80080e4 <core_set_error>
 80080c4:	e6d0      	b.n	8007e68 <ai_platform_network_process+0x34c>
 80080c6:	bf00      	nop
 80080c8:	58024000 	.word	0x58024000
 80080cc:	f407a5c2 	.word	0xf407a5c2
 80080d0:	b5e8b5cd 	.word	0xb5e8b5cd

080080d4 <core_init>:
 80080d4:	2001      	movs	r0, #1
 80080d6:	4770      	bx	lr

080080d8 <core_get_error>:
 80080d8:	4603      	mov	r3, r0
 80080da:	2200      	movs	r2, #0
 80080dc:	6800      	ldr	r0, [r0, #0]
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop

080080e4 <core_set_error>:
 80080e4:	4603      	mov	r3, r0
 80080e6:	7800      	ldrb	r0, [r0, #0]
 80080e8:	b108      	cbz	r0, 80080ee <core_set_error+0xa>
 80080ea:	2000      	movs	r0, #0
 80080ec:	4770      	bx	lr
 80080ee:	7019      	strb	r1, [r3, #0]
 80080f0:	2001      	movs	r0, #1
 80080f2:	6819      	ldr	r1, [r3, #0]
 80080f4:	f362 211f 	bfi	r1, r2, #8, #24
 80080f8:	6019      	str	r1, [r3, #0]
 80080fa:	4770      	bx	lr

080080fc <ai_check_custom_types>:
 80080fc:	b082      	sub	sp, #8
 80080fe:	4b12      	ldr	r3, [pc, #72]	@ (8008148 <ai_check_custom_types+0x4c>)
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	b118      	cbz	r0, 800810c <ai_check_custom_types+0x10>
 8008104:	7803      	ldrb	r3, [r0, #0]
 8008106:	2b03      	cmp	r3, #3
 8008108:	d002      	beq.n	8008110 <ai_check_custom_types+0x14>
 800810a:	2000      	movs	r0, #0
 800810c:	b002      	add	sp, #8
 800810e:	4770      	bx	lr
 8008110:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008114:	4293      	cmp	r3, r2
 8008116:	d004      	beq.n	8008122 <ai_check_custom_types+0x26>
 8008118:	2001      	movs	r0, #1
 800811a:	f080 0001 	eor.w	r0, r0, #1
 800811e:	b002      	add	sp, #8
 8008120:	4770      	bx	lr
 8008122:	7842      	ldrb	r2, [r0, #1]
 8008124:	3001      	adds	r0, #1
 8008126:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800812a:	429a      	cmp	r2, r3
 800812c:	d1f4      	bne.n	8008118 <ai_check_custom_types+0x1c>
 800812e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008132:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008136:	429a      	cmp	r2, r3
 8008138:	d1ee      	bne.n	8008118 <ai_check_custom_types+0x1c>
 800813a:	7842      	ldrb	r2, [r0, #1]
 800813c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008140:	429a      	cmp	r2, r3
 8008142:	d1e9      	bne.n	8008118 <ai_check_custom_types+0x1c>
 8008144:	2000      	movs	r0, #0
 8008146:	e7e8      	b.n	800811a <ai_check_custom_types+0x1e>
 8008148:	84048403 	.word	0x84048403

0800814c <ai_layers_init_all>:
 800814c:	2100      	movs	r1, #0
 800814e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008150:	b13b      	cbz	r3, 8008162 <ai_layers_init_all+0x16>
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	3101      	adds	r1, #1
 8008156:	60d8      	str	r0, [r3, #12]
 8008158:	429a      	cmp	r2, r3
 800815a:	4613      	mov	r3, r2
 800815c:	d001      	beq.n	8008162 <ai_layers_init_all+0x16>
 800815e:	2a00      	cmp	r2, #0
 8008160:	d1f6      	bne.n	8008150 <ai_layers_init_all+0x4>
 8008162:	4608      	mov	r0, r1
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop

08008168 <ai_layers_post_init_all>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	2500      	movs	r5, #0
 800816c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800816e:	b16c      	cbz	r4, 800818c <ai_layers_post_init_all+0x24>
 8008170:	6863      	ldr	r3, [r4, #4]
 8008172:	07db      	lsls	r3, r3, #31
 8008174:	d504      	bpl.n	8008180 <ai_layers_post_init_all+0x18>
 8008176:	6a23      	ldr	r3, [r4, #32]
 8008178:	4620      	mov	r0, r4
 800817a:	b10b      	cbz	r3, 8008180 <ai_layers_post_init_all+0x18>
 800817c:	3501      	adds	r5, #1
 800817e:	4798      	blx	r3
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	42a3      	cmp	r3, r4
 8008184:	461c      	mov	r4, r3
 8008186:	d001      	beq.n	800818c <ai_layers_post_init_all+0x24>
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1f0      	bne.n	800816e <ai_layers_post_init_all+0x6>
 800818c:	4628      	mov	r0, r5
 800818e:	bd38      	pop	{r3, r4, r5, pc}

08008190 <ai_layers_forward_all>:
 8008190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008194:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 8008198:	4604      	mov	r4, r0
 800819a:	f1b8 0f00 	cmp.w	r8, #0
 800819e:	d02a      	beq.n	80081f6 <ai_layers_forward_all+0x66>
 80081a0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80081a2:	6381      	str	r1, [r0, #56]	@ 0x38
 80081a4:	b319      	cbz	r1, 80081ee <ai_layers_forward_all+0x5e>
 80081a6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80081a8:	2001      	movs	r0, #1
 80081aa:	47c0      	blx	r8
 80081ac:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80081ae:	b1f6      	cbz	r6, 80081ee <ai_layers_forward_all+0x5e>
 80081b0:	2700      	movs	r7, #0
 80081b2:	4631      	mov	r1, r6
 80081b4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80081b6:	2002      	movs	r0, #2
 80081b8:	47c0      	blx	r8
 80081ba:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80081bc:	4628      	mov	r0, r5
 80081be:	696b      	ldr	r3, [r5, #20]
 80081c0:	4798      	blx	r3
 80081c2:	692e      	ldr	r6, [r5, #16]
 80081c4:	2003      	movs	r0, #3
 80081c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80081c8:	42b5      	cmp	r5, r6
 80081ca:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80081cc:	d007      	beq.n	80081de <ai_layers_forward_all+0x4e>
 80081ce:	47c0      	blx	r8
 80081d0:	3701      	adds	r7, #1
 80081d2:	63a6      	str	r6, [r4, #56]	@ 0x38
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	d1ec      	bne.n	80081b2 <ai_layers_forward_all+0x22>
 80081d8:	4638      	mov	r0, r7
 80081da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081de:	2003      	movs	r0, #3
 80081e0:	3701      	adds	r7, #1
 80081e2:	47c0      	blx	r8
 80081e4:	2300      	movs	r3, #0
 80081e6:	4638      	mov	r0, r7
 80081e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80081ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ee:	2700      	movs	r7, #0
 80081f0:	4638      	mov	r0, r7
 80081f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f6:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 80081f8:	6385      	str	r5, [r0, #56]	@ 0x38
 80081fa:	2d00      	cmp	r5, #0
 80081fc:	d0f7      	beq.n	80081ee <ai_layers_forward_all+0x5e>
 80081fe:	4647      	mov	r7, r8
 8008200:	696b      	ldr	r3, [r5, #20]
 8008202:	4628      	mov	r0, r5
 8008204:	4798      	blx	r3
 8008206:	462b      	mov	r3, r5
 8008208:	692d      	ldr	r5, [r5, #16]
 800820a:	429d      	cmp	r5, r3
 800820c:	d004      	beq.n	8008218 <ai_layers_forward_all+0x88>
 800820e:	3701      	adds	r7, #1
 8008210:	63a5      	str	r5, [r4, #56]	@ 0x38
 8008212:	2d00      	cmp	r5, #0
 8008214:	d1f4      	bne.n	8008200 <ai_layers_forward_all+0x70>
 8008216:	e7df      	b.n	80081d8 <ai_layers_forward_all+0x48>
 8008218:	2300      	movs	r3, #0
 800821a:	3701      	adds	r7, #1
 800821c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800821e:	e7db      	b.n	80081d8 <ai_layers_forward_all+0x48>

08008220 <ai_dict_decompress_f32>:
 8008220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008224:	9d08      	ldr	r5, [sp, #32]
 8008226:	2b04      	cmp	r3, #4
 8008228:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800822c:	d00e      	beq.n	800824c <ai_dict_decompress_f32+0x2c>
 800822e:	2b08      	cmp	r3, #8
 8008230:	d10a      	bne.n	8008248 <ai_dict_decompress_f32+0x28>
 8008232:	42a8      	cmp	r0, r5
 8008234:	d208      	bcs.n	8008248 <ai_dict_decompress_f32+0x28>
 8008236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800823a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f840 3b04 	str.w	r3, [r0], #4
 8008244:	4285      	cmp	r5, r0
 8008246:	d8f6      	bhi.n	8008236 <ai_dict_decompress_f32+0x16>
 8008248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	085e      	lsrs	r6, r3, #1
 8008250:	f003 0701 	and.w	r7, r3, #1
 8008254:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8008258:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 800825c:	42a8      	cmp	r0, r5
 800825e:	d2f3      	bcs.n	8008248 <ai_dict_decompress_f32+0x28>
 8008260:	b33e      	cbz	r6, 80082b2 <ai_dict_decompress_f32+0x92>
 8008262:	f100 0e08 	add.w	lr, r0, #8
 8008266:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 800826a:	eb01 0408 	add.w	r4, r1, r8
 800826e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8008272:	f10e 0e08 	add.w	lr, lr, #8
 8008276:	091b      	lsrs	r3, r3, #4
 8008278:	4564      	cmp	r4, ip
 800827a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f84e 3c10 	str.w	r3, [lr, #-16]
 8008284:	f89c 3000 	ldrb.w	r3, [ip]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8008296:	d1ea      	bne.n	800826e <ai_dict_decompress_f32+0x4e>
 8008298:	4431      	add	r1, r6
 800829a:	4448      	add	r0, r9
 800829c:	2f00      	cmp	r7, #0
 800829e:	d0dd      	beq.n	800825c <ai_dict_decompress_f32+0x3c>
 80082a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a4:	091b      	lsrs	r3, r3, #4
 80082a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f840 3b04 	str.w	r3, [r0], #4
 80082b0:	e7d4      	b.n	800825c <ai_dict_decompress_f32+0x3c>
 80082b2:	2f00      	cmp	r7, #0
 80082b4:	d1f4      	bne.n	80082a0 <ai_dict_decompress_f32+0x80>
 80082b6:	42a8      	cmp	r0, r5
 80082b8:	d3fd      	bcc.n	80082b6 <ai_dict_decompress_f32+0x96>
 80082ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082be:	bf00      	nop

080082c0 <forward_conv2d_if32of32wf32>:
 80082c0:	6982      	ldr	r2, [r0, #24]
 80082c2:	8813      	ldrh	r3, [r2, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 8092 	beq.w	80083ee <forward_conv2d_if32of32wf32+0x12e>
 80082ca:	f8d2 c004 	ldr.w	ip, [r2, #4]
 80082ce:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80082d2:	b102      	cbz	r2, 80082d6 <forward_conv2d_if32of32wf32+0x16>
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	f000 80b3 	beq.w	8008442 <forward_conv2d_if32of32wf32+0x182>
 80082dc:	f8dc 1010 	ldr.w	r1, [ip, #16]
 80082e0:	b101      	cbz	r1, 80082e4 <forward_conv2d_if32of32wf32+0x24>
 80082e2:	6809      	ldr	r1, [r1, #0]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	f000 8084 	beq.w	80083f2 <forward_conv2d_if32of32wf32+0x132>
 80082ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ee:	f8dc 601c 	ldr.w	r6, [ip, #28]
 80082f2:	b0a1      	sub	sp, #132	@ 0x84
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	f000 809d 	beq.w	8008434 <forward_conv2d_if32of32wf32+0x174>
 80082fa:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 80082fe:	6834      	ldr	r4, [r6, #0]
 8008300:	2d01      	cmp	r5, #1
 8008302:	f240 8099 	bls.w	8008438 <forward_conv2d_if32of32wf32+0x178>
 8008306:	6876      	ldr	r6, [r6, #4]
 8008308:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800830c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008310:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008314:	6992      	ldr	r2, [r2, #24]
 8008316:	9713      	str	r7, [sp, #76]	@ 0x4c
 8008318:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800831c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 8008320:	9714      	str	r7, [sp, #80]	@ 0x50
 8008322:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8008326:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800832a:	9715      	str	r7, [sp, #84]	@ 0x54
 800832c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8008330:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8008334:	9716      	str	r7, [sp, #88]	@ 0x58
 8008336:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800833a:	69a2      	ldr	r2, [r4, #24]
 800833c:	9717      	str	r7, [sp, #92]	@ 0x5c
 800833e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8008342:	9718      	str	r7, [sp, #96]	@ 0x60
 8008344:	8d07      	ldrh	r7, [r0, #40]	@ 0x28
 8008346:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 800834a:	9719      	str	r7, [sp, #100]	@ 0x64
 800834c:	8d87      	ldrh	r7, [r0, #44]	@ 0x2c
 800834e:	69c0      	ldr	r0, [r0, #28]
 8008350:	971a      	str	r7, [sp, #104]	@ 0x68
 8008352:	901f      	str	r0, [sp, #124]	@ 0x7c
 8008354:	f8be 0000 	ldrh.w	r0, [lr]
 8008358:	901b      	str	r0, [sp, #108]	@ 0x6c
 800835a:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800835e:	901c      	str	r0, [sp, #112]	@ 0x70
 8008360:	b2a8      	uxth	r0, r5
 8008362:	901d      	str	r0, [sp, #116]	@ 0x74
 8008364:	b2a0      	uxth	r0, r4
 8008366:	901e      	str	r0, [sp, #120]	@ 0x78
 8008368:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800836c:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8008370:	b10e      	cbz	r6, 8008376 <forward_conv2d_if32of32wf32+0xb6>
 8008372:	69b0      	ldr	r0, [r6, #24]
 8008374:	6886      	ldr	r6, [r0, #8]
 8008376:	b2a4      	uxth	r4, r4
 8008378:	6989      	ldr	r1, [r1, #24]
 800837a:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 800837e:	b2ad      	uxth	r5, r5
 8008380:	3c01      	subs	r4, #1
 8008382:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8008386:	3d01      	subs	r5, #1
 8008388:	6811      	ldr	r1, [r2, #0]
 800838a:	fb00 8404 	mla	r4, r0, r4, r8
 800838e:	1e78      	subs	r0, r7, #1
 8008390:	fb00 7505 	mla	r5, r0, r5, r7
 8008394:	f3c1 4043 	ubfx	r0, r1, #17, #4
 8008398:	2804      	cmp	r0, #4
 800839a:	d02d      	beq.n	80083f8 <forward_conv2d_if32of32wf32+0x138>
 800839c:	2808      	cmp	r0, #8
 800839e:	d02b      	beq.n	80083f8 <forward_conv2d_if32of32wf32+0x138>
 80083a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083a2:	464a      	mov	r2, r9
 80083a4:	940c      	str	r4, [sp, #48]	@ 0x30
 80083a6:	4651      	mov	r1, sl
 80083a8:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 80083aa:	4658      	mov	r0, fp
 80083ac:	9706      	str	r7, [sp, #24]
 80083ae:	940f      	str	r4, [sp, #60]	@ 0x3c
 80083b0:	e9cd 530d 	strd	r5, r3, [sp, #52]	@ 0x34
 80083b4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80083b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80083bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80083be:	9309      	str	r3, [sp, #36]	@ 0x24
 80083c0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80083c2:	e9cd 8307 	strd	r8, r3, [sp, #28]
 80083c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083cc:	9304      	str	r3, [sp, #16]
 80083ce:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80083e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80083e2:	4633      	mov	r3, r6
 80083e4:	f000 ffb4 	bl	8009350 <forward_lite_conv2d_if32of32wf32>
 80083e8:	b021      	add	sp, #132	@ 0x84
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	deff      	udf	#255	@ 0xff
 80083f2:	2300      	movs	r3, #0
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	deff      	udf	#255	@ 0xff
 80083f8:	68d2      	ldr	r2, [r2, #12]
 80083fa:	2a00      	cmp	r2, #0
 80083fc:	d0d0      	beq.n	80083a0 <forward_conv2d_if32of32wf32+0xe0>
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d022      	beq.n	8008448 <forward_conv2d_if32of32wf32+0x188>
 8008402:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8008406:	b1cb      	cbz	r3, 800843c <forward_conv2d_if32of32wf32+0x17c>
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	b1bb      	cbz	r3, 800843c <forward_conv2d_if32of32wf32+0x17c>
 800840c:	f8d3 c018 	ldr.w	ip, [r3, #24]
 8008410:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8008414:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8008418:	410b      	asrs	r3, r1
 800841a:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 800841e:	b29b      	uxth	r3, r3
 8008420:	9101      	str	r1, [sp, #4]
 8008422:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008424:	9100      	str	r1, [sp, #0]
 8008426:	4649      	mov	r1, r9
 8008428:	2800      	cmp	r0, #0
 800842a:	bf18      	it	ne
 800842c:	4681      	movne	r9, r0
 800842e:	f7ff fef7 	bl	8008220 <ai_dict_decompress_f32>
 8008432:	e7b5      	b.n	80083a0 <forward_conv2d_if32of32wf32+0xe0>
 8008434:	4634      	mov	r4, r6
 8008436:	e767      	b.n	8008308 <forward_conv2d_if32of32wf32+0x48>
 8008438:	2600      	movs	r6, #0
 800843a:	e765      	b.n	8008308 <forward_conv2d_if32of32wf32+0x48>
 800843c:	2300      	movs	r3, #0
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	deff      	udf	#255	@ 0xff
 8008442:	2300      	movs	r3, #0
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	deff      	udf	#255	@ 0xff
 8008448:	2300      	movs	r3, #0
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	deff      	udf	#255	@ 0xff
 800844e:	bf00      	nop

08008450 <forward_dense>:
 8008450:	6983      	ldr	r3, [r0, #24]
 8008452:	881a      	ldrh	r2, [r3, #0]
 8008454:	2a00      	cmp	r2, #0
 8008456:	f000 80f0 	beq.w	800863a <forward_dense+0x1ea>
 800845a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845e:	ed2d 8b02 	vpush	{d8}
 8008462:	6858      	ldr	r0, [r3, #4]
 8008464:	b09b      	sub	sp, #108	@ 0x6c
 8008466:	6845      	ldr	r5, [r0, #4]
 8008468:	b105      	cbz	r5, 800846c <forward_dense+0x1c>
 800846a:	682d      	ldr	r5, [r5, #0]
 800846c:	2a01      	cmp	r2, #1
 800846e:	f000 840a 	beq.w	8008c86 <forward_dense+0x836>
 8008472:	6906      	ldr	r6, [r0, #16]
 8008474:	b106      	cbz	r6, 8008478 <forward_dense+0x28>
 8008476:	6836      	ldr	r6, [r6, #0]
 8008478:	2a02      	cmp	r2, #2
 800847a:	f000 80e0 	beq.w	800863e <forward_dense+0x1ee>
 800847e:	69c3      	ldr	r3, [r0, #28]
 8008480:	930d      	str	r3, [sp, #52]	@ 0x34
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 83f1 	beq.w	8008c6a <forward_dense+0x81a>
 8008488:	4619      	mov	r1, r3
 800848a:	8b03      	ldrh	r3, [r0, #24]
 800848c:	6809      	ldr	r1, [r1, #0]
 800848e:	2b01      	cmp	r3, #1
 8008490:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008492:	f240 83ec 	bls.w	8008c6e <forward_dense+0x81e>
 8008496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	930d      	str	r3, [sp, #52]	@ 0x34
 800849c:	460b      	mov	r3, r1
 800849e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80084a2:	2a03      	cmp	r2, #3
 80084a4:	68eb      	ldr	r3, [r5, #12]
 80084a6:	68f7      	ldr	r7, [r6, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	687c      	ldr	r4, [r7, #4]
 80084ac:	9317      	str	r3, [sp, #92]	@ 0x5c
 80084ae:	f8d8 3000 	ldr.w	r3, [r8]
 80084b2:	4621      	mov	r1, r4
 80084b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80084b6:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80084ba:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 80084be:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80084c2:	fb01 f404 	mul.w	r4, r1, r4
 80084c6:	fa4e f10c 	asr.w	r1, lr, ip
 80084ca:	9116      	str	r1, [sp, #88]	@ 0x58
 80084cc:	f000 83d8 	beq.w	8008c80 <forward_dense+0x830>
 80084d0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80084d2:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	f000 83c2 	beq.w	8008c60 <forward_dense+0x810>
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	2a00      	cmp	r2, #0
 80084e0:	f000 83be 	beq.w	8008c60 <forward_dense+0x810>
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80084ea:	f000 83a8 	beq.w	8008c3e <forward_dense+0x7ee>
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	f000 83a5 	beq.w	8008c3e <forward_dense+0x7ee>
 80084f4:	f04f 0a00 	mov.w	sl, #0
 80084f8:	69ab      	ldr	r3, [r5, #24]
 80084fa:	fb07 f404 	mul.w	r4, r7, r4
 80084fe:	69b2      	ldr	r2, [r6, #24]
 8008500:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8008504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008506:	6892      	ldr	r2, [r2, #8]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800850e:	9206      	str	r2, [sp, #24]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	428a      	cmp	r2, r1
 8008514:	9110      	str	r1, [sp, #64]	@ 0x40
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800851a:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800851e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008522:	900e      	str	r0, [sp, #56]	@ 0x38
 8008524:	9303      	str	r3, [sp, #12]
 8008526:	f080 8380 	bcs.w	8008c2a <forward_dense+0x7da>
 800852a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800852c:	4654      	mov	r4, sl
 800852e:	4bb9      	ldr	r3, [pc, #740]	@ (8008814 <forward_dense+0x3c4>)
 8008530:	46ca      	mov	sl, r9
 8008532:	08d0      	lsrs	r0, r2, #3
 8008534:	ed9f 8ab8 	vldr	s16, [pc, #736]	@ 8008818 <forward_dense+0x3c8>
 8008538:	4413      	add	r3, r2
 800853a:	9009      	str	r0, [sp, #36]	@ 0x24
 800853c:	0099      	lsls	r1, r3, #2
 800853e:	f022 0301 	bic.w	r3, r2, #1
 8008542:	f002 0201 	and.w	r2, r2, #1
 8008546:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800854a:	9118      	str	r1, [sp, #96]	@ 0x60
 800854c:	920a      	str	r2, [sp, #40]	@ 0x28
 800854e:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 8008552:	9305      	str	r3, [sp, #20]
 8008554:	f101 0320 	add.w	r3, r1, #32
 8008558:	9207      	str	r2, [sp, #28]
 800855a:	9311      	str	r3, [sp, #68]	@ 0x44
 800855c:	444b      	add	r3, r9
 800855e:	469b      	mov	fp, r3
 8008560:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008562:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800856a:	b10b      	cbz	r3, 8008570 <forward_dense+0x120>
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	2c00      	cmp	r4, #0
 8008572:	f000 834b 	beq.w	8008c0c <forward_dense+0x7bc>
 8008576:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8008578:	2904      	cmp	r1, #4
 800857a:	f000 826a 	beq.w	8008a52 <forward_dense+0x602>
 800857e:	9903      	ldr	r1, [sp, #12]
 8008580:	9806      	ldr	r0, [sp, #24]
 8008582:	4281      	cmp	r1, r0
 8008584:	f240 8356 	bls.w	8008c34 <forward_dense+0x7e4>
 8008588:	4686      	mov	lr, r0
 800858a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800858c:	eb00 090a 	add.w	r9, r0, sl
 8008590:	0941      	lsrs	r1, r0, #5
 8008592:	f10a 0004 	add.w	r0, sl, #4
 8008596:	f8cd 9020 	str.w	r9, [sp, #32]
 800859a:	9012      	str	r0, [sp, #72]	@ 0x48
 800859c:	1c48      	adds	r0, r1, #1
 800859e:	00c9      	lsls	r1, r1, #3
 80085a0:	3110      	adds	r1, #16
 80085a2:	9115      	str	r1, [sp, #84]	@ 0x54
 80085a4:	00c1      	lsls	r1, r0, #3
 80085a6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80085a8:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 80085ac:	9114      	str	r1, [sp, #80]	@ 0x50
 80085ae:	f1a9 0104 	sub.w	r1, r9, #4
 80085b2:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 80085b6:	910c      	str	r1, [sp, #48]	@ 0x30
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8128 	beq.w	800880e <forward_dense+0x3be>
 80085be:	ecb3 5a01 	vldmia	r3!, {s10}
 80085c2:	f1b9 0f07 	cmp.w	r9, #7
 80085c6:	d83d      	bhi.n	8008644 <forward_dense+0x1f4>
 80085c8:	45da      	cmp	sl, fp
 80085ca:	d211      	bcs.n	80085f0 <forward_dense+0x1a0>
 80085cc:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8008818 <forward_dense+0x3c8>
 80085d0:	4650      	mov	r0, sl
 80085d2:	4615      	mov	r5, r2
 80085d4:	f815 1b01 	ldrb.w	r1, [r5], #1
 80085d8:	ecb0 7a01 	vldmia	r0!, {s14}
 80085dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80085e0:	4558      	cmp	r0, fp
 80085e2:	edd1 6a00 	vldr	s13, [r1]
 80085e6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80085ea:	d3f3      	bcc.n	80085d4 <forward_dense+0x184>
 80085ec:	ee35 5a27 	vadd.f32	s10, s10, s15
 80085f0:	9904      	ldr	r1, [sp, #16]
 80085f2:	ecae 5a01 	vstmia	lr!, {s10}
 80085f6:	440a      	add	r2, r1
 80085f8:	9903      	ldr	r1, [sp, #12]
 80085fa:	458e      	cmp	lr, r1
 80085fc:	d3dc      	bcc.n	80085b8 <forward_dense+0x168>
 80085fe:	9a06      	ldr	r2, [sp, #24]
 8008600:	1a8b      	subs	r3, r1, r2
 8008602:	3b01      	subs	r3, #1
 8008604:	f023 0303 	bic.w	r3, r3, #3
 8008608:	3304      	adds	r3, #4
 800860a:	18d3      	adds	r3, r2, r3
 800860c:	4619      	mov	r1, r3
 800860e:	9306      	str	r3, [sp, #24]
 8008610:	9b03      	ldr	r3, [sp, #12]
 8008612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008614:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008616:	4413      	add	r3, r2
 8008618:	9a07      	ldr	r2, [sp, #28]
 800861a:	4281      	cmp	r1, r0
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008620:	441a      	add	r2, r3
 8008622:	449b      	add	fp, r3
 8008624:	9207      	str	r2, [sp, #28]
 8008626:	9a05      	ldr	r2, [sp, #20]
 8008628:	441a      	add	r2, r3
 800862a:	9205      	str	r2, [sp, #20]
 800862c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800862e:	4692      	mov	sl, r2
 8008630:	f080 82fb 	bcs.w	8008c2a <forward_dense+0x7da>
 8008634:	441a      	add	r2, r3
 8008636:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008638:	e793      	b.n	8008562 <forward_dense+0x112>
 800863a:	6853      	ldr	r3, [r2, #4]
 800863c:	deff      	udf	#255	@ 0xff
 800863e:	2300      	movs	r3, #0
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	deff      	udf	#255	@ 0xff
 8008644:	f002 0103 	and.w	r1, r2, #3
 8008648:	2902      	cmp	r1, #2
 800864a:	f000 81e6 	beq.w	8008a1a <forward_dense+0x5ca>
 800864e:	2903      	cmp	r1, #3
 8008650:	f000 80e4 	beq.w	800881c <forward_dense+0x3cc>
 8008654:	2901      	cmp	r1, #1
 8008656:	f000 81ef 	beq.w	8008a38 <forward_dense+0x5e8>
 800865a:	9908      	ldr	r1, [sp, #32]
 800865c:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8008818 <forward_dense+0x3c8>
 8008660:	458a      	cmp	sl, r1
 8008662:	f200 82e9 	bhi.w	8008c38 <forward_dense+0x7e8>
 8008666:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8008668:	f102 0108 	add.w	r1, r2, #8
 800866c:	f10a 0020 	add.w	r0, sl, #32
 8008670:	18ae      	adds	r6, r5, r2
 8008672:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8008676:	3108      	adds	r1, #8
 8008678:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 800867c:	3020      	adds	r0, #32
 800867e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008682:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 8008686:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 800868a:	edd5 7a00 	vldr	s15, [r5]
 800868e:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8008692:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008696:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 800869a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800869e:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 80086a2:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 80086a6:	edd5 2a00 	vldr	s5, [r5]
 80086aa:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80086ae:	eee2 7a83 	vfma.f32	s15, s5, s6
 80086b2:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 80086b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086ba:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 80086be:	ed95 3a00 	vldr	s6, [r5]
 80086c2:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80086c6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80086ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086ce:	edd5 3a00 	vldr	s7, [r5]
 80086d2:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80086d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086da:	eee3 7a84 	vfma.f32	s15, s7, s8
 80086de:	ed95 4a00 	vldr	s8, [r5]
 80086e2:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80086e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086ea:	eee4 7a24 	vfma.f32	s15, s8, s9
 80086ee:	edd5 4a00 	vldr	s9, [r5]
 80086f2:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80086f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086fa:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80086fe:	edd5 5a00 	vldr	s11, [r5]
 8008702:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8008706:	428e      	cmp	r6, r1
 8008708:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800870c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008710:	ed95 6a00 	vldr	s12, [r5]
 8008714:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800871c:	d1a9      	bne.n	8008672 <forward_dense+0x222>
 800871e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008720:	1850      	adds	r0, r2, r1
 8008722:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008724:	4559      	cmp	r1, fp
 8008726:	d26f      	bcs.n	8008808 <forward_dense+0x3b8>
 8008728:	7805      	ldrb	r5, [r0, #0]
 800872a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800872e:	edd5 7a00 	vldr	s15, [r5]
 8008732:	460d      	mov	r5, r1
 8008734:	ecf5 6a01 	vldmia	r5!, {s13}
 8008738:	45ab      	cmp	fp, r5
 800873a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800873e:	d963      	bls.n	8008808 <forward_dense+0x3b8>
 8008740:	7845      	ldrb	r5, [r0, #1]
 8008742:	edd1 6a01 	vldr	s13, [r1, #4]
 8008746:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800874a:	edd5 7a00 	vldr	s15, [r5]
 800874e:	f101 0508 	add.w	r5, r1, #8
 8008752:	45ab      	cmp	fp, r5
 8008754:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008758:	d956      	bls.n	8008808 <forward_dense+0x3b8>
 800875a:	7885      	ldrb	r5, [r0, #2]
 800875c:	edd1 6a02 	vldr	s13, [r1, #8]
 8008760:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008764:	edd5 7a00 	vldr	s15, [r5]
 8008768:	f101 050c 	add.w	r5, r1, #12
 800876c:	45ab      	cmp	fp, r5
 800876e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008772:	d949      	bls.n	8008808 <forward_dense+0x3b8>
 8008774:	78c5      	ldrb	r5, [r0, #3]
 8008776:	edd1 6a03 	vldr	s13, [r1, #12]
 800877a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800877e:	edd5 7a00 	vldr	s15, [r5]
 8008782:	f101 0510 	add.w	r5, r1, #16
 8008786:	45ab      	cmp	fp, r5
 8008788:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800878c:	d93c      	bls.n	8008808 <forward_dense+0x3b8>
 800878e:	7905      	ldrb	r5, [r0, #4]
 8008790:	edd1 6a04 	vldr	s13, [r1, #16]
 8008794:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008798:	edd5 7a00 	vldr	s15, [r5]
 800879c:	f101 0514 	add.w	r5, r1, #20
 80087a0:	45ab      	cmp	fp, r5
 80087a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087a6:	d92f      	bls.n	8008808 <forward_dense+0x3b8>
 80087a8:	7945      	ldrb	r5, [r0, #5]
 80087aa:	edd1 6a05 	vldr	s13, [r1, #20]
 80087ae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087b2:	edd5 7a00 	vldr	s15, [r5]
 80087b6:	f101 0518 	add.w	r5, r1, #24
 80087ba:	45ab      	cmp	fp, r5
 80087bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087c0:	d922      	bls.n	8008808 <forward_dense+0x3b8>
 80087c2:	7985      	ldrb	r5, [r0, #6]
 80087c4:	edd1 6a06 	vldr	s13, [r1, #24]
 80087c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087cc:	edd5 7a00 	vldr	s15, [r5]
 80087d0:	f101 051c 	add.w	r5, r1, #28
 80087d4:	45ab      	cmp	fp, r5
 80087d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087da:	d915      	bls.n	8008808 <forward_dense+0x3b8>
 80087dc:	79c5      	ldrb	r5, [r0, #7]
 80087de:	edd1 6a07 	vldr	s13, [r1, #28]
 80087e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087e6:	edd5 7a00 	vldr	s15, [r5]
 80087ea:	f101 0520 	add.w	r5, r1, #32
 80087ee:	45ab      	cmp	fp, r5
 80087f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087f4:	d908      	bls.n	8008808 <forward_dense+0x3b8>
 80087f6:	edd1 7a08 	vldr	s15, [r1, #32]
 80087fa:	7a01      	ldrb	r1, [r0, #8]
 80087fc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008800:	edd1 6a00 	vldr	s13, [r1]
 8008804:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008808:	ee35 5a07 	vadd.f32	s10, s10, s14
 800880c:	e6f0      	b.n	80085f0 <forward_dense+0x1a0>
 800880e:	ed9f 5a02 	vldr	s10, [pc, #8]	@ 8008818 <forward_dense+0x3c8>
 8008812:	e6d6      	b.n	80085c2 <forward_dense+0x172>
 8008814:	3ffffff8 	.word	0x3ffffff8
 8008818:	00000000 	.word	0x00000000
 800881c:	eeb0 7a48 	vmov.f32	s14, s16
 8008820:	4650      	mov	r0, sl
 8008822:	4611      	mov	r1, r2
 8008824:	468c      	mov	ip, r1
 8008826:	4606      	mov	r6, r0
 8008828:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800882c:	ecf6 7a01 	vldmia	r6!, {s15}
 8008830:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008834:	edd5 6a00 	vldr	s13, [r5]
 8008838:	9d08      	ldr	r5, [sp, #32]
 800883a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800883e:	42ae      	cmp	r6, r5
 8008840:	d866      	bhi.n	8008910 <forward_dense+0x4c0>
 8008842:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008844:	f101 0711 	add.w	r7, r1, #17
 8008848:	3109      	adds	r1, #9
 800884a:	eba5 0800 	sub.w	r8, r5, r0
 800884e:	3024      	adds	r0, #36	@ 0x24
 8008850:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8008854:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8008858:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800885c:	3108      	adds	r1, #8
 800885e:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 8008862:	3020      	adds	r0, #32
 8008864:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008868:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 800886c:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 8008870:	edd5 7a00 	vldr	s15, [r5]
 8008874:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8008878:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800887c:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 8008880:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008884:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 8008888:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 800888c:	edd5 2a00 	vldr	s5, [r5]
 8008890:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8008894:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008898:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 800889c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088a0:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 80088a4:	ed95 3a00 	vldr	s6, [r5]
 80088a8:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80088ac:	eee3 7a23 	vfma.f32	s15, s6, s7
 80088b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088b4:	edd5 3a00 	vldr	s7, [r5]
 80088b8:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80088bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088c0:	eee3 7a84 	vfma.f32	s15, s7, s8
 80088c4:	ed95 4a00 	vldr	s8, [r5]
 80088c8:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80088cc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80088d4:	edd5 4a00 	vldr	s9, [r5]
 80088d8:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80088dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088e0:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80088e4:	edd5 5a00 	vldr	s11, [r5]
 80088e8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80088ec:	428f      	cmp	r7, r1
 80088ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088f2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80088f6:	ed95 6a00 	vldr	s12, [r5]
 80088fa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008902:	d1a9      	bne.n	8008858 <forward_dense+0x408>
 8008904:	f108 0801 	add.w	r8, r8, #1
 8008908:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800890c:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8008910:	455e      	cmp	r6, fp
 8008912:	f4bf af79 	bcs.w	8008808 <forward_dense+0x3b8>
 8008916:	f89c 1000 	ldrb.w	r1, [ip]
 800891a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800891e:	edd1 7a00 	vldr	s15, [r1]
 8008922:	4631      	mov	r1, r6
 8008924:	ecf1 6a01 	vldmia	r1!, {s13}
 8008928:	458b      	cmp	fp, r1
 800892a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800892e:	f67f af6b 	bls.w	8008808 <forward_dense+0x3b8>
 8008932:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8008936:	edd6 6a01 	vldr	s13, [r6, #4]
 800893a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800893e:	edd1 7a00 	vldr	s15, [r1]
 8008942:	f106 0108 	add.w	r1, r6, #8
 8008946:	458b      	cmp	fp, r1
 8008948:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800894c:	f67f af5c 	bls.w	8008808 <forward_dense+0x3b8>
 8008950:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8008954:	edd6 6a02 	vldr	s13, [r6, #8]
 8008958:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800895c:	edd1 7a00 	vldr	s15, [r1]
 8008960:	f106 010c 	add.w	r1, r6, #12
 8008964:	458b      	cmp	fp, r1
 8008966:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800896a:	f67f af4d 	bls.w	8008808 <forward_dense+0x3b8>
 800896e:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8008972:	edd6 6a03 	vldr	s13, [r6, #12]
 8008976:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800897a:	edd1 7a00 	vldr	s15, [r1]
 800897e:	f106 0110 	add.w	r1, r6, #16
 8008982:	458b      	cmp	fp, r1
 8008984:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008988:	f67f af3e 	bls.w	8008808 <forward_dense+0x3b8>
 800898c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8008990:	edd6 6a04 	vldr	s13, [r6, #16]
 8008994:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008998:	edd1 7a00 	vldr	s15, [r1]
 800899c:	f106 0114 	add.w	r1, r6, #20
 80089a0:	458b      	cmp	fp, r1
 80089a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089a6:	f67f af2f 	bls.w	8008808 <forward_dense+0x3b8>
 80089aa:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80089ae:	edd6 6a05 	vldr	s13, [r6, #20]
 80089b2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089b6:	edd1 7a00 	vldr	s15, [r1]
 80089ba:	f106 0118 	add.w	r1, r6, #24
 80089be:	458b      	cmp	fp, r1
 80089c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089c4:	f67f af20 	bls.w	8008808 <forward_dense+0x3b8>
 80089c8:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80089cc:	edd6 6a06 	vldr	s13, [r6, #24]
 80089d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089d4:	edd1 7a00 	vldr	s15, [r1]
 80089d8:	f106 011c 	add.w	r1, r6, #28
 80089dc:	458b      	cmp	fp, r1
 80089de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089e2:	f67f af11 	bls.w	8008808 <forward_dense+0x3b8>
 80089e6:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80089ea:	edd6 6a07 	vldr	s13, [r6, #28]
 80089ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089f2:	edd1 7a00 	vldr	s15, [r1]
 80089f6:	f106 0120 	add.w	r1, r6, #32
 80089fa:	458b      	cmp	fp, r1
 80089fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a00:	f67f af02 	bls.w	8008808 <forward_dense+0x3b8>
 8008a04:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8008a08:	edd6 7a08 	vldr	s15, [r6, #32]
 8008a0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008a10:	edd1 6a00 	vldr	s13, [r1]
 8008a14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a18:	e6f6      	b.n	8008808 <forward_dense+0x3b8>
 8008a1a:	eeb0 7a48 	vmov.f32	s14, s16
 8008a1e:	4650      	mov	r0, sl
 8008a20:	4611      	mov	r1, r2
 8008a22:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008a26:	ecf0 7a01 	vldmia	r0!, {s15}
 8008a2a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a2e:	edd5 6a00 	vldr	s13, [r5]
 8008a32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a36:	e6f5      	b.n	8008824 <forward_dense+0x3d4>
 8008a38:	4611      	mov	r1, r2
 8008a3a:	edda 7a00 	vldr	s15, [sl]
 8008a3e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8008a40:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008a44:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a48:	ed95 7a00 	vldr	s14, [r5]
 8008a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008a50:	e7e7      	b.n	8008a22 <forward_dense+0x5d2>
 8008a52:	9803      	ldr	r0, [sp, #12]
 8008a54:	9906      	ldr	r1, [sp, #24]
 8008a56:	4288      	cmp	r0, r1
 8008a58:	f67f adda 	bls.w	8008610 <forward_dense+0x1c0>
 8008a5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a5e:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008a62:	468b      	mov	fp, r1
 8008a64:	f100 0c01 	add.w	ip, r0, #1
 8008a68:	9805      	ldr	r0, [sp, #20]
 8008a6a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8008a6e:	3801      	subs	r0, #1
 8008a70:	9008      	str	r0, [sp, #32]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80bf 	beq.w	8008bf6 <forward_dense+0x7a6>
 8008a78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a7a:	ecf3 2a01 	vldmia	r3!, {s5}
 8008a7e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 8008818 <forward_dense+0x3c8>
 8008a82:	2900      	cmp	r1, #0
 8008a84:	f000 80bf 	beq.w	8008c06 <forward_dense+0x7b6>
 8008a88:	1d10      	adds	r0, r2, #4
 8008a8a:	f10a 0120 	add.w	r1, sl, #32
 8008a8e:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8008a92:	3004      	adds	r0, #4
 8008a94:	ed11 2a07 	vldr	s4, [r1, #-28]	@ 0xffffffe4
 8008a98:	3120      	adds	r1, #32
 8008a9a:	f007 0e0f 	and.w	lr, r7, #15
 8008a9e:	093f      	lsrs	r7, r7, #4
 8008aa0:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8008aa4:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8008aa8:	ed11 4a10 	vldr	s8, [r1, #-64]	@ 0xffffffc0
 8008aac:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008ab0:	ed51 3a0e 	vldr	s7, [r1, #-56]	@ 0xffffffc8
 8008ab4:	edde 7a00 	vldr	s15, [lr]
 8008ab8:	ed97 3a00 	vldr	s6, [r7]
 8008abc:	0937      	lsrs	r7, r6, #4
 8008abe:	ee67 7a82 	vmul.f32	s15, s15, s4
 8008ac2:	f006 060f 	and.w	r6, r6, #15
 8008ac6:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008aca:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8008ace:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008ad2:	ed11 5a0d 	vldr	s10, [r1, #-52]	@ 0xffffffcc
 8008ad6:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008ada:	ed97 3a00 	vldr	s6, [r7]
 8008ade:	ed96 4a00 	vldr	s8, [r6]
 8008ae2:	092e      	lsrs	r6, r5, #4
 8008ae4:	ed51 4a0c 	vldr	s9, [r1, #-48]	@ 0xffffffd0
 8008ae8:	f005 050f 	and.w	r5, r5, #15
 8008aec:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008af0:	ed11 6a0b 	vldr	s12, [r1, #-44]	@ 0xffffffd4
 8008af4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008af8:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 8008afc:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8008b00:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008b04:	eee4 7a05 	vfma.f32	s15, s8, s10
 8008b08:	ed96 4a00 	vldr	s8, [r6]
 8008b0c:	ed95 5a00 	vldr	s10, [r5]
 8008b10:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8008b14:	4560      	cmp	r0, ip
 8008b16:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8008b1a:	f005 050f 	and.w	r5, r5, #15
 8008b1e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008b22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008b26:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008b2a:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008b2e:	ed96 5a00 	vldr	s10, [r6]
 8008b32:	ed95 6a00 	vldr	s12, [r5]
 8008b36:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008b3a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b42:	d1a4      	bne.n	8008a8e <forward_dense+0x63e>
 8008b44:	f1ac 0804 	sub.w	r8, ip, #4
 8008b48:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008b4c:	9905      	ldr	r1, [sp, #20]
 8008b4e:	458e      	cmp	lr, r1
 8008b50:	d229      	bcs.n	8008ba6 <forward_dense+0x756>
 8008b52:	9908      	ldr	r1, [sp, #32]
 8008b54:	f10e 0008 	add.w	r0, lr, #8
 8008b58:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8008b5c:	eba1 070e 	sub.w	r7, r1, lr
 8008b60:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8008b64:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8008b68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b6c:	3008      	adds	r0, #8
 8008b6e:	ed50 5a03 	vldr	s11, [r0, #-12]
 8008b72:	f001 050f 	and.w	r5, r1, #15
 8008b76:	0909      	lsrs	r1, r1, #4
 8008b78:	ed50 6a04 	vldr	s13, [r0, #-16]
 8008b7c:	42b7      	cmp	r7, r6
 8008b7e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008b82:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008b86:	edd5 7a00 	vldr	s15, [r5]
 8008b8a:	ed91 6a00 	vldr	s12, [r1]
 8008b8e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008b92:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b9a:	d1e5      	bne.n	8008b68 <forward_dense+0x718>
 8008b9c:	f109 0901 	add.w	r9, r9, #1
 8008ba0:	44c8      	add	r8, r9
 8008ba2:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8008ba6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ba8:	b1c1      	cbz	r1, 8008bdc <forward_dense+0x78c>
 8008baa:	f898 1000 	ldrb.w	r1, [r8]
 8008bae:	edde 7a00 	vldr	s15, [lr]
 8008bb2:	0909      	lsrs	r1, r1, #4
 8008bb4:	9804      	ldr	r0, [sp, #16]
 8008bb6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008bba:	4402      	add	r2, r0
 8008bbc:	4484      	add	ip, r0
 8008bbe:	edd1 6a00 	vldr	s13, [r1]
 8008bc2:	9903      	ldr	r1, [sp, #12]
 8008bc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008bc8:	ee72 2a87 	vadd.f32	s5, s5, s14
 8008bcc:	eceb 2a01 	vstmia	fp!, {s5}
 8008bd0:	4559      	cmp	r1, fp
 8008bd2:	f63f af4e 	bhi.w	8008a72 <forward_dense+0x622>
 8008bd6:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8008bda:	e510      	b.n	80085fe <forward_dense+0x1ae>
 8008bdc:	9904      	ldr	r1, [sp, #16]
 8008bde:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008be2:	440a      	add	r2, r1
 8008be4:	448c      	add	ip, r1
 8008be6:	9903      	ldr	r1, [sp, #12]
 8008be8:	ecab 7a01 	vstmia	fp!, {s14}
 8008bec:	458b      	cmp	fp, r1
 8008bee:	d2f2      	bcs.n	8008bd6 <forward_dense+0x786>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f47f af41 	bne.w	8008a78 <forward_dense+0x628>
 8008bf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bf8:	eef0 2a48 	vmov.f32	s5, s16
 8008bfc:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8008c8c <forward_dense+0x83c>
 8008c00:	2900      	cmp	r1, #0
 8008c02:	f47f af41 	bne.w	8008a88 <forward_dense+0x638>
 8008c06:	46d6      	mov	lr, sl
 8008c08:	4690      	mov	r8, r2
 8008c0a:	e79f      	b.n	8008b4c <forward_dense+0x6fc>
 8008c0c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c0e:	4651      	mov	r1, sl
 8008c10:	9d06      	ldr	r5, [sp, #24]
 8008c12:	9001      	str	r0, [sp, #4]
 8008c14:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008c16:	9000      	str	r0, [sp, #0]
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f000 fcf9 	bl	8009610 <forward_lite_dense_if32of32wf32>
 8008c1e:	462b      	mov	r3, r5
 8008c20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c22:	4413      	add	r3, r2
 8008c24:	4619      	mov	r1, r3
 8008c26:	9306      	str	r3, [sp, #24]
 8008c28:	e4f2      	b.n	8008610 <forward_dense+0x1c0>
 8008c2a:	b01b      	add	sp, #108	@ 0x6c
 8008c2c:	ecbd 8b02 	vpop	{d8}
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	4601      	mov	r1, r0
 8008c36:	e4eb      	b.n	8008610 <forward_dense+0x1c0>
 8008c38:	4651      	mov	r1, sl
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	e572      	b.n	8008724 <forward_dense+0x2d4>
 8008c3e:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8008c42:	f1b9 0f00 	cmp.w	r9, #0
 8008c46:	d016      	beq.n	8008c76 <forward_dense+0x826>
 8008c48:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008c4c:	f000 fefc 	bl	8009a48 <ai_array_get_byte_size>
 8008c50:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8008c54:	4602      	mov	r2, r0
 8008c56:	4640      	mov	r0, r8
 8008c58:	4651      	mov	r1, sl
 8008c5a:	f000 fe01 	bl	8009860 <st_int8_copy>
 8008c5e:	e44b      	b.n	80084f8 <forward_dense+0xa8>
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d00a      	beq.n	8008c7a <forward_dense+0x82a>
 8008c64:	f04f 0900 	mov.w	r9, #0
 8008c68:	e441      	b.n	80084ee <forward_dense+0x9e>
 8008c6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c6c:	e417      	b.n	800849e <forward_dense+0x4e>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	930d      	str	r3, [sp, #52]	@ 0x34
 8008c72:	460b      	mov	r3, r1
 8008c74:	e413      	b.n	800849e <forward_dense+0x4e>
 8008c76:	46c2      	mov	sl, r8
 8008c78:	e43e      	b.n	80084f8 <forward_dense+0xa8>
 8008c7a:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8008c7e:	e43b      	b.n	80084f8 <forward_dense+0xa8>
 8008c80:	2300      	movs	r3, #0
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	deff      	udf	#255	@ 0xff
 8008c86:	2300      	movs	r3, #0
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	deff      	udf	#255	@ 0xff
 8008c8c:	00000000 	.word	0x00000000

08008c90 <forward_sigmoid>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	ed2d 8b02 	vpush	{d8}
 8008c96:	6982      	ldr	r2, [r0, #24]
 8008c98:	8813      	ldrh	r3, [r2, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d03b      	beq.n	8008d16 <forward_sigmoid+0x86>
 8008c9e:	6852      	ldr	r2, [r2, #4]
 8008ca0:	6854      	ldr	r4, [r2, #4]
 8008ca2:	b104      	cbz	r4, 8008ca6 <forward_sigmoid+0x16>
 8008ca4:	6824      	ldr	r4, [r4, #0]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d034      	beq.n	8008d14 <forward_sigmoid+0x84>
 8008caa:	6915      	ldr	r5, [r2, #16]
 8008cac:	b105      	cbz	r5, 8008cb0 <forward_sigmoid+0x20>
 8008cae:	682d      	ldr	r5, [r5, #0]
 8008cb0:	68a3      	ldr	r3, [r4, #8]
 8008cb2:	0a1b      	lsrs	r3, r3, #8
 8008cb4:	d031      	beq.n	8008d1a <forward_sigmoid+0x8a>
 8008cb6:	68e0      	ldr	r0, [r4, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008cbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cc2:	4298      	cmp	r0, r3
 8008cc4:	fb01 f202 	mul.w	r2, r1, r2
 8008cc8:	d1f9      	bne.n	8008cbe <forward_sigmoid+0x2e>
 8008cca:	69a7      	ldr	r7, [r4, #24]
 8008ccc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008cd0:	69a9      	ldr	r1, [r5, #24]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	688e      	ldr	r6, [r1, #8]
 8008cd8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008cdc:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8008ce0:	42aa      	cmp	r2, r5
 8008ce2:	d814      	bhi.n	8008d0e <forward_sigmoid+0x7e>
 8008ce4:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8008ce8:	3504      	adds	r5, #4
 8008cea:	3604      	adds	r6, #4
 8008cec:	462c      	mov	r4, r5
 8008cee:	ed35 0a01 	vldmdb	r5!, {s0}
 8008cf2:	eeb1 0a40 	vneg.f32	s0, s0
 8008cf6:	3c08      	subs	r4, #8
 8008cf8:	f003 fbe8 	bl	800c4cc <expf>
 8008cfc:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008d00:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8008d04:	ed66 7a01 	vstmdb	r6!, {s15}
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	42a3      	cmp	r3, r4
 8008d0c:	d9ee      	bls.n	8008cec <forward_sigmoid+0x5c>
 8008d0e:	ecbd 8b02 	vpop	{d8}
 8008d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d14:	2300      	movs	r3, #0
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	deff      	udf	#255	@ 0xff
 8008d1a:	69ab      	ldr	r3, [r5, #24]
 8008d1c:	69a7      	ldr	r7, [r4, #24]
 8008d1e:	689e      	ldr	r6, [r3, #8]
 8008d20:	68bd      	ldr	r5, [r7, #8]
 8008d22:	e7df      	b.n	8008ce4 <forward_sigmoid+0x54>

08008d24 <forward_relu>:
 8008d24:	6982      	ldr	r2, [r0, #24]
 8008d26:	8813      	ldrh	r3, [r2, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d05b      	beq.n	8008de4 <forward_relu+0xc0>
 8008d2c:	6851      	ldr	r1, [r2, #4]
 8008d2e:	684a      	ldr	r2, [r1, #4]
 8008d30:	b102      	cbz	r2, 8008d34 <forward_relu+0x10>
 8008d32:	6812      	ldr	r2, [r2, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	f000 8123 	beq.w	8008f80 <forward_relu+0x25c>
 8008d3a:	b470      	push	{r4, r5, r6}
 8008d3c:	690b      	ldr	r3, [r1, #16]
 8008d3e:	b103      	cbz	r3, 8008d42 <forward_relu+0x1e>
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69c6      	ldr	r6, [r0, #28]
 8008d44:	2e00      	cmp	r6, #0
 8008d46:	f000 809e 	beq.w	8008e86 <forward_relu+0x162>
 8008d4a:	6871      	ldr	r1, [r6, #4]
 8008d4c:	6998      	ldr	r0, [r3, #24]
 8008d4e:	2901      	cmp	r1, #1
 8008d50:	f000 80c3 	beq.w	8008eda <forward_relu+0x1b6>
 8008d54:	6893      	ldr	r3, [r2, #8]
 8008d56:	6991      	ldr	r1, [r2, #24]
 8008d58:	0a1b      	lsrs	r3, r3, #8
 8008d5a:	6880      	ldr	r0, [r0, #8]
 8008d5c:	688d      	ldr	r5, [r1, #8]
 8008d5e:	f000 80f2 	beq.w	8008f46 <forward_relu+0x222>
 8008d62:	68d4      	ldr	r4, [r2, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	fb01 f202 	mul.w	r2, r1, r2
 8008d74:	d1f9      	bne.n	8008d6a <forward_relu+0x46>
 8008d76:	68b3      	ldr	r3, [r6, #8]
 8008d78:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d7c:	edd3 6a00 	vldr	s13, [r3]
 8008d80:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008d84:	ed93 6a01 	vldr	s12, [r3, #4]
 8008d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d8c:	d42c      	bmi.n	8008de8 <forward_relu+0xc4>
 8008d8e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008d92:	4413      	add	r3, r2
 8008d94:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8008d98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008d9c:	4295      	cmp	r5, r2
 8008d9e:	d81f      	bhi.n	8008de0 <forward_relu+0xbc>
 8008da0:	3204      	adds	r2, #4
 8008da2:	1d01      	adds	r1, r0, #4
 8008da4:	e00d      	b.n	8008dc2 <forward_relu+0x9e>
 8008da6:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dae:	db03      	blt.n	8008db8 <forward_relu+0x94>
 8008db0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008db4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008db8:	3b08      	subs	r3, #8
 8008dba:	ed61 7a01 	vstmdb	r1!, {s15}
 8008dbe:	429d      	cmp	r5, r3
 8008dc0:	d80e      	bhi.n	8008de0 <forward_relu+0xbc>
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	ed72 7a01 	vldmdb	r2!, {s15}
 8008dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd0:	d9e9      	bls.n	8008da6 <forward_relu+0x82>
 8008dd2:	3b08      	subs	r3, #8
 8008dd4:	eef0 7a47 	vmov.f32	s15, s14
 8008dd8:	429d      	cmp	r5, r3
 8008dda:	ed61 7a01 	vstmdb	r1!, {s15}
 8008dde:	d9f0      	bls.n	8008dc2 <forward_relu+0x9e>
 8008de0:	bc70      	pop	{r4, r5, r6}
 8008de2:	4770      	bx	lr
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	deff      	udf	#255	@ 0xff
 8008de8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008dec:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8008df0:	4411      	add	r1, r2
 8008df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008dfa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008dfe:	d11f      	bne.n	8008e40 <forward_relu+0x11c>
 8008e00:	429d      	cmp	r5, r3
 8008e02:	d8ed      	bhi.n	8008de0 <forward_relu+0xbc>
 8008e04:	1b5d      	subs	r5, r3, r5
 8008e06:	1d1a      	adds	r2, r3, #4
 8008e08:	1d01      	adds	r1, r0, #4
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	f025 0503 	bic.w	r5, r5, #3
 8008e10:	1b5b      	subs	r3, r3, r5
 8008e12:	ed72 7a01 	vldmdb	r2!, {s15}
 8008e16:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e1e:	dc0a      	bgt.n	8008e36 <forward_relu+0x112>
 8008e20:	429a      	cmp	r2, r3
 8008e22:	f841 0d04 	str.w	r0, [r1, #-4]!
 8008e26:	d0db      	beq.n	8008de0 <forward_relu+0xbc>
 8008e28:	ed72 7a01 	vldmdb	r2!, {s15}
 8008e2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e34:	ddf4      	ble.n	8008e20 <forward_relu+0xfc>
 8008e36:	429a      	cmp	r2, r3
 8008e38:	ed61 7a01 	vstmdb	r1!, {s15}
 8008e3c:	d1e9      	bne.n	8008e12 <forward_relu+0xee>
 8008e3e:	e7cf      	b.n	8008de0 <forward_relu+0xbc>
 8008e40:	429d      	cmp	r5, r3
 8008e42:	d8cd      	bhi.n	8008de0 <forward_relu+0xbc>
 8008e44:	1b5d      	subs	r5, r3, r5
 8008e46:	1d1a      	adds	r2, r3, #4
 8008e48:	1d01      	adds	r1, r0, #4
 8008e4a:	f025 0503 	bic.w	r5, r5, #3
 8008e4e:	1b5b      	subs	r3, r3, r5
 8008e50:	ed72 7a01 	vldmdb	r2!, {s15}
 8008e54:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5c:	db0e      	blt.n	8008e7c <forward_relu+0x158>
 8008e5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008e62:	4293      	cmp	r3, r2
 8008e64:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008e68:	ed61 7a01 	vstmdb	r1!, {s15}
 8008e6c:	d0b8      	beq.n	8008de0 <forward_relu+0xbc>
 8008e6e:	ed72 7a01 	vldmdb	r2!, {s15}
 8008e72:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7a:	daf0      	bge.n	8008e5e <forward_relu+0x13a>
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008e82:	d1e5      	bne.n	8008e50 <forward_relu+0x12c>
 8008e84:	e7ac      	b.n	8008de0 <forward_relu+0xbc>
 8008e86:	6999      	ldr	r1, [r3, #24]
 8008e88:	6893      	ldr	r3, [r2, #8]
 8008e8a:	6990      	ldr	r0, [r2, #24]
 8008e8c:	0a1b      	lsrs	r3, r3, #8
 8008e8e:	6889      	ldr	r1, [r1, #8]
 8008e90:	6884      	ldr	r4, [r0, #8]
 8008e92:	d06e      	beq.n	8008f72 <forward_relu+0x24e>
 8008e94:	68d5      	ldr	r5, [r2, #12]
 8008e96:	2201      	movs	r2, #1
 8008e98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e9c:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008ea0:	429d      	cmp	r5, r3
 8008ea2:	fb00 f202 	mul.w	r2, r0, r2
 8008ea6:	d1f9      	bne.n	8008e9c <forward_relu+0x178>
 8008ea8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008eac:	4413      	add	r3, r2
 8008eae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008eb2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008eb6:	4294      	cmp	r4, r2
 8008eb8:	d892      	bhi.n	8008de0 <forward_relu+0xbc>
 8008eba:	3204      	adds	r2, #4
 8008ebc:	3104      	adds	r1, #4
 8008ebe:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008f88 <forward_relu+0x264>
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	ed72 7a01 	vldmdb	r2!, {s15}
 8008ec8:	3b08      	subs	r3, #8
 8008eca:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008ece:	ed61 7a01 	vstmdb	r1!, {s15}
 8008ed2:	429c      	cmp	r4, r3
 8008ed4:	d9f5      	bls.n	8008ec2 <forward_relu+0x19e>
 8008ed6:	bc70      	pop	{r4, r5, r6}
 8008ed8:	4770      	bx	lr
 8008eda:	6993      	ldr	r3, [r2, #24]
 8008edc:	6880      	ldr	r0, [r0, #8]
 8008ede:	689c      	ldr	r4, [r3, #8]
 8008ee0:	6893      	ldr	r3, [r2, #8]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	d047      	beq.n	8008f76 <forward_relu+0x252>
 8008ee6:	68d5      	ldr	r5, [r2, #12]
 8008ee8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008eec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	fb02 f101 	mul.w	r1, r2, r1
 8008ef6:	d1f9      	bne.n	8008eec <forward_relu+0x1c8>
 8008ef8:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8008efc:	68b3      	ldr	r3, [r6, #8]
 8008efe:	440a      	add	r2, r1
 8008f00:	ed93 7a00 	vldr	s14, [r3]
 8008f04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f08:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	f63f af67 	bhi.w	8008de0 <forward_relu+0xbc>
 8008f12:	1d02      	adds	r2, r0, #4
 8008f14:	3304      	adds	r3, #4
 8008f16:	2000      	movs	r0, #0
 8008f18:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008f1c:	1f19      	subs	r1, r3, #4
 8008f1e:	3b08      	subs	r3, #8
 8008f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f28:	d406      	bmi.n	8008f38 <forward_relu+0x214>
 8008f2a:	429c      	cmp	r4, r3
 8008f2c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8008f30:	f63f af56 	bhi.w	8008de0 <forward_relu+0xbc>
 8008f34:	460b      	mov	r3, r1
 8008f36:	e7ef      	b.n	8008f18 <forward_relu+0x1f4>
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	ed62 7a01 	vstmdb	r2!, {s15}
 8008f3e:	f63f af4f 	bhi.w	8008de0 <forward_relu+0xbc>
 8008f42:	460b      	mov	r3, r1
 8008f44:	e7e8      	b.n	8008f18 <forward_relu+0x1f4>
 8008f46:	68b3      	ldr	r3, [r6, #8]
 8008f48:	ed93 7a02 	vldr	s14, [r3, #8]
 8008f4c:	edd3 6a00 	vldr	s13, [r3]
 8008f50:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008f54:	ed93 6a01 	vldr	s12, [r3, #4]
 8008f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5c:	d401      	bmi.n	8008f62 <forward_relu+0x23e>
 8008f5e:	462a      	mov	r2, r5
 8008f60:	e71e      	b.n	8008da0 <forward_relu+0x7c>
 8008f62:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008f66:	462b      	mov	r3, r5
 8008f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6c:	f47f af6a 	bne.w	8008e44 <forward_relu+0x120>
 8008f70:	e748      	b.n	8008e04 <forward_relu+0xe0>
 8008f72:	4622      	mov	r2, r4
 8008f74:	e7a1      	b.n	8008eba <forward_relu+0x196>
 8008f76:	68b2      	ldr	r2, [r6, #8]
 8008f78:	4623      	mov	r3, r4
 8008f7a:	ed92 7a00 	vldr	s14, [r2]
 8008f7e:	e7c8      	b.n	8008f12 <forward_relu+0x1ee>
 8008f80:	2300      	movs	r3, #0
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	deff      	udf	#255	@ 0xff
 8008f86:	bf00      	nop
 8008f88:	00000000 	.word	0x00000000

08008f8c <forward_mp>:
 8008f8c:	6983      	ldr	r3, [r0, #24]
 8008f8e:	881a      	ldrh	r2, [r3, #0]
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	f000 80bc 	beq.w	800910e <forward_mp+0x182>
 8008f96:	6859      	ldr	r1, [r3, #4]
 8008f98:	684b      	ldr	r3, [r1, #4]
 8008f9a:	b103      	cbz	r3, 8008f9e <forward_mp+0x12>
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2a01      	cmp	r2, #1
 8008fa0:	f000 80ba 	beq.w	8009118 <forward_mp+0x18c>
 8008fa4:	690a      	ldr	r2, [r1, #16]
 8008fa6:	2a00      	cmp	r2, #0
 8008fa8:	f000 80b9 	beq.w	800911e <forward_mp+0x192>
 8008fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb0:	6811      	ldr	r1, [r2, #0]
 8008fb2:	b093      	sub	sp, #76	@ 0x4c
 8008fb4:	68ca      	ldr	r2, [r1, #12]
 8008fb6:	6989      	ldr	r1, [r1, #24]
 8008fb8:	68d4      	ldr	r4, [r2, #12]
 8008fba:	6895      	ldr	r5, [r2, #8]
 8008fbc:	688a      	ldr	r2, [r1, #8]
 8008fbe:	68d9      	ldr	r1, [r3, #12]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	9200      	str	r2, [sp, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8008fc8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8008fcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8008fce:	9408      	str	r4, [sp, #32]
 8008fd0:	9504      	str	r5, [sp, #16]
 8008fd2:	e9d2 3600 	ldrd	r3, r6, [r2]
 8008fd6:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 8008fda:	69c1      	ldr	r1, [r0, #28]
 8008fdc:	f1c3 0a00 	rsb	sl, r3, #0
 8008fe0:	960d      	str	r6, [sp, #52]	@ 0x34
 8008fe2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fe4:	6a01      	ldr	r1, [r0, #32]
 8008fe6:	9705      	str	r7, [sp, #20]
 8008fe8:	910a      	str	r1, [sp, #40]	@ 0x28
 8008fea:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8008fec:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008fee:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008ff0:	910c      	str	r1, [sp, #48]	@ 0x30
 8008ff2:	2c00      	cmp	r4, #0
 8008ff4:	f000 8088 	beq.w	8009108 <forward_mp+0x17c>
 8008ff8:	441a      	add	r2, r3
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	ea4f 0789 	mov.w	r7, r9, lsl #2
 8009000:	f04f 0b00 	mov.w	fp, #0
 8009004:	fb09 f303 	mul.w	r3, r9, r3
 8009008:	9201      	str	r2, [sp, #4]
 800900a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800900e:	4273      	negs	r3, r6
 8009010:	9310      	str	r3, [sp, #64]	@ 0x40
 8009012:	fb05 f307 	mul.w	r3, r5, r7
 8009016:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009018:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800901a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800901e:	9901      	ldr	r1, [sp, #4]
 8009020:	9307      	str	r3, [sp, #28]
 8009022:	428a      	cmp	r2, r1
 8009024:	bf94      	ite	ls
 8009026:	eb0a 0e02 	addls.w	lr, sl, r2
 800902a:	eb0a 0e01 	addhi.w	lr, sl, r1
 800902e:	9a04      	ldr	r2, [sp, #16]
 8009030:	2a00      	cmp	r2, #0
 8009032:	d05f      	beq.n	80090f4 <forward_mp+0x168>
 8009034:	9a05      	ldr	r2, [sp, #20]
 8009036:	9d00      	ldr	r5, [sp, #0]
 8009038:	fb02 f303 	mul.w	r3, r2, r3
 800903c:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8009040:	9303      	str	r3, [sp, #12]
 8009042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009044:	18d3      	adds	r3, r2, r3
 8009046:	2200      	movs	r2, #0
 8009048:	9302      	str	r3, [sp, #8]
 800904a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800904c:	9206      	str	r2, [sp, #24]
 800904e:	2b00      	cmp	r3, #0
 8009050:	469b      	mov	fp, r3
 8009052:	db5e      	blt.n	8009112 <forward_mp+0x186>
 8009054:	9a03      	ldr	r2, [sp, #12]
 8009056:	18d6      	adds	r6, r2, r3
 8009058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800905a:	9902      	ldr	r1, [sp, #8]
 800905c:	fb06 2607 	mla	r6, r6, r7, r2
 8009060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009062:	428a      	cmp	r2, r1
 8009064:	bf94      	ite	ls
 8009066:	eb0b 0402 	addls.w	r4, fp, r2
 800906a:	eb0b 0401 	addhi.w	r4, fp, r1
 800906e:	1ae4      	subs	r4, r4, r3
 8009070:	f1b9 0f00 	cmp.w	r9, #0
 8009074:	d008      	beq.n	8009088 <forward_mp+0xfc>
 8009076:	4633      	mov	r3, r6
 8009078:	462a      	mov	r2, r5
 800907a:	19b9      	adds	r1, r7, r6
 800907c:	f853 0b04 	ldr.w	r0, [r3], #4
 8009080:	4299      	cmp	r1, r3
 8009082:	f842 0b04 	str.w	r0, [r2], #4
 8009086:	d1f9      	bne.n	800907c <forward_mp+0xf0>
 8009088:	9b07      	ldr	r3, [sp, #28]
 800908a:	459e      	cmp	lr, r3
 800908c:	dd1f      	ble.n	80090ce <forward_mp+0x142>
 800908e:	469c      	mov	ip, r3
 8009090:	fb07 6404 	mla	r4, r7, r4, r6
 8009094:	42a6      	cmp	r6, r4
 8009096:	d214      	bcs.n	80090c2 <forward_mp+0x136>
 8009098:	f1b9 0f00 	cmp.w	r9, #0
 800909c:	d011      	beq.n	80090c2 <forward_mp+0x136>
 800909e:	19f1      	adds	r1, r6, r7
 80090a0:	4630      	mov	r0, r6
 80090a2:	4602      	mov	r2, r0
 80090a4:	462b      	mov	r3, r5
 80090a6:	ecf2 7a01 	vldmia	r2!, {s15}
 80090aa:	ed93 7a00 	vldr	s14, [r3]
 80090ae:	428a      	cmp	r2, r1
 80090b0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80090b4:	ece3 7a01 	vstmia	r3!, {s15}
 80090b8:	d1f5      	bne.n	80090a6 <forward_mp+0x11a>
 80090ba:	4438      	add	r0, r7
 80090bc:	4439      	add	r1, r7
 80090be:	42a0      	cmp	r0, r4
 80090c0:	d3ef      	bcc.n	80090a2 <forward_mp+0x116>
 80090c2:	f10c 0c01 	add.w	ip, ip, #1
 80090c6:	4446      	add	r6, r8
 80090c8:	4444      	add	r4, r8
 80090ca:	45e6      	cmp	lr, ip
 80090cc:	d1e2      	bne.n	8009094 <forward_mp+0x108>
 80090ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80090d0:	443d      	add	r5, r7
 80090d2:	9802      	ldr	r0, [sp, #8]
 80090d4:	9a06      	ldr	r2, [sp, #24]
 80090d6:	eb01 030b 	add.w	r3, r1, fp
 80090da:	1a41      	subs	r1, r0, r1
 80090dc:	3201      	adds	r2, #1
 80090de:	9102      	str	r1, [sp, #8]
 80090e0:	9904      	ldr	r1, [sp, #16]
 80090e2:	9206      	str	r2, [sp, #24]
 80090e4:	4291      	cmp	r1, r2
 80090e6:	d1b2      	bne.n	800904e <forward_mp+0xc2>
 80090e8:	9b00      	ldr	r3, [sp, #0]
 80090ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80090ec:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 80090f0:	4413      	add	r3, r2
 80090f2:	9300      	str	r3, [sp, #0]
 80090f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090f6:	f10b 0b01 	add.w	fp, fp, #1
 80090fa:	9a01      	ldr	r2, [sp, #4]
 80090fc:	449a      	add	sl, r3
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	455b      	cmp	r3, fp
 8009106:	d187      	bne.n	8009018 <forward_mp+0x8c>
 8009108:	b013      	add	sp, #76	@ 0x4c
 800910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910e:	6853      	ldr	r3, [r2, #4]
 8009110:	deff      	udf	#255	@ 0xff
 8009112:	9e03      	ldr	r6, [sp, #12]
 8009114:	2300      	movs	r3, #0
 8009116:	e79f      	b.n	8009058 <forward_mp+0xcc>
 8009118:	2300      	movs	r3, #0
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	deff      	udf	#255	@ 0xff
 800911e:	68d3      	ldr	r3, [r2, #12]
 8009120:	deff      	udf	#255	@ 0xff
 8009122:	bf00      	nop

08009124 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	ed2d 8b0c 	vpush	{d8-d13}
 800912c:	b08d      	sub	sp, #52	@ 0x34
 800912e:	461d      	mov	r5, r3
 8009130:	9003      	str	r0, [sp, #12]
 8009132:	9207      	str	r2, [sp, #28]
 8009134:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8009136:	9308      	str	r3, [sp, #32]
 8009138:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 800913c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800913e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009140:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	@ 0x94
 8009144:	fb00 f002 	mul.w	r0, r0, r2
 8009148:	9004      	str	r0, [sp, #16]
 800914a:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	@ 0xa4
 800914e:	9009      	str	r0, [sp, #36]	@ 0x24
 8009150:	2c00      	cmp	r4, #0
 8009152:	f000 80ed 	beq.w	8009330 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8009156:	009c      	lsls	r4, r3, #2
 8009158:	fb00 f305 	mul.w	r3, r0, r5
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	9405      	str	r4, [sp, #20]
 8009160:	9306      	str	r3, [sp, #24]
 8009162:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009164:	fb03 f305 	mul.w	r3, r3, r5
 8009168:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800916c:	9301      	str	r3, [sp, #4]
 800916e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009170:	425b      	negs	r3, r3
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	2300      	movs	r3, #0
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	00ab      	lsls	r3, r5, #2
 800917a:	930a      	str	r3, [sp, #40]	@ 0x28
 800917c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800917e:	2b00      	cmp	r3, #0
 8009180:	f2c0 80dd 	blt.w	800933e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8009184:	9e01      	ldr	r6, [sp, #4]
 8009186:	2000      	movs	r0, #0
 8009188:	9d04      	ldr	r5, [sp, #16]
 800918a:	9b07      	ldr	r3, [sp, #28]
 800918c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800918e:	9900      	ldr	r1, [sp, #0]
 8009190:	fb05 3502 	mla	r5, r5, r2, r3
 8009194:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009196:	440b      	add	r3, r1
 8009198:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800919a:	428b      	cmp	r3, r1
 800919c:	bf94      	ite	ls
 800919e:	ebc0 0003 	rsbls	r0, r0, r3
 80091a2:	ebc0 0001 	rsbhi	r0, r0, r1
 80091a6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091a8:	f1bb 0f00 	cmp.w	fp, #0
 80091ac:	eba3 0a00 	sub.w	sl, r3, r0
 80091b0:	9b08      	ldr	r3, [sp, #32]
 80091b2:	eba1 0900 	sub.w	r9, r1, r0
 80091b6:	fb03 f000 	mul.w	r0, r3, r0
 80091ba:	f340 80c6 	ble.w	800934a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 80091be:	f020 040f 	bic.w	r4, r0, #15
 80091c2:	eeb0 7a40 	vmov.f32	s14, s0
 80091c6:	fb02 fa0a 	mul.w	sl, r2, sl
 80091ca:	f04f 0c00 	mov.w	ip, #0
 80091ce:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80091d2:	fb02 f909 	mul.w	r9, r2, r9
 80091d6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80091da:	f108 0801 	add.w	r8, r8, #1
 80091de:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80091e2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	f340 80a7 	ble.w	800933a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 80091ec:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 80091f0:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80091f4:	2100      	movs	r1, #0
 80091f6:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 80091fa:	3110      	adds	r1, #16
 80091fc:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8009200:	3340      	adds	r3, #64	@ 0x40
 8009202:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8009206:	42a1      	cmp	r1, r4
 8009208:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800920c:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8009210:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8009214:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8009218:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 800921c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009220:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8009224:	ed52 da1d 	vldr	s27, [r2, #-116]	@ 0xffffff8c
 8009228:	ed12 da1c 	vldr	s26, [r2, #-112]	@ 0xffffff90
 800922c:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 8009230:	ed12 ca1b 	vldr	s24, [r2, #-108]	@ 0xffffff94
 8009234:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8009238:	eee5 7a86 	vfma.f32	s15, s11, s12
 800923c:	ed12 ba1a 	vldr	s22, [r2, #-104]	@ 0xffffff98
 8009240:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8009244:	ed12 aa19 	vldr	s20, [r2, #-100]	@ 0xffffff9c
 8009248:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 800924c:	ed12 9a18 	vldr	s18, [r2, #-96]	@ 0xffffffa0
 8009250:	ed53 8a18 	vldr	s17, [r3, #-96]	@ 0xffffffa0
 8009254:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8009258:	ed12 8a17 	vldr	s16, [r2, #-92]	@ 0xffffffa4
 800925c:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8009260:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 8009264:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8009268:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 800926c:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8009270:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8009274:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8009278:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 800927c:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8009280:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8009284:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8009288:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 800928c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009290:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8009294:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8009298:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800929c:	eeea 7a29 	vfma.f32	s15, s20, s19
 80092a0:	eee9 7a28 	vfma.f32	s15, s18, s17
 80092a4:	eee8 7a20 	vfma.f32	s15, s16, s1
 80092a8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80092ac:	eee2 7a22 	vfma.f32	s15, s4, s5
 80092b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80092b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80092b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80092bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80092c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092c4:	db97      	blt.n	80091f6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 80092c6:	4476      	add	r6, lr
 80092c8:	4475      	add	r5, lr
 80092ca:	4647      	mov	r7, r8
 80092cc:	42b8      	cmp	r0, r7
 80092ce:	dd10      	ble.n	80092f2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 80092d0:	463b      	mov	r3, r7
 80092d2:	4631      	mov	r1, r6
 80092d4:	462a      	mov	r2, r5
 80092d6:	3301      	adds	r3, #1
 80092d8:	ecf2 6a01 	vldmia	r2!, {s13}
 80092dc:	ecf1 7a01 	vldmia	r1!, {s15}
 80092e0:	4298      	cmp	r0, r3
 80092e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092e6:	d1f6      	bne.n	80092d6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 80092e8:	1bc7      	subs	r7, r0, r7
 80092ea:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80092ee:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 80092f2:	f10c 0c01 	add.w	ip, ip, #1
 80092f6:	4456      	add	r6, sl
 80092f8:	444d      	add	r5, r9
 80092fa:	45dc      	cmp	ip, fp
 80092fc:	f47f af73 	bne.w	80091e6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8009300:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8009302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009304:	9a03      	ldr	r2, [sp, #12]
 8009306:	4401      	add	r1, r0
 8009308:	9b02      	ldr	r3, [sp, #8]
 800930a:	ed82 7a00 	vstr	s14, [r2]
 800930e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8009310:	3301      	adds	r3, #1
 8009312:	9905      	ldr	r1, [sp, #20]
 8009314:	9302      	str	r3, [sp, #8]
 8009316:	440a      	add	r2, r1
 8009318:	9906      	ldr	r1, [sp, #24]
 800931a:	9203      	str	r2, [sp, #12]
 800931c:	9a00      	ldr	r2, [sp, #0]
 800931e:	1a12      	subs	r2, r2, r0
 8009320:	9200      	str	r2, [sp, #0]
 8009322:	9a01      	ldr	r2, [sp, #4]
 8009324:	440a      	add	r2, r1
 8009326:	9201      	str	r2, [sp, #4]
 8009328:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800932a:	4293      	cmp	r3, r2
 800932c:	f47f af26 	bne.w	800917c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8009330:	b00d      	add	sp, #52	@ 0x34
 8009332:	ecbd 8b0c 	vpop	{d8-d13}
 8009336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800933a:	2700      	movs	r7, #0
 800933c:	e7c6      	b.n	80092cc <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 800933e:	9a00      	ldr	r2, [sp, #0]
 8009340:	9b04      	ldr	r3, [sp, #16]
 8009342:	4610      	mov	r0, r2
 8009344:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009346:	189d      	adds	r5, r3, r2
 8009348:	e71f      	b.n	800918a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 800934a:	eeb0 7a40 	vmov.f32	s14, s0
 800934e:	e7d7      	b.n	8009300 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08009350 <forward_lite_conv2d_if32of32wf32>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	ed2d 8b02 	vpush	{d8}
 8009358:	b09f      	sub	sp, #124	@ 0x7c
 800935a:	4686      	mov	lr, r0
 800935c:	4694      	mov	ip, r2
 800935e:	af08      	add	r7, sp, #32
 8009360:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	@ 0xb0
 8009364:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009366:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 800936a:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	@ 0xb4
 800936e:	424e      	negs	r6, r1
 8009370:	64fc      	str	r4, [r7, #76]	@ 0x4c
 8009372:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	613a      	str	r2, [r7, #16]
 800937a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800937c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8009380:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	@ 0xa8
 8009384:	617d      	str	r5, [r7, #20]
 8009386:	633e      	str	r6, [r7, #48]	@ 0x30
 8009388:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	@ 0x88
 800938c:	2c00      	cmp	r4, #0
 800938e:	f000 8092 	beq.w	80094b6 <forward_lite_conv2d_if32of32wf32+0x166>
 8009392:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8009396:	6379      	str	r1, [r7, #52]	@ 0x34
 8009398:	fb04 f202 	mul.w	r2, r4, r2
 800939c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80093a0:	4244      	negs	r4, r0
 80093a2:	ed9f 8a9a 	vldr	s16, [pc, #616]	@ 800960c <forward_lite_conv2d_if32of32wf32+0x2bc>
 80093a6:	653c      	str	r4, [r7, #80]	@ 0x50
 80093a8:	fb03 f402 	mul.w	r4, r3, r2
 80093ac:	fb03 f201 	mul.w	r2, r3, r1
 80093b0:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80093b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80093b8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80093ba:	fb01 f10a 	mul.w	r1, r1, sl
 80093be:	0089      	lsls	r1, r1, #2
 80093c0:	61b9      	str	r1, [r7, #24]
 80093c2:	fb05 f102 	mul.w	r1, r5, r2
 80093c6:	4655      	mov	r5, sl
 80093c8:	fb06 f202 	mul.w	r2, r6, r2
 80093cc:	46da      	mov	sl, fp
 80093ce:	0089      	lsls	r1, r1, #2
 80093d0:	61f9      	str	r1, [r7, #28]
 80093d2:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 80093d6:	f10b 0207 	add.w	r2, fp, #7
 80093da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80093dc:	f022 0107 	bic.w	r1, r2, #7
 80093e0:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 80093e4:	60f9      	str	r1, [r7, #12]
 80093e6:	f10c 4178 	add.w	r1, ip, #4160749568	@ 0xf8000000
 80093ea:	60ba      	str	r2, [r7, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	6239      	str	r1, [r7, #32]
 80093f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80093f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f2c0 80d5 	blt.w	80095a4 <forward_lite_conv2d_if32of32wf32+0x254>
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8d7 b028 	ldr.w	fp, [r7, #40]	@ 0x28
 8009400:	657a      	str	r2, [r7, #84]	@ 0x54
 8009402:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009404:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009408:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800940c:	440a      	add	r2, r1
 800940e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009410:	4282      	cmp	r2, r0
 8009412:	bf94      	ite	ls
 8009414:	ebc1 0102 	rsbls	r1, r1, r2
 8009418:	ebc1 0100 	rsbhi	r1, r1, r0
 800941c:	6a3a      	ldr	r2, [r7, #32]
 800941e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8009422:	6439      	str	r1, [r7, #64]	@ 0x40
 8009424:	d24d      	bcs.n	80094c2 <forward_lite_conv2d_if32of32wf32+0x172>
 8009426:	b385      	cbz	r5, 800948a <forward_lite_conv2d_if32of32wf32+0x13a>
 8009428:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800942a:	2a00      	cmp	r2, #0
 800942c:	f000 80bf 	beq.w	80095ae <forward_lite_conv2d_if32of32wf32+0x25e>
 8009430:	4659      	mov	r1, fp
 8009432:	4691      	mov	r9, r2
 8009434:	46d3      	mov	fp, sl
 8009436:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 800943a:	693e      	ldr	r6, [r7, #16]
 800943c:	2400      	movs	r4, #0
 800943e:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 8009442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009444:	3401      	adds	r4, #1
 8009446:	ecb9 0a01 	vldmia	r9!, {s0}
 800944a:	4640      	mov	r0, r8
 800944c:	9207      	str	r2, [sp, #28]
 800944e:	f108 0804 	add.w	r8, r8, #4
 8009452:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009454:	e9cd a205 	strd	sl, r2, [sp, #20]
 8009458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800945a:	9204      	str	r2, [sp, #16]
 800945c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8009460:	9203      	str	r2, [sp, #12]
 8009462:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009466:	9202      	str	r2, [sp, #8]
 8009468:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800946c:	e9cd 5200 	strd	r5, r2, [sp]
 8009470:	4632      	mov	r2, r6
 8009472:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009476:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009478:	445e      	add	r6, fp
 800947a:	f7ff fe53 	bl	8009124 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800947e:	42a5      	cmp	r5, r4
 8009480:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009482:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009486:	d1dc      	bne.n	8009442 <forward_lite_conv2d_if32of32wf32+0xf2>
 8009488:	46da      	mov	sl, fp
 800948a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800948c:	69b8      	ldr	r0, [r7, #24]
 800948e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009490:	4401      	add	r1, r0
 8009492:	6978      	ldr	r0, [r7, #20]
 8009494:	3201      	adds	r2, #1
 8009496:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009498:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800949a:	627a      	str	r2, [r7, #36]	@ 0x24
 800949c:	4401      	add	r1, r0
 800949e:	6339      	str	r1, [r7, #48]	@ 0x30
 80094a0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80094a2:	1a09      	subs	r1, r1, r0
 80094a4:	69f8      	ldr	r0, [r7, #28]
 80094a6:	6379      	str	r1, [r7, #52]	@ 0x34
 80094a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094aa:	4401      	add	r1, r0
 80094ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80094ae:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80094b2:	4291      	cmp	r1, r2
 80094b4:	d19d      	bne.n	80093f2 <forward_lite_conv2d_if32of32wf32+0xa2>
 80094b6:	375c      	adds	r7, #92	@ 0x5c
 80094b8:	46bd      	mov	sp, r7
 80094ba:	ecbd 8b02 	vpop	{d8}
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	466a      	mov	r2, sp
 80094c4:	ee08 2a90 	vmov	s17, r2
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	ebad 0d02 	sub.w	sp, sp, r2
 80094ce:	aa08      	add	r2, sp, #32
 80094d0:	2d00      	cmp	r5, #0
 80094d2:	d03d      	beq.n	8009550 <forward_lite_conv2d_if32of32wf32+0x200>
 80094d4:	6938      	ldr	r0, [r7, #16]
 80094d6:	4659      	mov	r1, fp
 80094d8:	68bc      	ldr	r4, [r7, #8]
 80094da:	46ab      	mov	fp, r5
 80094dc:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 80094e0:	f04f 0800 	mov.w	r8, #0
 80094e4:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 80094e6:	4605      	mov	r5, r0
 80094e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094ea:	b138      	cbz	r0, 80094fc <forward_lite_conv2d_if32of32wf32+0x1ac>
 80094ec:	4628      	mov	r0, r5
 80094ee:	4694      	mov	ip, r2
 80094f0:	f850 eb04 	ldr.w	lr, [r0], #4
 80094f4:	42a0      	cmp	r0, r4
 80094f6:	f84c eb04 	str.w	lr, [ip], #4
 80094fa:	d1f9      	bne.n	80094f0 <forward_lite_conv2d_if32of32wf32+0x1a0>
 80094fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80094fe:	f108 0801 	add.w	r8, r8, #1
 8009502:	b348      	cbz	r0, 8009558 <forward_lite_conv2d_if32of32wf32+0x208>
 8009504:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009506:	4455      	add	r5, sl
 8009508:	ecb6 0a01 	vldmia	r6!, {s0}
 800950c:	4454      	add	r4, sl
 800950e:	9007      	str	r0, [sp, #28]
 8009510:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009512:	9006      	str	r0, [sp, #24]
 8009514:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009516:	9005      	str	r0, [sp, #20]
 8009518:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800951a:	9004      	str	r0, [sp, #16]
 800951c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8009520:	9003      	str	r0, [sp, #12]
 8009522:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8009526:	9002      	str	r0, [sp, #8]
 8009528:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800952c:	e9cd b000 	strd	fp, r0, [sp]
 8009530:	4648      	mov	r0, r9
 8009532:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009536:	f109 0904 	add.w	r9, r9, #4
 800953a:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 800953e:	f7ff fdf1 	bl	8009124 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8009542:	45d8      	cmp	r8, fp
 8009544:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009548:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 800954c:	d1cc      	bne.n	80094e8 <forward_lite_conv2d_if32of32wf32+0x198>
 800954e:	465d      	mov	r5, fp
 8009550:	ee18 2a90 	vmov	r2, s17
 8009554:	4695      	mov	sp, r2
 8009556:	e798      	b.n	800948a <forward_lite_conv2d_if32of32wf32+0x13a>
 8009558:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800955a:	eeb0 0a48 	vmov.f32	s0, s16
 800955e:	4455      	add	r5, sl
 8009560:	4454      	add	r4, sl
 8009562:	9007      	str	r0, [sp, #28]
 8009564:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8009566:	9006      	str	r0, [sp, #24]
 8009568:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800956a:	9005      	str	r0, [sp, #20]
 800956c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800956e:	9004      	str	r0, [sp, #16]
 8009570:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8009574:	9003      	str	r0, [sp, #12]
 8009576:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800957a:	9002      	str	r0, [sp, #8]
 800957c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8009580:	e9cd b000 	strd	fp, r0, [sp]
 8009584:	4648      	mov	r0, r9
 8009586:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800958a:	f109 0904 	add.w	r9, r9, #4
 800958e:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 8009592:	f7ff fdc7 	bl	8009124 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8009596:	45c3      	cmp	fp, r8
 8009598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800959c:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 80095a0:	d1a2      	bne.n	80094e8 <forward_lite_conv2d_if32of32wf32+0x198>
 80095a2:	e7d4      	b.n	800954e <forward_lite_conv2d_if32of32wf32+0x1fe>
 80095a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095a6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80095aa:	657a      	str	r2, [r7, #84]	@ 0x54
 80095ac:	e729      	b.n	8009402 <forward_lite_conv2d_if32of32wf32+0xb2>
 80095ae:	4659      	mov	r1, fp
 80095b0:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 80095b4:	46d3      	mov	fp, sl
 80095b6:	693e      	ldr	r6, [r7, #16]
 80095b8:	4614      	mov	r4, r2
 80095ba:	f8d7 9054 	ldr.w	r9, [r7, #84]	@ 0x54
 80095be:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 80095c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095c4:	3401      	adds	r4, #1
 80095c6:	4640      	mov	r0, r8
 80095c8:	eeb0 0a48 	vmov.f32	s0, s16
 80095cc:	9207      	str	r2, [sp, #28]
 80095ce:	f108 0804 	add.w	r8, r8, #4
 80095d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80095d4:	f8cd 9010 	str.w	r9, [sp, #16]
 80095d8:	e9cd a205 	strd	sl, r2, [sp, #20]
 80095dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80095e0:	9203      	str	r2, [sp, #12]
 80095e2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80095e6:	9202      	str	r2, [sp, #8]
 80095e8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80095ec:	e9cd 5200 	strd	r5, r2, [sp]
 80095f0:	4632      	mov	r2, r6
 80095f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095f6:	6579      	str	r1, [r7, #84]	@ 0x54
 80095f8:	445e      	add	r6, fp
 80095fa:	f7ff fd93 	bl	8009124 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80095fe:	42a5      	cmp	r5, r4
 8009600:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009606:	d1dc      	bne.n	80095c2 <forward_lite_conv2d_if32of32wf32+0x272>
 8009608:	e73e      	b.n	8009488 <forward_lite_conv2d_if32of32wf32+0x138>
 800960a:	bf00      	nop
 800960c:	00000000 	.word	0x00000000

08009610 <forward_lite_dense_if32of32wf32>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b0c 	vpush	{d8-d13}
 8009618:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	@ 0x54
 800961c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8009620:	4287      	cmp	r7, r0
 8009622:	f240 8105 	bls.w	8009830 <forward_lite_dense_if32of32wf32+0x220>
 8009626:	f1a6 0810 	sub.w	r8, r6, #16
 800962a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800962e:	4605      	mov	r5, r0
 8009630:	f006 0b0f 	and.w	fp, r6, #15
 8009634:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009638:	f108 0801 	add.w	r8, r8, #1
 800963c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8009640:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8009644:	2e0f      	cmp	r6, #15
 8009646:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800985c <forward_lite_dense_if32of32wf32+0x24c>
 800964a:	f240 8102 	bls.w	8009852 <forward_lite_dense_if32of32wf32+0x242>
 800964e:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 8009652:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 8009656:	46b6      	mov	lr, r6
 8009658:	ed54 6a0f 	vldr	s13, [r4, #-60]	@ 0xffffffc4
 800965c:	f1ae 0e10 	sub.w	lr, lr, #16
 8009660:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 8009664:	3440      	adds	r4, #64	@ 0x40
 8009666:	ed5c 4a10 	vldr	s9, [ip, #-64]	@ 0xffffffc0
 800966a:	f1be 0f0f 	cmp.w	lr, #15
 800966e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009672:	ed14 5a20 	vldr	s10, [r4, #-128]	@ 0xffffff80
 8009676:	ed5c 5a0e 	vldr	s11, [ip, #-56]	@ 0xffffffc8
 800967a:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 800967e:	ed14 6a1e 	vldr	s12, [r4, #-120]	@ 0xffffff88
 8009682:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009686:	ed54 6a1d 	vldr	s13, [r4, #-116]	@ 0xffffff8c
 800968a:	ed1c da1d 	vldr	s26, [ip, #-116]	@ 0xffffff8c
 800968e:	ed5c ca1c 	vldr	s25, [ip, #-112]	@ 0xffffff90
 8009692:	ed14 ca1c 	vldr	s24, [r4, #-112]	@ 0xffffff90
 8009696:	ed5c ba1b 	vldr	s23, [ip, #-108]	@ 0xffffff94
 800969a:	ed14 ba1b 	vldr	s22, [r4, #-108]	@ 0xffffff94
 800969e:	eee5 7a86 	vfma.f32	s15, s11, s12
 80096a2:	ed5c aa1a 	vldr	s21, [ip, #-104]	@ 0xffffff98
 80096a6:	ed14 aa1a 	vldr	s20, [r4, #-104]	@ 0xffffff98
 80096aa:	ed5c 9a19 	vldr	s19, [ip, #-100]	@ 0xffffff9c
 80096ae:	ed14 9a19 	vldr	s18, [r4, #-100]	@ 0xffffff9c
 80096b2:	ed5c 8a18 	vldr	s17, [ip, #-96]	@ 0xffffffa0
 80096b6:	ed14 8a18 	vldr	s16, [r4, #-96]	@ 0xffffffa0
 80096ba:	eeed 7a26 	vfma.f32	s15, s26, s13
 80096be:	ed1c 0a17 	vldr	s0, [ip, #-92]	@ 0xffffffa4
 80096c2:	ed54 0a17 	vldr	s1, [r4, #-92]	@ 0xffffffa4
 80096c6:	ed1c 1a16 	vldr	s2, [ip, #-88]	@ 0xffffffa8
 80096ca:	ed54 1a16 	vldr	s3, [r4, #-88]	@ 0xffffffa8
 80096ce:	ed1c 2a15 	vldr	s4, [ip, #-84]	@ 0xffffffac
 80096d2:	ed54 2a15 	vldr	s5, [r4, #-84]	@ 0xffffffac
 80096d6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80096da:	ed1c 3a14 	vldr	s6, [ip, #-80]	@ 0xffffffb0
 80096de:	ed54 3a14 	vldr	s7, [r4, #-80]	@ 0xffffffb0
 80096e2:	ed1c 4a13 	vldr	s8, [ip, #-76]	@ 0xffffffb4
 80096e6:	ed54 4a13 	vldr	s9, [r4, #-76]	@ 0xffffffb4
 80096ea:	ed1c 5a12 	vldr	s10, [ip, #-72]	@ 0xffffffb8
 80096ee:	ed54 5a12 	vldr	s11, [r4, #-72]	@ 0xffffffb8
 80096f2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80096f6:	ed1c 6a11 	vldr	s12, [ip, #-68]	@ 0xffffffbc
 80096fa:	ed54 6a11 	vldr	s13, [r4, #-68]	@ 0xffffffbc
 80096fe:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009702:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009706:	eee8 7a88 	vfma.f32	s15, s17, s16
 800970a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800970e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009712:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009716:	eee3 7a23 	vfma.f32	s15, s6, s7
 800971a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800971e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009722:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800972a:	d895      	bhi.n	8009658 <forward_lite_dense_if32of32wf32+0x48>
 800972c:	eb02 0e0a 	add.w	lr, r2, sl
 8009730:	465c      	mov	r4, fp
 8009732:	46c4      	mov	ip, r8
 8009734:	2c00      	cmp	r4, #0
 8009736:	d075      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009738:	eddc 6a00 	vldr	s13, [ip]
 800973c:	2c01      	cmp	r4, #1
 800973e:	edde 7a00 	vldr	s15, [lr]
 8009742:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009746:	d06d      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009748:	eddc 6a01 	vldr	s13, [ip, #4]
 800974c:	2c02      	cmp	r4, #2
 800974e:	edde 7a01 	vldr	s15, [lr, #4]
 8009752:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009756:	d065      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009758:	eddc 6a02 	vldr	s13, [ip, #8]
 800975c:	2c03      	cmp	r4, #3
 800975e:	edde 7a02 	vldr	s15, [lr, #8]
 8009762:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009766:	d05d      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009768:	eddc 6a03 	vldr	s13, [ip, #12]
 800976c:	2c04      	cmp	r4, #4
 800976e:	edde 7a03 	vldr	s15, [lr, #12]
 8009772:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009776:	d055      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009778:	eddc 6a04 	vldr	s13, [ip, #16]
 800977c:	2c05      	cmp	r4, #5
 800977e:	edde 7a04 	vldr	s15, [lr, #16]
 8009782:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009786:	d04d      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009788:	eddc 6a05 	vldr	s13, [ip, #20]
 800978c:	2c06      	cmp	r4, #6
 800978e:	edde 7a05 	vldr	s15, [lr, #20]
 8009792:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009796:	d045      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009798:	eddc 6a06 	vldr	s13, [ip, #24]
 800979c:	2c07      	cmp	r4, #7
 800979e:	edde 7a06 	vldr	s15, [lr, #24]
 80097a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097a6:	d03d      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 80097a8:	eddc 6a07 	vldr	s13, [ip, #28]
 80097ac:	2c08      	cmp	r4, #8
 80097ae:	edde 7a07 	vldr	s15, [lr, #28]
 80097b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097b6:	d035      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 80097b8:	eddc 6a08 	vldr	s13, [ip, #32]
 80097bc:	2c09      	cmp	r4, #9
 80097be:	edde 7a08 	vldr	s15, [lr, #32]
 80097c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097c6:	d02d      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 80097c8:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 80097cc:	2c0a      	cmp	r4, #10
 80097ce:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 80097d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097d6:	d025      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 80097d8:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 80097dc:	2c0b      	cmp	r4, #11
 80097de:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 80097e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097e6:	d01d      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 80097e8:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 80097ec:	2c0c      	cmp	r4, #12
 80097ee:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 80097f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80097f6:	d015      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 80097f8:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 80097fc:	3c0d      	subs	r4, #13
 80097fe:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 8009802:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009806:	d00d      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009808:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 800980c:	2c01      	cmp	r4, #1
 800980e:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 8009812:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009816:	d005      	beq.n	8009824 <forward_lite_dense_if32of32wf32+0x214>
 8009818:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 800981c:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 8009820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009824:	eca5 7a01 	vstmia	r5!, {s14}
 8009828:	42af      	cmp	r7, r5
 800982a:	444a      	add	r2, r9
 800982c:	f63f af0a 	bhi.w	8009644 <forward_lite_dense_if32of32wf32+0x34>
 8009830:	b15b      	cbz	r3, 800984a <forward_lite_dense_if32of32wf32+0x23a>
 8009832:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009834:	b14a      	cbz	r2, 800984a <forward_lite_dense_if32of32wf32+0x23a>
 8009836:	edd0 7a00 	vldr	s15, [r0]
 800983a:	ecb3 7a01 	vldmia	r3!, {s14}
 800983e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009842:	ece0 7a01 	vstmia	r0!, {s15}
 8009846:	4287      	cmp	r7, r0
 8009848:	d1f5      	bne.n	8009836 <forward_lite_dense_if32of32wf32+0x226>
 800984a:	ecbd 8b0c 	vpop	{d8-d13}
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	4634      	mov	r4, r6
 8009854:	4696      	mov	lr, r2
 8009856:	468c      	mov	ip, r1
 8009858:	e76c      	b.n	8009734 <forward_lite_dense_if32of32wf32+0x124>
 800985a:	bf00      	nop
 800985c:	00000000 	.word	0x00000000

08009860 <st_int8_copy>:
 8009860:	4288      	cmp	r0, r1
 8009862:	d010      	beq.n	8009886 <st_int8_copy+0x26>
 8009864:	b17a      	cbz	r2, 8009886 <st_int8_copy+0x26>
 8009866:	4288      	cmp	r0, r1
 8009868:	eb00 0302 	add.w	r3, r0, r2
 800986c:	d20c      	bcs.n	8009888 <st_int8_copy+0x28>
 800986e:	428b      	cmp	r3, r1
 8009870:	d90a      	bls.n	8009888 <st_int8_copy+0x28>
 8009872:	4283      	cmp	r3, r0
 8009874:	440a      	add	r2, r1
 8009876:	d906      	bls.n	8009886 <st_int8_copy+0x26>
 8009878:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800987c:	4283      	cmp	r3, r0
 800987e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009882:	d1f9      	bne.n	8009878 <st_int8_copy+0x18>
 8009884:	4770      	bx	lr
 8009886:	4770      	bx	lr
 8009888:	078b      	lsls	r3, r1, #30
 800988a:	d102      	bne.n	8009892 <st_int8_copy+0x32>
 800988c:	e008      	b.n	80098a0 <st_int8_copy+0x40>
 800988e:	2a00      	cmp	r2, #0
 8009890:	d04d      	beq.n	800992e <st_int8_copy+0xce>
 8009892:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009896:	3a01      	subs	r2, #1
 8009898:	f801 3b01 	strb.w	r3, [r1], #1
 800989c:	078b      	lsls	r3, r1, #30
 800989e:	d1f6      	bne.n	800988e <st_int8_copy+0x2e>
 80098a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a4:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80098a8:	d05e      	beq.n	8009968 <st_int8_copy+0x108>
 80098aa:	ea40 0301 	orr.w	r3, r0, r1
 80098ae:	075b      	lsls	r3, r3, #29
 80098b0:	d13e      	bne.n	8009930 <st_int8_copy+0xd0>
 80098b2:	f10e 33ff 	add.w	r3, lr, #4294967295	@ 0xffffffff
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d93a      	bls.n	8009930 <st_int8_copy+0xd0>
 80098ba:	f100 0310 	add.w	r3, r0, #16
 80098be:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80098c2:	f101 0c10 	add.w	ip, r1, #16
 80098c6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80098ca:	3310      	adds	r3, #16
 80098cc:	f10c 0c10 	add.w	ip, ip, #16
 80098d0:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 80098d4:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 80098d8:	4573      	cmp	r3, lr
 80098da:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 80098de:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 80098e2:	d1f2      	bne.n	80098ca <st_int8_copy+0x6a>
 80098e4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80098e8:	4421      	add	r1, r4
 80098ea:	4420      	add	r0, r4
 80098ec:	f002 0203 	and.w	r2, r2, #3
 80098f0:	b16b      	cbz	r3, 800990e <st_int8_copy+0xae>
 80098f2:	6804      	ldr	r4, [r0, #0]
 80098f4:	600c      	str	r4, [r1, #0]
 80098f6:	1e5c      	subs	r4, r3, #1
 80098f8:	d005      	beq.n	8009906 <st_int8_copy+0xa6>
 80098fa:	6845      	ldr	r5, [r0, #4]
 80098fc:	2c01      	cmp	r4, #1
 80098fe:	604d      	str	r5, [r1, #4]
 8009900:	d001      	beq.n	8009906 <st_int8_copy+0xa6>
 8009902:	6884      	ldr	r4, [r0, #8]
 8009904:	608c      	str	r4, [r1, #8]
 8009906:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800990a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800990e:	b162      	cbz	r2, 800992a <st_int8_copy+0xca>
 8009910:	f990 3000 	ldrsb.w	r3, [r0]
 8009914:	3a01      	subs	r2, #1
 8009916:	700b      	strb	r3, [r1, #0]
 8009918:	d007      	beq.n	800992a <st_int8_copy+0xca>
 800991a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800991e:	2a01      	cmp	r2, #1
 8009920:	704b      	strb	r3, [r1, #1]
 8009922:	d002      	beq.n	800992a <st_int8_copy+0xca>
 8009924:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8009928:	708b      	strb	r3, [r1, #2]
 800992a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992e:	4770      	bx	lr
 8009930:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009934:	460b      	mov	r3, r1
 8009936:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800993a:	4684      	mov	ip, r0
 800993c:	f8dc 8000 	ldr.w	r8, [ip]
 8009940:	3310      	adds	r3, #16
 8009942:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009946:	f10c 0c10 	add.w	ip, ip, #16
 800994a:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800994e:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8009952:	f843 8c10 	str.w	r8, [r3, #-16]
 8009956:	f843 7c0c 	str.w	r7, [r3, #-12]
 800995a:	f843 6c08 	str.w	r6, [r3, #-8]
 800995e:	f843 5c04 	str.w	r5, [r3, #-4]
 8009962:	459e      	cmp	lr, r3
 8009964:	d1ea      	bne.n	800993c <st_int8_copy+0xdc>
 8009966:	e7bd      	b.n	80098e4 <st_int8_copy+0x84>
 8009968:	0893      	lsrs	r3, r2, #2
 800996a:	f002 0203 	and.w	r2, r2, #3
 800996e:	e7bf      	b.n	80098f0 <st_int8_copy+0x90>

08009970 <ai_array_to_buffer_fmt>:
 8009970:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009974:	2b02      	cmp	r3, #2
 8009976:	d050      	beq.n	8009a1a <ai_array_to_buffer_fmt+0xaa>
 8009978:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 800997c:	4b29      	ldr	r3, [pc, #164]	@ (8009a24 <ai_array_to_buffer_fmt+0xb4>)
 800997e:	429a      	cmp	r2, r3
 8009980:	d00b      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 8009982:	dc1c      	bgt.n	80099be <ai_array_to_buffer_fmt+0x4e>
 8009984:	4b28      	ldr	r3, [pc, #160]	@ (8009a28 <ai_array_to_buffer_fmt+0xb8>)
 8009986:	429a      	cmp	r2, r3
 8009988:	d007      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 800998a:	dd0b      	ble.n	80099a4 <ai_array_to_buffer_fmt+0x34>
 800998c:	4b27      	ldr	r3, [pc, #156]	@ (8009a2c <ai_array_to_buffer_fmt+0xbc>)
 800998e:	429a      	cmp	r2, r3
 8009990:	d003      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 8009992:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 8009996:	429a      	cmp	r2, r3
 8009998:	d131      	bne.n	80099fe <ai_array_to_buffer_fmt+0x8e>
 800999a:	4613      	mov	r3, r2
 800999c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80099a0:	4318      	orrs	r0, r3
 80099a2:	4770      	bx	lr
 80099a4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d0f6      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 80099ac:	dd2c      	ble.n	8009a08 <ai_array_to_buffer_fmt+0x98>
 80099ae:	4b20      	ldr	r3, [pc, #128]	@ (8009a30 <ai_array_to_buffer_fmt+0xc0>)
 80099b0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80099b4:	429a      	cmp	r2, r3
 80099b6:	bf18      	it	ne
 80099b8:	2340      	movne	r3, #64	@ 0x40
 80099ba:	4318      	orrs	r0, r3
 80099bc:	4770      	bx	lr
 80099be:	4b1d      	ldr	r3, [pc, #116]	@ (8009a34 <ai_array_to_buffer_fmt+0xc4>)
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d0ea      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 80099c4:	dd0e      	ble.n	80099e4 <ai_array_to_buffer_fmt+0x74>
 80099c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009a38 <ai_array_to_buffer_fmt+0xc8>)
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d0e6      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 80099cc:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d0e2      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 80099d4:	4b19      	ldr	r3, [pc, #100]	@ (8009a3c <ai_array_to_buffer_fmt+0xcc>)
 80099d6:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80099da:	429a      	cmp	r2, r3
 80099dc:	bf18      	it	ne
 80099de:	2340      	movne	r3, #64	@ 0x40
 80099e0:	4318      	orrs	r0, r3
 80099e2:	4770      	bx	lr
 80099e4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d0d6      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 80099ec:	3307      	adds	r3, #7
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d0d3      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 80099f2:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 80099f6:	429a      	cmp	r2, r3
 80099f8:	bf18      	it	ne
 80099fa:	2340      	movne	r3, #64	@ 0x40
 80099fc:	e7ce      	b.n	800999c <ai_array_to_buffer_fmt+0x2c>
 80099fe:	4b10      	ldr	r3, [pc, #64]	@ (8009a40 <ai_array_to_buffer_fmt+0xd0>)
 8009a00:	429a      	cmp	r2, r3
 8009a02:	bf18      	it	ne
 8009a04:	2340      	movne	r3, #64	@ 0x40
 8009a06:	e7c9      	b.n	800999c <ai_array_to_buffer_fmt+0x2c>
 8009a08:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d0c4      	beq.n	800999a <ai_array_to_buffer_fmt+0x2a>
 8009a10:	3380      	adds	r3, #128	@ 0x80
 8009a12:	429a      	cmp	r2, r3
 8009a14:	bf18      	it	ne
 8009a16:	2340      	movne	r3, #64	@ 0x40
 8009a18:	e7c0      	b.n	800999c <ai_array_to_buffer_fmt+0x2c>
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a44 <ai_array_to_buffer_fmt+0xd4>)
 8009a1c:	4003      	ands	r3, r0
 8009a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009a22:	e7bb      	b.n	800999c <ai_array_to_buffer_fmt+0x2c>
 8009a24:	00840040 	.word	0x00840040
 8009a28:	00040840 	.word	0x00040840
 8009a2c:	00041040 	.word	0x00041040
 8009a30:	00040447 	.word	0x00040447
 8009a34:	00840840 	.word	0x00840840
 8009a38:	00841040 	.word	0x00841040
 8009a3c:	0084084f 	.word	0x0084084f
 8009a40:	0004084f 	.word	0x0004084f
 8009a44:	00803fff 	.word	0x00803fff

08009a48 <ai_array_get_byte_size>:
 8009a48:	b319      	cbz	r1, 8009a92 <ai_array_get_byte_size+0x4a>
 8009a4a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009a4e:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8009a52:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 8009a56:	11c0      	asrs	r0, r0, #7
 8009a58:	fb03 f101 	mul.w	r1, r3, r1
 8009a5c:	2a04      	cmp	r2, #4
 8009a5e:	f101 0107 	add.w	r1, r1, #7
 8009a62:	f021 0107 	bic.w	r1, r1, #7
 8009a66:	fa21 f10c 	lsr.w	r1, r1, ip
 8009a6a:	d00b      	beq.n	8009a84 <ai_array_get_byte_size+0x3c>
 8009a6c:	2a08      	cmp	r2, #8
 8009a6e:	d002      	beq.n	8009a76 <ai_array_get_byte_size+0x2e>
 8009a70:	3107      	adds	r1, #7
 8009a72:	08c8      	lsrs	r0, r1, #3
 8009a74:	4770      	bx	lr
 8009a76:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009a7a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009a7e:	3107      	adds	r1, #7
 8009a80:	08c8      	lsrs	r0, r1, #3
 8009a82:	4770      	bx	lr
 8009a84:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8009a88:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8009a8c:	3107      	adds	r1, #7
 8009a8e:	08c8      	lsrs	r0, r1, #3
 8009a90:	4770      	bx	lr
 8009a92:	4608      	mov	r0, r1
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop

08009a98 <ai_array_get_data_byte_size>:
 8009a98:	b161      	cbz	r1, 8009ab4 <ai_array_get_data_byte_size+0x1c>
 8009a9a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009a9e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009aa2:	fb03 f101 	mul.w	r1, r3, r1
 8009aa6:	1dc8      	adds	r0, r1, #7
 8009aa8:	f020 0007 	bic.w	r0, r0, #7
 8009aac:	40d0      	lsrs	r0, r2
 8009aae:	3007      	adds	r0, #7
 8009ab0:	08c0      	lsrs	r0, r0, #3
 8009ab2:	4770      	bx	lr
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4770      	bx	lr

08009ab8 <ai_version_get>:
 8009ab8:	0212      	lsls	r2, r2, #8
 8009aba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009abe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8009ac2:	4770      	bx	lr

08009ac4 <get_tensor_byte_size>:
 8009ac4:	b430      	push	{r4, r5}
 8009ac6:	6985      	ldr	r5, [r0, #24]
 8009ac8:	68c4      	ldr	r4, [r0, #12]
 8009aca:	6941      	ldr	r1, [r0, #20]
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <get_tensor_byte_size+0x24>)
 8009ace:	6828      	ldr	r0, [r5, #0]
 8009ad0:	4a06      	ldr	r2, [pc, #24]	@ (8009aec <get_tensor_byte_size+0x28>)
 8009ad2:	4003      	ands	r3, r0
 8009ad4:	68c9      	ldr	r1, [r1, #12]
 8009ad6:	68e0      	ldr	r0, [r4, #12]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	fb01 f000 	mul.w	r0, r1, r0
 8009ade:	d101      	bne.n	8009ae4 <get_tensor_byte_size+0x20>
 8009ae0:	3007      	adds	r0, #7
 8009ae2:	08c0      	lsrs	r0, r0, #3
 8009ae4:	bc30      	pop	{r4, r5}
 8009ae6:	4770      	bx	lr
 8009ae8:	017fffff 	.word	0x017fffff
 8009aec:	000400c0 	.word	0x000400c0

08009af0 <__cvt>:
 8009af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af4:	ec57 6b10 	vmov	r6, r7, d0
 8009af8:	2f00      	cmp	r7, #0
 8009afa:	460c      	mov	r4, r1
 8009afc:	4619      	mov	r1, r3
 8009afe:	463b      	mov	r3, r7
 8009b00:	bfbb      	ittet	lt
 8009b02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009b06:	461f      	movlt	r7, r3
 8009b08:	2300      	movge	r3, #0
 8009b0a:	232d      	movlt	r3, #45	@ 0x2d
 8009b0c:	700b      	strb	r3, [r1, #0]
 8009b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009b14:	4691      	mov	r9, r2
 8009b16:	f023 0820 	bic.w	r8, r3, #32
 8009b1a:	bfbc      	itt	lt
 8009b1c:	4632      	movlt	r2, r6
 8009b1e:	4616      	movlt	r6, r2
 8009b20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b24:	d005      	beq.n	8009b32 <__cvt+0x42>
 8009b26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009b2a:	d100      	bne.n	8009b2e <__cvt+0x3e>
 8009b2c:	3401      	adds	r4, #1
 8009b2e:	2102      	movs	r1, #2
 8009b30:	e000      	b.n	8009b34 <__cvt+0x44>
 8009b32:	2103      	movs	r1, #3
 8009b34:	ab03      	add	r3, sp, #12
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	ab02      	add	r3, sp, #8
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	ec47 6b10 	vmov	d0, r6, r7
 8009b40:	4653      	mov	r3, sl
 8009b42:	4622      	mov	r2, r4
 8009b44:	f000 fef4 	bl	800a930 <_dtoa_r>
 8009b48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	d119      	bne.n	8009b84 <__cvt+0x94>
 8009b50:	f019 0f01 	tst.w	r9, #1
 8009b54:	d00e      	beq.n	8009b74 <__cvt+0x84>
 8009b56:	eb00 0904 	add.w	r9, r0, r4
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	f7f7 f839 	bl	8000bd8 <__aeabi_dcmpeq>
 8009b66:	b108      	cbz	r0, 8009b6c <__cvt+0x7c>
 8009b68:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b6c:	2230      	movs	r2, #48	@ 0x30
 8009b6e:	9b03      	ldr	r3, [sp, #12]
 8009b70:	454b      	cmp	r3, r9
 8009b72:	d31e      	bcc.n	8009bb2 <__cvt+0xc2>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b78:	1b5b      	subs	r3, r3, r5
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	b004      	add	sp, #16
 8009b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b88:	eb00 0904 	add.w	r9, r0, r4
 8009b8c:	d1e5      	bne.n	8009b5a <__cvt+0x6a>
 8009b8e:	7803      	ldrb	r3, [r0, #0]
 8009b90:	2b30      	cmp	r3, #48	@ 0x30
 8009b92:	d10a      	bne.n	8009baa <__cvt+0xba>
 8009b94:	2200      	movs	r2, #0
 8009b96:	2300      	movs	r3, #0
 8009b98:	4630      	mov	r0, r6
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	f7f7 f81c 	bl	8000bd8 <__aeabi_dcmpeq>
 8009ba0:	b918      	cbnz	r0, 8009baa <__cvt+0xba>
 8009ba2:	f1c4 0401 	rsb	r4, r4, #1
 8009ba6:	f8ca 4000 	str.w	r4, [sl]
 8009baa:	f8da 3000 	ldr.w	r3, [sl]
 8009bae:	4499      	add	r9, r3
 8009bb0:	e7d3      	b.n	8009b5a <__cvt+0x6a>
 8009bb2:	1c59      	adds	r1, r3, #1
 8009bb4:	9103      	str	r1, [sp, #12]
 8009bb6:	701a      	strb	r2, [r3, #0]
 8009bb8:	e7d9      	b.n	8009b6e <__cvt+0x7e>

08009bba <__exponent>:
 8009bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	bfba      	itte	lt
 8009bc0:	4249      	neglt	r1, r1
 8009bc2:	232d      	movlt	r3, #45	@ 0x2d
 8009bc4:	232b      	movge	r3, #43	@ 0x2b
 8009bc6:	2909      	cmp	r1, #9
 8009bc8:	7002      	strb	r2, [r0, #0]
 8009bca:	7043      	strb	r3, [r0, #1]
 8009bcc:	dd29      	ble.n	8009c22 <__exponent+0x68>
 8009bce:	f10d 0307 	add.w	r3, sp, #7
 8009bd2:	461d      	mov	r5, r3
 8009bd4:	270a      	movs	r7, #10
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	fbb1 f6f7 	udiv	r6, r1, r7
 8009bdc:	fb07 1416 	mls	r4, r7, r6, r1
 8009be0:	3430      	adds	r4, #48	@ 0x30
 8009be2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009be6:	460c      	mov	r4, r1
 8009be8:	2c63      	cmp	r4, #99	@ 0x63
 8009bea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009bee:	4631      	mov	r1, r6
 8009bf0:	dcf1      	bgt.n	8009bd6 <__exponent+0x1c>
 8009bf2:	3130      	adds	r1, #48	@ 0x30
 8009bf4:	1e94      	subs	r4, r2, #2
 8009bf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009bfa:	1c41      	adds	r1, r0, #1
 8009bfc:	4623      	mov	r3, r4
 8009bfe:	42ab      	cmp	r3, r5
 8009c00:	d30a      	bcc.n	8009c18 <__exponent+0x5e>
 8009c02:	f10d 0309 	add.w	r3, sp, #9
 8009c06:	1a9b      	subs	r3, r3, r2
 8009c08:	42ac      	cmp	r4, r5
 8009c0a:	bf88      	it	hi
 8009c0c:	2300      	movhi	r3, #0
 8009c0e:	3302      	adds	r3, #2
 8009c10:	4403      	add	r3, r0
 8009c12:	1a18      	subs	r0, r3, r0
 8009c14:	b003      	add	sp, #12
 8009c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009c1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009c20:	e7ed      	b.n	8009bfe <__exponent+0x44>
 8009c22:	2330      	movs	r3, #48	@ 0x30
 8009c24:	3130      	adds	r1, #48	@ 0x30
 8009c26:	7083      	strb	r3, [r0, #2]
 8009c28:	70c1      	strb	r1, [r0, #3]
 8009c2a:	1d03      	adds	r3, r0, #4
 8009c2c:	e7f1      	b.n	8009c12 <__exponent+0x58>
	...

08009c30 <_printf_float>:
 8009c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c34:	b08d      	sub	sp, #52	@ 0x34
 8009c36:	460c      	mov	r4, r1
 8009c38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009c3c:	4616      	mov	r6, r2
 8009c3e:	461f      	mov	r7, r3
 8009c40:	4605      	mov	r5, r0
 8009c42:	f000 fd9d 	bl	800a780 <_localeconv_r>
 8009c46:	6803      	ldr	r3, [r0, #0]
 8009c48:	9304      	str	r3, [sp, #16]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7f6 fb98 	bl	8000380 <strlen>
 8009c50:	2300      	movs	r3, #0
 8009c52:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c54:	f8d8 3000 	ldr.w	r3, [r8]
 8009c58:	9005      	str	r0, [sp, #20]
 8009c5a:	3307      	adds	r3, #7
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	f103 0208 	add.w	r2, r3, #8
 8009c64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c68:	f8d4 b000 	ldr.w	fp, [r4]
 8009c6c:	f8c8 2000 	str.w	r2, [r8]
 8009c70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009c78:	9307      	str	r3, [sp, #28]
 8009c7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c86:	4b9c      	ldr	r3, [pc, #624]	@ (8009ef8 <_printf_float+0x2c8>)
 8009c88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c8c:	f7f6 ffd6 	bl	8000c3c <__aeabi_dcmpun>
 8009c90:	bb70      	cbnz	r0, 8009cf0 <_printf_float+0xc0>
 8009c92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c96:	4b98      	ldr	r3, [pc, #608]	@ (8009ef8 <_printf_float+0x2c8>)
 8009c98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c9c:	f7f6 ffb0 	bl	8000c00 <__aeabi_dcmple>
 8009ca0:	bb30      	cbnz	r0, 8009cf0 <_printf_float+0xc0>
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	4649      	mov	r1, r9
 8009caa:	f7f6 ff9f 	bl	8000bec <__aeabi_dcmplt>
 8009cae:	b110      	cbz	r0, 8009cb6 <_printf_float+0x86>
 8009cb0:	232d      	movs	r3, #45	@ 0x2d
 8009cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cb6:	4a91      	ldr	r2, [pc, #580]	@ (8009efc <_printf_float+0x2cc>)
 8009cb8:	4b91      	ldr	r3, [pc, #580]	@ (8009f00 <_printf_float+0x2d0>)
 8009cba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009cbe:	bf94      	ite	ls
 8009cc0:	4690      	movls	r8, r2
 8009cc2:	4698      	movhi	r8, r3
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	6123      	str	r3, [r4, #16]
 8009cc8:	f02b 0304 	bic.w	r3, fp, #4
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	f04f 0900 	mov.w	r9, #0
 8009cd2:	9700      	str	r7, [sp, #0]
 8009cd4:	4633      	mov	r3, r6
 8009cd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 fa7c 	bl	800a1d8 <_printf_common>
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	f040 808d 	bne.w	8009e00 <_printf_float+0x1d0>
 8009ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009cea:	b00d      	add	sp, #52	@ 0x34
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf0:	4642      	mov	r2, r8
 8009cf2:	464b      	mov	r3, r9
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	f7f6 ffa0 	bl	8000c3c <__aeabi_dcmpun>
 8009cfc:	b140      	cbz	r0, 8009d10 <_printf_float+0xe0>
 8009cfe:	464b      	mov	r3, r9
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	bfbc      	itt	lt
 8009d04:	232d      	movlt	r3, #45	@ 0x2d
 8009d06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8009f04 <_printf_float+0x2d4>)
 8009d0c:	4b7e      	ldr	r3, [pc, #504]	@ (8009f08 <_printf_float+0x2d8>)
 8009d0e:	e7d4      	b.n	8009cba <_printf_float+0x8a>
 8009d10:	6863      	ldr	r3, [r4, #4]
 8009d12:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009d16:	9206      	str	r2, [sp, #24]
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	d13b      	bne.n	8009d94 <_printf_float+0x164>
 8009d1c:	2306      	movs	r3, #6
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009d24:	2300      	movs	r3, #0
 8009d26:	6022      	str	r2, [r4, #0]
 8009d28:	9303      	str	r3, [sp, #12]
 8009d2a:	ab0a      	add	r3, sp, #40	@ 0x28
 8009d2c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009d30:	ab09      	add	r3, sp, #36	@ 0x24
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	6861      	ldr	r1, [r4, #4]
 8009d36:	ec49 8b10 	vmov	d0, r8, r9
 8009d3a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f7ff fed6 	bl	8009af0 <__cvt>
 8009d44:	9b06      	ldr	r3, [sp, #24]
 8009d46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d48:	2b47      	cmp	r3, #71	@ 0x47
 8009d4a:	4680      	mov	r8, r0
 8009d4c:	d129      	bne.n	8009da2 <_printf_float+0x172>
 8009d4e:	1cc8      	adds	r0, r1, #3
 8009d50:	db02      	blt.n	8009d58 <_printf_float+0x128>
 8009d52:	6863      	ldr	r3, [r4, #4]
 8009d54:	4299      	cmp	r1, r3
 8009d56:	dd41      	ble.n	8009ddc <_printf_float+0x1ac>
 8009d58:	f1aa 0a02 	sub.w	sl, sl, #2
 8009d5c:	fa5f fa8a 	uxtb.w	sl, sl
 8009d60:	3901      	subs	r1, #1
 8009d62:	4652      	mov	r2, sl
 8009d64:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009d68:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d6a:	f7ff ff26 	bl	8009bba <__exponent>
 8009d6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d70:	1813      	adds	r3, r2, r0
 8009d72:	2a01      	cmp	r2, #1
 8009d74:	4681      	mov	r9, r0
 8009d76:	6123      	str	r3, [r4, #16]
 8009d78:	dc02      	bgt.n	8009d80 <_printf_float+0x150>
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	07d2      	lsls	r2, r2, #31
 8009d7e:	d501      	bpl.n	8009d84 <_printf_float+0x154>
 8009d80:	3301      	adds	r3, #1
 8009d82:	6123      	str	r3, [r4, #16]
 8009d84:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d0a2      	beq.n	8009cd2 <_printf_float+0xa2>
 8009d8c:	232d      	movs	r3, #45	@ 0x2d
 8009d8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d92:	e79e      	b.n	8009cd2 <_printf_float+0xa2>
 8009d94:	9a06      	ldr	r2, [sp, #24]
 8009d96:	2a47      	cmp	r2, #71	@ 0x47
 8009d98:	d1c2      	bne.n	8009d20 <_printf_float+0xf0>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1c0      	bne.n	8009d20 <_printf_float+0xf0>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e7bd      	b.n	8009d1e <_printf_float+0xee>
 8009da2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009da6:	d9db      	bls.n	8009d60 <_printf_float+0x130>
 8009da8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009dac:	d118      	bne.n	8009de0 <_printf_float+0x1b0>
 8009dae:	2900      	cmp	r1, #0
 8009db0:	6863      	ldr	r3, [r4, #4]
 8009db2:	dd0b      	ble.n	8009dcc <_printf_float+0x19c>
 8009db4:	6121      	str	r1, [r4, #16]
 8009db6:	b913      	cbnz	r3, 8009dbe <_printf_float+0x18e>
 8009db8:	6822      	ldr	r2, [r4, #0]
 8009dba:	07d0      	lsls	r0, r2, #31
 8009dbc:	d502      	bpl.n	8009dc4 <_printf_float+0x194>
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	440b      	add	r3, r1
 8009dc2:	6123      	str	r3, [r4, #16]
 8009dc4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009dc6:	f04f 0900 	mov.w	r9, #0
 8009dca:	e7db      	b.n	8009d84 <_printf_float+0x154>
 8009dcc:	b913      	cbnz	r3, 8009dd4 <_printf_float+0x1a4>
 8009dce:	6822      	ldr	r2, [r4, #0]
 8009dd0:	07d2      	lsls	r2, r2, #31
 8009dd2:	d501      	bpl.n	8009dd8 <_printf_float+0x1a8>
 8009dd4:	3302      	adds	r3, #2
 8009dd6:	e7f4      	b.n	8009dc2 <_printf_float+0x192>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e7f2      	b.n	8009dc2 <_printf_float+0x192>
 8009ddc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009de0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009de2:	4299      	cmp	r1, r3
 8009de4:	db05      	blt.n	8009df2 <_printf_float+0x1c2>
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	6121      	str	r1, [r4, #16]
 8009dea:	07d8      	lsls	r0, r3, #31
 8009dec:	d5ea      	bpl.n	8009dc4 <_printf_float+0x194>
 8009dee:	1c4b      	adds	r3, r1, #1
 8009df0:	e7e7      	b.n	8009dc2 <_printf_float+0x192>
 8009df2:	2900      	cmp	r1, #0
 8009df4:	bfd4      	ite	le
 8009df6:	f1c1 0202 	rsble	r2, r1, #2
 8009dfa:	2201      	movgt	r2, #1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	e7e0      	b.n	8009dc2 <_printf_float+0x192>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	055a      	lsls	r2, r3, #21
 8009e04:	d407      	bmi.n	8009e16 <_printf_float+0x1e6>
 8009e06:	6923      	ldr	r3, [r4, #16]
 8009e08:	4642      	mov	r2, r8
 8009e0a:	4631      	mov	r1, r6
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b8      	blx	r7
 8009e10:	3001      	adds	r0, #1
 8009e12:	d12b      	bne.n	8009e6c <_printf_float+0x23c>
 8009e14:	e767      	b.n	8009ce6 <_printf_float+0xb6>
 8009e16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009e1a:	f240 80dd 	bls.w	8009fd8 <_printf_float+0x3a8>
 8009e1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	f7f6 fed7 	bl	8000bd8 <__aeabi_dcmpeq>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d033      	beq.n	8009e96 <_printf_float+0x266>
 8009e2e:	4a37      	ldr	r2, [pc, #220]	@ (8009f0c <_printf_float+0x2dc>)
 8009e30:	2301      	movs	r3, #1
 8009e32:	4631      	mov	r1, r6
 8009e34:	4628      	mov	r0, r5
 8009e36:	47b8      	blx	r7
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f43f af54 	beq.w	8009ce6 <_printf_float+0xb6>
 8009e3e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009e42:	4543      	cmp	r3, r8
 8009e44:	db02      	blt.n	8009e4c <_printf_float+0x21c>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	07d8      	lsls	r0, r3, #31
 8009e4a:	d50f      	bpl.n	8009e6c <_printf_float+0x23c>
 8009e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f af45 	beq.w	8009ce6 <_printf_float+0xb6>
 8009e5c:	f04f 0900 	mov.w	r9, #0
 8009e60:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009e64:	f104 0a1a 	add.w	sl, r4, #26
 8009e68:	45c8      	cmp	r8, r9
 8009e6a:	dc09      	bgt.n	8009e80 <_printf_float+0x250>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	079b      	lsls	r3, r3, #30
 8009e70:	f100 8103 	bmi.w	800a07a <_printf_float+0x44a>
 8009e74:	68e0      	ldr	r0, [r4, #12]
 8009e76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e78:	4298      	cmp	r0, r3
 8009e7a:	bfb8      	it	lt
 8009e7c:	4618      	movlt	r0, r3
 8009e7e:	e734      	b.n	8009cea <_printf_float+0xba>
 8009e80:	2301      	movs	r3, #1
 8009e82:	4652      	mov	r2, sl
 8009e84:	4631      	mov	r1, r6
 8009e86:	4628      	mov	r0, r5
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f43f af2b 	beq.w	8009ce6 <_printf_float+0xb6>
 8009e90:	f109 0901 	add.w	r9, r9, #1
 8009e94:	e7e8      	b.n	8009e68 <_printf_float+0x238>
 8009e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	dc39      	bgt.n	8009f10 <_printf_float+0x2e0>
 8009e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8009f0c <_printf_float+0x2dc>)
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b8      	blx	r7
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	f43f af1d 	beq.w	8009ce6 <_printf_float+0xb6>
 8009eac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009eb0:	ea59 0303 	orrs.w	r3, r9, r3
 8009eb4:	d102      	bne.n	8009ebc <_printf_float+0x28c>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	07d9      	lsls	r1, r3, #31
 8009eba:	d5d7      	bpl.n	8009e6c <_printf_float+0x23c>
 8009ebc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	f43f af0d 	beq.w	8009ce6 <_printf_float+0xb6>
 8009ecc:	f04f 0a00 	mov.w	sl, #0
 8009ed0:	f104 0b1a 	add.w	fp, r4, #26
 8009ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ed6:	425b      	negs	r3, r3
 8009ed8:	4553      	cmp	r3, sl
 8009eda:	dc01      	bgt.n	8009ee0 <_printf_float+0x2b0>
 8009edc:	464b      	mov	r3, r9
 8009ede:	e793      	b.n	8009e08 <_printf_float+0x1d8>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	465a      	mov	r2, fp
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	f43f aefb 	beq.w	8009ce6 <_printf_float+0xb6>
 8009ef0:	f10a 0a01 	add.w	sl, sl, #1
 8009ef4:	e7ee      	b.n	8009ed4 <_printf_float+0x2a4>
 8009ef6:	bf00      	nop
 8009ef8:	7fefffff 	.word	0x7fefffff
 8009efc:	0803ab28 	.word	0x0803ab28
 8009f00:	0803ab2c 	.word	0x0803ab2c
 8009f04:	0803ab30 	.word	0x0803ab30
 8009f08:	0803ab34 	.word	0x0803ab34
 8009f0c:	0803ab38 	.word	0x0803ab38
 8009f10:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f12:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f16:	4553      	cmp	r3, sl
 8009f18:	bfa8      	it	ge
 8009f1a:	4653      	movge	r3, sl
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	4699      	mov	r9, r3
 8009f20:	dc36      	bgt.n	8009f90 <_printf_float+0x360>
 8009f22:	f04f 0b00 	mov.w	fp, #0
 8009f26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f2a:	f104 021a 	add.w	r2, r4, #26
 8009f2e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009f30:	9306      	str	r3, [sp, #24]
 8009f32:	eba3 0309 	sub.w	r3, r3, r9
 8009f36:	455b      	cmp	r3, fp
 8009f38:	dc31      	bgt.n	8009f9e <_printf_float+0x36e>
 8009f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3c:	459a      	cmp	sl, r3
 8009f3e:	dc3a      	bgt.n	8009fb6 <_printf_float+0x386>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	07da      	lsls	r2, r3, #31
 8009f44:	d437      	bmi.n	8009fb6 <_printf_float+0x386>
 8009f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f48:	ebaa 0903 	sub.w	r9, sl, r3
 8009f4c:	9b06      	ldr	r3, [sp, #24]
 8009f4e:	ebaa 0303 	sub.w	r3, sl, r3
 8009f52:	4599      	cmp	r9, r3
 8009f54:	bfa8      	it	ge
 8009f56:	4699      	movge	r9, r3
 8009f58:	f1b9 0f00 	cmp.w	r9, #0
 8009f5c:	dc33      	bgt.n	8009fc6 <_printf_float+0x396>
 8009f5e:	f04f 0800 	mov.w	r8, #0
 8009f62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f66:	f104 0b1a 	add.w	fp, r4, #26
 8009f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8009f70:	eba3 0309 	sub.w	r3, r3, r9
 8009f74:	4543      	cmp	r3, r8
 8009f76:	f77f af79 	ble.w	8009e6c <_printf_float+0x23c>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	465a      	mov	r2, fp
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b8      	blx	r7
 8009f84:	3001      	adds	r0, #1
 8009f86:	f43f aeae 	beq.w	8009ce6 <_printf_float+0xb6>
 8009f8a:	f108 0801 	add.w	r8, r8, #1
 8009f8e:	e7ec      	b.n	8009f6a <_printf_float+0x33a>
 8009f90:	4642      	mov	r2, r8
 8009f92:	4631      	mov	r1, r6
 8009f94:	4628      	mov	r0, r5
 8009f96:	47b8      	blx	r7
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d1c2      	bne.n	8009f22 <_printf_float+0x2f2>
 8009f9c:	e6a3      	b.n	8009ce6 <_printf_float+0xb6>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	4631      	mov	r1, r6
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	9206      	str	r2, [sp, #24]
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	f43f ae9c 	beq.w	8009ce6 <_printf_float+0xb6>
 8009fae:	9a06      	ldr	r2, [sp, #24]
 8009fb0:	f10b 0b01 	add.w	fp, fp, #1
 8009fb4:	e7bb      	b.n	8009f2e <_printf_float+0x2fe>
 8009fb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d1c0      	bne.n	8009f46 <_printf_float+0x316>
 8009fc4:	e68f      	b.n	8009ce6 <_printf_float+0xb6>
 8009fc6:	9a06      	ldr	r2, [sp, #24]
 8009fc8:	464b      	mov	r3, r9
 8009fca:	4442      	add	r2, r8
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4628      	mov	r0, r5
 8009fd0:	47b8      	blx	r7
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d1c3      	bne.n	8009f5e <_printf_float+0x32e>
 8009fd6:	e686      	b.n	8009ce6 <_printf_float+0xb6>
 8009fd8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009fdc:	f1ba 0f01 	cmp.w	sl, #1
 8009fe0:	dc01      	bgt.n	8009fe6 <_printf_float+0x3b6>
 8009fe2:	07db      	lsls	r3, r3, #31
 8009fe4:	d536      	bpl.n	800a054 <_printf_float+0x424>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	4642      	mov	r2, r8
 8009fea:	4631      	mov	r1, r6
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b8      	blx	r7
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	f43f ae78 	beq.w	8009ce6 <_printf_float+0xb6>
 8009ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ffa:	4631      	mov	r1, r6
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	47b8      	blx	r7
 800a000:	3001      	adds	r0, #1
 800a002:	f43f ae70 	beq.w	8009ce6 <_printf_float+0xb6>
 800a006:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a00a:	2200      	movs	r2, #0
 800a00c:	2300      	movs	r3, #0
 800a00e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a012:	f7f6 fde1 	bl	8000bd8 <__aeabi_dcmpeq>
 800a016:	b9c0      	cbnz	r0, 800a04a <_printf_float+0x41a>
 800a018:	4653      	mov	r3, sl
 800a01a:	f108 0201 	add.w	r2, r8, #1
 800a01e:	4631      	mov	r1, r6
 800a020:	4628      	mov	r0, r5
 800a022:	47b8      	blx	r7
 800a024:	3001      	adds	r0, #1
 800a026:	d10c      	bne.n	800a042 <_printf_float+0x412>
 800a028:	e65d      	b.n	8009ce6 <_printf_float+0xb6>
 800a02a:	2301      	movs	r3, #1
 800a02c:	465a      	mov	r2, fp
 800a02e:	4631      	mov	r1, r6
 800a030:	4628      	mov	r0, r5
 800a032:	47b8      	blx	r7
 800a034:	3001      	adds	r0, #1
 800a036:	f43f ae56 	beq.w	8009ce6 <_printf_float+0xb6>
 800a03a:	f108 0801 	add.w	r8, r8, #1
 800a03e:	45d0      	cmp	r8, sl
 800a040:	dbf3      	blt.n	800a02a <_printf_float+0x3fa>
 800a042:	464b      	mov	r3, r9
 800a044:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a048:	e6df      	b.n	8009e0a <_printf_float+0x1da>
 800a04a:	f04f 0800 	mov.w	r8, #0
 800a04e:	f104 0b1a 	add.w	fp, r4, #26
 800a052:	e7f4      	b.n	800a03e <_printf_float+0x40e>
 800a054:	2301      	movs	r3, #1
 800a056:	4642      	mov	r2, r8
 800a058:	e7e1      	b.n	800a01e <_printf_float+0x3ee>
 800a05a:	2301      	movs	r3, #1
 800a05c:	464a      	mov	r2, r9
 800a05e:	4631      	mov	r1, r6
 800a060:	4628      	mov	r0, r5
 800a062:	47b8      	blx	r7
 800a064:	3001      	adds	r0, #1
 800a066:	f43f ae3e 	beq.w	8009ce6 <_printf_float+0xb6>
 800a06a:	f108 0801 	add.w	r8, r8, #1
 800a06e:	68e3      	ldr	r3, [r4, #12]
 800a070:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a072:	1a5b      	subs	r3, r3, r1
 800a074:	4543      	cmp	r3, r8
 800a076:	dcf0      	bgt.n	800a05a <_printf_float+0x42a>
 800a078:	e6fc      	b.n	8009e74 <_printf_float+0x244>
 800a07a:	f04f 0800 	mov.w	r8, #0
 800a07e:	f104 0919 	add.w	r9, r4, #25
 800a082:	e7f4      	b.n	800a06e <_printf_float+0x43e>

0800a084 <malloc>:
 800a084:	4b02      	ldr	r3, [pc, #8]	@ (800a090 <malloc+0xc>)
 800a086:	4601      	mov	r1, r0
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f000 b825 	b.w	800a0d8 <_malloc_r>
 800a08e:	bf00      	nop
 800a090:	20000b34 	.word	0x20000b34

0800a094 <sbrk_aligned>:
 800a094:	b570      	push	{r4, r5, r6, lr}
 800a096:	4e0f      	ldr	r6, [pc, #60]	@ (800a0d4 <sbrk_aligned+0x40>)
 800a098:	460c      	mov	r4, r1
 800a09a:	6831      	ldr	r1, [r6, #0]
 800a09c:	4605      	mov	r5, r0
 800a09e:	b911      	cbnz	r1, 800a0a6 <sbrk_aligned+0x12>
 800a0a0:	f000 fb72 	bl	800a788 <_sbrk_r>
 800a0a4:	6030      	str	r0, [r6, #0]
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f000 fb6d 	bl	800a788 <_sbrk_r>
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	d103      	bne.n	800a0ba <sbrk_aligned+0x26>
 800a0b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	bd70      	pop	{r4, r5, r6, pc}
 800a0ba:	1cc4      	adds	r4, r0, #3
 800a0bc:	f024 0403 	bic.w	r4, r4, #3
 800a0c0:	42a0      	cmp	r0, r4
 800a0c2:	d0f8      	beq.n	800a0b6 <sbrk_aligned+0x22>
 800a0c4:	1a21      	subs	r1, r4, r0
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 fb5e 	bl	800a788 <_sbrk_r>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d1f2      	bne.n	800a0b6 <sbrk_aligned+0x22>
 800a0d0:	e7ef      	b.n	800a0b2 <sbrk_aligned+0x1e>
 800a0d2:	bf00      	nop
 800a0d4:	20010558 	.word	0x20010558

0800a0d8 <_malloc_r>:
 800a0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0dc:	1ccd      	adds	r5, r1, #3
 800a0de:	f025 0503 	bic.w	r5, r5, #3
 800a0e2:	3508      	adds	r5, #8
 800a0e4:	2d0c      	cmp	r5, #12
 800a0e6:	bf38      	it	cc
 800a0e8:	250c      	movcc	r5, #12
 800a0ea:	2d00      	cmp	r5, #0
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	db01      	blt.n	800a0f4 <_malloc_r+0x1c>
 800a0f0:	42a9      	cmp	r1, r5
 800a0f2:	d904      	bls.n	800a0fe <_malloc_r+0x26>
 800a0f4:	230c      	movs	r3, #12
 800a0f6:	6033      	str	r3, [r6, #0]
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1d4 <_malloc_r+0xfc>
 800a102:	f000 f9f7 	bl	800a4f4 <__malloc_lock>
 800a106:	f8d8 3000 	ldr.w	r3, [r8]
 800a10a:	461c      	mov	r4, r3
 800a10c:	bb44      	cbnz	r4, 800a160 <_malloc_r+0x88>
 800a10e:	4629      	mov	r1, r5
 800a110:	4630      	mov	r0, r6
 800a112:	f7ff ffbf 	bl	800a094 <sbrk_aligned>
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	4604      	mov	r4, r0
 800a11a:	d158      	bne.n	800a1ce <_malloc_r+0xf6>
 800a11c:	f8d8 4000 	ldr.w	r4, [r8]
 800a120:	4627      	mov	r7, r4
 800a122:	2f00      	cmp	r7, #0
 800a124:	d143      	bne.n	800a1ae <_malloc_r+0xd6>
 800a126:	2c00      	cmp	r4, #0
 800a128:	d04b      	beq.n	800a1c2 <_malloc_r+0xea>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	4639      	mov	r1, r7
 800a12e:	4630      	mov	r0, r6
 800a130:	eb04 0903 	add.w	r9, r4, r3
 800a134:	f000 fb28 	bl	800a788 <_sbrk_r>
 800a138:	4581      	cmp	r9, r0
 800a13a:	d142      	bne.n	800a1c2 <_malloc_r+0xea>
 800a13c:	6821      	ldr	r1, [r4, #0]
 800a13e:	1a6d      	subs	r5, r5, r1
 800a140:	4629      	mov	r1, r5
 800a142:	4630      	mov	r0, r6
 800a144:	f7ff ffa6 	bl	800a094 <sbrk_aligned>
 800a148:	3001      	adds	r0, #1
 800a14a:	d03a      	beq.n	800a1c2 <_malloc_r+0xea>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	442b      	add	r3, r5
 800a150:	6023      	str	r3, [r4, #0]
 800a152:	f8d8 3000 	ldr.w	r3, [r8]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	bb62      	cbnz	r2, 800a1b4 <_malloc_r+0xdc>
 800a15a:	f8c8 7000 	str.w	r7, [r8]
 800a15e:	e00f      	b.n	800a180 <_malloc_r+0xa8>
 800a160:	6822      	ldr	r2, [r4, #0]
 800a162:	1b52      	subs	r2, r2, r5
 800a164:	d420      	bmi.n	800a1a8 <_malloc_r+0xd0>
 800a166:	2a0b      	cmp	r2, #11
 800a168:	d917      	bls.n	800a19a <_malloc_r+0xc2>
 800a16a:	1961      	adds	r1, r4, r5
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	6025      	str	r5, [r4, #0]
 800a170:	bf18      	it	ne
 800a172:	6059      	strne	r1, [r3, #4]
 800a174:	6863      	ldr	r3, [r4, #4]
 800a176:	bf08      	it	eq
 800a178:	f8c8 1000 	streq.w	r1, [r8]
 800a17c:	5162      	str	r2, [r4, r5]
 800a17e:	604b      	str	r3, [r1, #4]
 800a180:	4630      	mov	r0, r6
 800a182:	f000 f9bd 	bl	800a500 <__malloc_unlock>
 800a186:	f104 000b 	add.w	r0, r4, #11
 800a18a:	1d23      	adds	r3, r4, #4
 800a18c:	f020 0007 	bic.w	r0, r0, #7
 800a190:	1ac2      	subs	r2, r0, r3
 800a192:	bf1c      	itt	ne
 800a194:	1a1b      	subne	r3, r3, r0
 800a196:	50a3      	strne	r3, [r4, r2]
 800a198:	e7af      	b.n	800a0fa <_malloc_r+0x22>
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	bf0c      	ite	eq
 800a1a0:	f8c8 2000 	streq.w	r2, [r8]
 800a1a4:	605a      	strne	r2, [r3, #4]
 800a1a6:	e7eb      	b.n	800a180 <_malloc_r+0xa8>
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	6864      	ldr	r4, [r4, #4]
 800a1ac:	e7ae      	b.n	800a10c <_malloc_r+0x34>
 800a1ae:	463c      	mov	r4, r7
 800a1b0:	687f      	ldr	r7, [r7, #4]
 800a1b2:	e7b6      	b.n	800a122 <_malloc_r+0x4a>
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d1fb      	bne.n	800a1b4 <_malloc_r+0xdc>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	6053      	str	r3, [r2, #4]
 800a1c0:	e7de      	b.n	800a180 <_malloc_r+0xa8>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	6033      	str	r3, [r6, #0]
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 f99a 	bl	800a500 <__malloc_unlock>
 800a1cc:	e794      	b.n	800a0f8 <_malloc_r+0x20>
 800a1ce:	6005      	str	r5, [r0, #0]
 800a1d0:	e7d6      	b.n	800a180 <_malloc_r+0xa8>
 800a1d2:	bf00      	nop
 800a1d4:	2001055c 	.word	0x2001055c

0800a1d8 <_printf_common>:
 800a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	4616      	mov	r6, r2
 800a1de:	4698      	mov	r8, r3
 800a1e0:	688a      	ldr	r2, [r1, #8]
 800a1e2:	690b      	ldr	r3, [r1, #16]
 800a1e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	bfb8      	it	lt
 800a1ec:	4613      	movlt	r3, r2
 800a1ee:	6033      	str	r3, [r6, #0]
 800a1f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	b10a      	cbz	r2, 800a1fe <_printf_common+0x26>
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	0699      	lsls	r1, r3, #26
 800a202:	bf42      	ittt	mi
 800a204:	6833      	ldrmi	r3, [r6, #0]
 800a206:	3302      	addmi	r3, #2
 800a208:	6033      	strmi	r3, [r6, #0]
 800a20a:	6825      	ldr	r5, [r4, #0]
 800a20c:	f015 0506 	ands.w	r5, r5, #6
 800a210:	d106      	bne.n	800a220 <_printf_common+0x48>
 800a212:	f104 0a19 	add.w	sl, r4, #25
 800a216:	68e3      	ldr	r3, [r4, #12]
 800a218:	6832      	ldr	r2, [r6, #0]
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	42ab      	cmp	r3, r5
 800a21e:	dc26      	bgt.n	800a26e <_printf_common+0x96>
 800a220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	3b00      	subs	r3, #0
 800a228:	bf18      	it	ne
 800a22a:	2301      	movne	r3, #1
 800a22c:	0692      	lsls	r2, r2, #26
 800a22e:	d42b      	bmi.n	800a288 <_printf_common+0xb0>
 800a230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a234:	4641      	mov	r1, r8
 800a236:	4638      	mov	r0, r7
 800a238:	47c8      	blx	r9
 800a23a:	3001      	adds	r0, #1
 800a23c:	d01e      	beq.n	800a27c <_printf_common+0xa4>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	6922      	ldr	r2, [r4, #16]
 800a242:	f003 0306 	and.w	r3, r3, #6
 800a246:	2b04      	cmp	r3, #4
 800a248:	bf02      	ittt	eq
 800a24a:	68e5      	ldreq	r5, [r4, #12]
 800a24c:	6833      	ldreq	r3, [r6, #0]
 800a24e:	1aed      	subeq	r5, r5, r3
 800a250:	68a3      	ldr	r3, [r4, #8]
 800a252:	bf0c      	ite	eq
 800a254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a258:	2500      	movne	r5, #0
 800a25a:	4293      	cmp	r3, r2
 800a25c:	bfc4      	itt	gt
 800a25e:	1a9b      	subgt	r3, r3, r2
 800a260:	18ed      	addgt	r5, r5, r3
 800a262:	2600      	movs	r6, #0
 800a264:	341a      	adds	r4, #26
 800a266:	42b5      	cmp	r5, r6
 800a268:	d11a      	bne.n	800a2a0 <_printf_common+0xc8>
 800a26a:	2000      	movs	r0, #0
 800a26c:	e008      	b.n	800a280 <_printf_common+0xa8>
 800a26e:	2301      	movs	r3, #1
 800a270:	4652      	mov	r2, sl
 800a272:	4641      	mov	r1, r8
 800a274:	4638      	mov	r0, r7
 800a276:	47c8      	blx	r9
 800a278:	3001      	adds	r0, #1
 800a27a:	d103      	bne.n	800a284 <_printf_common+0xac>
 800a27c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a284:	3501      	adds	r5, #1
 800a286:	e7c6      	b.n	800a216 <_printf_common+0x3e>
 800a288:	18e1      	adds	r1, r4, r3
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	2030      	movs	r0, #48	@ 0x30
 800a28e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a292:	4422      	add	r2, r4
 800a294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a29c:	3302      	adds	r3, #2
 800a29e:	e7c7      	b.n	800a230 <_printf_common+0x58>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	47c8      	blx	r9
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d0e6      	beq.n	800a27c <_printf_common+0xa4>
 800a2ae:	3601      	adds	r6, #1
 800a2b0:	e7d9      	b.n	800a266 <_printf_common+0x8e>
	...

0800a2b4 <_printf_i>:
 800a2b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	7e0f      	ldrb	r7, [r1, #24]
 800a2ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2bc:	2f78      	cmp	r7, #120	@ 0x78
 800a2be:	4691      	mov	r9, r2
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	469a      	mov	sl, r3
 800a2c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2ca:	d807      	bhi.n	800a2dc <_printf_i+0x28>
 800a2cc:	2f62      	cmp	r7, #98	@ 0x62
 800a2ce:	d80a      	bhi.n	800a2e6 <_printf_i+0x32>
 800a2d0:	2f00      	cmp	r7, #0
 800a2d2:	f000 80d2 	beq.w	800a47a <_printf_i+0x1c6>
 800a2d6:	2f58      	cmp	r7, #88	@ 0x58
 800a2d8:	f000 80b9 	beq.w	800a44e <_printf_i+0x19a>
 800a2dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2e4:	e03a      	b.n	800a35c <_printf_i+0xa8>
 800a2e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2ea:	2b15      	cmp	r3, #21
 800a2ec:	d8f6      	bhi.n	800a2dc <_printf_i+0x28>
 800a2ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a2f4 <_printf_i+0x40>)
 800a2f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2f4:	0800a34d 	.word	0x0800a34d
 800a2f8:	0800a361 	.word	0x0800a361
 800a2fc:	0800a2dd 	.word	0x0800a2dd
 800a300:	0800a2dd 	.word	0x0800a2dd
 800a304:	0800a2dd 	.word	0x0800a2dd
 800a308:	0800a2dd 	.word	0x0800a2dd
 800a30c:	0800a361 	.word	0x0800a361
 800a310:	0800a2dd 	.word	0x0800a2dd
 800a314:	0800a2dd 	.word	0x0800a2dd
 800a318:	0800a2dd 	.word	0x0800a2dd
 800a31c:	0800a2dd 	.word	0x0800a2dd
 800a320:	0800a461 	.word	0x0800a461
 800a324:	0800a38b 	.word	0x0800a38b
 800a328:	0800a41b 	.word	0x0800a41b
 800a32c:	0800a2dd 	.word	0x0800a2dd
 800a330:	0800a2dd 	.word	0x0800a2dd
 800a334:	0800a483 	.word	0x0800a483
 800a338:	0800a2dd 	.word	0x0800a2dd
 800a33c:	0800a38b 	.word	0x0800a38b
 800a340:	0800a2dd 	.word	0x0800a2dd
 800a344:	0800a2dd 	.word	0x0800a2dd
 800a348:	0800a423 	.word	0x0800a423
 800a34c:	6833      	ldr	r3, [r6, #0]
 800a34e:	1d1a      	adds	r2, r3, #4
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6032      	str	r2, [r6, #0]
 800a354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a35c:	2301      	movs	r3, #1
 800a35e:	e09d      	b.n	800a49c <_printf_i+0x1e8>
 800a360:	6833      	ldr	r3, [r6, #0]
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	1d19      	adds	r1, r3, #4
 800a366:	6031      	str	r1, [r6, #0]
 800a368:	0606      	lsls	r6, r0, #24
 800a36a:	d501      	bpl.n	800a370 <_printf_i+0xbc>
 800a36c:	681d      	ldr	r5, [r3, #0]
 800a36e:	e003      	b.n	800a378 <_printf_i+0xc4>
 800a370:	0645      	lsls	r5, r0, #25
 800a372:	d5fb      	bpl.n	800a36c <_printf_i+0xb8>
 800a374:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a378:	2d00      	cmp	r5, #0
 800a37a:	da03      	bge.n	800a384 <_printf_i+0xd0>
 800a37c:	232d      	movs	r3, #45	@ 0x2d
 800a37e:	426d      	negs	r5, r5
 800a380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a384:	4859      	ldr	r0, [pc, #356]	@ (800a4ec <_printf_i+0x238>)
 800a386:	230a      	movs	r3, #10
 800a388:	e011      	b.n	800a3ae <_printf_i+0xfa>
 800a38a:	6821      	ldr	r1, [r4, #0]
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	0608      	lsls	r0, r1, #24
 800a390:	f853 5b04 	ldr.w	r5, [r3], #4
 800a394:	d402      	bmi.n	800a39c <_printf_i+0xe8>
 800a396:	0649      	lsls	r1, r1, #25
 800a398:	bf48      	it	mi
 800a39a:	b2ad      	uxthmi	r5, r5
 800a39c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a39e:	4853      	ldr	r0, [pc, #332]	@ (800a4ec <_printf_i+0x238>)
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	bf14      	ite	ne
 800a3a4:	230a      	movne	r3, #10
 800a3a6:	2308      	moveq	r3, #8
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3ae:	6866      	ldr	r6, [r4, #4]
 800a3b0:	60a6      	str	r6, [r4, #8]
 800a3b2:	2e00      	cmp	r6, #0
 800a3b4:	bfa2      	ittt	ge
 800a3b6:	6821      	ldrge	r1, [r4, #0]
 800a3b8:	f021 0104 	bicge.w	r1, r1, #4
 800a3bc:	6021      	strge	r1, [r4, #0]
 800a3be:	b90d      	cbnz	r5, 800a3c4 <_printf_i+0x110>
 800a3c0:	2e00      	cmp	r6, #0
 800a3c2:	d04b      	beq.n	800a45c <_printf_i+0x1a8>
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3ca:	fb03 5711 	mls	r7, r3, r1, r5
 800a3ce:	5dc7      	ldrb	r7, [r0, r7]
 800a3d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3d4:	462f      	mov	r7, r5
 800a3d6:	42bb      	cmp	r3, r7
 800a3d8:	460d      	mov	r5, r1
 800a3da:	d9f4      	bls.n	800a3c6 <_printf_i+0x112>
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d10b      	bne.n	800a3f8 <_printf_i+0x144>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	07df      	lsls	r7, r3, #31
 800a3e4:	d508      	bpl.n	800a3f8 <_printf_i+0x144>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	4299      	cmp	r1, r3
 800a3ec:	bfde      	ittt	le
 800a3ee:	2330      	movle	r3, #48	@ 0x30
 800a3f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a3f8:	1b92      	subs	r2, r2, r6
 800a3fa:	6122      	str	r2, [r4, #16]
 800a3fc:	f8cd a000 	str.w	sl, [sp]
 800a400:	464b      	mov	r3, r9
 800a402:	aa03      	add	r2, sp, #12
 800a404:	4621      	mov	r1, r4
 800a406:	4640      	mov	r0, r8
 800a408:	f7ff fee6 	bl	800a1d8 <_printf_common>
 800a40c:	3001      	adds	r0, #1
 800a40e:	d14a      	bne.n	800a4a6 <_printf_i+0x1f2>
 800a410:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a414:	b004      	add	sp, #16
 800a416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	f043 0320 	orr.w	r3, r3, #32
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	4833      	ldr	r0, [pc, #204]	@ (800a4f0 <_printf_i+0x23c>)
 800a424:	2778      	movs	r7, #120	@ 0x78
 800a426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	6831      	ldr	r1, [r6, #0]
 800a42e:	061f      	lsls	r7, r3, #24
 800a430:	f851 5b04 	ldr.w	r5, [r1], #4
 800a434:	d402      	bmi.n	800a43c <_printf_i+0x188>
 800a436:	065f      	lsls	r7, r3, #25
 800a438:	bf48      	it	mi
 800a43a:	b2ad      	uxthmi	r5, r5
 800a43c:	6031      	str	r1, [r6, #0]
 800a43e:	07d9      	lsls	r1, r3, #31
 800a440:	bf44      	itt	mi
 800a442:	f043 0320 	orrmi.w	r3, r3, #32
 800a446:	6023      	strmi	r3, [r4, #0]
 800a448:	b11d      	cbz	r5, 800a452 <_printf_i+0x19e>
 800a44a:	2310      	movs	r3, #16
 800a44c:	e7ac      	b.n	800a3a8 <_printf_i+0xf4>
 800a44e:	4827      	ldr	r0, [pc, #156]	@ (800a4ec <_printf_i+0x238>)
 800a450:	e7e9      	b.n	800a426 <_printf_i+0x172>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	f023 0320 	bic.w	r3, r3, #32
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	e7f6      	b.n	800a44a <_printf_i+0x196>
 800a45c:	4616      	mov	r6, r2
 800a45e:	e7bd      	b.n	800a3dc <_printf_i+0x128>
 800a460:	6833      	ldr	r3, [r6, #0]
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	6961      	ldr	r1, [r4, #20]
 800a466:	1d18      	adds	r0, r3, #4
 800a468:	6030      	str	r0, [r6, #0]
 800a46a:	062e      	lsls	r6, r5, #24
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	d501      	bpl.n	800a474 <_printf_i+0x1c0>
 800a470:	6019      	str	r1, [r3, #0]
 800a472:	e002      	b.n	800a47a <_printf_i+0x1c6>
 800a474:	0668      	lsls	r0, r5, #25
 800a476:	d5fb      	bpl.n	800a470 <_printf_i+0x1bc>
 800a478:	8019      	strh	r1, [r3, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	6123      	str	r3, [r4, #16]
 800a47e:	4616      	mov	r6, r2
 800a480:	e7bc      	b.n	800a3fc <_printf_i+0x148>
 800a482:	6833      	ldr	r3, [r6, #0]
 800a484:	1d1a      	adds	r2, r3, #4
 800a486:	6032      	str	r2, [r6, #0]
 800a488:	681e      	ldr	r6, [r3, #0]
 800a48a:	6862      	ldr	r2, [r4, #4]
 800a48c:	2100      	movs	r1, #0
 800a48e:	4630      	mov	r0, r6
 800a490:	f7f5 ff26 	bl	80002e0 <memchr>
 800a494:	b108      	cbz	r0, 800a49a <_printf_i+0x1e6>
 800a496:	1b80      	subs	r0, r0, r6
 800a498:	6060      	str	r0, [r4, #4]
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	6123      	str	r3, [r4, #16]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4a4:	e7aa      	b.n	800a3fc <_printf_i+0x148>
 800a4a6:	6923      	ldr	r3, [r4, #16]
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	47d0      	blx	sl
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d0ad      	beq.n	800a410 <_printf_i+0x15c>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	079b      	lsls	r3, r3, #30
 800a4b8:	d413      	bmi.n	800a4e2 <_printf_i+0x22e>
 800a4ba:	68e0      	ldr	r0, [r4, #12]
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	4298      	cmp	r0, r3
 800a4c0:	bfb8      	it	lt
 800a4c2:	4618      	movlt	r0, r3
 800a4c4:	e7a6      	b.n	800a414 <_printf_i+0x160>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	47d0      	blx	sl
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d09d      	beq.n	800a410 <_printf_i+0x15c>
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	9903      	ldr	r1, [sp, #12]
 800a4da:	1a5b      	subs	r3, r3, r1
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dcf2      	bgt.n	800a4c6 <_printf_i+0x212>
 800a4e0:	e7eb      	b.n	800a4ba <_printf_i+0x206>
 800a4e2:	2500      	movs	r5, #0
 800a4e4:	f104 0619 	add.w	r6, r4, #25
 800a4e8:	e7f5      	b.n	800a4d6 <_printf_i+0x222>
 800a4ea:	bf00      	nop
 800a4ec:	0803ab3a 	.word	0x0803ab3a
 800a4f0:	0803ab4b 	.word	0x0803ab4b

0800a4f4 <__malloc_lock>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	@ (800a4fc <__malloc_lock+0x8>)
 800a4f6:	f000 b982 	b.w	800a7fe <__retarget_lock_acquire_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	2001069c 	.word	0x2001069c

0800a500 <__malloc_unlock>:
 800a500:	4801      	ldr	r0, [pc, #4]	@ (800a508 <__malloc_unlock+0x8>)
 800a502:	f000 b97d 	b.w	800a800 <__retarget_lock_release_recursive>
 800a506:	bf00      	nop
 800a508:	2001069c 	.word	0x2001069c

0800a50c <std>:
 800a50c:	2300      	movs	r3, #0
 800a50e:	b510      	push	{r4, lr}
 800a510:	4604      	mov	r4, r0
 800a512:	e9c0 3300 	strd	r3, r3, [r0]
 800a516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a51a:	6083      	str	r3, [r0, #8]
 800a51c:	8181      	strh	r1, [r0, #12]
 800a51e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a520:	81c2      	strh	r2, [r0, #14]
 800a522:	6183      	str	r3, [r0, #24]
 800a524:	4619      	mov	r1, r3
 800a526:	2208      	movs	r2, #8
 800a528:	305c      	adds	r0, #92	@ 0x5c
 800a52a:	f000 f921 	bl	800a770 <memset>
 800a52e:	4b0d      	ldr	r3, [pc, #52]	@ (800a564 <std+0x58>)
 800a530:	6263      	str	r3, [r4, #36]	@ 0x24
 800a532:	4b0d      	ldr	r3, [pc, #52]	@ (800a568 <std+0x5c>)
 800a534:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a536:	4b0d      	ldr	r3, [pc, #52]	@ (800a56c <std+0x60>)
 800a538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a53a:	4b0d      	ldr	r3, [pc, #52]	@ (800a570 <std+0x64>)
 800a53c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a53e:	4b0d      	ldr	r3, [pc, #52]	@ (800a574 <std+0x68>)
 800a540:	6224      	str	r4, [r4, #32]
 800a542:	429c      	cmp	r4, r3
 800a544:	d006      	beq.n	800a554 <std+0x48>
 800a546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a54a:	4294      	cmp	r4, r2
 800a54c:	d002      	beq.n	800a554 <std+0x48>
 800a54e:	33d0      	adds	r3, #208	@ 0xd0
 800a550:	429c      	cmp	r4, r3
 800a552:	d105      	bne.n	800a560 <std+0x54>
 800a554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a55c:	f000 b94e 	b.w	800a7fc <__retarget_lock_init_recursive>
 800a560:	bd10      	pop	{r4, pc}
 800a562:	bf00      	nop
 800a564:	0800c02d 	.word	0x0800c02d
 800a568:	0800c04f 	.word	0x0800c04f
 800a56c:	0800c087 	.word	0x0800c087
 800a570:	0800c0ab 	.word	0x0800c0ab
 800a574:	20010560 	.word	0x20010560

0800a578 <stdio_exit_handler>:
 800a578:	4a02      	ldr	r2, [pc, #8]	@ (800a584 <stdio_exit_handler+0xc>)
 800a57a:	4903      	ldr	r1, [pc, #12]	@ (800a588 <stdio_exit_handler+0x10>)
 800a57c:	4803      	ldr	r0, [pc, #12]	@ (800a58c <stdio_exit_handler+0x14>)
 800a57e:	f000 b869 	b.w	800a654 <_fwalk_sglue>
 800a582:	bf00      	nop
 800a584:	20000b28 	.word	0x20000b28
 800a588:	0800b8d9 	.word	0x0800b8d9
 800a58c:	20000b38 	.word	0x20000b38

0800a590 <cleanup_stdio>:
 800a590:	6841      	ldr	r1, [r0, #4]
 800a592:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c4 <cleanup_stdio+0x34>)
 800a594:	4299      	cmp	r1, r3
 800a596:	b510      	push	{r4, lr}
 800a598:	4604      	mov	r4, r0
 800a59a:	d001      	beq.n	800a5a0 <cleanup_stdio+0x10>
 800a59c:	f001 f99c 	bl	800b8d8 <_fflush_r>
 800a5a0:	68a1      	ldr	r1, [r4, #8]
 800a5a2:	4b09      	ldr	r3, [pc, #36]	@ (800a5c8 <cleanup_stdio+0x38>)
 800a5a4:	4299      	cmp	r1, r3
 800a5a6:	d002      	beq.n	800a5ae <cleanup_stdio+0x1e>
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f001 f995 	bl	800b8d8 <_fflush_r>
 800a5ae:	68e1      	ldr	r1, [r4, #12]
 800a5b0:	4b06      	ldr	r3, [pc, #24]	@ (800a5cc <cleanup_stdio+0x3c>)
 800a5b2:	4299      	cmp	r1, r3
 800a5b4:	d004      	beq.n	800a5c0 <cleanup_stdio+0x30>
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5bc:	f001 b98c 	b.w	800b8d8 <_fflush_r>
 800a5c0:	bd10      	pop	{r4, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20010560 	.word	0x20010560
 800a5c8:	200105c8 	.word	0x200105c8
 800a5cc:	20010630 	.word	0x20010630

0800a5d0 <global_stdio_init.part.0>:
 800a5d0:	b510      	push	{r4, lr}
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a600 <global_stdio_init.part.0+0x30>)
 800a5d4:	4c0b      	ldr	r4, [pc, #44]	@ (800a604 <global_stdio_init.part.0+0x34>)
 800a5d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a608 <global_stdio_init.part.0+0x38>)
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2104      	movs	r1, #4
 800a5e0:	f7ff ff94 	bl	800a50c <std>
 800a5e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	2109      	movs	r1, #9
 800a5ec:	f7ff ff8e 	bl	800a50c <std>
 800a5f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5fa:	2112      	movs	r1, #18
 800a5fc:	f7ff bf86 	b.w	800a50c <std>
 800a600:	20010698 	.word	0x20010698
 800a604:	20010560 	.word	0x20010560
 800a608:	0800a579 	.word	0x0800a579

0800a60c <__sfp_lock_acquire>:
 800a60c:	4801      	ldr	r0, [pc, #4]	@ (800a614 <__sfp_lock_acquire+0x8>)
 800a60e:	f000 b8f6 	b.w	800a7fe <__retarget_lock_acquire_recursive>
 800a612:	bf00      	nop
 800a614:	2001069d 	.word	0x2001069d

0800a618 <__sfp_lock_release>:
 800a618:	4801      	ldr	r0, [pc, #4]	@ (800a620 <__sfp_lock_release+0x8>)
 800a61a:	f000 b8f1 	b.w	800a800 <__retarget_lock_release_recursive>
 800a61e:	bf00      	nop
 800a620:	2001069d 	.word	0x2001069d

0800a624 <__sinit>:
 800a624:	b510      	push	{r4, lr}
 800a626:	4604      	mov	r4, r0
 800a628:	f7ff fff0 	bl	800a60c <__sfp_lock_acquire>
 800a62c:	6a23      	ldr	r3, [r4, #32]
 800a62e:	b11b      	cbz	r3, 800a638 <__sinit+0x14>
 800a630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a634:	f7ff bff0 	b.w	800a618 <__sfp_lock_release>
 800a638:	4b04      	ldr	r3, [pc, #16]	@ (800a64c <__sinit+0x28>)
 800a63a:	6223      	str	r3, [r4, #32]
 800a63c:	4b04      	ldr	r3, [pc, #16]	@ (800a650 <__sinit+0x2c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1f5      	bne.n	800a630 <__sinit+0xc>
 800a644:	f7ff ffc4 	bl	800a5d0 <global_stdio_init.part.0>
 800a648:	e7f2      	b.n	800a630 <__sinit+0xc>
 800a64a:	bf00      	nop
 800a64c:	0800a591 	.word	0x0800a591
 800a650:	20010698 	.word	0x20010698

0800a654 <_fwalk_sglue>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	4607      	mov	r7, r0
 800a65a:	4688      	mov	r8, r1
 800a65c:	4614      	mov	r4, r2
 800a65e:	2600      	movs	r6, #0
 800a660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a664:	f1b9 0901 	subs.w	r9, r9, #1
 800a668:	d505      	bpl.n	800a676 <_fwalk_sglue+0x22>
 800a66a:	6824      	ldr	r4, [r4, #0]
 800a66c:	2c00      	cmp	r4, #0
 800a66e:	d1f7      	bne.n	800a660 <_fwalk_sglue+0xc>
 800a670:	4630      	mov	r0, r6
 800a672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d907      	bls.n	800a68c <_fwalk_sglue+0x38>
 800a67c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a680:	3301      	adds	r3, #1
 800a682:	d003      	beq.n	800a68c <_fwalk_sglue+0x38>
 800a684:	4629      	mov	r1, r5
 800a686:	4638      	mov	r0, r7
 800a688:	47c0      	blx	r8
 800a68a:	4306      	orrs	r6, r0
 800a68c:	3568      	adds	r5, #104	@ 0x68
 800a68e:	e7e9      	b.n	800a664 <_fwalk_sglue+0x10>

0800a690 <iprintf>:
 800a690:	b40f      	push	{r0, r1, r2, r3}
 800a692:	b507      	push	{r0, r1, r2, lr}
 800a694:	4906      	ldr	r1, [pc, #24]	@ (800a6b0 <iprintf+0x20>)
 800a696:	ab04      	add	r3, sp, #16
 800a698:	6808      	ldr	r0, [r1, #0]
 800a69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69e:	6881      	ldr	r1, [r0, #8]
 800a6a0:	9301      	str	r3, [sp, #4]
 800a6a2:	f000 ff7d 	bl	800b5a0 <_vfiprintf_r>
 800a6a6:	b003      	add	sp, #12
 800a6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6ac:	b004      	add	sp, #16
 800a6ae:	4770      	bx	lr
 800a6b0:	20000b34 	.word	0x20000b34

0800a6b4 <_puts_r>:
 800a6b4:	6a03      	ldr	r3, [r0, #32]
 800a6b6:	b570      	push	{r4, r5, r6, lr}
 800a6b8:	6884      	ldr	r4, [r0, #8]
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	460e      	mov	r6, r1
 800a6be:	b90b      	cbnz	r3, 800a6c4 <_puts_r+0x10>
 800a6c0:	f7ff ffb0 	bl	800a624 <__sinit>
 800a6c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6c6:	07db      	lsls	r3, r3, #31
 800a6c8:	d405      	bmi.n	800a6d6 <_puts_r+0x22>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	0598      	lsls	r0, r3, #22
 800a6ce:	d402      	bmi.n	800a6d6 <_puts_r+0x22>
 800a6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6d2:	f000 f894 	bl	800a7fe <__retarget_lock_acquire_recursive>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	0719      	lsls	r1, r3, #28
 800a6da:	d502      	bpl.n	800a6e2 <_puts_r+0x2e>
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d135      	bne.n	800a74e <_puts_r+0x9a>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f001 fd23 	bl	800c130 <__swsetup_r>
 800a6ea:	b380      	cbz	r0, 800a74e <_puts_r+0x9a>
 800a6ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a6f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6f2:	07da      	lsls	r2, r3, #31
 800a6f4:	d405      	bmi.n	800a702 <_puts_r+0x4e>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	059b      	lsls	r3, r3, #22
 800a6fa:	d402      	bmi.n	800a702 <_puts_r+0x4e>
 800a6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6fe:	f000 f87f 	bl	800a800 <__retarget_lock_release_recursive>
 800a702:	4628      	mov	r0, r5
 800a704:	bd70      	pop	{r4, r5, r6, pc}
 800a706:	2b00      	cmp	r3, #0
 800a708:	da04      	bge.n	800a714 <_puts_r+0x60>
 800a70a:	69a2      	ldr	r2, [r4, #24]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	dc17      	bgt.n	800a740 <_puts_r+0x8c>
 800a710:	290a      	cmp	r1, #10
 800a712:	d015      	beq.n	800a740 <_puts_r+0x8c>
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	6022      	str	r2, [r4, #0]
 800a71a:	7019      	strb	r1, [r3, #0]
 800a71c:	68a3      	ldr	r3, [r4, #8]
 800a71e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a722:	3b01      	subs	r3, #1
 800a724:	60a3      	str	r3, [r4, #8]
 800a726:	2900      	cmp	r1, #0
 800a728:	d1ed      	bne.n	800a706 <_puts_r+0x52>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	da11      	bge.n	800a752 <_puts_r+0x9e>
 800a72e:	4622      	mov	r2, r4
 800a730:	210a      	movs	r1, #10
 800a732:	4628      	mov	r0, r5
 800a734:	f001 fcbd 	bl	800c0b2 <__swbuf_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	d0d7      	beq.n	800a6ec <_puts_r+0x38>
 800a73c:	250a      	movs	r5, #10
 800a73e:	e7d7      	b.n	800a6f0 <_puts_r+0x3c>
 800a740:	4622      	mov	r2, r4
 800a742:	4628      	mov	r0, r5
 800a744:	f001 fcb5 	bl	800c0b2 <__swbuf_r>
 800a748:	3001      	adds	r0, #1
 800a74a:	d1e7      	bne.n	800a71c <_puts_r+0x68>
 800a74c:	e7ce      	b.n	800a6ec <_puts_r+0x38>
 800a74e:	3e01      	subs	r6, #1
 800a750:	e7e4      	b.n	800a71c <_puts_r+0x68>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	1c5a      	adds	r2, r3, #1
 800a756:	6022      	str	r2, [r4, #0]
 800a758:	220a      	movs	r2, #10
 800a75a:	701a      	strb	r2, [r3, #0]
 800a75c:	e7ee      	b.n	800a73c <_puts_r+0x88>
	...

0800a760 <puts>:
 800a760:	4b02      	ldr	r3, [pc, #8]	@ (800a76c <puts+0xc>)
 800a762:	4601      	mov	r1, r0
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	f7ff bfa5 	b.w	800a6b4 <_puts_r>
 800a76a:	bf00      	nop
 800a76c:	20000b34 	.word	0x20000b34

0800a770 <memset>:
 800a770:	4402      	add	r2, r0
 800a772:	4603      	mov	r3, r0
 800a774:	4293      	cmp	r3, r2
 800a776:	d100      	bne.n	800a77a <memset+0xa>
 800a778:	4770      	bx	lr
 800a77a:	f803 1b01 	strb.w	r1, [r3], #1
 800a77e:	e7f9      	b.n	800a774 <memset+0x4>

0800a780 <_localeconv_r>:
 800a780:	4800      	ldr	r0, [pc, #0]	@ (800a784 <_localeconv_r+0x4>)
 800a782:	4770      	bx	lr
 800a784:	20000c74 	.word	0x20000c74

0800a788 <_sbrk_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d06      	ldr	r5, [pc, #24]	@ (800a7a4 <_sbrk_r+0x1c>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	f7f7 fafc 	bl	8001d90 <_sbrk>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_sbrk_r+0x1a>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_sbrk_r+0x1a>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	200106a0 	.word	0x200106a0

0800a7a8 <__errno>:
 800a7a8:	4b01      	ldr	r3, [pc, #4]	@ (800a7b0 <__errno+0x8>)
 800a7aa:	6818      	ldr	r0, [r3, #0]
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20000b34 	.word	0x20000b34

0800a7b4 <__libc_init_array>:
 800a7b4:	b570      	push	{r4, r5, r6, lr}
 800a7b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a7ec <__libc_init_array+0x38>)
 800a7b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a7f0 <__libc_init_array+0x3c>)
 800a7ba:	1b64      	subs	r4, r4, r5
 800a7bc:	10a4      	asrs	r4, r4, #2
 800a7be:	2600      	movs	r6, #0
 800a7c0:	42a6      	cmp	r6, r4
 800a7c2:	d109      	bne.n	800a7d8 <__libc_init_array+0x24>
 800a7c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a7f4 <__libc_init_array+0x40>)
 800a7c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a7f8 <__libc_init_array+0x44>)
 800a7c8:	f002 f996 	bl	800caf8 <_init>
 800a7cc:	1b64      	subs	r4, r4, r5
 800a7ce:	10a4      	asrs	r4, r4, #2
 800a7d0:	2600      	movs	r6, #0
 800a7d2:	42a6      	cmp	r6, r4
 800a7d4:	d105      	bne.n	800a7e2 <__libc_init_array+0x2e>
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7dc:	4798      	blx	r3
 800a7de:	3601      	adds	r6, #1
 800a7e0:	e7ee      	b.n	800a7c0 <__libc_init_array+0xc>
 800a7e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7e6:	4798      	blx	r3
 800a7e8:	3601      	adds	r6, #1
 800a7ea:	e7f2      	b.n	800a7d2 <__libc_init_array+0x1e>
 800a7ec:	0803aeb8 	.word	0x0803aeb8
 800a7f0:	0803aeb8 	.word	0x0803aeb8
 800a7f4:	0803aeb8 	.word	0x0803aeb8
 800a7f8:	0803aebc 	.word	0x0803aebc

0800a7fc <__retarget_lock_init_recursive>:
 800a7fc:	4770      	bx	lr

0800a7fe <__retarget_lock_acquire_recursive>:
 800a7fe:	4770      	bx	lr

0800a800 <__retarget_lock_release_recursive>:
 800a800:	4770      	bx	lr

0800a802 <memcpy>:
 800a802:	440a      	add	r2, r1
 800a804:	4291      	cmp	r1, r2
 800a806:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a80a:	d100      	bne.n	800a80e <memcpy+0xc>
 800a80c:	4770      	bx	lr
 800a80e:	b510      	push	{r4, lr}
 800a810:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a814:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a818:	4291      	cmp	r1, r2
 800a81a:	d1f9      	bne.n	800a810 <memcpy+0xe>
 800a81c:	bd10      	pop	{r4, pc}

0800a81e <quorem>:
 800a81e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a822:	6903      	ldr	r3, [r0, #16]
 800a824:	690c      	ldr	r4, [r1, #16]
 800a826:	42a3      	cmp	r3, r4
 800a828:	4607      	mov	r7, r0
 800a82a:	db7e      	blt.n	800a92a <quorem+0x10c>
 800a82c:	3c01      	subs	r4, #1
 800a82e:	f101 0814 	add.w	r8, r1, #20
 800a832:	00a3      	lsls	r3, r4, #2
 800a834:	f100 0514 	add.w	r5, r0, #20
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a848:	3301      	adds	r3, #1
 800a84a:	429a      	cmp	r2, r3
 800a84c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a850:	fbb2 f6f3 	udiv	r6, r2, r3
 800a854:	d32e      	bcc.n	800a8b4 <quorem+0x96>
 800a856:	f04f 0a00 	mov.w	sl, #0
 800a85a:	46c4      	mov	ip, r8
 800a85c:	46ae      	mov	lr, r5
 800a85e:	46d3      	mov	fp, sl
 800a860:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a864:	b298      	uxth	r0, r3
 800a866:	fb06 a000 	mla	r0, r6, r0, sl
 800a86a:	0c02      	lsrs	r2, r0, #16
 800a86c:	0c1b      	lsrs	r3, r3, #16
 800a86e:	fb06 2303 	mla	r3, r6, r3, r2
 800a872:	f8de 2000 	ldr.w	r2, [lr]
 800a876:	b280      	uxth	r0, r0
 800a878:	b292      	uxth	r2, r2
 800a87a:	1a12      	subs	r2, r2, r0
 800a87c:	445a      	add	r2, fp
 800a87e:	f8de 0000 	ldr.w	r0, [lr]
 800a882:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a886:	b29b      	uxth	r3, r3
 800a888:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a88c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a890:	b292      	uxth	r2, r2
 800a892:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a896:	45e1      	cmp	r9, ip
 800a898:	f84e 2b04 	str.w	r2, [lr], #4
 800a89c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a8a0:	d2de      	bcs.n	800a860 <quorem+0x42>
 800a8a2:	9b00      	ldr	r3, [sp, #0]
 800a8a4:	58eb      	ldr	r3, [r5, r3]
 800a8a6:	b92b      	cbnz	r3, 800a8b4 <quorem+0x96>
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	3b04      	subs	r3, #4
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	d32f      	bcc.n	800a912 <quorem+0xf4>
 800a8b2:	613c      	str	r4, [r7, #16]
 800a8b4:	4638      	mov	r0, r7
 800a8b6:	f001 fab1 	bl	800be1c <__mcmp>
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	db25      	blt.n	800a90a <quorem+0xec>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8c6:	f8d1 c000 	ldr.w	ip, [r1]
 800a8ca:	fa1f fe82 	uxth.w	lr, r2
 800a8ce:	fa1f f38c 	uxth.w	r3, ip
 800a8d2:	eba3 030e 	sub.w	r3, r3, lr
 800a8d6:	4403      	add	r3, r0
 800a8d8:	0c12      	lsrs	r2, r2, #16
 800a8da:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a8de:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8e8:	45c1      	cmp	r9, r8
 800a8ea:	f841 3b04 	str.w	r3, [r1], #4
 800a8ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8f2:	d2e6      	bcs.n	800a8c2 <quorem+0xa4>
 800a8f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8fc:	b922      	cbnz	r2, 800a908 <quorem+0xea>
 800a8fe:	3b04      	subs	r3, #4
 800a900:	429d      	cmp	r5, r3
 800a902:	461a      	mov	r2, r3
 800a904:	d30b      	bcc.n	800a91e <quorem+0x100>
 800a906:	613c      	str	r4, [r7, #16]
 800a908:	3601      	adds	r6, #1
 800a90a:	4630      	mov	r0, r6
 800a90c:	b003      	add	sp, #12
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	6812      	ldr	r2, [r2, #0]
 800a914:	3b04      	subs	r3, #4
 800a916:	2a00      	cmp	r2, #0
 800a918:	d1cb      	bne.n	800a8b2 <quorem+0x94>
 800a91a:	3c01      	subs	r4, #1
 800a91c:	e7c6      	b.n	800a8ac <quorem+0x8e>
 800a91e:	6812      	ldr	r2, [r2, #0]
 800a920:	3b04      	subs	r3, #4
 800a922:	2a00      	cmp	r2, #0
 800a924:	d1ef      	bne.n	800a906 <quorem+0xe8>
 800a926:	3c01      	subs	r4, #1
 800a928:	e7ea      	b.n	800a900 <quorem+0xe2>
 800a92a:	2000      	movs	r0, #0
 800a92c:	e7ee      	b.n	800a90c <quorem+0xee>
	...

0800a930 <_dtoa_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	69c7      	ldr	r7, [r0, #28]
 800a936:	b099      	sub	sp, #100	@ 0x64
 800a938:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a93c:	ec55 4b10 	vmov	r4, r5, d0
 800a940:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a942:	9109      	str	r1, [sp, #36]	@ 0x24
 800a944:	4683      	mov	fp, r0
 800a946:	920e      	str	r2, [sp, #56]	@ 0x38
 800a948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a94a:	b97f      	cbnz	r7, 800a96c <_dtoa_r+0x3c>
 800a94c:	2010      	movs	r0, #16
 800a94e:	f7ff fb99 	bl	800a084 <malloc>
 800a952:	4602      	mov	r2, r0
 800a954:	f8cb 001c 	str.w	r0, [fp, #28]
 800a958:	b920      	cbnz	r0, 800a964 <_dtoa_r+0x34>
 800a95a:	4ba7      	ldr	r3, [pc, #668]	@ (800abf8 <_dtoa_r+0x2c8>)
 800a95c:	21ef      	movs	r1, #239	@ 0xef
 800a95e:	48a7      	ldr	r0, [pc, #668]	@ (800abfc <_dtoa_r+0x2cc>)
 800a960:	f001 fd06 	bl	800c370 <__assert_func>
 800a964:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a968:	6007      	str	r7, [r0, #0]
 800a96a:	60c7      	str	r7, [r0, #12]
 800a96c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a970:	6819      	ldr	r1, [r3, #0]
 800a972:	b159      	cbz	r1, 800a98c <_dtoa_r+0x5c>
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	604a      	str	r2, [r1, #4]
 800a978:	2301      	movs	r3, #1
 800a97a:	4093      	lsls	r3, r2
 800a97c:	608b      	str	r3, [r1, #8]
 800a97e:	4658      	mov	r0, fp
 800a980:	f001 f812 	bl	800b9a8 <_Bfree>
 800a984:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	1e2b      	subs	r3, r5, #0
 800a98e:	bfb9      	ittee	lt
 800a990:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a994:	9303      	strlt	r3, [sp, #12]
 800a996:	2300      	movge	r3, #0
 800a998:	6033      	strge	r3, [r6, #0]
 800a99a:	9f03      	ldr	r7, [sp, #12]
 800a99c:	4b98      	ldr	r3, [pc, #608]	@ (800ac00 <_dtoa_r+0x2d0>)
 800a99e:	bfbc      	itt	lt
 800a9a0:	2201      	movlt	r2, #1
 800a9a2:	6032      	strlt	r2, [r6, #0]
 800a9a4:	43bb      	bics	r3, r7
 800a9a6:	d112      	bne.n	800a9ce <_dtoa_r+0x9e>
 800a9a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a9ae:	6013      	str	r3, [r2, #0]
 800a9b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9b4:	4323      	orrs	r3, r4
 800a9b6:	f000 854d 	beq.w	800b454 <_dtoa_r+0xb24>
 800a9ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac14 <_dtoa_r+0x2e4>
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 854f 	beq.w	800b464 <_dtoa_r+0xb34>
 800a9c6:	f10a 0303 	add.w	r3, sl, #3
 800a9ca:	f000 bd49 	b.w	800b460 <_dtoa_r+0xb30>
 800a9ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	ec51 0b17 	vmov	r0, r1, d7
 800a9d8:	2300      	movs	r3, #0
 800a9da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a9de:	f7f6 f8fb 	bl	8000bd8 <__aeabi_dcmpeq>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	b158      	cbz	r0, 800a9fe <_dtoa_r+0xce>
 800a9e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9ee:	b113      	cbz	r3, 800a9f6 <_dtoa_r+0xc6>
 800a9f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9f2:	4b84      	ldr	r3, [pc, #528]	@ (800ac04 <_dtoa_r+0x2d4>)
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ac18 <_dtoa_r+0x2e8>
 800a9fa:	f000 bd33 	b.w	800b464 <_dtoa_r+0xb34>
 800a9fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa02:	aa16      	add	r2, sp, #88	@ 0x58
 800aa04:	a917      	add	r1, sp, #92	@ 0x5c
 800aa06:	4658      	mov	r0, fp
 800aa08:	f001 fab8 	bl	800bf7c <__d2b>
 800aa0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa10:	4681      	mov	r9, r0
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	d077      	beq.n	800ab06 <_dtoa_r+0x1d6>
 800aa16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa30:	4619      	mov	r1, r3
 800aa32:	2200      	movs	r2, #0
 800aa34:	4b74      	ldr	r3, [pc, #464]	@ (800ac08 <_dtoa_r+0x2d8>)
 800aa36:	f7f5 fcaf 	bl	8000398 <__aeabi_dsub>
 800aa3a:	a369      	add	r3, pc, #420	@ (adr r3, 800abe0 <_dtoa_r+0x2b0>)
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f7f5 fe62 	bl	8000708 <__aeabi_dmul>
 800aa44:	a368      	add	r3, pc, #416	@ (adr r3, 800abe8 <_dtoa_r+0x2b8>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fca7 	bl	800039c <__adddf3>
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4630      	mov	r0, r6
 800aa52:	460d      	mov	r5, r1
 800aa54:	f7f5 fdee 	bl	8000634 <__aeabi_i2d>
 800aa58:	a365      	add	r3, pc, #404	@ (adr r3, 800abf0 <_dtoa_r+0x2c0>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fe53 	bl	8000708 <__aeabi_dmul>
 800aa62:	4602      	mov	r2, r0
 800aa64:	460b      	mov	r3, r1
 800aa66:	4620      	mov	r0, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f7f5 fc97 	bl	800039c <__adddf3>
 800aa6e:	4604      	mov	r4, r0
 800aa70:	460d      	mov	r5, r1
 800aa72:	f7f6 f8f9 	bl	8000c68 <__aeabi_d2iz>
 800aa76:	2200      	movs	r2, #0
 800aa78:	4607      	mov	r7, r0
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f6 f8b4 	bl	8000bec <__aeabi_dcmplt>
 800aa84:	b140      	cbz	r0, 800aa98 <_dtoa_r+0x168>
 800aa86:	4638      	mov	r0, r7
 800aa88:	f7f5 fdd4 	bl	8000634 <__aeabi_i2d>
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	462b      	mov	r3, r5
 800aa90:	f7f6 f8a2 	bl	8000bd8 <__aeabi_dcmpeq>
 800aa94:	b900      	cbnz	r0, 800aa98 <_dtoa_r+0x168>
 800aa96:	3f01      	subs	r7, #1
 800aa98:	2f16      	cmp	r7, #22
 800aa9a:	d851      	bhi.n	800ab40 <_dtoa_r+0x210>
 800aa9c:	4b5b      	ldr	r3, [pc, #364]	@ (800ac0c <_dtoa_r+0x2dc>)
 800aa9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaaa:	f7f6 f89f 	bl	8000bec <__aeabi_dcmplt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d048      	beq.n	800ab44 <_dtoa_r+0x214>
 800aab2:	3f01      	subs	r7, #1
 800aab4:	2300      	movs	r3, #0
 800aab6:	9312      	str	r3, [sp, #72]	@ 0x48
 800aab8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aaba:	1b9b      	subs	r3, r3, r6
 800aabc:	1e5a      	subs	r2, r3, #1
 800aabe:	bf44      	itt	mi
 800aac0:	f1c3 0801 	rsbmi	r8, r3, #1
 800aac4:	2300      	movmi	r3, #0
 800aac6:	9208      	str	r2, [sp, #32]
 800aac8:	bf54      	ite	pl
 800aaca:	f04f 0800 	movpl.w	r8, #0
 800aace:	9308      	strmi	r3, [sp, #32]
 800aad0:	2f00      	cmp	r7, #0
 800aad2:	db39      	blt.n	800ab48 <_dtoa_r+0x218>
 800aad4:	9b08      	ldr	r3, [sp, #32]
 800aad6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aad8:	443b      	add	r3, r7
 800aada:	9308      	str	r3, [sp, #32]
 800aadc:	2300      	movs	r3, #0
 800aade:	930a      	str	r3, [sp, #40]	@ 0x28
 800aae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aae2:	2b09      	cmp	r3, #9
 800aae4:	d864      	bhi.n	800abb0 <_dtoa_r+0x280>
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	bfc4      	itt	gt
 800aaea:	3b04      	subgt	r3, #4
 800aaec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aaee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf0:	f1a3 0302 	sub.w	r3, r3, #2
 800aaf4:	bfcc      	ite	gt
 800aaf6:	2400      	movgt	r4, #0
 800aaf8:	2401      	movle	r4, #1
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d863      	bhi.n	800abc6 <_dtoa_r+0x296>
 800aafe:	e8df f003 	tbb	[pc, r3]
 800ab02:	372a      	.short	0x372a
 800ab04:	5535      	.short	0x5535
 800ab06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab0a:	441e      	add	r6, r3
 800ab0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab10:	2b20      	cmp	r3, #32
 800ab12:	bfc1      	itttt	gt
 800ab14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab18:	409f      	lslgt	r7, r3
 800ab1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab22:	bfd6      	itet	le
 800ab24:	f1c3 0320 	rsble	r3, r3, #32
 800ab28:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab2c:	fa04 f003 	lslle.w	r0, r4, r3
 800ab30:	f7f5 fd70 	bl	8000614 <__aeabi_ui2d>
 800ab34:	2201      	movs	r2, #1
 800ab36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab3a:	3e01      	subs	r6, #1
 800ab3c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab3e:	e777      	b.n	800aa30 <_dtoa_r+0x100>
 800ab40:	2301      	movs	r3, #1
 800ab42:	e7b8      	b.n	800aab6 <_dtoa_r+0x186>
 800ab44:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab46:	e7b7      	b.n	800aab8 <_dtoa_r+0x188>
 800ab48:	427b      	negs	r3, r7
 800ab4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	eba8 0807 	sub.w	r8, r8, r7
 800ab52:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab54:	e7c4      	b.n	800aae0 <_dtoa_r+0x1b0>
 800ab56:	2300      	movs	r3, #0
 800ab58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dc35      	bgt.n	800abcc <_dtoa_r+0x29c>
 800ab60:	2301      	movs	r3, #1
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	9307      	str	r3, [sp, #28]
 800ab66:	461a      	mov	r2, r3
 800ab68:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab6a:	e00b      	b.n	800ab84 <_dtoa_r+0x254>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e7f3      	b.n	800ab58 <_dtoa_r+0x228>
 800ab70:	2300      	movs	r3, #0
 800ab72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab76:	18fb      	adds	r3, r7, r3
 800ab78:	9300      	str	r3, [sp, #0]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	9307      	str	r3, [sp, #28]
 800ab80:	bfb8      	it	lt
 800ab82:	2301      	movlt	r3, #1
 800ab84:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab88:	2100      	movs	r1, #0
 800ab8a:	2204      	movs	r2, #4
 800ab8c:	f102 0514 	add.w	r5, r2, #20
 800ab90:	429d      	cmp	r5, r3
 800ab92:	d91f      	bls.n	800abd4 <_dtoa_r+0x2a4>
 800ab94:	6041      	str	r1, [r0, #4]
 800ab96:	4658      	mov	r0, fp
 800ab98:	f000 fec6 	bl	800b928 <_Balloc>
 800ab9c:	4682      	mov	sl, r0
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d13c      	bne.n	800ac1c <_dtoa_r+0x2ec>
 800aba2:	4b1b      	ldr	r3, [pc, #108]	@ (800ac10 <_dtoa_r+0x2e0>)
 800aba4:	4602      	mov	r2, r0
 800aba6:	f240 11af 	movw	r1, #431	@ 0x1af
 800abaa:	e6d8      	b.n	800a95e <_dtoa_r+0x2e>
 800abac:	2301      	movs	r3, #1
 800abae:	e7e0      	b.n	800ab72 <_dtoa_r+0x242>
 800abb0:	2401      	movs	r4, #1
 800abb2:	2300      	movs	r3, #0
 800abb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	2200      	movs	r2, #0
 800abc2:	2312      	movs	r3, #18
 800abc4:	e7d0      	b.n	800ab68 <_dtoa_r+0x238>
 800abc6:	2301      	movs	r3, #1
 800abc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abca:	e7f5      	b.n	800abb8 <_dtoa_r+0x288>
 800abcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	9307      	str	r3, [sp, #28]
 800abd2:	e7d7      	b.n	800ab84 <_dtoa_r+0x254>
 800abd4:	3101      	adds	r1, #1
 800abd6:	0052      	lsls	r2, r2, #1
 800abd8:	e7d8      	b.n	800ab8c <_dtoa_r+0x25c>
 800abda:	bf00      	nop
 800abdc:	f3af 8000 	nop.w
 800abe0:	636f4361 	.word	0x636f4361
 800abe4:	3fd287a7 	.word	0x3fd287a7
 800abe8:	8b60c8b3 	.word	0x8b60c8b3
 800abec:	3fc68a28 	.word	0x3fc68a28
 800abf0:	509f79fb 	.word	0x509f79fb
 800abf4:	3fd34413 	.word	0x3fd34413
 800abf8:	0803ab69 	.word	0x0803ab69
 800abfc:	0803ab80 	.word	0x0803ab80
 800ac00:	7ff00000 	.word	0x7ff00000
 800ac04:	0803ab39 	.word	0x0803ab39
 800ac08:	3ff80000 	.word	0x3ff80000
 800ac0c:	0803ac88 	.word	0x0803ac88
 800ac10:	0803abd8 	.word	0x0803abd8
 800ac14:	0803ab65 	.word	0x0803ab65
 800ac18:	0803ab38 	.word	0x0803ab38
 800ac1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac20:	6018      	str	r0, [r3, #0]
 800ac22:	9b07      	ldr	r3, [sp, #28]
 800ac24:	2b0e      	cmp	r3, #14
 800ac26:	f200 80a4 	bhi.w	800ad72 <_dtoa_r+0x442>
 800ac2a:	2c00      	cmp	r4, #0
 800ac2c:	f000 80a1 	beq.w	800ad72 <_dtoa_r+0x442>
 800ac30:	2f00      	cmp	r7, #0
 800ac32:	dd33      	ble.n	800ac9c <_dtoa_r+0x36c>
 800ac34:	4bad      	ldr	r3, [pc, #692]	@ (800aeec <_dtoa_r+0x5bc>)
 800ac36:	f007 020f 	and.w	r2, r7, #15
 800ac3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac3e:	ed93 7b00 	vldr	d7, [r3]
 800ac42:	05f8      	lsls	r0, r7, #23
 800ac44:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac4c:	d516      	bpl.n	800ac7c <_dtoa_r+0x34c>
 800ac4e:	4ba8      	ldr	r3, [pc, #672]	@ (800aef0 <_dtoa_r+0x5c0>)
 800ac50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac58:	f7f5 fe80 	bl	800095c <__aeabi_ddiv>
 800ac5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac60:	f004 040f 	and.w	r4, r4, #15
 800ac64:	2603      	movs	r6, #3
 800ac66:	4da2      	ldr	r5, [pc, #648]	@ (800aef0 <_dtoa_r+0x5c0>)
 800ac68:	b954      	cbnz	r4, 800ac80 <_dtoa_r+0x350>
 800ac6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac72:	f7f5 fe73 	bl	800095c <__aeabi_ddiv>
 800ac76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac7a:	e028      	b.n	800acce <_dtoa_r+0x39e>
 800ac7c:	2602      	movs	r6, #2
 800ac7e:	e7f2      	b.n	800ac66 <_dtoa_r+0x336>
 800ac80:	07e1      	lsls	r1, r4, #31
 800ac82:	d508      	bpl.n	800ac96 <_dtoa_r+0x366>
 800ac84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac8c:	f7f5 fd3c 	bl	8000708 <__aeabi_dmul>
 800ac90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac94:	3601      	adds	r6, #1
 800ac96:	1064      	asrs	r4, r4, #1
 800ac98:	3508      	adds	r5, #8
 800ac9a:	e7e5      	b.n	800ac68 <_dtoa_r+0x338>
 800ac9c:	f000 80d2 	beq.w	800ae44 <_dtoa_r+0x514>
 800aca0:	427c      	negs	r4, r7
 800aca2:	4b92      	ldr	r3, [pc, #584]	@ (800aeec <_dtoa_r+0x5bc>)
 800aca4:	4d92      	ldr	r5, [pc, #584]	@ (800aef0 <_dtoa_r+0x5c0>)
 800aca6:	f004 020f 	and.w	r2, r4, #15
 800acaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acb6:	f7f5 fd27 	bl	8000708 <__aeabi_dmul>
 800acba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acbe:	1124      	asrs	r4, r4, #4
 800acc0:	2300      	movs	r3, #0
 800acc2:	2602      	movs	r6, #2
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	f040 80b2 	bne.w	800ae2e <_dtoa_r+0x4fe>
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1d3      	bne.n	800ac76 <_dtoa_r+0x346>
 800acce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80b7 	beq.w	800ae48 <_dtoa_r+0x518>
 800acda:	4b86      	ldr	r3, [pc, #536]	@ (800aef4 <_dtoa_r+0x5c4>)
 800acdc:	2200      	movs	r2, #0
 800acde:	4620      	mov	r0, r4
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7f5 ff83 	bl	8000bec <__aeabi_dcmplt>
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f000 80ae 	beq.w	800ae48 <_dtoa_r+0x518>
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80aa 	beq.w	800ae48 <_dtoa_r+0x518>
 800acf4:	9b00      	ldr	r3, [sp, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd37      	ble.n	800ad6a <_dtoa_r+0x43a>
 800acfa:	1e7b      	subs	r3, r7, #1
 800acfc:	9304      	str	r3, [sp, #16]
 800acfe:	4620      	mov	r0, r4
 800ad00:	4b7d      	ldr	r3, [pc, #500]	@ (800aef8 <_dtoa_r+0x5c8>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	4629      	mov	r1, r5
 800ad06:	f7f5 fcff 	bl	8000708 <__aeabi_dmul>
 800ad0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad0e:	9c00      	ldr	r4, [sp, #0]
 800ad10:	3601      	adds	r6, #1
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7f5 fc8e 	bl	8000634 <__aeabi_i2d>
 800ad18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad1c:	f7f5 fcf4 	bl	8000708 <__aeabi_dmul>
 800ad20:	4b76      	ldr	r3, [pc, #472]	@ (800aefc <_dtoa_r+0x5cc>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	f7f5 fb3a 	bl	800039c <__adddf3>
 800ad28:	4605      	mov	r5, r0
 800ad2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad2e:	2c00      	cmp	r4, #0
 800ad30:	f040 808d 	bne.w	800ae4e <_dtoa_r+0x51e>
 800ad34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad38:	4b71      	ldr	r3, [pc, #452]	@ (800af00 <_dtoa_r+0x5d0>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f7f5 fb2c 	bl	8000398 <__aeabi_dsub>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad48:	462a      	mov	r2, r5
 800ad4a:	4633      	mov	r3, r6
 800ad4c:	f7f5 ff6c 	bl	8000c28 <__aeabi_dcmpgt>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f040 828b 	bne.w	800b26c <_dtoa_r+0x93c>
 800ad56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad5a:	462a      	mov	r2, r5
 800ad5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad60:	f7f5 ff44 	bl	8000bec <__aeabi_dcmplt>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f040 8128 	bne.w	800afba <_dtoa_r+0x68a>
 800ad6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f2c0 815a 	blt.w	800b02e <_dtoa_r+0x6fe>
 800ad7a:	2f0e      	cmp	r7, #14
 800ad7c:	f300 8157 	bgt.w	800b02e <_dtoa_r+0x6fe>
 800ad80:	4b5a      	ldr	r3, [pc, #360]	@ (800aeec <_dtoa_r+0x5bc>)
 800ad82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad86:	ed93 7b00 	vldr	d7, [r3]
 800ad8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	ed8d 7b00 	vstr	d7, [sp]
 800ad92:	da03      	bge.n	800ad9c <_dtoa_r+0x46c>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	f340 8101 	ble.w	800af9e <_dtoa_r+0x66e>
 800ad9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ada0:	4656      	mov	r6, sl
 800ada2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fdd7 	bl	800095c <__aeabi_ddiv>
 800adae:	f7f5 ff5b 	bl	8000c68 <__aeabi_d2iz>
 800adb2:	4680      	mov	r8, r0
 800adb4:	f7f5 fc3e 	bl	8000634 <__aeabi_i2d>
 800adb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adbc:	f7f5 fca4 	bl	8000708 <__aeabi_dmul>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4620      	mov	r0, r4
 800adc6:	4629      	mov	r1, r5
 800adc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800adcc:	f7f5 fae4 	bl	8000398 <__aeabi_dsub>
 800add0:	f806 4b01 	strb.w	r4, [r6], #1
 800add4:	9d07      	ldr	r5, [sp, #28]
 800add6:	eba6 040a 	sub.w	r4, r6, sl
 800adda:	42a5      	cmp	r5, r4
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	f040 8117 	bne.w	800b012 <_dtoa_r+0x6e2>
 800ade4:	f7f5 fada 	bl	800039c <__adddf3>
 800ade8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adec:	4604      	mov	r4, r0
 800adee:	460d      	mov	r5, r1
 800adf0:	f7f5 ff1a 	bl	8000c28 <__aeabi_dcmpgt>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	f040 80f9 	bne.w	800afec <_dtoa_r+0x6bc>
 800adfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adfe:	4620      	mov	r0, r4
 800ae00:	4629      	mov	r1, r5
 800ae02:	f7f5 fee9 	bl	8000bd8 <__aeabi_dcmpeq>
 800ae06:	b118      	cbz	r0, 800ae10 <_dtoa_r+0x4e0>
 800ae08:	f018 0f01 	tst.w	r8, #1
 800ae0c:	f040 80ee 	bne.w	800afec <_dtoa_r+0x6bc>
 800ae10:	4649      	mov	r1, r9
 800ae12:	4658      	mov	r0, fp
 800ae14:	f000 fdc8 	bl	800b9a8 <_Bfree>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	7033      	strb	r3, [r6, #0]
 800ae1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae1e:	3701      	adds	r7, #1
 800ae20:	601f      	str	r7, [r3, #0]
 800ae22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 831d 	beq.w	800b464 <_dtoa_r+0xb34>
 800ae2a:	601e      	str	r6, [r3, #0]
 800ae2c:	e31a      	b.n	800b464 <_dtoa_r+0xb34>
 800ae2e:	07e2      	lsls	r2, r4, #31
 800ae30:	d505      	bpl.n	800ae3e <_dtoa_r+0x50e>
 800ae32:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae36:	f7f5 fc67 	bl	8000708 <__aeabi_dmul>
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	1064      	asrs	r4, r4, #1
 800ae40:	3508      	adds	r5, #8
 800ae42:	e73f      	b.n	800acc4 <_dtoa_r+0x394>
 800ae44:	2602      	movs	r6, #2
 800ae46:	e742      	b.n	800acce <_dtoa_r+0x39e>
 800ae48:	9c07      	ldr	r4, [sp, #28]
 800ae4a:	9704      	str	r7, [sp, #16]
 800ae4c:	e761      	b.n	800ad12 <_dtoa_r+0x3e2>
 800ae4e:	4b27      	ldr	r3, [pc, #156]	@ (800aeec <_dtoa_r+0x5bc>)
 800ae50:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae5a:	4454      	add	r4, sl
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d053      	beq.n	800af08 <_dtoa_r+0x5d8>
 800ae60:	4928      	ldr	r1, [pc, #160]	@ (800af04 <_dtoa_r+0x5d4>)
 800ae62:	2000      	movs	r0, #0
 800ae64:	f7f5 fd7a 	bl	800095c <__aeabi_ddiv>
 800ae68:	4633      	mov	r3, r6
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	f7f5 fa94 	bl	8000398 <__aeabi_dsub>
 800ae70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae74:	4656      	mov	r6, sl
 800ae76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7a:	f7f5 fef5 	bl	8000c68 <__aeabi_d2iz>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	f7f5 fbd8 	bl	8000634 <__aeabi_i2d>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8c:	f7f5 fa84 	bl	8000398 <__aeabi_dsub>
 800ae90:	3530      	adds	r5, #48	@ 0x30
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae9a:	f806 5b01 	strb.w	r5, [r6], #1
 800ae9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aea2:	f7f5 fea3 	bl	8000bec <__aeabi_dcmplt>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d171      	bne.n	800af8e <_dtoa_r+0x65e>
 800aeaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeae:	4911      	ldr	r1, [pc, #68]	@ (800aef4 <_dtoa_r+0x5c4>)
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	f7f5 fa71 	bl	8000398 <__aeabi_dsub>
 800aeb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aeba:	f7f5 fe97 	bl	8000bec <__aeabi_dcmplt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f040 8095 	bne.w	800afee <_dtoa_r+0x6be>
 800aec4:	42a6      	cmp	r6, r4
 800aec6:	f43f af50 	beq.w	800ad6a <_dtoa_r+0x43a>
 800aeca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aece:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <_dtoa_r+0x5c8>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	f7f5 fc19 	bl	8000708 <__aeabi_dmul>
 800aed6:	4b08      	ldr	r3, [pc, #32]	@ (800aef8 <_dtoa_r+0x5c8>)
 800aed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aedc:	2200      	movs	r2, #0
 800aede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aee2:	f7f5 fc11 	bl	8000708 <__aeabi_dmul>
 800aee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeea:	e7c4      	b.n	800ae76 <_dtoa_r+0x546>
 800aeec:	0803ac88 	.word	0x0803ac88
 800aef0:	0803ac60 	.word	0x0803ac60
 800aef4:	3ff00000 	.word	0x3ff00000
 800aef8:	40240000 	.word	0x40240000
 800aefc:	401c0000 	.word	0x401c0000
 800af00:	40140000 	.word	0x40140000
 800af04:	3fe00000 	.word	0x3fe00000
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	f7f5 fbfc 	bl	8000708 <__aeabi_dmul>
 800af10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af14:	9415      	str	r4, [sp, #84]	@ 0x54
 800af16:	4656      	mov	r6, sl
 800af18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af1c:	f7f5 fea4 	bl	8000c68 <__aeabi_d2iz>
 800af20:	4605      	mov	r5, r0
 800af22:	f7f5 fb87 	bl	8000634 <__aeabi_i2d>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af2e:	f7f5 fa33 	bl	8000398 <__aeabi_dsub>
 800af32:	3530      	adds	r5, #48	@ 0x30
 800af34:	f806 5b01 	strb.w	r5, [r6], #1
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	42a6      	cmp	r6, r4
 800af3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af42:	f04f 0200 	mov.w	r2, #0
 800af46:	d124      	bne.n	800af92 <_dtoa_r+0x662>
 800af48:	4bac      	ldr	r3, [pc, #688]	@ (800b1fc <_dtoa_r+0x8cc>)
 800af4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af4e:	f7f5 fa25 	bl	800039c <__adddf3>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5a:	f7f5 fe65 	bl	8000c28 <__aeabi_dcmpgt>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d145      	bne.n	800afee <_dtoa_r+0x6be>
 800af62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af66:	49a5      	ldr	r1, [pc, #660]	@ (800b1fc <_dtoa_r+0x8cc>)
 800af68:	2000      	movs	r0, #0
 800af6a:	f7f5 fa15 	bl	8000398 <__aeabi_dsub>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af76:	f7f5 fe39 	bl	8000bec <__aeabi_dcmplt>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f43f aef5 	beq.w	800ad6a <_dtoa_r+0x43a>
 800af80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800af82:	1e73      	subs	r3, r6, #1
 800af84:	9315      	str	r3, [sp, #84]	@ 0x54
 800af86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af8a:	2b30      	cmp	r3, #48	@ 0x30
 800af8c:	d0f8      	beq.n	800af80 <_dtoa_r+0x650>
 800af8e:	9f04      	ldr	r7, [sp, #16]
 800af90:	e73e      	b.n	800ae10 <_dtoa_r+0x4e0>
 800af92:	4b9b      	ldr	r3, [pc, #620]	@ (800b200 <_dtoa_r+0x8d0>)
 800af94:	f7f5 fbb8 	bl	8000708 <__aeabi_dmul>
 800af98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af9c:	e7bc      	b.n	800af18 <_dtoa_r+0x5e8>
 800af9e:	d10c      	bne.n	800afba <_dtoa_r+0x68a>
 800afa0:	4b98      	ldr	r3, [pc, #608]	@ (800b204 <_dtoa_r+0x8d4>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afa8:	f7f5 fbae 	bl	8000708 <__aeabi_dmul>
 800afac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afb0:	f7f5 fe30 	bl	8000c14 <__aeabi_dcmpge>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	f000 8157 	beq.w	800b268 <_dtoa_r+0x938>
 800afba:	2400      	movs	r4, #0
 800afbc:	4625      	mov	r5, r4
 800afbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc0:	43db      	mvns	r3, r3
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	4656      	mov	r6, sl
 800afc6:	2700      	movs	r7, #0
 800afc8:	4621      	mov	r1, r4
 800afca:	4658      	mov	r0, fp
 800afcc:	f000 fcec 	bl	800b9a8 <_Bfree>
 800afd0:	2d00      	cmp	r5, #0
 800afd2:	d0dc      	beq.n	800af8e <_dtoa_r+0x65e>
 800afd4:	b12f      	cbz	r7, 800afe2 <_dtoa_r+0x6b2>
 800afd6:	42af      	cmp	r7, r5
 800afd8:	d003      	beq.n	800afe2 <_dtoa_r+0x6b2>
 800afda:	4639      	mov	r1, r7
 800afdc:	4658      	mov	r0, fp
 800afde:	f000 fce3 	bl	800b9a8 <_Bfree>
 800afe2:	4629      	mov	r1, r5
 800afe4:	4658      	mov	r0, fp
 800afe6:	f000 fcdf 	bl	800b9a8 <_Bfree>
 800afea:	e7d0      	b.n	800af8e <_dtoa_r+0x65e>
 800afec:	9704      	str	r7, [sp, #16]
 800afee:	4633      	mov	r3, r6
 800aff0:	461e      	mov	r6, r3
 800aff2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aff6:	2a39      	cmp	r2, #57	@ 0x39
 800aff8:	d107      	bne.n	800b00a <_dtoa_r+0x6da>
 800affa:	459a      	cmp	sl, r3
 800affc:	d1f8      	bne.n	800aff0 <_dtoa_r+0x6c0>
 800affe:	9a04      	ldr	r2, [sp, #16]
 800b000:	3201      	adds	r2, #1
 800b002:	9204      	str	r2, [sp, #16]
 800b004:	2230      	movs	r2, #48	@ 0x30
 800b006:	f88a 2000 	strb.w	r2, [sl]
 800b00a:	781a      	ldrb	r2, [r3, #0]
 800b00c:	3201      	adds	r2, #1
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e7bd      	b.n	800af8e <_dtoa_r+0x65e>
 800b012:	4b7b      	ldr	r3, [pc, #492]	@ (800b200 <_dtoa_r+0x8d0>)
 800b014:	2200      	movs	r2, #0
 800b016:	f7f5 fb77 	bl	8000708 <__aeabi_dmul>
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	4604      	mov	r4, r0
 800b020:	460d      	mov	r5, r1
 800b022:	f7f5 fdd9 	bl	8000bd8 <__aeabi_dcmpeq>
 800b026:	2800      	cmp	r0, #0
 800b028:	f43f aebb 	beq.w	800ada2 <_dtoa_r+0x472>
 800b02c:	e6f0      	b.n	800ae10 <_dtoa_r+0x4e0>
 800b02e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b030:	2a00      	cmp	r2, #0
 800b032:	f000 80db 	beq.w	800b1ec <_dtoa_r+0x8bc>
 800b036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b038:	2a01      	cmp	r2, #1
 800b03a:	f300 80bf 	bgt.w	800b1bc <_dtoa_r+0x88c>
 800b03e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b040:	2a00      	cmp	r2, #0
 800b042:	f000 80b7 	beq.w	800b1b4 <_dtoa_r+0x884>
 800b046:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b04a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b04c:	4646      	mov	r6, r8
 800b04e:	9a08      	ldr	r2, [sp, #32]
 800b050:	2101      	movs	r1, #1
 800b052:	441a      	add	r2, r3
 800b054:	4658      	mov	r0, fp
 800b056:	4498      	add	r8, r3
 800b058:	9208      	str	r2, [sp, #32]
 800b05a:	f000 fd59 	bl	800bb10 <__i2b>
 800b05e:	4605      	mov	r5, r0
 800b060:	b15e      	cbz	r6, 800b07a <_dtoa_r+0x74a>
 800b062:	9b08      	ldr	r3, [sp, #32]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd08      	ble.n	800b07a <_dtoa_r+0x74a>
 800b068:	42b3      	cmp	r3, r6
 800b06a:	9a08      	ldr	r2, [sp, #32]
 800b06c:	bfa8      	it	ge
 800b06e:	4633      	movge	r3, r6
 800b070:	eba8 0803 	sub.w	r8, r8, r3
 800b074:	1af6      	subs	r6, r6, r3
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	9308      	str	r3, [sp, #32]
 800b07a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b07c:	b1f3      	cbz	r3, 800b0bc <_dtoa_r+0x78c>
 800b07e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b080:	2b00      	cmp	r3, #0
 800b082:	f000 80b7 	beq.w	800b1f4 <_dtoa_r+0x8c4>
 800b086:	b18c      	cbz	r4, 800b0ac <_dtoa_r+0x77c>
 800b088:	4629      	mov	r1, r5
 800b08a:	4622      	mov	r2, r4
 800b08c:	4658      	mov	r0, fp
 800b08e:	f000 fdff 	bl	800bc90 <__pow5mult>
 800b092:	464a      	mov	r2, r9
 800b094:	4601      	mov	r1, r0
 800b096:	4605      	mov	r5, r0
 800b098:	4658      	mov	r0, fp
 800b09a:	f000 fd4f 	bl	800bb3c <__multiply>
 800b09e:	4649      	mov	r1, r9
 800b0a0:	9004      	str	r0, [sp, #16]
 800b0a2:	4658      	mov	r0, fp
 800b0a4:	f000 fc80 	bl	800b9a8 <_Bfree>
 800b0a8:	9b04      	ldr	r3, [sp, #16]
 800b0aa:	4699      	mov	r9, r3
 800b0ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ae:	1b1a      	subs	r2, r3, r4
 800b0b0:	d004      	beq.n	800b0bc <_dtoa_r+0x78c>
 800b0b2:	4649      	mov	r1, r9
 800b0b4:	4658      	mov	r0, fp
 800b0b6:	f000 fdeb 	bl	800bc90 <__pow5mult>
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	2101      	movs	r1, #1
 800b0be:	4658      	mov	r0, fp
 800b0c0:	f000 fd26 	bl	800bb10 <__i2b>
 800b0c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0c6:	4604      	mov	r4, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 81cf 	beq.w	800b46c <_dtoa_r+0xb3c>
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4658      	mov	r0, fp
 800b0d4:	f000 fddc 	bl	800bc90 <__pow5mult>
 800b0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	4604      	mov	r4, r0
 800b0de:	f300 8095 	bgt.w	800b20c <_dtoa_r+0x8dc>
 800b0e2:	9b02      	ldr	r3, [sp, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f040 8087 	bne.w	800b1f8 <_dtoa_r+0x8c8>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f040 8089 	bne.w	800b208 <_dtoa_r+0x8d8>
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b0fc:	0d1b      	lsrs	r3, r3, #20
 800b0fe:	051b      	lsls	r3, r3, #20
 800b100:	b12b      	cbz	r3, 800b10e <_dtoa_r+0x7de>
 800b102:	9b08      	ldr	r3, [sp, #32]
 800b104:	3301      	adds	r3, #1
 800b106:	9308      	str	r3, [sp, #32]
 800b108:	f108 0801 	add.w	r8, r8, #1
 800b10c:	2301      	movs	r3, #1
 800b10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 81b0 	beq.w	800b478 <_dtoa_r+0xb48>
 800b118:	6923      	ldr	r3, [r4, #16]
 800b11a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b11e:	6918      	ldr	r0, [r3, #16]
 800b120:	f000 fcaa 	bl	800ba78 <__hi0bits>
 800b124:	f1c0 0020 	rsb	r0, r0, #32
 800b128:	9b08      	ldr	r3, [sp, #32]
 800b12a:	4418      	add	r0, r3
 800b12c:	f010 001f 	ands.w	r0, r0, #31
 800b130:	d077      	beq.n	800b222 <_dtoa_r+0x8f2>
 800b132:	f1c0 0320 	rsb	r3, r0, #32
 800b136:	2b04      	cmp	r3, #4
 800b138:	dd6b      	ble.n	800b212 <_dtoa_r+0x8e2>
 800b13a:	9b08      	ldr	r3, [sp, #32]
 800b13c:	f1c0 001c 	rsb	r0, r0, #28
 800b140:	4403      	add	r3, r0
 800b142:	4480      	add	r8, r0
 800b144:	4406      	add	r6, r0
 800b146:	9308      	str	r3, [sp, #32]
 800b148:	f1b8 0f00 	cmp.w	r8, #0
 800b14c:	dd05      	ble.n	800b15a <_dtoa_r+0x82a>
 800b14e:	4649      	mov	r1, r9
 800b150:	4642      	mov	r2, r8
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fdf6 	bl	800bd44 <__lshift>
 800b158:	4681      	mov	r9, r0
 800b15a:	9b08      	ldr	r3, [sp, #32]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dd05      	ble.n	800b16c <_dtoa_r+0x83c>
 800b160:	4621      	mov	r1, r4
 800b162:	461a      	mov	r2, r3
 800b164:	4658      	mov	r0, fp
 800b166:	f000 fded 	bl	800bd44 <__lshift>
 800b16a:	4604      	mov	r4, r0
 800b16c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d059      	beq.n	800b226 <_dtoa_r+0x8f6>
 800b172:	4621      	mov	r1, r4
 800b174:	4648      	mov	r0, r9
 800b176:	f000 fe51 	bl	800be1c <__mcmp>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	da53      	bge.n	800b226 <_dtoa_r+0x8f6>
 800b17e:	1e7b      	subs	r3, r7, #1
 800b180:	9304      	str	r3, [sp, #16]
 800b182:	4649      	mov	r1, r9
 800b184:	2300      	movs	r3, #0
 800b186:	220a      	movs	r2, #10
 800b188:	4658      	mov	r0, fp
 800b18a:	f000 fc2f 	bl	800b9ec <__multadd>
 800b18e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b190:	4681      	mov	r9, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	f000 8172 	beq.w	800b47c <_dtoa_r+0xb4c>
 800b198:	2300      	movs	r3, #0
 800b19a:	4629      	mov	r1, r5
 800b19c:	220a      	movs	r2, #10
 800b19e:	4658      	mov	r0, fp
 800b1a0:	f000 fc24 	bl	800b9ec <__multadd>
 800b1a4:	9b00      	ldr	r3, [sp, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	dc67      	bgt.n	800b27c <_dtoa_r+0x94c>
 800b1ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	dc41      	bgt.n	800b236 <_dtoa_r+0x906>
 800b1b2:	e063      	b.n	800b27c <_dtoa_r+0x94c>
 800b1b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b1b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1ba:	e746      	b.n	800b04a <_dtoa_r+0x71a>
 800b1bc:	9b07      	ldr	r3, [sp, #28]
 800b1be:	1e5c      	subs	r4, r3, #1
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c2:	42a3      	cmp	r3, r4
 800b1c4:	bfbf      	itttt	lt
 800b1c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b1c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b1ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b1cc:	1ae3      	sublt	r3, r4, r3
 800b1ce:	bfb4      	ite	lt
 800b1d0:	18d2      	addlt	r2, r2, r3
 800b1d2:	1b1c      	subge	r4, r3, r4
 800b1d4:	9b07      	ldr	r3, [sp, #28]
 800b1d6:	bfbc      	itt	lt
 800b1d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b1da:	2400      	movlt	r4, #0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bfb5      	itete	lt
 800b1e0:	eba8 0603 	sublt.w	r6, r8, r3
 800b1e4:	9b07      	ldrge	r3, [sp, #28]
 800b1e6:	2300      	movlt	r3, #0
 800b1e8:	4646      	movge	r6, r8
 800b1ea:	e730      	b.n	800b04e <_dtoa_r+0x71e>
 800b1ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1f0:	4646      	mov	r6, r8
 800b1f2:	e735      	b.n	800b060 <_dtoa_r+0x730>
 800b1f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1f6:	e75c      	b.n	800b0b2 <_dtoa_r+0x782>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e788      	b.n	800b10e <_dtoa_r+0x7de>
 800b1fc:	3fe00000 	.word	0x3fe00000
 800b200:	40240000 	.word	0x40240000
 800b204:	40140000 	.word	0x40140000
 800b208:	9b02      	ldr	r3, [sp, #8]
 800b20a:	e780      	b.n	800b10e <_dtoa_r+0x7de>
 800b20c:	2300      	movs	r3, #0
 800b20e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b210:	e782      	b.n	800b118 <_dtoa_r+0x7e8>
 800b212:	d099      	beq.n	800b148 <_dtoa_r+0x818>
 800b214:	9a08      	ldr	r2, [sp, #32]
 800b216:	331c      	adds	r3, #28
 800b218:	441a      	add	r2, r3
 800b21a:	4498      	add	r8, r3
 800b21c:	441e      	add	r6, r3
 800b21e:	9208      	str	r2, [sp, #32]
 800b220:	e792      	b.n	800b148 <_dtoa_r+0x818>
 800b222:	4603      	mov	r3, r0
 800b224:	e7f6      	b.n	800b214 <_dtoa_r+0x8e4>
 800b226:	9b07      	ldr	r3, [sp, #28]
 800b228:	9704      	str	r7, [sp, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	dc20      	bgt.n	800b270 <_dtoa_r+0x940>
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b232:	2b02      	cmp	r3, #2
 800b234:	dd1e      	ble.n	800b274 <_dtoa_r+0x944>
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f47f aec0 	bne.w	800afbe <_dtoa_r+0x68e>
 800b23e:	4621      	mov	r1, r4
 800b240:	2205      	movs	r2, #5
 800b242:	4658      	mov	r0, fp
 800b244:	f000 fbd2 	bl	800b9ec <__multadd>
 800b248:	4601      	mov	r1, r0
 800b24a:	4604      	mov	r4, r0
 800b24c:	4648      	mov	r0, r9
 800b24e:	f000 fde5 	bl	800be1c <__mcmp>
 800b252:	2800      	cmp	r0, #0
 800b254:	f77f aeb3 	ble.w	800afbe <_dtoa_r+0x68e>
 800b258:	4656      	mov	r6, sl
 800b25a:	2331      	movs	r3, #49	@ 0x31
 800b25c:	f806 3b01 	strb.w	r3, [r6], #1
 800b260:	9b04      	ldr	r3, [sp, #16]
 800b262:	3301      	adds	r3, #1
 800b264:	9304      	str	r3, [sp, #16]
 800b266:	e6ae      	b.n	800afc6 <_dtoa_r+0x696>
 800b268:	9c07      	ldr	r4, [sp, #28]
 800b26a:	9704      	str	r7, [sp, #16]
 800b26c:	4625      	mov	r5, r4
 800b26e:	e7f3      	b.n	800b258 <_dtoa_r+0x928>
 800b270:	9b07      	ldr	r3, [sp, #28]
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 8104 	beq.w	800b484 <_dtoa_r+0xb54>
 800b27c:	2e00      	cmp	r6, #0
 800b27e:	dd05      	ble.n	800b28c <_dtoa_r+0x95c>
 800b280:	4629      	mov	r1, r5
 800b282:	4632      	mov	r2, r6
 800b284:	4658      	mov	r0, fp
 800b286:	f000 fd5d 	bl	800bd44 <__lshift>
 800b28a:	4605      	mov	r5, r0
 800b28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d05a      	beq.n	800b348 <_dtoa_r+0xa18>
 800b292:	6869      	ldr	r1, [r5, #4]
 800b294:	4658      	mov	r0, fp
 800b296:	f000 fb47 	bl	800b928 <_Balloc>
 800b29a:	4606      	mov	r6, r0
 800b29c:	b928      	cbnz	r0, 800b2aa <_dtoa_r+0x97a>
 800b29e:	4b84      	ldr	r3, [pc, #528]	@ (800b4b0 <_dtoa_r+0xb80>)
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b2a6:	f7ff bb5a 	b.w	800a95e <_dtoa_r+0x2e>
 800b2aa:	692a      	ldr	r2, [r5, #16]
 800b2ac:	3202      	adds	r2, #2
 800b2ae:	0092      	lsls	r2, r2, #2
 800b2b0:	f105 010c 	add.w	r1, r5, #12
 800b2b4:	300c      	adds	r0, #12
 800b2b6:	f7ff faa4 	bl	800a802 <memcpy>
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4658      	mov	r0, fp
 800b2c0:	f000 fd40 	bl	800bd44 <__lshift>
 800b2c4:	f10a 0301 	add.w	r3, sl, #1
 800b2c8:	9307      	str	r3, [sp, #28]
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	4453      	add	r3, sl
 800b2ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2d0:	9b02      	ldr	r3, [sp, #8]
 800b2d2:	f003 0301 	and.w	r3, r3, #1
 800b2d6:	462f      	mov	r7, r5
 800b2d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2da:	4605      	mov	r5, r0
 800b2dc:	9b07      	ldr	r3, [sp, #28]
 800b2de:	4621      	mov	r1, r4
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	4648      	mov	r0, r9
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	f7ff fa9a 	bl	800a81e <quorem>
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	9002      	str	r0, [sp, #8]
 800b2ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2f2:	4648      	mov	r0, r9
 800b2f4:	f000 fd92 	bl	800be1c <__mcmp>
 800b2f8:	462a      	mov	r2, r5
 800b2fa:	9008      	str	r0, [sp, #32]
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4658      	mov	r0, fp
 800b300:	f000 fda8 	bl	800be54 <__mdiff>
 800b304:	68c2      	ldr	r2, [r0, #12]
 800b306:	4606      	mov	r6, r0
 800b308:	bb02      	cbnz	r2, 800b34c <_dtoa_r+0xa1c>
 800b30a:	4601      	mov	r1, r0
 800b30c:	4648      	mov	r0, r9
 800b30e:	f000 fd85 	bl	800be1c <__mcmp>
 800b312:	4602      	mov	r2, r0
 800b314:	4631      	mov	r1, r6
 800b316:	4658      	mov	r0, fp
 800b318:	920e      	str	r2, [sp, #56]	@ 0x38
 800b31a:	f000 fb45 	bl	800b9a8 <_Bfree>
 800b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b322:	9e07      	ldr	r6, [sp, #28]
 800b324:	ea43 0102 	orr.w	r1, r3, r2
 800b328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b32a:	4319      	orrs	r1, r3
 800b32c:	d110      	bne.n	800b350 <_dtoa_r+0xa20>
 800b32e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b332:	d029      	beq.n	800b388 <_dtoa_r+0xa58>
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	2b00      	cmp	r3, #0
 800b338:	dd02      	ble.n	800b340 <_dtoa_r+0xa10>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b340:	9b00      	ldr	r3, [sp, #0]
 800b342:	f883 8000 	strb.w	r8, [r3]
 800b346:	e63f      	b.n	800afc8 <_dtoa_r+0x698>
 800b348:	4628      	mov	r0, r5
 800b34a:	e7bb      	b.n	800b2c4 <_dtoa_r+0x994>
 800b34c:	2201      	movs	r2, #1
 800b34e:	e7e1      	b.n	800b314 <_dtoa_r+0x9e4>
 800b350:	9b08      	ldr	r3, [sp, #32]
 800b352:	2b00      	cmp	r3, #0
 800b354:	db04      	blt.n	800b360 <_dtoa_r+0xa30>
 800b356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b358:	430b      	orrs	r3, r1
 800b35a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b35c:	430b      	orrs	r3, r1
 800b35e:	d120      	bne.n	800b3a2 <_dtoa_r+0xa72>
 800b360:	2a00      	cmp	r2, #0
 800b362:	dded      	ble.n	800b340 <_dtoa_r+0xa10>
 800b364:	4649      	mov	r1, r9
 800b366:	2201      	movs	r2, #1
 800b368:	4658      	mov	r0, fp
 800b36a:	f000 fceb 	bl	800bd44 <__lshift>
 800b36e:	4621      	mov	r1, r4
 800b370:	4681      	mov	r9, r0
 800b372:	f000 fd53 	bl	800be1c <__mcmp>
 800b376:	2800      	cmp	r0, #0
 800b378:	dc03      	bgt.n	800b382 <_dtoa_r+0xa52>
 800b37a:	d1e1      	bne.n	800b340 <_dtoa_r+0xa10>
 800b37c:	f018 0f01 	tst.w	r8, #1
 800b380:	d0de      	beq.n	800b340 <_dtoa_r+0xa10>
 800b382:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b386:	d1d8      	bne.n	800b33a <_dtoa_r+0xa0a>
 800b388:	9a00      	ldr	r2, [sp, #0]
 800b38a:	2339      	movs	r3, #57	@ 0x39
 800b38c:	7013      	strb	r3, [r2, #0]
 800b38e:	4633      	mov	r3, r6
 800b390:	461e      	mov	r6, r3
 800b392:	3b01      	subs	r3, #1
 800b394:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b398:	2a39      	cmp	r2, #57	@ 0x39
 800b39a:	d052      	beq.n	800b442 <_dtoa_r+0xb12>
 800b39c:	3201      	adds	r2, #1
 800b39e:	701a      	strb	r2, [r3, #0]
 800b3a0:	e612      	b.n	800afc8 <_dtoa_r+0x698>
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	dd07      	ble.n	800b3b6 <_dtoa_r+0xa86>
 800b3a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3aa:	d0ed      	beq.n	800b388 <_dtoa_r+0xa58>
 800b3ac:	9a00      	ldr	r2, [sp, #0]
 800b3ae:	f108 0301 	add.w	r3, r8, #1
 800b3b2:	7013      	strb	r3, [r2, #0]
 800b3b4:	e608      	b.n	800afc8 <_dtoa_r+0x698>
 800b3b6:	9b07      	ldr	r3, [sp, #28]
 800b3b8:	9a07      	ldr	r2, [sp, #28]
 800b3ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d028      	beq.n	800b416 <_dtoa_r+0xae6>
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	220a      	movs	r2, #10
 800b3ca:	4658      	mov	r0, fp
 800b3cc:	f000 fb0e 	bl	800b9ec <__multadd>
 800b3d0:	42af      	cmp	r7, r5
 800b3d2:	4681      	mov	r9, r0
 800b3d4:	f04f 0300 	mov.w	r3, #0
 800b3d8:	f04f 020a 	mov.w	r2, #10
 800b3dc:	4639      	mov	r1, r7
 800b3de:	4658      	mov	r0, fp
 800b3e0:	d107      	bne.n	800b3f2 <_dtoa_r+0xac2>
 800b3e2:	f000 fb03 	bl	800b9ec <__multadd>
 800b3e6:	4607      	mov	r7, r0
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	9b07      	ldr	r3, [sp, #28]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	9307      	str	r3, [sp, #28]
 800b3f0:	e774      	b.n	800b2dc <_dtoa_r+0x9ac>
 800b3f2:	f000 fafb 	bl	800b9ec <__multadd>
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	4607      	mov	r7, r0
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	220a      	movs	r2, #10
 800b3fe:	4658      	mov	r0, fp
 800b400:	f000 faf4 	bl	800b9ec <__multadd>
 800b404:	4605      	mov	r5, r0
 800b406:	e7f0      	b.n	800b3ea <_dtoa_r+0xaba>
 800b408:	9b00      	ldr	r3, [sp, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bfcc      	ite	gt
 800b40e:	461e      	movgt	r6, r3
 800b410:	2601      	movle	r6, #1
 800b412:	4456      	add	r6, sl
 800b414:	2700      	movs	r7, #0
 800b416:	4649      	mov	r1, r9
 800b418:	2201      	movs	r2, #1
 800b41a:	4658      	mov	r0, fp
 800b41c:	f000 fc92 	bl	800bd44 <__lshift>
 800b420:	4621      	mov	r1, r4
 800b422:	4681      	mov	r9, r0
 800b424:	f000 fcfa 	bl	800be1c <__mcmp>
 800b428:	2800      	cmp	r0, #0
 800b42a:	dcb0      	bgt.n	800b38e <_dtoa_r+0xa5e>
 800b42c:	d102      	bne.n	800b434 <_dtoa_r+0xb04>
 800b42e:	f018 0f01 	tst.w	r8, #1
 800b432:	d1ac      	bne.n	800b38e <_dtoa_r+0xa5e>
 800b434:	4633      	mov	r3, r6
 800b436:	461e      	mov	r6, r3
 800b438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b43c:	2a30      	cmp	r2, #48	@ 0x30
 800b43e:	d0fa      	beq.n	800b436 <_dtoa_r+0xb06>
 800b440:	e5c2      	b.n	800afc8 <_dtoa_r+0x698>
 800b442:	459a      	cmp	sl, r3
 800b444:	d1a4      	bne.n	800b390 <_dtoa_r+0xa60>
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	3301      	adds	r3, #1
 800b44a:	9304      	str	r3, [sp, #16]
 800b44c:	2331      	movs	r3, #49	@ 0x31
 800b44e:	f88a 3000 	strb.w	r3, [sl]
 800b452:	e5b9      	b.n	800afc8 <_dtoa_r+0x698>
 800b454:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b456:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b4b4 <_dtoa_r+0xb84>
 800b45a:	b11b      	cbz	r3, 800b464 <_dtoa_r+0xb34>
 800b45c:	f10a 0308 	add.w	r3, sl, #8
 800b460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	4650      	mov	r0, sl
 800b466:	b019      	add	sp, #100	@ 0x64
 800b468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b46e:	2b01      	cmp	r3, #1
 800b470:	f77f ae37 	ble.w	800b0e2 <_dtoa_r+0x7b2>
 800b474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b476:	930a      	str	r3, [sp, #40]	@ 0x28
 800b478:	2001      	movs	r0, #1
 800b47a:	e655      	b.n	800b128 <_dtoa_r+0x7f8>
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f77f aed6 	ble.w	800b230 <_dtoa_r+0x900>
 800b484:	4656      	mov	r6, sl
 800b486:	4621      	mov	r1, r4
 800b488:	4648      	mov	r0, r9
 800b48a:	f7ff f9c8 	bl	800a81e <quorem>
 800b48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b492:	f806 8b01 	strb.w	r8, [r6], #1
 800b496:	9b00      	ldr	r3, [sp, #0]
 800b498:	eba6 020a 	sub.w	r2, r6, sl
 800b49c:	4293      	cmp	r3, r2
 800b49e:	ddb3      	ble.n	800b408 <_dtoa_r+0xad8>
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	220a      	movs	r2, #10
 800b4a6:	4658      	mov	r0, fp
 800b4a8:	f000 faa0 	bl	800b9ec <__multadd>
 800b4ac:	4681      	mov	r9, r0
 800b4ae:	e7ea      	b.n	800b486 <_dtoa_r+0xb56>
 800b4b0:	0803abd8 	.word	0x0803abd8
 800b4b4:	0803ab5c 	.word	0x0803ab5c

0800b4b8 <_free_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d041      	beq.n	800b544 <_free_r+0x8c>
 800b4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c4:	1f0c      	subs	r4, r1, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	bfb8      	it	lt
 800b4ca:	18e4      	addlt	r4, r4, r3
 800b4cc:	f7ff f812 	bl	800a4f4 <__malloc_lock>
 800b4d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b548 <_free_r+0x90>)
 800b4d2:	6813      	ldr	r3, [r2, #0]
 800b4d4:	b933      	cbnz	r3, 800b4e4 <_free_r+0x2c>
 800b4d6:	6063      	str	r3, [r4, #4]
 800b4d8:	6014      	str	r4, [r2, #0]
 800b4da:	4628      	mov	r0, r5
 800b4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4e0:	f7ff b80e 	b.w	800a500 <__malloc_unlock>
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d908      	bls.n	800b4fa <_free_r+0x42>
 800b4e8:	6820      	ldr	r0, [r4, #0]
 800b4ea:	1821      	adds	r1, r4, r0
 800b4ec:	428b      	cmp	r3, r1
 800b4ee:	bf01      	itttt	eq
 800b4f0:	6819      	ldreq	r1, [r3, #0]
 800b4f2:	685b      	ldreq	r3, [r3, #4]
 800b4f4:	1809      	addeq	r1, r1, r0
 800b4f6:	6021      	streq	r1, [r4, #0]
 800b4f8:	e7ed      	b.n	800b4d6 <_free_r+0x1e>
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	b10b      	cbz	r3, 800b504 <_free_r+0x4c>
 800b500:	42a3      	cmp	r3, r4
 800b502:	d9fa      	bls.n	800b4fa <_free_r+0x42>
 800b504:	6811      	ldr	r1, [r2, #0]
 800b506:	1850      	adds	r0, r2, r1
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d10b      	bne.n	800b524 <_free_r+0x6c>
 800b50c:	6820      	ldr	r0, [r4, #0]
 800b50e:	4401      	add	r1, r0
 800b510:	1850      	adds	r0, r2, r1
 800b512:	4283      	cmp	r3, r0
 800b514:	6011      	str	r1, [r2, #0]
 800b516:	d1e0      	bne.n	800b4da <_free_r+0x22>
 800b518:	6818      	ldr	r0, [r3, #0]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	6053      	str	r3, [r2, #4]
 800b51e:	4408      	add	r0, r1
 800b520:	6010      	str	r0, [r2, #0]
 800b522:	e7da      	b.n	800b4da <_free_r+0x22>
 800b524:	d902      	bls.n	800b52c <_free_r+0x74>
 800b526:	230c      	movs	r3, #12
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	e7d6      	b.n	800b4da <_free_r+0x22>
 800b52c:	6820      	ldr	r0, [r4, #0]
 800b52e:	1821      	adds	r1, r4, r0
 800b530:	428b      	cmp	r3, r1
 800b532:	bf04      	itt	eq
 800b534:	6819      	ldreq	r1, [r3, #0]
 800b536:	685b      	ldreq	r3, [r3, #4]
 800b538:	6063      	str	r3, [r4, #4]
 800b53a:	bf04      	itt	eq
 800b53c:	1809      	addeq	r1, r1, r0
 800b53e:	6021      	streq	r1, [r4, #0]
 800b540:	6054      	str	r4, [r2, #4]
 800b542:	e7ca      	b.n	800b4da <_free_r+0x22>
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	bf00      	nop
 800b548:	2001055c 	.word	0x2001055c

0800b54c <__sfputc_r>:
 800b54c:	6893      	ldr	r3, [r2, #8]
 800b54e:	3b01      	subs	r3, #1
 800b550:	2b00      	cmp	r3, #0
 800b552:	b410      	push	{r4}
 800b554:	6093      	str	r3, [r2, #8]
 800b556:	da08      	bge.n	800b56a <__sfputc_r+0x1e>
 800b558:	6994      	ldr	r4, [r2, #24]
 800b55a:	42a3      	cmp	r3, r4
 800b55c:	db01      	blt.n	800b562 <__sfputc_r+0x16>
 800b55e:	290a      	cmp	r1, #10
 800b560:	d103      	bne.n	800b56a <__sfputc_r+0x1e>
 800b562:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b566:	f000 bda4 	b.w	800c0b2 <__swbuf_r>
 800b56a:	6813      	ldr	r3, [r2, #0]
 800b56c:	1c58      	adds	r0, r3, #1
 800b56e:	6010      	str	r0, [r2, #0]
 800b570:	7019      	strb	r1, [r3, #0]
 800b572:	4608      	mov	r0, r1
 800b574:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <__sfputs_r>:
 800b57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	4614      	mov	r4, r2
 800b582:	18d5      	adds	r5, r2, r3
 800b584:	42ac      	cmp	r4, r5
 800b586:	d101      	bne.n	800b58c <__sfputs_r+0x12>
 800b588:	2000      	movs	r0, #0
 800b58a:	e007      	b.n	800b59c <__sfputs_r+0x22>
 800b58c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b590:	463a      	mov	r2, r7
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ffda 	bl	800b54c <__sfputc_r>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d1f3      	bne.n	800b584 <__sfputs_r+0xa>
 800b59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5a0 <_vfiprintf_r>:
 800b5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	b09d      	sub	sp, #116	@ 0x74
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	4698      	mov	r8, r3
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	b118      	cbz	r0, 800b5b8 <_vfiprintf_r+0x18>
 800b5b0:	6a03      	ldr	r3, [r0, #32]
 800b5b2:	b90b      	cbnz	r3, 800b5b8 <_vfiprintf_r+0x18>
 800b5b4:	f7ff f836 	bl	800a624 <__sinit>
 800b5b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5ba:	07d9      	lsls	r1, r3, #31
 800b5bc:	d405      	bmi.n	800b5ca <_vfiprintf_r+0x2a>
 800b5be:	89ab      	ldrh	r3, [r5, #12]
 800b5c0:	059a      	lsls	r2, r3, #22
 800b5c2:	d402      	bmi.n	800b5ca <_vfiprintf_r+0x2a>
 800b5c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5c6:	f7ff f91a 	bl	800a7fe <__retarget_lock_acquire_recursive>
 800b5ca:	89ab      	ldrh	r3, [r5, #12]
 800b5cc:	071b      	lsls	r3, r3, #28
 800b5ce:	d501      	bpl.n	800b5d4 <_vfiprintf_r+0x34>
 800b5d0:	692b      	ldr	r3, [r5, #16]
 800b5d2:	b99b      	cbnz	r3, 800b5fc <_vfiprintf_r+0x5c>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	f000 fdaa 	bl	800c130 <__swsetup_r>
 800b5dc:	b170      	cbz	r0, 800b5fc <_vfiprintf_r+0x5c>
 800b5de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5e0:	07dc      	lsls	r4, r3, #31
 800b5e2:	d504      	bpl.n	800b5ee <_vfiprintf_r+0x4e>
 800b5e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5e8:	b01d      	add	sp, #116	@ 0x74
 800b5ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ee:	89ab      	ldrh	r3, [r5, #12]
 800b5f0:	0598      	lsls	r0, r3, #22
 800b5f2:	d4f7      	bmi.n	800b5e4 <_vfiprintf_r+0x44>
 800b5f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5f6:	f7ff f903 	bl	800a800 <__retarget_lock_release_recursive>
 800b5fa:	e7f3      	b.n	800b5e4 <_vfiprintf_r+0x44>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b600:	2320      	movs	r3, #32
 800b602:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b606:	f8cd 800c 	str.w	r8, [sp, #12]
 800b60a:	2330      	movs	r3, #48	@ 0x30
 800b60c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7bc <_vfiprintf_r+0x21c>
 800b610:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b614:	f04f 0901 	mov.w	r9, #1
 800b618:	4623      	mov	r3, r4
 800b61a:	469a      	mov	sl, r3
 800b61c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b620:	b10a      	cbz	r2, 800b626 <_vfiprintf_r+0x86>
 800b622:	2a25      	cmp	r2, #37	@ 0x25
 800b624:	d1f9      	bne.n	800b61a <_vfiprintf_r+0x7a>
 800b626:	ebba 0b04 	subs.w	fp, sl, r4
 800b62a:	d00b      	beq.n	800b644 <_vfiprintf_r+0xa4>
 800b62c:	465b      	mov	r3, fp
 800b62e:	4622      	mov	r2, r4
 800b630:	4629      	mov	r1, r5
 800b632:	4630      	mov	r0, r6
 800b634:	f7ff ffa1 	bl	800b57a <__sfputs_r>
 800b638:	3001      	adds	r0, #1
 800b63a:	f000 80a7 	beq.w	800b78c <_vfiprintf_r+0x1ec>
 800b63e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b640:	445a      	add	r2, fp
 800b642:	9209      	str	r2, [sp, #36]	@ 0x24
 800b644:	f89a 3000 	ldrb.w	r3, [sl]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 809f 	beq.w	800b78c <_vfiprintf_r+0x1ec>
 800b64e:	2300      	movs	r3, #0
 800b650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b658:	f10a 0a01 	add.w	sl, sl, #1
 800b65c:	9304      	str	r3, [sp, #16]
 800b65e:	9307      	str	r3, [sp, #28]
 800b660:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b664:	931a      	str	r3, [sp, #104]	@ 0x68
 800b666:	4654      	mov	r4, sl
 800b668:	2205      	movs	r2, #5
 800b66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b66e:	4853      	ldr	r0, [pc, #332]	@ (800b7bc <_vfiprintf_r+0x21c>)
 800b670:	f7f4 fe36 	bl	80002e0 <memchr>
 800b674:	9a04      	ldr	r2, [sp, #16]
 800b676:	b9d8      	cbnz	r0, 800b6b0 <_vfiprintf_r+0x110>
 800b678:	06d1      	lsls	r1, r2, #27
 800b67a:	bf44      	itt	mi
 800b67c:	2320      	movmi	r3, #32
 800b67e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b682:	0713      	lsls	r3, r2, #28
 800b684:	bf44      	itt	mi
 800b686:	232b      	movmi	r3, #43	@ 0x2b
 800b688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b68c:	f89a 3000 	ldrb.w	r3, [sl]
 800b690:	2b2a      	cmp	r3, #42	@ 0x2a
 800b692:	d015      	beq.n	800b6c0 <_vfiprintf_r+0x120>
 800b694:	9a07      	ldr	r2, [sp, #28]
 800b696:	4654      	mov	r4, sl
 800b698:	2000      	movs	r0, #0
 800b69a:	f04f 0c0a 	mov.w	ip, #10
 800b69e:	4621      	mov	r1, r4
 800b6a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6a4:	3b30      	subs	r3, #48	@ 0x30
 800b6a6:	2b09      	cmp	r3, #9
 800b6a8:	d94b      	bls.n	800b742 <_vfiprintf_r+0x1a2>
 800b6aa:	b1b0      	cbz	r0, 800b6da <_vfiprintf_r+0x13a>
 800b6ac:	9207      	str	r2, [sp, #28]
 800b6ae:	e014      	b.n	800b6da <_vfiprintf_r+0x13a>
 800b6b0:	eba0 0308 	sub.w	r3, r0, r8
 800b6b4:	fa09 f303 	lsl.w	r3, r9, r3
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	46a2      	mov	sl, r4
 800b6be:	e7d2      	b.n	800b666 <_vfiprintf_r+0xc6>
 800b6c0:	9b03      	ldr	r3, [sp, #12]
 800b6c2:	1d19      	adds	r1, r3, #4
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	9103      	str	r1, [sp, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	bfbb      	ittet	lt
 800b6cc:	425b      	neglt	r3, r3
 800b6ce:	f042 0202 	orrlt.w	r2, r2, #2
 800b6d2:	9307      	strge	r3, [sp, #28]
 800b6d4:	9307      	strlt	r3, [sp, #28]
 800b6d6:	bfb8      	it	lt
 800b6d8:	9204      	strlt	r2, [sp, #16]
 800b6da:	7823      	ldrb	r3, [r4, #0]
 800b6dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6de:	d10a      	bne.n	800b6f6 <_vfiprintf_r+0x156>
 800b6e0:	7863      	ldrb	r3, [r4, #1]
 800b6e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6e4:	d132      	bne.n	800b74c <_vfiprintf_r+0x1ac>
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	1d1a      	adds	r2, r3, #4
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	9203      	str	r2, [sp, #12]
 800b6ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6f2:	3402      	adds	r4, #2
 800b6f4:	9305      	str	r3, [sp, #20]
 800b6f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7cc <_vfiprintf_r+0x22c>
 800b6fa:	7821      	ldrb	r1, [r4, #0]
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	4650      	mov	r0, sl
 800b700:	f7f4 fdee 	bl	80002e0 <memchr>
 800b704:	b138      	cbz	r0, 800b716 <_vfiprintf_r+0x176>
 800b706:	9b04      	ldr	r3, [sp, #16]
 800b708:	eba0 000a 	sub.w	r0, r0, sl
 800b70c:	2240      	movs	r2, #64	@ 0x40
 800b70e:	4082      	lsls	r2, r0
 800b710:	4313      	orrs	r3, r2
 800b712:	3401      	adds	r4, #1
 800b714:	9304      	str	r3, [sp, #16]
 800b716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b71a:	4829      	ldr	r0, [pc, #164]	@ (800b7c0 <_vfiprintf_r+0x220>)
 800b71c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b720:	2206      	movs	r2, #6
 800b722:	f7f4 fddd 	bl	80002e0 <memchr>
 800b726:	2800      	cmp	r0, #0
 800b728:	d03f      	beq.n	800b7aa <_vfiprintf_r+0x20a>
 800b72a:	4b26      	ldr	r3, [pc, #152]	@ (800b7c4 <_vfiprintf_r+0x224>)
 800b72c:	bb1b      	cbnz	r3, 800b776 <_vfiprintf_r+0x1d6>
 800b72e:	9b03      	ldr	r3, [sp, #12]
 800b730:	3307      	adds	r3, #7
 800b732:	f023 0307 	bic.w	r3, r3, #7
 800b736:	3308      	adds	r3, #8
 800b738:	9303      	str	r3, [sp, #12]
 800b73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b73c:	443b      	add	r3, r7
 800b73e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b740:	e76a      	b.n	800b618 <_vfiprintf_r+0x78>
 800b742:	fb0c 3202 	mla	r2, ip, r2, r3
 800b746:	460c      	mov	r4, r1
 800b748:	2001      	movs	r0, #1
 800b74a:	e7a8      	b.n	800b69e <_vfiprintf_r+0xfe>
 800b74c:	2300      	movs	r3, #0
 800b74e:	3401      	adds	r4, #1
 800b750:	9305      	str	r3, [sp, #20]
 800b752:	4619      	mov	r1, r3
 800b754:	f04f 0c0a 	mov.w	ip, #10
 800b758:	4620      	mov	r0, r4
 800b75a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b75e:	3a30      	subs	r2, #48	@ 0x30
 800b760:	2a09      	cmp	r2, #9
 800b762:	d903      	bls.n	800b76c <_vfiprintf_r+0x1cc>
 800b764:	2b00      	cmp	r3, #0
 800b766:	d0c6      	beq.n	800b6f6 <_vfiprintf_r+0x156>
 800b768:	9105      	str	r1, [sp, #20]
 800b76a:	e7c4      	b.n	800b6f6 <_vfiprintf_r+0x156>
 800b76c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b770:	4604      	mov	r4, r0
 800b772:	2301      	movs	r3, #1
 800b774:	e7f0      	b.n	800b758 <_vfiprintf_r+0x1b8>
 800b776:	ab03      	add	r3, sp, #12
 800b778:	9300      	str	r3, [sp, #0]
 800b77a:	462a      	mov	r2, r5
 800b77c:	4b12      	ldr	r3, [pc, #72]	@ (800b7c8 <_vfiprintf_r+0x228>)
 800b77e:	a904      	add	r1, sp, #16
 800b780:	4630      	mov	r0, r6
 800b782:	f7fe fa55 	bl	8009c30 <_printf_float>
 800b786:	4607      	mov	r7, r0
 800b788:	1c78      	adds	r0, r7, #1
 800b78a:	d1d6      	bne.n	800b73a <_vfiprintf_r+0x19a>
 800b78c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b78e:	07d9      	lsls	r1, r3, #31
 800b790:	d405      	bmi.n	800b79e <_vfiprintf_r+0x1fe>
 800b792:	89ab      	ldrh	r3, [r5, #12]
 800b794:	059a      	lsls	r2, r3, #22
 800b796:	d402      	bmi.n	800b79e <_vfiprintf_r+0x1fe>
 800b798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b79a:	f7ff f831 	bl	800a800 <__retarget_lock_release_recursive>
 800b79e:	89ab      	ldrh	r3, [r5, #12]
 800b7a0:	065b      	lsls	r3, r3, #25
 800b7a2:	f53f af1f 	bmi.w	800b5e4 <_vfiprintf_r+0x44>
 800b7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7a8:	e71e      	b.n	800b5e8 <_vfiprintf_r+0x48>
 800b7aa:	ab03      	add	r3, sp, #12
 800b7ac:	9300      	str	r3, [sp, #0]
 800b7ae:	462a      	mov	r2, r5
 800b7b0:	4b05      	ldr	r3, [pc, #20]	@ (800b7c8 <_vfiprintf_r+0x228>)
 800b7b2:	a904      	add	r1, sp, #16
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7fe fd7d 	bl	800a2b4 <_printf_i>
 800b7ba:	e7e4      	b.n	800b786 <_vfiprintf_r+0x1e6>
 800b7bc:	0803abe9 	.word	0x0803abe9
 800b7c0:	0803abf3 	.word	0x0803abf3
 800b7c4:	08009c31 	.word	0x08009c31
 800b7c8:	0800b57b 	.word	0x0800b57b
 800b7cc:	0803abef 	.word	0x0803abef

0800b7d0 <__sflush_r>:
 800b7d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d8:	0716      	lsls	r6, r2, #28
 800b7da:	4605      	mov	r5, r0
 800b7dc:	460c      	mov	r4, r1
 800b7de:	d454      	bmi.n	800b88a <__sflush_r+0xba>
 800b7e0:	684b      	ldr	r3, [r1, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	dc02      	bgt.n	800b7ec <__sflush_r+0x1c>
 800b7e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dd48      	ble.n	800b87e <__sflush_r+0xae>
 800b7ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7ee:	2e00      	cmp	r6, #0
 800b7f0:	d045      	beq.n	800b87e <__sflush_r+0xae>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7f8:	682f      	ldr	r7, [r5, #0]
 800b7fa:	6a21      	ldr	r1, [r4, #32]
 800b7fc:	602b      	str	r3, [r5, #0]
 800b7fe:	d030      	beq.n	800b862 <__sflush_r+0x92>
 800b800:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	0759      	lsls	r1, r3, #29
 800b806:	d505      	bpl.n	800b814 <__sflush_r+0x44>
 800b808:	6863      	ldr	r3, [r4, #4]
 800b80a:	1ad2      	subs	r2, r2, r3
 800b80c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b80e:	b10b      	cbz	r3, 800b814 <__sflush_r+0x44>
 800b810:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b812:	1ad2      	subs	r2, r2, r3
 800b814:	2300      	movs	r3, #0
 800b816:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b818:	6a21      	ldr	r1, [r4, #32]
 800b81a:	4628      	mov	r0, r5
 800b81c:	47b0      	blx	r6
 800b81e:	1c43      	adds	r3, r0, #1
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	d106      	bne.n	800b832 <__sflush_r+0x62>
 800b824:	6829      	ldr	r1, [r5, #0]
 800b826:	291d      	cmp	r1, #29
 800b828:	d82b      	bhi.n	800b882 <__sflush_r+0xb2>
 800b82a:	4a2a      	ldr	r2, [pc, #168]	@ (800b8d4 <__sflush_r+0x104>)
 800b82c:	410a      	asrs	r2, r1
 800b82e:	07d6      	lsls	r6, r2, #31
 800b830:	d427      	bmi.n	800b882 <__sflush_r+0xb2>
 800b832:	2200      	movs	r2, #0
 800b834:	6062      	str	r2, [r4, #4]
 800b836:	04d9      	lsls	r1, r3, #19
 800b838:	6922      	ldr	r2, [r4, #16]
 800b83a:	6022      	str	r2, [r4, #0]
 800b83c:	d504      	bpl.n	800b848 <__sflush_r+0x78>
 800b83e:	1c42      	adds	r2, r0, #1
 800b840:	d101      	bne.n	800b846 <__sflush_r+0x76>
 800b842:	682b      	ldr	r3, [r5, #0]
 800b844:	b903      	cbnz	r3, 800b848 <__sflush_r+0x78>
 800b846:	6560      	str	r0, [r4, #84]	@ 0x54
 800b848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b84a:	602f      	str	r7, [r5, #0]
 800b84c:	b1b9      	cbz	r1, 800b87e <__sflush_r+0xae>
 800b84e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b852:	4299      	cmp	r1, r3
 800b854:	d002      	beq.n	800b85c <__sflush_r+0x8c>
 800b856:	4628      	mov	r0, r5
 800b858:	f7ff fe2e 	bl	800b4b8 <_free_r>
 800b85c:	2300      	movs	r3, #0
 800b85e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b860:	e00d      	b.n	800b87e <__sflush_r+0xae>
 800b862:	2301      	movs	r3, #1
 800b864:	4628      	mov	r0, r5
 800b866:	47b0      	blx	r6
 800b868:	4602      	mov	r2, r0
 800b86a:	1c50      	adds	r0, r2, #1
 800b86c:	d1c9      	bne.n	800b802 <__sflush_r+0x32>
 800b86e:	682b      	ldr	r3, [r5, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d0c6      	beq.n	800b802 <__sflush_r+0x32>
 800b874:	2b1d      	cmp	r3, #29
 800b876:	d001      	beq.n	800b87c <__sflush_r+0xac>
 800b878:	2b16      	cmp	r3, #22
 800b87a:	d11e      	bne.n	800b8ba <__sflush_r+0xea>
 800b87c:	602f      	str	r7, [r5, #0]
 800b87e:	2000      	movs	r0, #0
 800b880:	e022      	b.n	800b8c8 <__sflush_r+0xf8>
 800b882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b886:	b21b      	sxth	r3, r3
 800b888:	e01b      	b.n	800b8c2 <__sflush_r+0xf2>
 800b88a:	690f      	ldr	r7, [r1, #16]
 800b88c:	2f00      	cmp	r7, #0
 800b88e:	d0f6      	beq.n	800b87e <__sflush_r+0xae>
 800b890:	0793      	lsls	r3, r2, #30
 800b892:	680e      	ldr	r6, [r1, #0]
 800b894:	bf08      	it	eq
 800b896:	694b      	ldreq	r3, [r1, #20]
 800b898:	600f      	str	r7, [r1, #0]
 800b89a:	bf18      	it	ne
 800b89c:	2300      	movne	r3, #0
 800b89e:	eba6 0807 	sub.w	r8, r6, r7
 800b8a2:	608b      	str	r3, [r1, #8]
 800b8a4:	f1b8 0f00 	cmp.w	r8, #0
 800b8a8:	dde9      	ble.n	800b87e <__sflush_r+0xae>
 800b8aa:	6a21      	ldr	r1, [r4, #32]
 800b8ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8ae:	4643      	mov	r3, r8
 800b8b0:	463a      	mov	r2, r7
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	47b0      	blx	r6
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	dc08      	bgt.n	800b8cc <__sflush_r+0xfc>
 800b8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8cc:	4407      	add	r7, r0
 800b8ce:	eba8 0800 	sub.w	r8, r8, r0
 800b8d2:	e7e7      	b.n	800b8a4 <__sflush_r+0xd4>
 800b8d4:	dfbffffe 	.word	0xdfbffffe

0800b8d8 <_fflush_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	690b      	ldr	r3, [r1, #16]
 800b8dc:	4605      	mov	r5, r0
 800b8de:	460c      	mov	r4, r1
 800b8e0:	b913      	cbnz	r3, 800b8e8 <_fflush_r+0x10>
 800b8e2:	2500      	movs	r5, #0
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	b118      	cbz	r0, 800b8f2 <_fflush_r+0x1a>
 800b8ea:	6a03      	ldr	r3, [r0, #32]
 800b8ec:	b90b      	cbnz	r3, 800b8f2 <_fflush_r+0x1a>
 800b8ee:	f7fe fe99 	bl	800a624 <__sinit>
 800b8f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0f3      	beq.n	800b8e2 <_fflush_r+0xa>
 800b8fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8fc:	07d0      	lsls	r0, r2, #31
 800b8fe:	d404      	bmi.n	800b90a <_fflush_r+0x32>
 800b900:	0599      	lsls	r1, r3, #22
 800b902:	d402      	bmi.n	800b90a <_fflush_r+0x32>
 800b904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b906:	f7fe ff7a 	bl	800a7fe <__retarget_lock_acquire_recursive>
 800b90a:	4628      	mov	r0, r5
 800b90c:	4621      	mov	r1, r4
 800b90e:	f7ff ff5f 	bl	800b7d0 <__sflush_r>
 800b912:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b914:	07da      	lsls	r2, r3, #31
 800b916:	4605      	mov	r5, r0
 800b918:	d4e4      	bmi.n	800b8e4 <_fflush_r+0xc>
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	059b      	lsls	r3, r3, #22
 800b91e:	d4e1      	bmi.n	800b8e4 <_fflush_r+0xc>
 800b920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b922:	f7fe ff6d 	bl	800a800 <__retarget_lock_release_recursive>
 800b926:	e7dd      	b.n	800b8e4 <_fflush_r+0xc>

0800b928 <_Balloc>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	69c6      	ldr	r6, [r0, #28]
 800b92c:	4604      	mov	r4, r0
 800b92e:	460d      	mov	r5, r1
 800b930:	b976      	cbnz	r6, 800b950 <_Balloc+0x28>
 800b932:	2010      	movs	r0, #16
 800b934:	f7fe fba6 	bl	800a084 <malloc>
 800b938:	4602      	mov	r2, r0
 800b93a:	61e0      	str	r0, [r4, #28]
 800b93c:	b920      	cbnz	r0, 800b948 <_Balloc+0x20>
 800b93e:	4b18      	ldr	r3, [pc, #96]	@ (800b9a0 <_Balloc+0x78>)
 800b940:	4818      	ldr	r0, [pc, #96]	@ (800b9a4 <_Balloc+0x7c>)
 800b942:	216b      	movs	r1, #107	@ 0x6b
 800b944:	f000 fd14 	bl	800c370 <__assert_func>
 800b948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b94c:	6006      	str	r6, [r0, #0]
 800b94e:	60c6      	str	r6, [r0, #12]
 800b950:	69e6      	ldr	r6, [r4, #28]
 800b952:	68f3      	ldr	r3, [r6, #12]
 800b954:	b183      	cbz	r3, 800b978 <_Balloc+0x50>
 800b956:	69e3      	ldr	r3, [r4, #28]
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b95e:	b9b8      	cbnz	r0, 800b990 <_Balloc+0x68>
 800b960:	2101      	movs	r1, #1
 800b962:	fa01 f605 	lsl.w	r6, r1, r5
 800b966:	1d72      	adds	r2, r6, #5
 800b968:	0092      	lsls	r2, r2, #2
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 fd1e 	bl	800c3ac <_calloc_r>
 800b970:	b160      	cbz	r0, 800b98c <_Balloc+0x64>
 800b972:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b976:	e00e      	b.n	800b996 <_Balloc+0x6e>
 800b978:	2221      	movs	r2, #33	@ 0x21
 800b97a:	2104      	movs	r1, #4
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fd15 	bl	800c3ac <_calloc_r>
 800b982:	69e3      	ldr	r3, [r4, #28]
 800b984:	60f0      	str	r0, [r6, #12]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e4      	bne.n	800b956 <_Balloc+0x2e>
 800b98c:	2000      	movs	r0, #0
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	6802      	ldr	r2, [r0, #0]
 800b992:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b996:	2300      	movs	r3, #0
 800b998:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b99c:	e7f7      	b.n	800b98e <_Balloc+0x66>
 800b99e:	bf00      	nop
 800b9a0:	0803ab69 	.word	0x0803ab69
 800b9a4:	0803abfa 	.word	0x0803abfa

0800b9a8 <_Bfree>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	69c6      	ldr	r6, [r0, #28]
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	b976      	cbnz	r6, 800b9d0 <_Bfree+0x28>
 800b9b2:	2010      	movs	r0, #16
 800b9b4:	f7fe fb66 	bl	800a084 <malloc>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	61e8      	str	r0, [r5, #28]
 800b9bc:	b920      	cbnz	r0, 800b9c8 <_Bfree+0x20>
 800b9be:	4b09      	ldr	r3, [pc, #36]	@ (800b9e4 <_Bfree+0x3c>)
 800b9c0:	4809      	ldr	r0, [pc, #36]	@ (800b9e8 <_Bfree+0x40>)
 800b9c2:	218f      	movs	r1, #143	@ 0x8f
 800b9c4:	f000 fcd4 	bl	800c370 <__assert_func>
 800b9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9cc:	6006      	str	r6, [r0, #0]
 800b9ce:	60c6      	str	r6, [r0, #12]
 800b9d0:	b13c      	cbz	r4, 800b9e2 <_Bfree+0x3a>
 800b9d2:	69eb      	ldr	r3, [r5, #28]
 800b9d4:	6862      	ldr	r2, [r4, #4]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b9dc:	6021      	str	r1, [r4, #0]
 800b9de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b9e2:	bd70      	pop	{r4, r5, r6, pc}
 800b9e4:	0803ab69 	.word	0x0803ab69
 800b9e8:	0803abfa 	.word	0x0803abfa

0800b9ec <__multadd>:
 800b9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f0:	690d      	ldr	r5, [r1, #16]
 800b9f2:	4607      	mov	r7, r0
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	461e      	mov	r6, r3
 800b9f8:	f101 0c14 	add.w	ip, r1, #20
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	f8dc 3000 	ldr.w	r3, [ip]
 800ba02:	b299      	uxth	r1, r3
 800ba04:	fb02 6101 	mla	r1, r2, r1, r6
 800ba08:	0c1e      	lsrs	r6, r3, #16
 800ba0a:	0c0b      	lsrs	r3, r1, #16
 800ba0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ba10:	b289      	uxth	r1, r1
 800ba12:	3001      	adds	r0, #1
 800ba14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba18:	4285      	cmp	r5, r0
 800ba1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ba1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba22:	dcec      	bgt.n	800b9fe <__multadd+0x12>
 800ba24:	b30e      	cbz	r6, 800ba6a <__multadd+0x7e>
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	42ab      	cmp	r3, r5
 800ba2a:	dc19      	bgt.n	800ba60 <__multadd+0x74>
 800ba2c:	6861      	ldr	r1, [r4, #4]
 800ba2e:	4638      	mov	r0, r7
 800ba30:	3101      	adds	r1, #1
 800ba32:	f7ff ff79 	bl	800b928 <_Balloc>
 800ba36:	4680      	mov	r8, r0
 800ba38:	b928      	cbnz	r0, 800ba46 <__multadd+0x5a>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ba70 <__multadd+0x84>)
 800ba3e:	480d      	ldr	r0, [pc, #52]	@ (800ba74 <__multadd+0x88>)
 800ba40:	21ba      	movs	r1, #186	@ 0xba
 800ba42:	f000 fc95 	bl	800c370 <__assert_func>
 800ba46:	6922      	ldr	r2, [r4, #16]
 800ba48:	3202      	adds	r2, #2
 800ba4a:	f104 010c 	add.w	r1, r4, #12
 800ba4e:	0092      	lsls	r2, r2, #2
 800ba50:	300c      	adds	r0, #12
 800ba52:	f7fe fed6 	bl	800a802 <memcpy>
 800ba56:	4621      	mov	r1, r4
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f7ff ffa5 	bl	800b9a8 <_Bfree>
 800ba5e:	4644      	mov	r4, r8
 800ba60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ba64:	3501      	adds	r5, #1
 800ba66:	615e      	str	r6, [r3, #20]
 800ba68:	6125      	str	r5, [r4, #16]
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba70:	0803abd8 	.word	0x0803abd8
 800ba74:	0803abfa 	.word	0x0803abfa

0800ba78 <__hi0bits>:
 800ba78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	bf36      	itet	cc
 800ba80:	0403      	lslcc	r3, r0, #16
 800ba82:	2000      	movcs	r0, #0
 800ba84:	2010      	movcc	r0, #16
 800ba86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba8a:	bf3c      	itt	cc
 800ba8c:	021b      	lslcc	r3, r3, #8
 800ba8e:	3008      	addcc	r0, #8
 800ba90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba94:	bf3c      	itt	cc
 800ba96:	011b      	lslcc	r3, r3, #4
 800ba98:	3004      	addcc	r0, #4
 800ba9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba9e:	bf3c      	itt	cc
 800baa0:	009b      	lslcc	r3, r3, #2
 800baa2:	3002      	addcc	r0, #2
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	db05      	blt.n	800bab4 <__hi0bits+0x3c>
 800baa8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800baac:	f100 0001 	add.w	r0, r0, #1
 800bab0:	bf08      	it	eq
 800bab2:	2020      	moveq	r0, #32
 800bab4:	4770      	bx	lr

0800bab6 <__lo0bits>:
 800bab6:	6803      	ldr	r3, [r0, #0]
 800bab8:	4602      	mov	r2, r0
 800baba:	f013 0007 	ands.w	r0, r3, #7
 800babe:	d00b      	beq.n	800bad8 <__lo0bits+0x22>
 800bac0:	07d9      	lsls	r1, r3, #31
 800bac2:	d421      	bmi.n	800bb08 <__lo0bits+0x52>
 800bac4:	0798      	lsls	r0, r3, #30
 800bac6:	bf49      	itett	mi
 800bac8:	085b      	lsrmi	r3, r3, #1
 800baca:	089b      	lsrpl	r3, r3, #2
 800bacc:	2001      	movmi	r0, #1
 800bace:	6013      	strmi	r3, [r2, #0]
 800bad0:	bf5c      	itt	pl
 800bad2:	6013      	strpl	r3, [r2, #0]
 800bad4:	2002      	movpl	r0, #2
 800bad6:	4770      	bx	lr
 800bad8:	b299      	uxth	r1, r3
 800bada:	b909      	cbnz	r1, 800bae0 <__lo0bits+0x2a>
 800badc:	0c1b      	lsrs	r3, r3, #16
 800bade:	2010      	movs	r0, #16
 800bae0:	b2d9      	uxtb	r1, r3
 800bae2:	b909      	cbnz	r1, 800bae8 <__lo0bits+0x32>
 800bae4:	3008      	adds	r0, #8
 800bae6:	0a1b      	lsrs	r3, r3, #8
 800bae8:	0719      	lsls	r1, r3, #28
 800baea:	bf04      	itt	eq
 800baec:	091b      	lsreq	r3, r3, #4
 800baee:	3004      	addeq	r0, #4
 800baf0:	0799      	lsls	r1, r3, #30
 800baf2:	bf04      	itt	eq
 800baf4:	089b      	lsreq	r3, r3, #2
 800baf6:	3002      	addeq	r0, #2
 800baf8:	07d9      	lsls	r1, r3, #31
 800bafa:	d403      	bmi.n	800bb04 <__lo0bits+0x4e>
 800bafc:	085b      	lsrs	r3, r3, #1
 800bafe:	f100 0001 	add.w	r0, r0, #1
 800bb02:	d003      	beq.n	800bb0c <__lo0bits+0x56>
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	4770      	bx	lr
 800bb08:	2000      	movs	r0, #0
 800bb0a:	4770      	bx	lr
 800bb0c:	2020      	movs	r0, #32
 800bb0e:	4770      	bx	lr

0800bb10 <__i2b>:
 800bb10:	b510      	push	{r4, lr}
 800bb12:	460c      	mov	r4, r1
 800bb14:	2101      	movs	r1, #1
 800bb16:	f7ff ff07 	bl	800b928 <_Balloc>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	b928      	cbnz	r0, 800bb2a <__i2b+0x1a>
 800bb1e:	4b05      	ldr	r3, [pc, #20]	@ (800bb34 <__i2b+0x24>)
 800bb20:	4805      	ldr	r0, [pc, #20]	@ (800bb38 <__i2b+0x28>)
 800bb22:	f240 1145 	movw	r1, #325	@ 0x145
 800bb26:	f000 fc23 	bl	800c370 <__assert_func>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	6144      	str	r4, [r0, #20]
 800bb2e:	6103      	str	r3, [r0, #16]
 800bb30:	bd10      	pop	{r4, pc}
 800bb32:	bf00      	nop
 800bb34:	0803abd8 	.word	0x0803abd8
 800bb38:	0803abfa 	.word	0x0803abfa

0800bb3c <__multiply>:
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb40:	4614      	mov	r4, r2
 800bb42:	690a      	ldr	r2, [r1, #16]
 800bb44:	6923      	ldr	r3, [r4, #16]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	bfa8      	it	ge
 800bb4a:	4623      	movge	r3, r4
 800bb4c:	460f      	mov	r7, r1
 800bb4e:	bfa4      	itt	ge
 800bb50:	460c      	movge	r4, r1
 800bb52:	461f      	movge	r7, r3
 800bb54:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bb58:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bb5c:	68a3      	ldr	r3, [r4, #8]
 800bb5e:	6861      	ldr	r1, [r4, #4]
 800bb60:	eb0a 0609 	add.w	r6, sl, r9
 800bb64:	42b3      	cmp	r3, r6
 800bb66:	b085      	sub	sp, #20
 800bb68:	bfb8      	it	lt
 800bb6a:	3101      	addlt	r1, #1
 800bb6c:	f7ff fedc 	bl	800b928 <_Balloc>
 800bb70:	b930      	cbnz	r0, 800bb80 <__multiply+0x44>
 800bb72:	4602      	mov	r2, r0
 800bb74:	4b44      	ldr	r3, [pc, #272]	@ (800bc88 <__multiply+0x14c>)
 800bb76:	4845      	ldr	r0, [pc, #276]	@ (800bc8c <__multiply+0x150>)
 800bb78:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb7c:	f000 fbf8 	bl	800c370 <__assert_func>
 800bb80:	f100 0514 	add.w	r5, r0, #20
 800bb84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb88:	462b      	mov	r3, r5
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	4543      	cmp	r3, r8
 800bb8e:	d321      	bcc.n	800bbd4 <__multiply+0x98>
 800bb90:	f107 0114 	add.w	r1, r7, #20
 800bb94:	f104 0214 	add.w	r2, r4, #20
 800bb98:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bb9c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bba0:	9302      	str	r3, [sp, #8]
 800bba2:	1b13      	subs	r3, r2, r4
 800bba4:	3b15      	subs	r3, #21
 800bba6:	f023 0303 	bic.w	r3, r3, #3
 800bbaa:	3304      	adds	r3, #4
 800bbac:	f104 0715 	add.w	r7, r4, #21
 800bbb0:	42ba      	cmp	r2, r7
 800bbb2:	bf38      	it	cc
 800bbb4:	2304      	movcc	r3, #4
 800bbb6:	9301      	str	r3, [sp, #4]
 800bbb8:	9b02      	ldr	r3, [sp, #8]
 800bbba:	9103      	str	r1, [sp, #12]
 800bbbc:	428b      	cmp	r3, r1
 800bbbe:	d80c      	bhi.n	800bbda <__multiply+0x9e>
 800bbc0:	2e00      	cmp	r6, #0
 800bbc2:	dd03      	ble.n	800bbcc <__multiply+0x90>
 800bbc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d05b      	beq.n	800bc84 <__multiply+0x148>
 800bbcc:	6106      	str	r6, [r0, #16]
 800bbce:	b005      	add	sp, #20
 800bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd4:	f843 2b04 	str.w	r2, [r3], #4
 800bbd8:	e7d8      	b.n	800bb8c <__multiply+0x50>
 800bbda:	f8b1 a000 	ldrh.w	sl, [r1]
 800bbde:	f1ba 0f00 	cmp.w	sl, #0
 800bbe2:	d024      	beq.n	800bc2e <__multiply+0xf2>
 800bbe4:	f104 0e14 	add.w	lr, r4, #20
 800bbe8:	46a9      	mov	r9, r5
 800bbea:	f04f 0c00 	mov.w	ip, #0
 800bbee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbf2:	f8d9 3000 	ldr.w	r3, [r9]
 800bbf6:	fa1f fb87 	uxth.w	fp, r7
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	fb0a 330b 	mla	r3, sl, fp, r3
 800bc00:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bc04:	f8d9 7000 	ldr.w	r7, [r9]
 800bc08:	4463      	add	r3, ip
 800bc0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc0e:	fb0a c70b 	mla	r7, sl, fp, ip
 800bc12:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc1c:	4572      	cmp	r2, lr
 800bc1e:	f849 3b04 	str.w	r3, [r9], #4
 800bc22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bc26:	d8e2      	bhi.n	800bbee <__multiply+0xb2>
 800bc28:	9b01      	ldr	r3, [sp, #4]
 800bc2a:	f845 c003 	str.w	ip, [r5, r3]
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bc34:	3104      	adds	r1, #4
 800bc36:	f1b9 0f00 	cmp.w	r9, #0
 800bc3a:	d021      	beq.n	800bc80 <__multiply+0x144>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	f104 0c14 	add.w	ip, r4, #20
 800bc42:	46ae      	mov	lr, r5
 800bc44:	f04f 0a00 	mov.w	sl, #0
 800bc48:	f8bc b000 	ldrh.w	fp, [ip]
 800bc4c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bc50:	fb09 770b 	mla	r7, r9, fp, r7
 800bc54:	4457      	add	r7, sl
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bc5c:	f84e 3b04 	str.w	r3, [lr], #4
 800bc60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc68:	f8be 3000 	ldrh.w	r3, [lr]
 800bc6c:	fb09 330a 	mla	r3, r9, sl, r3
 800bc70:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bc74:	4562      	cmp	r2, ip
 800bc76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc7a:	d8e5      	bhi.n	800bc48 <__multiply+0x10c>
 800bc7c:	9f01      	ldr	r7, [sp, #4]
 800bc7e:	51eb      	str	r3, [r5, r7]
 800bc80:	3504      	adds	r5, #4
 800bc82:	e799      	b.n	800bbb8 <__multiply+0x7c>
 800bc84:	3e01      	subs	r6, #1
 800bc86:	e79b      	b.n	800bbc0 <__multiply+0x84>
 800bc88:	0803abd8 	.word	0x0803abd8
 800bc8c:	0803abfa 	.word	0x0803abfa

0800bc90 <__pow5mult>:
 800bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4615      	mov	r5, r2
 800bc96:	f012 0203 	ands.w	r2, r2, #3
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	460e      	mov	r6, r1
 800bc9e:	d007      	beq.n	800bcb0 <__pow5mult+0x20>
 800bca0:	4c25      	ldr	r4, [pc, #148]	@ (800bd38 <__pow5mult+0xa8>)
 800bca2:	3a01      	subs	r2, #1
 800bca4:	2300      	movs	r3, #0
 800bca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcaa:	f7ff fe9f 	bl	800b9ec <__multadd>
 800bcae:	4606      	mov	r6, r0
 800bcb0:	10ad      	asrs	r5, r5, #2
 800bcb2:	d03d      	beq.n	800bd30 <__pow5mult+0xa0>
 800bcb4:	69fc      	ldr	r4, [r7, #28]
 800bcb6:	b97c      	cbnz	r4, 800bcd8 <__pow5mult+0x48>
 800bcb8:	2010      	movs	r0, #16
 800bcba:	f7fe f9e3 	bl	800a084 <malloc>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	61f8      	str	r0, [r7, #28]
 800bcc2:	b928      	cbnz	r0, 800bcd0 <__pow5mult+0x40>
 800bcc4:	4b1d      	ldr	r3, [pc, #116]	@ (800bd3c <__pow5mult+0xac>)
 800bcc6:	481e      	ldr	r0, [pc, #120]	@ (800bd40 <__pow5mult+0xb0>)
 800bcc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bccc:	f000 fb50 	bl	800c370 <__assert_func>
 800bcd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bcd4:	6004      	str	r4, [r0, #0]
 800bcd6:	60c4      	str	r4, [r0, #12]
 800bcd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bcdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bce0:	b94c      	cbnz	r4, 800bcf6 <__pow5mult+0x66>
 800bce2:	f240 2171 	movw	r1, #625	@ 0x271
 800bce6:	4638      	mov	r0, r7
 800bce8:	f7ff ff12 	bl	800bb10 <__i2b>
 800bcec:	2300      	movs	r3, #0
 800bcee:	f8c8 0008 	str.w	r0, [r8, #8]
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	6003      	str	r3, [r0, #0]
 800bcf6:	f04f 0900 	mov.w	r9, #0
 800bcfa:	07eb      	lsls	r3, r5, #31
 800bcfc:	d50a      	bpl.n	800bd14 <__pow5mult+0x84>
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4622      	mov	r2, r4
 800bd02:	4638      	mov	r0, r7
 800bd04:	f7ff ff1a 	bl	800bb3c <__multiply>
 800bd08:	4631      	mov	r1, r6
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	f7ff fe4b 	bl	800b9a8 <_Bfree>
 800bd12:	4646      	mov	r6, r8
 800bd14:	106d      	asrs	r5, r5, #1
 800bd16:	d00b      	beq.n	800bd30 <__pow5mult+0xa0>
 800bd18:	6820      	ldr	r0, [r4, #0]
 800bd1a:	b938      	cbnz	r0, 800bd2c <__pow5mult+0x9c>
 800bd1c:	4622      	mov	r2, r4
 800bd1e:	4621      	mov	r1, r4
 800bd20:	4638      	mov	r0, r7
 800bd22:	f7ff ff0b 	bl	800bb3c <__multiply>
 800bd26:	6020      	str	r0, [r4, #0]
 800bd28:	f8c0 9000 	str.w	r9, [r0]
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	e7e4      	b.n	800bcfa <__pow5mult+0x6a>
 800bd30:	4630      	mov	r0, r6
 800bd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd36:	bf00      	nop
 800bd38:	0803ac54 	.word	0x0803ac54
 800bd3c:	0803ab69 	.word	0x0803ab69
 800bd40:	0803abfa 	.word	0x0803abfa

0800bd44 <__lshift>:
 800bd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	460c      	mov	r4, r1
 800bd4a:	6849      	ldr	r1, [r1, #4]
 800bd4c:	6923      	ldr	r3, [r4, #16]
 800bd4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	4607      	mov	r7, r0
 800bd56:	4691      	mov	r9, r2
 800bd58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bd5c:	f108 0601 	add.w	r6, r8, #1
 800bd60:	42b3      	cmp	r3, r6
 800bd62:	db0b      	blt.n	800bd7c <__lshift+0x38>
 800bd64:	4638      	mov	r0, r7
 800bd66:	f7ff fddf 	bl	800b928 <_Balloc>
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	b948      	cbnz	r0, 800bd82 <__lshift+0x3e>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	4b28      	ldr	r3, [pc, #160]	@ (800be14 <__lshift+0xd0>)
 800bd72:	4829      	ldr	r0, [pc, #164]	@ (800be18 <__lshift+0xd4>)
 800bd74:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bd78:	f000 fafa 	bl	800c370 <__assert_func>
 800bd7c:	3101      	adds	r1, #1
 800bd7e:	005b      	lsls	r3, r3, #1
 800bd80:	e7ee      	b.n	800bd60 <__lshift+0x1c>
 800bd82:	2300      	movs	r3, #0
 800bd84:	f100 0114 	add.w	r1, r0, #20
 800bd88:	f100 0210 	add.w	r2, r0, #16
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	4553      	cmp	r3, sl
 800bd90:	db33      	blt.n	800bdfa <__lshift+0xb6>
 800bd92:	6920      	ldr	r0, [r4, #16]
 800bd94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd98:	f104 0314 	add.w	r3, r4, #20
 800bd9c:	f019 091f 	ands.w	r9, r9, #31
 800bda0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bda4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bda8:	d02b      	beq.n	800be02 <__lshift+0xbe>
 800bdaa:	f1c9 0e20 	rsb	lr, r9, #32
 800bdae:	468a      	mov	sl, r1
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	6818      	ldr	r0, [r3, #0]
 800bdb4:	fa00 f009 	lsl.w	r0, r0, r9
 800bdb8:	4310      	orrs	r0, r2
 800bdba:	f84a 0b04 	str.w	r0, [sl], #4
 800bdbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc2:	459c      	cmp	ip, r3
 800bdc4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bdc8:	d8f3      	bhi.n	800bdb2 <__lshift+0x6e>
 800bdca:	ebac 0304 	sub.w	r3, ip, r4
 800bdce:	3b15      	subs	r3, #21
 800bdd0:	f023 0303 	bic.w	r3, r3, #3
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	f104 0015 	add.w	r0, r4, #21
 800bdda:	4584      	cmp	ip, r0
 800bddc:	bf38      	it	cc
 800bdde:	2304      	movcc	r3, #4
 800bde0:	50ca      	str	r2, [r1, r3]
 800bde2:	b10a      	cbz	r2, 800bde8 <__lshift+0xa4>
 800bde4:	f108 0602 	add.w	r6, r8, #2
 800bde8:	3e01      	subs	r6, #1
 800bdea:	4638      	mov	r0, r7
 800bdec:	612e      	str	r6, [r5, #16]
 800bdee:	4621      	mov	r1, r4
 800bdf0:	f7ff fdda 	bl	800b9a8 <_Bfree>
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdfa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bdfe:	3301      	adds	r3, #1
 800be00:	e7c5      	b.n	800bd8e <__lshift+0x4a>
 800be02:	3904      	subs	r1, #4
 800be04:	f853 2b04 	ldr.w	r2, [r3], #4
 800be08:	f841 2f04 	str.w	r2, [r1, #4]!
 800be0c:	459c      	cmp	ip, r3
 800be0e:	d8f9      	bhi.n	800be04 <__lshift+0xc0>
 800be10:	e7ea      	b.n	800bde8 <__lshift+0xa4>
 800be12:	bf00      	nop
 800be14:	0803abd8 	.word	0x0803abd8
 800be18:	0803abfa 	.word	0x0803abfa

0800be1c <__mcmp>:
 800be1c:	690a      	ldr	r2, [r1, #16]
 800be1e:	4603      	mov	r3, r0
 800be20:	6900      	ldr	r0, [r0, #16]
 800be22:	1a80      	subs	r0, r0, r2
 800be24:	b530      	push	{r4, r5, lr}
 800be26:	d10e      	bne.n	800be46 <__mcmp+0x2a>
 800be28:	3314      	adds	r3, #20
 800be2a:	3114      	adds	r1, #20
 800be2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800be30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800be34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800be38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800be3c:	4295      	cmp	r5, r2
 800be3e:	d003      	beq.n	800be48 <__mcmp+0x2c>
 800be40:	d205      	bcs.n	800be4e <__mcmp+0x32>
 800be42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be46:	bd30      	pop	{r4, r5, pc}
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d3f3      	bcc.n	800be34 <__mcmp+0x18>
 800be4c:	e7fb      	b.n	800be46 <__mcmp+0x2a>
 800be4e:	2001      	movs	r0, #1
 800be50:	e7f9      	b.n	800be46 <__mcmp+0x2a>
	...

0800be54 <__mdiff>:
 800be54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be58:	4689      	mov	r9, r1
 800be5a:	4606      	mov	r6, r0
 800be5c:	4611      	mov	r1, r2
 800be5e:	4648      	mov	r0, r9
 800be60:	4614      	mov	r4, r2
 800be62:	f7ff ffdb 	bl	800be1c <__mcmp>
 800be66:	1e05      	subs	r5, r0, #0
 800be68:	d112      	bne.n	800be90 <__mdiff+0x3c>
 800be6a:	4629      	mov	r1, r5
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff fd5b 	bl	800b928 <_Balloc>
 800be72:	4602      	mov	r2, r0
 800be74:	b928      	cbnz	r0, 800be82 <__mdiff+0x2e>
 800be76:	4b3f      	ldr	r3, [pc, #252]	@ (800bf74 <__mdiff+0x120>)
 800be78:	f240 2137 	movw	r1, #567	@ 0x237
 800be7c:	483e      	ldr	r0, [pc, #248]	@ (800bf78 <__mdiff+0x124>)
 800be7e:	f000 fa77 	bl	800c370 <__assert_func>
 800be82:	2301      	movs	r3, #1
 800be84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be88:	4610      	mov	r0, r2
 800be8a:	b003      	add	sp, #12
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	bfbc      	itt	lt
 800be92:	464b      	movlt	r3, r9
 800be94:	46a1      	movlt	r9, r4
 800be96:	4630      	mov	r0, r6
 800be98:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be9c:	bfba      	itte	lt
 800be9e:	461c      	movlt	r4, r3
 800bea0:	2501      	movlt	r5, #1
 800bea2:	2500      	movge	r5, #0
 800bea4:	f7ff fd40 	bl	800b928 <_Balloc>
 800bea8:	4602      	mov	r2, r0
 800beaa:	b918      	cbnz	r0, 800beb4 <__mdiff+0x60>
 800beac:	4b31      	ldr	r3, [pc, #196]	@ (800bf74 <__mdiff+0x120>)
 800beae:	f240 2145 	movw	r1, #581	@ 0x245
 800beb2:	e7e3      	b.n	800be7c <__mdiff+0x28>
 800beb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800beb8:	6926      	ldr	r6, [r4, #16]
 800beba:	60c5      	str	r5, [r0, #12]
 800bebc:	f109 0310 	add.w	r3, r9, #16
 800bec0:	f109 0514 	add.w	r5, r9, #20
 800bec4:	f104 0e14 	add.w	lr, r4, #20
 800bec8:	f100 0b14 	add.w	fp, r0, #20
 800becc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bed0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bed4:	9301      	str	r3, [sp, #4]
 800bed6:	46d9      	mov	r9, fp
 800bed8:	f04f 0c00 	mov.w	ip, #0
 800bedc:	9b01      	ldr	r3, [sp, #4]
 800bede:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bee2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	fa1f f38a 	uxth.w	r3, sl
 800beec:	4619      	mov	r1, r3
 800beee:	b283      	uxth	r3, r0
 800bef0:	1acb      	subs	r3, r1, r3
 800bef2:	0c00      	lsrs	r0, r0, #16
 800bef4:	4463      	add	r3, ip
 800bef6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800befa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800befe:	b29b      	uxth	r3, r3
 800bf00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bf04:	4576      	cmp	r6, lr
 800bf06:	f849 3b04 	str.w	r3, [r9], #4
 800bf0a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf0e:	d8e5      	bhi.n	800bedc <__mdiff+0x88>
 800bf10:	1b33      	subs	r3, r6, r4
 800bf12:	3b15      	subs	r3, #21
 800bf14:	f023 0303 	bic.w	r3, r3, #3
 800bf18:	3415      	adds	r4, #21
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	42a6      	cmp	r6, r4
 800bf1e:	bf38      	it	cc
 800bf20:	2304      	movcc	r3, #4
 800bf22:	441d      	add	r5, r3
 800bf24:	445b      	add	r3, fp
 800bf26:	461e      	mov	r6, r3
 800bf28:	462c      	mov	r4, r5
 800bf2a:	4544      	cmp	r4, r8
 800bf2c:	d30e      	bcc.n	800bf4c <__mdiff+0xf8>
 800bf2e:	f108 0103 	add.w	r1, r8, #3
 800bf32:	1b49      	subs	r1, r1, r5
 800bf34:	f021 0103 	bic.w	r1, r1, #3
 800bf38:	3d03      	subs	r5, #3
 800bf3a:	45a8      	cmp	r8, r5
 800bf3c:	bf38      	it	cc
 800bf3e:	2100      	movcc	r1, #0
 800bf40:	440b      	add	r3, r1
 800bf42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf46:	b191      	cbz	r1, 800bf6e <__mdiff+0x11a>
 800bf48:	6117      	str	r7, [r2, #16]
 800bf4a:	e79d      	b.n	800be88 <__mdiff+0x34>
 800bf4c:	f854 1b04 	ldr.w	r1, [r4], #4
 800bf50:	46e6      	mov	lr, ip
 800bf52:	0c08      	lsrs	r0, r1, #16
 800bf54:	fa1c fc81 	uxtah	ip, ip, r1
 800bf58:	4471      	add	r1, lr
 800bf5a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bf5e:	b289      	uxth	r1, r1
 800bf60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bf64:	f846 1b04 	str.w	r1, [r6], #4
 800bf68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bf6c:	e7dd      	b.n	800bf2a <__mdiff+0xd6>
 800bf6e:	3f01      	subs	r7, #1
 800bf70:	e7e7      	b.n	800bf42 <__mdiff+0xee>
 800bf72:	bf00      	nop
 800bf74:	0803abd8 	.word	0x0803abd8
 800bf78:	0803abfa 	.word	0x0803abfa

0800bf7c <__d2b>:
 800bf7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf80:	460f      	mov	r7, r1
 800bf82:	2101      	movs	r1, #1
 800bf84:	ec59 8b10 	vmov	r8, r9, d0
 800bf88:	4616      	mov	r6, r2
 800bf8a:	f7ff fccd 	bl	800b928 <_Balloc>
 800bf8e:	4604      	mov	r4, r0
 800bf90:	b930      	cbnz	r0, 800bfa0 <__d2b+0x24>
 800bf92:	4602      	mov	r2, r0
 800bf94:	4b23      	ldr	r3, [pc, #140]	@ (800c024 <__d2b+0xa8>)
 800bf96:	4824      	ldr	r0, [pc, #144]	@ (800c028 <__d2b+0xac>)
 800bf98:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf9c:	f000 f9e8 	bl	800c370 <__assert_func>
 800bfa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bfa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfa8:	b10d      	cbz	r5, 800bfae <__d2b+0x32>
 800bfaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	f1b8 0300 	subs.w	r3, r8, #0
 800bfb4:	d023      	beq.n	800bffe <__d2b+0x82>
 800bfb6:	4668      	mov	r0, sp
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	f7ff fd7c 	bl	800bab6 <__lo0bits>
 800bfbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bfc2:	b1d0      	cbz	r0, 800bffa <__d2b+0x7e>
 800bfc4:	f1c0 0320 	rsb	r3, r0, #32
 800bfc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfcc:	430b      	orrs	r3, r1
 800bfce:	40c2      	lsrs	r2, r0
 800bfd0:	6163      	str	r3, [r4, #20]
 800bfd2:	9201      	str	r2, [sp, #4]
 800bfd4:	9b01      	ldr	r3, [sp, #4]
 800bfd6:	61a3      	str	r3, [r4, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	bf0c      	ite	eq
 800bfdc:	2201      	moveq	r2, #1
 800bfde:	2202      	movne	r2, #2
 800bfe0:	6122      	str	r2, [r4, #16]
 800bfe2:	b1a5      	cbz	r5, 800c00e <__d2b+0x92>
 800bfe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bfe8:	4405      	add	r5, r0
 800bfea:	603d      	str	r5, [r7, #0]
 800bfec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bff0:	6030      	str	r0, [r6, #0]
 800bff2:	4620      	mov	r0, r4
 800bff4:	b003      	add	sp, #12
 800bff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bffa:	6161      	str	r1, [r4, #20]
 800bffc:	e7ea      	b.n	800bfd4 <__d2b+0x58>
 800bffe:	a801      	add	r0, sp, #4
 800c000:	f7ff fd59 	bl	800bab6 <__lo0bits>
 800c004:	9b01      	ldr	r3, [sp, #4]
 800c006:	6163      	str	r3, [r4, #20]
 800c008:	3020      	adds	r0, #32
 800c00a:	2201      	movs	r2, #1
 800c00c:	e7e8      	b.n	800bfe0 <__d2b+0x64>
 800c00e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c012:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c016:	6038      	str	r0, [r7, #0]
 800c018:	6918      	ldr	r0, [r3, #16]
 800c01a:	f7ff fd2d 	bl	800ba78 <__hi0bits>
 800c01e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c022:	e7e5      	b.n	800bff0 <__d2b+0x74>
 800c024:	0803abd8 	.word	0x0803abd8
 800c028:	0803abfa 	.word	0x0803abfa

0800c02c <__sread>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	460c      	mov	r4, r1
 800c030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c034:	f000 f978 	bl	800c328 <_read_r>
 800c038:	2800      	cmp	r0, #0
 800c03a:	bfab      	itete	ge
 800c03c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c03e:	89a3      	ldrhlt	r3, [r4, #12]
 800c040:	181b      	addge	r3, r3, r0
 800c042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c046:	bfac      	ite	ge
 800c048:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c04a:	81a3      	strhlt	r3, [r4, #12]
 800c04c:	bd10      	pop	{r4, pc}

0800c04e <__swrite>:
 800c04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c052:	461f      	mov	r7, r3
 800c054:	898b      	ldrh	r3, [r1, #12]
 800c056:	05db      	lsls	r3, r3, #23
 800c058:	4605      	mov	r5, r0
 800c05a:	460c      	mov	r4, r1
 800c05c:	4616      	mov	r6, r2
 800c05e:	d505      	bpl.n	800c06c <__swrite+0x1e>
 800c060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c064:	2302      	movs	r3, #2
 800c066:	2200      	movs	r2, #0
 800c068:	f000 f94c 	bl	800c304 <_lseek_r>
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c076:	81a3      	strh	r3, [r4, #12]
 800c078:	4632      	mov	r2, r6
 800c07a:	463b      	mov	r3, r7
 800c07c:	4628      	mov	r0, r5
 800c07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	f000 b963 	b.w	800c34c <_write_r>

0800c086 <__sseek>:
 800c086:	b510      	push	{r4, lr}
 800c088:	460c      	mov	r4, r1
 800c08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08e:	f000 f939 	bl	800c304 <_lseek_r>
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	bf15      	itete	ne
 800c098:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c09a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c09e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0a2:	81a3      	strheq	r3, [r4, #12]
 800c0a4:	bf18      	it	ne
 800c0a6:	81a3      	strhne	r3, [r4, #12]
 800c0a8:	bd10      	pop	{r4, pc}

0800c0aa <__sclose>:
 800c0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ae:	f000 b8f7 	b.w	800c2a0 <_close_r>

0800c0b2 <__swbuf_r>:
 800c0b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b4:	460e      	mov	r6, r1
 800c0b6:	4614      	mov	r4, r2
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	b118      	cbz	r0, 800c0c4 <__swbuf_r+0x12>
 800c0bc:	6a03      	ldr	r3, [r0, #32]
 800c0be:	b90b      	cbnz	r3, 800c0c4 <__swbuf_r+0x12>
 800c0c0:	f7fe fab0 	bl	800a624 <__sinit>
 800c0c4:	69a3      	ldr	r3, [r4, #24]
 800c0c6:	60a3      	str	r3, [r4, #8]
 800c0c8:	89a3      	ldrh	r3, [r4, #12]
 800c0ca:	071a      	lsls	r2, r3, #28
 800c0cc:	d501      	bpl.n	800c0d2 <__swbuf_r+0x20>
 800c0ce:	6923      	ldr	r3, [r4, #16]
 800c0d0:	b943      	cbnz	r3, 800c0e4 <__swbuf_r+0x32>
 800c0d2:	4621      	mov	r1, r4
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f000 f82b 	bl	800c130 <__swsetup_r>
 800c0da:	b118      	cbz	r0, 800c0e4 <__swbuf_r+0x32>
 800c0dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0e4:	6823      	ldr	r3, [r4, #0]
 800c0e6:	6922      	ldr	r2, [r4, #16]
 800c0e8:	1a98      	subs	r0, r3, r2
 800c0ea:	6963      	ldr	r3, [r4, #20]
 800c0ec:	b2f6      	uxtb	r6, r6
 800c0ee:	4283      	cmp	r3, r0
 800c0f0:	4637      	mov	r7, r6
 800c0f2:	dc05      	bgt.n	800c100 <__swbuf_r+0x4e>
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	4628      	mov	r0, r5
 800c0f8:	f7ff fbee 	bl	800b8d8 <_fflush_r>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d1ed      	bne.n	800c0dc <__swbuf_r+0x2a>
 800c100:	68a3      	ldr	r3, [r4, #8]
 800c102:	3b01      	subs	r3, #1
 800c104:	60a3      	str	r3, [r4, #8]
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	6022      	str	r2, [r4, #0]
 800c10c:	701e      	strb	r6, [r3, #0]
 800c10e:	6962      	ldr	r2, [r4, #20]
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	429a      	cmp	r2, r3
 800c114:	d004      	beq.n	800c120 <__swbuf_r+0x6e>
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	07db      	lsls	r3, r3, #31
 800c11a:	d5e1      	bpl.n	800c0e0 <__swbuf_r+0x2e>
 800c11c:	2e0a      	cmp	r6, #10
 800c11e:	d1df      	bne.n	800c0e0 <__swbuf_r+0x2e>
 800c120:	4621      	mov	r1, r4
 800c122:	4628      	mov	r0, r5
 800c124:	f7ff fbd8 	bl	800b8d8 <_fflush_r>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d0d9      	beq.n	800c0e0 <__swbuf_r+0x2e>
 800c12c:	e7d6      	b.n	800c0dc <__swbuf_r+0x2a>
	...

0800c130 <__swsetup_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4b29      	ldr	r3, [pc, #164]	@ (800c1d8 <__swsetup_r+0xa8>)
 800c134:	4605      	mov	r5, r0
 800c136:	6818      	ldr	r0, [r3, #0]
 800c138:	460c      	mov	r4, r1
 800c13a:	b118      	cbz	r0, 800c144 <__swsetup_r+0x14>
 800c13c:	6a03      	ldr	r3, [r0, #32]
 800c13e:	b90b      	cbnz	r3, 800c144 <__swsetup_r+0x14>
 800c140:	f7fe fa70 	bl	800a624 <__sinit>
 800c144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c148:	0719      	lsls	r1, r3, #28
 800c14a:	d422      	bmi.n	800c192 <__swsetup_r+0x62>
 800c14c:	06da      	lsls	r2, r3, #27
 800c14e:	d407      	bmi.n	800c160 <__swsetup_r+0x30>
 800c150:	2209      	movs	r2, #9
 800c152:	602a      	str	r2, [r5, #0]
 800c154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c15e:	e033      	b.n	800c1c8 <__swsetup_r+0x98>
 800c160:	0758      	lsls	r0, r3, #29
 800c162:	d512      	bpl.n	800c18a <__swsetup_r+0x5a>
 800c164:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c166:	b141      	cbz	r1, 800c17a <__swsetup_r+0x4a>
 800c168:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c16c:	4299      	cmp	r1, r3
 800c16e:	d002      	beq.n	800c176 <__swsetup_r+0x46>
 800c170:	4628      	mov	r0, r5
 800c172:	f7ff f9a1 	bl	800b4b8 <_free_r>
 800c176:	2300      	movs	r3, #0
 800c178:	6363      	str	r3, [r4, #52]	@ 0x34
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	2300      	movs	r3, #0
 800c184:	6063      	str	r3, [r4, #4]
 800c186:	6923      	ldr	r3, [r4, #16]
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	f043 0308 	orr.w	r3, r3, #8
 800c190:	81a3      	strh	r3, [r4, #12]
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	b94b      	cbnz	r3, 800c1aa <__swsetup_r+0x7a>
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c19c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1a0:	d003      	beq.n	800c1aa <__swsetup_r+0x7a>
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	f000 f83f 	bl	800c228 <__smakebuf_r>
 800c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ae:	f013 0201 	ands.w	r2, r3, #1
 800c1b2:	d00a      	beq.n	800c1ca <__swsetup_r+0x9a>
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	60a2      	str	r2, [r4, #8]
 800c1b8:	6962      	ldr	r2, [r4, #20]
 800c1ba:	4252      	negs	r2, r2
 800c1bc:	61a2      	str	r2, [r4, #24]
 800c1be:	6922      	ldr	r2, [r4, #16]
 800c1c0:	b942      	cbnz	r2, 800c1d4 <__swsetup_r+0xa4>
 800c1c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1c6:	d1c5      	bne.n	800c154 <__swsetup_r+0x24>
 800c1c8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ca:	0799      	lsls	r1, r3, #30
 800c1cc:	bf58      	it	pl
 800c1ce:	6962      	ldrpl	r2, [r4, #20]
 800c1d0:	60a2      	str	r2, [r4, #8]
 800c1d2:	e7f4      	b.n	800c1be <__swsetup_r+0x8e>
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	e7f7      	b.n	800c1c8 <__swsetup_r+0x98>
 800c1d8:	20000b34 	.word	0x20000b34

0800c1dc <__swhatbuf_r>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	460c      	mov	r4, r1
 800c1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	b096      	sub	sp, #88	@ 0x58
 800c1e8:	4615      	mov	r5, r2
 800c1ea:	461e      	mov	r6, r3
 800c1ec:	da0d      	bge.n	800c20a <__swhatbuf_r+0x2e>
 800c1ee:	89a3      	ldrh	r3, [r4, #12]
 800c1f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1f4:	f04f 0100 	mov.w	r1, #0
 800c1f8:	bf14      	ite	ne
 800c1fa:	2340      	movne	r3, #64	@ 0x40
 800c1fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c200:	2000      	movs	r0, #0
 800c202:	6031      	str	r1, [r6, #0]
 800c204:	602b      	str	r3, [r5, #0]
 800c206:	b016      	add	sp, #88	@ 0x58
 800c208:	bd70      	pop	{r4, r5, r6, pc}
 800c20a:	466a      	mov	r2, sp
 800c20c:	f000 f858 	bl	800c2c0 <_fstat_r>
 800c210:	2800      	cmp	r0, #0
 800c212:	dbec      	blt.n	800c1ee <__swhatbuf_r+0x12>
 800c214:	9901      	ldr	r1, [sp, #4]
 800c216:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c21a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c21e:	4259      	negs	r1, r3
 800c220:	4159      	adcs	r1, r3
 800c222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c226:	e7eb      	b.n	800c200 <__swhatbuf_r+0x24>

0800c228 <__smakebuf_r>:
 800c228:	898b      	ldrh	r3, [r1, #12]
 800c22a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c22c:	079d      	lsls	r5, r3, #30
 800c22e:	4606      	mov	r6, r0
 800c230:	460c      	mov	r4, r1
 800c232:	d507      	bpl.n	800c244 <__smakebuf_r+0x1c>
 800c234:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	6123      	str	r3, [r4, #16]
 800c23c:	2301      	movs	r3, #1
 800c23e:	6163      	str	r3, [r4, #20]
 800c240:	b003      	add	sp, #12
 800c242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c244:	ab01      	add	r3, sp, #4
 800c246:	466a      	mov	r2, sp
 800c248:	f7ff ffc8 	bl	800c1dc <__swhatbuf_r>
 800c24c:	9f00      	ldr	r7, [sp, #0]
 800c24e:	4605      	mov	r5, r0
 800c250:	4639      	mov	r1, r7
 800c252:	4630      	mov	r0, r6
 800c254:	f7fd ff40 	bl	800a0d8 <_malloc_r>
 800c258:	b948      	cbnz	r0, 800c26e <__smakebuf_r+0x46>
 800c25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c25e:	059a      	lsls	r2, r3, #22
 800c260:	d4ee      	bmi.n	800c240 <__smakebuf_r+0x18>
 800c262:	f023 0303 	bic.w	r3, r3, #3
 800c266:	f043 0302 	orr.w	r3, r3, #2
 800c26a:	81a3      	strh	r3, [r4, #12]
 800c26c:	e7e2      	b.n	800c234 <__smakebuf_r+0xc>
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	6020      	str	r0, [r4, #0]
 800c272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c276:	81a3      	strh	r3, [r4, #12]
 800c278:	9b01      	ldr	r3, [sp, #4]
 800c27a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c27e:	b15b      	cbz	r3, 800c298 <__smakebuf_r+0x70>
 800c280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c284:	4630      	mov	r0, r6
 800c286:	f000 f82d 	bl	800c2e4 <_isatty_r>
 800c28a:	b128      	cbz	r0, 800c298 <__smakebuf_r+0x70>
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	f023 0303 	bic.w	r3, r3, #3
 800c292:	f043 0301 	orr.w	r3, r3, #1
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	89a3      	ldrh	r3, [r4, #12]
 800c29a:	431d      	orrs	r5, r3
 800c29c:	81a5      	strh	r5, [r4, #12]
 800c29e:	e7cf      	b.n	800c240 <__smakebuf_r+0x18>

0800c2a0 <_close_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4d06      	ldr	r5, [pc, #24]	@ (800c2bc <_close_r+0x1c>)
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	4608      	mov	r0, r1
 800c2aa:	602b      	str	r3, [r5, #0]
 800c2ac:	f000 fbe2 	bl	800ca74 <_close>
 800c2b0:	1c43      	adds	r3, r0, #1
 800c2b2:	d102      	bne.n	800c2ba <_close_r+0x1a>
 800c2b4:	682b      	ldr	r3, [r5, #0]
 800c2b6:	b103      	cbz	r3, 800c2ba <_close_r+0x1a>
 800c2b8:	6023      	str	r3, [r4, #0]
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	200106a0 	.word	0x200106a0

0800c2c0 <_fstat_r>:
 800c2c0:	b538      	push	{r3, r4, r5, lr}
 800c2c2:	4d07      	ldr	r5, [pc, #28]	@ (800c2e0 <_fstat_r+0x20>)
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	602b      	str	r3, [r5, #0]
 800c2ce:	f000 fbd9 	bl	800ca84 <_fstat>
 800c2d2:	1c43      	adds	r3, r0, #1
 800c2d4:	d102      	bne.n	800c2dc <_fstat_r+0x1c>
 800c2d6:	682b      	ldr	r3, [r5, #0]
 800c2d8:	b103      	cbz	r3, 800c2dc <_fstat_r+0x1c>
 800c2da:	6023      	str	r3, [r4, #0]
 800c2dc:	bd38      	pop	{r3, r4, r5, pc}
 800c2de:	bf00      	nop
 800c2e0:	200106a0 	.word	0x200106a0

0800c2e4 <_isatty_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4d06      	ldr	r5, [pc, #24]	@ (800c300 <_isatty_r+0x1c>)
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	4608      	mov	r0, r1
 800c2ee:	602b      	str	r3, [r5, #0]
 800c2f0:	f000 fbd8 	bl	800caa4 <_isatty>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_isatty_r+0x1a>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_isatty_r+0x1a>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	200106a0 	.word	0x200106a0

0800c304 <_lseek_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	4d07      	ldr	r5, [pc, #28]	@ (800c324 <_lseek_r+0x20>)
 800c308:	4604      	mov	r4, r0
 800c30a:	4608      	mov	r0, r1
 800c30c:	4611      	mov	r1, r2
 800c30e:	2200      	movs	r2, #0
 800c310:	602a      	str	r2, [r5, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	f000 fbd6 	bl	800cac4 <_lseek>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_lseek_r+0x1e>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_lseek_r+0x1e>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	200106a0 	.word	0x200106a0

0800c328 <_read_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4d07      	ldr	r5, [pc, #28]	@ (800c348 <_read_r+0x20>)
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	2200      	movs	r2, #0
 800c334:	602a      	str	r2, [r5, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	f000 fbcc 	bl	800cad4 <_read>
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	d102      	bne.n	800c346 <_read_r+0x1e>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	b103      	cbz	r3, 800c346 <_read_r+0x1e>
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	bd38      	pop	{r3, r4, r5, pc}
 800c348:	200106a0 	.word	0x200106a0

0800c34c <_write_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4d07      	ldr	r5, [pc, #28]	@ (800c36c <_write_r+0x20>)
 800c350:	4604      	mov	r4, r0
 800c352:	4608      	mov	r0, r1
 800c354:	4611      	mov	r1, r2
 800c356:	2200      	movs	r2, #0
 800c358:	602a      	str	r2, [r5, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	f000 fbc2 	bl	800cae4 <_write>
 800c360:	1c43      	adds	r3, r0, #1
 800c362:	d102      	bne.n	800c36a <_write_r+0x1e>
 800c364:	682b      	ldr	r3, [r5, #0]
 800c366:	b103      	cbz	r3, 800c36a <_write_r+0x1e>
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	200106a0 	.word	0x200106a0

0800c370 <__assert_func>:
 800c370:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c372:	4614      	mov	r4, r2
 800c374:	461a      	mov	r2, r3
 800c376:	4b09      	ldr	r3, [pc, #36]	@ (800c39c <__assert_func+0x2c>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4605      	mov	r5, r0
 800c37c:	68d8      	ldr	r0, [r3, #12]
 800c37e:	b954      	cbnz	r4, 800c396 <__assert_func+0x26>
 800c380:	4b07      	ldr	r3, [pc, #28]	@ (800c3a0 <__assert_func+0x30>)
 800c382:	461c      	mov	r4, r3
 800c384:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c388:	9100      	str	r1, [sp, #0]
 800c38a:	462b      	mov	r3, r5
 800c38c:	4905      	ldr	r1, [pc, #20]	@ (800c3a4 <__assert_func+0x34>)
 800c38e:	f000 f833 	bl	800c3f8 <fiprintf>
 800c392:	f000 f850 	bl	800c436 <abort>
 800c396:	4b04      	ldr	r3, [pc, #16]	@ (800c3a8 <__assert_func+0x38>)
 800c398:	e7f4      	b.n	800c384 <__assert_func+0x14>
 800c39a:	bf00      	nop
 800c39c:	20000b34 	.word	0x20000b34
 800c3a0:	0803ae96 	.word	0x0803ae96
 800c3a4:	0803ae68 	.word	0x0803ae68
 800c3a8:	0803ae5b 	.word	0x0803ae5b

0800c3ac <_calloc_r>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	fba1 5402 	umull	r5, r4, r1, r2
 800c3b2:	b93c      	cbnz	r4, 800c3c4 <_calloc_r+0x18>
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	f7fd fe8f 	bl	800a0d8 <_malloc_r>
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	b928      	cbnz	r0, 800c3ca <_calloc_r+0x1e>
 800c3be:	2600      	movs	r6, #0
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	220c      	movs	r2, #12
 800c3c6:	6002      	str	r2, [r0, #0]
 800c3c8:	e7f9      	b.n	800c3be <_calloc_r+0x12>
 800c3ca:	462a      	mov	r2, r5
 800c3cc:	4621      	mov	r1, r4
 800c3ce:	f7fe f9cf 	bl	800a770 <memset>
 800c3d2:	e7f5      	b.n	800c3c0 <_calloc_r+0x14>

0800c3d4 <__ascii_mbtowc>:
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	b901      	cbnz	r1, 800c3da <__ascii_mbtowc+0x6>
 800c3d8:	a901      	add	r1, sp, #4
 800c3da:	b142      	cbz	r2, 800c3ee <__ascii_mbtowc+0x1a>
 800c3dc:	b14b      	cbz	r3, 800c3f2 <__ascii_mbtowc+0x1e>
 800c3de:	7813      	ldrb	r3, [r2, #0]
 800c3e0:	600b      	str	r3, [r1, #0]
 800c3e2:	7812      	ldrb	r2, [r2, #0]
 800c3e4:	1e10      	subs	r0, r2, #0
 800c3e6:	bf18      	it	ne
 800c3e8:	2001      	movne	r0, #1
 800c3ea:	b002      	add	sp, #8
 800c3ec:	4770      	bx	lr
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	e7fb      	b.n	800c3ea <__ascii_mbtowc+0x16>
 800c3f2:	f06f 0001 	mvn.w	r0, #1
 800c3f6:	e7f8      	b.n	800c3ea <__ascii_mbtowc+0x16>

0800c3f8 <fiprintf>:
 800c3f8:	b40e      	push	{r1, r2, r3}
 800c3fa:	b503      	push	{r0, r1, lr}
 800c3fc:	4601      	mov	r1, r0
 800c3fe:	ab03      	add	r3, sp, #12
 800c400:	4805      	ldr	r0, [pc, #20]	@ (800c418 <fiprintf+0x20>)
 800c402:	f853 2b04 	ldr.w	r2, [r3], #4
 800c406:	6800      	ldr	r0, [r0, #0]
 800c408:	9301      	str	r3, [sp, #4]
 800c40a:	f7ff f8c9 	bl	800b5a0 <_vfiprintf_r>
 800c40e:	b002      	add	sp, #8
 800c410:	f85d eb04 	ldr.w	lr, [sp], #4
 800c414:	b003      	add	sp, #12
 800c416:	4770      	bx	lr
 800c418:	20000b34 	.word	0x20000b34

0800c41c <__ascii_wctomb>:
 800c41c:	4603      	mov	r3, r0
 800c41e:	4608      	mov	r0, r1
 800c420:	b141      	cbz	r1, 800c434 <__ascii_wctomb+0x18>
 800c422:	2aff      	cmp	r2, #255	@ 0xff
 800c424:	d904      	bls.n	800c430 <__ascii_wctomb+0x14>
 800c426:	228a      	movs	r2, #138	@ 0x8a
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c42e:	4770      	bx	lr
 800c430:	700a      	strb	r2, [r1, #0]
 800c432:	2001      	movs	r0, #1
 800c434:	4770      	bx	lr

0800c436 <abort>:
 800c436:	b508      	push	{r3, lr}
 800c438:	2006      	movs	r0, #6
 800c43a:	f000 f82b 	bl	800c494 <raise>
 800c43e:	2001      	movs	r0, #1
 800c440:	f000 fb58 	bl	800caf4 <_exit>

0800c444 <_raise_r>:
 800c444:	291f      	cmp	r1, #31
 800c446:	b538      	push	{r3, r4, r5, lr}
 800c448:	4605      	mov	r5, r0
 800c44a:	460c      	mov	r4, r1
 800c44c:	d904      	bls.n	800c458 <_raise_r+0x14>
 800c44e:	2316      	movs	r3, #22
 800c450:	6003      	str	r3, [r0, #0]
 800c452:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c456:	bd38      	pop	{r3, r4, r5, pc}
 800c458:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c45a:	b112      	cbz	r2, 800c462 <_raise_r+0x1e>
 800c45c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c460:	b94b      	cbnz	r3, 800c476 <_raise_r+0x32>
 800c462:	4628      	mov	r0, r5
 800c464:	f000 f830 	bl	800c4c8 <_getpid_r>
 800c468:	4622      	mov	r2, r4
 800c46a:	4601      	mov	r1, r0
 800c46c:	4628      	mov	r0, r5
 800c46e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c472:	f000 b817 	b.w	800c4a4 <_kill_r>
 800c476:	2b01      	cmp	r3, #1
 800c478:	d00a      	beq.n	800c490 <_raise_r+0x4c>
 800c47a:	1c59      	adds	r1, r3, #1
 800c47c:	d103      	bne.n	800c486 <_raise_r+0x42>
 800c47e:	2316      	movs	r3, #22
 800c480:	6003      	str	r3, [r0, #0]
 800c482:	2001      	movs	r0, #1
 800c484:	e7e7      	b.n	800c456 <_raise_r+0x12>
 800c486:	2100      	movs	r1, #0
 800c488:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c48c:	4620      	mov	r0, r4
 800c48e:	4798      	blx	r3
 800c490:	2000      	movs	r0, #0
 800c492:	e7e0      	b.n	800c456 <_raise_r+0x12>

0800c494 <raise>:
 800c494:	4b02      	ldr	r3, [pc, #8]	@ (800c4a0 <raise+0xc>)
 800c496:	4601      	mov	r1, r0
 800c498:	6818      	ldr	r0, [r3, #0]
 800c49a:	f7ff bfd3 	b.w	800c444 <_raise_r>
 800c49e:	bf00      	nop
 800c4a0:	20000b34 	.word	0x20000b34

0800c4a4 <_kill_r>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	4d07      	ldr	r5, [pc, #28]	@ (800c4c4 <_kill_r+0x20>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4604      	mov	r4, r0
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	4611      	mov	r1, r2
 800c4b0:	602b      	str	r3, [r5, #0]
 800c4b2:	f000 faff 	bl	800cab4 <_kill>
 800c4b6:	1c43      	adds	r3, r0, #1
 800c4b8:	d102      	bne.n	800c4c0 <_kill_r+0x1c>
 800c4ba:	682b      	ldr	r3, [r5, #0]
 800c4bc:	b103      	cbz	r3, 800c4c0 <_kill_r+0x1c>
 800c4be:	6023      	str	r3, [r4, #0]
 800c4c0:	bd38      	pop	{r3, r4, r5, pc}
 800c4c2:	bf00      	nop
 800c4c4:	200106a0 	.word	0x200106a0

0800c4c8 <_getpid_r>:
 800c4c8:	f000 bae4 	b.w	800ca94 <_getpid>

0800c4cc <expf>:
 800c4cc:	b508      	push	{r3, lr}
 800c4ce:	ed2d 8b02 	vpush	{d8}
 800c4d2:	eef0 8a40 	vmov.f32	s17, s0
 800c4d6:	f000 f88b 	bl	800c5f0 <__ieee754_expf>
 800c4da:	eeb0 8a40 	vmov.f32	s16, s0
 800c4de:	eeb0 0a68 	vmov.f32	s0, s17
 800c4e2:	f000 f875 	bl	800c5d0 <finitef>
 800c4e6:	b160      	cbz	r0, 800c502 <expf+0x36>
 800c4e8:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800c528 <expf+0x5c>
 800c4ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f4:	dd0a      	ble.n	800c50c <expf+0x40>
 800c4f6:	f7fe f957 	bl	800a7a8 <__errno>
 800c4fa:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800c52c <expf+0x60>
 800c4fe:	2322      	movs	r3, #34	@ 0x22
 800c500:	6003      	str	r3, [r0, #0]
 800c502:	eeb0 0a48 	vmov.f32	s0, s16
 800c506:	ecbd 8b02 	vpop	{d8}
 800c50a:	bd08      	pop	{r3, pc}
 800c50c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c530 <expf+0x64>
 800c510:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c518:	d5f3      	bpl.n	800c502 <expf+0x36>
 800c51a:	f7fe f945 	bl	800a7a8 <__errno>
 800c51e:	2322      	movs	r3, #34	@ 0x22
 800c520:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c534 <expf+0x68>
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	e7ec      	b.n	800c502 <expf+0x36>
 800c528:	42b17217 	.word	0x42b17217
 800c52c:	7f800000 	.word	0x7f800000
 800c530:	c2cff1b5 	.word	0xc2cff1b5
 800c534:	00000000 	.word	0x00000000

0800c538 <log10f>:
 800c538:	b508      	push	{r3, lr}
 800c53a:	ed2d 8b02 	vpush	{d8}
 800c53e:	eeb0 8a40 	vmov.f32	s16, s0
 800c542:	f000 fa19 	bl	800c978 <__ieee754_log10f>
 800c546:	eeb4 8a48 	vcmp.f32	s16, s16
 800c54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c54e:	d60f      	bvs.n	800c570 <log10f+0x38>
 800c550:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c558:	d80a      	bhi.n	800c570 <log10f+0x38>
 800c55a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c55e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c562:	d108      	bne.n	800c576 <log10f+0x3e>
 800c564:	f7fe f920 	bl	800a7a8 <__errno>
 800c568:	2322      	movs	r3, #34	@ 0x22
 800c56a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c58c <log10f+0x54>
 800c56e:	6003      	str	r3, [r0, #0]
 800c570:	ecbd 8b02 	vpop	{d8}
 800c574:	bd08      	pop	{r3, pc}
 800c576:	f7fe f917 	bl	800a7a8 <__errno>
 800c57a:	ecbd 8b02 	vpop	{d8}
 800c57e:	2321      	movs	r3, #33	@ 0x21
 800c580:	6003      	str	r3, [r0, #0]
 800c582:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c586:	4802      	ldr	r0, [pc, #8]	@ (800c590 <log10f+0x58>)
 800c588:	f000 b82c 	b.w	800c5e4 <nanf>
 800c58c:	ff800000 	.word	0xff800000
 800c590:	0803ae96 	.word	0x0803ae96

0800c594 <sqrtf>:
 800c594:	b508      	push	{r3, lr}
 800c596:	ed2d 8b02 	vpush	{d8}
 800c59a:	eeb0 8a40 	vmov.f32	s16, s0
 800c59e:	f000 f8f5 	bl	800c78c <__ieee754_sqrtf>
 800c5a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5aa:	d60c      	bvs.n	800c5c6 <sqrtf+0x32>
 800c5ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c5cc <sqrtf+0x38>
 800c5b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5b8:	d505      	bpl.n	800c5c6 <sqrtf+0x32>
 800c5ba:	f7fe f8f5 	bl	800a7a8 <__errno>
 800c5be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c5c2:	2321      	movs	r3, #33	@ 0x21
 800c5c4:	6003      	str	r3, [r0, #0]
 800c5c6:	ecbd 8b02 	vpop	{d8}
 800c5ca:	bd08      	pop	{r3, pc}
 800c5cc:	00000000 	.word	0x00000000

0800c5d0 <finitef>:
 800c5d0:	ee10 3a10 	vmov	r3, s0
 800c5d4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c5d8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c5dc:	bfac      	ite	ge
 800c5de:	2000      	movge	r0, #0
 800c5e0:	2001      	movlt	r0, #1
 800c5e2:	4770      	bx	lr

0800c5e4 <nanf>:
 800c5e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c5ec <nanf+0x8>
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	7fc00000 	.word	0x7fc00000

0800c5f0 <__ieee754_expf>:
 800c5f0:	ee10 2a10 	vmov	r2, s0
 800c5f4:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800c5f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c5fc:	d902      	bls.n	800c604 <__ieee754_expf+0x14>
 800c5fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c602:	4770      	bx	lr
 800c604:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c608:	d106      	bne.n	800c618 <__ieee754_expf+0x28>
 800c60a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800c744 <__ieee754_expf+0x154>
 800c60e:	2900      	cmp	r1, #0
 800c610:	bf18      	it	ne
 800c612:	eeb0 0a67 	vmovne.f32	s0, s15
 800c616:	4770      	bx	lr
 800c618:	484b      	ldr	r0, [pc, #300]	@ (800c748 <__ieee754_expf+0x158>)
 800c61a:	4282      	cmp	r2, r0
 800c61c:	dd02      	ble.n	800c624 <__ieee754_expf+0x34>
 800c61e:	2000      	movs	r0, #0
 800c620:	f000 ba22 	b.w	800ca68 <__math_oflowf>
 800c624:	2a00      	cmp	r2, #0
 800c626:	da05      	bge.n	800c634 <__ieee754_expf+0x44>
 800c628:	4a48      	ldr	r2, [pc, #288]	@ (800c74c <__ieee754_expf+0x15c>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d902      	bls.n	800c634 <__ieee754_expf+0x44>
 800c62e:	2000      	movs	r0, #0
 800c630:	f000 ba14 	b.w	800ca5c <__math_uflowf>
 800c634:	4a46      	ldr	r2, [pc, #280]	@ (800c750 <__ieee754_expf+0x160>)
 800c636:	4293      	cmp	r3, r2
 800c638:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c63c:	d952      	bls.n	800c6e4 <__ieee754_expf+0xf4>
 800c63e:	4a45      	ldr	r2, [pc, #276]	@ (800c754 <__ieee754_expf+0x164>)
 800c640:	4293      	cmp	r3, r2
 800c642:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c646:	d834      	bhi.n	800c6b2 <__ieee754_expf+0xc2>
 800c648:	4b43      	ldr	r3, [pc, #268]	@ (800c758 <__ieee754_expf+0x168>)
 800c64a:	4413      	add	r3, r2
 800c64c:	ed93 7a00 	vldr	s14, [r3]
 800c650:	4b42      	ldr	r3, [pc, #264]	@ (800c75c <__ieee754_expf+0x16c>)
 800c652:	4413      	add	r3, r2
 800c654:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c658:	f1c1 0201 	rsb	r2, r1, #1
 800c65c:	edd3 7a00 	vldr	s15, [r3]
 800c660:	1a52      	subs	r2, r2, r1
 800c662:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c666:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c66a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c760 <__ieee754_expf+0x170>
 800c66e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c764 <__ieee754_expf+0x174>
 800c672:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c676:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c768 <__ieee754_expf+0x178>
 800c67a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c67e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c76c <__ieee754_expf+0x17c>
 800c682:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c686:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c770 <__ieee754_expf+0x180>
 800c68a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c68e:	eef0 6a40 	vmov.f32	s13, s0
 800c692:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c696:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c69a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c69e:	bb92      	cbnz	r2, 800c706 <__ieee754_expf+0x116>
 800c6a0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c6a4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c6a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c6ac:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c6b0:	4770      	bx	lr
 800c6b2:	4b30      	ldr	r3, [pc, #192]	@ (800c774 <__ieee754_expf+0x184>)
 800c6b4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c778 <__ieee754_expf+0x188>
 800c6b8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c77c <__ieee754_expf+0x18c>
 800c6bc:	4413      	add	r3, r2
 800c6be:	edd3 7a00 	vldr	s15, [r3]
 800c6c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c6c6:	eeb0 7a40 	vmov.f32	s14, s0
 800c6ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c6ce:	ee17 2a90 	vmov	r2, s15
 800c6d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6d6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c6da:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c780 <__ieee754_expf+0x190>
 800c6de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c6e2:	e7be      	b.n	800c662 <__ieee754_expf+0x72>
 800c6e4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c6e8:	d20b      	bcs.n	800c702 <__ieee754_expf+0x112>
 800c6ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c784 <__ieee754_expf+0x194>
 800c6ee:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c6f2:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fa:	dd02      	ble.n	800c702 <__ieee754_expf+0x112>
 800c6fc:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c700:	4770      	bx	lr
 800c702:	2200      	movs	r2, #0
 800c704:	e7af      	b.n	800c666 <__ieee754_expf+0x76>
 800c706:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c70a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c70e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c712:	bfb8      	it	lt
 800c714:	3264      	addlt	r2, #100	@ 0x64
 800c716:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c71a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c71e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c722:	ee17 3a90 	vmov	r3, s15
 800c726:	bfab      	itete	ge
 800c728:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c72c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c730:	ee00 3a10 	vmovge	s0, r3
 800c734:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800c788 <__ieee754_expf+0x198>
 800c738:	bfbc      	itt	lt
 800c73a:	ee00 3a10 	vmovlt	s0, r3
 800c73e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c742:	4770      	bx	lr
 800c744:	00000000 	.word	0x00000000
 800c748:	42b17217 	.word	0x42b17217
 800c74c:	42cff1b5 	.word	0x42cff1b5
 800c750:	3eb17218 	.word	0x3eb17218
 800c754:	3f851591 	.word	0x3f851591
 800c758:	0803aea0 	.word	0x0803aea0
 800c75c:	0803ae98 	.word	0x0803ae98
 800c760:	3331bb4c 	.word	0x3331bb4c
 800c764:	b5ddea0e 	.word	0xb5ddea0e
 800c768:	388ab355 	.word	0x388ab355
 800c76c:	bb360b61 	.word	0xbb360b61
 800c770:	3e2aaaab 	.word	0x3e2aaaab
 800c774:	0803aea8 	.word	0x0803aea8
 800c778:	3fb8aa3b 	.word	0x3fb8aa3b
 800c77c:	3f317180 	.word	0x3f317180
 800c780:	3717f7d1 	.word	0x3717f7d1
 800c784:	7149f2ca 	.word	0x7149f2ca
 800c788:	0d800000 	.word	0x0d800000

0800c78c <__ieee754_sqrtf>:
 800c78c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c790:	4770      	bx	lr
	...

0800c794 <__ieee754_logf>:
 800c794:	ee10 3a10 	vmov	r3, s0
 800c798:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c79c:	d106      	bne.n	800c7ac <__ieee754_logf+0x18>
 800c79e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800c938 <__ieee754_logf+0x1a4>
 800c7a2:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800c93c <__ieee754_logf+0x1a8>
 800c7a6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c7aa:	4770      	bx	lr
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	da02      	bge.n	800c7b8 <__ieee754_logf+0x24>
 800c7b2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c7b6:	e7f4      	b.n	800c7a2 <__ieee754_logf+0xe>
 800c7b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c7bc:	db02      	blt.n	800c7c4 <__ieee754_logf+0x30>
 800c7be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7c2:	4770      	bx	lr
 800c7c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c7c8:	bfb8      	it	lt
 800c7ca:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800c940 <__ieee754_logf+0x1ac>
 800c7ce:	485d      	ldr	r0, [pc, #372]	@ (800c944 <__ieee754_logf+0x1b0>)
 800c7d0:	bfbe      	ittt	lt
 800c7d2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c7d6:	f06f 0118 	mvnlt.w	r1, #24
 800c7da:	ee17 2a90 	vmovlt	r2, s15
 800c7de:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800c7e2:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c7e6:	4410      	add	r0, r2
 800c7e8:	bfa8      	it	ge
 800c7ea:	2100      	movge	r1, #0
 800c7ec:	3b7f      	subs	r3, #127	@ 0x7f
 800c7ee:	440b      	add	r3, r1
 800c7f0:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800c7f4:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800c7f8:	4311      	orrs	r1, r2
 800c7fa:	ee00 1a10 	vmov	s0, r1
 800c7fe:	4952      	ldr	r1, [pc, #328]	@ (800c948 <__ieee754_logf+0x1b4>)
 800c800:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800c804:	f102 000f 	add.w	r0, r2, #15
 800c808:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c80c:	4001      	ands	r1, r0
 800c80e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c812:	bb89      	cbnz	r1, 800c878 <__ieee754_logf+0xe4>
 800c814:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81c:	d10f      	bne.n	800c83e <__ieee754_logf+0xaa>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f000 8087 	beq.w	800c932 <__ieee754_logf+0x19e>
 800c824:	ee07 3a90 	vmov	s15, r3
 800c828:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800c94c <__ieee754_logf+0x1b8>
 800c82c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800c950 <__ieee754_logf+0x1bc>
 800c830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c834:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c838:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c83c:	4770      	bx	lr
 800c83e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800c954 <__ieee754_logf+0x1c0>
 800c842:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c846:	eee0 7a66 	vfms.f32	s15, s0, s13
 800c84a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c84e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c852:	b913      	cbnz	r3, 800c85a <__ieee754_logf+0xc6>
 800c854:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c858:	4770      	bx	lr
 800c85a:	ee07 3a90 	vmov	s15, r3
 800c85e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c94c <__ieee754_logf+0x1b8>
 800c862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c866:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c86a:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c86e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c950 <__ieee754_logf+0x1bc>
 800c872:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800c876:	4770      	bx	lr
 800c878:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c87c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c880:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c958 <__ieee754_logf+0x1c4>
 800c884:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800c95c <__ieee754_logf+0x1c8>
 800c888:	4935      	ldr	r1, [pc, #212]	@ (800c960 <__ieee754_logf+0x1cc>)
 800c88a:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800c88e:	4411      	add	r1, r2
 800c890:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800c894:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800c898:	430a      	orrs	r2, r1
 800c89a:	2a00      	cmp	r2, #0
 800c89c:	ee07 3a90 	vmov	s15, r3
 800c8a0:	ee26 5a06 	vmul.f32	s10, s12, s12
 800c8a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c8a8:	ee25 7a05 	vmul.f32	s14, s10, s10
 800c8ac:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800c964 <__ieee754_logf+0x1d0>
 800c8b0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c8b4:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800c968 <__ieee754_logf+0x1d4>
 800c8b8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c8bc:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800c96c <__ieee754_logf+0x1d8>
 800c8c0:	eee7 7a24 	vfma.f32	s15, s14, s9
 800c8c4:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800c970 <__ieee754_logf+0x1dc>
 800c8c8:	eee7 4a87 	vfma.f32	s9, s15, s14
 800c8cc:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800c974 <__ieee754_logf+0x1e0>
 800c8d0:	eee4 7a87 	vfma.f32	s15, s9, s14
 800c8d4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c8d8:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c8dc:	dd1a      	ble.n	800c914 <__ieee754_logf+0x180>
 800c8de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c8e2:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c8e6:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c8ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c8ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c8f2:	b913      	cbnz	r3, 800c8fa <__ieee754_logf+0x166>
 800c8f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8f8:	e7ac      	b.n	800c854 <__ieee754_logf+0xc0>
 800c8fa:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800c94c <__ieee754_logf+0x1b8>
 800c8fe:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c902:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c906:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c90a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c950 <__ieee754_logf+0x1bc>
 800c90e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800c912:	4770      	bx	lr
 800c914:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c918:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c91c:	b913      	cbnz	r3, 800c924 <__ieee754_logf+0x190>
 800c91e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c922:	4770      	bx	lr
 800c924:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800c94c <__ieee754_logf+0x1b8>
 800c928:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c92c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c930:	e7eb      	b.n	800c90a <__ieee754_logf+0x176>
 800c932:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800c93c <__ieee754_logf+0x1a8>
 800c936:	4770      	bx	lr
 800c938:	cc000000 	.word	0xcc000000
 800c93c:	00000000 	.word	0x00000000
 800c940:	4c000000 	.word	0x4c000000
 800c944:	004afb20 	.word	0x004afb20
 800c948:	007ffff0 	.word	0x007ffff0
 800c94c:	3717f7d1 	.word	0x3717f7d1
 800c950:	3f317180 	.word	0x3f317180
 800c954:	3eaaaaab 	.word	0x3eaaaaab
 800c958:	3e1cd04f 	.word	0x3e1cd04f
 800c95c:	3e178897 	.word	0x3e178897
 800c960:	ffcf5c30 	.word	0xffcf5c30
 800c964:	3e638e29 	.word	0x3e638e29
 800c968:	3ecccccd 	.word	0x3ecccccd
 800c96c:	3e3a3325 	.word	0x3e3a3325
 800c970:	3e924925 	.word	0x3e924925
 800c974:	3f2aaaab 	.word	0x3f2aaaab

0800c978 <__ieee754_log10f>:
 800c978:	b508      	push	{r3, lr}
 800c97a:	ee10 3a10 	vmov	r3, s0
 800c97e:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c982:	ed2d 8b02 	vpush	{d8}
 800c986:	d108      	bne.n	800c99a <__ieee754_log10f+0x22>
 800c988:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800ca10 <__ieee754_log10f+0x98>
 800c98c:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800ca14 <__ieee754_log10f+0x9c>
 800c990:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c994:	ecbd 8b02 	vpop	{d8}
 800c998:	bd08      	pop	{r3, pc}
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	461a      	mov	r2, r3
 800c99e:	da02      	bge.n	800c9a6 <__ieee754_log10f+0x2e>
 800c9a0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c9a4:	e7f2      	b.n	800c98c <__ieee754_log10f+0x14>
 800c9a6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c9aa:	db02      	blt.n	800c9b2 <__ieee754_log10f+0x3a>
 800c9ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c9b0:	e7f0      	b.n	800c994 <__ieee754_log10f+0x1c>
 800c9b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c9b6:	bfbf      	itttt	lt
 800c9b8:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800ca18 <__ieee754_log10f+0xa0>
 800c9bc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c9c0:	f06f 0118 	mvnlt.w	r1, #24
 800c9c4:	ee17 2a90 	vmovlt	r2, s15
 800c9c8:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800c9cc:	bfa8      	it	ge
 800c9ce:	2100      	movge	r1, #0
 800c9d0:	3b7f      	subs	r3, #127	@ 0x7f
 800c9d2:	440b      	add	r3, r1
 800c9d4:	0fd9      	lsrs	r1, r3, #31
 800c9d6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800c9da:	ee07 3a90 	vmov	s15, r3
 800c9de:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c9e2:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800c9e6:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c9ea:	ee00 3a10 	vmov	s0, r3
 800c9ee:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c9f2:	f7ff fecf 	bl	800c794 <__ieee754_logf>
 800c9f6:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ca1c <__ieee754_log10f+0xa4>
 800c9fa:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c9fe:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800ca20 <__ieee754_log10f+0xa8>
 800ca02:	eea8 0a27 	vfma.f32	s0, s16, s15
 800ca06:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800ca24 <__ieee754_log10f+0xac>
 800ca0a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800ca0e:	e7c1      	b.n	800c994 <__ieee754_log10f+0x1c>
 800ca10:	cc000000 	.word	0xcc000000
 800ca14:	00000000 	.word	0x00000000
 800ca18:	4c000000 	.word	0x4c000000
 800ca1c:	3ede5bd9 	.word	0x3ede5bd9
 800ca20:	355427db 	.word	0x355427db
 800ca24:	3e9a2080 	.word	0x3e9a2080

0800ca28 <with_errnof>:
 800ca28:	b510      	push	{r4, lr}
 800ca2a:	ed2d 8b02 	vpush	{d8}
 800ca2e:	eeb0 8a40 	vmov.f32	s16, s0
 800ca32:	4604      	mov	r4, r0
 800ca34:	f7fd feb8 	bl	800a7a8 <__errno>
 800ca38:	eeb0 0a48 	vmov.f32	s0, s16
 800ca3c:	ecbd 8b02 	vpop	{d8}
 800ca40:	6004      	str	r4, [r0, #0]
 800ca42:	bd10      	pop	{r4, pc}

0800ca44 <xflowf>:
 800ca44:	b130      	cbz	r0, 800ca54 <xflowf+0x10>
 800ca46:	eef1 7a40 	vneg.f32	s15, s0
 800ca4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ca4e:	2022      	movs	r0, #34	@ 0x22
 800ca50:	f7ff bfea 	b.w	800ca28 <with_errnof>
 800ca54:	eef0 7a40 	vmov.f32	s15, s0
 800ca58:	e7f7      	b.n	800ca4a <xflowf+0x6>
	...

0800ca5c <__math_uflowf>:
 800ca5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ca64 <__math_uflowf+0x8>
 800ca60:	f7ff bff0 	b.w	800ca44 <xflowf>
 800ca64:	10000000 	.word	0x10000000

0800ca68 <__math_oflowf>:
 800ca68:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ca70 <__math_oflowf+0x8>
 800ca6c:	f7ff bfea 	b.w	800ca44 <xflowf>
 800ca70:	70000000 	.word	0x70000000

0800ca74 <_close>:
 800ca74:	4b02      	ldr	r3, [pc, #8]	@ (800ca80 <_close+0xc>)
 800ca76:	2258      	movs	r2, #88	@ 0x58
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca7e:	4770      	bx	lr
 800ca80:	200106a0 	.word	0x200106a0

0800ca84 <_fstat>:
 800ca84:	4b02      	ldr	r3, [pc, #8]	@ (800ca90 <_fstat+0xc>)
 800ca86:	2258      	movs	r2, #88	@ 0x58
 800ca88:	601a      	str	r2, [r3, #0]
 800ca8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca8e:	4770      	bx	lr
 800ca90:	200106a0 	.word	0x200106a0

0800ca94 <_getpid>:
 800ca94:	4b02      	ldr	r3, [pc, #8]	@ (800caa0 <_getpid+0xc>)
 800ca96:	2258      	movs	r2, #88	@ 0x58
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca9e:	4770      	bx	lr
 800caa0:	200106a0 	.word	0x200106a0

0800caa4 <_isatty>:
 800caa4:	4b02      	ldr	r3, [pc, #8]	@ (800cab0 <_isatty+0xc>)
 800caa6:	2258      	movs	r2, #88	@ 0x58
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	2000      	movs	r0, #0
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	200106a0 	.word	0x200106a0

0800cab4 <_kill>:
 800cab4:	4b02      	ldr	r3, [pc, #8]	@ (800cac0 <_kill+0xc>)
 800cab6:	2258      	movs	r2, #88	@ 0x58
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cabe:	4770      	bx	lr
 800cac0:	200106a0 	.word	0x200106a0

0800cac4 <_lseek>:
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <_lseek+0xc>)
 800cac6:	2258      	movs	r2, #88	@ 0x58
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cace:	4770      	bx	lr
 800cad0:	200106a0 	.word	0x200106a0

0800cad4 <_read>:
 800cad4:	4b02      	ldr	r3, [pc, #8]	@ (800cae0 <_read+0xc>)
 800cad6:	2258      	movs	r2, #88	@ 0x58
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cade:	4770      	bx	lr
 800cae0:	200106a0 	.word	0x200106a0

0800cae4 <_write>:
 800cae4:	4b02      	ldr	r3, [pc, #8]	@ (800caf0 <_write+0xc>)
 800cae6:	2258      	movs	r2, #88	@ 0x58
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800caee:	4770      	bx	lr
 800caf0:	200106a0 	.word	0x200106a0

0800caf4 <_exit>:
 800caf4:	e7fe      	b.n	800caf4 <_exit>
	...

0800caf8 <_init>:
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafa:	bf00      	nop
 800cafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cafe:	bc08      	pop	{r3}
 800cb00:	469e      	mov	lr, r3
 800cb02:	4770      	bx	lr

0800cb04 <_fini>:
 800cb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb06:	bf00      	nop
 800cb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb0a:	bc08      	pop	{r3}
 800cb0c:	469e      	mov	lr, r3
 800cb0e:	4770      	bx	lr
