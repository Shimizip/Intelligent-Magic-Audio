
nn-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c890  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002e350  0800ca80  0800ca80  0000da80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803add0  0803add0  0003ccf0  2**0
                  CONTENTS
  4 .ARM          00000008  0803add0  0803add0  0003bdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803add8  0803add8  0003ccf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803add8  0803add8  0003bdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803addc  0803addc  0003bddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000cf0  20000000  0803ade0  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000209b4  20000cf0  0803bad0  0003ccf0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200216a4  0803bad0  0003d6a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003ccf0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a629  00000000  00000000  0003cd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db9  00000000  00000000  00057347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0005b100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9a  00000000  00000000  0005c540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026767  00000000  00000000  0005d3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9bc  00000000  00000000  00083b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed696  00000000  00000000  0009f4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000101  00000000  00000000  0018cb93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e8  00000000  00000000  0018cc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0019317c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003ac5  00000000  00000000  001931dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000080  00000000  00000000  00196ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000cf0 	.word	0x20000cf0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ca58 	.word	0x0800ca58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000cf4 	.word	0x20000cf4
 800021c:	0800ca58 	.word	0x0800ca58

08000220 <arm_bitreversal_32>:
 8000220:	1c4b      	adds	r3, r1, #1
 8000222:	2b01      	cmp	r3, #1
 8000224:	bf98      	it	ls
 8000226:	4770      	bxls	lr
 8000228:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800022c:	1c91      	adds	r1, r2, #2
 800022e:	089b      	lsrs	r3, r3, #2

08000230 <arm_bitreversal_32_0>:
 8000230:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000234:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000238:	880a      	ldrh	r2, [r1, #0]
 800023a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800023e:	4480      	add	r8, r0
 8000240:	4481      	add	r9, r0
 8000242:	4402      	add	r2, r0
 8000244:	4484      	add	ip, r0
 8000246:	f8d9 7000 	ldr.w	r7, [r9]
 800024a:	f8d8 6000 	ldr.w	r6, [r8]
 800024e:	6815      	ldr	r5, [r2, #0]
 8000250:	f8dc 4000 	ldr.w	r4, [ip]
 8000254:	f8c9 6000 	str.w	r6, [r9]
 8000258:	f8c8 7000 	str.w	r7, [r8]
 800025c:	f8cc 5000 	str.w	r5, [ip]
 8000260:	6014      	str	r4, [r2, #0]
 8000262:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000266:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800026a:	6855      	ldr	r5, [r2, #4]
 800026c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000270:	f8c9 6004 	str.w	r6, [r9, #4]
 8000274:	f8c8 7004 	str.w	r7, [r8, #4]
 8000278:	f8cc 5004 	str.w	r5, [ip, #4]
 800027c:	6054      	str	r4, [r2, #4]
 800027e:	3108      	adds	r1, #8
 8000280:	3b01      	subs	r3, #1
 8000282:	d1d5      	bne.n	8000230 <arm_bitreversal_32_0>
 8000284:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000288:	4770      	bx	lr

0800028a <arm_bitreversal_16>:
 800028a:	1c4b      	adds	r3, r1, #1
 800028c:	2b01      	cmp	r3, #1
 800028e:	bf98      	it	ls
 8000290:	4770      	bxls	lr
 8000292:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	1c91      	adds	r1, r2, #2
 8000298:	089b      	lsrs	r3, r3, #2

0800029a <arm_bitreversal_16_0>:
 800029a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800029e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002a2:	880a      	ldrh	r2, [r1, #0]
 80002a4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002a8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002ac:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002b0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002b4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002b8:	f8d9 7000 	ldr.w	r7, [r9]
 80002bc:	f8d8 6000 	ldr.w	r6, [r8]
 80002c0:	6815      	ldr	r5, [r2, #0]
 80002c2:	f8dc 4000 	ldr.w	r4, [ip]
 80002c6:	f8c9 6000 	str.w	r6, [r9]
 80002ca:	f8c8 7000 	str.w	r7, [r8]
 80002ce:	f8cc 5000 	str.w	r5, [ip]
 80002d2:	6014      	str	r4, [r2, #0]
 80002d4:	3108      	adds	r1, #8
 80002d6:	3b01      	subs	r3, #1
 80002d8:	d1df      	bne.n	800029a <arm_bitreversal_16_0>
 80002da:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmpun>:
 8000c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x10>
 8000c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c4a:	d10a      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x20>
 8000c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0001 	mov.w	r0, #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2iz>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c70:	d215      	bcs.n	8000c9e <__aeabi_d2iz+0x36>
 8000c72:	d511      	bpl.n	8000c98 <__aeabi_d2iz+0x30>
 8000c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d912      	bls.n	8000ca4 <__aeabi_d2iz+0x3c>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	4770      	bx	lr
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	4770      	bx	lr
 8000c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ca2:	d105      	bne.n	8000cb0 <__aeabi_d2iz+0x48>
 8000ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	bf08      	it	eq
 8000caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b96a 	b.w	8000fa4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <init_nn>:
float32_t mel_spectrogram_column_buffer[SPECTROGRAM_ROWS];

static float32_t frame[FRAME_LENGTH];

// Function to initialize the neural network
int init_nn() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	ai_error err;

	/* Create a local array with the addresses of the activations buffers */
	const ai_handle act_addr[] = { activations };
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <init_nn+0x68>)
 8000fb0:	603b      	str	r3, [r7, #0]
	/* Create an instance of the model */
	err = ai_network_1_create_and_init(&network, act_addr, NULL);
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4816      	ldr	r0, [pc, #88]	@ (8001014 <init_nn+0x6c>)
 8000fba:	f004 f9b7 	bl	800532c <ai_network_1_create_and_init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	607b      	str	r3, [r7, #4]
	if (err.type != AI_ERROR_NONE) {
 8000fc2:	793b      	ldrb	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00b      	beq.n	8000fe0 <init_nn+0x38>
		printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8000fc8:	793b      	ldrb	r3, [r7, #4]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	@ (8001018 <init_nn+0x70>)
 8000fd6:	f009 fb09 	bl	800a5ec <iprintf>
		return -1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fde:	e012      	b.n	8001006 <init_nn+0x5e>
	}
	ai_input = ai_network_1_inputs_get(network, NULL);
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <init_nn+0x6c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fa14 	bl	8005414 <ai_network_1_inputs_get>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <init_nn+0x74>)
 8000ff0:	6013      	str	r3, [r2, #0]
	ai_output = ai_network_1_outputs_get(network, NULL);
 8000ff2:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <init_nn+0x6c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 fa25 	bl	8005448 <ai_network_1_outputs_get>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <init_nn+0x78>)
 8001002:	6013      	str	r3, [r2, #0]

	return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000d7c 	.word	0x20000d7c
 8001014:	20000d78 	.word	0x20000d78
 8001018:	0800ca80 	.word	0x0800ca80
 800101c:	2000ee7c 	.word	0x2000ee7c
 8001020:	2000ee80 	.word	0x2000ee80

08001024 <run_nn_classification>:

// Function to run the neural network and classify input data
int run_nn_classification(ai_float* pSpectrogram, ai_float* classification_result) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    ai_i32 batch;
    ai_error err;

    ai_input[0].data = AI_HANDLE_PTR(pSpectrogram);
 800102e:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <run_nn_classification+0x74>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	605a      	str	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(classification_result);
 8001036:	4b19      	ldr	r3, [pc, #100]	@ (800109c <run_nn_classification+0x78>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	605a      	str	r2, [r3, #4]

    if(network == AI_HANDLE_NULL)
 800103e:	4b18      	ldr	r3, [pc, #96]	@ (80010a0 <run_nn_classification+0x7c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <run_nn_classification+0x28>
      {
          return -1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104a:	e020      	b.n	800108e <run_nn_classification+0x6a>
      }


    // Run the network
    batch = ai_network_1_run(network, ai_input, ai_output);
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <run_nn_classification+0x7c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <run_nn_classification+0x74>)
 8001052:	6811      	ldr	r1, [r2, #0]
 8001054:	4a11      	ldr	r2, [pc, #68]	@ (800109c <run_nn_classification+0x78>)
 8001056:	6812      	ldr	r2, [r2, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f004 fa4b 	bl	80054f4 <ai_network_1_run>
 800105e:	60f8      	str	r0, [r7, #12]
    if (batch != 1) {
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d012      	beq.n	800108c <run_nn_classification+0x68>
        err = ai_network_1_get_error(network);
 8001066:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <run_nn_classification+0x7c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f93c 	bl	80052e8 <ai_network_1_get_error>
 8001070:	4603      	mov	r3, r0
 8001072:	60bb      	str	r3, [r7, #8]
        printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001074:	7a3b      	ldrb	r3, [r7, #8]
 8001076:	4619      	mov	r1, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800107e:	461a      	mov	r2, r3
 8001080:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <run_nn_classification+0x80>)
 8001082:	f009 fab3 	bl	800a5ec <iprintf>
        return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108a:	e000      	b.n	800108e <run_nn_classification+0x6a>
    }

    return 0; // Success
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000ee7c 	.word	0x2000ee7c
 800109c:	2000ee80 	.word	0x2000ee80
 80010a0:	20000d78 	.word	0x20000d78
 80010a4:	0800caac 	.word	0x0800caac

080010a8 <Preprocessing_Init>:
		}
	}
	process_subsample(spectrogram);
}

void Preprocessing_Init(void) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, 1024);
 80010ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010b0:	4817      	ldr	r0, [pc, #92]	@ (8001110 <Preprocessing_Init+0x68>)
 80010b2:	f004 fa57 	bl	8005564 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <Preprocessing_Init+0x6c>)
 80010b8:	4a15      	ldr	r2, [pc, #84]	@ (8001110 <Preprocessing_Init+0x68>)
 80010ba:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <Preprocessing_Init+0x6c>)
 80010be:	2201      	movs	r2, #1
 80010c0:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = (float32_t *) hannWin_1024;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <Preprocessing_Init+0x6c>)
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <Preprocessing_Init+0x70>)
 80010c6:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = 16000;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <Preprocessing_Init+0x6c>)
 80010ca:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80010ce:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = 1024;
 80010d0:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <Preprocessing_Init+0x6c>)
 80010d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010d6:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = 1024;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <Preprocessing_Init+0x6c>)
 80010da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010de:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = mel_spectrogram_column_buffer;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <Preprocessing_Init+0x6c>)
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <Preprocessing_Init+0x74>)
 80010e4:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = (uint32_t *) melFiltersStartIndices_1024_30;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <Preprocessing_Init+0x78>)
 80010e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <Preprocessing_Init+0x7c>)
 80010ea:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = (uint32_t *) melFiltersStopIndices_1024_30;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <Preprocessing_Init+0x78>)
 80010ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001128 <Preprocessing_Init+0x80>)
 80010f0:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = (float32_t *) melFilterLut_1024_30;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001120 <Preprocessing_Init+0x78>)
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <Preprocessing_Init+0x84>)
 80010f6:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels       = 30;
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <Preprocessing_Init+0x78>)
 80010fa:	221e      	movs	r2, #30
 80010fc:	611a      	str	r2, [r3, #16]

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <Preprocessing_Init+0x88>)
 8001100:	4a04      	ldr	r2, [pc, #16]	@ (8001114 <Preprocessing_Init+0x6c>)
 8001102:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <Preprocessing_Init+0x88>)
 8001106:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <Preprocessing_Init+0x78>)
 8001108:	605a      	str	r2, [r3, #4]
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000d0c 	.word	0x20000d0c
 8001114:	20000d24 	.word	0x20000d24
 8001118:	08014b54 	.word	0x08014b54
 800111c:	2000fd9c 	.word	0x2000fd9c
 8001120:	20000d48 	.word	0x20000d48
 8001124:	08015b54 	.word	0x08015b54
 8001128:	08015bcc 	.word	0x08015bcc
 800112c:	08015c44 	.word	0x08015c44
 8001130:	20000d40 	.word	0x20000d40

08001134 <frame_subsamples>:

// splits one subsample in 1024 samples long, 512 samples overlapping frames
void frame_subsamples(float32_t* subsample, int subsample_length) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e02c      	b.n	800119e <frame_subsamples+0x6a>
        int start_index = i * HOP_LENGTH;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < FRAME_LENGTH; j++) {
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	e01c      	b.n	800118a <frame_subsamples+0x56>
            if (start_index + j < subsample_length) {
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4413      	add	r3, r2
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	dd0c      	ble.n	8001176 <frame_subsamples+0x42>
                frame[j] = subsample[start_index + j];
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4911      	ldr	r1, [pc, #68]	@ (80011b0 <frame_subsamples+0x7c>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	e006      	b.n	8001184 <frame_subsamples+0x50>
            } else {
                frame[j] = 0.0f; // pad with zeros
 8001176:	4a0e      	ldr	r2, [pc, #56]	@ (80011b0 <frame_subsamples+0x7c>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < FRAME_LENGTH; j++) {
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	3301      	adds	r3, #1
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001190:	dbde      	blt.n	8001150 <frame_subsamples+0x1c>
            }
        }
        preprocess_frame(frame);
 8001192:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <frame_subsamples+0x7c>)
 8001194:	f000 f80e 	bl	80011b4 <preprocess_frame>
    for (int i = 0; i < N_FRAMES_PER_SUBSAMPLE; i++) {
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	3301      	adds	r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b1f      	cmp	r3, #31
 80011a2:	ddcf      	ble.n	8001144 <frame_subsamples+0x10>
    }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000fe14 	.word	0x2000fe14

080011b4 <preprocess_frame>:

// frame = 1 spectrogram column = 1024 samples
void preprocess_frame(float* pFrame) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	// Create a Mel-scaled spectrogram column
	MelSpectrogramColumn(&S_MelSpectr, pFrame, mel_spectrogram_column_buffer);
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <preprocess_frame+0x80>)
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	481d      	ldr	r0, [pc, #116]	@ (8001238 <preprocess_frame+0x84>)
 80011c2:	f003 febf 	bl	8004f44 <MelSpectrogramColumn>

	// Reshape and copy into output spectrogram
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	e01d      	b.n	8001208 <preprocess_frame+0x54>
		int idx = i * SPECTROGRAM_COLS + spectrogram_col_index;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	015a      	lsls	r2, r3, #5
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <preprocess_frame+0x88>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
		if (idx > 960) {
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 80011de:	dd02      	ble.n	80011e6 <preprocess_frame+0x32>
			printf("bla");
 80011e0:	4817      	ldr	r0, [pc, #92]	@ (8001240 <preprocess_frame+0x8c>)
 80011e2:	f009 fa03 	bl	800a5ec <iprintf>
		}
		spectrogram[i * SPECTROGRAM_COLS + spectrogram_col_index] = mel_spectrogram_column_buffer[i];
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	015a      	lsls	r2, r3, #5
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <preprocess_frame+0x88>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4910      	ldr	r1, [pc, #64]	@ (8001234 <preprocess_frame+0x80>)
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	440a      	add	r2, r1
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	4912      	ldr	r1, [pc, #72]	@ (8001244 <preprocess_frame+0x90>)
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < SPECTROGRAM_ROWS; i++) {
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b1d      	cmp	r3, #29
 800120c:	d9de      	bls.n	80011cc <preprocess_frame+0x18>
	}

    spectrogram_col_index++;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <preprocess_frame+0x88>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	4a09      	ldr	r2, [pc, #36]	@ (800123c <preprocess_frame+0x88>)
 8001216:	6013      	str	r3, [r2, #0]

    // If we have a full spectrogram (32 columns), process it
    if (spectrogram_col_index == SPECTROGRAM_COLS) {
 8001218:	4b08      	ldr	r3, [pc, #32]	@ (800123c <preprocess_frame+0x88>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b20      	cmp	r3, #32
 800121e:	d105      	bne.n	800122c <preprocess_frame+0x78>
    //if (spectrogram_col_index == 1) {
    	process_subsample(spectrogram);
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <preprocess_frame+0x90>)
 8001222:	f000 f811 	bl	8001248 <process_subsample>
        // Reset the column index for the next spectrogram
        spectrogram_col_index = 0;
 8001226:	4b05      	ldr	r3, [pc, #20]	@ (800123c <preprocess_frame+0x88>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
    }
}
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000fd9c 	.word	0x2000fd9c
 8001238:	20000d40 	.word	0x20000d40
 800123c:	2000fd98 	.word	0x2000fd98
 8001240:	0800cad8 	.word	0x0800cad8
 8001244:	2000ee84 	.word	0x2000ee84

08001248 <process_subsample>:

void process_subsample(float* pSpectrogram) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	// Convert power spectrogram to dB
	PowerToDb(spectrogram);
 8001250:	4811      	ldr	r0, [pc, #68]	@ (8001298 <process_subsample+0x50>)
 8001252:	f000 f827 	bl	80012a4 <PowerToDb>

	// Run the neural network classification
	if (run_nn_classification(spectrogram, aiOutData) == 0) {
 8001256:	4911      	ldr	r1, [pc, #68]	@ (800129c <process_subsample+0x54>)
 8001258:	480f      	ldr	r0, [pc, #60]	@ (8001298 <process_subsample+0x50>)
 800125a:	f7ff fee3 	bl	8001024 <run_nn_classification>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d115      	bne.n	8001290 <process_subsample+0x48>
		/* Output results */
		for (uint32_t i = 0; i < AI_NETWORK_1_OUT_1_SIZE; i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e00f      	b.n	800128a <process_subsample+0x42>
		  printf("%8.6f ", aiOutData[i]);
 800126a:	4a0c      	ldr	r2, [pc, #48]	@ (800129c <process_subsample+0x54>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f9ef 	bl	8000658 <__aeabi_f2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <process_subsample+0x58>)
 8001280:	f009 f9b4 	bl	800a5ec <iprintf>
		for (uint32_t i = 0; i < AI_NETWORK_1_OUT_1_SIZE; i++) {
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3301      	adds	r3, #1
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b04      	cmp	r3, #4
 800128e:	d9ec      	bls.n	800126a <process_subsample+0x22>
		}
	}
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000ee84 	.word	0x2000ee84
 800129c:	2000fd84 	.word	0x2000fd84
 80012a0:	0800cadc 	.word	0x0800cadc

080012a4 <PowerToDb>:

void PowerToDb(float *pSpectrogram) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    float max_mel_energy = FLT_MIN; // Minimaler positiver Wert, um sicherzustellen, dass er überschrieben wird
 80012ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80012b0:	61fb      	str	r3, [r7, #28]
    uint32_t rows = 30;
 80012b2:	231e      	movs	r3, #30
 80012b4:	617b      	str	r3, [r7, #20]
    uint32_t cols = 32;
 80012b6:	2320      	movs	r3, #32
 80012b8:	613b      	str	r3, [r7, #16]
    uint32_t i, total_elements = rows * cols;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	60fb      	str	r3, [r7, #12]

    // Find MelEnergy Scaling factor
    for (i = 0; i < total_elements; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	e015      	b.n	80012f6 <PowerToDb+0x52>
        if (pSpectrogram[i] > max_mel_energy) {
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	d505      	bpl.n	80012f0 <PowerToDb+0x4c>
            max_mel_energy = pSpectrogram[i];
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4413      	add	r3, r2
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < total_elements; i++) {
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	3301      	adds	r3, #1
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3e5      	bcc.n	80012ca <PowerToDb+0x26>
        }
    }

    // Check if max_mel_energy is zero to avoid division by zero
    if (max_mel_energy == 0.0f) {
 80012fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001302:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130a:	d110      	bne.n	800132e <PowerToDb+0x8a>
        // If max_mel_energy is zero, the spectrogram is all zeros, and we can directly set the output to -80 dB
        for (i = 0; i < total_elements; i++) {
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	e008      	b.n	8001324 <PowerToDb+0x80>
        	pSpectrogram[i] = -80.0f;
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <PowerToDb+0x120>)
 800131c:	601a      	str	r2, [r3, #0]
        for (i = 0; i < total_elements; i++) {
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	3301      	adds	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d3f2      	bcc.n	8001312 <PowerToDb+0x6e>
        }
        return;
 800132c:	e047      	b.n	80013be <PowerToDb+0x11a>
    }

    // Scale Mel Energies and convert to dB
    for (i = 0; i < total_elements; i++) {
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	e040      	b.n	80013b6 <PowerToDb+0x112>
    	pSpectrogram[i] = 10.0f * log10f(pSpectrogram[i] / max_mel_energy);
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	ed93 7a00 	vldr	s14, [r3]
 8001340:	edd7 7a07 	vldr	s15, [r7, #28]
 8001344:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001348:	eeb0 0a66 	vmov.f32	s0, s13
 800134c:	f00b f8a4 	bl	800c498 <log10f>
 8001350:	eef0 7a40 	vmov.f32	s15, s0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001364:	edc3 7a00 	vstr	s15, [r3]
        // Threshold to -80 dB
        if (pSpectrogram[i] < -80.0f) {
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013c8 <PowerToDb+0x124>
 8001378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d505      	bpl.n	800138e <PowerToDb+0xea>
        	pSpectrogram[i] = -80.0f;
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <PowerToDb+0x120>)
 800138c:	601a      	str	r2, [r3, #0]
        }
        // Check for nan and replace with -80
        if (isnan(pSpectrogram[i])) {
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	eef4 7a67 	vcmp.f32	s15, s15
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d705      	bvc.n	80013b0 <PowerToDb+0x10c>
        	pSpectrogram[i] = -80.0f;
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <PowerToDb+0x120>)
 80013ae:	601a      	str	r2, [r3, #0]
    for (i = 0; i < total_elements; i++) {
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	3301      	adds	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3ba      	bcc.n	8001334 <PowerToDb+0x90>
        }
    }
}
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	c2a00000 	.word	0xc2a00000
 80013c8:	c2a00000 	.word	0xc2a00000

080013cc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013d0:	f3bf 8f4f 	dsb	sy
}
 80013d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013d6:	f3bf 8f6f 	isb	sy
}
 80013da:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <SCB_EnableICache+0x48>)
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013e4:	f3bf 8f4f 	dsb	sy
}
 80013e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013ea:	f3bf 8f6f 	isb	sy
}
 80013ee:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <SCB_EnableICache+0x48>)
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <SCB_EnableICache+0x48>)
 80013f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80013fc:	f3bf 8f4f 	dsb	sy
}
 8001400:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001402:	f3bf 8f6f 	isb	sy
}
 8001406:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800141e:	4b1f      	ldr	r3, [pc, #124]	@ (800149c <SCB_EnableDCache+0x84>)
 8001420:	2200      	movs	r2, #0
 8001422:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001426:	f3bf 8f4f 	dsb	sy
}
 800142a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <SCB_EnableDCache+0x84>)
 800142e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001432:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	0b5b      	lsrs	r3, r3, #13
 8001438:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800143c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001446:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	015a      	lsls	r2, r3, #5
 800144c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001450:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001456:	4911      	ldr	r1, [pc, #68]	@ (800149c <SCB_EnableDCache+0x84>)
 8001458:	4313      	orrs	r3, r2
 800145a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	60ba      	str	r2, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ef      	bne.n	8001448 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1e5a      	subs	r2, r3, #1
 800146c:	60fa      	str	r2, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e5      	bne.n	800143e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001472:	f3bf 8f4f 	dsb	sy
}
 8001476:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001478:	4b08      	ldr	r3, [pc, #32]	@ (800149c <SCB_EnableDCache+0x84>)
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	4a07      	ldr	r2, [pc, #28]	@ (800149c <SCB_EnableDCache+0x84>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001482:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001484:	f3bf 8f4f 	dsb	sy
}
 8001488:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800148a:	f3bf 8f6f 	isb	sy
}
 800148e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80014a6:	f7ff ff91 	bl	80013cc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80014aa:	f7ff ffb5 	bl	8001418 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ae:	f000 fc8e 	bl	8001dce <HAL_Init>

  /* USER CODE BEGIN Init */
  /* enabling CRC clock for using AI libraries (for checking if STM32
  	  microprocessor is used)*/
  __HAL_RCC_CRC_CLK_ENABLE();
 80014b2:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <main+0xcc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a2d      	ldr	r2, [pc, #180]	@ (800156c <main+0xcc>)
 80014b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <main+0xcc>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ca:	f000 f85b 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ce:	f000 f9e5 	bl	800189c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014d2:	f000 f983 	bl	80017dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80014d6:	f000 f9b1 	bl	800183c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80014da:	f000 f8e3 	bl	80016a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014de:	f000 f92f 	bl	8001740 <MX_TIM3_Init>
  MX_CRC_Init();
 80014e2:	f000 f8bd 	bl	8001660 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_CRC_CLK_ENABLE();
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <main+0xcc>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a20      	ldr	r2, [pc, #128]	@ (800156c <main+0xcc>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <main+0xcc>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
	if (init_nn() != 0) {
 80014fe:	f7ff fd53 	bl	8000fa8 <init_nn>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <main+0x74>
		printf("Failed to initialize neural network\n");
 8001508:	4819      	ldr	r0, [pc, #100]	@ (8001570 <main+0xd0>)
 800150a:	f009 f8d7 	bl	800a6bc <puts>
		return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001512:	e026      	b.n	8001562 <main+0xc2>
	}

	Preprocessing_Init();
 8001514:	f7ff fdc8 	bl	80010a8 <Preprocessing_Init>
	// Resample das Audio (Platzhalter)
	for (int i = 0; i < audio_data_length; i++) {
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e014      	b.n	8001548 <main+0xa8>
		resampled_data[i] = audio_data[i] / 32768.0f;
 800151e:	4a15      	ldr	r2, [pc, #84]	@ (8001574 <main+0xd4>)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001526:	ee07 3a90 	vmov	s15, r3
 800152a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152e:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001578 <main+0xd8>
 8001532:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001536:	4a11      	ldr	r2, [pc, #68]	@ (800157c <main+0xdc>)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < audio_data_length; i++) {
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3301      	adds	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b0d      	ldr	r3, [pc, #52]	@ (8001580 <main+0xe0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbe5      	blt.n	800151e <main+0x7e>
	}
//	// Frame die resampleten Daten
	frame_subsamples(resampled_data, audio_data_length);
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <main+0xe0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4619      	mov	r1, r3
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <main+0xdc>)
 800155a:	f7ff fdeb 	bl	8001134 <frame_subsamples>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800155e:	bf00      	nop
 8001560:	e7fd      	b.n	800155e <main+0xbe>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	0800cae4 	.word	0x0800cae4
 8001574:	0800cb50 	.word	0x0800cb50
 8001578:	47000000 	.word	0x47000000
 800157c:	20011460 	.word	0x20011460
 8001580:	08014b50 	.word	0x08014b50

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	@ 0x50
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2230      	movs	r2, #48	@ 0x30
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f009 f89a 	bl	800a6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015a8:	f001 f960 	bl	800286c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <SystemClock_Config+0xd4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	4a29      	ldr	r2, [pc, #164]	@ (8001658 <SystemClock_Config+0xd4>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <SystemClock_Config+0xd4>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c4:	4b25      	ldr	r3, [pc, #148]	@ (800165c <SystemClock_Config+0xd8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a24      	ldr	r2, [pc, #144]	@ (800165c <SystemClock_Config+0xd8>)
 80015ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <SystemClock_Config+0xd8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f0:	2304      	movs	r3, #4
 80015f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015f4:	23d8      	movs	r3, #216	@ 0xd8
 80015f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80015fc:	2309      	movs	r3, #9
 80015fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4618      	mov	r0, r3
 8001606:	f001 f991 	bl	800292c <HAL_RCC_OscConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001610:	f000 f9e6 	bl	80019e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001614:	f001 f93a 	bl	800288c <HAL_PWREx_EnableOverDrive>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800161e:	f000 f9df 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001622:	230f      	movs	r3, #15
 8001624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001626:	2302      	movs	r3, #2
 8001628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800162e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2107      	movs	r1, #7
 8001640:	4618      	mov	r0, r3
 8001642:	f001 fc17 	bl	8002e74 <HAL_RCC_ClockConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800164c:	f000 f9c8 	bl	80019e0 <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3750      	adds	r7, #80	@ 0x50
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000

08001660 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <MX_CRC_Init+0x3c>)
 8001666:	4a0e      	ldr	r2, [pc, #56]	@ (80016a0 <MX_CRC_Init+0x40>)
 8001668:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_CRC_Init+0x3c>)
 800166c:	2200      	movs	r2, #0
 800166e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <MX_CRC_Init+0x3c>)
 8001672:	2200      	movs	r2, #0
 8001674:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_CRC_Init+0x3c>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <MX_CRC_Init+0x3c>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_CRC_Init+0x3c>)
 8001684:	2201      	movs	r2, #1
 8001686:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_CRC_Init+0x3c>)
 800168a:	f000 fd07 	bl	800209c <HAL_CRC_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001694:	f000 f9a4 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20010e14 	.word	0x20010e14
 80016a0:	40023000 	.word	0x40023000

080016a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_TIM2_Init+0x98>)
 80016c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_TIM2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_TIM2_Init+0x98>)
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b17      	ldr	r3, [pc, #92]	@ (800173c <MX_TIM2_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MX_TIM2_Init+0x98>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ea:	4814      	ldr	r0, [pc, #80]	@ (800173c <MX_TIM2_Init+0x98>)
 80016ec:	f002 f932 	bl	8003954 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016f6:	f000 f973 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <MX_TIM2_Init+0x98>)
 8001708:	f002 f97c 	bl	8003a04 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001712:	f000 f965 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4619      	mov	r1, r3
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <MX_TIM2_Init+0x98>)
 8001724:	f002 fb72 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800172e:	f000 f957 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20010e38 	.word	0x20010e38

08001740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <MX_TIM3_Init+0x94>)
 8001760:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <MX_TIM3_Init+0x98>)
 8001762:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <MX_TIM3_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <MX_TIM3_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <MX_TIM3_Init+0x94>)
 8001772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001776:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <MX_TIM3_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <MX_TIM3_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001784:	4813      	ldr	r0, [pc, #76]	@ (80017d4 <MX_TIM3_Init+0x94>)
 8001786:	f002 f8e5 	bl	8003954 <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001790:	f000 f926 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	4619      	mov	r1, r3
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <MX_TIM3_Init+0x94>)
 80017a2:	f002 f92f 	bl	8003a04 <HAL_TIM_ConfigClockSource>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017ac:	f000 f918 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <MX_TIM3_Init+0x94>)
 80017be:	f002 fb25 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017c8:	f000 f90a 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	3720      	adds	r7, #32
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20010e84 	.word	0x20010e84
 80017d8:	40000400 	.word	0x40000400

080017dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 80017e2:	4a15      	ldr	r2, [pc, #84]	@ (8001838 <MX_USART3_UART_Init+0x5c>)
 80017e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017e6:	4b13      	ldr	r3, [pc, #76]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 80017e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001800:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 8001802:	220c      	movs	r2, #12
 8001804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001812:	4b08      	ldr	r3, [pc, #32]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 800181a:	2200      	movs	r2, #0
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_USART3_UART_Init+0x58>)
 8001820:	f002 fb82 	bl	8003f28 <HAL_UART_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800182a:	f000 f8d9 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20010ed0 	.word	0x20010ed0
 8001838:	40004800 	.word	0x40004800

0800183c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001842:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800184a:	2206      	movs	r2, #6
 800184c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001850:	2202      	movs	r2, #2
 8001852:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800185c:	2202      	movs	r2, #2
 800185e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001860:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001862:	2201      	movs	r2, #1
 8001864:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001874:	2201      	movs	r2, #1
 8001876:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001878:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800187a:	2201      	movs	r2, #1
 800187c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001880:	2200      	movs	r2, #0
 8001882:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001886:	f000 fea8 	bl	80025da <HAL_PCD_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001890:	f000 f8a6 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20010f58 	.word	0x20010f58

0800189c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	4b47      	ldr	r3, [pc, #284]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a46      	ldr	r2, [pc, #280]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b44      	ldr	r3, [pc, #272]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	4b41      	ldr	r3, [pc, #260]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a40      	ldr	r2, [pc, #256]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b3e      	ldr	r3, [pc, #248]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	4b3b      	ldr	r3, [pc, #236]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4a3a      	ldr	r2, [pc, #232]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fa:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <MX_GPIO_Init+0x134>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4a34      	ldr	r2, [pc, #208]	@ (80019d0 <MX_GPIO_Init+0x134>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <MX_GPIO_Init+0x134>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001912:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <MX_GPIO_Init+0x134>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a2e      	ldr	r2, [pc, #184]	@ (80019d0 <MX_GPIO_Init+0x134>)
 8001918:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <MX_GPIO_Init+0x134>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	4b29      	ldr	r3, [pc, #164]	@ (80019d0 <MX_GPIO_Init+0x134>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <MX_GPIO_Init+0x134>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b26      	ldr	r3, [pc, #152]	@ (80019d0 <MX_GPIO_Init+0x134>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001948:	4822      	ldr	r0, [pc, #136]	@ (80019d4 <MX_GPIO_Init+0x138>)
 800194a:	f000 fe2d 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2140      	movs	r1, #64	@ 0x40
 8001952:	4821      	ldr	r0, [pc, #132]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 8001954:	f000 fe28 	bl	80025a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800195e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	481b      	ldr	r0, [pc, #108]	@ (80019dc <MX_GPIO_Init+0x140>)
 8001970:	f000 fc7e 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001974:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4811      	ldr	r0, [pc, #68]	@ (80019d4 <MX_GPIO_Init+0x138>)
 800198e:	f000 fc6f 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001992:	2340      	movs	r3, #64	@ 0x40
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80019aa:	f000 fc61 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <MX_GPIO_Init+0x13c>)
 80019c2:	f000 fc55 	bl	8002270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	@ 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40021800 	.word	0x40021800
 80019dc:	40020800 	.word	0x40020800

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <Error_Handler+0x8>

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_MspInit+0x44>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_MspInit+0x44>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <HAL_CRC_MspInit+0x38>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d10b      	bne.n	8001a5e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	@ (8001a70 <HAL_CRC_MspInit+0x3c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <HAL_CRC_MspInit+0x3c>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <HAL_CRC_MspInit+0x3c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023000 	.word	0x40023000
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a86:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x5c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x5c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x5c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a9e:	e010      	b.n	8001ac2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <HAL_TIM_Base_MspInit+0x60>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x5c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x5c>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_TIM_Base_MspInit+0x5c>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40000400 	.word	0x40000400

08001ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0aa      	sub	sp, #168	@ 0xa8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2280      	movs	r2, #128	@ 0x80
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f008 fde7 	bl	800a6cc <memset>
  if(huart->Instance==USART3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <HAL_UART_MspInit+0xb4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d13c      	bne.n	8001b82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4618      	mov	r0, r3
 8001b18:	f001 fbd2 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b22:	f7ff ff5d 	bl	80019e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b26:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	4a19      	ldr	r2, [pc, #100]	@ (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b32:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a13      	ldr	r2, [pc, #76]	@ (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_UART_MspInit+0xb8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b70:	2307      	movs	r3, #7
 8001b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b76:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <HAL_UART_MspInit+0xbc>)
 8001b7e:	f000 fb77 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b82:	bf00      	nop
 8001b84:	37a8      	adds	r7, #168	@ 0xa8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004800 	.word	0x40004800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020c00 	.word	0x40020c00

08001b98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0aa      	sub	sp, #168	@ 0xa8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 fd87 	bl	800a6cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bc6:	d159      	bne.n	8001c7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001bc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fb71 	bl	80032c0 <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001be4:	f7ff fefc 	bl	80019e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	4a25      	ldr	r2, [pc, #148]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf4:	4b23      	ldr	r3, [pc, #140]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c24:	4619      	mov	r1, r3
 8001c26:	4818      	ldr	r0, [pc, #96]	@ (8001c88 <HAL_PCD_MspInit+0xf0>)
 8001c28:	f000 fb22 	bl	8002270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001c44:	4619      	mov	r1, r3
 8001c46:	4810      	ldr	r0, [pc, #64]	@ (8001c88 <HAL_PCD_MspInit+0xf0>)
 8001c48:	f000 fb12 	bl	8002270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	4a0c      	ldr	r2, [pc, #48]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c56:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c68:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <HAL_PCD_MspInit+0xec>)
 8001c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	37a8      	adds	r7, #168	@ 0xa8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <NMI_Handler+0x4>

08001c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce2:	f000 f8b1 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f008 fcf2 	bl	800a704 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20040000 	.word	0x20040000
 8001d4c:	00000800 	.word	0x00000800
 8001d50:	20021460 	.word	0x20021460
 8001d54:	200216a8 	.word	0x200216a8

08001d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <SystemInit+0x20>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <SystemInit+0x20>)
 8001d64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	@ (8001dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	@ (8001dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da6:	f7ff ffd7 	bl	8001d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f008 fcb1 	bl	800a710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7ff fb77 	bl	80014a0 <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001db4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	20000cf0 	.word	0x20000cf0
  ldr r2, =_sidata
 8001dc0:	0803ade0 	.word	0x0803ade0
  ldr r2, =_sbss
 8001dc4:	20000cf0 	.word	0x20000cf0
  ldr r4, =_ebss
 8001dc8:	200216a4 	.word	0x200216a4

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>

08001dce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f000 f92e 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f805 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dde:	f7ff fe05 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f93b 	bl	8002082 <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e24:	f000 f911 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	@ (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000008 	.word	0x20000008
 8001e44:	20000004 	.word	0x20000004

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20021464 	.word	0x20021464

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20021464 	.word	0x20021464

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <__NVIC_SetPriorityGrouping>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x40>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00
 8001f14:	05fa0000 	.word	0x05fa0000

08001f18 <__NVIC_GetPriorityGrouping>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_SetPriority>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	@ (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	@ (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	@ (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff47 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205c:	f7ff ff5c 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff8e 	bl	8001f88 <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffb0 	bl	8001ff0 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e054      	b.n	8002158 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7f5b      	ldrb	r3, [r3, #29]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fcb8 	bl	8001a34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	791b      	ldrb	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a22      	ldr	r2, [pc, #136]	@ (8002160 <HAL_CRC_Init+0xc4>)
 80020d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0218 	bic.w	r2, r2, #24
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	e00c      	b.n	8002106 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	461a      	mov	r2, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f834 	bl	8002164 <HAL_CRCEx_Polynomial_Set>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e028      	b.n	8002158 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	795b      	ldrb	r3, [r3, #5]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002116:	611a      	str	r2, [r3, #16]
 8002118:	e004      	b.n	8002124 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6912      	ldr	r2, [r2, #16]
 8002122:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	04c11db7 	.word	0x04c11db7

08002164 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002174:	231f      	movs	r3, #31
 8002176:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002178:	bf00      	nop
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	613a      	str	r2, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d009      	beq.n	8002198 <HAL_CRCEx_Polynomial_Set+0x34>
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f0      	beq.n	800217a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b18      	cmp	r3, #24
 800219c:	d846      	bhi.n	800222c <HAL_CRCEx_Polynomial_Set+0xc8>
 800219e:	a201      	add	r2, pc, #4	@ (adr r2, 80021a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	08002233 	.word	0x08002233
 80021a8:	0800222d 	.word	0x0800222d
 80021ac:	0800222d 	.word	0x0800222d
 80021b0:	0800222d 	.word	0x0800222d
 80021b4:	0800222d 	.word	0x0800222d
 80021b8:	0800222d 	.word	0x0800222d
 80021bc:	0800222d 	.word	0x0800222d
 80021c0:	0800222d 	.word	0x0800222d
 80021c4:	08002221 	.word	0x08002221
 80021c8:	0800222d 	.word	0x0800222d
 80021cc:	0800222d 	.word	0x0800222d
 80021d0:	0800222d 	.word	0x0800222d
 80021d4:	0800222d 	.word	0x0800222d
 80021d8:	0800222d 	.word	0x0800222d
 80021dc:	0800222d 	.word	0x0800222d
 80021e0:	0800222d 	.word	0x0800222d
 80021e4:	08002215 	.word	0x08002215
 80021e8:	0800222d 	.word	0x0800222d
 80021ec:	0800222d 	.word	0x0800222d
 80021f0:	0800222d 	.word	0x0800222d
 80021f4:	0800222d 	.word	0x0800222d
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	0800222d 	.word	0x0800222d
 8002200:	0800222d 	.word	0x0800222d
 8002204:	08002209 	.word	0x08002209
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b06      	cmp	r3, #6
 800220c:	d913      	bls.n	8002236 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002212:	e010      	b.n	8002236 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b07      	cmp	r3, #7
 8002218:	d90f      	bls.n	800223a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800221e:	e00c      	b.n	800223a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	d90b      	bls.n	800223e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800222a:	e008      	b.n	800223e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	75fb      	strb	r3, [r7, #23]
      break;
 8002230:	e006      	b.n	8002240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002232:	bf00      	nop
 8002234:	e004      	b.n	8002240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002236:	bf00      	nop
 8002238:	e002      	b.n	8002240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800223e:	bf00      	nop
  }
  if (status == HAL_OK)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10d      	bne.n	8002262 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 0118 	bic.w	r1, r3, #24
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e169      	b.n	8002564 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 8158 	bne.w	800255e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_GPIO_Init+0x56>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d017      	beq.n	8002364 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d123      	bne.n	80023b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80b2 	beq.w	800255e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	4b60      	ldr	r3, [pc, #384]	@ (800257c <HAL_GPIO_Init+0x30c>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	4a5f      	ldr	r2, [pc, #380]	@ (800257c <HAL_GPIO_Init+0x30c>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002404:	6453      	str	r3, [r2, #68]	@ 0x44
 8002406:	4b5d      	ldr	r3, [pc, #372]	@ (800257c <HAL_GPIO_Init+0x30c>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002412:	4a5b      	ldr	r2, [pc, #364]	@ (8002580 <HAL_GPIO_Init+0x310>)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a52      	ldr	r2, [pc, #328]	@ (8002584 <HAL_GPIO_Init+0x314>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d02b      	beq.n	8002496 <HAL_GPIO_Init+0x226>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a51      	ldr	r2, [pc, #324]	@ (8002588 <HAL_GPIO_Init+0x318>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d025      	beq.n	8002492 <HAL_GPIO_Init+0x222>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a50      	ldr	r2, [pc, #320]	@ (800258c <HAL_GPIO_Init+0x31c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01f      	beq.n	800248e <HAL_GPIO_Init+0x21e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4f      	ldr	r2, [pc, #316]	@ (8002590 <HAL_GPIO_Init+0x320>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x21a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4e      	ldr	r2, [pc, #312]	@ (8002594 <HAL_GPIO_Init+0x324>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x216>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <HAL_GPIO_Init+0x328>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x212>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4c      	ldr	r2, [pc, #304]	@ (800259c <HAL_GPIO_Init+0x32c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x20e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4b      	ldr	r2, [pc, #300]	@ (80025a0 <HAL_GPIO_Init+0x330>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x20a>
 8002476:	2307      	movs	r3, #7
 8002478:	e00e      	b.n	8002498 <HAL_GPIO_Init+0x228>
 800247a:	2308      	movs	r3, #8
 800247c:	e00c      	b.n	8002498 <HAL_GPIO_Init+0x228>
 800247e:	2306      	movs	r3, #6
 8002480:	e00a      	b.n	8002498 <HAL_GPIO_Init+0x228>
 8002482:	2305      	movs	r3, #5
 8002484:	e008      	b.n	8002498 <HAL_GPIO_Init+0x228>
 8002486:	2304      	movs	r3, #4
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x228>
 800248a:	2303      	movs	r3, #3
 800248c:	e004      	b.n	8002498 <HAL_GPIO_Init+0x228>
 800248e:	2302      	movs	r3, #2
 8002490:	e002      	b.n	8002498 <HAL_GPIO_Init+0x228>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x228>
 8002496:	2300      	movs	r3, #0
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f002 0203 	and.w	r2, r2, #3
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024a8:	4935      	ldr	r1, [pc, #212]	@ (8002580 <HAL_GPIO_Init+0x310>)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024b6:	4b3b      	ldr	r3, [pc, #236]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024da:	4a32      	ldr	r2, [pc, #200]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e0:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002504:	4a27      	ldr	r2, [pc, #156]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800250a:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002534:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002558:	4a12      	ldr	r2, [pc, #72]	@ (80025a4 <HAL_GPIO_Init+0x334>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3301      	adds	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	f67f ae92 	bls.w	8002290 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3724      	adds	r7, #36	@ 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40013800 	.word	0x40013800
 8002584:	40020000 	.word	0x40020000
 8002588:	40020400 	.word	0x40020400
 800258c:	40020800 	.word	0x40020800
 8002590:	40020c00 	.word	0x40020c00
 8002594:	40021000 	.word	0x40021000
 8002598:	40021400 	.word	0x40021400
 800259c:	40021800 	.word	0x40021800
 80025a0:	40021c00 	.word	0x40021c00
 80025a4:	40013c00 	.word	0x40013c00

080025a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
 80025b4:	4613      	mov	r3, r2
 80025b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b8:	787b      	ldrb	r3, [r7, #1]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025c4:	e003      	b.n	80025ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	041a      	lsls	r2, r3, #16
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	619a      	str	r2, [r3, #24]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025dc:	b08f      	sub	sp, #60	@ 0x3c
 80025de:	af0a      	add	r7, sp, #40	@ 0x28
 80025e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e116      	b.n	800281a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fac6 	bl	8001b98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2203      	movs	r2, #3
 8002610:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 f956 	bl	80048dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	687e      	ldr	r6, [r7, #4]
 8002638:	466d      	mov	r5, sp
 800263a:	f106 0410 	add.w	r4, r6, #16
 800263e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002646:	e894 0003 	ldmia.w	r4, {r0, r1}
 800264a:	e885 0003 	stmia.w	r5, {r0, r1}
 800264e:	1d33      	adds	r3, r6, #4
 8002650:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002652:	6838      	ldr	r0, [r7, #0]
 8002654:	f002 f8ba 	bl	80047cc <USB_CoreInit>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0d7      	b.n	800281a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f002 f944 	bl	80048fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
 800267a:	e04a      	b.n	8002712 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	333d      	adds	r3, #61	@ 0x3d
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	333c      	adds	r3, #60	@ 0x3c
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	b298      	uxth	r0, r3
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3344      	adds	r3, #68	@ 0x44
 80026b8:	4602      	mov	r2, r0
 80026ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	3340      	adds	r3, #64	@ 0x40
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3348      	adds	r3, #72	@ 0x48
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334c      	adds	r3, #76	@ 0x4c
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3354      	adds	r3, #84	@ 0x54
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	3301      	adds	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d3af      	bcc.n	800267c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e044      	b.n	80027ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	3301      	adds	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d3b5      	bcc.n	8002722 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	687e      	ldr	r6, [r7, #4]
 80027be:	466d      	mov	r5, sp
 80027c0:	f106 0410 	add.w	r4, r6, #16
 80027c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027d4:	1d33      	adds	r3, r6, #4
 80027d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d8:	6838      	ldr	r0, [r7, #0]
 80027da:	f002 f8dd 	bl	8004998 <USB_DevInit>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e014      	b.n	800281a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	2b01      	cmp	r3, #1
 8002806:	d102      	bne.n	800280e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f80b 	bl	8002824 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f002 faab 	bl	8004d6e <USB_DevDisconnect>

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002824 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_PCDEx_ActivateLPM+0x44>)
 8002854:	4313      	orrs	r3, r2
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	10000003 	.word	0x10000003

0800286c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002870:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287a:	6013      	str	r3, [r2, #0]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40007000 	.word	0x40007000

0800288c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x98>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	4a22      	ldr	r2, [pc, #136]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x98>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_PWREx_EnableOverDrive+0x98>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80028ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ba:	f7ff fad9 	bl	8001e70 <HAL_GetTick>
 80028be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028c0:	e009      	b.n	80028d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028c2:	f7ff fad5 	bl	8001e70 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028d0:	d901      	bls.n	80028d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e022      	b.n	800291c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028d6:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e2:	d1ee      	bne.n	80028c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f0:	f7ff fabe 	bl	8001e70 <HAL_GetTick>
 80028f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028f6:	e009      	b.n	800290c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028f8:	f7ff faba 	bl	8001e70 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002906:	d901      	bls.n	800290c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e007      	b.n	800291c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800290c:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_PWREx_EnableOverDrive+0x9c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002918:	d1ee      	bne.n	80028f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000

0800292c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e291      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 8087 	beq.w	8002a5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002950:	4b96      	ldr	r3, [pc, #600]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b04      	cmp	r3, #4
 800295a:	d00c      	beq.n	8002976 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295c:	4b93      	ldr	r3, [pc, #588]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 030c 	and.w	r3, r3, #12
 8002964:	2b08      	cmp	r3, #8
 8002966:	d112      	bne.n	800298e <HAL_RCC_OscConfig+0x62>
 8002968:	4b90      	ldr	r3, [pc, #576]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002974:	d10b      	bne.n	800298e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002976:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d06c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x130>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d168      	bne.n	8002a5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e26b      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002996:	d106      	bne.n	80029a6 <HAL_RCC_OscConfig+0x7a>
 8002998:	4b84      	ldr	r3, [pc, #528]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a83      	ldr	r2, [pc, #524]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e02e      	b.n	8002a04 <HAL_RCC_OscConfig+0xd8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x9c>
 80029ae:	4b7f      	ldr	r3, [pc, #508]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b7c      	ldr	r3, [pc, #496]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7b      	ldr	r2, [pc, #492]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e01d      	b.n	8002a04 <HAL_RCC_OscConfig+0xd8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d0:	d10c      	bne.n	80029ec <HAL_RCC_OscConfig+0xc0>
 80029d2:	4b76      	ldr	r3, [pc, #472]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b73      	ldr	r3, [pc, #460]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a72      	ldr	r2, [pc, #456]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e8:	6013      	str	r3, [r2, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xd8>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b6c      	ldr	r3, [pc, #432]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a6b      	ldr	r2, [pc, #428]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fa30 	bl	8001e70 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff fa2c 	bl	8001e70 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e21f      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe8>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7ff fa1c 	bl	8001e70 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7ff fa18 	bl	8001e70 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e20b      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	4b57      	ldr	r3, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x110>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d069      	beq.n	8002b3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a6a:	4b50      	ldr	r3, [pc, #320]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a76:	4b4d      	ldr	r3, [pc, #308]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d11c      	bne.n	8002abc <HAL_RCC_OscConfig+0x190>
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d116      	bne.n	8002abc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8e:	4b47      	ldr	r3, [pc, #284]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x17a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e1df      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa6:	4b41      	ldr	r3, [pc, #260]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	493d      	ldr	r1, [pc, #244]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aba:	e040      	b.n	8002b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d023      	beq.n	8002b0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac4:	4b39      	ldr	r3, [pc, #228]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a38      	ldr	r2, [pc, #224]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002aca:	f043 0301 	orr.w	r3, r3, #1
 8002ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad0:	f7ff f9ce 	bl	8001e70 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad8:	f7ff f9ca 	bl	8001e70 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e1bd      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	4b30      	ldr	r3, [pc, #192]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	4b2d      	ldr	r3, [pc, #180]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4929      	ldr	r1, [pc, #164]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	600b      	str	r3, [r1, #0]
 8002b0a:	e018      	b.n	8002b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0c:	4b27      	ldr	r3, [pc, #156]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a26      	ldr	r2, [pc, #152]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff f9aa 	bl	8001e70 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b20:	f7ff f9a6 	bl	8001e70 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e199      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d038      	beq.n	8002bbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d019      	beq.n	8002b86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b52:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b56:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5e:	f7ff f987 	bl	8001e70 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b66:	f7ff f983 	bl	8001e70 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e176      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b78:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x23a>
 8002b84:	e01a      	b.n	8002bbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <HAL_RCC_OscConfig+0x280>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7ff f96d 	bl	8001e70 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f969 	bl	8001e70 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d903      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e15c      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
 8002bac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb0:	4b91      	ldr	r3, [pc, #580]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a4 	beq.w	8002d12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b8b      	ldr	r3, [pc, #556]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b88      	ldr	r3, [pc, #544]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	4a87      	ldr	r2, [pc, #540]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be2:	4b85      	ldr	r3, [pc, #532]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf2:	4b82      	ldr	r3, [pc, #520]	@ (8002dfc <HAL_RCC_OscConfig+0x4d0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8002dfc <HAL_RCC_OscConfig+0x4d0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7e      	ldr	r2, [pc, #504]	@ (8002dfc <HAL_RCC_OscConfig+0x4d0>)
 8002c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0a:	f7ff f931 	bl	8001e70 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c12:	f7ff f92d 	bl	8001e70 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b64      	cmp	r3, #100	@ 0x64
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e120      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	4b75      	ldr	r3, [pc, #468]	@ (8002dfc <HAL_RCC_OscConfig+0x4d0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x31a>
 8002c38:	4b6f      	ldr	r3, [pc, #444]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	4a6e      	ldr	r2, [pc, #440]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c44:	e02d      	b.n	8002ca2 <HAL_RCC_OscConfig+0x376>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x33c>
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	4a69      	ldr	r2, [pc, #420]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5a:	4b67      	ldr	r3, [pc, #412]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	4a66      	ldr	r2, [pc, #408]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c60:	f023 0304 	bic.w	r3, r3, #4
 8002c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c66:	e01c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x376>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d10c      	bne.n	8002c8a <HAL_RCC_OscConfig+0x35e>
 8002c70:	4b61      	ldr	r3, [pc, #388]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c74:	4a60      	ldr	r2, [pc, #384]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7c:	4b5e      	ldr	r3, [pc, #376]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c80:	4a5d      	ldr	r2, [pc, #372]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c88:	e00b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x376>
 8002c8a:	4b5b      	ldr	r3, [pc, #364]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c96:	4b58      	ldr	r3, [pc, #352]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9a:	4a57      	ldr	r2, [pc, #348]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d015      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002caa:	f7ff f8e1 	bl	8001e70 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb2:	f7ff f8dd 	bl	8001e70 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0ce      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0ee      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x386>
 8002cd4:	e014      	b.n	8002d00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7ff f8cb 	bl	8001e70 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7ff f8c7 	bl	8001e70 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0b8      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf4:	4b40      	ldr	r3, [pc, #256]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ee      	bne.n	8002cde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d105      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d06:	4b3c      	ldr	r3, [pc, #240]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80a4 	beq.w	8002e64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d1c:	4b36      	ldr	r3, [pc, #216]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d06b      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d149      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d30:	4b31      	ldr	r3, [pc, #196]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a30      	ldr	r2, [pc, #192]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f898 	bl	8001e70 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7ff f894 	bl	8001e70 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e087      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	4b28      	ldr	r3, [pc, #160]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	041b      	lsls	r3, r3, #16
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	061b      	lsls	r3, r3, #24
 8002d86:	4313      	orrs	r3, r2
 8002d88:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d90:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7ff f868 	bl	8001e70 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da4:	f7ff f864 	bl	8001e70 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e057      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x478>
 8002dc2:	e04f      	b.n	8002e64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f84e 	bl	8001e70 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7ff f84a 	bl	8001e70 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e03d      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dea:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_RCC_OscConfig+0x4cc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4ac>
 8002df6:	e035      	b.n	8002e64 <HAL_RCC_OscConfig+0x538>
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <HAL_RCC_OscConfig+0x544>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d028      	beq.n	8002e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d121      	bne.n	8002e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d11a      	bne.n	8002e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e30:	4013      	ands	r3, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d111      	bne.n	8002e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0d0      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d910      	bls.n	8002ebc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b67      	ldr	r3, [pc, #412]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4965      	ldr	r1, [pc, #404]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b63      	ldr	r3, [pc, #396]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d001      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b8      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d020      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed4:	4b59      	ldr	r3, [pc, #356]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eec:	4b53      	ldr	r3, [pc, #332]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a52      	ldr	r2, [pc, #328]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ef6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef8:	4b50      	ldr	r3, [pc, #320]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	494d      	ldr	r1, [pc, #308]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d040      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1e:	4b47      	ldr	r3, [pc, #284]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d115      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07f      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f36:	4b41      	ldr	r3, [pc, #260]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e073      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	4b3d      	ldr	r3, [pc, #244]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06b      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f56:	4b39      	ldr	r3, [pc, #228]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 0203 	bic.w	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4936      	ldr	r1, [pc, #216]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fe ff82 	bl	8001e70 <HAL_GetTick>
 8002f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	e00a      	b.n	8002f86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f70:	f7fe ff7e 	bl	8001e70 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e053      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 020c 	and.w	r2, r3, #12
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d1eb      	bne.n	8002f70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f98:	4b27      	ldr	r3, [pc, #156]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d210      	bcs.n	8002fc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b24      	ldr	r3, [pc, #144]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f023 020f 	bic.w	r2, r3, #15
 8002fae:	4922      	ldr	r1, [pc, #136]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb6:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e032      	b.n	800302e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd4:	4b19      	ldr	r3, [pc, #100]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4916      	ldr	r1, [pc, #88]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d009      	beq.n	8003006 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ff2:	4b12      	ldr	r3, [pc, #72]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	490e      	ldr	r1, [pc, #56]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003006:	f000 f821 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800300a:	4602      	mov	r2, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_RCC_ClockConfig+0x1c8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	490a      	ldr	r1, [pc, #40]	@ (8003040 <HAL_RCC_ClockConfig+0x1cc>)
 8003018:	5ccb      	ldrb	r3, [r1, r3]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a09      	ldr	r2, [pc, #36]	@ (8003044 <HAL_RCC_ClockConfig+0x1d0>)
 8003020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003022:	4b09      	ldr	r3, [pc, #36]	@ (8003048 <HAL_RCC_ClockConfig+0x1d4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fede 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800
 8003040:	0800cb38 	.word	0x0800cb38
 8003044:	20000000 	.word	0x20000000
 8003048:	20000004 	.word	0x20000004

0800304c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003050:	b094      	sub	sp, #80	@ 0x50
 8003052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	647b      	str	r3, [r7, #68]	@ 0x44
 8003058:	2300      	movs	r3, #0
 800305a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800305c:	2300      	movs	r3, #0
 800305e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003064:	4b79      	ldr	r3, [pc, #484]	@ (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b08      	cmp	r3, #8
 800306e:	d00d      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x40>
 8003070:	2b08      	cmp	r3, #8
 8003072:	f200 80e1 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x34>
 800307a:	2b04      	cmp	r3, #4
 800307c:	d003      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x3a>
 800307e:	e0db      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b73      	ldr	r3, [pc, #460]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003084:	e0db      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b73      	ldr	r3, [pc, #460]	@ (8003254 <HAL_RCC_GetSysClockFreq+0x208>)
 8003088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800308a:	e0d8      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308c:	4b6f      	ldr	r3, [pc, #444]	@ (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003094:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003096:	4b6d      	ldr	r3, [pc, #436]	@ (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b6a      	ldr	r3, [pc, #424]	@ (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	2200      	movs	r2, #0
 80030aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030b6:	2300      	movs	r3, #0
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4621      	mov	r1, r4
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	6139      	str	r1, [r7, #16]
 80030dc:	4629      	mov	r1, r5
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f0:	4659      	mov	r1, fp
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4651      	mov	r1, sl
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4651      	mov	r1, sl
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4651      	mov	r1, sl
 8003100:	ebb2 0801 	subs.w	r8, r2, r1
 8003104:	4659      	mov	r1, fp
 8003106:	eb63 0901 	sbc.w	r9, r3, r1
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800311a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800311e:	4690      	mov	r8, r2
 8003120:	4699      	mov	r9, r3
 8003122:	4623      	mov	r3, r4
 8003124:	eb18 0303 	adds.w	r3, r8, r3
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	462b      	mov	r3, r5
 800312c:	eb49 0303 	adc.w	r3, r9, r3
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800313e:	4629      	mov	r1, r5
 8003140:	024b      	lsls	r3, r1, #9
 8003142:	4621      	mov	r1, r4
 8003144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003148:	4621      	mov	r1, r4
 800314a:	024a      	lsls	r2, r1, #9
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003152:	2200      	movs	r2, #0
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800315c:	f7fd fdac 	bl	8000cb8 <__aeabi_uldivmod>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4613      	mov	r3, r2
 8003166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003168:	e058      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800316a:	4b38      	ldr	r3, [pc, #224]	@ (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	099b      	lsrs	r3, r3, #6
 8003170:	2200      	movs	r2, #0
 8003172:	4618      	mov	r0, r3
 8003174:	4611      	mov	r1, r2
 8003176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800317a:	623b      	str	r3, [r7, #32]
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	f04f 0000 	mov.w	r0, #0
 800318c:	f04f 0100 	mov.w	r1, #0
 8003190:	0159      	lsls	r1, r3, #5
 8003192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003196:	0150      	lsls	r0, r2, #5
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4641      	mov	r1, r8
 800319e:	ebb2 0a01 	subs.w	sl, r2, r1
 80031a2:	4649      	mov	r1, r9
 80031a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031bc:	ebb2 040a 	subs.w	r4, r2, sl
 80031c0:	eb63 050b 	sbc.w	r5, r3, fp
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	00eb      	lsls	r3, r5, #3
 80031ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031d2:	00e2      	lsls	r2, r4, #3
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4643      	mov	r3, r8
 80031da:	18e3      	adds	r3, r4, r3
 80031dc:	603b      	str	r3, [r7, #0]
 80031de:	464b      	mov	r3, r9
 80031e0:	eb45 0303 	adc.w	r3, r5, r3
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031f2:	4629      	mov	r1, r5
 80031f4:	028b      	lsls	r3, r1, #10
 80031f6:	4621      	mov	r1, r4
 80031f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031fc:	4621      	mov	r1, r4
 80031fe:	028a      	lsls	r2, r1, #10
 8003200:	4610      	mov	r0, r2
 8003202:	4619      	mov	r1, r3
 8003204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003206:	2200      	movs	r2, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	61fa      	str	r2, [r7, #28]
 800320c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003210:	f7fd fd52 	bl	8000cb8 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4613      	mov	r3, r2
 800321a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_RCC_GetSysClockFreq+0x200>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800322c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800322e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003236:	e002      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b05      	ldr	r3, [pc, #20]	@ (8003250 <HAL_RCC_GetSysClockFreq+0x204>)
 800323a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800323c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800323e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003240:	4618      	mov	r0, r3
 8003242:	3750      	adds	r7, #80	@ 0x50
 8003244:	46bd      	mov	sp, r7
 8003246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	00f42400 	.word	0x00f42400
 8003254:	007a1200 	.word	0x007a1200

08003258 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800325c:	4b03      	ldr	r3, [pc, #12]	@ (800326c <HAL_RCC_GetHCLKFreq+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000

08003270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003274:	f7ff fff0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	0a9b      	lsrs	r3, r3, #10
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4903      	ldr	r1, [pc, #12]	@ (8003294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	0800cb48 	.word	0x0800cb48

08003298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800329c:	f7ff ffdc 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	0b5b      	lsrs	r3, r3, #13
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	4903      	ldr	r1, [pc, #12]	@ (80032bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40023800 	.word	0x40023800
 80032bc:	0800cb48 	.word	0x0800cb48

080032c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d012      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032e4:	4b65      	ldr	r3, [pc, #404]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a64      	ldr	r2, [pc, #400]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032ea:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80032ee:	6093      	str	r3, [r2, #8]
 80032f0:	4b62      	ldr	r3, [pc, #392]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	4960      	ldr	r1, [pc, #384]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d017      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003316:	4b59      	ldr	r3, [pc, #356]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003324:	4955      	ldr	r1, [pc, #340]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003334:	d101      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d017      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003352:	4b4a      	ldr	r3, [pc, #296]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003358:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	4946      	ldr	r1, [pc, #280]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003370:	d101      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003372:	2301      	movs	r3, #1
 8003374:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800337e:	2301      	movs	r3, #1
 8003380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 808b 	beq.w	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	4b3a      	ldr	r3, [pc, #232]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	4a39      	ldr	r2, [pc, #228]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	@ 0x40
 800339c:	4b37      	ldr	r3, [pc, #220]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033a8:	4b35      	ldr	r3, [pc, #212]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a34      	ldr	r2, [pc, #208]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b4:	f7fe fd5c 	bl	8001e70 <HAL_GetTick>
 80033b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033bc:	f7fe fd58 	bl	8001e70 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	@ 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e2bc      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033da:	4b28      	ldr	r3, [pc, #160]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d035      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d02e      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033f8:	4b20      	ldr	r3, [pc, #128]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003400:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003402:	4b1e      	ldr	r3, [pc, #120]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003406:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800340c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800340e:	4b1b      	ldr	r3, [pc, #108]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	4a1a      	ldr	r2, [pc, #104]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003418:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800341a:	4a18      	ldr	r2, [pc, #96]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003420:	4b16      	ldr	r3, [pc, #88]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	d114      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fd20 	bl	8001e70 <HAL_GetTick>
 8003430:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003432:	e00a      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003434:	f7fe fd1c 	bl	8001e70 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e27e      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	4b0c      	ldr	r3, [pc, #48]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0ee      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003462:	d111      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003472:	400b      	ands	r3, r1
 8003474:	4901      	ldr	r1, [pc, #4]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
 800347a:	e00b      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	0ffffcff 	.word	0x0ffffcff
 8003488:	4ba4      	ldr	r3, [pc, #656]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4aa3      	ldr	r2, [pc, #652]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800348e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	4ba1      	ldr	r3, [pc, #644]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003496:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a0:	499e      	ldr	r1, [pc, #632]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034b2:	4b9a      	ldr	r3, [pc, #616]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034b8:	4a98      	ldr	r2, [pc, #608]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80034c2:	4b96      	ldr	r3, [pc, #600]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	4993      	ldr	r1, [pc, #588]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e0:	4b8e      	ldr	r3, [pc, #568]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	498b      	ldr	r1, [pc, #556]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003502:	4b86      	ldr	r3, [pc, #536]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003510:	4982      	ldr	r1, [pc, #520]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003524:	4b7d      	ldr	r3, [pc, #500]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003532:	497a      	ldr	r1, [pc, #488]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003546:	4b75      	ldr	r3, [pc, #468]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f023 0203 	bic.w	r2, r3, #3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	4971      	ldr	r1, [pc, #452]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003568:	4b6c      	ldr	r3, [pc, #432]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	f023 020c 	bic.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	4969      	ldr	r1, [pc, #420]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800358a:	4b64      	ldr	r3, [pc, #400]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003590:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003598:	4960      	ldr	r1, [pc, #384]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035ac:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	4958      	ldr	r1, [pc, #352]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ce:	4b53      	ldr	r3, [pc, #332]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	494f      	ldr	r1, [pc, #316]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035f0:	4b4a      	ldr	r3, [pc, #296]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fe:	4947      	ldr	r1, [pc, #284]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003612:	4b42      	ldr	r3, [pc, #264]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003618:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	493e      	ldr	r1, [pc, #248]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003634:	4b39      	ldr	r3, [pc, #228]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003642:	4936      	ldr	r1, [pc, #216]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d011      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003656:	4b31      	ldr	r3, [pc, #196]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003664:	492d      	ldr	r1, [pc, #180]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003674:	d101      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003686:	4b25      	ldr	r3, [pc, #148]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003694:	4921      	ldr	r1, [pc, #132]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036a8:	4b1c      	ldr	r3, [pc, #112]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ae:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036b6:	4919      	ldr	r1, [pc, #100]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036ca:	4b14      	ldr	r3, [pc, #80]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036d8:	4910      	ldr	r1, [pc, #64]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d006      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 809d 	beq.w	800382e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036f4:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a08      	ldr	r2, [pc, #32]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003700:	f7fe fbb6 	bl	8001e70 <HAL_GetTick>
 8003704:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003706:	e00b      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003708:	f7fe fbb2 	bl	8001e70 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	@ 0x64
 8003714:	d904      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e116      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003720:	4b8b      	ldr	r3, [pc, #556]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1ed      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d017      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d113      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003740:	4b83      	ldr	r3, [pc, #524]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003742:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003746:	0e1b      	lsrs	r3, r3, #24
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	019a      	lsls	r2, r3, #6
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	061b      	lsls	r3, r3, #24
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	071b      	lsls	r3, r3, #28
 8003760:	497b      	ldr	r1, [pc, #492]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003786:	2b00      	cmp	r3, #0
 8003788:	d024      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800378e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003792:	d11f      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003794:	4b6e      	ldr	r3, [pc, #440]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800379a:	0f1b      	lsrs	r3, r3, #28
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	019a      	lsls	r2, r3, #6
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	431a      	orrs	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	071b      	lsls	r3, r3, #28
 80037b4:	4966      	ldr	r1, [pc, #408]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037bc:	4b64      	ldr	r3, [pc, #400]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c2:	f023 021f 	bic.w	r2, r3, #31
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	4960      	ldr	r1, [pc, #384]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	019a      	lsls	r2, r3, #6
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	061b      	lsls	r3, r3, #24
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	071b      	lsls	r3, r3, #28
 80037f4:	4956      	ldr	r1, [pc, #344]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037fc:	4b54      	ldr	r3, [pc, #336]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a53      	ldr	r2, [pc, #332]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003802:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003808:	f7fe fb32 	bl	8001e70 <HAL_GetTick>
 800380c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003810:	f7fe fb2e 	bl	8001e70 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b64      	cmp	r3, #100	@ 0x64
 800381c:	d901      	bls.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e092      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003822:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 8088 	bne.w	8003946 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003836:	4b46      	ldr	r3, [pc, #280]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a45      	ldr	r2, [pc, #276]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800383c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003842:	f7fe fb15 	bl	8001e70 <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003848:	e008      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800384a:	f7fe fb11 	bl	8001e70 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b64      	cmp	r3, #100	@ 0x64
 8003856:	d901      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e075      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800385c:	4b3c      	ldr	r3, [pc, #240]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003868:	d0ef      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003886:	2b00      	cmp	r3, #0
 8003888:	d024      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	2b00      	cmp	r3, #0
 8003890:	d120      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003892:	4b2f      	ldr	r3, [pc, #188]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	019a      	lsls	r2, r3, #6
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	041b      	lsls	r3, r3, #16
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	4927      	ldr	r1, [pc, #156]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038ba:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	4920      	ldr	r1, [pc, #128]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d018      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038e8:	d113      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ea:	4b19      	ldr	r3, [pc, #100]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	019a      	lsls	r2, r3, #6
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	041b      	lsls	r3, r3, #16
 8003904:	431a      	orrs	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	4911      	ldr	r1, [pc, #68]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a0e      	ldr	r2, [pc, #56]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800391c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391e:	f7fe faa7 	bl	8001e70 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003926:	f7fe faa3 	bl	8001e70 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b64      	cmp	r3, #100	@ 0x64
 8003932:	d901      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e007      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003938:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003944:	d1ef      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3720      	adds	r7, #32
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800

08003954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e049      	b.n	80039fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe f87a 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 f900 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIM_ConfigClockSource+0x1c>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e0b4      	b.n	8003b8a <HAL_TIM_ConfigClockSource+0x186>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	4b56      	ldr	r3, [pc, #344]	@ (8003b94 <HAL_TIM_ConfigClockSource+0x190>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68ba      	ldr	r2, [r7, #8]
 8003a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a58:	d03e      	beq.n	8003ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8003a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5e:	f200 8087 	bhi.w	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a66:	f000 8086 	beq.w	8003b76 <HAL_TIM_ConfigClockSource+0x172>
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a6e:	d87f      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b70      	cmp	r3, #112	@ 0x70
 8003a72:	d01a      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xa6>
 8003a74:	2b70      	cmp	r3, #112	@ 0x70
 8003a76:	d87b      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b60      	cmp	r3, #96	@ 0x60
 8003a7a:	d050      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x11a>
 8003a7c:	2b60      	cmp	r3, #96	@ 0x60
 8003a7e:	d877      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b50      	cmp	r3, #80	@ 0x50
 8003a82:	d03c      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0xfa>
 8003a84:	2b50      	cmp	r3, #80	@ 0x50
 8003a86:	d873      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a88:	2b40      	cmp	r3, #64	@ 0x40
 8003a8a:	d058      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x13a>
 8003a8c:	2b40      	cmp	r3, #64	@ 0x40
 8003a8e:	d86f      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a90:	2b30      	cmp	r3, #48	@ 0x30
 8003a92:	d064      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003a94:	2b30      	cmp	r3, #48	@ 0x30
 8003a96:	d86b      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d060      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003a9c:	2b20      	cmp	r3, #32
 8003a9e:	d867      	bhi.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05c      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d05a      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x15a>
 8003aa8:	e062      	b.n	8003b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003aba:	f000 f987 	bl	8003dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	609a      	str	r2, [r3, #8]
      break;
 8003ad6:	e04f      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ae8:	f000 f970 	bl	8003dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003afa:	609a      	str	r2, [r3, #8]
      break;
 8003afc:	e03c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 f8e4 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2150      	movs	r1, #80	@ 0x50
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f93d 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e02c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f000 f903 	bl	8003d36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2160      	movs	r1, #96	@ 0x60
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f92d 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003b3c:	e01c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f000 f8c4 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2140      	movs	r1, #64	@ 0x40
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f91d 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e00c      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f000 f914 	bl	8003d96 <TIM_ITRx_SetConfig>
      break;
 8003b6e:	e003      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e000      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	fffeff88 	.word	0xfffeff88

08003b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a40      	ldr	r2, [pc, #256]	@ (8003cac <TIM_Base_SetConfig+0x114>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	@ (8003cb0 <TIM_Base_SetConfig+0x118>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb4 <TIM_Base_SetConfig+0x11c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3b      	ldr	r2, [pc, #236]	@ (8003cb8 <TIM_Base_SetConfig+0x120>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8003cbc <TIM_Base_SetConfig+0x124>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a2f      	ldr	r2, [pc, #188]	@ (8003cac <TIM_Base_SetConfig+0x114>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf8:	d027      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb0 <TIM_Base_SetConfig+0x118>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d023      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <TIM_Base_SetConfig+0x11c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <TIM_Base_SetConfig+0x120>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a29      	ldr	r2, [pc, #164]	@ (8003cbc <TIM_Base_SetConfig+0x124>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a28      	ldr	r2, [pc, #160]	@ (8003cc0 <TIM_Base_SetConfig+0x128>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a27      	ldr	r2, [pc, #156]	@ (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a26      	ldr	r2, [pc, #152]	@ (8003cc8 <TIM_Base_SetConfig+0x130>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a25      	ldr	r2, [pc, #148]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a24      	ldr	r2, [pc, #144]	@ (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a23      	ldr	r2, [pc, #140]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a0a      	ldr	r2, [pc, #40]	@ (8003cac <TIM_Base_SetConfig+0x114>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0xf8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003cbc <TIM_Base_SetConfig+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40010000 	.word	0x40010000
 8003cb0:	40000400 	.word	0x40000400
 8003cb4:	40000800 	.word	0x40000800
 8003cb8:	40000c00 	.word	0x40000c00
 8003cbc:	40010400 	.word	0x40010400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800
 8003ccc:	40001800 	.word	0x40001800
 8003cd0:	40001c00 	.word	0x40001c00
 8003cd4:	40002000 	.word	0x40002000

08003cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0201 	bic.w	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 030a 	bic.w	r3, r3, #10
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f023 0210 	bic.w	r2, r3, #16
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	031b      	lsls	r3, r3, #12
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f043 0307 	orr.w	r3, r3, #7
 8003db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e06d      	b.n	8003f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a30      	ldr	r2, [pc, #192]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2f      	ldr	r2, [pc, #188]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a20      	ldr	r2, [pc, #128]	@ (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e96:	d01d      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a15      	ldr	r2, [pc, #84]	@ (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a15      	ldr	r2, [pc, #84]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10c      	bne.n	8003eee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40010400 	.word	0x40010400
 8003f14:	40000400 	.word	0x40000400
 8003f18:	40000800 	.word	0x40000800
 8003f1c:	40000c00 	.word	0x40000c00
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40001800 	.word	0x40001800

08003f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e040      	b.n	8003fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d106      	bne.n	8003f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7fd fdc4 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	@ 0x24
 8003f54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f82c 	bl	8003fc4 <UART_SetConfig>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e022      	b.n	8003fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa84 	bl	800448c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fb0b 	bl	80045d0 <UART_CheckIdleState>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4ba6      	ldr	r3, [pc, #664]	@ (8004288 <UART_SetConfig+0x2c4>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a94      	ldr	r2, [pc, #592]	@ (800428c <UART_SetConfig+0x2c8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d120      	bne.n	8004082 <UART_SetConfig+0xbe>
 8004040:	4b93      	ldr	r3, [pc, #588]	@ (8004290 <UART_SetConfig+0x2cc>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b03      	cmp	r3, #3
 800404c:	d816      	bhi.n	800407c <UART_SetConfig+0xb8>
 800404e:	a201      	add	r2, pc, #4	@ (adr r2, 8004054 <UART_SetConfig+0x90>)
 8004050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004054:	08004065 	.word	0x08004065
 8004058:	08004071 	.word	0x08004071
 800405c:	0800406b 	.word	0x0800406b
 8004060:	08004077 	.word	0x08004077
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e150      	b.n	800430c <UART_SetConfig+0x348>
 800406a:	2302      	movs	r3, #2
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e14d      	b.n	800430c <UART_SetConfig+0x348>
 8004070:	2304      	movs	r3, #4
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e14a      	b.n	800430c <UART_SetConfig+0x348>
 8004076:	2308      	movs	r3, #8
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e147      	b.n	800430c <UART_SetConfig+0x348>
 800407c:	2310      	movs	r3, #16
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e144      	b.n	800430c <UART_SetConfig+0x348>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a83      	ldr	r2, [pc, #524]	@ (8004294 <UART_SetConfig+0x2d0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d132      	bne.n	80040f2 <UART_SetConfig+0x12e>
 800408c:	4b80      	ldr	r3, [pc, #512]	@ (8004290 <UART_SetConfig+0x2cc>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d828      	bhi.n	80040ec <UART_SetConfig+0x128>
 800409a:	a201      	add	r2, pc, #4	@ (adr r2, 80040a0 <UART_SetConfig+0xdc>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080040ed 	.word	0x080040ed
 80040a8:	080040ed 	.word	0x080040ed
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040ed 	.word	0x080040ed
 80040b8:	080040ed 	.word	0x080040ed
 80040bc:	080040ed 	.word	0x080040ed
 80040c0:	080040db 	.word	0x080040db
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040ed 	.word	0x080040ed
 80040d0:	080040e7 	.word	0x080040e7
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e118      	b.n	800430c <UART_SetConfig+0x348>
 80040da:	2302      	movs	r3, #2
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e115      	b.n	800430c <UART_SetConfig+0x348>
 80040e0:	2304      	movs	r3, #4
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e112      	b.n	800430c <UART_SetConfig+0x348>
 80040e6:	2308      	movs	r3, #8
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e10f      	b.n	800430c <UART_SetConfig+0x348>
 80040ec:	2310      	movs	r3, #16
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e10c      	b.n	800430c <UART_SetConfig+0x348>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a68      	ldr	r2, [pc, #416]	@ (8004298 <UART_SetConfig+0x2d4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d120      	bne.n	800413e <UART_SetConfig+0x17a>
 80040fc:	4b64      	ldr	r3, [pc, #400]	@ (8004290 <UART_SetConfig+0x2cc>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004106:	2b30      	cmp	r3, #48	@ 0x30
 8004108:	d013      	beq.n	8004132 <UART_SetConfig+0x16e>
 800410a:	2b30      	cmp	r3, #48	@ 0x30
 800410c:	d814      	bhi.n	8004138 <UART_SetConfig+0x174>
 800410e:	2b20      	cmp	r3, #32
 8004110:	d009      	beq.n	8004126 <UART_SetConfig+0x162>
 8004112:	2b20      	cmp	r3, #32
 8004114:	d810      	bhi.n	8004138 <UART_SetConfig+0x174>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <UART_SetConfig+0x15c>
 800411a:	2b10      	cmp	r3, #16
 800411c:	d006      	beq.n	800412c <UART_SetConfig+0x168>
 800411e:	e00b      	b.n	8004138 <UART_SetConfig+0x174>
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e0f2      	b.n	800430c <UART_SetConfig+0x348>
 8004126:	2302      	movs	r3, #2
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e0ef      	b.n	800430c <UART_SetConfig+0x348>
 800412c:	2304      	movs	r3, #4
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e0ec      	b.n	800430c <UART_SetConfig+0x348>
 8004132:	2308      	movs	r3, #8
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e0e9      	b.n	800430c <UART_SetConfig+0x348>
 8004138:	2310      	movs	r3, #16
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e0e6      	b.n	800430c <UART_SetConfig+0x348>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a56      	ldr	r2, [pc, #344]	@ (800429c <UART_SetConfig+0x2d8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d120      	bne.n	800418a <UART_SetConfig+0x1c6>
 8004148:	4b51      	ldr	r3, [pc, #324]	@ (8004290 <UART_SetConfig+0x2cc>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004152:	2bc0      	cmp	r3, #192	@ 0xc0
 8004154:	d013      	beq.n	800417e <UART_SetConfig+0x1ba>
 8004156:	2bc0      	cmp	r3, #192	@ 0xc0
 8004158:	d814      	bhi.n	8004184 <UART_SetConfig+0x1c0>
 800415a:	2b80      	cmp	r3, #128	@ 0x80
 800415c:	d009      	beq.n	8004172 <UART_SetConfig+0x1ae>
 800415e:	2b80      	cmp	r3, #128	@ 0x80
 8004160:	d810      	bhi.n	8004184 <UART_SetConfig+0x1c0>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <UART_SetConfig+0x1a8>
 8004166:	2b40      	cmp	r3, #64	@ 0x40
 8004168:	d006      	beq.n	8004178 <UART_SetConfig+0x1b4>
 800416a:	e00b      	b.n	8004184 <UART_SetConfig+0x1c0>
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
 8004170:	e0cc      	b.n	800430c <UART_SetConfig+0x348>
 8004172:	2302      	movs	r3, #2
 8004174:	77fb      	strb	r3, [r7, #31]
 8004176:	e0c9      	b.n	800430c <UART_SetConfig+0x348>
 8004178:	2304      	movs	r3, #4
 800417a:	77fb      	strb	r3, [r7, #31]
 800417c:	e0c6      	b.n	800430c <UART_SetConfig+0x348>
 800417e:	2308      	movs	r3, #8
 8004180:	77fb      	strb	r3, [r7, #31]
 8004182:	e0c3      	b.n	800430c <UART_SetConfig+0x348>
 8004184:	2310      	movs	r3, #16
 8004186:	77fb      	strb	r3, [r7, #31]
 8004188:	e0c0      	b.n	800430c <UART_SetConfig+0x348>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a44      	ldr	r2, [pc, #272]	@ (80042a0 <UART_SetConfig+0x2dc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d125      	bne.n	80041e0 <UART_SetConfig+0x21c>
 8004194:	4b3e      	ldr	r3, [pc, #248]	@ (8004290 <UART_SetConfig+0x2cc>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a2:	d017      	beq.n	80041d4 <UART_SetConfig+0x210>
 80041a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a8:	d817      	bhi.n	80041da <UART_SetConfig+0x216>
 80041aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ae:	d00b      	beq.n	80041c8 <UART_SetConfig+0x204>
 80041b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041b4:	d811      	bhi.n	80041da <UART_SetConfig+0x216>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <UART_SetConfig+0x1fe>
 80041ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041be:	d006      	beq.n	80041ce <UART_SetConfig+0x20a>
 80041c0:	e00b      	b.n	80041da <UART_SetConfig+0x216>
 80041c2:	2300      	movs	r3, #0
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e0a1      	b.n	800430c <UART_SetConfig+0x348>
 80041c8:	2302      	movs	r3, #2
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e09e      	b.n	800430c <UART_SetConfig+0x348>
 80041ce:	2304      	movs	r3, #4
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e09b      	b.n	800430c <UART_SetConfig+0x348>
 80041d4:	2308      	movs	r3, #8
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e098      	b.n	800430c <UART_SetConfig+0x348>
 80041da:	2310      	movs	r3, #16
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e095      	b.n	800430c <UART_SetConfig+0x348>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2f      	ldr	r2, [pc, #188]	@ (80042a4 <UART_SetConfig+0x2e0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d125      	bne.n	8004236 <UART_SetConfig+0x272>
 80041ea:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <UART_SetConfig+0x2cc>)
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041f8:	d017      	beq.n	800422a <UART_SetConfig+0x266>
 80041fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041fe:	d817      	bhi.n	8004230 <UART_SetConfig+0x26c>
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004204:	d00b      	beq.n	800421e <UART_SetConfig+0x25a>
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800420a:	d811      	bhi.n	8004230 <UART_SetConfig+0x26c>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <UART_SetConfig+0x254>
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004214:	d006      	beq.n	8004224 <UART_SetConfig+0x260>
 8004216:	e00b      	b.n	8004230 <UART_SetConfig+0x26c>
 8004218:	2301      	movs	r3, #1
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e076      	b.n	800430c <UART_SetConfig+0x348>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e073      	b.n	800430c <UART_SetConfig+0x348>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e070      	b.n	800430c <UART_SetConfig+0x348>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e06d      	b.n	800430c <UART_SetConfig+0x348>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e06a      	b.n	800430c <UART_SetConfig+0x348>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	@ (80042a8 <UART_SetConfig+0x2e4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d138      	bne.n	80042b2 <UART_SetConfig+0x2ee>
 8004240:	4b13      	ldr	r3, [pc, #76]	@ (8004290 <UART_SetConfig+0x2cc>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004246:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800424a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800424e:	d017      	beq.n	8004280 <UART_SetConfig+0x2bc>
 8004250:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004254:	d82a      	bhi.n	80042ac <UART_SetConfig+0x2e8>
 8004256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800425a:	d00b      	beq.n	8004274 <UART_SetConfig+0x2b0>
 800425c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004260:	d824      	bhi.n	80042ac <UART_SetConfig+0x2e8>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <UART_SetConfig+0x2aa>
 8004266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800426a:	d006      	beq.n	800427a <UART_SetConfig+0x2b6>
 800426c:	e01e      	b.n	80042ac <UART_SetConfig+0x2e8>
 800426e:	2300      	movs	r3, #0
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e04b      	b.n	800430c <UART_SetConfig+0x348>
 8004274:	2302      	movs	r3, #2
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e048      	b.n	800430c <UART_SetConfig+0x348>
 800427a:	2304      	movs	r3, #4
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e045      	b.n	800430c <UART_SetConfig+0x348>
 8004280:	2308      	movs	r3, #8
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e042      	b.n	800430c <UART_SetConfig+0x348>
 8004286:	bf00      	nop
 8004288:	efff69f3 	.word	0xefff69f3
 800428c:	40011000 	.word	0x40011000
 8004290:	40023800 	.word	0x40023800
 8004294:	40004400 	.word	0x40004400
 8004298:	40004800 	.word	0x40004800
 800429c:	40004c00 	.word	0x40004c00
 80042a0:	40005000 	.word	0x40005000
 80042a4:	40011400 	.word	0x40011400
 80042a8:	40007800 	.word	0x40007800
 80042ac:	2310      	movs	r3, #16
 80042ae:	77fb      	strb	r3, [r7, #31]
 80042b0:	e02c      	b.n	800430c <UART_SetConfig+0x348>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a72      	ldr	r2, [pc, #456]	@ (8004480 <UART_SetConfig+0x4bc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d125      	bne.n	8004308 <UART_SetConfig+0x344>
 80042bc:	4b71      	ldr	r3, [pc, #452]	@ (8004484 <UART_SetConfig+0x4c0>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042c6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042ca:	d017      	beq.n	80042fc <UART_SetConfig+0x338>
 80042cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80042d0:	d817      	bhi.n	8004302 <UART_SetConfig+0x33e>
 80042d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d6:	d00b      	beq.n	80042f0 <UART_SetConfig+0x32c>
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042dc:	d811      	bhi.n	8004302 <UART_SetConfig+0x33e>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <UART_SetConfig+0x326>
 80042e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042e6:	d006      	beq.n	80042f6 <UART_SetConfig+0x332>
 80042e8:	e00b      	b.n	8004302 <UART_SetConfig+0x33e>
 80042ea:	2300      	movs	r3, #0
 80042ec:	77fb      	strb	r3, [r7, #31]
 80042ee:	e00d      	b.n	800430c <UART_SetConfig+0x348>
 80042f0:	2302      	movs	r3, #2
 80042f2:	77fb      	strb	r3, [r7, #31]
 80042f4:	e00a      	b.n	800430c <UART_SetConfig+0x348>
 80042f6:	2304      	movs	r3, #4
 80042f8:	77fb      	strb	r3, [r7, #31]
 80042fa:	e007      	b.n	800430c <UART_SetConfig+0x348>
 80042fc:	2308      	movs	r3, #8
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e004      	b.n	800430c <UART_SetConfig+0x348>
 8004302:	2310      	movs	r3, #16
 8004304:	77fb      	strb	r3, [r7, #31]
 8004306:	e001      	b.n	800430c <UART_SetConfig+0x348>
 8004308:	2310      	movs	r3, #16
 800430a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004314:	d15b      	bne.n	80043ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004316:	7ffb      	ldrb	r3, [r7, #31]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d828      	bhi.n	800436e <UART_SetConfig+0x3aa>
 800431c:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <UART_SetConfig+0x360>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004349 	.word	0x08004349
 8004328:	08004351 	.word	0x08004351
 800432c:	08004359 	.word	0x08004359
 8004330:	0800436f 	.word	0x0800436f
 8004334:	0800435f 	.word	0x0800435f
 8004338:	0800436f 	.word	0x0800436f
 800433c:	0800436f 	.word	0x0800436f
 8004340:	0800436f 	.word	0x0800436f
 8004344:	08004367 	.word	0x08004367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7fe ff92 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 800434c:	61b8      	str	r0, [r7, #24]
        break;
 800434e:	e013      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004350:	f7fe ffa2 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 8004354:	61b8      	str	r0, [r7, #24]
        break;
 8004356:	e00f      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004358:	4b4b      	ldr	r3, [pc, #300]	@ (8004488 <UART_SetConfig+0x4c4>)
 800435a:	61bb      	str	r3, [r7, #24]
        break;
 800435c:	e00c      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800435e:	f7fe fe75 	bl	800304c <HAL_RCC_GetSysClockFreq>
 8004362:	61b8      	str	r0, [r7, #24]
        break;
 8004364:	e008      	b.n	8004378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800436a:	61bb      	str	r3, [r7, #24]
        break;
 800436c:	e004      	b.n	8004378 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	77bb      	strb	r3, [r7, #30]
        break;
 8004376:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d074      	beq.n	8004468 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	005a      	lsls	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	085b      	lsrs	r3, r3, #1
 8004388:	441a      	add	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d916      	bls.n	80043c8 <UART_SetConfig+0x404>
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a0:	d212      	bcs.n	80043c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	f023 030f 	bic.w	r3, r3, #15
 80043aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	89fb      	ldrh	r3, [r7, #14]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	89fa      	ldrh	r2, [r7, #14]
 80043c4:	60da      	str	r2, [r3, #12]
 80043c6:	e04f      	b.n	8004468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	77bb      	strb	r3, [r7, #30]
 80043cc:	e04c      	b.n	8004468 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ce:	7ffb      	ldrb	r3, [r7, #31]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d828      	bhi.n	8004426 <UART_SetConfig+0x462>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <UART_SetConfig+0x418>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004409 	.word	0x08004409
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004427 	.word	0x08004427
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004427 	.word	0x08004427
 80043f4:	08004427 	.word	0x08004427
 80043f8:	08004427 	.word	0x08004427
 80043fc:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fe ff36 	bl	8003270 <HAL_RCC_GetPCLK1Freq>
 8004404:	61b8      	str	r0, [r7, #24]
        break;
 8004406:	e013      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7fe ff46 	bl	8003298 <HAL_RCC_GetPCLK2Freq>
 800440c:	61b8      	str	r0, [r7, #24]
        break;
 800440e:	e00f      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <UART_SetConfig+0x4c4>)
 8004412:	61bb      	str	r3, [r7, #24]
        break;
 8004414:	e00c      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7fe fe19 	bl	800304c <HAL_RCC_GetSysClockFreq>
 800441a:	61b8      	str	r0, [r7, #24]
        break;
 800441c:	e008      	b.n	8004430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004422:	61bb      	str	r3, [r7, #24]
        break;
 8004424:	e004      	b.n	8004430 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	77bb      	strb	r3, [r7, #30]
        break;
 800442e:	bf00      	nop
    }

    if (pclk != 0U)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	085a      	lsrs	r2, r3, #1
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	441a      	add	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d909      	bls.n	8004464 <UART_SetConfig+0x4a0>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004456:	d205      	bcs.n	8004464 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	e001      	b.n	8004468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004474:	7fbb      	ldrb	r3, [r7, #30]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40007c00 	.word	0x40007c00
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400

0800448c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	f003 0310 	and.w	r3, r3, #16
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01a      	beq.n	80045a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800458a:	d10a      	bne.n	80045a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	605a      	str	r2, [r3, #4]
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045e0:	f7fd fc46 	bl	8001e70 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d10e      	bne.n	8004612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f81b 	bl	800463e <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e011      	b.n	8004636 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b09c      	sub	sp, #112	@ 0x70
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464e:	e0a7      	b.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004656:	f000 80a3 	beq.w	80047a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465a:	f7fd fc09 	bl	8001e70 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004666:	429a      	cmp	r2, r3
 8004668:	d302      	bcc.n	8004670 <UART_WaitOnFlagUntilTimeout+0x32>
 800466a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800466c:	2b00      	cmp	r3, #0
 800466e:	d13f      	bne.n	80046f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800467e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004680:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004684:	667b      	str	r3, [r7, #100]	@ 0x64
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800468e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004690:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004694:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800469c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e6      	bne.n	8004670 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3308      	adds	r3, #8
 80046c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80046c2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80046d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e5      	bne.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e068      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d050      	beq.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800470c:	d148      	bne.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004716:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800472c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
 8004738:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800473c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e6      	bne.n	8004718 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3308      	adds	r3, #8
 8004750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	613b      	str	r3, [r7, #16]
   return(result);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3308      	adds	r3, #8
 8004768:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800476a:	623a      	str	r2, [r7, #32]
 800476c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	69f9      	ldr	r1, [r7, #28]
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	61bb      	str	r3, [r7, #24]
   return(result);
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e5      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2220      	movs	r2, #32
 8004782:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e010      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	69da      	ldr	r2, [r3, #28]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	f43f af48 	beq.w	8004650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3770      	adds	r7, #112	@ 0x70
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047cc:	b084      	sub	sp, #16
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	f107 001c 	add.w	r0, r7, #28
 80047da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d126      	bne.n	8004832 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	4b38      	ldr	r3, [pc, #224]	@ (80048d8 <USB_CoreInit+0x10c>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f043 0210 	orr.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fad0 	bl	8004dcc <USB_CoreReset>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e03a      	b.n	80048a8 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2b03      	cmp	r3, #3
 8004836:	d126      	bne.n	8004886 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	4b23      	ldr	r3, [pc, #140]	@ (80048d8 <USB_CoreInit+0x10c>)
 800484a:	4013      	ands	r3, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f023 0210 	bic.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8004868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 faa6 	bl	8004dcc <USB_CoreReset>
 8004880:	4603      	mov	r3, r0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e010      	b.n	80048a8 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa9a 	bl	8004dcc <USB_CoreReset>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80048a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d10b      	bne.n	80048c6 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f043 0206 	orr.w	r2, r3, #6
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f043 0220 	orr.w	r2, r3, #32
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048d2:	b004      	add	sp, #16
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	ffbdffbf 	.word	0xffbdffbf

080048dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 0201 	bic.w	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	460b      	mov	r3, r1
 8004908:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d115      	bne.n	800494c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800492c:	2001      	movs	r0, #1
 800492e:	f7fd faab 	bl	8001e88 <HAL_Delay>
      ms++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa39 	bl	8004db0 <USB_GetMode>
 800493e:	4603      	mov	r3, r0
 8004940:	2b01      	cmp	r3, #1
 8004942:	d01e      	beq.n	8004982 <USB_SetCurrentMode+0x84>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b31      	cmp	r3, #49	@ 0x31
 8004948:	d9f0      	bls.n	800492c <USB_SetCurrentMode+0x2e>
 800494a:	e01a      	b.n	8004982 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d115      	bne.n	800497e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800495e:	2001      	movs	r0, #1
 8004960:	f7fd fa92 	bl	8001e88 <HAL_Delay>
      ms++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa20 	bl	8004db0 <USB_GetMode>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <USB_SetCurrentMode+0x84>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b31      	cmp	r3, #49	@ 0x31
 800497a:	d9f0      	bls.n	800495e <USB_SetCurrentMode+0x60>
 800497c:	e001      	b.n	8004982 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e005      	b.n	800498e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b32      	cmp	r3, #50	@ 0x32
 8004986:	d101      	bne.n	800498c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004998:	b084      	sub	sp, #16
 800499a:	b580      	push	{r7, lr}
 800499c:	b086      	sub	sp, #24
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	e009      	b.n	80049cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3340      	adds	r3, #64	@ 0x40
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	2200      	movs	r2, #0
 80049c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	3301      	adds	r3, #1
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b0e      	cmp	r3, #14
 80049d0:	d9f2      	bls.n	80049b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11c      	bne.n	8004a12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e6:	f043 0302 	orr.w	r3, r3, #2
 80049ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e005      	b.n	8004a1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a24:	461a      	mov	r2, r3
 8004a26:	2300      	movs	r3, #0
 8004a28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a30:	4619      	mov	r1, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a38:	461a      	mov	r2, r3
 8004a3a:	680b      	ldr	r3, [r1, #0]
 8004a3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10c      	bne.n	8004a5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d104      	bne.n	8004a54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f975 	bl	8004d3c <USB_SetDevSpeed>
 8004a52:	e018      	b.n	8004a86 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a54:	2101      	movs	r1, #1
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f970 	bl	8004d3c <USB_SetDevSpeed>
 8004a5c:	e013      	b.n	8004a86 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d10c      	bne.n	8004a7e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f965 	bl	8004d3c <USB_SetDevSpeed>
 8004a72:	e008      	b.n	8004a86 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a74:	2101      	movs	r1, #1
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f960 	bl	8004d3c <USB_SetDevSpeed>
 8004a7c:	e003      	b.n	8004a86 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a7e:	2103      	movs	r1, #3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f95b 	bl	8004d3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a86:	2110      	movs	r1, #16
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8f3 	bl	8004c74 <USB_FlushTxFifo>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f91f 	bl	8004cdc <USB_FlushRxFifo>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aba:	461a      	mov	r2, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	e043      	b.n	8004b5a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae8:	d118      	bne.n	8004b1c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afc:	461a      	mov	r2, r3
 8004afe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e013      	b.n	8004b2e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b12:	461a      	mov	r2, r3
 8004b14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e008      	b.n	8004b2e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	3301      	adds	r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d3b7      	bcc.n	8004ad2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	e043      	b.n	8004bf0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b7e:	d118      	bne.n	8004bb2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b92:	461a      	mov	r2, r3
 8004b94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e013      	b.n	8004bc4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba8:	461a      	mov	r2, r3
 8004baa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	e008      	b.n	8004bc4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be2:	461a      	mov	r2, r3
 8004be4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3301      	adds	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d3b7      	bcc.n	8004b68 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f043 0210 	orr.w	r2, r3, #16
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <USB_DevInit+0x2d4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f043 0208 	orr.w	r2, r3, #8
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <USB_DevInit+0x2d8>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3718      	adds	r7, #24
 8004c62:	46bd      	mov	sp, r7
 8004c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c68:	b004      	add	sp, #16
 8004c6a:	4770      	bx	lr
 8004c6c:	803c3800 	.word	0x803c3800
 8004c70:	40000004 	.word	0x40000004

08004c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a13      	ldr	r2, [pc, #76]	@ (8004cd8 <USB_FlushTxFifo+0x64>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d901      	bls.n	8004c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e01b      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	daf2      	bge.n	8004c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	019b      	lsls	r3, r3, #6
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	@ (8004cd8 <USB_FlushTxFifo+0x64>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d901      	bls.n	8004cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d0f0      	beq.n	8004cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	00030d40 	.word	0x00030d40

08004cdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a11      	ldr	r2, [pc, #68]	@ (8004d38 <USB_FlushRxFifo+0x5c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e018      	b.n	8004d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	daf2      	bge.n	8004ce8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2210      	movs	r2, #16
 8004d0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a08      	ldr	r2, [pc, #32]	@ (8004d38 <USB_FlushRxFifo+0x5c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e006      	b.n	8004d2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b10      	cmp	r3, #16
 8004d28:	d0f0      	beq.n	8004d0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	00030d40 	.word	0x00030d40

08004d3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d88:	f023 0303 	bic.w	r3, r3, #3
 8004d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a13      	ldr	r2, [pc, #76]	@ (8004e30 <USB_CoreReset+0x64>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e01b      	b.n	8004e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	daf2      	bge.n	8004dd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4a09      	ldr	r2, [pc, #36]	@ (8004e30 <USB_CoreReset+0x64>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e006      	b.n	8004e22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d0f0      	beq.n	8004e02 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	00030d40 	.word	0x00030d40

08004e34 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08c      	sub	sp, #48	@ 0x30
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t n_fft = S->FFTLen;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *scratch_buffer = S->pScratch;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6899      	ldr	r1, [r3, #8]
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	68b8      	ldr	r0, [r7, #8]
 8004e5c:	f001 f8f2 	bl	8006044 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	18d0      	adds	r0, r2, r3
 8004e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2100      	movs	r1, #0
 8004e72:	f005 fc2b 	bl	800a6cc <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	f000 fc24 	bl	80056cc <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	ed93 7a00 	vldr	s14, [r3]
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	edd3 7a00 	vldr	s15, [r3]
 8004e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e94:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	ed93 7a00 	vldr	s14, [r3]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	edd3 7a00 	vldr	s15, [r3]
 8004ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eac:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f103 0008 	add.w	r0, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1d19      	adds	r1, r3, #4
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f001 f864 	bl	8005f94 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d12c      	bne.n	8004f3c <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee6:	e023      	b.n	8004f30 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8004ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	440b      	add	r3, r1
 8004efa:	617a      	str	r2, [r7, #20]
 8004efc:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8004efe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0a:	db09      	blt.n	8004f20 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8004f0c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004f10:	f007 faf0 	bl	800c4f4 <sqrtf>
 8004f14:	eef0 7a40 	vmov.f32	s15, s0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8004f1e:	e004      	b.n	8004f2a <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004f28:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8004f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3301      	adds	r3, #1
 8004f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d3d5      	bcc.n	8004ee8 <SpectrogramColumn+0xb4>
    }
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	3730      	adds	r7, #48	@ 0x30
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	617b      	str	r3, [r7, #20]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff67 	bl	8004e34 <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6979      	ldr	r1, [r7, #20]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f804 	bl	8004f7c <MelFilterbank>
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b08d      	sub	sp, #52	@ 0x34
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t n_mels = M->NumMels;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa4:	e034      	b.n	8005010 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	4413      	add	r3, r2
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4413      	add	r3, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8004fc4:	8a7b      	ldrh	r3, [r7, #18]
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	e015      	b.n	8004ff6 <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	ed93 7a00 	vldr	s14, [r3]
 8004fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd8:	1d1a      	adds	r2, r3, #4
 8004fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fdc:	edd3 7a00 	vldr	s15, [r3]
 8004fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	8a3b      	ldrh	r3, [r7, #16]
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d9e5      	bls.n	8004fca <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4413      	add	r3, r2
 8005006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005008:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	3301      	adds	r3, #1
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	429a      	cmp	r2, r3
 8005016:	d3c6      	bcc.n	8004fa6 <MelFilterbank+0x2a>
  }
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	3734      	adds	r7, #52	@ 0x34
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <network_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_1_activations_map, 1, params)) {
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	4841      	ldr	r0, [pc, #260]	@ (800513c <network_1_configure_activations+0x114>)
 8005038:	f001 fbe6 	bl	8006808 <ai_platform_get_activations_map>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d071      	beq.n	8005126 <network_1_configure_activations+0xfe>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 8005042:	4b3e      	ldr	r3, [pc, #248]	@ (800513c <network_1_configure_activations+0x114>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a3e      	ldr	r2, [pc, #248]	@ (8005140 <network_1_configure_activations+0x118>)
 8005048:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 800504a:	4b3c      	ldr	r3, [pc, #240]	@ (800513c <network_1_configure_activations+0x114>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a3c      	ldr	r2, [pc, #240]	@ (8005140 <network_1_configure_activations+0x118>)
 8005050:	60d3      	str	r3, [r2, #12]
    
    conv2d_conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 3840);
 8005052:	4b3a      	ldr	r3, [pc, #232]	@ (800513c <network_1_configure_activations+0x114>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 800505a:	4a3a      	ldr	r2, [pc, #232]	@ (8005144 <network_1_configure_activations+0x11c>)
 800505c:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 3840);
 800505e:	4b37      	ldr	r3, [pc, #220]	@ (800513c <network_1_configure_activations+0x114>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 8005066:	4a37      	ldr	r2, [pc, #220]	@ (8005144 <network_1_configure_activations+0x11c>)
 8005068:	60d3      	str	r3, [r2, #12]
    
    conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 3840);
 800506a:	4b34      	ldr	r3, [pc, #208]	@ (800513c <network_1_configure_activations+0x114>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 8005072:	4a35      	ldr	r2, [pc, #212]	@ (8005148 <network_1_configure_activations+0x120>)
 8005074:	6093      	str	r3, [r2, #8]
    conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 3840);
 8005076:	4b31      	ldr	r3, [pc, #196]	@ (800513c <network_1_configure_activations+0x114>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 800507e:	4a32      	ldr	r2, [pc, #200]	@ (8005148 <network_1_configure_activations+0x120>)
 8005080:	60d3      	str	r3, [r2, #12]
    
    max_pooling2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 3840);
 8005082:	4b2e      	ldr	r3, [pc, #184]	@ (800513c <network_1_configure_activations+0x114>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 800508a:	4a30      	ldr	r2, [pc, #192]	@ (800514c <network_1_configure_activations+0x124>)
 800508c:	6093      	str	r3, [r2, #8]
    max_pooling2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 3840);
 800508e:	4b2b      	ldr	r3, [pc, #172]	@ (800513c <network_1_configure_activations+0x114>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f503 6370 	add.w	r3, r3, #3840	@ 0xf00
 8005096:	4a2d      	ldr	r2, [pc, #180]	@ (800514c <network_1_configure_activations+0x124>)
 8005098:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_output_array.data = AI_PTR(g_network_1_activations_map[0] + 17280);
 800509a:	4b28      	ldr	r3, [pc, #160]	@ (800513c <network_1_configure_activations+0x114>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f503 4387 	add.w	r3, r3, #17280	@ 0x4380
 80050a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005150 <network_1_configure_activations+0x128>)
 80050a4:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 17280);
 80050a6:	4b25      	ldr	r3, [pc, #148]	@ (800513c <network_1_configure_activations+0x114>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f503 4387 	add.w	r3, r3, #17280	@ 0x4380
 80050ae:	4a28      	ldr	r2, [pc, #160]	@ (8005150 <network_1_configure_activations+0x128>)
 80050b0:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80050b2:	4b22      	ldr	r3, [pc, #136]	@ (800513c <network_1_configure_activations+0x114>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a27      	ldr	r2, [pc, #156]	@ (8005154 <network_1_configure_activations+0x12c>)
 80050b8:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 80050ba:	4b20      	ldr	r3, [pc, #128]	@ (800513c <network_1_configure_activations+0x114>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a25      	ldr	r2, [pc, #148]	@ (8005154 <network_1_configure_activations+0x12c>)
 80050c0:	60d3      	str	r3, [r2, #12]
    
    max_pooling2d_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 9984);
 80050c2:	4b1e      	ldr	r3, [pc, #120]	@ (800513c <network_1_configure_activations+0x114>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80050ca:	4a23      	ldr	r2, [pc, #140]	@ (8005158 <network_1_configure_activations+0x130>)
 80050cc:	6093      	str	r3, [r2, #8]
    max_pooling2d_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 9984);
 80050ce:	4b1b      	ldr	r3, [pc, #108]	@ (800513c <network_1_configure_activations+0x114>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80050d6:	4a20      	ldr	r2, [pc, #128]	@ (8005158 <network_1_configure_activations+0x130>)
 80050d8:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80050da:	4b18      	ldr	r3, [pc, #96]	@ (800513c <network_1_configure_activations+0x114>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1f      	ldr	r2, [pc, #124]	@ (800515c <network_1_configure_activations+0x134>)
 80050e0:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 80050e2:	4b16      	ldr	r3, [pc, #88]	@ (800513c <network_1_configure_activations+0x114>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1d      	ldr	r2, [pc, #116]	@ (800515c <network_1_configure_activations+0x134>)
 80050e8:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 100);
 80050ea:	4b14      	ldr	r3, [pc, #80]	@ (800513c <network_1_configure_activations+0x114>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3364      	adds	r3, #100	@ 0x64
 80050f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <network_1_configure_activations+0x138>)
 80050f2:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 100);
 80050f4:	4b11      	ldr	r3, [pc, #68]	@ (800513c <network_1_configure_activations+0x114>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3364      	adds	r3, #100	@ 0x64
 80050fa:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <network_1_configure_activations+0x138>)
 80050fc:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_1_activations_map[0] + 0);
 80050fe:	4b0f      	ldr	r3, [pc, #60]	@ (800513c <network_1_configure_activations+0x114>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <network_1_configure_activations+0x13c>)
 8005104:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 0);
 8005106:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <network_1_configure_activations+0x114>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a16      	ldr	r2, [pc, #88]	@ (8005164 <network_1_configure_activations+0x13c>)
 800510c:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_1_activations_map[0] + 20);
 800510e:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <network_1_configure_activations+0x114>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	4a14      	ldr	r2, [pc, #80]	@ (8005168 <network_1_configure_activations+0x140>)
 8005116:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_1_activations_map[0] + 20);
 8005118:	4b08      	ldr	r3, [pc, #32]	@ (800513c <network_1_configure_activations+0x114>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	4a12      	ldr	r2, [pc, #72]	@ (8005168 <network_1_configure_activations+0x140>)
 8005120:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005122:	2301      	movs	r3, #1
 8005124:	e005      	b.n	8005132 <network_1_configure_activations+0x10a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005126:	2213      	movs	r2, #19
 8005128:	2130      	movs	r1, #48	@ 0x30
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f001 fcea 	bl	8006b04 <ai_platform_network_set_error>
  return false;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20021468 	.word	0x20021468
 8005140:	2000000c 	.word	0x2000000c
 8005144:	2000001c 	.word	0x2000001c
 8005148:	2000002c 	.word	0x2000002c
 800514c:	2000003c 	.word	0x2000003c
 8005150:	2000004c 	.word	0x2000004c
 8005154:	2000005c 	.word	0x2000005c
 8005158:	2000006c 	.word	0x2000006c
 800515c:	2000007c 	.word	0x2000007c
 8005160:	2000008c 	.word	0x2000008c
 8005164:	2000009c 	.word	0x2000009c
 8005168:	200000ac 	.word	0x200000ac

0800516c <network_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_1_weights_map, 1, params)) {
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	2101      	movs	r1, #1
 800517a:	484f      	ldr	r0, [pc, #316]	@ (80052b8 <network_1_configure_weights+0x14c>)
 800517c:	f001 faec 	bl	8006758 <ai_platform_get_weights_map>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 808e 	beq.w	80052a4 <network_1_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    conv2d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8005188:	4b4c      	ldr	r3, [pc, #304]	@ (80052bc <network_1_configure_weights+0x150>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005190:	4a4a      	ldr	r2, [pc, #296]	@ (80052bc <network_1_configure_weights+0x150>)
 8005192:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 0);
 8005194:	4b48      	ldr	r3, [pc, #288]	@ (80052b8 <network_1_configure_weights+0x14c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a48      	ldr	r2, [pc, #288]	@ (80052bc <network_1_configure_weights+0x150>)
 800519a:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 0);
 800519c:	4b46      	ldr	r3, [pc, #280]	@ (80052b8 <network_1_configure_weights+0x14c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a46      	ldr	r2, [pc, #280]	@ (80052bc <network_1_configure_weights+0x150>)
 80051a2:	60d3      	str	r3, [r2, #12]
    
    conv2d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051a4:	4b46      	ldr	r3, [pc, #280]	@ (80052c0 <network_1_configure_weights+0x154>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051ac:	4a44      	ldr	r2, [pc, #272]	@ (80052c0 <network_1_configure_weights+0x154>)
 80051ae:	6013      	str	r3, [r2, #0]
    conv2d_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 576);
 80051b0:	4b41      	ldr	r3, [pc, #260]	@ (80052b8 <network_1_configure_weights+0x14c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80051b8:	4a41      	ldr	r2, [pc, #260]	@ (80052c0 <network_1_configure_weights+0x154>)
 80051ba:	6093      	str	r3, [r2, #8]
    conv2d_conv2d_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 576);
 80051bc:	4b3e      	ldr	r3, [pc, #248]	@ (80052b8 <network_1_configure_weights+0x14c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80051c4:	4a3e      	ldr	r2, [pc, #248]	@ (80052c0 <network_1_configure_weights+0x154>)
 80051c6:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80051c8:	4b3e      	ldr	r3, [pc, #248]	@ (80052c4 <network_1_configure_weights+0x158>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051d0:	4a3c      	ldr	r2, [pc, #240]	@ (80052c4 <network_1_configure_weights+0x158>)
 80051d2:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 640);
 80051d4:	4b38      	ldr	r3, [pc, #224]	@ (80052b8 <network_1_configure_weights+0x14c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80051dc:	4a39      	ldr	r2, [pc, #228]	@ (80052c4 <network_1_configure_weights+0x158>)
 80051de:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 640);
 80051e0:	4b35      	ldr	r3, [pc, #212]	@ (80052b8 <network_1_configure_weights+0x14c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80051e8:	4a36      	ldr	r2, [pc, #216]	@ (80052c4 <network_1_configure_weights+0x158>)
 80051ea:	60d3      	str	r3, [r2, #12]
    
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80051ec:	4b36      	ldr	r3, [pc, #216]	@ (80052c8 <network_1_configure_weights+0x15c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051f4:	4a34      	ldr	r2, [pc, #208]	@ (80052c8 <network_1_configure_weights+0x15c>)
 80051f6:	6013      	str	r3, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 9856);
 80051f8:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <network_1_configure_weights+0x14c>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 8005200:	4a31      	ldr	r2, [pc, #196]	@ (80052c8 <network_1_configure_weights+0x15c>)
 8005202:	6093      	str	r3, [r2, #8]
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 9856);
 8005204:	4b2c      	ldr	r3, [pc, #176]	@ (80052b8 <network_1_configure_weights+0x14c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f503 531a 	add.w	r3, r3, #9856	@ 0x2680
 800520c:	4a2e      	ldr	r2, [pc, #184]	@ (80052c8 <network_1_configure_weights+0x15c>)
 800520e:	60d3      	str	r3, [r2, #12]
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005210:	4b2e      	ldr	r3, [pc, #184]	@ (80052cc <network_1_configure_weights+0x160>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005218:	4a2c      	ldr	r2, [pc, #176]	@ (80052cc <network_1_configure_weights+0x160>)
 800521a:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 9920);
 800521c:	4b26      	ldr	r3, [pc, #152]	@ (80052b8 <network_1_configure_weights+0x14c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 8005224:	4a29      	ldr	r2, [pc, #164]	@ (80052cc <network_1_configure_weights+0x160>)
 8005226:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 9920);
 8005228:	4b23      	ldr	r3, [pc, #140]	@ (80052b8 <network_1_configure_weights+0x14c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f503 531b 	add.w	r3, r3, #9920	@ 0x26c0
 8005230:	4a26      	ldr	r2, [pc, #152]	@ (80052cc <network_1_configure_weights+0x160>)
 8005232:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8005234:	4b26      	ldr	r3, [pc, #152]	@ (80052d0 <network_1_configure_weights+0x164>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800523c:	4a24      	ldr	r2, [pc, #144]	@ (80052d0 <network_1_configure_weights+0x164>)
 800523e:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 67520);
 8005240:	4b1d      	ldr	r3, [pc, #116]	@ (80052b8 <network_1_configure_weights+0x14c>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4b23      	ldr	r3, [pc, #140]	@ (80052d4 <network_1_configure_weights+0x168>)
 8005246:	4413      	add	r3, r2
 8005248:	4a21      	ldr	r2, [pc, #132]	@ (80052d0 <network_1_configure_weights+0x164>)
 800524a:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 67520);
 800524c:	4b1a      	ldr	r3, [pc, #104]	@ (80052b8 <network_1_configure_weights+0x14c>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b20      	ldr	r3, [pc, #128]	@ (80052d4 <network_1_configure_weights+0x168>)
 8005252:	4413      	add	r3, r2
 8005254:	4a1e      	ldr	r2, [pc, #120]	@ (80052d0 <network_1_configure_weights+0x164>)
 8005256:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005258:	4b1f      	ldr	r3, [pc, #124]	@ (80052d8 <network_1_configure_weights+0x16c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005260:	4a1d      	ldr	r2, [pc, #116]	@ (80052d8 <network_1_configure_weights+0x16c>)
 8005262:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_1_weights_map[0] + 67620);
 8005264:	4b14      	ldr	r3, [pc, #80]	@ (80052b8 <network_1_configure_weights+0x14c>)
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b1c      	ldr	r3, [pc, #112]	@ (80052dc <network_1_configure_weights+0x170>)
 800526a:	4413      	add	r3, r2
 800526c:	4a1a      	ldr	r2, [pc, #104]	@ (80052d8 <network_1_configure_weights+0x16c>)
 800526e:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_1_weights_map[0] + 67620);
 8005270:	4b11      	ldr	r3, [pc, #68]	@ (80052b8 <network_1_configure_weights+0x14c>)
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4b19      	ldr	r3, [pc, #100]	@ (80052dc <network_1_configure_weights+0x170>)
 8005276:	4413      	add	r3, r2
 8005278:	4a17      	ldr	r2, [pc, #92]	@ (80052d8 <network_1_configure_weights+0x16c>)
 800527a:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800527c:	4b18      	ldr	r3, [pc, #96]	@ (80052e0 <network_1_configure_weights+0x174>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005284:	4a16      	ldr	r2, [pc, #88]	@ (80052e0 <network_1_configure_weights+0x174>)
 8005286:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_1_weights_map[0] + 68120);
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <network_1_configure_weights+0x14c>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <network_1_configure_weights+0x178>)
 800528e:	4413      	add	r3, r2
 8005290:	4a13      	ldr	r2, [pc, #76]	@ (80052e0 <network_1_configure_weights+0x174>)
 8005292:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_1_weights_map[0] + 68120);
 8005294:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <network_1_configure_weights+0x14c>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <network_1_configure_weights+0x178>)
 800529a:	4413      	add	r3, r2
 800529c:	4a10      	ldr	r2, [pc, #64]	@ (80052e0 <network_1_configure_weights+0x174>)
 800529e:	60d3      	str	r3, [r2, #12]
    
    return true;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e005      	b.n	80052b0 <network_1_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80052a4:	2212      	movs	r2, #18
 80052a6:	2130      	movs	r1, #48	@ 0x30
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f001 fc2b 	bl	8006b04 <ai_platform_network_set_error>
  return false;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3708      	adds	r7, #8
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	2002146c 	.word	0x2002146c
 80052bc:	200000bc 	.word	0x200000bc
 80052c0:	200000cc 	.word	0x200000cc
 80052c4:	200000dc 	.word	0x200000dc
 80052c8:	200000ec 	.word	0x200000ec
 80052cc:	200000fc 	.word	0x200000fc
 80052d0:	2000010c 	.word	0x2000010c
 80052d4:	000107c0 	.word	0x000107c0
 80052d8:	2000011c 	.word	0x2000011c
 80052dc:	00010824 	.word	0x00010824
 80052e0:	2000012c 	.word	0x2000012c
 80052e4:	00010a18 	.word	0x00010a18

080052e8 <ai_network_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_1_get_error(ai_handle network)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 fafb 	bl	80068ec <ai_platform_network_get_error>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <ai_network_1_create>:

AI_API_ENTRY
ai_error ai_network_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800530a:	2300      	movs	r3, #0
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	2305      	movs	r3, #5
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	2301      	movs	r3, #1
 8005314:	4a04      	ldr	r2, [pc, #16]	@ (8005328 <ai_network_1_create+0x28>)
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f001 ff0d 	bl	8007138 <ai_platform_network_create>
 800531e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000a84 	.word	0x20000a84

0800532c <ai_network_1_create_and_init>:

AI_API_ENTRY
ai_error ai_network_1_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b096      	sub	sp, #88	@ 0x58
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_1_create(network, AI_NETWORK_1_DATA_CONFIG);
 8005338:	2100      	movs	r1, #0
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff ffe0 	bl	8005300 <ai_network_1_create>
 8005340:	4603      	mov	r3, r0
 8005342:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (err.type != AI_ERROR_NONE)
 8005344:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <ai_network_1_create_and_init+0x24>
        return err;
 800534c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800534e:	e05d      	b.n	800540c <ai_network_1_create_and_init+0xe0>
    if (ai_network_1_data_params_get(&params) != true) {
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f8dd 	bl	8005514 <ai_network_1_data_params_get>
 800535a:	4603      	mov	r3, r0
 800535c:	f083 0301 	eor.w	r3, r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <ai_network_1_create_and_init+0x4c>
        err = ai_network_1_get_error(*network);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff ffbc 	bl	80052e8 <ai_network_1_get_error>
 8005370:	4603      	mov	r3, r0
 8005372:	64fb      	str	r3, [r7, #76]	@ 0x4c
        return err;
 8005374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005376:	e049      	b.n	800540c <ai_network_1_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_1_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <ai_network_1_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800537e:	2300      	movs	r3, #0
 8005380:	657b      	str	r3, [r7, #84]	@ 0x54
 8005382:	e00e      	b.n	80053a2 <ai_network_1_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005386:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4413      	add	r3, r2
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	330c      	adds	r3, #12
 8005396:	4618      	mov	r0, r3
 8005398:	f001 f9ca 	bl	8006730 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800539c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539e:	3301      	adds	r3, #1
 80053a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80053a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80053a4:	461a      	mov	r2, r3
 80053a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a8:	4293      	cmp	r3, r2
 80053aa:	dbeb      	blt.n	8005384 <ai_network_1_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_1_DATA_WEIGHTS_COUNT)
    if (weights) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <ai_network_1_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053b6:	e00e      	b.n	80053d6 <ai_network_1_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80053b8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80053ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	4413      	add	r3, r2
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	f107 0314 	add.w	r3, r7, #20
 80053c8:	3304      	adds	r3, #4
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 f9b0 	bl	8006730 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80053d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053d2:	3301      	adds	r3, #1
 80053d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053d6:	8b7b      	ldrh	r3, [r7, #26]
 80053d8:	461a      	mov	r2, r3
 80053da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053dc:	4293      	cmp	r3, r2
 80053de:	dbeb      	blt.n	80053b8 <ai_network_1_create_and_init+0x8c>
    }
#endif
    if (ai_network_1_init(*network, &params) != true) {
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f107 0214 	add.w	r2, r7, #20
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f846 	bl	800547c <ai_network_1_init>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f083 0301 	eor.w	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <ai_network_1_create_and_init+0xde>
        err = ai_network_1_get_error(*network);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff ff71 	bl	80052e8 <ai_network_1_get_error>
 8005406:	4603      	mov	r3, r0
 8005408:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    return err;
 800540a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800540c:	4618      	mov	r0, r3
 800540e:	3758      	adds	r7, #88	@ 0x58
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <ai_network_1_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d104      	bne.n	800542e <ai_network_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005424:	4b06      	ldr	r3, [pc, #24]	@ (8005440 <ai_network_1_inputs_get+0x2c>)
 8005426:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a06      	ldr	r2, [pc, #24]	@ (8005444 <ai_network_1_inputs_get+0x30>)
 800542c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 fb6d 	bl	8006b10 <ai_platform_inputs_get>
 8005436:	4603      	mov	r3, r0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000a84 	.word	0x20000a84
 8005444:	a1c00100 	.word	0xa1c00100

08005448 <ai_network_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <ai_network_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005458:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <ai_network_1_outputs_get+0x2c>)
 800545a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a06      	ldr	r2, [pc, #24]	@ (8005478 <ai_network_1_outputs_get+0x30>)
 8005460:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005462:	6839      	ldr	r1, [r7, #0]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f001 fcdf 	bl	8006e28 <ai_platform_outputs_get>
 800546a:	4603      	mov	r3, r0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000a84 	.word	0x20000a84
 8005478:	a1c00100 	.word	0xa1c00100

0800547c <ai_network_1_init>:
}

AI_API_ENTRY
ai_bool ai_network_1_init(
  ai_handle network, const ai_network_params* params)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f002 f82f 	bl	80074ec <ai_platform_network_init>
 800548e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <ai_network_1_init+0x1e>
 8005496:	2300      	movs	r3, #0
 8005498:	e028      	b.n	80054ec <ai_network_1_init+0x70>

  ai_bool ok = true;
 800549a:	2301      	movs	r3, #1
 800549c:	72fb      	strb	r3, [r7, #11]
  ok &= network_1_configure_weights(net_ctx, params);
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff fe63 	bl	800516c <network_1_configure_weights>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	7afb      	ldrb	r3, [r7, #11]
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bf14      	ite	ne
 80054b2:	2301      	movne	r3, #1
 80054b4:	2300      	moveq	r3, #0
 80054b6:	72fb      	strb	r3, [r7, #11]
  ok &= network_1_configure_activations(net_ctx, params);
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff fdb4 	bl	8005028 <network_1_configure_activations>
 80054c0:	4603      	mov	r3, r0
 80054c2:	461a      	mov	r2, r3
 80054c4:	7afb      	ldrb	r3, [r7, #11]
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf14      	ite	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	2300      	moveq	r3, #0
 80054d0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f002 f9a6 	bl	8007824 <ai_platform_network_post_init>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	7afb      	ldrb	r3, [r7, #11]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf14      	ite	ne
 80054e4:	2301      	movne	r3, #1
 80054e6:	2300      	moveq	r3, #0
 80054e8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80054ea:	7afb      	ldrb	r3, [r7, #11]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <ai_network_1_run>:


AI_API_ENTRY
ai_i32 ai_network_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f002 fab7 	bl	8007a78 <ai_platform_network_process>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <ai_network_1_data_params_get>:
 * @ingroup network_1_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_1_data_params_get(ai_network_params* params)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <ai_network_1_data_params_get+0x12>
 8005522:	2300      	movs	r3, #0
 8005524:	e016      	b.n	8005554 <ai_network_1_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005526:	4a0d      	ldr	r2, [pc, #52]	@ (800555c <ai_network_1_data_params_get+0x48>)
 8005528:	f107 0310 	add.w	r3, r7, #16
 800552c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005530:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_ACTIVATIONS_COUNT, g_network_1_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005534:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <ai_network_1_data_params_get+0x4c>)
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800553e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1_DATA_WEIGHTS_COUNT, g_network_1_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005542:	f107 0210 	add.w	r2, r7, #16
 8005546:	f107 0308 	add.w	r3, r7, #8
 800554a:	4619      	mov	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f001 f9b3 	bl	80068b8 <ai_platform_bind_network_params>
 8005552:	4603      	mov	r3, r0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	0800cb28 	.word	0x0800cb28
 8005560:	0800cb30 	.word	0x0800cb30

08005564 <arm_rfft_fast_init_f32>:
 8005564:	084b      	lsrs	r3, r1, #1
 8005566:	2b80      	cmp	r3, #128	@ 0x80
 8005568:	b430      	push	{r4, r5}
 800556a:	8201      	strh	r1, [r0, #16]
 800556c:	8003      	strh	r3, [r0, #0]
 800556e:	d070      	beq.n	8005652 <arm_rfft_fast_init_f32+0xee>
 8005570:	d916      	bls.n	80055a0 <arm_rfft_fast_init_f32+0x3c>
 8005572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005576:	d05f      	beq.n	8005638 <arm_rfft_fast_init_f32+0xd4>
 8005578:	d936      	bls.n	80055e8 <arm_rfft_fast_init_f32+0x84>
 800557a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800557e:	d026      	beq.n	80055ce <arm_rfft_fast_init_f32+0x6a>
 8005580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005584:	d112      	bne.n	80055ac <arm_rfft_fast_init_f32+0x48>
 8005586:	f44f 656e 	mov.w	r5, #3808	@ 0xee0
 800558a:	4c38      	ldr	r4, [pc, #224]	@ (800566c <arm_rfft_fast_init_f32+0x108>)
 800558c:	4938      	ldr	r1, [pc, #224]	@ (8005670 <arm_rfft_fast_init_f32+0x10c>)
 800558e:	2300      	movs	r3, #0
 8005590:	4a38      	ldr	r2, [pc, #224]	@ (8005674 <arm_rfft_fast_init_f32+0x110>)
 8005592:	8185      	strh	r5, [r0, #12]
 8005594:	6084      	str	r4, [r0, #8]
 8005596:	6041      	str	r1, [r0, #4]
 8005598:	6142      	str	r2, [r0, #20]
 800559a:	4618      	mov	r0, r3
 800559c:	bc30      	pop	{r4, r5}
 800559e:	4770      	bx	lr
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d031      	beq.n	8005608 <arm_rfft_fast_init_f32+0xa4>
 80055a4:	2b40      	cmp	r3, #64	@ 0x40
 80055a6:	d006      	beq.n	80055b6 <arm_rfft_fast_init_f32+0x52>
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d039      	beq.n	8005620 <arm_rfft_fast_init_f32+0xbc>
 80055ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055b0:	bc30      	pop	{r4, r5}
 80055b2:	4618      	mov	r0, r3
 80055b4:	4770      	bx	lr
 80055b6:	2538      	movs	r5, #56	@ 0x38
 80055b8:	4c2f      	ldr	r4, [pc, #188]	@ (8005678 <arm_rfft_fast_init_f32+0x114>)
 80055ba:	4930      	ldr	r1, [pc, #192]	@ (800567c <arm_rfft_fast_init_f32+0x118>)
 80055bc:	2300      	movs	r3, #0
 80055be:	4a30      	ldr	r2, [pc, #192]	@ (8005680 <arm_rfft_fast_init_f32+0x11c>)
 80055c0:	8185      	strh	r5, [r0, #12]
 80055c2:	6084      	str	r4, [r0, #8]
 80055c4:	6041      	str	r1, [r0, #4]
 80055c6:	6142      	str	r2, [r0, #20]
 80055c8:	4618      	mov	r0, r3
 80055ca:	bc30      	pop	{r4, r5}
 80055cc:	4770      	bx	lr
 80055ce:	f44f 65e1 	mov.w	r5, #1800	@ 0x708
 80055d2:	4c2c      	ldr	r4, [pc, #176]	@ (8005684 <arm_rfft_fast_init_f32+0x120>)
 80055d4:	492c      	ldr	r1, [pc, #176]	@ (8005688 <arm_rfft_fast_init_f32+0x124>)
 80055d6:	2300      	movs	r3, #0
 80055d8:	4a2c      	ldr	r2, [pc, #176]	@ (800568c <arm_rfft_fast_init_f32+0x128>)
 80055da:	8185      	strh	r5, [r0, #12]
 80055dc:	6084      	str	r4, [r0, #8]
 80055de:	6041      	str	r1, [r0, #4]
 80055e0:	6142      	str	r2, [r0, #20]
 80055e2:	4618      	mov	r0, r3
 80055e4:	bc30      	pop	{r4, r5}
 80055e6:	4770      	bx	lr
 80055e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ec:	d1de      	bne.n	80055ac <arm_rfft_fast_init_f32+0x48>
 80055ee:	f44f 75dc 	mov.w	r5, #440	@ 0x1b8
 80055f2:	4c27      	ldr	r4, [pc, #156]	@ (8005690 <arm_rfft_fast_init_f32+0x12c>)
 80055f4:	4927      	ldr	r1, [pc, #156]	@ (8005694 <arm_rfft_fast_init_f32+0x130>)
 80055f6:	2300      	movs	r3, #0
 80055f8:	4a27      	ldr	r2, [pc, #156]	@ (8005698 <arm_rfft_fast_init_f32+0x134>)
 80055fa:	8185      	strh	r5, [r0, #12]
 80055fc:	6084      	str	r4, [r0, #8]
 80055fe:	6041      	str	r1, [r0, #4]
 8005600:	6142      	str	r2, [r0, #20]
 8005602:	4618      	mov	r0, r3
 8005604:	bc30      	pop	{r4, r5}
 8005606:	4770      	bx	lr
 8005608:	2530      	movs	r5, #48	@ 0x30
 800560a:	4c24      	ldr	r4, [pc, #144]	@ (800569c <arm_rfft_fast_init_f32+0x138>)
 800560c:	4924      	ldr	r1, [pc, #144]	@ (80056a0 <arm_rfft_fast_init_f32+0x13c>)
 800560e:	2300      	movs	r3, #0
 8005610:	4a24      	ldr	r2, [pc, #144]	@ (80056a4 <arm_rfft_fast_init_f32+0x140>)
 8005612:	8185      	strh	r5, [r0, #12]
 8005614:	6084      	str	r4, [r0, #8]
 8005616:	6041      	str	r1, [r0, #4]
 8005618:	6142      	str	r2, [r0, #20]
 800561a:	4618      	mov	r0, r3
 800561c:	bc30      	pop	{r4, r5}
 800561e:	4770      	bx	lr
 8005620:	2514      	movs	r5, #20
 8005622:	4c21      	ldr	r4, [pc, #132]	@ (80056a8 <arm_rfft_fast_init_f32+0x144>)
 8005624:	4921      	ldr	r1, [pc, #132]	@ (80056ac <arm_rfft_fast_init_f32+0x148>)
 8005626:	2300      	movs	r3, #0
 8005628:	4a21      	ldr	r2, [pc, #132]	@ (80056b0 <arm_rfft_fast_init_f32+0x14c>)
 800562a:	8185      	strh	r5, [r0, #12]
 800562c:	6084      	str	r4, [r0, #8]
 800562e:	6041      	str	r1, [r0, #4]
 8005630:	6142      	str	r2, [r0, #20]
 8005632:	4618      	mov	r0, r3
 8005634:	bc30      	pop	{r4, r5}
 8005636:	4770      	bx	lr
 8005638:	f44f 75e0 	mov.w	r5, #448	@ 0x1c0
 800563c:	4c1d      	ldr	r4, [pc, #116]	@ (80056b4 <arm_rfft_fast_init_f32+0x150>)
 800563e:	491e      	ldr	r1, [pc, #120]	@ (80056b8 <arm_rfft_fast_init_f32+0x154>)
 8005640:	2300      	movs	r3, #0
 8005642:	4a1e      	ldr	r2, [pc, #120]	@ (80056bc <arm_rfft_fast_init_f32+0x158>)
 8005644:	8185      	strh	r5, [r0, #12]
 8005646:	6084      	str	r4, [r0, #8]
 8005648:	6041      	str	r1, [r0, #4]
 800564a:	6142      	str	r2, [r0, #20]
 800564c:	4618      	mov	r0, r3
 800564e:	bc30      	pop	{r4, r5}
 8005650:	4770      	bx	lr
 8005652:	25d0      	movs	r5, #208	@ 0xd0
 8005654:	4c1a      	ldr	r4, [pc, #104]	@ (80056c0 <arm_rfft_fast_init_f32+0x15c>)
 8005656:	491b      	ldr	r1, [pc, #108]	@ (80056c4 <arm_rfft_fast_init_f32+0x160>)
 8005658:	2300      	movs	r3, #0
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <arm_rfft_fast_init_f32+0x164>)
 800565c:	8185      	strh	r5, [r0, #12]
 800565e:	6084      	str	r4, [r0, #8]
 8005660:	6041      	str	r1, [r0, #4]
 8005662:	6142      	str	r2, [r0, #20]
 8005664:	4618      	mov	r0, r3
 8005666:	bc30      	pop	{r4, r5}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	080363f8 	.word	0x080363f8
 8005670:	080275f0 	.word	0x080275f0
 8005674:	0802d760 	.word	0x0802d760
 8005678:	0802b6f0 	.word	0x0802b6f0
 800567c:	080381b8 	.word	0x080381b8
 8005680:	0803a6a8 	.word	0x0803a6a8
 8005684:	080340e0 	.word	0x080340e0
 8005688:	08031fe0 	.word	0x08031fe0
 800568c:	0802b760 	.word	0x0802b760
 8005690:	0803a338 	.word	0x0803a338
 8005694:	08031760 	.word	0x08031760
 8005698:	080383b8 	.word	0x080383b8
 800569c:	08034f98 	.word	0x08034f98
 80056a0:	08033fe0 	.word	0x08033fe0
 80056a4:	0802b5f0 	.word	0x0802b5f0
 80056a8:	08034ef0 	.word	0x08034ef0
 80056ac:	08031f60 	.word	0x08031f60
 80056b0:	08034f18 	.word	0x08034f18
 80056b4:	08038bb8 	.word	0x08038bb8
 80056b8:	080353f8 	.word	0x080353f8
 80056bc:	08038f38 	.word	0x08038f38
 80056c0:	0803a8a8 	.word	0x0803a8a8
 80056c4:	08034ff8 	.word	0x08034ff8
 80056c8:	08039f38 	.word	0x08039f38

080056cc <arm_rfft_fast_f32>:
 80056cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d0:	8a05      	ldrh	r5, [r0, #16]
 80056d2:	4606      	mov	r6, r0
 80056d4:	4617      	mov	r7, r2
 80056d6:	460c      	mov	r4, r1
 80056d8:	086d      	lsrs	r5, r5, #1
 80056da:	8005      	strh	r5, [r0, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d15e      	bne.n	800579e <arm_rfft_fast_f32+0xd2>
 80056e0:	461a      	mov	r2, r3
 80056e2:	2301      	movs	r3, #1
 80056e4:	f000 fbde 	bl	8005ea4 <arm_cfft_f32>
 80056e8:	edd4 7a00 	vldr	s15, [r4]
 80056ec:	ed94 7a01 	vldr	s14, [r4, #4]
 80056f0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80056f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80056f8:	8832      	ldrh	r2, [r6, #0]
 80056fa:	ee37 7a07 	vadd.f32	s14, s14, s14
 80056fe:	6975      	ldr	r5, [r6, #20]
 8005700:	3a01      	subs	r2, #1
 8005702:	eeb0 3a46 	vmov.f32	s6, s12
 8005706:	3510      	adds	r5, #16
 8005708:	f107 0610 	add.w	r6, r7, #16
 800570c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005710:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8005714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005718:	f104 0310 	add.w	r3, r4, #16
 800571c:	3808      	subs	r0, #8
 800571e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8005722:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005726:	ed87 7a00 	vstr	s14, [r7]
 800572a:	edc7 7a01 	vstr	s15, [r7, #4]
 800572e:	ed90 7a02 	vldr	s14, [r0, #8]
 8005732:	3a01      	subs	r2, #1
 8005734:	ed53 6a02 	vldr	s13, [r3, #-8]
 8005738:	f1a0 0008 	sub.w	r0, r0, #8
 800573c:	ed15 6a02 	vldr	s12, [r5, #-8]
 8005740:	f103 0308 	add.w	r3, r3, #8
 8005744:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005748:	edd0 3a05 	vldr	s7, [r0, #20]
 800574c:	ed13 5a03 	vldr	s10, [r3, #-12]
 8005750:	ee77 4a26 	vadd.f32	s9, s14, s13
 8005754:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005758:	f106 0608 	add.w	r6, r6, #8
 800575c:	ee66 6a27 	vmul.f32	s13, s12, s15
 8005760:	f105 0508 	add.w	r5, r5, #8
 8005764:	ee33 4a85 	vadd.f32	s8, s7, s10
 8005768:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800576c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005770:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005774:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005778:	ee77 7a05 	vadd.f32	s15, s14, s10
 800577c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005780:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005784:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8005788:	ee67 7a83 	vmul.f32	s15, s15, s6
 800578c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8005790:	ed46 7a03 	vstr	s15, [r6, #-12]
 8005794:	ed06 7a04 	vstr	s14, [r6, #-16]
 8005798:	d1c9      	bne.n	800572e <arm_rfft_fast_f32+0x62>
 800579a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579e:	edd1 7a00 	vldr	s15, [r1]
 80057a2:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80057a6:	edd1 6a01 	vldr	s13, [r1, #4]
 80057aa:	1e68      	subs	r0, r5, #1
 80057ac:	6975      	ldr	r5, [r6, #20]
 80057ae:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80057b2:	00c1      	lsls	r1, r0, #3
 80057b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057b8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80057bc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80057c0:	ed82 7a00 	vstr	s14, [r2]
 80057c4:	edc2 7a01 	vstr	s15, [r2, #4]
 80057c8:	b3e0      	cbz	r0, 8005844 <arm_rfft_fast_f32+0x178>
 80057ca:	3908      	subs	r1, #8
 80057cc:	f104 0210 	add.w	r2, r4, #16
 80057d0:	3510      	adds	r5, #16
 80057d2:	440c      	add	r4, r1
 80057d4:	f107 0110 	add.w	r1, r7, #16
 80057d8:	ed94 7a02 	vldr	s14, [r4, #8]
 80057dc:	3801      	subs	r0, #1
 80057de:	ed52 6a02 	vldr	s13, [r2, #-8]
 80057e2:	f1a4 0408 	sub.w	r4, r4, #8
 80057e6:	ed15 6a02 	vldr	s12, [r5, #-8]
 80057ea:	f102 0208 	add.w	r2, r2, #8
 80057ee:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80057f2:	ed94 4a05 	vldr	s8, [r4, #20]
 80057f6:	ed12 5a03 	vldr	s10, [r2, #-12]
 80057fa:	ee77 6a26 	vadd.f32	s13, s14, s13
 80057fe:	ed55 5a01 	vldr	s11, [r5, #-4]
 8005802:	f101 0108 	add.w	r1, r1, #8
 8005806:	ee26 3a27 	vmul.f32	s6, s12, s15
 800580a:	f105 0508 	add.w	r5, r5, #8
 800580e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005812:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005816:	ee35 5a44 	vsub.f32	s10, s10, s8
 800581a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800581e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005822:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005826:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800582a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800582e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8005832:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005836:	ee27 7a23 	vmul.f32	s14, s14, s7
 800583a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800583e:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005842:	d1c9      	bne.n	80057d8 <arm_rfft_fast_f32+0x10c>
 8005844:	461a      	mov	r2, r3
 8005846:	4639      	mov	r1, r7
 8005848:	4630      	mov	r0, r6
 800584a:	2301      	movs	r3, #1
 800584c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	f000 bb28 	b.w	8005ea4 <arm_cfft_f32>

08005854 <arm_cfft_radix8by2_f32>:
 8005854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005858:	4607      	mov	r7, r0
 800585a:	4608      	mov	r0, r1
 800585c:	ed2d 8b06 	vpush	{d8-d10}
 8005860:	f8b7 e000 	ldrh.w	lr, [r7]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800586a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800586e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005872:	f000 80b0 	beq.w	80059d6 <arm_cfft_radix8by2_f32+0x182>
 8005876:	008b      	lsls	r3, r1, #2
 8005878:	3210      	adds	r2, #16
 800587a:	f100 0610 	add.w	r6, r0, #16
 800587e:	f108 0510 	add.w	r5, r8, #16
 8005882:	3310      	adds	r3, #16
 8005884:	18c4      	adds	r4, r0, r3
 8005886:	4443      	add	r3, r8
 8005888:	ed55 6a04 	vldr	s13, [r5, #-16]
 800588c:	f1be 0e01 	subs.w	lr, lr, #1
 8005890:	ed56 4a04 	vldr	s9, [r6, #-16]
 8005894:	f104 0410 	add.w	r4, r4, #16
 8005898:	ed15 7a03 	vldr	s14, [r5, #-12]
 800589c:	f106 0610 	add.w	r6, r6, #16
 80058a0:	ee74 9aa6 	vadd.f32	s19, s9, s13
 80058a4:	ed55 7a02 	vldr	s15, [r5, #-8]
 80058a8:	ed55 2a01 	vldr	s5, [r5, #-4]
 80058ac:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80058b0:	ed53 0a04 	vldr	s1, [r3, #-16]
 80058b4:	f102 0210 	add.w	r2, r2, #16
 80058b8:	ed13 5a03 	vldr	s10, [r3, #-12]
 80058bc:	f105 0510 	add.w	r5, r5, #16
 80058c0:	ed13 3a02 	vldr	s6, [r3, #-8]
 80058c4:	f103 0310 	add.w	r3, r3, #16
 80058c8:	ed54 3a06 	vldr	s7, [r4, #-24]	@ 0xffffffe8
 80058cc:	ed14 4a05 	vldr	s8, [r4, #-20]	@ 0xffffffec
 80058d0:	ed13 6a05 	vldr	s12, [r3, #-20]	@ 0xffffffec
 80058d4:	ee33 8a83 	vadd.f32	s16, s7, s6
 80058d8:	ed56 6a07 	vldr	s13, [r6, #-28]	@ 0xffffffe4
 80058dc:	ed16 2a05 	vldr	s4, [r6, #-20]	@ 0xffffffec
 80058e0:	ee34 0a06 	vadd.f32	s0, s8, s12
 80058e4:	ed54 5a08 	vldr	s11, [r4, #-32]	@ 0xffffffe0
 80058e8:	ee76 aa87 	vadd.f32	s21, s13, s14
 80058ec:	ed14 1a07 	vldr	s2, [r4, #-28]	@ 0xffffffe4
 80058f0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80058f4:	ed56 1a06 	vldr	s3, [r6, #-24]	@ 0xffffffe8
 80058f8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 80058fc:	ed46 9a08 	vstr	s19, [r6, #-32]	@ 0xffffffe0
 8005900:	ee71 8a05 	vadd.f32	s17, s2, s10
 8005904:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8005908:	ed46 aa07 	vstr	s21, [r6, #-28]	@ 0xffffffe4
 800590c:	ee72 9a22 	vadd.f32	s19, s4, s5
 8005910:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005914:	ee35 5a41 	vsub.f32	s10, s10, s2
 8005918:	ed06 aa06 	vstr	s20, [r6, #-24]	@ 0xffffffe8
 800591c:	ed46 9a05 	vstr	s19, [r6, #-20]	@ 0xffffffec
 8005920:	ee36 6a44 	vsub.f32	s12, s12, s8
 8005924:	ed04 9a08 	vstr	s18, [r4, #-32]	@ 0xffffffe0
 8005928:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800592c:	ed44 8a07 	vstr	s17, [r4, #-28]	@ 0xffffffe4
 8005930:	ee72 7a62 	vsub.f32	s15, s4, s5
 8005934:	ed04 8a06 	vstr	s16, [r4, #-24]	@ 0xffffffe8
 8005938:	ee73 2a63 	vsub.f32	s5, s6, s7
 800593c:	ed04 0a05 	vstr	s0, [r4, #-20]	@ 0xffffffec
 8005940:	ed12 4a08 	vldr	s8, [r2, #-32]	@ 0xffffffe0
 8005944:	ed52 6a07 	vldr	s13, [r2, #-28]	@ 0xffffffe4
 8005948:	ee24 3a84 	vmul.f32	s6, s9, s8
 800594c:	ee27 2a26 	vmul.f32	s4, s14, s13
 8005950:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8005954:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8005958:	ee27 7a04 	vmul.f32	s14, s14, s8
 800595c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005960:	ee65 6a26 	vmul.f32	s13, s10, s13
 8005964:	ee25 5a04 	vmul.f32	s10, s10, s8
 8005968:	ee37 7a64 	vsub.f32	s14, s14, s9
 800596c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005970:	ee33 4a02 	vadd.f32	s8, s6, s4
 8005974:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005978:	ed05 7a07 	vstr	s14, [r5, #-28]	@ 0xffffffe4
 800597c:	ed05 4a08 	vstr	s8, [r5, #-32]	@ 0xffffffe0
 8005980:	ed03 5a08 	vstr	s10, [r3, #-32]	@ 0xffffffe0
 8005984:	ed43 6a07 	vstr	s13, [r3, #-28]	@ 0xffffffe4
 8005988:	ed52 6a06 	vldr	s13, [r2, #-24]	@ 0xffffffe8
 800598c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8005990:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8005994:	ee27 4a87 	vmul.f32	s8, s15, s14
 8005998:	ee61 5a87 	vmul.f32	s11, s3, s14
 800599c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80059a0:	ee22 5a87 	vmul.f32	s10, s5, s14
 80059a4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80059a8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80059ac:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80059b0:	ee74 4a84 	vadd.f32	s9, s9, s8
 80059b4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80059b8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80059bc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80059c0:	ed45 4a06 	vstr	s9, [r5, #-24]	@ 0xffffffe8
 80059c4:	ed45 7a05 	vstr	s15, [r5, #-20]	@ 0xffffffec
 80059c8:	ed03 6a06 	vstr	s12, [r3, #-24]	@ 0xffffffe8
 80059cc:	ed03 7a05 	vstr	s14, [r3, #-20]	@ 0xffffffec
 80059d0:	f47f af5a 	bne.w	8005888 <arm_cfft_radix8by2_f32+0x34>
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	b28c      	uxth	r4, r1
 80059d8:	2302      	movs	r3, #2
 80059da:	4621      	mov	r1, r4
 80059dc:	f000 fb78 	bl	80060d0 <arm_radix8_butterfly_f32>
 80059e0:	4621      	mov	r1, r4
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4640      	mov	r0, r8
 80059e6:	2302      	movs	r3, #2
 80059e8:	ecbd 8b06 	vpop	{d8-d10}
 80059ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f0:	f000 bb6e 	b.w	80060d0 <arm_radix8_butterfly_f32>

080059f4 <arm_cfft_radix8by4_f32>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	ed2d 8b06 	vpush	{d8-d10}
 80059fc:	8804      	ldrh	r4, [r0, #0]
 80059fe:	b08f      	sub	sp, #60	@ 0x3c
 8005a00:	ed91 6a00 	vldr	s12, [r1]
 8005a04:	460a      	mov	r2, r1
 8005a06:	0864      	lsrs	r4, r4, #1
 8005a08:	ed91 7a01 	vldr	s14, [r1, #4]
 8005a0c:	9101      	str	r1, [sp, #4]
 8005a0e:	00a3      	lsls	r3, r4, #2
 8005a10:	6841      	ldr	r1, [r0, #4]
 8005a12:	0864      	lsrs	r4, r4, #1
 8005a14:	900c      	str	r0, [sp, #48]	@ 0x30
 8005a16:	9205      	str	r2, [sp, #20]
 8005a18:	f101 0610 	add.w	r6, r1, #16
 8005a1c:	4625      	mov	r5, r4
 8005a1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a20:	f101 0408 	add.w	r4, r1, #8
 8005a24:	9602      	str	r6, [sp, #8]
 8005a26:	9407      	str	r4, [sp, #28]
 8005a28:	18d4      	adds	r4, r2, r3
 8005a2a:	1eaa      	subs	r2, r5, #2
 8005a2c:	f101 0518 	add.w	r5, r1, #24
 8005a30:	18e0      	adds	r0, r4, r3
 8005a32:	edd4 4a00 	vldr	s9, [r4]
 8005a36:	ed94 4a01 	vldr	s8, [r4, #4]
 8005a3a:	46a6      	mov	lr, r4
 8005a3c:	edd0 6a00 	vldr	s13, [r0]
 8005a40:	18c7      	adds	r7, r0, r3
 8005a42:	edd0 7a01 	vldr	s15, [r0, #4]
 8005a46:	46a0      	mov	r8, r4
 8005a48:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005a4c:	ed97 5a00 	vldr	s10, [r7]
 8005a50:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005a54:	4604      	mov	r4, r0
 8005a56:	9506      	str	r5, [sp, #24]
 8005a58:	4605      	mov	r5, r0
 8005a5a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 8005a5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005a60:	9801      	ldr	r0, [sp, #4]
 8005a62:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a6a:	ed97 3a01 	vldr	s6, [r7, #4]
 8005a6e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8005a72:	46bc      	mov	ip, r7
 8005a74:	ee76 3a84 	vadd.f32	s7, s13, s8
 8005a78:	9704      	str	r7, [sp, #16]
 8005a7a:	ee36 7a44 	vsub.f32	s14, s12, s8
 8005a7e:	f8cd e00c 	str.w	lr, [sp, #12]
 8005a82:	ee12 9a90 	vmov	r9, s5
 8005a86:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8005a8a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8005a8e:	1f3e      	subs	r6, r7, #4
 8005a90:	f840 9b08 	str.w	r9, [r0], #8
 8005a94:	ee37 4ae4 	vsub.f32	s8, s15, s9
 8005a98:	edde 2a01 	vldr	s5, [lr, #4]
 8005a9c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8005aa0:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8005aa4:	eddc 4a01 	vldr	s9, [ip, #4]
 8005aa8:	ee36 6a22 	vadd.f32	s12, s12, s5
 8005aac:	9001      	str	r0, [sp, #4]
 8005aae:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8005ab2:	9805      	ldr	r0, [sp, #20]
 8005ab4:	ee13 9a90 	vmov	r9, s7
 8005ab8:	ee37 7a43 	vsub.f32	s14, s14, s6
 8005abc:	ee36 6a24 	vadd.f32	s12, s12, s9
 8005ac0:	f1ae 0704 	sub.w	r7, lr, #4
 8005ac4:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005ac8:	ee76 6a83 	vadd.f32	s13, s13, s6
 8005acc:	ed80 6a01 	vstr	s12, [r0, #4]
 8005ad0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005ad4:	f848 9b08 	str.w	r9, [r8], #8
 8005ad8:	edce 4a01 	vstr	s9, [lr, #4]
 8005adc:	ee15 ea90 	vmov	lr, s11
 8005ae0:	f844 eb08 	str.w	lr, [r4], #8
 8005ae4:	ee16 ea90 	vmov	lr, s13
 8005ae8:	9408      	str	r4, [sp, #32]
 8005aea:	462c      	mov	r4, r5
 8005aec:	ed85 7a01 	vstr	s14, [r5, #4]
 8005af0:	9d04      	ldr	r5, [sp, #16]
 8005af2:	f84c eb08 	str.w	lr, [ip], #8
 8005af6:	edc5 7a01 	vstr	s15, [r5, #4]
 8005afa:	0855      	lsrs	r5, r2, #1
 8005afc:	9509      	str	r5, [sp, #36]	@ 0x24
 8005afe:	f000 8130 	beq.w	8005d62 <arm_cfft_radix8by4_f32+0x36e>
 8005b02:	9805      	ldr	r0, [sp, #20]
 8005b04:	3b08      	subs	r3, #8
 8005b06:	46ab      	mov	fp, r5
 8005b08:	f1a4 020c 	sub.w	r2, r4, #12
 8005b0c:	f100 0510 	add.w	r5, r0, #16
 8005b10:	f101 0920 	add.w	r9, r1, #32
 8005b14:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8005b18:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005b1c:	4433      	add	r3, r6
 8005b1e:	3410      	adds	r4, #16
 8005b20:	4660      	mov	r0, ip
 8005b22:	4641      	mov	r1, r8
 8005b24:	f8cd c034 	str.w	ip, [sp, #52]	@ 0x34
 8005b28:	ed54 6a02 	vldr	s13, [r4, #-8]
 8005b2c:	f1bb 0b01 	subs.w	fp, fp, #1
 8005b30:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005b34:	f10a 0a08 	add.w	sl, sl, #8
 8005b38:	edd1 7a00 	vldr	s15, [r1]
 8005b3c:	f105 0508 	add.w	r5, r5, #8
 8005b40:	ee75 3aa6 	vadd.f32	s7, s11, s13
 8005b44:	edd0 2a00 	vldr	s5, [r0]
 8005b48:	ed14 7a01 	vldr	s14, [r4, #-4]
 8005b4c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 8005b50:	ed55 6a03 	vldr	s13, [r5, #-12]
 8005b54:	f1a2 0208 	sub.w	r2, r2, #8
 8005b58:	ee73 4aa7 	vadd.f32	s9, s7, s15
 8005b5c:	ed90 2a01 	vldr	s4, [r0, #4]
 8005b60:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005b64:	ed91 6a01 	vldr	s12, [r1, #4]
 8005b68:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005b6c:	f109 0910 	add.w	r9, r9, #16
 8005b70:	ee74 6aa2 	vadd.f32	s13, s9, s5
 8005b74:	f104 0408 	add.w	r4, r4, #8
 8005b78:	ee73 3ae7 	vsub.f32	s7, s7, s15
 8005b7c:	f10e 0e18 	add.w	lr, lr, #24
 8005b80:	ee37 3a67 	vsub.f32	s6, s14, s15
 8005b84:	f1a3 0308 	sub.w	r3, r3, #8
 8005b88:	ed45 6a04 	vstr	s13, [r5, #-16]
 8005b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b90:	edd1 6a01 	vldr	s13, [r1, #4]
 8005b94:	ee75 1a86 	vadd.f32	s3, s11, s12
 8005b98:	edd0 4a01 	vldr	s9, [r0, #4]
 8005b9c:	ee33 3a22 	vadd.f32	s6, s6, s5
 8005ba0:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005ba4:	ee35 5a46 	vsub.f32	s10, s10, s12
 8005ba8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8005bac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005bb0:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8005bb4:	ee35 5a42 	vsub.f32	s10, s10, s4
 8005bb8:	ed45 6a03 	vstr	s13, [r5, #-12]
 8005bbc:	ee36 2a02 	vadd.f32	s4, s12, s4
 8005bc0:	edd6 7a00 	vldr	s15, [r6]
 8005bc4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005bc8:	ed97 1a00 	vldr	s2, [r7]
 8005bcc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8005bd0:	ed92 8a04 	vldr	s16, [r2, #16]
 8005bd4:	ee71 8a27 	vadd.f32	s17, s2, s15
 8005bd8:	ed93 aa04 	vldr	s20, [r3, #16]
 8005bdc:	ed16 7a01 	vldr	s14, [r6, #-4]
 8005be0:	ee71 7a67 	vsub.f32	s15, s2, s15
 8005be4:	ed57 0a01 	vldr	s1, [r7, #-4]
 8005be8:	ee38 1a4a 	vsub.f32	s2, s16, s20
 8005bec:	ee38 6a88 	vadd.f32	s12, s17, s16
 8005bf0:	edd3 9a03 	vldr	s19, [r3, #12]
 8005bf4:	ee30 0a87 	vadd.f32	s0, s1, s14
 8005bf8:	ed92 9a03 	vldr	s18, [r2, #12]
 8005bfc:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8005c00:	ee36 6a0a 	vadd.f32	s12, s12, s20
 8005c04:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8005c08:	ee37 4ac9 	vsub.f32	s8, s15, s18
 8005c0c:	ee16 ca10 	vmov	ip, s12
 8005c10:	ee30 6a49 	vsub.f32	s12, s0, s18
 8005c14:	ee77 4a01 	vadd.f32	s9, s14, s2
 8005c18:	f847 c908 	str.w	ip, [r7], #-8
 8005c1c:	ee34 4a29 	vadd.f32	s8, s8, s19
 8005c20:	edd2 8a03 	vldr	s17, [r2, #12]
 8005c24:	ee39 9ac9 	vsub.f32	s18, s19, s18
 8005c28:	ed93 8a03 	vldr	s16, [r3, #12]
 8005c2c:	ee71 0a47 	vsub.f32	s1, s2, s14
 8005c30:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005c34:	ee39 1a67 	vsub.f32	s2, s18, s15
 8005c38:	ee36 6a69 	vsub.f32	s12, s12, s19
 8005c3c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005c40:	ee75 5aca 	vsub.f32	s11, s11, s20
 8005c44:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c48:	ed1a 0a04 	vldr	s0, [sl, #-16]
 8005c4c:	ed5a 6a03 	vldr	s13, [sl, #-12]
 8005c50:	ee21 8a80 	vmul.f32	s16, s3, s0
 8005c54:	ee23 7a26 	vmul.f32	s14, s6, s13
 8005c58:	ee64 7a26 	vmul.f32	s15, s8, s13
 8005c5c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 8005c60:	ee24 4a00 	vmul.f32	s8, s8, s0
 8005c64:	ee23 3a00 	vmul.f32	s6, s6, s0
 8005c68:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8005c6c:	ee24 0a80 	vmul.f32	s0, s9, s0
 8005c70:	ee38 7a07 	vadd.f32	s14, s16, s14
 8005c74:	ee76 6a84 	vadd.f32	s13, s13, s8
 8005c78:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005c7c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005c80:	ee17 ca10 	vmov	ip, s14
 8005c84:	f841 cb08 	str.w	ip, [r1], #8
 8005c88:	ed01 3a01 	vstr	s6, [r1, #-4]
 8005c8c:	ed82 0a04 	vstr	s0, [r2, #16]
 8005c90:	edc2 6a03 	vstr	s13, [r2, #12]
 8005c94:	ed59 6a08 	vldr	s13, [r9, #-32]	@ 0xffffffe0
 8005c98:	ed59 7a07 	vldr	s15, [r9, #-28]	@ 0xffffffe4
 8005c9c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8005ca0:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8005ca4:	ee65 4a27 	vmul.f32	s9, s10, s15
 8005ca8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8005cac:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8005cb0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cb4:	ee25 5a26 	vmul.f32	s10, s10, s13
 8005cb8:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc0:	ee34 6a24 	vadd.f32	s12, s8, s9
 8005cc4:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8005cc8:	ee35 5a63 	vsub.f32	s10, s10, s7
 8005ccc:	ee17 ca90 	vmov	ip, s15
 8005cd0:	ed04 6a04 	vstr	s12, [r4, #-16]
 8005cd4:	ed04 5a03 	vstr	s10, [r4, #-12]
 8005cd8:	f846 c908 	str.w	ip, [r6], #-8
 8005cdc:	edc6 6a01 	vstr	s13, [r6, #4]
 8005ce0:	ed5e 7a0c 	vldr	s15, [lr, #-48]	@ 0xffffffd0
 8005ce4:	ed1e 7a0b 	vldr	s14, [lr, #-44]	@ 0xffffffd4
 8005ce8:	ee62 5a27 	vmul.f32	s11, s4, s15
 8005cec:	ee22 6a87 	vmul.f32	s12, s5, s14
 8005cf0:	ee22 2a07 	vmul.f32	s4, s4, s14
 8005cf4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8005cf8:	ee61 6a07 	vmul.f32	s13, s2, s14
 8005cfc:	ee20 7a87 	vmul.f32	s14, s1, s14
 8005d00:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8005d04:	ee61 7a27 	vmul.f32	s15, s2, s15
 8005d08:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005d0c:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8005d10:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8005d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d18:	ee16 ca10 	vmov	ip, s12
 8005d1c:	f840 cb08 	str.w	ip, [r0], #8
 8005d20:	ed40 2a01 	vstr	s5, [r0, #-4]
 8005d24:	edc3 0a04 	vstr	s1, [r3, #16]
 8005d28:	edc3 7a03 	vstr	s15, [r3, #12]
 8005d2c:	f47f aefc 	bne.w	8005b28 <arm_cfft_radix8by4_f32+0x134>
 8005d30:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d32:	9802      	ldr	r0, [sp, #8]
 8005d34:	00cb      	lsls	r3, r1, #3
 8005d36:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 8005d3a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005d3e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005d42:	4498      	add	r8, r3
 8005d44:	449c      	add	ip, r3
 8005d46:	9102      	str	r1, [sp, #8]
 8005d48:	9901      	ldr	r1, [sp, #4]
 8005d4a:	4419      	add	r1, r3
 8005d4c:	9101      	str	r1, [sp, #4]
 8005d4e:	9907      	ldr	r1, [sp, #28]
 8005d50:	4419      	add	r1, r3
 8005d52:	9107      	str	r1, [sp, #28]
 8005d54:	9908      	ldr	r1, [sp, #32]
 8005d56:	4419      	add	r1, r3
 8005d58:	9b06      	ldr	r3, [sp, #24]
 8005d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d5e:	9108      	str	r1, [sp, #32]
 8005d60:	9306      	str	r3, [sp, #24]
 8005d62:	9a01      	ldr	r2, [sp, #4]
 8005d64:	2304      	movs	r3, #4
 8005d66:	9e08      	ldr	r6, [sp, #32]
 8005d68:	edd2 7a00 	vldr	s15, [r2]
 8005d6c:	ed96 7a00 	vldr	s14, [r6]
 8005d70:	edd8 2a00 	vldr	s5, [r8]
 8005d74:	ee77 5a87 	vadd.f32	s11, s15, s14
 8005d78:	ed9c 3a00 	vldr	s6, [ip]
 8005d7c:	ed92 6a01 	vldr	s12, [r2, #4]
 8005d80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005d84:	edd6 6a01 	vldr	s13, [r6, #4]
 8005d88:	ee75 4aa2 	vadd.f32	s9, s11, s5
 8005d8c:	ed9c 2a01 	vldr	s4, [ip, #4]
 8005d90:	ee36 5a26 	vadd.f32	s10, s12, s13
 8005d94:	edd8 7a01 	vldr	s15, [r8, #4]
 8005d98:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005d9c:	9d02      	ldr	r5, [sp, #8]
 8005d9e:	ee34 6a83 	vadd.f32	s12, s9, s6
 8005da2:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8005da6:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005daa:	9805      	ldr	r0, [sp, #20]
 8005dac:	ee76 4ae2 	vsub.f32	s9, s13, s5
 8005db0:	4621      	mov	r1, r4
 8005db2:	ed82 6a00 	vstr	s12, [r2]
 8005db6:	ee35 6ae2 	vsub.f32	s12, s11, s5
 8005dba:	edd8 3a01 	vldr	s7, [r8, #4]
 8005dbe:	ee75 5a67 	vsub.f32	s11, s10, s15
 8005dc2:	eddc 1a01 	vldr	s3, [ip, #4]
 8005dc6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005dca:	ee75 3a23 	vadd.f32	s7, s10, s7
 8005dce:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005dd2:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8005dd6:	ee33 5aa1 	vadd.f32	s10, s7, s3
 8005dda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dde:	ee36 6a43 	vsub.f32	s12, s12, s6
 8005de2:	ed82 5a01 	vstr	s10, [r2, #4]
 8005de6:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005dea:	9a07      	ldr	r2, [sp, #28]
 8005dec:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005df0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 8005df4:	edd2 2a00 	vldr	s5, [r2]
 8005df8:	ed92 5a01 	vldr	s10, [r2, #4]
 8005dfc:	ee64 3a22 	vmul.f32	s7, s8, s5
 8005e00:	ee24 4a05 	vmul.f32	s8, s8, s10
 8005e04:	ee24 5a85 	vmul.f32	s10, s9, s10
 8005e08:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8005e0c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005e10:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8005e14:	ed88 5a00 	vstr	s10, [r8]
 8005e18:	edc8 4a01 	vstr	s9, [r8, #4]
 8005e1c:	edd5 4a01 	vldr	s9, [r5, #4]
 8005e20:	edd5 6a00 	vldr	s13, [r5]
 8005e24:	9d06      	ldr	r5, [sp, #24]
 8005e26:	ee26 5a26 	vmul.f32	s10, s12, s13
 8005e2a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005e2e:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8005e32:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005e36:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8005e3a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005e3e:	ed86 6a01 	vstr	s12, [r6, #4]
 8005e42:	edc6 5a00 	vstr	s11, [r6]
 8005e46:	edd5 5a01 	vldr	s11, [r5, #4]
 8005e4a:	edd5 6a00 	vldr	s13, [r5]
 8005e4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e50:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8005e54:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005e58:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005e5c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8005e60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005e64:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005e68:	edcc 7a01 	vstr	s15, [ip, #4]
 8005e6c:	ed8c 7a00 	vstr	s14, [ip]
 8005e70:	6872      	ldr	r2, [r6, #4]
 8005e72:	f000 f92d 	bl	80060d0 <arm_radix8_butterfly_f32>
 8005e76:	9803      	ldr	r0, [sp, #12]
 8005e78:	4621      	mov	r1, r4
 8005e7a:	6872      	ldr	r2, [r6, #4]
 8005e7c:	2304      	movs	r3, #4
 8005e7e:	f000 f927 	bl	80060d0 <arm_radix8_butterfly_f32>
 8005e82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e84:	4621      	mov	r1, r4
 8005e86:	6872      	ldr	r2, [r6, #4]
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f000 f921 	bl	80060d0 <arm_radix8_butterfly_f32>
 8005e8e:	4621      	mov	r1, r4
 8005e90:	6872      	ldr	r2, [r6, #4]
 8005e92:	2304      	movs	r3, #4
 8005e94:	9804      	ldr	r0, [sp, #16]
 8005e96:	b00f      	add	sp, #60	@ 0x3c
 8005e98:	ecbd 8b06 	vpop	{d8-d10}
 8005e9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea0:	f000 b916 	b.w	80060d0 <arm_radix8_butterfly_f32>

08005ea4 <arm_cfft_f32>:
 8005ea4:	2a01      	cmp	r2, #1
 8005ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eaa:	4606      	mov	r6, r0
 8005eac:	4617      	mov	r7, r2
 8005eae:	460c      	mov	r4, r1
 8005eb0:	4698      	mov	r8, r3
 8005eb2:	8805      	ldrh	r5, [r0, #0]
 8005eb4:	d053      	beq.n	8005f5e <arm_cfft_f32+0xba>
 8005eb6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005eba:	d04b      	beq.n	8005f54 <arm_cfft_f32+0xb0>
 8005ebc:	d916      	bls.n	8005eec <arm_cfft_f32+0x48>
 8005ebe:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8005ec2:	d01a      	beq.n	8005efa <arm_cfft_f32+0x56>
 8005ec4:	d95a      	bls.n	8005f7c <arm_cfft_f32+0xd8>
 8005ec6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8005eca:	d043      	beq.n	8005f54 <arm_cfft_f32+0xb0>
 8005ecc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8005ed0:	d105      	bne.n	8005ede <arm_cfft_f32+0x3a>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	6872      	ldr	r2, [r6, #4]
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f000 f8f9 	bl	80060d0 <arm_radix8_butterfly_f32>
 8005ede:	f1b8 0f00 	cmp.w	r8, #0
 8005ee2:	d111      	bne.n	8005f08 <arm_cfft_f32+0x64>
 8005ee4:	2f01      	cmp	r7, #1
 8005ee6:	d016      	beq.n	8005f16 <arm_cfft_f32+0x72>
 8005ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eec:	2d20      	cmp	r5, #32
 8005eee:	d031      	beq.n	8005f54 <arm_cfft_f32+0xb0>
 8005ef0:	d948      	bls.n	8005f84 <arm_cfft_f32+0xe0>
 8005ef2:	2d40      	cmp	r5, #64	@ 0x40
 8005ef4:	d0ed      	beq.n	8005ed2 <arm_cfft_f32+0x2e>
 8005ef6:	2d80      	cmp	r5, #128	@ 0x80
 8005ef8:	d1f1      	bne.n	8005ede <arm_cfft_f32+0x3a>
 8005efa:	4621      	mov	r1, r4
 8005efc:	4630      	mov	r0, r6
 8005efe:	f7ff fca9 	bl	8005854 <arm_cfft_radix8by2_f32>
 8005f02:	f1b8 0f00 	cmp.w	r8, #0
 8005f06:	d0ed      	beq.n	8005ee4 <arm_cfft_f32+0x40>
 8005f08:	68b2      	ldr	r2, [r6, #8]
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	89b1      	ldrh	r1, [r6, #12]
 8005f0e:	f7fa f987 	bl	8000220 <arm_bitreversal_32>
 8005f12:	2f01      	cmp	r7, #1
 8005f14:	d1e8      	bne.n	8005ee8 <arm_cfft_f32+0x44>
 8005f16:	ee07 5a90 	vmov	s15, r5
 8005f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005f26:	2d00      	cmp	r5, #0
 8005f28:	d0de      	beq.n	8005ee8 <arm_cfft_f32+0x44>
 8005f2a:	f104 0108 	add.w	r1, r4, #8
 8005f2e:	2300      	movs	r3, #0
 8005f30:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005f34:	3301      	adds	r3, #1
 8005f36:	ed51 7a01 	vldr	s15, [r1, #-4]
 8005f3a:	3108      	adds	r1, #8
 8005f3c:	429d      	cmp	r5, r3
 8005f3e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005f42:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005f46:	ed01 7a04 	vstr	s14, [r1, #-16]
 8005f4a:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005f4e:	d1ef      	bne.n	8005f30 <arm_cfft_f32+0x8c>
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f54:	4621      	mov	r1, r4
 8005f56:	4630      	mov	r0, r6
 8005f58:	f7ff fd4c 	bl	80059f4 <arm_cfft_radix8by4_f32>
 8005f5c:	e7bf      	b.n	8005ede <arm_cfft_f32+0x3a>
 8005f5e:	b1a5      	cbz	r5, 8005f8a <arm_cfft_f32+0xe6>
 8005f60:	f101 030c 	add.w	r3, r1, #12
 8005f64:	2200      	movs	r2, #0
 8005f66:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005f6a:	3201      	adds	r2, #1
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	eef1 7a67 	vneg.f32	s15, s15
 8005f72:	4295      	cmp	r5, r2
 8005f74:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005f78:	d1f5      	bne.n	8005f66 <arm_cfft_f32+0xc2>
 8005f7a:	e79c      	b.n	8005eb6 <arm_cfft_f32+0x12>
 8005f7c:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8005f80:	d0a7      	beq.n	8005ed2 <arm_cfft_f32+0x2e>
 8005f82:	e7ac      	b.n	8005ede <arm_cfft_f32+0x3a>
 8005f84:	2d10      	cmp	r5, #16
 8005f86:	d0b8      	beq.n	8005efa <arm_cfft_f32+0x56>
 8005f88:	e7a9      	b.n	8005ede <arm_cfft_f32+0x3a>
 8005f8a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8005f8e:	d896      	bhi.n	8005ebe <arm_cfft_f32+0x1a>
 8005f90:	e7ac      	b.n	8005eec <arm_cfft_f32+0x48>
 8005f92:	bf00      	nop

08005f94 <arm_cmplx_mag_squared_f32>:
 8005f94:	b470      	push	{r4, r5, r6}
 8005f96:	0896      	lsrs	r6, r2, #2
 8005f98:	d03e      	beq.n	8006018 <arm_cmplx_mag_squared_f32+0x84>
 8005f9a:	f100 0320 	add.w	r3, r0, #32
 8005f9e:	f101 0410 	add.w	r4, r1, #16
 8005fa2:	4635      	mov	r5, r6
 8005fa4:	ed13 7a08 	vldr	s14, [r3, #-32]	@ 0xffffffe0
 8005fa8:	3d01      	subs	r5, #1
 8005faa:	ed53 7a06 	vldr	s15, [r3, #-24]	@ 0xffffffe8
 8005fae:	f104 0410 	add.w	r4, r4, #16
 8005fb2:	ed53 5a07 	vldr	s11, [r3, #-28]	@ 0xffffffe4
 8005fb6:	ee27 5a07 	vmul.f32	s10, s14, s14
 8005fba:	ed53 6a05 	vldr	s13, [r3, #-20]	@ 0xffffffec
 8005fbe:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005fc2:	ed13 7a04 	vldr	s14, [r3, #-16]
 8005fc6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8005fca:	ed13 4a03 	vldr	s8, [r3, #-12]
 8005fce:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8005fd2:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005fd6:	ee27 7a07 	vmul.f32	s14, s14, s14
 8005fda:	ed53 4a01 	vldr	s9, [r3, #-4]
 8005fde:	ee24 4a04 	vmul.f32	s8, s8, s8
 8005fe2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fe6:	f103 0320 	add.w	r3, r3, #32
 8005fea:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8005fee:	ee75 5a25 	vadd.f32	s11, s10, s11
 8005ff2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005ff6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8005ffa:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8005ffe:	ed44 5a08 	vstr	s11, [r4, #-32]	@ 0xffffffe0
 8006002:	ed44 6a07 	vstr	s13, [r4, #-28]	@ 0xffffffe4
 8006006:	ed04 7a06 	vstr	s14, [r4, #-24]	@ 0xffffffe8
 800600a:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 800600e:	d1c9      	bne.n	8005fa4 <arm_cmplx_mag_squared_f32+0x10>
 8006010:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8006014:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8006018:	f012 0203 	ands.w	r2, r2, #3
 800601c:	d010      	beq.n	8006040 <arm_cmplx_mag_squared_f32+0xac>
 800601e:	3008      	adds	r0, #8
 8006020:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006024:	3a01      	subs	r2, #1
 8006026:	ed10 7a01 	vldr	s14, [r0, #-4]
 800602a:	f100 0008 	add.w	r0, r0, #8
 800602e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006032:	ee27 7a07 	vmul.f32	s14, s14, s14
 8006036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800603a:	ece1 7a01 	vstmia	r1!, {s15}
 800603e:	d1ef      	bne.n	8006020 <arm_cmplx_mag_squared_f32+0x8c>
 8006040:	bc70      	pop	{r4, r5, r6}
 8006042:	4770      	bx	lr

08006044 <arm_mult_f32>:
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800604a:	d033      	beq.n	80060b4 <arm_mult_f32+0x70>
 800604c:	f100 0610 	add.w	r6, r0, #16
 8006050:	f101 0510 	add.w	r5, r1, #16
 8006054:	f102 0410 	add.w	r4, r2, #16
 8006058:	4677      	mov	r7, lr
 800605a:	ed16 7a04 	vldr	s14, [r6, #-16]
 800605e:	3f01      	subs	r7, #1
 8006060:	ed15 6a04 	vldr	s12, [r5, #-16]
 8006064:	f106 0610 	add.w	r6, r6, #16
 8006068:	ed56 7a06 	vldr	s15, [r6, #-24]	@ 0xffffffe8
 800606c:	f105 0510 	add.w	r5, r5, #16
 8006070:	ee27 6a06 	vmul.f32	s12, s14, s12
 8006074:	ed55 6a06 	vldr	s13, [r5, #-24]	@ 0xffffffe8
 8006078:	ed16 7a07 	vldr	s14, [r6, #-28]	@ 0xffffffe4
 800607c:	f104 0410 	add.w	r4, r4, #16
 8006080:	ed55 5a07 	vldr	s11, [r5, #-28]	@ 0xffffffe4
 8006084:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006088:	ed56 7a05 	vldr	s15, [r6, #-20]	@ 0xffffffec
 800608c:	ed04 6a08 	vstr	s12, [r4, #-32]	@ 0xffffffe0
 8006090:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006094:	ed15 6a05 	vldr	s12, [r5, #-20]	@ 0xffffffec
 8006098:	ed44 6a06 	vstr	s13, [r4, #-24]	@ 0xffffffe8
 800609c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80060a0:	ed04 7a07 	vstr	s14, [r4, #-28]	@ 0xffffffe4
 80060a4:	ed44 7a05 	vstr	s15, [r4, #-20]	@ 0xffffffec
 80060a8:	d1d7      	bne.n	800605a <arm_mult_f32+0x16>
 80060aa:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80060ae:	4420      	add	r0, r4
 80060b0:	4421      	add	r1, r4
 80060b2:	4422      	add	r2, r4
 80060b4:	f013 0303 	ands.w	r3, r3, #3
 80060b8:	d009      	beq.n	80060ce <arm_mult_f32+0x8a>
 80060ba:	ecf0 7a01 	vldmia	r0!, {s15}
 80060be:	3b01      	subs	r3, #1
 80060c0:	ecb1 7a01 	vldmia	r1!, {s14}
 80060c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c8:	ece2 7a01 	vstmia	r2!, {s15}
 80060cc:	d1f5      	bne.n	80060ba <arm_mult_f32+0x76>
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060d0 <arm_radix8_butterfly_f32>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	468a      	mov	sl, r1
 80060da:	468b      	mov	fp, r1
 80060dc:	3304      	adds	r3, #4
 80060de:	ed2d 8b10 	vpush	{d8-d15}
 80060e2:	469c      	mov	ip, r3
 80060e4:	b09d      	sub	sp, #116	@ 0x74
 80060e6:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 80063f4 <arm_radix8_butterfly_f32+0x324>
 80060ea:	9019      	str	r0, [sp, #100]	@ 0x64
 80060ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80060ee:	931b      	str	r3, [sp, #108]	@ 0x6c
 80060f0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80060f4:	f04f 0800 	mov.w	r8, #0
 80060f8:	461a      	mov	r2, r3
 80060fa:	9311      	str	r3, [sp, #68]	@ 0x44
 80060fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006100:	4611      	mov	r1, r2
 8006102:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	0053      	lsls	r3, r2, #1
 800610a:	18d5      	adds	r5, r2, r3
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	0113      	lsls	r3, r2, #4
 8006110:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006112:	194c      	adds	r4, r1, r5
 8006114:	eb02 0609 	add.w	r6, r2, r9
 8006118:	9302      	str	r3, [sp, #8]
 800611a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800611e:	4613      	mov	r3, r2
 8006120:	190a      	adds	r2, r1, r4
 8006122:	eb06 0709 	add.w	r7, r6, r9
 8006126:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800612a:	1888      	adds	r0, r1, r2
 800612c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006130:	4401      	add	r1, r0
 8006132:	3204      	adds	r2, #4
 8006134:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006138:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800613c:	9b00      	ldr	r3, [sp, #0]
 800613e:	3104      	adds	r1, #4
 8006140:	ed5c 7a01 	vldr	s15, [ip, #-4]
 8006144:	44d8      	add	r8, fp
 8006146:	ed90 7a00 	vldr	s14, [r0]
 800614a:	ed94 5a00 	vldr	s10, [r4]
 800614e:	45c2      	cmp	sl, r8
 8006150:	edd7 3a00 	vldr	s7, [r7]
 8006154:	ed96 6a00 	vldr	s12, [r6]
 8006158:	ee37 1a85 	vadd.f32	s2, s15, s10
 800615c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006160:	ee73 4a87 	vadd.f32	s9, s7, s14
 8006164:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8006168:	edd5 7a00 	vldr	s15, [r5]
 800616c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 8006170:	ed11 7a01 	vldr	s14, [r1, #-4]
 8006174:	ee36 2a26 	vadd.f32	s4, s12, s13
 8006178:	ee37 4a87 	vadd.f32	s8, s15, s14
 800617c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006180:	ee71 5a24 	vadd.f32	s11, s2, s9
 8006184:	ee32 6a04 	vadd.f32	s12, s4, s8
 8006188:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800618c:	ee31 1a64 	vsub.f32	s2, s2, s9
 8006190:	ee75 4a86 	vadd.f32	s9, s11, s12
 8006194:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8006198:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800619c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 80061a0:	ee32 2a44 	vsub.f32	s4, s4, s8
 80061a4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80061a8:	ed94 0a01 	vldr	s0, [r4, #4]
 80061ac:	edc4 5a00 	vstr	s11, [r4]
 80061b0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80061b4:	edd6 5a01 	vldr	s11, [r6, #4]
 80061b8:	edd5 2a01 	vldr	s5, [r5, #4]
 80061bc:	ee75 1a27 	vadd.f32	s3, s10, s15
 80061c0:	ed92 4a00 	vldr	s8, [r2]
 80061c4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80061c8:	edd1 4a00 	vldr	s9, [r1]
 80061cc:	ee27 7a09 	vmul.f32	s14, s14, s18
 80061d0:	ee35 3ac4 	vsub.f32	s6, s11, s8
 80061d4:	ed9c 6a00 	vldr	s12, [ip]
 80061d8:	ee72 6ae4 	vsub.f32	s13, s5, s9
 80061dc:	edd0 0a01 	vldr	s1, [r0, #4]
 80061e0:	ed97 5a01 	vldr	s10, [r7, #4]
 80061e4:	ee35 4a84 	vadd.f32	s8, s11, s8
 80061e8:	ee72 4aa4 	vadd.f32	s9, s5, s9
 80061ec:	ee73 5a26 	vadd.f32	s11, s6, s13
 80061f0:	ee76 2a00 	vadd.f32	s5, s12, s0
 80061f4:	ee73 6a66 	vsub.f32	s13, s6, s13
 80061f8:	ee36 6a40 	vsub.f32	s12, s12, s0
 80061fc:	ee35 0a20 	vadd.f32	s0, s10, s1
 8006200:	ee65 5a89 	vmul.f32	s11, s11, s18
 8006204:	ee35 5a60 	vsub.f32	s10, s10, s1
 8006208:	ee32 3a80 	vadd.f32	s6, s5, s0
 800620c:	ee74 0a24 	vadd.f32	s1, s8, s9
 8006210:	ee66 6a89 	vmul.f32	s13, s13, s18
 8006214:	ee74 4a64 	vsub.f32	s9, s8, s9
 8006218:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800621c:	ee75 2a25 	vadd.f32	s5, s10, s11
 8006220:	ee33 0a20 	vadd.f32	s0, s6, s1
 8006224:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006228:	ee33 3a60 	vsub.f32	s6, s6, s1
 800622c:	ee36 5a26 	vadd.f32	s10, s12, s13
 8006230:	ed8c 0a00 	vstr	s0, [ip]
 8006234:	ee76 6a66 	vsub.f32	s13, s12, s13
 8006238:	449c      	add	ip, r3
 800623a:	ee33 6a87 	vadd.f32	s12, s7, s14
 800623e:	ed84 3a01 	vstr	s6, [r4, #4]
 8006242:	ee33 7ac7 	vsub.f32	s14, s7, s14
 8006246:	441c      	add	r4, r3
 8006248:	ee71 3a24 	vadd.f32	s7, s2, s9
 800624c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006250:	ee31 3aa2 	vadd.f32	s6, s3, s5
 8006254:	edc7 3a00 	vstr	s7, [r7]
 8006258:	ee34 1a42 	vsub.f32	s2, s8, s4
 800625c:	edc0 4a00 	vstr	s9, [r0]
 8006260:	ee77 3aa5 	vadd.f32	s7, s15, s11
 8006264:	ee75 4a46 	vsub.f32	s9, s10, s12
 8006268:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800626c:	ed87 1a01 	vstr	s2, [r7, #4]
 8006270:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8006274:	441f      	add	r7, r3
 8006276:	ee32 4a04 	vadd.f32	s8, s4, s8
 800627a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800627e:	ee36 6a05 	vadd.f32	s12, s12, s10
 8006282:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006286:	ed80 4a01 	vstr	s8, [r0, #4]
 800628a:	ed86 3a00 	vstr	s6, [r6]
 800628e:	4418      	add	r0, r3
 8006290:	ed41 1a01 	vstr	s3, [r1, #-4]
 8006294:	ed42 3a01 	vstr	s7, [r2, #-4]
 8006298:	edc5 7a00 	vstr	s15, [r5]
 800629c:	edc6 4a01 	vstr	s9, [r6, #4]
 80062a0:	441e      	add	r6, r3
 80062a2:	ed81 6a00 	vstr	s12, [r1]
 80062a6:	4419      	add	r1, r3
 80062a8:	edc2 5a00 	vstr	s11, [r2]
 80062ac:	441a      	add	r2, r3
 80062ae:	ed85 7a01 	vstr	s14, [r5, #4]
 80062b2:	441d      	add	r5, r3
 80062b4:	f63f af44 	bhi.w	8006140 <arm_radix8_butterfly_f32+0x70>
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062bc:	2b07      	cmp	r3, #7
 80062be:	f240 81f4 	bls.w	80066aa <arm_radix8_butterfly_f32+0x5da>
 80062c2:	9901      	ldr	r1, [sp, #4]
 80062c4:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80062c8:	9d02      	ldr	r5, [sp, #8]
 80062ca:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 80062ce:	3101      	adds	r1, #1
 80062d0:	eb04 000e 	add.w	r0, r4, lr
 80062d4:	00e4      	lsls	r4, r4, #3
 80062d6:	3508      	adds	r5, #8
 80062d8:	4419      	add	r1, r3
 80062da:	eb00 0c0e 	add.w	ip, r0, lr
 80062de:	9413      	str	r4, [sp, #76]	@ 0x4c
 80062e0:	00c0      	lsls	r0, r0, #3
 80062e2:	185e      	adds	r6, r3, r1
 80062e4:	4617      	mov	r7, r2
 80062e6:	9218      	str	r2, [sp, #96]	@ 0x60
 80062e8:	f109 0908 	add.w	r9, r9, #8
 80062ec:	199c      	adds	r4, r3, r6
 80062ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80062f2:	9012      	str	r0, [sp, #72]	@ 0x48
 80062f4:	195d      	adds	r5, r3, r5
 80062f6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80062f8:	443a      	add	r2, r7
 80062fa:	950c      	str	r5, [sp, #48]	@ 0x30
 80062fc:	4698      	mov	r8, r3
 80062fe:	4420      	add	r0, r4
 8006300:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8006302:	19d7      	adds	r7, r2, r7
 8006304:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8006308:	4405      	add	r5, r0
 800630a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800630e:	9710      	str	r7, [sp, #64]	@ 0x40
 8006310:	eb0c 070e 	add.w	r7, ip, lr
 8006314:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006318:	3404      	adds	r4, #4
 800631a:	3004      	adds	r0, #4
 800631c:	44c8      	add	r8, r9
 800631e:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
 8006322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006324:	940a      	str	r4, [sp, #40]	@ 0x28
 8006326:	9009      	str	r0, [sp, #36]	@ 0x24
 8006328:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800632c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800632e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006332:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8006334:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
 8006338:	eb07 080e 	add.w	r8, r7, lr
 800633c:	eb04 0900 	add.w	r9, r4, r0
 8006340:	00f8      	lsls	r0, r7, #3
 8006342:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 8006346:	3504      	adds	r5, #4
 8006348:	4607      	mov	r7, r0
 800634a:	9017      	str	r0, [sp, #92]	@ 0x5c
 800634c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800634e:	4618      	mov	r0, r3
 8006350:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 8006354:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006356:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800635a:	18e3      	adds	r3, r4, r3
 800635c:	9508      	str	r5, [sp, #32]
 800635e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006360:	910e      	str	r1, [sp, #56]	@ 0x38
 8006362:	4621      	mov	r1, r4
 8006364:	eb04 0805 	add.w	r8, r4, r5
 8006368:	9304      	str	r3, [sp, #16]
 800636a:	19e5      	adds	r5, r4, r7
 800636c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 8006370:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006372:	9316      	str	r3, [sp, #88]	@ 0x58
 8006374:	190b      	adds	r3, r1, r4
 8006376:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006378:	9505      	str	r5, [sp, #20]
 800637a:	9303      	str	r3, [sp, #12]
 800637c:	f100 0308 	add.w	r3, r0, #8
 8006380:	9707      	str	r7, [sp, #28]
 8006382:	4638      	mov	r0, r7
 8006384:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006386:	2301      	movs	r3, #1
 8006388:	9306      	str	r3, [sp, #24]
 800638a:	9b00      	ldr	r3, [sp, #0]
 800638c:	ed90 fa00 	vldr	s30, [r0]
 8006390:	edd0 ba01 	vldr	s23, [r0, #4]
 8006394:	9803      	ldr	r0, [sp, #12]
 8006396:	9903      	ldr	r1, [sp, #12]
 8006398:	ed90 ba01 	vldr	s22, [r0, #4]
 800639c:	9804      	ldr	r0, [sp, #16]
 800639e:	edd1 ea00 	vldr	s29, [r1]
 80063a2:	edd0 aa01 	vldr	s21, [r0, #4]
 80063a6:	9805      	ldr	r0, [sp, #20]
 80063a8:	9905      	ldr	r1, [sp, #20]
 80063aa:	edd0 7a01 	vldr	s15, [r0, #4]
 80063ae:	ed91 da00 	vldr	s26, [r1]
 80063b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80063b4:	9c04      	ldr	r4, [sp, #16]
 80063b6:	edcd 7a01 	vstr	s15, [sp, #4]
 80063ba:	edd8 7a01 	vldr	s15, [r8, #4]
 80063be:	9100      	str	r1, [sp, #0]
 80063c0:	edd2 fa00 	vldr	s31, [r2]
 80063c4:	ed94 ea00 	vldr	s28, [r4]
 80063c8:	ed92 ca01 	vldr	s24, [r2, #4]
 80063cc:	f8dd e020 	ldr.w	lr, [sp, #32]
 80063d0:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80063d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80063d4:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80063d6:	edd9 da00 	vldr	s27, [r9]
 80063da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80063dc:	edd8 ca00 	vldr	s25, [r8]
 80063e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80063e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80063e4:	f8dd c018 	ldr.w	ip, [sp, #24]
 80063e8:	ed99 aa01 	vldr	s20, [r9, #4]
 80063ec:	edcd 7a02 	vstr	s15, [sp, #8]
 80063f0:	9800      	ldr	r0, [sp, #0]
 80063f2:	e001      	b.n	80063f8 <arm_radix8_butterfly_f32+0x328>
 80063f4:	3f3504f3 	.word	0x3f3504f3
 80063f8:	edd5 3a00 	vldr	s7, [r5]
 80063fc:	44dc      	add	ip, fp
 80063fe:	ed91 7a00 	vldr	s14, [r1]
 8006402:	edd4 8a00 	vldr	s17, [r4]
 8006406:	45e2      	cmp	sl, ip
 8006408:	ed57 7a01 	vldr	s15, [r7, #-4]
 800640c:	ed90 5a00 	vldr	s10, [r0]
 8006410:	ed56 5a01 	vldr	s11, [r6, #-4]
 8006414:	ee38 6aa7 	vadd.f32	s12, s17, s15
 8006418:	ed92 1a00 	vldr	s2, [r2]
 800641c:	ee78 4ae7 	vsub.f32	s9, s17, s15
 8006420:	ed1e 4a01 	vldr	s8, [lr, #-4]
 8006424:	ee75 9a25 	vadd.f32	s19, s10, s11
 8006428:	ee31 3a07 	vadd.f32	s6, s2, s14
 800642c:	ed92 8a01 	vldr	s16, [r2, #4]
 8006430:	ee73 6a84 	vadd.f32	s13, s7, s8
 8006434:	ee75 5a65 	vsub.f32	s11, s10, s11
 8006438:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800643c:	ee73 1a06 	vadd.f32	s3, s6, s12
 8006440:	ee39 5aa6 	vadd.f32	s10, s19, s13
 8006444:	ee75 7a84 	vadd.f32	s15, s11, s8
 8006448:	ee31 1a47 	vsub.f32	s2, s2, s14
 800644c:	ee31 7a85 	vadd.f32	s14, s3, s10
 8006450:	ee67 7a89 	vmul.f32	s15, s15, s18
 8006454:	ee33 3a46 	vsub.f32	s6, s6, s12
 8006458:	ed82 7a00 	vstr	s14, [r2]
 800645c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 8006460:	ed96 6a00 	vldr	s12, [r6]
 8006464:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8006468:	edd5 3a01 	vldr	s7, [r5, #4]
 800646c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 8006470:	ed90 7a01 	vldr	s14, [r0, #4]
 8006474:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8006478:	edde 4a00 	vldr	s9, [lr]
 800647c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8006480:	ee77 2a46 	vsub.f32	s5, s14, s12
 8006484:	edd1 6a01 	vldr	s13, [r1, #4]
 8006488:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800648c:	edd7 0a00 	vldr	s1, [r7]
 8006490:	ee77 5a06 	vadd.f32	s11, s14, s12
 8006494:	ed94 7a01 	vldr	s14, [r4, #4]
 8006498:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800649c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 80064a0:	ee78 4a66 	vsub.f32	s9, s16, s13
 80064a4:	ee78 3a26 	vadd.f32	s7, s16, s13
 80064a8:	ee72 2aa7 	vadd.f32	s5, s5, s15
 80064ac:	ee77 6a20 	vadd.f32	s13, s14, s1
 80064b0:	ee24 4a09 	vmul.f32	s8, s8, s18
 80064b4:	ee37 7a60 	vsub.f32	s14, s14, s1
 80064b8:	ee20 8a09 	vmul.f32	s16, s0, s18
 80064bc:	ee75 0a86 	vadd.f32	s1, s11, s12
 80064c0:	ee33 0aa6 	vadd.f32	s0, s7, s13
 80064c4:	ee62 2a89 	vmul.f32	s5, s5, s18
 80064c8:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80064cc:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80064d0:	ee77 7a62 	vsub.f32	s15, s14, s5
 80064d4:	ee74 5a88 	vadd.f32	s11, s9, s16
 80064d8:	ee34 8ac8 	vsub.f32	s16, s9, s16
 80064dc:	ee77 4a22 	vadd.f32	s9, s14, s5
 80064e0:	ee71 2a04 	vadd.f32	s5, s2, s8
 80064e4:	ee31 7a44 	vsub.f32	s14, s2, s8
 80064e8:	ee30 1a60 	vsub.f32	s2, s0, s1
 80064ec:	ee73 1a06 	vadd.f32	s3, s6, s12
 80064f0:	ee33 6a46 	vsub.f32	s12, s6, s12
 80064f4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 80064f8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 80064fc:	ee38 4a68 	vsub.f32	s8, s16, s17
 8006500:	ee75 3ac2 	vsub.f32	s7, s11, s4
 8006504:	ee72 5a25 	vadd.f32	s11, s4, s11
 8006508:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800650c:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8006510:	ee77 2a27 	vadd.f32	s5, s14, s15
 8006514:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006518:	ee78 7a88 	vadd.f32	s15, s17, s16
 800651c:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8006520:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8006524:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8006528:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800652c:	ee6f 9a21 	vmul.f32	s19, s30, s3
 8006530:	ee70 0a20 	vadd.f32	s1, s0, s1
 8006534:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8006538:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800653c:	ee2f 3a03 	vmul.f32	s6, s30, s6
 8006540:	edc2 0a01 	vstr	s1, [r2, #4]
 8006544:	ee38 8a88 	vadd.f32	s16, s17, s16
 8006548:	441a      	add	r2, r3
 800654a:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800654e:	ee31 5a45 	vsub.f32	s10, s2, s10
 8006552:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8006556:	ed81 8a00 	vstr	s16, [r1]
 800655a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800655e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8006562:	ed81 5a01 	vstr	s10, [r1, #4]
 8006566:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800656a:	edcd 3a00 	vstr	s7, [sp]
 800656e:	ed9d 5a02 	vldr	s10, [sp, #8]
 8006572:	ee2d 8a06 	vmul.f32	s16, s26, s12
 8006576:	eddd 3a01 	vldr	s7, [sp, #4]
 800657a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800657e:	ed84 0a00 	vstr	s0, [r4]
 8006582:	ee65 4a24 	vmul.f32	s9, s10, s9
 8006586:	ed84 3a01 	vstr	s6, [r4, #4]
 800658a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800658e:	ee23 6a86 	vmul.f32	s12, s7, s12
 8006592:	eddd 3a00 	vldr	s7, [sp]
 8006596:	ee25 5a25 	vmul.f32	s10, s10, s11
 800659a:	4419      	add	r1, r3
 800659c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80065a0:	441c      	add	r4, r3
 80065a2:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80065a6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80065aa:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80065ae:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80065b2:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80065b6:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80065ba:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80065be:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80065c2:	ee2d 4a84 	vmul.f32	s8, s27, s8
 80065c6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 80065ca:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 80065ce:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80065d2:	ee38 8a01 	vadd.f32	s16, s16, s2
 80065d6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80065da:	ee39 5a85 	vadd.f32	s10, s19, s10
 80065de:	ee75 4ae4 	vsub.f32	s9, s11, s9
 80065e2:	ed07 8a01 	vstr	s16, [r7, #-4]
 80065e6:	ee30 0a21 	vadd.f32	s0, s0, s3
 80065ea:	ed87 6a00 	vstr	s12, [r7]
 80065ee:	ee74 2a62 	vsub.f32	s5, s8, s5
 80065f2:	edc0 0a00 	vstr	s1, [r0]
 80065f6:	ee33 3a28 	vadd.f32	s6, s6, s17
 80065fa:	edc0 3a01 	vstr	s7, [r0, #4]
 80065fe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006602:	ed0e 5a01 	vstr	s10, [lr, #-4]
 8006606:	edce 4a00 	vstr	s9, [lr]
 800660a:	4418      	add	r0, r3
 800660c:	ed06 0a01 	vstr	s0, [r6, #-4]
 8006610:	441f      	add	r7, r3
 8006612:	edc6 2a00 	vstr	s5, [r6]
 8006616:	449e      	add	lr, r3
 8006618:	ed85 3a00 	vstr	s6, [r5]
 800661c:	441e      	add	r6, r3
 800661e:	ed85 7a01 	vstr	s14, [r5, #4]
 8006622:	441d      	add	r5, r3
 8006624:	f63f aee8 	bhi.w	80063f8 <arm_radix8_butterfly_f32+0x328>
 8006628:	9a06      	ldr	r2, [sp, #24]
 800662a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800662c:	3201      	adds	r2, #1
 800662e:	4611      	mov	r1, r2
 8006630:	9206      	str	r2, [sp, #24]
 8006632:	9a07      	ldr	r2, [sp, #28]
 8006634:	4402      	add	r2, r0
 8006636:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8006638:	9207      	str	r2, [sp, #28]
 800663a:	9a03      	ldr	r2, [sp, #12]
 800663c:	4402      	add	r2, r0
 800663e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006640:	9203      	str	r2, [sp, #12]
 8006642:	9a04      	ldr	r2, [sp, #16]
 8006644:	4402      	add	r2, r0
 8006646:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8006648:	9204      	str	r2, [sp, #16]
 800664a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800664c:	4491      	add	r9, r2
 800664e:	9a05      	ldr	r2, [sp, #20]
 8006650:	4402      	add	r2, r0
 8006652:	9205      	str	r2, [sp, #20]
 8006654:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006656:	4490      	add	r8, r2
 8006658:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800665a:	3208      	adds	r2, #8
 800665c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800665e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006660:	3208      	adds	r2, #8
 8006662:	920e      	str	r2, [sp, #56]	@ 0x38
 8006664:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006666:	3208      	adds	r2, #8
 8006668:	920d      	str	r2, [sp, #52]	@ 0x34
 800666a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800666c:	3208      	adds	r2, #8
 800666e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006670:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006672:	3208      	adds	r2, #8
 8006674:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006678:	3208      	adds	r2, #8
 800667a:	920a      	str	r2, [sp, #40]	@ 0x28
 800667c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800667e:	3208      	adds	r2, #8
 8006680:	9209      	str	r2, [sp, #36]	@ 0x24
 8006682:	9a08      	ldr	r2, [sp, #32]
 8006684:	3208      	adds	r2, #8
 8006686:	9208      	str	r2, [sp, #32]
 8006688:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800668a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800668c:	4622      	mov	r2, r4
 800668e:	4288      	cmp	r0, r1
 8006690:	d005      	beq.n	800669e <arm_radix8_butterfly_f32+0x5ce>
 8006692:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8006694:	4621      	mov	r1, r4
 8006696:	4401      	add	r1, r0
 8006698:	9807      	ldr	r0, [sp, #28]
 800669a:	9110      	str	r1, [sp, #64]	@ 0x40
 800669c:	e676      	b.n	800638c <arm_radix8_butterfly_f32+0x2bc>
 800669e:	4683      	mov	fp, r0
 80066a0:	f8bd e060 	ldrh.w	lr, [sp, #96]	@ 0x60
 80066a4:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
 80066a8:	e522      	b.n	80060f0 <arm_radix8_butterfly_f32+0x20>
 80066aa:	b01d      	add	sp, #116	@ 0x74
 80066ac:	ecbd 8b10 	vpop	{d8-d15}
 80066b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080066b4 <ai_buffer_get_size>:
 80066b4:	b368      	cbz	r0, 8006712 <ai_buffer_get_size+0x5e>
 80066b6:	4b17      	ldr	r3, [pc, #92]	@ (8006714 <ai_buffer_get_size+0x60>)
 80066b8:	4a17      	ldr	r2, [pc, #92]	@ (8006718 <ai_buffer_get_size+0x64>)
 80066ba:	b410      	push	{r4}
 80066bc:	6804      	ldr	r4, [r0, #0]
 80066be:	4023      	ands	r3, r4
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d123      	bne.n	800670c <ai_buffer_get_size+0x58>
 80066c4:	b311      	cbz	r1, 800670c <ai_buffer_get_size+0x58>
 80066c6:	6984      	ldr	r4, [r0, #24]
 80066c8:	6862      	ldr	r2, [r4, #4]
 80066ca:	321f      	adds	r2, #31
 80066cc:	f022 021f 	bic.w	r2, r2, #31
 80066d0:	7d03      	ldrb	r3, [r0, #20]
 80066d2:	6941      	ldr	r1, [r0, #20]
 80066d4:	f1a3 0301 	sub.w	r3, r3, #1
 80066d8:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80066dc:	fab3 f383 	clz	r3, r3
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80066e6:	da0c      	bge.n	8006702 <ai_buffer_get_size+0x4e>
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d103      	bne.n	80066f4 <ai_buffer_get_size+0x40>
 80066ec:	2802      	cmp	r0, #2
 80066ee:	f04f 0302 	mov.w	r3, #2
 80066f2:	d006      	beq.n	8006702 <ai_buffer_get_size+0x4e>
 80066f4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80066f8:	3301      	adds	r3, #1
 80066fa:	4298      	cmp	r0, r3
 80066fc:	fb01 f202 	mul.w	r2, r1, r2
 8006700:	d1f2      	bne.n	80066e8 <ai_buffer_get_size+0x34>
 8006702:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8006706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	6984      	ldr	r4, [r0, #24]
 800670e:	6862      	ldr	r2, [r4, #4]
 8006710:	e7de      	b.n	80066d0 <ai_buffer_get_size+0x1c>
 8006712:	4770      	bx	lr
 8006714:	017fffff 	.word	0x017fffff
 8006718:	000400c0 	.word	0x000400c0

0800671c <ai_buffer_array_sane>:
 800671c:	b138      	cbz	r0, 800672e <ai_buffer_array_sane+0x12>
 800671e:	6843      	ldr	r3, [r0, #4]
 8006720:	b123      	cbz	r3, 800672c <ai_buffer_array_sane+0x10>
 8006722:	8840      	ldrh	r0, [r0, #2]
 8006724:	3800      	subs	r0, #0
 8006726:	bf18      	it	ne
 8006728:	2001      	movne	r0, #1
 800672a:	4770      	bx	lr
 800672c:	4618      	mov	r0, r3
 800672e:	4770      	bx	lr

08006730 <ai_buffer_array_item_set_address>:
 8006730:	b150      	cbz	r0, 8006748 <ai_buffer_array_item_set_address+0x18>
 8006732:	6843      	ldr	r3, [r0, #4]
 8006734:	b14b      	cbz	r3, 800674a <ai_buffer_array_item_set_address+0x1a>
 8006736:	8840      	ldrh	r0, [r0, #2]
 8006738:	b900      	cbnz	r0, 800673c <ai_buffer_array_item_set_address+0xc>
 800673a:	4770      	bx	lr
 800673c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8006740:	2001      	movs	r0, #1
 8006742:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006746:	604a      	str	r2, [r1, #4]
 8006748:	4770      	bx	lr
 800674a:	4618      	mov	r0, r3
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop

08006750 <_ai_platform_acquire_crc>:
 8006750:	2001      	movs	r0, #1
 8006752:	4770      	bx	lr

08006754 <_ai_platform_release_crc>:
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop

08006758 <ai_platform_get_weights_map>:
 8006758:	2900      	cmp	r1, #0
 800675a:	bf18      	it	ne
 800675c:	2800      	cmpne	r0, #0
 800675e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006760:	bf0c      	ite	eq
 8006762:	2401      	moveq	r4, #1
 8006764:	2400      	movne	r4, #0
 8006766:	2a00      	cmp	r2, #0
 8006768:	bf08      	it	eq
 800676a:	f044 0401 	orreq.w	r4, r4, #1
 800676e:	b114      	cbz	r4, 8006776 <ai_platform_get_weights_map+0x1e>
 8006770:	2400      	movs	r4, #0
 8006772:	4620      	mov	r0, r4
 8006774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006776:	4616      	mov	r6, r2
 8006778:	4b22      	ldr	r3, [pc, #136]	@ (8006804 <ai_platform_get_weights_map+0xac>)
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	4605      	mov	r5, r0
 800677e:	460f      	mov	r7, r1
 8006780:	429a      	cmp	r2, r3
 8006782:	d022      	beq.n	80067ca <ai_platform_get_weights_map+0x72>
 8006784:	6870      	ldr	r0, [r6, #4]
 8006786:	2800      	cmp	r0, #0
 8006788:	d0f2      	beq.n	8006770 <ai_platform_get_weights_map+0x18>
 800678a:	6806      	ldr	r6, [r0, #0]
 800678c:	429e      	cmp	r6, r3
 800678e:	d006      	beq.n	800679e <ai_platform_get_weights_map+0x46>
 8006790:	f1a1 0401 	sub.w	r4, r1, #1
 8006794:	6028      	str	r0, [r5, #0]
 8006796:	fab4 f484 	clz	r4, r4
 800679a:	0964      	lsrs	r4, r4, #5
 800679c:	e7e9      	b.n	8006772 <ai_platform_get_weights_map+0x1a>
 800679e:	3d04      	subs	r5, #4
 80067a0:	4602      	mov	r2, r0
 80067a2:	4621      	mov	r1, r4
 80067a4:	e000      	b.n	80067a8 <ai_platform_get_weights_map+0x50>
 80067a6:	4619      	mov	r1, r3
 80067a8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80067ac:	42b3      	cmp	r3, r6
 80067ae:	d025      	beq.n	80067fc <ai_platform_get_weights_map+0xa4>
 80067b0:	f845 3f04 	str.w	r3, [r5, #4]!
 80067b4:	1c4b      	adds	r3, r1, #1
 80067b6:	429f      	cmp	r7, r3
 80067b8:	d8f5      	bhi.n	80067a6 <ai_platform_get_weights_map+0x4e>
 80067ba:	d1da      	bne.n	8006772 <ai_platform_get_weights_map+0x1a>
 80067bc:	3102      	adds	r1, #2
 80067be:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80067c2:	42b3      	cmp	r3, r6
 80067c4:	d1d5      	bne.n	8006772 <ai_platform_get_weights_map+0x1a>
 80067c6:	2401      	movs	r4, #1
 80067c8:	e7d3      	b.n	8006772 <ai_platform_get_weights_map+0x1a>
 80067ca:	1d30      	adds	r0, r6, #4
 80067cc:	f7ff ffa6 	bl	800671c <ai_buffer_array_sane>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d0cd      	beq.n	8006770 <ai_platform_get_weights_map+0x18>
 80067d4:	88f3      	ldrh	r3, [r6, #6]
 80067d6:	429f      	cmp	r7, r3
 80067d8:	d1ca      	bne.n	8006770 <ai_platform_get_weights_map+0x18>
 80067da:	3d04      	subs	r5, #4
 80067dc:	4622      	mov	r2, r4
 80067de:	68b3      	ldr	r3, [r6, #8]
 80067e0:	4423      	add	r3, r4
 80067e2:	341c      	adds	r4, #28
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	b123      	cbz	r3, 80067f2 <ai_platform_get_weights_map+0x9a>
 80067e8:	3201      	adds	r2, #1
 80067ea:	f845 3f04 	str.w	r3, [r5, #4]!
 80067ee:	4297      	cmp	r7, r2
 80067f0:	d8f5      	bhi.n	80067de <ai_platform_get_weights_map+0x86>
 80067f2:	1abc      	subs	r4, r7, r2
 80067f4:	fab4 f484 	clz	r4, r4
 80067f8:	0964      	lsrs	r4, r4, #5
 80067fa:	e7ba      	b.n	8006772 <ai_platform_get_weights_map+0x1a>
 80067fc:	428f      	cmp	r7, r1
 80067fe:	d1b8      	bne.n	8006772 <ai_platform_get_weights_map+0x1a>
 8006800:	e7e1      	b.n	80067c6 <ai_platform_get_weights_map+0x6e>
 8006802:	bf00      	nop
 8006804:	a1facade 	.word	0xa1facade

08006808 <ai_platform_get_activations_map>:
 8006808:	2900      	cmp	r1, #0
 800680a:	bf18      	it	ne
 800680c:	2800      	cmpne	r0, #0
 800680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006810:	bf0c      	ite	eq
 8006812:	2401      	moveq	r4, #1
 8006814:	2400      	movne	r4, #0
 8006816:	2a00      	cmp	r2, #0
 8006818:	bf08      	it	eq
 800681a:	f044 0401 	orreq.w	r4, r4, #1
 800681e:	b114      	cbz	r4, 8006826 <ai_platform_get_activations_map+0x1e>
 8006820:	2400      	movs	r4, #0
 8006822:	4620      	mov	r0, r4
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006826:	4616      	mov	r6, r2
 8006828:	4b22      	ldr	r3, [pc, #136]	@ (80068b4 <ai_platform_get_activations_map+0xac>)
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	4605      	mov	r5, r0
 800682e:	460f      	mov	r7, r1
 8006830:	429a      	cmp	r2, r3
 8006832:	d022      	beq.n	800687a <ai_platform_get_activations_map+0x72>
 8006834:	6a30      	ldr	r0, [r6, #32]
 8006836:	2800      	cmp	r0, #0
 8006838:	d0f2      	beq.n	8006820 <ai_platform_get_activations_map+0x18>
 800683a:	6806      	ldr	r6, [r0, #0]
 800683c:	429e      	cmp	r6, r3
 800683e:	d006      	beq.n	800684e <ai_platform_get_activations_map+0x46>
 8006840:	f1a1 0401 	sub.w	r4, r1, #1
 8006844:	6028      	str	r0, [r5, #0]
 8006846:	fab4 f484 	clz	r4, r4
 800684a:	0964      	lsrs	r4, r4, #5
 800684c:	e7e9      	b.n	8006822 <ai_platform_get_activations_map+0x1a>
 800684e:	3d04      	subs	r5, #4
 8006850:	4602      	mov	r2, r0
 8006852:	4621      	mov	r1, r4
 8006854:	e000      	b.n	8006858 <ai_platform_get_activations_map+0x50>
 8006856:	4619      	mov	r1, r3
 8006858:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800685c:	42b3      	cmp	r3, r6
 800685e:	d026      	beq.n	80068ae <ai_platform_get_activations_map+0xa6>
 8006860:	f845 3f04 	str.w	r3, [r5, #4]!
 8006864:	1c4b      	adds	r3, r1, #1
 8006866:	429f      	cmp	r7, r3
 8006868:	d8f5      	bhi.n	8006856 <ai_platform_get_activations_map+0x4e>
 800686a:	d1da      	bne.n	8006822 <ai_platform_get_activations_map+0x1a>
 800686c:	3102      	adds	r1, #2
 800686e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006872:	42b3      	cmp	r3, r6
 8006874:	d1d5      	bne.n	8006822 <ai_platform_get_activations_map+0x1a>
 8006876:	2401      	movs	r4, #1
 8006878:	e7d3      	b.n	8006822 <ai_platform_get_activations_map+0x1a>
 800687a:	f106 000c 	add.w	r0, r6, #12
 800687e:	f7ff ff4d 	bl	800671c <ai_buffer_array_sane>
 8006882:	2800      	cmp	r0, #0
 8006884:	d0cc      	beq.n	8006820 <ai_platform_get_activations_map+0x18>
 8006886:	89f3      	ldrh	r3, [r6, #14]
 8006888:	429f      	cmp	r7, r3
 800688a:	d1c9      	bne.n	8006820 <ai_platform_get_activations_map+0x18>
 800688c:	3d04      	subs	r5, #4
 800688e:	4622      	mov	r2, r4
 8006890:	6933      	ldr	r3, [r6, #16]
 8006892:	4423      	add	r3, r4
 8006894:	341c      	adds	r4, #28
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	b123      	cbz	r3, 80068a4 <ai_platform_get_activations_map+0x9c>
 800689a:	3201      	adds	r2, #1
 800689c:	f845 3f04 	str.w	r3, [r5, #4]!
 80068a0:	4297      	cmp	r7, r2
 80068a2:	d8f5      	bhi.n	8006890 <ai_platform_get_activations_map+0x88>
 80068a4:	1abc      	subs	r4, r7, r2
 80068a6:	fab4 f484 	clz	r4, r4
 80068aa:	0964      	lsrs	r4, r4, #5
 80068ac:	e7b9      	b.n	8006822 <ai_platform_get_activations_map+0x1a>
 80068ae:	428f      	cmp	r7, r1
 80068b0:	d1b7      	bne.n	8006822 <ai_platform_get_activations_map+0x1a>
 80068b2:	e7e0      	b.n	8006876 <ai_platform_get_activations_map+0x6e>
 80068b4:	a1facade 	.word	0xa1facade

080068b8 <ai_platform_bind_network_params>:
 80068b8:	2a00      	cmp	r2, #0
 80068ba:	bf18      	it	ne
 80068bc:	2900      	cmpne	r1, #0
 80068be:	d010      	beq.n	80068e2 <ai_platform_bind_network_params+0x2a>
 80068c0:	b178      	cbz	r0, 80068e2 <ai_platform_bind_network_params+0x2a>
 80068c2:	4603      	mov	r3, r0
 80068c4:	4808      	ldr	r0, [pc, #32]	@ (80068e8 <ai_platform_bind_network_params+0x30>)
 80068c6:	f103 0c0c 	add.w	ip, r3, #12
 80068ca:	f843 0b04 	str.w	r0, [r3], #4
 80068ce:	c903      	ldmia	r1, {r0, r1}
 80068d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80068d4:	2301      	movs	r3, #1
 80068d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068da:	e88c 0003 	stmia.w	ip, {r0, r1}
 80068de:	4618      	mov	r0, r3
 80068e0:	4770      	bx	lr
 80068e2:	2300      	movs	r3, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	4770      	bx	lr
 80068e8:	a1facade 	.word	0xa1facade

080068ec <ai_platform_network_get_error>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	2800      	cmp	r0, #0
 80068f0:	d03f      	beq.n	8006972 <ai_platform_network_get_error+0x86>
 80068f2:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae8 <ai_platform_network_get_error+0x1fc>)
 80068f4:	4604      	mov	r4, r0
 80068f6:	6802      	ldr	r2, [r0, #0]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d13a      	bne.n	8006972 <ai_platform_network_get_error+0x86>
 80068fc:	f7ff ff28 	bl	8006750 <_ai_platform_acquire_crc>
 8006900:	4b7a      	ldr	r3, [pc, #488]	@ (8006aec <ai_platform_network_get_error+0x200>)
 8006902:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800690c:	189a      	adds	r2, r3, r2
 800690e:	2a01      	cmp	r2, #1
 8006910:	f240 8086 	bls.w	8006a20 <ai_platform_network_get_error+0x134>
 8006914:	f240 4249 	movw	r2, #1097	@ 0x449
 8006918:	4293      	cmp	r3, r2
 800691a:	f000 8081 	beq.w	8006a20 <ai_platform_network_get_error+0x134>
 800691e:	4a74      	ldr	r2, [pc, #464]	@ (8006af0 <ai_platform_network_get_error+0x204>)
 8006920:	6813      	ldr	r3, [r2, #0]
 8006922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006926:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800692a:	f000 8087 	beq.w	8006a3c <ai_platform_network_get_error+0x150>
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	f240 4183 	movw	r1, #1155	@ 0x483
 8006934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006938:	428b      	cmp	r3, r1
 800693a:	f000 80a9 	beq.w	8006a90 <ai_platform_network_get_error+0x1a4>
 800693e:	6813      	ldr	r3, [r2, #0]
 8006940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006944:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006948:	f000 80c0 	beq.w	8006acc <ai_platform_network_get_error+0x1e0>
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8082 	bne.w	8006a5c <ai_platform_network_get_error+0x170>
 8006958:	4a66      	ldr	r2, [pc, #408]	@ (8006af4 <ai_platform_network_get_error+0x208>)
 800695a:	2301      	movs	r3, #1
 800695c:	6093      	str	r3, [r2, #8]
 800695e:	6893      	ldr	r3, [r2, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1fc      	bne.n	800695e <ai_platform_network_get_error+0x72>
 8006964:	4964      	ldr	r1, [pc, #400]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006966:	4b65      	ldr	r3, [pc, #404]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006968:	6011      	str	r1, [r2, #0]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d075      	beq.n	8006a5c <ai_platform_network_get_error+0x170>
 8006970:	e7fe      	b.n	8006970 <ai_platform_network_get_error+0x84>
 8006972:	f7ff feed 	bl	8006750 <_ai_platform_acquire_crc>
 8006976:	4b5d      	ldr	r3, [pc, #372]	@ (8006aec <ai_platform_network_get_error+0x200>)
 8006978:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006982:	185a      	adds	r2, r3, r1
 8006984:	2a01      	cmp	r2, #1
 8006986:	d929      	bls.n	80069dc <ai_platform_network_get_error+0xf0>
 8006988:	f240 4249 	movw	r2, #1097	@ 0x449
 800698c:	4293      	cmp	r3, r2
 800698e:	d025      	beq.n	80069dc <ai_platform_network_get_error+0xf0>
 8006990:	4a57      	ldr	r2, [pc, #348]	@ (8006af0 <ai_platform_network_get_error+0x204>)
 8006992:	6813      	ldr	r3, [r2, #0]
 8006994:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006998:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800699c:	d02b      	beq.n	80069f6 <ai_platform_network_get_error+0x10a>
 800699e:	6813      	ldr	r3, [r2, #0]
 80069a0:	f240 4183 	movw	r1, #1155	@ 0x483
 80069a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069a8:	428b      	cmp	r3, r1
 80069aa:	d060      	beq.n	8006a6e <ai_platform_network_get_error+0x182>
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069b2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80069b6:	d07c      	beq.n	8006ab2 <ai_platform_network_get_error+0x1c6>
 80069b8:	6813      	ldr	r3, [r2, #0]
 80069ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d129      	bne.n	8006a16 <ai_platform_network_get_error+0x12a>
 80069c2:	4a4c      	ldr	r2, [pc, #304]	@ (8006af4 <ai_platform_network_get_error+0x208>)
 80069c4:	2301      	movs	r3, #1
 80069c6:	6093      	str	r3, [r2, #8]
 80069c8:	6893      	ldr	r3, [r2, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1fc      	bne.n	80069c8 <ai_platform_network_get_error+0xdc>
 80069ce:	494a      	ldr	r1, [pc, #296]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 80069d0:	4b4a      	ldr	r3, [pc, #296]	@ (8006afc <ai_platform_network_get_error+0x210>)
 80069d2:	6011      	str	r1, [r2, #0]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d01d      	beq.n	8006a16 <ai_platform_network_get_error+0x12a>
 80069da:	e7fe      	b.n	80069da <ai_platform_network_get_error+0xee>
 80069dc:	4a45      	ldr	r2, [pc, #276]	@ (8006af4 <ai_platform_network_get_error+0x208>)
 80069de:	2301      	movs	r3, #1
 80069e0:	6093      	str	r3, [r2, #8]
 80069e2:	6893      	ldr	r3, [r2, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1fc      	bne.n	80069e2 <ai_platform_network_get_error+0xf6>
 80069e8:	4943      	ldr	r1, [pc, #268]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 80069ea:	4b44      	ldr	r3, [pc, #272]	@ (8006afc <ai_platform_network_get_error+0x210>)
 80069ec:	6011      	str	r1, [r2, #0]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d010      	beq.n	8006a16 <ai_platform_network_get_error+0x12a>
 80069f4:	e7fe      	b.n	80069f4 <ai_platform_network_get_error+0x108>
 80069f6:	4a42      	ldr	r2, [pc, #264]	@ (8006b00 <ai_platform_network_get_error+0x214>)
 80069f8:	2301      	movs	r3, #1
 80069fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80069fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1fb      	bne.n	80069fe <ai_platform_network_get_error+0x112>
 8006a06:	493c      	ldr	r1, [pc, #240]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006a08:	4b3c      	ldr	r3, [pc, #240]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006a0a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006a0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d111      	bne.n	8006a3a <ai_platform_network_get_error+0x14e>
 8006a16:	f7ff fe9d 	bl	8006754 <_ai_platform_release_crc>
 8006a1a:	f241 0010 	movw	r0, #4112	@ 0x1010
 8006a1e:	bd10      	pop	{r4, pc}
 8006a20:	4a34      	ldr	r2, [pc, #208]	@ (8006af4 <ai_platform_network_get_error+0x208>)
 8006a22:	2301      	movs	r3, #1
 8006a24:	6093      	str	r3, [r2, #8]
 8006a26:	6893      	ldr	r3, [r2, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1fc      	bne.n	8006a26 <ai_platform_network_get_error+0x13a>
 8006a2c:	4932      	ldr	r1, [pc, #200]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006a2e:	4b33      	ldr	r3, [pc, #204]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006a30:	6011      	str	r1, [r2, #0]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d011      	beq.n	8006a5c <ai_platform_network_get_error+0x170>
 8006a38:	e7fe      	b.n	8006a38 <ai_platform_network_get_error+0x14c>
 8006a3a:	e7fe      	b.n	8006a3a <ai_platform_network_get_error+0x14e>
 8006a3c:	4a30      	ldr	r2, [pc, #192]	@ (8006b00 <ai_platform_network_get_error+0x214>)
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006a44:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1fb      	bne.n	8006a44 <ai_platform_network_get_error+0x158>
 8006a4c:	492a      	ldr	r1, [pc, #168]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006a50:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006a54:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d107      	bne.n	8006a6c <ai_platform_network_get_error+0x180>
 8006a5c:	f7ff fe7a 	bl	8006754 <_ai_platform_release_crc>
 8006a60:	f104 0010 	add.w	r0, r4, #16
 8006a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a68:	f001 bae4 	b.w	8008034 <core_get_error>
 8006a6c:	e7fe      	b.n	8006a6c <ai_platform_network_get_error+0x180>
 8006a6e:	4a24      	ldr	r2, [pc, #144]	@ (8006b00 <ai_platform_network_get_error+0x214>)
 8006a70:	2301      	movs	r3, #1
 8006a72:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006a76:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1fb      	bne.n	8006a76 <ai_platform_network_get_error+0x18a>
 8006a7e:	491e      	ldr	r1, [pc, #120]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006a80:	4b1e      	ldr	r3, [pc, #120]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006a82:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006a86:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d0c3      	beq.n	8006a16 <ai_platform_network_get_error+0x12a>
 8006a8e:	e7fe      	b.n	8006a8e <ai_platform_network_get_error+0x1a2>
 8006a90:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <ai_platform_network_get_error+0x214>)
 8006a92:	2301      	movs	r3, #1
 8006a94:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006a98:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1fb      	bne.n	8006a98 <ai_platform_network_get_error+0x1ac>
 8006aa0:	4915      	ldr	r1, [pc, #84]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006aa2:	4b16      	ldr	r3, [pc, #88]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006aa4:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006aa8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d0d5      	beq.n	8006a5c <ai_platform_network_get_error+0x170>
 8006ab0:	e7fe      	b.n	8006ab0 <ai_platform_network_get_error+0x1c4>
 8006ab2:	4a10      	ldr	r2, [pc, #64]	@ (8006af4 <ai_platform_network_get_error+0x208>)
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	6093      	str	r3, [r2, #8]
 8006ab8:	6893      	ldr	r3, [r2, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1fc      	bne.n	8006ab8 <ai_platform_network_get_error+0x1cc>
 8006abe:	490e      	ldr	r1, [pc, #56]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006ac2:	6011      	str	r1, [r2, #0]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d0a5      	beq.n	8006a16 <ai_platform_network_get_error+0x12a>
 8006aca:	e7fe      	b.n	8006aca <ai_platform_network_get_error+0x1de>
 8006acc:	4a09      	ldr	r2, [pc, #36]	@ (8006af4 <ai_platform_network_get_error+0x208>)
 8006ace:	2301      	movs	r3, #1
 8006ad0:	6093      	str	r3, [r2, #8]
 8006ad2:	6893      	ldr	r3, [r2, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1fc      	bne.n	8006ad2 <ai_platform_network_get_error+0x1e6>
 8006ad8:	4907      	ldr	r1, [pc, #28]	@ (8006af8 <ai_platform_network_get_error+0x20c>)
 8006ada:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <ai_platform_network_get_error+0x210>)
 8006adc:	6011      	str	r1, [r2, #0]
 8006ade:	6812      	ldr	r2, [r2, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d0bb      	beq.n	8006a5c <ai_platform_network_get_error+0x170>
 8006ae4:	e7fe      	b.n	8006ae4 <ai_platform_network_get_error+0x1f8>
 8006ae6:	bf00      	nop
 8006ae8:	a1c00100 	.word	0xa1c00100
 8006aec:	e0042000 	.word	0xe0042000
 8006af0:	5c001000 	.word	0x5c001000
 8006af4:	40023000 	.word	0x40023000
 8006af8:	f407a5c2 	.word	0xf407a5c2
 8006afc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b00:	58024000 	.word	0x58024000

08006b04 <ai_platform_network_set_error>:
 8006b04:	b110      	cbz	r0, 8006b0c <ai_platform_network_set_error+0x8>
 8006b06:	3010      	adds	r0, #16
 8006b08:	f001 ba9a 	b.w	8008040 <core_set_error>
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <ai_platform_inputs_get>:
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	b085      	sub	sp, #20
 8006b16:	9102      	str	r1, [sp, #8]
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	f000 8093 	beq.w	8006c44 <ai_platform_inputs_get+0x134>
 8006b1e:	4baa      	ldr	r3, [pc, #680]	@ (8006dc8 <ai_platform_inputs_get+0x2b8>)
 8006b20:	4681      	mov	r9, r0
 8006b22:	6802      	ldr	r2, [r0, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	f040 808d 	bne.w	8006c44 <ai_platform_inputs_get+0x134>
 8006b2a:	f7ff fe11 	bl	8006750 <_ai_platform_acquire_crc>
 8006b2e:	4ba7      	ldr	r3, [pc, #668]	@ (8006dcc <ai_platform_inputs_get+0x2bc>)
 8006b30:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b3a:	189a      	adds	r2, r3, r2
 8006b3c:	2a01      	cmp	r2, #1
 8006b3e:	f240 80da 	bls.w	8006cf6 <ai_platform_inputs_get+0x1e6>
 8006b42:	f240 4249 	movw	r2, #1097	@ 0x449
 8006b46:	4293      	cmp	r3, r2
 8006b48:	f000 80d5 	beq.w	8006cf6 <ai_platform_inputs_get+0x1e6>
 8006b4c:	4aa0      	ldr	r2, [pc, #640]	@ (8006dd0 <ai_platform_inputs_get+0x2c0>)
 8006b4e:	6813      	ldr	r3, [r2, #0]
 8006b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b54:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006b58:	f000 80dc 	beq.w	8006d14 <ai_platform_inputs_get+0x204>
 8006b5c:	6813      	ldr	r3, [r2, #0]
 8006b5e:	f240 4183 	movw	r1, #1155	@ 0x483
 8006b62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b66:	428b      	cmp	r3, r1
 8006b68:	f000 810e 	beq.w	8006d88 <ai_platform_inputs_get+0x278>
 8006b6c:	6813      	ldr	r3, [r2, #0]
 8006b6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b72:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006b76:	f000 8143 	beq.w	8006e00 <ai_platform_inputs_get+0x2f0>
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 8113 	beq.w	8006dac <ai_platform_inputs_get+0x29c>
 8006b86:	f7ff fde5 	bl	8006754 <_ai_platform_release_crc>
 8006b8a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80d2 	beq.w	8006d38 <ai_platform_inputs_get+0x228>
 8006b94:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8006b98:	f1ba 0f00 	cmp.w	sl, #0
 8006b9c:	f000 80cc 	beq.w	8006d38 <ai_platform_inputs_get+0x228>
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	4689      	mov	r9, r1
 8006baa:	e016      	b.n	8006bda <ai_platform_inputs_get+0xca>
 8006bac:	9a01      	ldr	r2, [sp, #4]
 8006bae:	2301      	movs	r3, #1
 8006bb0:	f848 3002 	str.w	r3, [r8, r2]
 8006bb4:	69b2      	ldr	r2, [r6, #24]
 8006bb6:	f04f 0301 	mov.w	r3, #1
 8006bba:	6856      	ldr	r6, [r2, #4]
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	f109 091c 	add.w	r9, r9, #28
 8006bc2:	7523      	strb	r3, [r4, #20]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	6962      	ldr	r2, [r4, #20]
 8006bc8:	60a7      	str	r7, [r4, #8]
 8006bca:	f36b 221f 	bfi	r2, fp, #8, #24
 8006bce:	6126      	str	r6, [r4, #16]
 8006bd0:	61a1      	str	r1, [r4, #24]
 8006bd2:	60e3      	str	r3, [r4, #12]
 8006bd4:	6162      	str	r2, [r4, #20]
 8006bd6:	e9c4 0c00 	strd	r0, ip, [r4]
 8006bda:	f8ba 3000 	ldrh.w	r3, [sl]
 8006bde:	b2ac      	uxth	r4, r5
 8006be0:	42ab      	cmp	r3, r5
 8006be2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006be6:	9301      	str	r3, [sp, #4]
 8006be8:	f240 80b5 	bls.w	8006d56 <ai_platform_inputs_get+0x246>
 8006bec:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80b0 	beq.w	8006d56 <ai_platform_inputs_get+0x246>
 8006bf6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	f000 80ab 	beq.w	8006d56 <ai_platform_inputs_get+0x246>
 8006c00:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006c04:	69b2      	ldr	r2, [r6, #24]
 8006c06:	68f1      	ldr	r1, [r6, #12]
 8006c08:	6810      	ldr	r0, [r2, #0]
 8006c0a:	9100      	str	r1, [sp, #0]
 8006c0c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006c10:	68b3      	ldr	r3, [r6, #8]
 8006c12:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006c16:	444c      	add	r4, r9
 8006c18:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006c1c:	f002 fe56 	bl	80098cc <ai_array_to_buffer_fmt>
 8006c20:	69b2      	ldr	r2, [r6, #24]
 8006c22:	9900      	ldr	r1, [sp, #0]
 8006c24:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006c28:	2f00      	cmp	r7, #0
 8006c2a:	d0c4      	beq.n	8006bb6 <ai_platform_inputs_get+0xa6>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006c32:	6832      	ldr	r2, [r6, #0]
 8006c34:	607a      	str	r2, [r7, #4]
 8006c36:	b112      	cbz	r2, 8006c3e <ai_platform_inputs_get+0x12e>
 8006c38:	8852      	ldrh	r2, [r2, #2]
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	d1b6      	bne.n	8006bac <ai_platform_inputs_get+0x9c>
 8006c3e:	69b2      	ldr	r2, [r6, #24]
 8006c40:	2700      	movs	r7, #0
 8006c42:	e7b8      	b.n	8006bb6 <ai_platform_inputs_get+0xa6>
 8006c44:	f7ff fd84 	bl	8006750 <_ai_platform_acquire_crc>
 8006c48:	4b60      	ldr	r3, [pc, #384]	@ (8006dcc <ai_platform_inputs_get+0x2bc>)
 8006c4a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c54:	185a      	adds	r2, r3, r1
 8006c56:	2a01      	cmp	r2, #1
 8006c58:	d92a      	bls.n	8006cb0 <ai_platform_inputs_get+0x1a0>
 8006c5a:	f240 4249 	movw	r2, #1097	@ 0x449
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d026      	beq.n	8006cb0 <ai_platform_inputs_get+0x1a0>
 8006c62:	4a5b      	ldr	r2, [pc, #364]	@ (8006dd0 <ai_platform_inputs_get+0x2c0>)
 8006c64:	6813      	ldr	r3, [r2, #0]
 8006c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c6a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006c6e:	d02c      	beq.n	8006cca <ai_platform_inputs_get+0x1ba>
 8006c70:	6813      	ldr	r3, [r2, #0]
 8006c72:	f240 4183 	movw	r1, #1155	@ 0x483
 8006c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c7a:	428b      	cmp	r3, r1
 8006c7c:	d073      	beq.n	8006d66 <ai_platform_inputs_get+0x256>
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c84:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006c88:	f000 80ac 	beq.w	8006de4 <ai_platform_inputs_get+0x2d4>
 8006c8c:	6813      	ldr	r3, [r2, #0]
 8006c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d129      	bne.n	8006cea <ai_platform_inputs_get+0x1da>
 8006c96:	4a4f      	ldr	r2, [pc, #316]	@ (8006dd4 <ai_platform_inputs_get+0x2c4>)
 8006c98:	2301      	movs	r3, #1
 8006c9a:	6093      	str	r3, [r2, #8]
 8006c9c:	6893      	ldr	r3, [r2, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1fc      	bne.n	8006c9c <ai_platform_inputs_get+0x18c>
 8006ca2:	494d      	ldr	r1, [pc, #308]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006ca4:	4b4d      	ldr	r3, [pc, #308]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006ca6:	6011      	str	r1, [r2, #0]
 8006ca8:	6812      	ldr	r2, [r2, #0]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d01d      	beq.n	8006cea <ai_platform_inputs_get+0x1da>
 8006cae:	e7fe      	b.n	8006cae <ai_platform_inputs_get+0x19e>
 8006cb0:	4a48      	ldr	r2, [pc, #288]	@ (8006dd4 <ai_platform_inputs_get+0x2c4>)
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	6093      	str	r3, [r2, #8]
 8006cb6:	6893      	ldr	r3, [r2, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1fc      	bne.n	8006cb6 <ai_platform_inputs_get+0x1a6>
 8006cbc:	4946      	ldr	r1, [pc, #280]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006cbe:	4b47      	ldr	r3, [pc, #284]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006cc0:	6011      	str	r1, [r2, #0]
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d010      	beq.n	8006cea <ai_platform_inputs_get+0x1da>
 8006cc8:	e7fe      	b.n	8006cc8 <ai_platform_inputs_get+0x1b8>
 8006cca:	4a45      	ldr	r2, [pc, #276]	@ (8006de0 <ai_platform_inputs_get+0x2d0>)
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006cd2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1fb      	bne.n	8006cd2 <ai_platform_inputs_get+0x1c2>
 8006cda:	493f      	ldr	r1, [pc, #252]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006cde:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006ce2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d113      	bne.n	8006d12 <ai_platform_inputs_get+0x202>
 8006cea:	f7ff fd33 	bl	8006754 <_ai_platform_release_crc>
 8006cee:	2000      	movs	r0, #0
 8006cf0:	b005      	add	sp, #20
 8006cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf6:	4a37      	ldr	r2, [pc, #220]	@ (8006dd4 <ai_platform_inputs_get+0x2c4>)
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	6093      	str	r3, [r2, #8]
 8006cfc:	6893      	ldr	r3, [r2, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1fc      	bne.n	8006cfc <ai_platform_inputs_get+0x1ec>
 8006d02:	4b35      	ldr	r3, [pc, #212]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	4b35      	ldr	r3, [pc, #212]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	f43f af3b 	beq.w	8006b86 <ai_platform_inputs_get+0x76>
 8006d10:	e7fe      	b.n	8006d10 <ai_platform_inputs_get+0x200>
 8006d12:	e7fe      	b.n	8006d12 <ai_platform_inputs_get+0x202>
 8006d14:	4a32      	ldr	r2, [pc, #200]	@ (8006de0 <ai_platform_inputs_get+0x2d0>)
 8006d16:	2301      	movs	r3, #1
 8006d18:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006d1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1fb      	bne.n	8006d1c <ai_platform_inputs_get+0x20c>
 8006d24:	4b2c      	ldr	r3, [pc, #176]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006d26:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006d2c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006d30:	429a      	cmp	r2, r3
 8006d32:	f43f af28 	beq.w	8006b86 <ai_platform_inputs_get+0x76>
 8006d36:	e7fe      	b.n	8006d36 <ai_platform_inputs_get+0x226>
 8006d38:	2400      	movs	r4, #0
 8006d3a:	2218      	movs	r2, #24
 8006d3c:	2111      	movs	r1, #17
 8006d3e:	f109 0010 	add.w	r0, r9, #16
 8006d42:	f001 f97d 	bl	8008040 <core_set_error>
 8006d46:	4620      	mov	r0, r4
 8006d48:	9b02      	ldr	r3, [sp, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0d0      	beq.n	8006cf0 <ai_platform_inputs_get+0x1e0>
 8006d4e:	801c      	strh	r4, [r3, #0]
 8006d50:	b005      	add	sp, #20
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	d0ec      	beq.n	8006d38 <ai_platform_inputs_get+0x228>
 8006d5e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006d62:	6858      	ldr	r0, [r3, #4]
 8006d64:	e7f0      	b.n	8006d48 <ai_platform_inputs_get+0x238>
 8006d66:	4a1e      	ldr	r2, [pc, #120]	@ (8006de0 <ai_platform_inputs_get+0x2d0>)
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006d6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1fb      	bne.n	8006d6e <ai_platform_inputs_get+0x25e>
 8006d76:	4918      	ldr	r1, [pc, #96]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006d78:	4b18      	ldr	r3, [pc, #96]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006d7a:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006d7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d0b1      	beq.n	8006cea <ai_platform_inputs_get+0x1da>
 8006d86:	e7fe      	b.n	8006d86 <ai_platform_inputs_get+0x276>
 8006d88:	4a15      	ldr	r2, [pc, #84]	@ (8006de0 <ai_platform_inputs_get+0x2d0>)
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006d90:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1fb      	bne.n	8006d90 <ai_platform_inputs_get+0x280>
 8006d98:	4b0f      	ldr	r3, [pc, #60]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006d9a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8006d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006da0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006da4:	429a      	cmp	r2, r3
 8006da6:	f43f aeee 	beq.w	8006b86 <ai_platform_inputs_get+0x76>
 8006daa:	e7fe      	b.n	8006daa <ai_platform_inputs_get+0x29a>
 8006dac:	4a09      	ldr	r2, [pc, #36]	@ (8006dd4 <ai_platform_inputs_get+0x2c4>)
 8006dae:	2301      	movs	r3, #1
 8006db0:	6093      	str	r3, [r2, #8]
 8006db2:	6893      	ldr	r3, [r2, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1fc      	bne.n	8006db2 <ai_platform_inputs_get+0x2a2>
 8006db8:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <ai_platform_inputs_get+0x2c8>)
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	4b07      	ldr	r3, [pc, #28]	@ (8006ddc <ai_platform_inputs_get+0x2cc>)
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	f43f aee0 	beq.w	8006b86 <ai_platform_inputs_get+0x76>
 8006dc6:	e7fe      	b.n	8006dc6 <ai_platform_inputs_get+0x2b6>
 8006dc8:	a1c00100 	.word	0xa1c00100
 8006dcc:	e0042000 	.word	0xe0042000
 8006dd0:	5c001000 	.word	0x5c001000
 8006dd4:	40023000 	.word	0x40023000
 8006dd8:	f407a5c2 	.word	0xf407a5c2
 8006ddc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006de0:	58024000 	.word	0x58024000
 8006de4:	4a0d      	ldr	r2, [pc, #52]	@ (8006e1c <ai_platform_inputs_get+0x30c>)
 8006de6:	2301      	movs	r3, #1
 8006de8:	6093      	str	r3, [r2, #8]
 8006dea:	6893      	ldr	r3, [r2, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1fc      	bne.n	8006dea <ai_platform_inputs_get+0x2da>
 8006df0:	490b      	ldr	r1, [pc, #44]	@ (8006e20 <ai_platform_inputs_get+0x310>)
 8006df2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e24 <ai_platform_inputs_get+0x314>)
 8006df4:	6011      	str	r1, [r2, #0]
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	f43f af76 	beq.w	8006cea <ai_platform_inputs_get+0x1da>
 8006dfe:	e7fe      	b.n	8006dfe <ai_platform_inputs_get+0x2ee>
 8006e00:	4a06      	ldr	r2, [pc, #24]	@ (8006e1c <ai_platform_inputs_get+0x30c>)
 8006e02:	2301      	movs	r3, #1
 8006e04:	6093      	str	r3, [r2, #8]
 8006e06:	6893      	ldr	r3, [r2, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1fc      	bne.n	8006e06 <ai_platform_inputs_get+0x2f6>
 8006e0c:	4b04      	ldr	r3, [pc, #16]	@ (8006e20 <ai_platform_inputs_get+0x310>)
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	4b04      	ldr	r3, [pc, #16]	@ (8006e24 <ai_platform_inputs_get+0x314>)
 8006e12:	6812      	ldr	r2, [r2, #0]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	f43f aeb6 	beq.w	8006b86 <ai_platform_inputs_get+0x76>
 8006e1a:	e7fe      	b.n	8006e1a <ai_platform_inputs_get+0x30a>
 8006e1c:	40023000 	.word	0x40023000
 8006e20:	f407a5c2 	.word	0xf407a5c2
 8006e24:	b5e8b5cd 	.word	0xb5e8b5cd

08006e28 <ai_platform_outputs_get>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	9102      	str	r1, [sp, #8]
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f000 808f 	beq.w	8006f54 <ai_platform_outputs_get+0x12c>
 8006e36:	4ba8      	ldr	r3, [pc, #672]	@ (80070d8 <ai_platform_outputs_get+0x2b0>)
 8006e38:	4681      	mov	r9, r0
 8006e3a:	6802      	ldr	r2, [r0, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	f040 8089 	bne.w	8006f54 <ai_platform_outputs_get+0x12c>
 8006e42:	f7ff fc85 	bl	8006750 <_ai_platform_acquire_crc>
 8006e46:	4ba5      	ldr	r3, [pc, #660]	@ (80070dc <ai_platform_outputs_get+0x2b4>)
 8006e48:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e52:	189a      	adds	r2, r3, r2
 8006e54:	2a01      	cmp	r2, #1
 8006e56:	f240 80d6 	bls.w	8007006 <ai_platform_outputs_get+0x1de>
 8006e5a:	f240 4249 	movw	r2, #1097	@ 0x449
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f000 80d1 	beq.w	8007006 <ai_platform_outputs_get+0x1de>
 8006e64:	4a9e      	ldr	r2, [pc, #632]	@ (80070e0 <ai_platform_outputs_get+0x2b8>)
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e6c:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006e70:	f000 80d8 	beq.w	8007024 <ai_platform_outputs_get+0x1fc>
 8006e74:	6813      	ldr	r3, [r2, #0]
 8006e76:	f240 4183 	movw	r1, #1155	@ 0x483
 8006e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e7e:	428b      	cmp	r3, r1
 8006e80:	f000 8109 	beq.w	8007096 <ai_platform_outputs_get+0x26e>
 8006e84:	6813      	ldr	r3, [r2, #0]
 8006e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e8a:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006e8e:	f000 813f 	beq.w	8007110 <ai_platform_outputs_get+0x2e8>
 8006e92:	6813      	ldr	r3, [r2, #0]
 8006e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 810e 	beq.w	80070ba <ai_platform_outputs_get+0x292>
 8006e9e:	f7ff fc59 	bl	8006754 <_ai_platform_release_crc>
 8006ea2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	@ 0x2c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	f240 80db 	bls.w	8007062 <ai_platform_outputs_get+0x23a>
 8006eac:	2100      	movs	r1, #0
 8006eae:	f8d9 a030 	ldr.w	sl, [r9, #48]	@ 0x30
 8006eb2:	f8cd 900c 	str.w	r9, [sp, #12]
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	4689      	mov	r9, r1
 8006eba:	e016      	b.n	8006eea <ai_platform_outputs_get+0xc2>
 8006ebc:	9a01      	ldr	r2, [sp, #4]
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f848 3002 	str.w	r3, [r8, r2]
 8006ec4:	69b2      	ldr	r2, [r6, #24]
 8006ec6:	f04f 0301 	mov.w	r3, #1
 8006eca:	6856      	ldr	r6, [r2, #4]
 8006ecc:	3501      	adds	r5, #1
 8006ece:	f109 091c 	add.w	r9, r9, #28
 8006ed2:	7523      	strb	r3, [r4, #20]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6962      	ldr	r2, [r4, #20]
 8006ed8:	60a7      	str	r7, [r4, #8]
 8006eda:	f36b 221f 	bfi	r2, fp, #8, #24
 8006ede:	6126      	str	r6, [r4, #16]
 8006ee0:	61a1      	str	r1, [r4, #24]
 8006ee2:	60e3      	str	r3, [r4, #12]
 8006ee4:	6162      	str	r2, [r4, #20]
 8006ee6:	e9c4 0c00 	strd	r0, ip, [r4]
 8006eea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006eee:	b2ac      	uxth	r4, r5
 8006ef0:	42ab      	cmp	r3, r5
 8006ef2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006ef6:	9301      	str	r3, [sp, #4]
 8006ef8:	f240 80a6 	bls.w	8007048 <ai_platform_outputs_get+0x220>
 8006efc:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80a1 	beq.w	8007048 <ai_platform_outputs_get+0x220>
 8006f06:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006f0a:	2e00      	cmp	r6, #0
 8006f0c:	f000 809c 	beq.w	8007048 <ai_platform_outputs_get+0x220>
 8006f10:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006f14:	69b2      	ldr	r2, [r6, #24]
 8006f16:	68f1      	ldr	r1, [r6, #12]
 8006f18:	6810      	ldr	r0, [r2, #0]
 8006f1a:	9100      	str	r1, [sp, #0]
 8006f1c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006f20:	68b3      	ldr	r3, [r6, #8]
 8006f22:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006f26:	444c      	add	r4, r9
 8006f28:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8006f2c:	f002 fcce 	bl	80098cc <ai_array_to_buffer_fmt>
 8006f30:	69b2      	ldr	r2, [r6, #24]
 8006f32:	9900      	ldr	r1, [sp, #0]
 8006f34:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006f38:	2f00      	cmp	r7, #0
 8006f3a:	d0c4      	beq.n	8006ec6 <ai_platform_outputs_get+0x9e>
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006f42:	6832      	ldr	r2, [r6, #0]
 8006f44:	607a      	str	r2, [r7, #4]
 8006f46:	b112      	cbz	r2, 8006f4e <ai_platform_outputs_get+0x126>
 8006f48:	8852      	ldrh	r2, [r2, #2]
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	d1b6      	bne.n	8006ebc <ai_platform_outputs_get+0x94>
 8006f4e:	69b2      	ldr	r2, [r6, #24]
 8006f50:	2700      	movs	r7, #0
 8006f52:	e7b8      	b.n	8006ec6 <ai_platform_outputs_get+0x9e>
 8006f54:	f7ff fbfc 	bl	8006750 <_ai_platform_acquire_crc>
 8006f58:	4b60      	ldr	r3, [pc, #384]	@ (80070dc <ai_platform_outputs_get+0x2b4>)
 8006f5a:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f64:	185a      	adds	r2, r3, r1
 8006f66:	2a01      	cmp	r2, #1
 8006f68:	d92a      	bls.n	8006fc0 <ai_platform_outputs_get+0x198>
 8006f6a:	f240 4249 	movw	r2, #1097	@ 0x449
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d026      	beq.n	8006fc0 <ai_platform_outputs_get+0x198>
 8006f72:	4a5b      	ldr	r2, [pc, #364]	@ (80070e0 <ai_platform_outputs_get+0x2b8>)
 8006f74:	6813      	ldr	r3, [r2, #0]
 8006f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f7a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8006f7e:	d02c      	beq.n	8006fda <ai_platform_outputs_get+0x1b2>
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	f240 4183 	movw	r1, #1155	@ 0x483
 8006f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f8a:	428b      	cmp	r3, r1
 8006f8c:	d072      	beq.n	8007074 <ai_platform_outputs_get+0x24c>
 8006f8e:	6813      	ldr	r3, [r2, #0]
 8006f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f94:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8006f98:	f000 80ac 	beq.w	80070f4 <ai_platform_outputs_get+0x2cc>
 8006f9c:	6813      	ldr	r3, [r2, #0]
 8006f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d129      	bne.n	8006ffa <ai_platform_outputs_get+0x1d2>
 8006fa6:	4a4f      	ldr	r2, [pc, #316]	@ (80070e4 <ai_platform_outputs_get+0x2bc>)
 8006fa8:	2301      	movs	r3, #1
 8006faa:	6093      	str	r3, [r2, #8]
 8006fac:	6893      	ldr	r3, [r2, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1fc      	bne.n	8006fac <ai_platform_outputs_get+0x184>
 8006fb2:	494d      	ldr	r1, [pc, #308]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 8006fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 8006fb6:	6011      	str	r1, [r2, #0]
 8006fb8:	6812      	ldr	r2, [r2, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d01d      	beq.n	8006ffa <ai_platform_outputs_get+0x1d2>
 8006fbe:	e7fe      	b.n	8006fbe <ai_platform_outputs_get+0x196>
 8006fc0:	4a48      	ldr	r2, [pc, #288]	@ (80070e4 <ai_platform_outputs_get+0x2bc>)
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	6093      	str	r3, [r2, #8]
 8006fc6:	6893      	ldr	r3, [r2, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1fc      	bne.n	8006fc6 <ai_platform_outputs_get+0x19e>
 8006fcc:	4946      	ldr	r1, [pc, #280]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 8006fce:	4b47      	ldr	r3, [pc, #284]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d010      	beq.n	8006ffa <ai_platform_outputs_get+0x1d2>
 8006fd8:	e7fe      	b.n	8006fd8 <ai_platform_outputs_get+0x1b0>
 8006fda:	4a45      	ldr	r2, [pc, #276]	@ (80070f0 <ai_platform_outputs_get+0x2c8>)
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8006fe2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1fb      	bne.n	8006fe2 <ai_platform_outputs_get+0x1ba>
 8006fea:	493f      	ldr	r1, [pc, #252]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 8006fec:	4b3f      	ldr	r3, [pc, #252]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 8006fee:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8006ff2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d113      	bne.n	8007022 <ai_platform_outputs_get+0x1fa>
 8006ffa:	f7ff fbab 	bl	8006754 <_ai_platform_release_crc>
 8006ffe:	2000      	movs	r0, #0
 8007000:	b005      	add	sp, #20
 8007002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007006:	4a37      	ldr	r2, [pc, #220]	@ (80070e4 <ai_platform_outputs_get+0x2bc>)
 8007008:	2301      	movs	r3, #1
 800700a:	6093      	str	r3, [r2, #8]
 800700c:	6893      	ldr	r3, [r2, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1fc      	bne.n	800700c <ai_platform_outputs_get+0x1e4>
 8007012:	4b35      	ldr	r3, [pc, #212]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	4b35      	ldr	r3, [pc, #212]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 8007018:	6812      	ldr	r2, [r2, #0]
 800701a:	429a      	cmp	r2, r3
 800701c:	f43f af3f 	beq.w	8006e9e <ai_platform_outputs_get+0x76>
 8007020:	e7fe      	b.n	8007020 <ai_platform_outputs_get+0x1f8>
 8007022:	e7fe      	b.n	8007022 <ai_platform_outputs_get+0x1fa>
 8007024:	4a32      	ldr	r2, [pc, #200]	@ (80070f0 <ai_platform_outputs_get+0x2c8>)
 8007026:	2301      	movs	r3, #1
 8007028:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800702c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1fb      	bne.n	800702c <ai_platform_outputs_get+0x204>
 8007034:	4b2c      	ldr	r3, [pc, #176]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 8007036:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800703a:	4b2c      	ldr	r3, [pc, #176]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 800703c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007040:	429a      	cmp	r2, r3
 8007042:	f43f af2c 	beq.w	8006e9e <ai_platform_outputs_get+0x76>
 8007046:	e7fe      	b.n	8007046 <ai_platform_outputs_get+0x21e>
 8007048:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800704c:	b14c      	cbz	r4, 8007062 <ai_platform_outputs_get+0x23a>
 800704e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007052:	6858      	ldr	r0, [r3, #4]
 8007054:	9b02      	ldr	r3, [sp, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0d2      	beq.n	8007000 <ai_platform_outputs_get+0x1d8>
 800705a:	801c      	strh	r4, [r3, #0]
 800705c:	b005      	add	sp, #20
 800705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007062:	2400      	movs	r4, #0
 8007064:	2218      	movs	r2, #24
 8007066:	2111      	movs	r1, #17
 8007068:	f109 0010 	add.w	r0, r9, #16
 800706c:	f000 ffe8 	bl	8008040 <core_set_error>
 8007070:	4620      	mov	r0, r4
 8007072:	e7ef      	b.n	8007054 <ai_platform_outputs_get+0x22c>
 8007074:	4a1e      	ldr	r2, [pc, #120]	@ (80070f0 <ai_platform_outputs_get+0x2c8>)
 8007076:	2301      	movs	r3, #1
 8007078:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800707c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1fb      	bne.n	800707c <ai_platform_outputs_get+0x254>
 8007084:	4918      	ldr	r1, [pc, #96]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 8007086:	4b19      	ldr	r3, [pc, #100]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 8007088:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800708c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007090:	429a      	cmp	r2, r3
 8007092:	d0b2      	beq.n	8006ffa <ai_platform_outputs_get+0x1d2>
 8007094:	e7fe      	b.n	8007094 <ai_platform_outputs_get+0x26c>
 8007096:	4a16      	ldr	r2, [pc, #88]	@ (80070f0 <ai_platform_outputs_get+0x2c8>)
 8007098:	2301      	movs	r3, #1
 800709a:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800709e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1fb      	bne.n	800709e <ai_platform_outputs_get+0x276>
 80070a6:	4b10      	ldr	r3, [pc, #64]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 80070a8:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80070ac:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 80070ae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80070b2:	429a      	cmp	r2, r3
 80070b4:	f43f aef3 	beq.w	8006e9e <ai_platform_outputs_get+0x76>
 80070b8:	e7fe      	b.n	80070b8 <ai_platform_outputs_get+0x290>
 80070ba:	4a0a      	ldr	r2, [pc, #40]	@ (80070e4 <ai_platform_outputs_get+0x2bc>)
 80070bc:	2301      	movs	r3, #1
 80070be:	6093      	str	r3, [r2, #8]
 80070c0:	6893      	ldr	r3, [r2, #8]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1fc      	bne.n	80070c0 <ai_platform_outputs_get+0x298>
 80070c6:	4b08      	ldr	r3, [pc, #32]	@ (80070e8 <ai_platform_outputs_get+0x2c0>)
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4b08      	ldr	r3, [pc, #32]	@ (80070ec <ai_platform_outputs_get+0x2c4>)
 80070cc:	6812      	ldr	r2, [r2, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	f43f aee5 	beq.w	8006e9e <ai_platform_outputs_get+0x76>
 80070d4:	e7fe      	b.n	80070d4 <ai_platform_outputs_get+0x2ac>
 80070d6:	bf00      	nop
 80070d8:	a1c00100 	.word	0xa1c00100
 80070dc:	e0042000 	.word	0xe0042000
 80070e0:	5c001000 	.word	0x5c001000
 80070e4:	40023000 	.word	0x40023000
 80070e8:	f407a5c2 	.word	0xf407a5c2
 80070ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80070f0:	58024000 	.word	0x58024000
 80070f4:	4a0d      	ldr	r2, [pc, #52]	@ (800712c <ai_platform_outputs_get+0x304>)
 80070f6:	2301      	movs	r3, #1
 80070f8:	6093      	str	r3, [r2, #8]
 80070fa:	6893      	ldr	r3, [r2, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1fc      	bne.n	80070fa <ai_platform_outputs_get+0x2d2>
 8007100:	490b      	ldr	r1, [pc, #44]	@ (8007130 <ai_platform_outputs_get+0x308>)
 8007102:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <ai_platform_outputs_get+0x30c>)
 8007104:	6011      	str	r1, [r2, #0]
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	f43f af76 	beq.w	8006ffa <ai_platform_outputs_get+0x1d2>
 800710e:	e7fe      	b.n	800710e <ai_platform_outputs_get+0x2e6>
 8007110:	4a06      	ldr	r2, [pc, #24]	@ (800712c <ai_platform_outputs_get+0x304>)
 8007112:	2301      	movs	r3, #1
 8007114:	6093      	str	r3, [r2, #8]
 8007116:	6893      	ldr	r3, [r2, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1fc      	bne.n	8007116 <ai_platform_outputs_get+0x2ee>
 800711c:	4b04      	ldr	r3, [pc, #16]	@ (8007130 <ai_platform_outputs_get+0x308>)
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	4b04      	ldr	r3, [pc, #16]	@ (8007134 <ai_platform_outputs_get+0x30c>)
 8007122:	6812      	ldr	r2, [r2, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	f43f aeba 	beq.w	8006e9e <ai_platform_outputs_get+0x76>
 800712a:	e7fe      	b.n	800712a <ai_platform_outputs_get+0x302>
 800712c:	40023000 	.word	0x40023000
 8007130:	f407a5c2 	.word	0xf407a5c2
 8007134:	b5e8b5cd 	.word	0xb5e8b5cd

08007138 <ai_platform_network_create>:
 8007138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800713c:	b083      	sub	sp, #12
 800713e:	4604      	mov	r4, r0
 8007140:	4615      	mov	r5, r2
 8007142:	461e      	mov	r6, r3
 8007144:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8007148:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800714c:	f7ff fb00 	bl	8006750 <_ai_platform_acquire_crc>
 8007150:	2800      	cmp	r0, #0
 8007152:	f000 80bd 	beq.w	80072d0 <ai_platform_network_create+0x198>
 8007156:	4ba5      	ldr	r3, [pc, #660]	@ (80073ec <ai_platform_network_create+0x2b4>)
 8007158:	f46f 6c8a 	mvn.w	ip, #1104	@ 0x450
 800715c:	4601      	mov	r1, r0
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007164:	eb03 020c 	add.w	r2, r3, ip
 8007168:	2a01      	cmp	r2, #1
 800716a:	f240 80a8 	bls.w	80072be <ai_platform_network_create+0x186>
 800716e:	f240 4249 	movw	r2, #1097	@ 0x449
 8007172:	4293      	cmp	r3, r2
 8007174:	f000 80a3 	beq.w	80072be <ai_platform_network_create+0x186>
 8007178:	4a9d      	ldr	r2, [pc, #628]	@ (80073f0 <ai_platform_network_create+0x2b8>)
 800717a:	6813      	ldr	r3, [r2, #0]
 800717c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007180:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007184:	f000 80b9 	beq.w	80072fa <ai_platform_network_create+0x1c2>
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	f240 4c83 	movw	ip, #1155	@ 0x483
 800718e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007192:	4563      	cmp	r3, ip
 8007194:	f000 80a1 	beq.w	80072da <ai_platform_network_create+0x1a2>
 8007198:	6813      	ldr	r3, [r2, #0]
 800719a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800719e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80071a2:	f000 8153 	beq.w	800744c <ai_platform_network_create+0x314>
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f040 808d 	bne.w	80072cc <ai_platform_network_create+0x194>
 80071b2:	4a90      	ldr	r2, [pc, #576]	@ (80073f4 <ai_platform_network_create+0x2bc>)
 80071b4:	2318      	movs	r3, #24
 80071b6:	6093      	str	r3, [r2, #8]
 80071b8:	6893      	ldr	r3, [r2, #8]
 80071ba:	2b18      	cmp	r3, #24
 80071bc:	f040 8086 	bne.w	80072cc <ai_platform_network_create+0x194>
 80071c0:	2301      	movs	r3, #1
 80071c2:	6093      	str	r3, [r2, #8]
 80071c4:	6893      	ldr	r3, [r2, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1fc      	bne.n	80071c4 <ai_platform_network_create+0x8c>
 80071ca:	4608      	mov	r0, r1
 80071cc:	f7ff fac2 	bl	8006754 <_ai_platform_release_crc>
 80071d0:	f7ff fabe 	bl	8006750 <_ai_platform_acquire_crc>
 80071d4:	4b85      	ldr	r3, [pc, #532]	@ (80073ec <ai_platform_network_create+0x2b4>)
 80071d6:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071e0:	189a      	adds	r2, r3, r2
 80071e2:	2a01      	cmp	r2, #1
 80071e4:	f240 809f 	bls.w	8007326 <ai_platform_network_create+0x1ee>
 80071e8:	f240 4249 	movw	r2, #1097	@ 0x449
 80071ec:	4293      	cmp	r3, r2
 80071ee:	f000 809a 	beq.w	8007326 <ai_platform_network_create+0x1ee>
 80071f2:	4a7f      	ldr	r2, [pc, #508]	@ (80073f0 <ai_platform_network_create+0x2b8>)
 80071f4:	6813      	ldr	r3, [r2, #0]
 80071f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071fa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80071fe:	f000 80a0 	beq.w	8007342 <ai_platform_network_create+0x20a>
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	f240 4183 	movw	r1, #1155	@ 0x483
 8007208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800720c:	428b      	cmp	r3, r1
 800720e:	f000 80bf 	beq.w	8007390 <ai_platform_network_create+0x258>
 8007212:	6813      	ldr	r3, [r2, #0]
 8007214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007218:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800721c:	f000 8123 	beq.w	8007466 <ai_platform_network_create+0x32e>
 8007220:	6813      	ldr	r3, [r2, #0]
 8007222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 80c4 	beq.w	80073b4 <ai_platform_network_create+0x27c>
 800722c:	f7ff fa92 	bl	8006754 <_ai_platform_release_crc>
 8007230:	2c00      	cmp	r4, #0
 8007232:	f000 80aa 	beq.w	800738a <ai_platform_network_create+0x252>
 8007236:	4b70      	ldr	r3, [pc, #448]	@ (80073f8 <ai_platform_network_create+0x2c0>)
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	6025      	str	r5, [r4, #0]
 800723c:	f000 fef8 	bl	8008030 <core_init>
 8007240:	2800      	cmp	r0, #0
 8007242:	f000 8090 	beq.w	8007366 <ai_platform_network_create+0x22e>
 8007246:	f7ff fa83 	bl	8006750 <_ai_platform_acquire_crc>
 800724a:	4b68      	ldr	r3, [pc, #416]	@ (80073ec <ai_platform_network_create+0x2b4>)
 800724c:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007256:	185a      	adds	r2, r3, r1
 8007258:	2a01      	cmp	r2, #1
 800725a:	f240 80b9 	bls.w	80073d0 <ai_platform_network_create+0x298>
 800725e:	f240 4249 	movw	r2, #1097	@ 0x449
 8007262:	4293      	cmp	r3, r2
 8007264:	f000 80b4 	beq.w	80073d0 <ai_platform_network_create+0x298>
 8007268:	4a61      	ldr	r2, [pc, #388]	@ (80073f0 <ai_platform_network_create+0x2b8>)
 800726a:	6813      	ldr	r3, [r2, #0]
 800726c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007270:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007274:	f000 80c8 	beq.w	8007408 <ai_platform_network_create+0x2d0>
 8007278:	6813      	ldr	r3, [r2, #0]
 800727a:	f240 4183 	movw	r1, #1155	@ 0x483
 800727e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007282:	428b      	cmp	r3, r1
 8007284:	f000 8107 	beq.w	8007496 <ai_platform_network_create+0x35e>
 8007288:	6813      	ldr	r3, [r2, #0]
 800728a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800728e:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007292:	f000 8111 	beq.w	80074b8 <ai_platform_network_create+0x380>
 8007296:	6813      	ldr	r3, [r2, #0]
 8007298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800729c:	2b00      	cmp	r3, #0
 800729e:	f040 80c3 	bne.w	8007428 <ai_platform_network_create+0x2f0>
 80072a2:	4b54      	ldr	r3, [pc, #336]	@ (80073f4 <ai_platform_network_create+0x2bc>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	609a      	str	r2, [r3, #8]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	2a00      	cmp	r2, #0
 80072ac:	d1fc      	bne.n	80072a8 <ai_platform_network_create+0x170>
 80072ae:	4a53      	ldr	r2, [pc, #332]	@ (80073fc <ai_platform_network_create+0x2c4>)
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	4b52      	ldr	r3, [pc, #328]	@ (8007400 <ai_platform_network_create+0x2c8>)
 80072b6:	429a      	cmp	r2, r3
 80072b8:	f000 80b6 	beq.w	8007428 <ai_platform_network_create+0x2f0>
 80072bc:	e7fe      	b.n	80072bc <ai_platform_network_create+0x184>
 80072be:	4b4d      	ldr	r3, [pc, #308]	@ (80073f4 <ai_platform_network_create+0x2bc>)
 80072c0:	2218      	movs	r2, #24
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	2a18      	cmp	r2, #24
 80072c8:	d027      	beq.n	800731a <ai_platform_network_create+0x1e2>
 80072ca:	4608      	mov	r0, r1
 80072cc:	f7ff fa42 	bl	8006754 <_ai_platform_release_crc>
 80072d0:	f244 1033 	movw	r0, #16691	@ 0x4133
 80072d4:	b003      	add	sp, #12
 80072d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072da:	4a4a      	ldr	r2, [pc, #296]	@ (8007404 <ai_platform_network_create+0x2cc>)
 80072dc:	2318      	movs	r3, #24
 80072de:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80072e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80072e6:	2b18      	cmp	r3, #24
 80072e8:	d1f0      	bne.n	80072cc <ai_platform_network_create+0x194>
 80072ea:	2301      	movs	r3, #1
 80072ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80072f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1fb      	bne.n	80072f0 <ai_platform_network_create+0x1b8>
 80072f8:	e767      	b.n	80071ca <ai_platform_network_create+0x92>
 80072fa:	4a42      	ldr	r2, [pc, #264]	@ (8007404 <ai_platform_network_create+0x2cc>)
 80072fc:	2318      	movs	r3, #24
 80072fe:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007302:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007306:	2b18      	cmp	r3, #24
 8007308:	d1e0      	bne.n	80072cc <ai_platform_network_create+0x194>
 800730a:	2301      	movs	r3, #1
 800730c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007310:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1fb      	bne.n	8007310 <ai_platform_network_create+0x1d8>
 8007318:	e757      	b.n	80071ca <ai_platform_network_create+0x92>
 800731a:	2201      	movs	r2, #1
 800731c:	609a      	str	r2, [r3, #8]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	2a00      	cmp	r2, #0
 8007322:	d1fc      	bne.n	800731e <ai_platform_network_create+0x1e6>
 8007324:	e751      	b.n	80071ca <ai_platform_network_create+0x92>
 8007326:	4a33      	ldr	r2, [pc, #204]	@ (80073f4 <ai_platform_network_create+0x2bc>)
 8007328:	2301      	movs	r3, #1
 800732a:	6093      	str	r3, [r2, #8]
 800732c:	6891      	ldr	r1, [r2, #8]
 800732e:	2900      	cmp	r1, #0
 8007330:	d1fc      	bne.n	800732c <ai_platform_network_create+0x1f4>
 8007332:	4b32      	ldr	r3, [pc, #200]	@ (80073fc <ai_platform_network_create+0x2c4>)
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	4b32      	ldr	r3, [pc, #200]	@ (8007400 <ai_platform_network_create+0x2c8>)
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	f43f af76 	beq.w	800722c <ai_platform_network_create+0xf4>
 8007340:	e7fe      	b.n	8007340 <ai_platform_network_create+0x208>
 8007342:	4a30      	ldr	r2, [pc, #192]	@ (8007404 <ai_platform_network_create+0x2cc>)
 8007344:	2301      	movs	r3, #1
 8007346:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800734a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1fb      	bne.n	800734a <ai_platform_network_create+0x212>
 8007352:	4b2a      	ldr	r3, [pc, #168]	@ (80073fc <ai_platform_network_create+0x2c4>)
 8007354:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007358:	4b29      	ldr	r3, [pc, #164]	@ (8007400 <ai_platform_network_create+0x2c8>)
 800735a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800735e:	429a      	cmp	r2, r3
 8007360:	f43f af64 	beq.w	800722c <ai_platform_network_create+0xf4>
 8007364:	e7fe      	b.n	8007364 <ai_platform_network_create+0x22c>
 8007366:	f04f 0930 	mov.w	r9, #48	@ 0x30
 800736a:	2300      	movs	r3, #0
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	2410      	movs	r4, #16
 8007370:	4642      	mov	r2, r8
 8007372:	4639      	mov	r1, r7
 8007374:	4630      	mov	r0, r6
 8007376:	f002 fb4d 	bl	8009a14 <ai_version_get>
 800737a:	4603      	mov	r3, r0
 800737c:	2000      	movs	r0, #0
 800737e:	64ab      	str	r3, [r5, #72]	@ 0x48
 8007380:	f369 0007 	bfi	r0, r9, #0, #8
 8007384:	f364 201f 	bfi	r0, r4, #8, #24
 8007388:	e7a4      	b.n	80072d4 <ai_platform_network_create+0x19c>
 800738a:	f241 0010 	movw	r0, #4112	@ 0x1010
 800738e:	e7a1      	b.n	80072d4 <ai_platform_network_create+0x19c>
 8007390:	4a1c      	ldr	r2, [pc, #112]	@ (8007404 <ai_platform_network_create+0x2cc>)
 8007392:	2301      	movs	r3, #1
 8007394:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007398:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1fb      	bne.n	8007398 <ai_platform_network_create+0x260>
 80073a0:	4b16      	ldr	r3, [pc, #88]	@ (80073fc <ai_platform_network_create+0x2c4>)
 80073a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 80073a6:	4b16      	ldr	r3, [pc, #88]	@ (8007400 <ai_platform_network_create+0x2c8>)
 80073a8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80073ac:	429a      	cmp	r2, r3
 80073ae:	f43f af3d 	beq.w	800722c <ai_platform_network_create+0xf4>
 80073b2:	e7fe      	b.n	80073b2 <ai_platform_network_create+0x27a>
 80073b4:	4a0f      	ldr	r2, [pc, #60]	@ (80073f4 <ai_platform_network_create+0x2bc>)
 80073b6:	2301      	movs	r3, #1
 80073b8:	6093      	str	r3, [r2, #8]
 80073ba:	6893      	ldr	r3, [r2, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1fc      	bne.n	80073ba <ai_platform_network_create+0x282>
 80073c0:	4b0e      	ldr	r3, [pc, #56]	@ (80073fc <ai_platform_network_create+0x2c4>)
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007400 <ai_platform_network_create+0x2c8>)
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	f43f af2f 	beq.w	800722c <ai_platform_network_create+0xf4>
 80073ce:	e7fe      	b.n	80073ce <ai_platform_network_create+0x296>
 80073d0:	4a08      	ldr	r2, [pc, #32]	@ (80073f4 <ai_platform_network_create+0x2bc>)
 80073d2:	2301      	movs	r3, #1
 80073d4:	6093      	str	r3, [r2, #8]
 80073d6:	6893      	ldr	r3, [r2, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1fc      	bne.n	80073d6 <ai_platform_network_create+0x29e>
 80073dc:	4b07      	ldr	r3, [pc, #28]	@ (80073fc <ai_platform_network_create+0x2c4>)
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4b07      	ldr	r3, [pc, #28]	@ (8007400 <ai_platform_network_create+0x2c8>)
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d01f      	beq.n	8007428 <ai_platform_network_create+0x2f0>
 80073e8:	e7fe      	b.n	80073e8 <ai_platform_network_create+0x2b0>
 80073ea:	bf00      	nop
 80073ec:	e0042000 	.word	0xe0042000
 80073f0:	5c001000 	.word	0x5c001000
 80073f4:	40023000 	.word	0x40023000
 80073f8:	a1c00100 	.word	0xa1c00100
 80073fc:	f407a5c2 	.word	0xf407a5c2
 8007400:	b5e8b5cd 	.word	0xb5e8b5cd
 8007404:	58024000 	.word	0x58024000
 8007408:	4a33      	ldr	r2, [pc, #204]	@ (80074d8 <ai_platform_network_create+0x3a0>)
 800740a:	2301      	movs	r3, #1
 800740c:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007410:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1fb      	bne.n	8007410 <ai_platform_network_create+0x2d8>
 8007418:	4b30      	ldr	r3, [pc, #192]	@ (80074dc <ai_platform_network_create+0x3a4>)
 800741a:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 800741e:	4b30      	ldr	r3, [pc, #192]	@ (80074e0 <ai_platform_network_create+0x3a8>)
 8007420:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007424:	429a      	cmp	r2, r3
 8007426:	d12c      	bne.n	8007482 <ai_platform_network_create+0x34a>
 8007428:	f7ff f994 	bl	8006754 <_ai_platform_release_crc>
 800742c:	2200      	movs	r2, #0
 800742e:	4639      	mov	r1, r7
 8007430:	4630      	mov	r0, r6
 8007432:	f002 faef 	bl	8009a14 <ai_version_get>
 8007436:	4681      	mov	r9, r0
 8007438:	2200      	movs	r2, #0
 800743a:	2105      	movs	r1, #5
 800743c:	2001      	movs	r0, #1
 800743e:	f002 fae9 	bl	8009a14 <ai_version_get>
 8007442:	4581      	cmp	r9, r0
 8007444:	d01e      	beq.n	8007484 <ai_platform_network_create+0x34c>
 8007446:	f04f 0901 	mov.w	r9, #1
 800744a:	e78e      	b.n	800736a <ai_platform_network_create+0x232>
 800744c:	4b25      	ldr	r3, [pc, #148]	@ (80074e4 <ai_platform_network_create+0x3ac>)
 800744e:	2218      	movs	r2, #24
 8007450:	609a      	str	r2, [r3, #8]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	2a18      	cmp	r2, #24
 8007456:	f47f af39 	bne.w	80072cc <ai_platform_network_create+0x194>
 800745a:	2201      	movs	r2, #1
 800745c:	609a      	str	r2, [r3, #8]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	2a00      	cmp	r2, #0
 8007462:	d1fc      	bne.n	800745e <ai_platform_network_create+0x326>
 8007464:	e6b1      	b.n	80071ca <ai_platform_network_create+0x92>
 8007466:	4a1f      	ldr	r2, [pc, #124]	@ (80074e4 <ai_platform_network_create+0x3ac>)
 8007468:	2301      	movs	r3, #1
 800746a:	6093      	str	r3, [r2, #8]
 800746c:	6893      	ldr	r3, [r2, #8]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1fc      	bne.n	800746c <ai_platform_network_create+0x334>
 8007472:	4b1a      	ldr	r3, [pc, #104]	@ (80074dc <ai_platform_network_create+0x3a4>)
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	4b1a      	ldr	r3, [pc, #104]	@ (80074e0 <ai_platform_network_create+0x3a8>)
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	f43f aed6 	beq.w	800722c <ai_platform_network_create+0xf4>
 8007480:	e7fe      	b.n	8007480 <ai_platform_network_create+0x348>
 8007482:	e7fe      	b.n	8007482 <ai_platform_network_create+0x34a>
 8007484:	4b18      	ldr	r3, [pc, #96]	@ (80074e8 <ai_platform_network_create+0x3b0>)
 8007486:	a801      	add	r0, sp, #4
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	f000 fde5 	bl	8008058 <ai_check_custom_types>
 800748e:	b300      	cbz	r0, 80074d2 <ai_platform_network_create+0x39a>
 8007490:	2400      	movs	r4, #0
 8007492:	46a1      	mov	r9, r4
 8007494:	e76c      	b.n	8007370 <ai_platform_network_create+0x238>
 8007496:	4b10      	ldr	r3, [pc, #64]	@ (80074d8 <ai_platform_network_create+0x3a0>)
 8007498:	2201      	movs	r2, #1
 800749a:	f8c3 2c08 	str.w	r2, [r3, #3080]	@ 0xc08
 800749e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	@ 0xc08
 80074a2:	2a00      	cmp	r2, #0
 80074a4:	d1fb      	bne.n	800749e <ai_platform_network_create+0x366>
 80074a6:	4a0d      	ldr	r2, [pc, #52]	@ (80074dc <ai_platform_network_create+0x3a4>)
 80074a8:	f8c3 2c00 	str.w	r2, [r3, #3072]	@ 0xc00
 80074ac:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	@ 0xc00
 80074b0:	4b0b      	ldr	r3, [pc, #44]	@ (80074e0 <ai_platform_network_create+0x3a8>)
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d0b8      	beq.n	8007428 <ai_platform_network_create+0x2f0>
 80074b6:	e7fe      	b.n	80074b6 <ai_platform_network_create+0x37e>
 80074b8:	4b0a      	ldr	r3, [pc, #40]	@ (80074e4 <ai_platform_network_create+0x3ac>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	609a      	str	r2, [r3, #8]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	2a00      	cmp	r2, #0
 80074c2:	d1fc      	bne.n	80074be <ai_platform_network_create+0x386>
 80074c4:	4a05      	ldr	r2, [pc, #20]	@ (80074dc <ai_platform_network_create+0x3a4>)
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b05      	ldr	r3, [pc, #20]	@ (80074e0 <ai_platform_network_create+0x3a8>)
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d0ab      	beq.n	8007428 <ai_platform_network_create+0x2f0>
 80074d0:	e7fe      	b.n	80074d0 <ai_platform_network_create+0x398>
 80074d2:	f04f 0902 	mov.w	r9, #2
 80074d6:	e748      	b.n	800736a <ai_platform_network_create+0x232>
 80074d8:	58024000 	.word	0x58024000
 80074dc:	f407a5c2 	.word	0xf407a5c2
 80074e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80074e4:	40023000 	.word	0x40023000
 80074e8:	84048403 	.word	0x84048403

080074ec <ai_platform_network_init>:
 80074ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d052      	beq.n	800759a <ai_platform_network_init+0xae>
 80074f4:	4bab      	ldr	r3, [pc, #684]	@ (80077a4 <ai_platform_network_init+0x2b8>)
 80074f6:	4604      	mov	r4, r0
 80074f8:	6802      	ldr	r2, [r0, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d14d      	bne.n	800759a <ai_platform_network_init+0xae>
 80074fe:	460d      	mov	r5, r1
 8007500:	f7ff f926 	bl	8006750 <_ai_platform_acquire_crc>
 8007504:	4ba8      	ldr	r3, [pc, #672]	@ (80077a8 <ai_platform_network_init+0x2bc>)
 8007506:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007510:	189a      	adds	r2, r3, r2
 8007512:	2a01      	cmp	r2, #1
 8007514:	f240 809b 	bls.w	800764e <ai_platform_network_init+0x162>
 8007518:	f240 4249 	movw	r2, #1097	@ 0x449
 800751c:	4293      	cmp	r3, r2
 800751e:	f000 8096 	beq.w	800764e <ai_platform_network_init+0x162>
 8007522:	4aa2      	ldr	r2, [pc, #648]	@ (80077ac <ai_platform_network_init+0x2c0>)
 8007524:	6813      	ldr	r3, [r2, #0]
 8007526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800752a:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800752e:	f000 809d 	beq.w	800766c <ai_platform_network_init+0x180>
 8007532:	6813      	ldr	r3, [r2, #0]
 8007534:	f240 4183 	movw	r1, #1155	@ 0x483
 8007538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800753c:	428b      	cmp	r3, r1
 800753e:	f000 80e4 	beq.w	800770a <ai_platform_network_init+0x21e>
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007548:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800754c:	f000 811b 	beq.w	8007786 <ai_platform_network_init+0x29a>
 8007550:	6813      	ldr	r3, [r2, #0]
 8007552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 80f9 	beq.w	800774e <ai_platform_network_init+0x262>
 800755c:	f7ff f8fa 	bl	8006754 <_ai_platform_release_crc>
 8007560:	2d00      	cmp	r5, #0
 8007562:	f000 8147 	beq.w	80077f4 <ai_platform_network_init+0x308>
 8007566:	4b92      	ldr	r3, [pc, #584]	@ (80077b0 <ai_platform_network_init+0x2c4>)
 8007568:	682a      	ldr	r2, [r5, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	f040 8090 	bne.w	8007690 <ai_platform_network_init+0x1a4>
 8007570:	692b      	ldr	r3, [r5, #16]
 8007572:	89ae      	ldrh	r6, [r5, #12]
 8007574:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8007578:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800757c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800757e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8007582:	2303      	movs	r3, #3
 8007584:	84a6      	strh	r6, [r4, #36]	@ 0x24
 8007586:	4626      	mov	r6, r4
 8007588:	4620      	mov	r0, r4
 800758a:	f8a4 c026 	strh.w	ip, [r4, #38]	@ 0x26
 800758e:	60e3      	str	r3, [r4, #12]
 8007590:	f000 fd8a 	bl	80080a8 <ai_layers_init_all>
 8007594:	4630      	mov	r0, r6
 8007596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800759a:	f7ff f8d9 	bl	8006750 <_ai_platform_acquire_crc>
 800759e:	4b82      	ldr	r3, [pc, #520]	@ (80077a8 <ai_platform_network_init+0x2bc>)
 80075a0:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075aa:	185a      	adds	r2, r3, r1
 80075ac:	2a01      	cmp	r2, #1
 80075ae:	d92b      	bls.n	8007608 <ai_platform_network_init+0x11c>
 80075b0:	f240 4249 	movw	r2, #1097	@ 0x449
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d027      	beq.n	8007608 <ai_platform_network_init+0x11c>
 80075b8:	4a7c      	ldr	r2, [pc, #496]	@ (80077ac <ai_platform_network_init+0x2c0>)
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c0:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80075c4:	d02d      	beq.n	8007622 <ai_platform_network_init+0x136>
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	f240 4183 	movw	r1, #1155	@ 0x483
 80075cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075d0:	428b      	cmp	r3, r1
 80075d2:	f000 8089 	beq.w	80076e8 <ai_platform_network_init+0x1fc>
 80075d6:	6813      	ldr	r3, [r2, #0]
 80075d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075dc:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 80075e0:	f000 80c3 	beq.w	800776a <ai_platform_network_init+0x27e>
 80075e4:	6813      	ldr	r3, [r2, #0]
 80075e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d129      	bne.n	8007642 <ai_platform_network_init+0x156>
 80075ee:	4a71      	ldr	r2, [pc, #452]	@ (80077b4 <ai_platform_network_init+0x2c8>)
 80075f0:	2301      	movs	r3, #1
 80075f2:	6093      	str	r3, [r2, #8]
 80075f4:	6893      	ldr	r3, [r2, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1fc      	bne.n	80075f4 <ai_platform_network_init+0x108>
 80075fa:	496f      	ldr	r1, [pc, #444]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 80075fc:	4b6f      	ldr	r3, [pc, #444]	@ (80077bc <ai_platform_network_init+0x2d0>)
 80075fe:	6011      	str	r1, [r2, #0]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d01d      	beq.n	8007642 <ai_platform_network_init+0x156>
 8007606:	e7fe      	b.n	8007606 <ai_platform_network_init+0x11a>
 8007608:	4a6a      	ldr	r2, [pc, #424]	@ (80077b4 <ai_platform_network_init+0x2c8>)
 800760a:	2301      	movs	r3, #1
 800760c:	6093      	str	r3, [r2, #8]
 800760e:	6893      	ldr	r3, [r2, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1fc      	bne.n	800760e <ai_platform_network_init+0x122>
 8007614:	4968      	ldr	r1, [pc, #416]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 8007616:	4b69      	ldr	r3, [pc, #420]	@ (80077bc <ai_platform_network_init+0x2d0>)
 8007618:	6011      	str	r1, [r2, #0]
 800761a:	6812      	ldr	r2, [r2, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d010      	beq.n	8007642 <ai_platform_network_init+0x156>
 8007620:	e7fe      	b.n	8007620 <ai_platform_network_init+0x134>
 8007622:	4a67      	ldr	r2, [pc, #412]	@ (80077c0 <ai_platform_network_init+0x2d4>)
 8007624:	2301      	movs	r3, #1
 8007626:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800762a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1fb      	bne.n	800762a <ai_platform_network_init+0x13e>
 8007632:	4961      	ldr	r1, [pc, #388]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 8007634:	4b61      	ldr	r3, [pc, #388]	@ (80077bc <ai_platform_network_init+0x2d0>)
 8007636:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 800763a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800763e:	429a      	cmp	r2, r3
 8007640:	d113      	bne.n	800766a <ai_platform_network_init+0x17e>
 8007642:	2600      	movs	r6, #0
 8007644:	f7ff f886 	bl	8006754 <_ai_platform_release_crc>
 8007648:	4630      	mov	r0, r6
 800764a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764e:	4a59      	ldr	r2, [pc, #356]	@ (80077b4 <ai_platform_network_init+0x2c8>)
 8007650:	2301      	movs	r3, #1
 8007652:	6093      	str	r3, [r2, #8]
 8007654:	6893      	ldr	r3, [r2, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1fc      	bne.n	8007654 <ai_platform_network_init+0x168>
 800765a:	4b57      	ldr	r3, [pc, #348]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	4b57      	ldr	r3, [pc, #348]	@ (80077bc <ai_platform_network_init+0x2d0>)
 8007660:	6812      	ldr	r2, [r2, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	f43f af7a 	beq.w	800755c <ai_platform_network_init+0x70>
 8007668:	e7fe      	b.n	8007668 <ai_platform_network_init+0x17c>
 800766a:	e7fe      	b.n	800766a <ai_platform_network_init+0x17e>
 800766c:	4a54      	ldr	r2, [pc, #336]	@ (80077c0 <ai_platform_network_init+0x2d4>)
 800766e:	2301      	movs	r3, #1
 8007670:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007674:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1fb      	bne.n	8007674 <ai_platform_network_init+0x188>
 800767c:	4b4e      	ldr	r3, [pc, #312]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 800767e:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007682:	4b4e      	ldr	r3, [pc, #312]	@ (80077bc <ai_platform_network_init+0x2d0>)
 8007684:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007688:	429a      	cmp	r2, r3
 800768a:	f43f af67 	beq.w	800755c <ai_platform_network_init+0x70>
 800768e:	e7fe      	b.n	800768e <ai_platform_network_init+0x1a2>
 8007690:	2101      	movs	r1, #1
 8007692:	4628      	mov	r0, r5
 8007694:	f105 081c 	add.w	r8, r5, #28
 8007698:	686e      	ldr	r6, [r5, #4]
 800769a:	f7ff f80b 	bl	80066b4 <ai_buffer_get_size>
 800769e:	4607      	mov	r7, r0
 80076a0:	2101      	movs	r1, #1
 80076a2:	4640      	mov	r0, r8
 80076a4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80076a8:	f7ff f804 	bl	80066b4 <ai_buffer_get_size>
 80076ac:	2f00      	cmp	r7, #0
 80076ae:	d13e      	bne.n	800772e <ai_platform_network_init+0x242>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f000 808e 	beq.w	80077d2 <ai_platform_network_init+0x2e6>
 80076b6:	f1b9 0f00 	cmp.w	r9, #0
 80076ba:	f000 8094 	beq.w	80077e6 <ai_platform_network_init+0x2fa>
 80076be:	f04f 0c01 	mov.w	ip, #1
 80076c2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80076c4:	2600      	movs	r6, #0
 80076c6:	83e7      	strh	r7, [r4, #30]
 80076c8:	4563      	cmp	r3, ip
 80076ca:	83a6      	strh	r6, [r4, #28]
 80076cc:	d37a      	bcc.n	80077c4 <ai_platform_network_init+0x2d8>
 80076ce:	f1bc 0f00 	cmp.w	ip, #0
 80076d2:	f000 809c 	beq.w	800780e <ai_platform_network_init+0x322>
 80076d6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80076d8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80076dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076de:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80076e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80076e6:	e74c      	b.n	8007582 <ai_platform_network_init+0x96>
 80076e8:	4a35      	ldr	r2, [pc, #212]	@ (80077c0 <ai_platform_network_init+0x2d4>)
 80076ea:	2301      	movs	r3, #1
 80076ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80076f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1fb      	bne.n	80076f0 <ai_platform_network_init+0x204>
 80076f8:	492f      	ldr	r1, [pc, #188]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 80076fa:	4b30      	ldr	r3, [pc, #192]	@ (80077bc <ai_platform_network_init+0x2d0>)
 80076fc:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007700:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007704:	429a      	cmp	r2, r3
 8007706:	d09c      	beq.n	8007642 <ai_platform_network_init+0x156>
 8007708:	e7fe      	b.n	8007708 <ai_platform_network_init+0x21c>
 800770a:	4a2d      	ldr	r2, [pc, #180]	@ (80077c0 <ai_platform_network_init+0x2d4>)
 800770c:	2301      	movs	r3, #1
 800770e:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007712:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1fb      	bne.n	8007712 <ai_platform_network_init+0x226>
 800771a:	4b27      	ldr	r3, [pc, #156]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 800771c:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007720:	4b26      	ldr	r3, [pc, #152]	@ (80077bc <ai_platform_network_init+0x2d0>)
 8007722:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007726:	429a      	cmp	r2, r3
 8007728:	f43f af18 	beq.w	800755c <ai_platform_network_init+0x70>
 800772c:	e7fe      	b.n	800772c <ai_platform_network_init+0x240>
 800772e:	2800      	cmp	r0, #0
 8007730:	d153      	bne.n	80077da <ai_platform_network_init+0x2ee>
 8007732:	4680      	mov	r8, r0
 8007734:	4684      	mov	ip, r0
 8007736:	2e00      	cmp	r6, #0
 8007738:	d063      	beq.n	8007802 <ai_platform_network_init+0x316>
 800773a:	8be6      	ldrh	r6, [r4, #30]
 800773c:	2e00      	cmp	r6, #0
 800773e:	d168      	bne.n	8007812 <ai_platform_network_init+0x326>
 8007740:	2212      	movs	r2, #18
 8007742:	2116      	movs	r1, #22
 8007744:	f104 0010 	add.w	r0, r4, #16
 8007748:	f000 fc7a 	bl	8008040 <core_set_error>
 800774c:	e77c      	b.n	8007648 <ai_platform_network_init+0x15c>
 800774e:	4a19      	ldr	r2, [pc, #100]	@ (80077b4 <ai_platform_network_init+0x2c8>)
 8007750:	2301      	movs	r3, #1
 8007752:	6093      	str	r3, [r2, #8]
 8007754:	6893      	ldr	r3, [r2, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1fc      	bne.n	8007754 <ai_platform_network_init+0x268>
 800775a:	4b17      	ldr	r3, [pc, #92]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	4b17      	ldr	r3, [pc, #92]	@ (80077bc <ai_platform_network_init+0x2d0>)
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	f43f aefa 	beq.w	800755c <ai_platform_network_init+0x70>
 8007768:	e7fe      	b.n	8007768 <ai_platform_network_init+0x27c>
 800776a:	4a12      	ldr	r2, [pc, #72]	@ (80077b4 <ai_platform_network_init+0x2c8>)
 800776c:	2301      	movs	r3, #1
 800776e:	6093      	str	r3, [r2, #8]
 8007770:	6893      	ldr	r3, [r2, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1fc      	bne.n	8007770 <ai_platform_network_init+0x284>
 8007776:	4910      	ldr	r1, [pc, #64]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 8007778:	4b10      	ldr	r3, [pc, #64]	@ (80077bc <ai_platform_network_init+0x2d0>)
 800777a:	6011      	str	r1, [r2, #0]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	f43f af5f 	beq.w	8007642 <ai_platform_network_init+0x156>
 8007784:	e7fe      	b.n	8007784 <ai_platform_network_init+0x298>
 8007786:	4a0b      	ldr	r2, [pc, #44]	@ (80077b4 <ai_platform_network_init+0x2c8>)
 8007788:	2301      	movs	r3, #1
 800778a:	6093      	str	r3, [r2, #8]
 800778c:	6893      	ldr	r3, [r2, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1fc      	bne.n	800778c <ai_platform_network_init+0x2a0>
 8007792:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <ai_platform_network_init+0x2cc>)
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	4b09      	ldr	r3, [pc, #36]	@ (80077bc <ai_platform_network_init+0x2d0>)
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	f43f aede 	beq.w	800755c <ai_platform_network_init+0x70>
 80077a0:	e7fe      	b.n	80077a0 <ai_platform_network_init+0x2b4>
 80077a2:	bf00      	nop
 80077a4:	a1c00100 	.word	0xa1c00100
 80077a8:	e0042000 	.word	0xe0042000
 80077ac:	5c001000 	.word	0x5c001000
 80077b0:	a1facade 	.word	0xa1facade
 80077b4:	40023000 	.word	0x40023000
 80077b8:	f407a5c2 	.word	0xf407a5c2
 80077bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80077c0:	58024000 	.word	0x58024000
 80077c4:	2213      	movs	r2, #19
 80077c6:	2116      	movs	r1, #22
 80077c8:	f104 0010 	add.w	r0, r4, #16
 80077cc:	f000 fc38 	bl	8008040 <core_set_error>
 80077d0:	e73a      	b.n	8007648 <ai_platform_network_init+0x15c>
 80077d2:	4607      	mov	r7, r0
 80077d4:	4680      	mov	r8, r0
 80077d6:	4684      	mov	ip, r0
 80077d8:	e773      	b.n	80076c2 <ai_platform_network_init+0x1d6>
 80077da:	f1b9 0f00 	cmp.w	r9, #0
 80077de:	d002      	beq.n	80077e6 <ai_platform_network_init+0x2fa>
 80077e0:	f04f 0c01 	mov.w	ip, #1
 80077e4:	e7a7      	b.n	8007736 <ai_platform_network_init+0x24a>
 80077e6:	2110      	movs	r1, #16
 80077e8:	2213      	movs	r2, #19
 80077ea:	2600      	movs	r6, #0
 80077ec:	1860      	adds	r0, r4, r1
 80077ee:	f000 fc27 	bl	8008040 <core_set_error>
 80077f2:	e729      	b.n	8007648 <ai_platform_network_init+0x15c>
 80077f4:	2110      	movs	r1, #16
 80077f6:	2211      	movs	r2, #17
 80077f8:	462e      	mov	r6, r5
 80077fa:	1860      	adds	r0, r4, r1
 80077fc:	f000 fc20 	bl	8008040 <core_set_error>
 8007800:	e722      	b.n	8007648 <ai_platform_network_init+0x15c>
 8007802:	2110      	movs	r1, #16
 8007804:	2212      	movs	r2, #18
 8007806:	1860      	adds	r0, r4, r1
 8007808:	f000 fc1a 	bl	8008040 <core_set_error>
 800780c:	e71c      	b.n	8007648 <ai_platform_network_init+0x15c>
 800780e:	4666      	mov	r6, ip
 8007810:	e6b7      	b.n	8007582 <ai_platform_network_init+0x96>
 8007812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007814:	6a26      	ldr	r6, [r4, #32]
 8007816:	2701      	movs	r7, #1
 8007818:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800781a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800781e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8007822:	e74e      	b.n	80076c2 <ai_platform_network_init+0x1d6>

08007824 <ai_platform_network_post_init>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	2800      	cmp	r0, #0
 8007828:	d04e      	beq.n	80078c8 <ai_platform_network_post_init+0xa4>
 800782a:	4b8c      	ldr	r3, [pc, #560]	@ (8007a5c <ai_platform_network_post_init+0x238>)
 800782c:	4604      	mov	r4, r0
 800782e:	6802      	ldr	r2, [r0, #0]
 8007830:	429a      	cmp	r2, r3
 8007832:	d149      	bne.n	80078c8 <ai_platform_network_post_init+0xa4>
 8007834:	f7fe ff8c 	bl	8006750 <_ai_platform_acquire_crc>
 8007838:	4b89      	ldr	r3, [pc, #548]	@ (8007a60 <ai_platform_network_post_init+0x23c>)
 800783a:	f46f 628a 	mvn.w	r2, #1104	@ 0x450
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007844:	189a      	adds	r2, r3, r2
 8007846:	2a01      	cmp	r2, #1
 8007848:	f240 8095 	bls.w	8007976 <ai_platform_network_post_init+0x152>
 800784c:	f240 4249 	movw	r2, #1097	@ 0x449
 8007850:	4293      	cmp	r3, r2
 8007852:	f000 8090 	beq.w	8007976 <ai_platform_network_post_init+0x152>
 8007856:	4a83      	ldr	r2, [pc, #524]	@ (8007a64 <ai_platform_network_post_init+0x240>)
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800785e:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007862:	f000 8096 	beq.w	8007992 <ai_platform_network_post_init+0x16e>
 8007866:	6813      	ldr	r3, [r2, #0]
 8007868:	f240 4183 	movw	r1, #1155	@ 0x483
 800786c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007870:	428b      	cmp	r3, r1
 8007872:	f000 80b8 	beq.w	80079e6 <ai_platform_network_post_init+0x1c2>
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800787c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007880:	f000 80de 	beq.w	8007a40 <ai_platform_network_post_init+0x21c>
 8007884:	6813      	ldr	r3, [r2, #0]
 8007886:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 80bd 	beq.w	8007a0a <ai_platform_network_post_init+0x1e6>
 8007890:	f7fe ff60 	bl	8006754 <_ai_platform_release_crc>
 8007894:	68e3      	ldr	r3, [r4, #12]
 8007896:	f013 0502 	ands.w	r5, r3, #2
 800789a:	f000 808c 	beq.w	80079b6 <ai_platform_network_post_init+0x192>
 800789e:	4620      	mov	r0, r4
 80078a0:	f000 fc10 	bl	80080c4 <ai_layers_post_init_all>
 80078a4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80078a6:	b16b      	cbz	r3, 80078c4 <ai_platform_network_post_init+0xa0>
 80078a8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80078aa:	e007      	b.n	80078bc <ai_platform_network_post_init+0x98>
 80078ac:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	@ 0x3c
 80078b0:	4798      	blx	r3
 80078b2:	692b      	ldr	r3, [r5, #16]
 80078b4:	b133      	cbz	r3, 80078c4 <ai_platform_network_post_init+0xa0>
 80078b6:	42ab      	cmp	r3, r5
 80078b8:	461d      	mov	r5, r3
 80078ba:	d003      	beq.n	80078c4 <ai_platform_network_post_init+0xa0>
 80078bc:	4629      	mov	r1, r5
 80078be:	2000      	movs	r0, #0
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	d1f3      	bne.n	80078ac <ai_platform_network_post_init+0x88>
 80078c4:	2001      	movs	r0, #1
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	f7fe ff42 	bl	8006750 <_ai_platform_acquire_crc>
 80078cc:	4b64      	ldr	r3, [pc, #400]	@ (8007a60 <ai_platform_network_post_init+0x23c>)
 80078ce:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078d8:	185a      	adds	r2, r3, r1
 80078da:	2a01      	cmp	r2, #1
 80078dc:	d92a      	bls.n	8007934 <ai_platform_network_post_init+0x110>
 80078de:	f240 4249 	movw	r2, #1097	@ 0x449
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d026      	beq.n	8007934 <ai_platform_network_post_init+0x110>
 80078e6:	4a5f      	ldr	r2, [pc, #380]	@ (8007a64 <ai_platform_network_post_init+0x240>)
 80078e8:	6813      	ldr	r3, [r2, #0]
 80078ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ee:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80078f2:	d02c      	beq.n	800794e <ai_platform_network_post_init+0x12a>
 80078f4:	6813      	ldr	r3, [r2, #0]
 80078f6:	f240 4183 	movw	r1, #1155	@ 0x483
 80078fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078fe:	428b      	cmp	r3, r1
 8007900:	d060      	beq.n	80079c4 <ai_platform_network_post_init+0x1a0>
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007908:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 800790c:	f000 808b 	beq.w	8007a26 <ai_platform_network_post_init+0x202>
 8007910:	6813      	ldr	r3, [r2, #0]
 8007912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007916:	2b00      	cmp	r3, #0
 8007918:	d129      	bne.n	800796e <ai_platform_network_post_init+0x14a>
 800791a:	4a53      	ldr	r2, [pc, #332]	@ (8007a68 <ai_platform_network_post_init+0x244>)
 800791c:	2301      	movs	r3, #1
 800791e:	6093      	str	r3, [r2, #8]
 8007920:	6893      	ldr	r3, [r2, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1fc      	bne.n	8007920 <ai_platform_network_post_init+0xfc>
 8007926:	4951      	ldr	r1, [pc, #324]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 8007928:	4b51      	ldr	r3, [pc, #324]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 800792a:	6011      	str	r1, [r2, #0]
 800792c:	6812      	ldr	r2, [r2, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d01d      	beq.n	800796e <ai_platform_network_post_init+0x14a>
 8007932:	e7fe      	b.n	8007932 <ai_platform_network_post_init+0x10e>
 8007934:	4a4c      	ldr	r2, [pc, #304]	@ (8007a68 <ai_platform_network_post_init+0x244>)
 8007936:	2301      	movs	r3, #1
 8007938:	6093      	str	r3, [r2, #8]
 800793a:	6893      	ldr	r3, [r2, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1fc      	bne.n	800793a <ai_platform_network_post_init+0x116>
 8007940:	494a      	ldr	r1, [pc, #296]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 8007942:	4b4b      	ldr	r3, [pc, #300]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 8007944:	6011      	str	r1, [r2, #0]
 8007946:	6812      	ldr	r2, [r2, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d010      	beq.n	800796e <ai_platform_network_post_init+0x14a>
 800794c:	e7fe      	b.n	800794c <ai_platform_network_post_init+0x128>
 800794e:	4a49      	ldr	r2, [pc, #292]	@ (8007a74 <ai_platform_network_post_init+0x250>)
 8007950:	2301      	movs	r3, #1
 8007952:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007956:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1fb      	bne.n	8007956 <ai_platform_network_post_init+0x132>
 800795e:	4943      	ldr	r1, [pc, #268]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 8007960:	4b43      	ldr	r3, [pc, #268]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 8007962:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 8007966:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 800796a:	429a      	cmp	r2, r3
 800796c:	d110      	bne.n	8007990 <ai_platform_network_post_init+0x16c>
 800796e:	f7fe fef1 	bl	8006754 <_ai_platform_release_crc>
 8007972:	2000      	movs	r0, #0
 8007974:	bd38      	pop	{r3, r4, r5, pc}
 8007976:	4a3c      	ldr	r2, [pc, #240]	@ (8007a68 <ai_platform_network_post_init+0x244>)
 8007978:	2301      	movs	r3, #1
 800797a:	6093      	str	r3, [r2, #8]
 800797c:	6893      	ldr	r3, [r2, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1fc      	bne.n	800797c <ai_platform_network_post_init+0x158>
 8007982:	493a      	ldr	r1, [pc, #232]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 8007984:	4b3a      	ldr	r3, [pc, #232]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 8007986:	6011      	str	r1, [r2, #0]
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d080      	beq.n	8007890 <ai_platform_network_post_init+0x6c>
 800798e:	e7fe      	b.n	800798e <ai_platform_network_post_init+0x16a>
 8007990:	e7fe      	b.n	8007990 <ai_platform_network_post_init+0x16c>
 8007992:	4a38      	ldr	r2, [pc, #224]	@ (8007a74 <ai_platform_network_post_init+0x250>)
 8007994:	2301      	movs	r3, #1
 8007996:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 800799a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1fb      	bne.n	800799a <ai_platform_network_post_init+0x176>
 80079a2:	4932      	ldr	r1, [pc, #200]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 80079a4:	4b32      	ldr	r3, [pc, #200]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 80079a6:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80079aa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80079ae:	429a      	cmp	r2, r3
 80079b0:	f43f af6e 	beq.w	8007890 <ai_platform_network_post_init+0x6c>
 80079b4:	e7fe      	b.n	80079b4 <ai_platform_network_post_init+0x190>
 80079b6:	2210      	movs	r2, #16
 80079b8:	2111      	movs	r1, #17
 80079ba:	18a0      	adds	r0, r4, r2
 80079bc:	f000 fb40 	bl	8008040 <core_set_error>
 80079c0:	4628      	mov	r0, r5
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	4a2b      	ldr	r2, [pc, #172]	@ (8007a74 <ai_platform_network_post_init+0x250>)
 80079c6:	2301      	movs	r3, #1
 80079c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80079cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1fb      	bne.n	80079cc <ai_platform_network_post_init+0x1a8>
 80079d4:	4925      	ldr	r1, [pc, #148]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 80079d6:	4b26      	ldr	r3, [pc, #152]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 80079d8:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80079dc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d0c4      	beq.n	800796e <ai_platform_network_post_init+0x14a>
 80079e4:	e7fe      	b.n	80079e4 <ai_platform_network_post_init+0x1c0>
 80079e6:	4a23      	ldr	r2, [pc, #140]	@ (8007a74 <ai_platform_network_post_init+0x250>)
 80079e8:	2301      	movs	r3, #1
 80079ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 80079ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1fb      	bne.n	80079ee <ai_platform_network_post_init+0x1ca>
 80079f6:	491d      	ldr	r1, [pc, #116]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 80079f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 80079fa:	f8c2 1c00 	str.w	r1, [r2, #3072]	@ 0xc00
 80079fe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007a02:	429a      	cmp	r2, r3
 8007a04:	f43f af44 	beq.w	8007890 <ai_platform_network_post_init+0x6c>
 8007a08:	e7fe      	b.n	8007a08 <ai_platform_network_post_init+0x1e4>
 8007a0a:	4a17      	ldr	r2, [pc, #92]	@ (8007a68 <ai_platform_network_post_init+0x244>)
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	6093      	str	r3, [r2, #8]
 8007a10:	6893      	ldr	r3, [r2, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1fc      	bne.n	8007a10 <ai_platform_network_post_init+0x1ec>
 8007a16:	4915      	ldr	r1, [pc, #84]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 8007a18:	4b15      	ldr	r3, [pc, #84]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 8007a1a:	6011      	str	r1, [r2, #0]
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	f43f af36 	beq.w	8007890 <ai_platform_network_post_init+0x6c>
 8007a24:	e7fe      	b.n	8007a24 <ai_platform_network_post_init+0x200>
 8007a26:	4a10      	ldr	r2, [pc, #64]	@ (8007a68 <ai_platform_network_post_init+0x244>)
 8007a28:	2301      	movs	r3, #1
 8007a2a:	6093      	str	r3, [r2, #8]
 8007a2c:	6893      	ldr	r3, [r2, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1fc      	bne.n	8007a2c <ai_platform_network_post_init+0x208>
 8007a32:	490e      	ldr	r1, [pc, #56]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 8007a34:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 8007a36:	6011      	str	r1, [r2, #0]
 8007a38:	6812      	ldr	r2, [r2, #0]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d097      	beq.n	800796e <ai_platform_network_post_init+0x14a>
 8007a3e:	e7fe      	b.n	8007a3e <ai_platform_network_post_init+0x21a>
 8007a40:	4a09      	ldr	r2, [pc, #36]	@ (8007a68 <ai_platform_network_post_init+0x244>)
 8007a42:	2301      	movs	r3, #1
 8007a44:	6093      	str	r3, [r2, #8]
 8007a46:	6893      	ldr	r3, [r2, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1fc      	bne.n	8007a46 <ai_platform_network_post_init+0x222>
 8007a4c:	4907      	ldr	r1, [pc, #28]	@ (8007a6c <ai_platform_network_post_init+0x248>)
 8007a4e:	4b08      	ldr	r3, [pc, #32]	@ (8007a70 <ai_platform_network_post_init+0x24c>)
 8007a50:	6011      	str	r1, [r2, #0]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	f43f af1b 	beq.w	8007890 <ai_platform_network_post_init+0x6c>
 8007a5a:	e7fe      	b.n	8007a5a <ai_platform_network_post_init+0x236>
 8007a5c:	a1c00100 	.word	0xa1c00100
 8007a60:	e0042000 	.word	0xe0042000
 8007a64:	5c001000 	.word	0x5c001000
 8007a68:	40023000 	.word	0x40023000
 8007a6c:	f407a5c2 	.word	0xf407a5c2
 8007a70:	b5e8b5cd 	.word	0xb5e8b5cd
 8007a74:	58024000 	.word	0x58024000

08007a78 <ai_platform_network_process>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	460e      	mov	r6, r1
 8007a80:	4605      	mov	r5, r0
 8007a82:	9201      	str	r2, [sp, #4]
 8007a84:	b120      	cbz	r0, 8007a90 <ai_platform_network_process+0x18>
 8007a86:	4b24      	ldr	r3, [pc, #144]	@ (8007b18 <ai_platform_network_process+0xa0>)
 8007a88:	6802      	ldr	r2, [r0, #0]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	bf18      	it	ne
 8007a8e:	2500      	movne	r5, #0
 8007a90:	f7fe fe5e 	bl	8006750 <_ai_platform_acquire_crc>
 8007a94:	4b21      	ldr	r3, [pc, #132]	@ (8007b1c <ai_platform_network_process+0xa4>)
 8007a96:	f46f 618a 	mvn.w	r1, #1104	@ 0x450
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007aa0:	185a      	adds	r2, r3, r1
 8007aa2:	2a01      	cmp	r2, #1
 8007aa4:	d92b      	bls.n	8007afe <ai_platform_network_process+0x86>
 8007aa6:	f240 4249 	movw	r2, #1097	@ 0x449
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d027      	beq.n	8007afe <ai_platform_network_process+0x86>
 8007aae:	4a1c      	ldr	r2, [pc, #112]	@ (8007b20 <ai_platform_network_process+0xa8>)
 8007ab0:	6813      	ldr	r3, [r2, #0]
 8007ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ab6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8007aba:	d039      	beq.n	8007b30 <ai_platform_network_process+0xb8>
 8007abc:	6813      	ldr	r3, [r2, #0]
 8007abe:	f240 4183 	movw	r1, #1155	@ 0x483
 8007ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ac6:	428b      	cmp	r3, r1
 8007ac8:	f000 819c 	beq.w	8007e04 <ai_platform_network_process+0x38c>
 8007acc:	6813      	ldr	r3, [r2, #0]
 8007ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ad2:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8007ad6:	f000 8179 	beq.w	8007dcc <ai_platform_network_process+0x354>
 8007ada:	6813      	ldr	r3, [r2, #0]
 8007adc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d136      	bne.n	8007b52 <ai_platform_network_process+0xda>
 8007ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8007b24 <ai_platform_network_process+0xac>)
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	6093      	str	r3, [r2, #8]
 8007aea:	6893      	ldr	r3, [r2, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1fc      	bne.n	8007aea <ai_platform_network_process+0x72>
 8007af0:	4b0d      	ldr	r3, [pc, #52]	@ (8007b28 <ai_platform_network_process+0xb0>)
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	4b0d      	ldr	r3, [pc, #52]	@ (8007b2c <ai_platform_network_process+0xb4>)
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d02a      	beq.n	8007b52 <ai_platform_network_process+0xda>
 8007afc:	e7fe      	b.n	8007afc <ai_platform_network_process+0x84>
 8007afe:	4a09      	ldr	r2, [pc, #36]	@ (8007b24 <ai_platform_network_process+0xac>)
 8007b00:	2301      	movs	r3, #1
 8007b02:	6093      	str	r3, [r2, #8]
 8007b04:	6893      	ldr	r3, [r2, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1fc      	bne.n	8007b04 <ai_platform_network_process+0x8c>
 8007b0a:	4b07      	ldr	r3, [pc, #28]	@ (8007b28 <ai_platform_network_process+0xb0>)
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <ai_platform_network_process+0xb4>)
 8007b10:	6812      	ldr	r2, [r2, #0]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d01d      	beq.n	8007b52 <ai_platform_network_process+0xda>
 8007b16:	e7fe      	b.n	8007b16 <ai_platform_network_process+0x9e>
 8007b18:	a1c00100 	.word	0xa1c00100
 8007b1c:	e0042000 	.word	0xe0042000
 8007b20:	5c001000 	.word	0x5c001000
 8007b24:	40023000 	.word	0x40023000
 8007b28:	f407a5c2 	.word	0xf407a5c2
 8007b2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007b30:	4ab0      	ldr	r2, [pc, #704]	@ (8007df4 <ai_platform_network_process+0x37c>)
 8007b32:	2301      	movs	r3, #1
 8007b34:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007b38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1fb      	bne.n	8007b38 <ai_platform_network_process+0xc0>
 8007b40:	4bad      	ldr	r3, [pc, #692]	@ (8007df8 <ai_platform_network_process+0x380>)
 8007b42:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007b46:	4bad      	ldr	r3, [pc, #692]	@ (8007dfc <ai_platform_network_process+0x384>)
 8007b48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	f040 812b 	bne.w	8007da8 <ai_platform_network_process+0x330>
 8007b52:	f7fe fdff 	bl	8006754 <_ai_platform_release_crc>
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	f000 8172 	beq.w	8007e40 <ai_platform_network_process+0x3c8>
 8007b5c:	8dab      	ldrh	r3, [r5, #44]	@ 0x2c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8123 	beq.w	8007daa <ai_platform_network_process+0x332>
 8007b64:	68eb      	ldr	r3, [r5, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8007b6c:	f003 0303 	and.w	r3, r3, #3
 8007b70:	616a      	str	r2, [r5, #20]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	f040 811f 	bne.w	8007db6 <ai_platform_network_process+0x33e>
 8007b78:	2e00      	cmp	r6, #0
 8007b7a:	f000 8156 	beq.w	8007e2a <ai_platform_network_process+0x3b2>
 8007b7e:	fab8 f788 	clz	r7, r8
 8007b82:	097f      	lsrs	r7, r7, #5
 8007b84:	f1b8 0f00 	cmp.w	r8, #0
 8007b88:	f000 814f 	beq.w	8007e2a <ai_platform_network_process+0x3b2>
 8007b8c:	f8b8 3000 	ldrh.w	r3, [r8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 814a 	beq.w	8007e2a <ai_platform_network_process+0x3b2>
 8007b96:	69b3      	ldr	r3, [r6, #24]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8007b9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d072      	beq.n	8007c8c <ai_platform_network_process+0x214>
 8007ba6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007baa:	2c00      	cmp	r4, #0
 8007bac:	d06e      	beq.n	8007c8c <ai_platform_network_process+0x214>
 8007bae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bb2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007bb6:	f8d3 a000 	ldr.w	sl, [r3]
 8007bba:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8007bbe:	f000 8133 	beq.w	8007e28 <ai_platform_network_process+0x3b0>
 8007bc2:	69a3      	ldr	r3, [r4, #24]
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	685d      	ldr	r5, [r3, #4]
 8007bca:	f7fe fd73 	bl	80066b4 <ai_buffer_get_size>
 8007bce:	4285      	cmp	r5, r0
 8007bd0:	f0c0 8138 	bcc.w	8007e44 <ai_platform_network_process+0x3cc>
 8007bd4:	68e0      	ldr	r0, [r4, #12]
 8007bd6:	69b1      	ldr	r1, [r6, #24]
 8007bd8:	68c2      	ldr	r2, [r0, #12]
 8007bda:	68cb      	ldr	r3, [r1, #12]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	f040 8131 	bne.w	8007e44 <ai_platform_network_process+0x3cc>
 8007be2:	6882      	ldr	r2, [r0, #8]
 8007be4:	688b      	ldr	r3, [r1, #8]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	f040 812c 	bne.w	8007e44 <ai_platform_network_process+0x3cc>
 8007bec:	6842      	ldr	r2, [r0, #4]
 8007bee:	684b      	ldr	r3, [r1, #4]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	f040 8127 	bne.w	8007e44 <ai_platform_network_process+0x3cc>
 8007bf6:	69a3      	ldr	r3, [r4, #24]
 8007bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bfc:	f001 fefa 	bl	80099f4 <ai_array_get_data_byte_size>
 8007c00:	4605      	mov	r5, r0
 8007c02:	4620      	mov	r0, r4
 8007c04:	f001 ff0c 	bl	8009a20 <get_tensor_byte_size>
 8007c08:	4285      	cmp	r5, r0
 8007c0a:	f0c0 811b 	bcc.w	8007e44 <ai_platform_network_process+0x3cc>
 8007c0e:	69a3      	ldr	r3, [r4, #24]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	f001 fe5b 	bl	80098cc <ai_array_to_buffer_fmt>
 8007c16:	6833      	ldr	r3, [r6, #0]
 8007c18:	4058      	eors	r0, r3
 8007c1a:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007c1e:	f040 81c8 	bne.w	8007fb2 <ai_platform_network_process+0x53a>
 8007c22:	6873      	ldr	r3, [r6, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 81bb 	beq.w	8007fa0 <ai_platform_network_process+0x528>
 8007c2a:	69b3      	ldr	r3, [r6, #24]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 81c8 	beq.w	8007fc4 <ai_platform_network_process+0x54c>
 8007c34:	9a02      	ldr	r2, [sp, #8]
 8007c36:	4620      	mov	r0, r4
 8007c38:	3701      	adds	r7, #1
 8007c3a:	361c      	adds	r6, #28
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	bf38      	it	cc
 8007c40:	461a      	movcc	r2, r3
 8007c42:	9202      	str	r2, [sp, #8]
 8007c44:	f001 feec 	bl	8009a20 <get_tensor_byte_size>
 8007c48:	f8c9 0008 	str.w	r0, [r9, #8]
 8007c4c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	fb00 f303 	mul.w	r3, r0, r3
 8007c56:	f8c9 300c 	str.w	r3, [r9, #12]
 8007c5a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007c5e:	440b      	add	r3, r1
 8007c60:	f8c9 1004 	str.w	r1, [r9, #4]
 8007c64:	f84a 300b 	str.w	r3, [sl, fp]
 8007c68:	69a0      	ldr	r0, [r4, #24]
 8007c6a:	6803      	ldr	r3, [r0, #0]
 8007c6c:	009a      	lsls	r2, r3, #2
 8007c6e:	f100 80bb 	bmi.w	8007de8 <ai_platform_network_process+0x370>
 8007c72:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	4419      	add	r1, r3
 8007c7a:	6081      	str	r1, [r0, #8]
 8007c7c:	69a3      	ldr	r3, [r4, #24]
 8007c7e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	f8b8 3000 	ldrh.w	r3, [r8]
 8007c88:	42bb      	cmp	r3, r7
 8007c8a:	d888      	bhi.n	8007b9e <ai_platform_network_process+0x126>
 8007c8c:	9d03      	ldr	r5, [sp, #12]
 8007c8e:	9b01      	ldr	r3, [sp, #4]
 8007c90:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 819f 	beq.w	8007fd6 <ai_platform_network_process+0x55e>
 8007c98:	2a01      	cmp	r2, #1
 8007c9a:	f240 8179 	bls.w	8007f90 <ai_platform_network_process+0x518>
 8007c9e:	f8d5 9030 	ldr.w	r9, [r5, #48]	@ 0x30
 8007ca2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 8172 	beq.w	8007f90 <ai_platform_network_process+0x518>
 8007cac:	9e01      	ldr	r6, [sp, #4]
 8007cae:	2700      	movs	r7, #0
 8007cb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80d3 	beq.w	8007e60 <ai_platform_network_process+0x3e8>
 8007cba:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	f000 80ce 	beq.w	8007e60 <ai_platform_network_process+0x3e8>
 8007cc4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007cc8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007ccc:	f8d3 8000 	ldr.w	r8, [r3]
 8007cd0:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007cd4:	f000 819d 	beq.w	8008012 <ai_platform_network_process+0x59a>
 8007cd8:	69a3      	ldr	r3, [r4, #24]
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4630      	mov	r0, r6
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	9301      	str	r3, [sp, #4]
 8007ce2:	f7fe fce7 	bl	80066b4 <ai_buffer_get_size>
 8007ce6:	9b01      	ldr	r3, [sp, #4]
 8007ce8:	4283      	cmp	r3, r0
 8007cea:	f0c0 8151 	bcc.w	8007f90 <ai_platform_network_process+0x518>
 8007cee:	68e0      	ldr	r0, [r4, #12]
 8007cf0:	69b1      	ldr	r1, [r6, #24]
 8007cf2:	68c2      	ldr	r2, [r0, #12]
 8007cf4:	68cb      	ldr	r3, [r1, #12]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	f040 814a 	bne.w	8007f90 <ai_platform_network_process+0x518>
 8007cfc:	6882      	ldr	r2, [r0, #8]
 8007cfe:	688b      	ldr	r3, [r1, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	f040 8145 	bne.w	8007f90 <ai_platform_network_process+0x518>
 8007d06:	6842      	ldr	r2, [r0, #4]
 8007d08:	684b      	ldr	r3, [r1, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	f040 8140 	bne.w	8007f90 <ai_platform_network_process+0x518>
 8007d10:	69a3      	ldr	r3, [r4, #24]
 8007d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d16:	f001 fe6d 	bl	80099f4 <ai_array_get_data_byte_size>
 8007d1a:	9001      	str	r0, [sp, #4]
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f001 fe7f 	bl	8009a20 <get_tensor_byte_size>
 8007d22:	9b01      	ldr	r3, [sp, #4]
 8007d24:	4283      	cmp	r3, r0
 8007d26:	f0c0 8133 	bcc.w	8007f90 <ai_platform_network_process+0x518>
 8007d2a:	69a3      	ldr	r3, [r4, #24]
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	f001 fdcd 	bl	80098cc <ai_array_to_buffer_fmt>
 8007d32:	6833      	ldr	r3, [r6, #0]
 8007d34:	4058      	eors	r0, r3
 8007d36:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007d3a:	f040 815a 	bne.w	8007ff2 <ai_platform_network_process+0x57a>
 8007d3e:	6873      	ldr	r3, [r6, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 814e 	beq.w	8007fe2 <ai_platform_network_process+0x56a>
 8007d46:	69b3      	ldr	r3, [r6, #24]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8159 	beq.w	8008002 <ai_platform_network_process+0x58a>
 8007d50:	9a02      	ldr	r2, [sp, #8]
 8007d52:	4620      	mov	r0, r4
 8007d54:	3701      	adds	r7, #1
 8007d56:	361c      	adds	r6, #28
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	bf38      	it	cc
 8007d5c:	461a      	movcc	r2, r3
 8007d5e:	9202      	str	r2, [sp, #8]
 8007d60:	f001 fe5e 	bl	8009a20 <get_tensor_byte_size>
 8007d64:	f8ca 0008 	str.w	r0, [sl, #8]
 8007d68:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	fb00 f303 	mul.w	r3, r0, r3
 8007d72:	f8ca 300c 	str.w	r3, [sl, #12]
 8007d76:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f8ca 1004 	str.w	r1, [sl, #4]
 8007d80:	f848 300b 	str.w	r3, [r8, fp]
 8007d84:	69a0      	ldr	r0, [r4, #24]
 8007d86:	6803      	ldr	r3, [r0, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	d464      	bmi.n	8007e56 <ai_platform_network_process+0x3de>
 8007d8c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007d90:	1a9b      	subs	r3, r3, r2
 8007d92:	4419      	add	r1, r3
 8007d94:	6081      	str	r1, [r0, #8]
 8007d96:	69a3      	ldr	r3, [r4, #24]
 8007d98:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007d9c:	60da      	str	r2, [r3, #12]
 8007d9e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007da2:	429f      	cmp	r7, r3
 8007da4:	d384      	bcc.n	8007cb0 <ai_platform_network_process+0x238>
 8007da6:	e05b      	b.n	8007e60 <ai_platform_network_process+0x3e8>
 8007da8:	e7fe      	b.n	8007da8 <ai_platform_network_process+0x330>
 8007daa:	68ea      	ldr	r2, [r5, #12]
 8007dac:	616b      	str	r3, [r5, #20]
 8007dae:	f002 0203 	and.w	r2, r2, #3
 8007db2:	2a03      	cmp	r2, #3
 8007db4:	d039      	beq.n	8007e2a <ai_platform_network_process+0x3b2>
 8007db6:	2230      	movs	r2, #48	@ 0x30
 8007db8:	2111      	movs	r1, #17
 8007dba:	f105 0010 	add.w	r0, r5, #16
 8007dbe:	2400      	movs	r4, #0
 8007dc0:	f000 f93e 	bl	8008040 <core_set_error>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	b005      	add	sp, #20
 8007dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8007e00 <ai_platform_network_process+0x388>)
 8007dce:	2301      	movs	r3, #1
 8007dd0:	6093      	str	r3, [r2, #8]
 8007dd2:	6893      	ldr	r3, [r2, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1fc      	bne.n	8007dd2 <ai_platform_network_process+0x35a>
 8007dd8:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <ai_platform_network_process+0x380>)
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	4b07      	ldr	r3, [pc, #28]	@ (8007dfc <ai_platform_network_process+0x384>)
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	f43f aeb6 	beq.w	8007b52 <ai_platform_network_process+0xda>
 8007de6:	e7fe      	b.n	8007de6 <ai_platform_network_process+0x36e>
 8007de8:	f8b8 3000 	ldrh.w	r3, [r8]
 8007dec:	429f      	cmp	r7, r3
 8007dee:	f4ff aed6 	bcc.w	8007b9e <ai_platform_network_process+0x126>
 8007df2:	e74b      	b.n	8007c8c <ai_platform_network_process+0x214>
 8007df4:	58024000 	.word	0x58024000
 8007df8:	f407a5c2 	.word	0xf407a5c2
 8007dfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8007e00:	40023000 	.word	0x40023000
 8007e04:	4a87      	ldr	r2, [pc, #540]	@ (8008024 <ai_platform_network_process+0x5ac>)
 8007e06:	2301      	movs	r3, #1
 8007e08:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 8007e0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1fb      	bne.n	8007e0c <ai_platform_network_process+0x394>
 8007e14:	4b84      	ldr	r3, [pc, #528]	@ (8008028 <ai_platform_network_process+0x5b0>)
 8007e16:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8007e1a:	4b84      	ldr	r3, [pc, #528]	@ (800802c <ai_platform_network_process+0x5b4>)
 8007e1c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 8007e20:	429a      	cmp	r2, r3
 8007e22:	f43f ae96 	beq.w	8007b52 <ai_platform_network_process+0xda>
 8007e26:	e7fe      	b.n	8007e26 <ai_platform_network_process+0x3ae>
 8007e28:	9d03      	ldr	r5, [sp, #12]
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	2217      	movs	r2, #23
 8007e2e:	2112      	movs	r1, #18
 8007e30:	f105 0010 	add.w	r0, r5, #16
 8007e34:	f000 f904 	bl	8008040 <core_set_error>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	b005      	add	sp, #20
 8007e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e40:	462c      	mov	r4, r5
 8007e42:	e7bf      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8007e44:	9d03      	ldr	r5, [sp, #12]
 8007e46:	2218      	movs	r2, #24
 8007e48:	2112      	movs	r1, #18
 8007e4a:	2400      	movs	r4, #0
 8007e4c:	f105 0010 	add.w	r0, r5, #16
 8007e50:	f000 f8f6 	bl	8008040 <core_set_error>
 8007e54:	e7b6      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8007e56:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007e5a:	429f      	cmp	r7, r3
 8007e5c:	f4ff af28 	bcc.w	8007cb0 <ai_platform_network_process+0x238>
 8007e60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007e64:	8daa      	ldrh	r2, [r5, #44]	@ 0x2c
 8007e66:	82ab      	strh	r3, [r5, #20]
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	f040 808b 	bne.w	8007f84 <ai_platform_network_process+0x50c>
 8007e6e:	4616      	mov	r6, r2
 8007e70:	4617      	mov	r7, r2
 8007e72:	8aec      	ldrh	r4, [r5, #22]
 8007e74:	429c      	cmp	r4, r3
 8007e76:	d2a5      	bcs.n	8007dc4 <ai_platform_network_process+0x34c>
 8007e78:	46ab      	mov	fp, r5
 8007e7a:	2e00      	cmp	r6, #0
 8007e7c:	d030      	beq.n	8007ee0 <ai_platform_network_process+0x468>
 8007e7e:	f04f 0800 	mov.w	r8, #0
 8007e82:	e014      	b.n	8007eae <ai_platform_network_process+0x436>
 8007e84:	6882      	ldr	r2, [r0, #8]
 8007e86:	68c5      	ldr	r5, [r0, #12]
 8007e88:	6863      	ldr	r3, [r4, #4]
 8007e8a:	1b52      	subs	r2, r2, r5
 8007e8c:	4413      	add	r3, r2
 8007e8e:	6083      	str	r3, [r0, #8]
 8007e90:	698b      	ldr	r3, [r1, #24]
 8007e92:	6862      	ldr	r2, [r4, #4]
 8007e94:	60da      	str	r2, [r3, #12]
 8007e96:	f859 200a 	ldr.w	r2, [r9, sl]
 8007e9a:	f108 0801 	add.w	r8, r8, #1
 8007e9e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007ea2:	440b      	add	r3, r1
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d301      	bcc.n	8007eac <ai_platform_network_process+0x434>
 8007ea8:	68e3      	ldr	r3, [r4, #12]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	8833      	ldrh	r3, [r6, #0]
 8007eb0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007eb4:	4543      	cmp	r3, r8
 8007eb6:	d913      	bls.n	8007ee0 <ai_platform_network_process+0x468>
 8007eb8:	6873      	ldr	r3, [r6, #4]
 8007eba:	b18b      	cbz	r3, 8007ee0 <ai_platform_network_process+0x468>
 8007ebc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007ec0:	b171      	cbz	r1, 8007ee0 <ai_platform_network_process+0x468>
 8007ec2:	6988      	ldr	r0, [r1, #24]
 8007ec4:	68b2      	ldr	r2, [r6, #8]
 8007ec6:	6803      	ldr	r3, [r0, #0]
 8007ec8:	f8d2 9000 	ldr.w	r9, [r2]
 8007ecc:	009d      	lsls	r5, r3, #2
 8007ece:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007ed2:	d5d7      	bpl.n	8007e84 <ai_platform_network_process+0x40c>
 8007ed4:	6881      	ldr	r1, [r0, #8]
 8007ed6:	68a2      	ldr	r2, [r4, #8]
 8007ed8:	6860      	ldr	r0, [r4, #4]
 8007eda:	f001 fc6f 	bl	80097bc <st_int8_copy>
 8007ede:	e7da      	b.n	8007e96 <ai_platform_network_process+0x41e>
 8007ee0:	4658      	mov	r0, fp
 8007ee2:	f000 f903 	bl	80080ec <ai_layers_forward_all>
 8007ee6:	2f00      	cmp	r7, #0
 8007ee8:	d03d      	beq.n	8007f66 <ai_platform_network_process+0x4ee>
 8007eea:	2400      	movs	r4, #0
 8007eec:	e016      	b.n	8007f1c <ai_platform_network_process+0x4a4>
 8007eee:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007ef2:	f859 100a 	ldr.w	r1, [r9, sl]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	428b      	cmp	r3, r1
 8007efa:	d302      	bcc.n	8007f02 <ai_platform_network_process+0x48a>
 8007efc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f00:	1acb      	subs	r3, r1, r3
 8007f02:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f06:	6981      	ldr	r1, [r0, #24]
 8007f08:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007f0c:	1b52      	subs	r2, r2, r5
 8007f0e:	4413      	add	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
 8007f12:	6983      	ldr	r3, [r0, #24]
 8007f14:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	3401      	adds	r4, #1
 8007f1c:	883b      	ldrh	r3, [r7, #0]
 8007f1e:	42a3      	cmp	r3, r4
 8007f20:	d921      	bls.n	8007f66 <ai_platform_network_process+0x4ee>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	b1fb      	cbz	r3, 8007f66 <ai_platform_network_process+0x4ee>
 8007f26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007f2a:	b1e0      	cbz	r0, 8007f66 <ai_platform_network_process+0x4ee>
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007f32:	6983      	ldr	r3, [r0, #24]
 8007f34:	f8d2 9000 	ldr.w	r9, [r2]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007f3e:	0092      	lsls	r2, r2, #2
 8007f40:	d5d5      	bpl.n	8007eee <ai_platform_network_process+0x476>
 8007f42:	6898      	ldr	r0, [r3, #8]
 8007f44:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007f48:	f001 fc38 	bl	80097bc <st_int8_copy>
 8007f4c:	f859 200a 	ldr.w	r2, [r9, sl]
 8007f50:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007f54:	440b      	add	r3, r1
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d302      	bcc.n	8007f60 <ai_platform_network_process+0x4e8>
 8007f5a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f64:	e7d9      	b.n	8007f1a <ai_platform_network_process+0x4a2>
 8007f66:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007f6a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007f6e:	3401      	adds	r4, #1
 8007f70:	b2a4      	uxth	r4, r4
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007f78:	f63f af7f 	bhi.w	8007e7a <ai_platform_network_process+0x402>
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	b005      	add	sp, #20
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	2a01      	cmp	r2, #1
 8007f86:	6b2e      	ldr	r6, [r5, #48]	@ 0x30
 8007f88:	d029      	beq.n	8007fde <ai_platform_network_process+0x566>
 8007f8a:	f106 070c 	add.w	r7, r6, #12
 8007f8e:	e770      	b.n	8007e72 <ai_platform_network_process+0x3fa>
 8007f90:	2218      	movs	r2, #24
 8007f92:	2113      	movs	r1, #19
 8007f94:	f105 0010 	add.w	r0, r5, #16
 8007f98:	2400      	movs	r4, #0
 8007f9a:	f000 f851 	bl	8008040 <core_set_error>
 8007f9e:	e711      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8007fa0:	9d03      	ldr	r5, [sp, #12]
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	2217      	movs	r2, #23
 8007fa6:	2112      	movs	r1, #18
 8007fa8:	f105 0010 	add.w	r0, r5, #16
 8007fac:	f000 f848 	bl	8008040 <core_set_error>
 8007fb0:	e708      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8007fb2:	9d03      	ldr	r5, [sp, #12]
 8007fb4:	2219      	movs	r2, #25
 8007fb6:	2112      	movs	r1, #18
 8007fb8:	2400      	movs	r4, #0
 8007fba:	f105 0010 	add.w	r0, r5, #16
 8007fbe:	f000 f83f 	bl	8008040 <core_set_error>
 8007fc2:	e6ff      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8007fc4:	9d03      	ldr	r5, [sp, #12]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	2221      	movs	r2, #33	@ 0x21
 8007fca:	2112      	movs	r1, #18
 8007fcc:	f105 0010 	add.w	r0, r5, #16
 8007fd0:	f000 f836 	bl	8008040 <core_set_error>
 8007fd4:	e6f6      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8007fd6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007fda:	82ab      	strh	r3, [r5, #20]
 8007fdc:	e744      	b.n	8007e68 <ai_platform_network_process+0x3f0>
 8007fde:	2700      	movs	r7, #0
 8007fe0:	e747      	b.n	8007e72 <ai_platform_network_process+0x3fa>
 8007fe2:	4604      	mov	r4, r0
 8007fe4:	2217      	movs	r2, #23
 8007fe6:	2113      	movs	r1, #19
 8007fe8:	f105 0010 	add.w	r0, r5, #16
 8007fec:	f000 f828 	bl	8008040 <core_set_error>
 8007ff0:	e6e8      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8007ff2:	2219      	movs	r2, #25
 8007ff4:	2113      	movs	r1, #19
 8007ff6:	f105 0010 	add.w	r0, r5, #16
 8007ffa:	2400      	movs	r4, #0
 8007ffc:	f000 f820 	bl	8008040 <core_set_error>
 8008000:	e6e0      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8008002:	4604      	mov	r4, r0
 8008004:	2221      	movs	r2, #33	@ 0x21
 8008006:	2113      	movs	r1, #19
 8008008:	f105 0010 	add.w	r0, r5, #16
 800800c:	f000 f818 	bl	8008040 <core_set_error>
 8008010:	e6d8      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8008012:	2217      	movs	r2, #23
 8008014:	2113      	movs	r1, #19
 8008016:	f105 0010 	add.w	r0, r5, #16
 800801a:	4654      	mov	r4, sl
 800801c:	f000 f810 	bl	8008040 <core_set_error>
 8008020:	e6d0      	b.n	8007dc4 <ai_platform_network_process+0x34c>
 8008022:	bf00      	nop
 8008024:	58024000 	.word	0x58024000
 8008028:	f407a5c2 	.word	0xf407a5c2
 800802c:	b5e8b5cd 	.word	0xb5e8b5cd

08008030 <core_init>:
 8008030:	2001      	movs	r0, #1
 8008032:	4770      	bx	lr

08008034 <core_get_error>:
 8008034:	4603      	mov	r3, r0
 8008036:	2200      	movs	r2, #0
 8008038:	6800      	ldr	r0, [r0, #0]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop

08008040 <core_set_error>:
 8008040:	4603      	mov	r3, r0
 8008042:	7800      	ldrb	r0, [r0, #0]
 8008044:	b108      	cbz	r0, 800804a <core_set_error+0xa>
 8008046:	2000      	movs	r0, #0
 8008048:	4770      	bx	lr
 800804a:	7019      	strb	r1, [r3, #0]
 800804c:	2001      	movs	r0, #1
 800804e:	6819      	ldr	r1, [r3, #0]
 8008050:	f362 211f 	bfi	r1, r2, #8, #24
 8008054:	6019      	str	r1, [r3, #0]
 8008056:	4770      	bx	lr

08008058 <ai_check_custom_types>:
 8008058:	b082      	sub	sp, #8
 800805a:	4b12      	ldr	r3, [pc, #72]	@ (80080a4 <ai_check_custom_types+0x4c>)
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	b118      	cbz	r0, 8008068 <ai_check_custom_types+0x10>
 8008060:	7803      	ldrb	r3, [r0, #0]
 8008062:	2b03      	cmp	r3, #3
 8008064:	d002      	beq.n	800806c <ai_check_custom_types+0x14>
 8008066:	2000      	movs	r0, #0
 8008068:	b002      	add	sp, #8
 800806a:	4770      	bx	lr
 800806c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <ai_check_custom_types+0x26>
 8008074:	2001      	movs	r0, #1
 8008076:	f080 0001 	eor.w	r0, r0, #1
 800807a:	b002      	add	sp, #8
 800807c:	4770      	bx	lr
 800807e:	7842      	ldrb	r2, [r0, #1]
 8008080:	3001      	adds	r0, #1
 8008082:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008086:	429a      	cmp	r2, r3
 8008088:	d1f4      	bne.n	8008074 <ai_check_custom_types+0x1c>
 800808a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800808e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008092:	429a      	cmp	r2, r3
 8008094:	d1ee      	bne.n	8008074 <ai_check_custom_types+0x1c>
 8008096:	7842      	ldrb	r2, [r0, #1]
 8008098:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800809c:	429a      	cmp	r2, r3
 800809e:	d1e9      	bne.n	8008074 <ai_check_custom_types+0x1c>
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7e8      	b.n	8008076 <ai_check_custom_types+0x1e>
 80080a4:	84048403 	.word	0x84048403

080080a8 <ai_layers_init_all>:
 80080a8:	2100      	movs	r1, #0
 80080aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80080ac:	b13b      	cbz	r3, 80080be <ai_layers_init_all+0x16>
 80080ae:	691a      	ldr	r2, [r3, #16]
 80080b0:	3101      	adds	r1, #1
 80080b2:	60d8      	str	r0, [r3, #12]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	4613      	mov	r3, r2
 80080b8:	d001      	beq.n	80080be <ai_layers_init_all+0x16>
 80080ba:	2a00      	cmp	r2, #0
 80080bc:	d1f6      	bne.n	80080ac <ai_layers_init_all+0x4>
 80080be:	4608      	mov	r0, r1
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop

080080c4 <ai_layers_post_init_all>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	2500      	movs	r5, #0
 80080c8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80080ca:	b16c      	cbz	r4, 80080e8 <ai_layers_post_init_all+0x24>
 80080cc:	6863      	ldr	r3, [r4, #4]
 80080ce:	07db      	lsls	r3, r3, #31
 80080d0:	d504      	bpl.n	80080dc <ai_layers_post_init_all+0x18>
 80080d2:	6a23      	ldr	r3, [r4, #32]
 80080d4:	4620      	mov	r0, r4
 80080d6:	b10b      	cbz	r3, 80080dc <ai_layers_post_init_all+0x18>
 80080d8:	3501      	adds	r5, #1
 80080da:	4798      	blx	r3
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	42a3      	cmp	r3, r4
 80080e0:	461c      	mov	r4, r3
 80080e2:	d001      	beq.n	80080e8 <ai_layers_post_init_all+0x24>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f0      	bne.n	80080ca <ai_layers_post_init_all+0x6>
 80080e8:	4628      	mov	r0, r5
 80080ea:	bd38      	pop	{r3, r4, r5, pc}

080080ec <ai_layers_forward_all>:
 80080ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	f8d0 803c 	ldr.w	r8, [r0, #60]	@ 0x3c
 80080f4:	4604      	mov	r4, r0
 80080f6:	f1b8 0f00 	cmp.w	r8, #0
 80080fa:	d02a      	beq.n	8008152 <ai_layers_forward_all+0x66>
 80080fc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80080fe:	6381      	str	r1, [r0, #56]	@ 0x38
 8008100:	b319      	cbz	r1, 800814a <ai_layers_forward_all+0x5e>
 8008102:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8008104:	2001      	movs	r0, #1
 8008106:	47c0      	blx	r8
 8008108:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800810a:	b1f6      	cbz	r6, 800814a <ai_layers_forward_all+0x5e>
 800810c:	2700      	movs	r7, #0
 800810e:	4631      	mov	r1, r6
 8008110:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008112:	2002      	movs	r0, #2
 8008114:	47c0      	blx	r8
 8008116:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8008118:	4628      	mov	r0, r5
 800811a:	696b      	ldr	r3, [r5, #20]
 800811c:	4798      	blx	r3
 800811e:	692e      	ldr	r6, [r5, #16]
 8008120:	2003      	movs	r0, #3
 8008122:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008124:	42b5      	cmp	r5, r6
 8008126:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008128:	d007      	beq.n	800813a <ai_layers_forward_all+0x4e>
 800812a:	47c0      	blx	r8
 800812c:	3701      	adds	r7, #1
 800812e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8008130:	2e00      	cmp	r6, #0
 8008132:	d1ec      	bne.n	800810e <ai_layers_forward_all+0x22>
 8008134:	4638      	mov	r0, r7
 8008136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813a:	2003      	movs	r0, #3
 800813c:	3701      	adds	r7, #1
 800813e:	47c0      	blx	r8
 8008140:	2300      	movs	r3, #0
 8008142:	4638      	mov	r0, r7
 8008144:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814a:	2700      	movs	r7, #0
 800814c:	4638      	mov	r0, r7
 800814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008152:	6b45      	ldr	r5, [r0, #52]	@ 0x34
 8008154:	6385      	str	r5, [r0, #56]	@ 0x38
 8008156:	2d00      	cmp	r5, #0
 8008158:	d0f7      	beq.n	800814a <ai_layers_forward_all+0x5e>
 800815a:	4647      	mov	r7, r8
 800815c:	696b      	ldr	r3, [r5, #20]
 800815e:	4628      	mov	r0, r5
 8008160:	4798      	blx	r3
 8008162:	462b      	mov	r3, r5
 8008164:	692d      	ldr	r5, [r5, #16]
 8008166:	429d      	cmp	r5, r3
 8008168:	d004      	beq.n	8008174 <ai_layers_forward_all+0x88>
 800816a:	3701      	adds	r7, #1
 800816c:	63a5      	str	r5, [r4, #56]	@ 0x38
 800816e:	2d00      	cmp	r5, #0
 8008170:	d1f4      	bne.n	800815c <ai_layers_forward_all+0x70>
 8008172:	e7df      	b.n	8008134 <ai_layers_forward_all+0x48>
 8008174:	2300      	movs	r3, #0
 8008176:	3701      	adds	r7, #1
 8008178:	63a3      	str	r3, [r4, #56]	@ 0x38
 800817a:	e7db      	b.n	8008134 <ai_layers_forward_all+0x48>

0800817c <ai_dict_decompress_f32>:
 800817c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008180:	9d08      	ldr	r5, [sp, #32]
 8008182:	2b04      	cmp	r3, #4
 8008184:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8008188:	d00e      	beq.n	80081a8 <ai_dict_decompress_f32+0x2c>
 800818a:	2b08      	cmp	r3, #8
 800818c:	d10a      	bne.n	80081a4 <ai_dict_decompress_f32+0x28>
 800818e:	42a8      	cmp	r0, r5
 8008190:	d208      	bcs.n	80081a4 <ai_dict_decompress_f32+0x28>
 8008192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008196:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f840 3b04 	str.w	r3, [r0], #4
 80081a0:	4285      	cmp	r5, r0
 80081a2:	d8f6      	bhi.n	8008192 <ai_dict_decompress_f32+0x16>
 80081a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081a8:	9b07      	ldr	r3, [sp, #28]
 80081aa:	085e      	lsrs	r6, r3, #1
 80081ac:	f003 0701 	and.w	r7, r3, #1
 80081b0:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80081b4:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
 80081b8:	42a8      	cmp	r0, r5
 80081ba:	d2f3      	bcs.n	80081a4 <ai_dict_decompress_f32+0x28>
 80081bc:	b33e      	cbz	r6, 800820e <ai_dict_decompress_f32+0x92>
 80081be:	f100 0e08 	add.w	lr, r0, #8
 80081c2:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 80081c6:	eb01 0408 	add.w	r4, r1, r8
 80081ca:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80081ce:	f10e 0e08 	add.w	lr, lr, #8
 80081d2:	091b      	lsrs	r3, r3, #4
 80081d4:	4564      	cmp	r4, ip
 80081d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f84e 3c10 	str.w	r3, [lr, #-16]
 80081e0:	f89c 3000 	ldrb.w	r3, [ip]
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80081f2:	d1ea      	bne.n	80081ca <ai_dict_decompress_f32+0x4e>
 80081f4:	4431      	add	r1, r6
 80081f6:	4448      	add	r0, r9
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	d0dd      	beq.n	80081b8 <ai_dict_decompress_f32+0x3c>
 80081fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008200:	091b      	lsrs	r3, r3, #4
 8008202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f840 3b04 	str.w	r3, [r0], #4
 800820c:	e7d4      	b.n	80081b8 <ai_dict_decompress_f32+0x3c>
 800820e:	2f00      	cmp	r7, #0
 8008210:	d1f4      	bne.n	80081fc <ai_dict_decompress_f32+0x80>
 8008212:	42a8      	cmp	r0, r5
 8008214:	d3fd      	bcc.n	8008212 <ai_dict_decompress_f32+0x96>
 8008216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800821a:	bf00      	nop

0800821c <forward_conv2d_if32of32wf32>:
 800821c:	6982      	ldr	r2, [r0, #24]
 800821e:	8813      	ldrh	r3, [r2, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 8092 	beq.w	800834a <forward_conv2d_if32of32wf32+0x12e>
 8008226:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800822a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800822e:	b102      	cbz	r2, 8008232 <forward_conv2d_if32of32wf32+0x16>
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	2b01      	cmp	r3, #1
 8008234:	f000 80b3 	beq.w	800839e <forward_conv2d_if32of32wf32+0x182>
 8008238:	f8dc 1010 	ldr.w	r1, [ip, #16]
 800823c:	b101      	cbz	r1, 8008240 <forward_conv2d_if32of32wf32+0x24>
 800823e:	6809      	ldr	r1, [r1, #0]
 8008240:	2b02      	cmp	r3, #2
 8008242:	f000 8084 	beq.w	800834e <forward_conv2d_if32of32wf32+0x132>
 8008246:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824a:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800824e:	b0a1      	sub	sp, #132	@ 0x84
 8008250:	2e00      	cmp	r6, #0
 8008252:	f000 809d 	beq.w	8008390 <forward_conv2d_if32of32wf32+0x174>
 8008256:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 800825a:	6834      	ldr	r4, [r6, #0]
 800825c:	2d01      	cmp	r5, #1
 800825e:	f240 8099 	bls.w	8008394 <forward_conv2d_if32of32wf32+0x178>
 8008262:	6876      	ldr	r6, [r6, #4]
 8008264:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8008268:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800826c:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008270:	6992      	ldr	r2, [r2, #24]
 8008272:	9713      	str	r7, [sp, #76]	@ 0x4c
 8008274:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8008278:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
 800827c:	9714      	str	r7, [sp, #80]	@ 0x50
 800827e:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8008282:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8008286:	9715      	str	r7, [sp, #84]	@ 0x54
 8008288:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800828c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8008290:	9716      	str	r7, [sp, #88]	@ 0x58
 8008292:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8008296:	69a2      	ldr	r2, [r4, #24]
 8008298:	9717      	str	r7, [sp, #92]	@ 0x5c
 800829a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800829e:	9718      	str	r7, [sp, #96]	@ 0x60
 80082a0:	8d07      	ldrh	r7, [r0, #40]	@ 0x28
 80082a2:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	@ 0x30
 80082a6:	9719      	str	r7, [sp, #100]	@ 0x64
 80082a8:	8d87      	ldrh	r7, [r0, #44]	@ 0x2c
 80082aa:	69c0      	ldr	r0, [r0, #28]
 80082ac:	971a      	str	r7, [sp, #104]	@ 0x68
 80082ae:	901f      	str	r0, [sp, #124]	@ 0x7c
 80082b0:	f8be 0000 	ldrh.w	r0, [lr]
 80082b4:	901b      	str	r0, [sp, #108]	@ 0x6c
 80082b6:	f8be 0004 	ldrh.w	r0, [lr, #4]
 80082ba:	901c      	str	r0, [sp, #112]	@ 0x70
 80082bc:	b2a8      	uxth	r0, r5
 80082be:	901d      	str	r0, [sp, #116]	@ 0x74
 80082c0:	b2a0      	uxth	r0, r4
 80082c2:	901e      	str	r0, [sp, #120]	@ 0x78
 80082c4:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80082c8:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 80082cc:	b10e      	cbz	r6, 80082d2 <forward_conv2d_if32of32wf32+0xb6>
 80082ce:	69b0      	ldr	r0, [r6, #24]
 80082d0:	6886      	ldr	r6, [r0, #8]
 80082d2:	b2a4      	uxth	r4, r4
 80082d4:	6989      	ldr	r1, [r1, #24]
 80082d6:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 80082da:	b2ad      	uxth	r5, r5
 80082dc:	3c01      	subs	r4, #1
 80082de:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80082e2:	3d01      	subs	r5, #1
 80082e4:	6811      	ldr	r1, [r2, #0]
 80082e6:	fb00 8404 	mla	r4, r0, r4, r8
 80082ea:	1e78      	subs	r0, r7, #1
 80082ec:	fb00 7505 	mla	r5, r0, r5, r7
 80082f0:	f3c1 4043 	ubfx	r0, r1, #17, #4
 80082f4:	2804      	cmp	r0, #4
 80082f6:	d02d      	beq.n	8008354 <forward_conv2d_if32of32wf32+0x138>
 80082f8:	2808      	cmp	r0, #8
 80082fa:	d02b      	beq.n	8008354 <forward_conv2d_if32of32wf32+0x138>
 80082fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80082fe:	464a      	mov	r2, r9
 8008300:	940c      	str	r4, [sp, #48]	@ 0x30
 8008302:	4651      	mov	r1, sl
 8008304:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8008306:	4658      	mov	r0, fp
 8008308:	9706      	str	r7, [sp, #24]
 800830a:	940f      	str	r4, [sp, #60]	@ 0x3c
 800830c:	e9cd 530d 	strd	r5, r3, [sp, #52]	@ 0x34
 8008310:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8008312:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008314:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008316:	930a      	str	r3, [sp, #40]	@ 0x28
 8008318:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800831a:	9309      	str	r3, [sp, #36]	@ 0x24
 800831c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800831e:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8008322:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008324:	9305      	str	r3, [sp, #20]
 8008326:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800833c:	9310      	str	r3, [sp, #64]	@ 0x40
 800833e:	4633      	mov	r3, r6
 8008340:	f000 ffb4 	bl	80092ac <forward_lite_conv2d_if32of32wf32>
 8008344:	b021      	add	sp, #132	@ 0x84
 8008346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	deff      	udf	#255	@ 0xff
 800834e:	2300      	movs	r3, #0
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	deff      	udf	#255	@ 0xff
 8008354:	68d2      	ldr	r2, [r2, #12]
 8008356:	2a00      	cmp	r2, #0
 8008358:	d0d0      	beq.n	80082fc <forward_conv2d_if32of32wf32+0xe0>
 800835a:	2b03      	cmp	r3, #3
 800835c:	d022      	beq.n	80083a4 <forward_conv2d_if32of32wf32+0x188>
 800835e:	f8dc 3028 	ldr.w	r3, [ip, #40]	@ 0x28
 8008362:	b1cb      	cbz	r3, 8008398 <forward_conv2d_if32of32wf32+0x17c>
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	b1bb      	cbz	r3, 8008398 <forward_conv2d_if32of32wf32+0x17c>
 8008368:	f8d3 c018 	ldr.w	ip, [r3, #24]
 800836c:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8008370:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8008374:	410b      	asrs	r3, r1
 8008376:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 800837a:	b29b      	uxth	r3, r3
 800837c:	9101      	str	r1, [sp, #4]
 800837e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008380:	9100      	str	r1, [sp, #0]
 8008382:	4649      	mov	r1, r9
 8008384:	2800      	cmp	r0, #0
 8008386:	bf18      	it	ne
 8008388:	4681      	movne	r9, r0
 800838a:	f7ff fef7 	bl	800817c <ai_dict_decompress_f32>
 800838e:	e7b5      	b.n	80082fc <forward_conv2d_if32of32wf32+0xe0>
 8008390:	4634      	mov	r4, r6
 8008392:	e767      	b.n	8008264 <forward_conv2d_if32of32wf32+0x48>
 8008394:	2600      	movs	r6, #0
 8008396:	e765      	b.n	8008264 <forward_conv2d_if32of32wf32+0x48>
 8008398:	2300      	movs	r3, #0
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	deff      	udf	#255	@ 0xff
 800839e:	2300      	movs	r3, #0
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	deff      	udf	#255	@ 0xff
 80083a4:	2300      	movs	r3, #0
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	deff      	udf	#255	@ 0xff
 80083aa:	bf00      	nop

080083ac <forward_dense>:
 80083ac:	6983      	ldr	r3, [r0, #24]
 80083ae:	881a      	ldrh	r2, [r3, #0]
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	f000 80f0 	beq.w	8008596 <forward_dense+0x1ea>
 80083b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	ed2d 8b02 	vpush	{d8}
 80083be:	6858      	ldr	r0, [r3, #4]
 80083c0:	b09b      	sub	sp, #108	@ 0x6c
 80083c2:	6845      	ldr	r5, [r0, #4]
 80083c4:	b105      	cbz	r5, 80083c8 <forward_dense+0x1c>
 80083c6:	682d      	ldr	r5, [r5, #0]
 80083c8:	2a01      	cmp	r2, #1
 80083ca:	f000 840a 	beq.w	8008be2 <forward_dense+0x836>
 80083ce:	6906      	ldr	r6, [r0, #16]
 80083d0:	b106      	cbz	r6, 80083d4 <forward_dense+0x28>
 80083d2:	6836      	ldr	r6, [r6, #0]
 80083d4:	2a02      	cmp	r2, #2
 80083d6:	f000 80e0 	beq.w	800859a <forward_dense+0x1ee>
 80083da:	69c3      	ldr	r3, [r0, #28]
 80083dc:	930d      	str	r3, [sp, #52]	@ 0x34
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 83f1 	beq.w	8008bc6 <forward_dense+0x81a>
 80083e4:	4619      	mov	r1, r3
 80083e6:	8b03      	ldrh	r3, [r0, #24]
 80083e8:	6809      	ldr	r1, [r1, #0]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	910f      	str	r1, [sp, #60]	@ 0x3c
 80083ee:	f240 83ec 	bls.w	8008bca <forward_dense+0x81e>
 80083f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80083f8:	460b      	mov	r3, r1
 80083fa:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80083fe:	2a03      	cmp	r2, #3
 8008400:	68eb      	ldr	r3, [r5, #12]
 8008402:	68f7      	ldr	r7, [r6, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	687c      	ldr	r4, [r7, #4]
 8008408:	9317      	str	r3, [sp, #92]	@ 0x5c
 800840a:	f8d8 3000 	ldr.w	r3, [r8]
 800840e:	4621      	mov	r1, r4
 8008410:	9419      	str	r4, [sp, #100]	@ 0x64
 8008412:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8008416:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800841a:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800841e:	fb01 f404 	mul.w	r4, r1, r4
 8008422:	fa4e f10c 	asr.w	r1, lr, ip
 8008426:	9116      	str	r1, [sp, #88]	@ 0x58
 8008428:	f000 83d8 	beq.w	8008bdc <forward_dense+0x830>
 800842c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800842e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008432:	2a00      	cmp	r2, #0
 8008434:	f000 83c2 	beq.w	8008bbc <forward_dense+0x810>
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	2a00      	cmp	r2, #0
 800843c:	f000 83be 	beq.w	8008bbc <forward_dense+0x810>
 8008440:	2b04      	cmp	r3, #4
 8008442:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8008446:	f000 83a8 	beq.w	8008b9a <forward_dense+0x7ee>
 800844a:	2b08      	cmp	r3, #8
 800844c:	f000 83a5 	beq.w	8008b9a <forward_dense+0x7ee>
 8008450:	f04f 0a00 	mov.w	sl, #0
 8008454:	69ab      	ldr	r3, [r5, #24]
 8008456:	fb07 f404 	mul.w	r4, r7, r4
 800845a:	69b2      	ldr	r2, [r6, #24]
 800845c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8008460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008462:	6892      	ldr	r2, [r2, #8]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800846a:	9206      	str	r2, [sp, #24]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	428a      	cmp	r2, r1
 8008470:	9110      	str	r1, [sp, #64]	@ 0x40
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008476:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800847a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800847e:	900e      	str	r0, [sp, #56]	@ 0x38
 8008480:	9303      	str	r3, [sp, #12]
 8008482:	f080 8380 	bcs.w	8008b86 <forward_dense+0x7da>
 8008486:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008488:	4654      	mov	r4, sl
 800848a:	4bb9      	ldr	r3, [pc, #740]	@ (8008770 <forward_dense+0x3c4>)
 800848c:	46ca      	mov	sl, r9
 800848e:	08d0      	lsrs	r0, r2, #3
 8008490:	ed9f 8ab8 	vldr	s16, [pc, #736]	@ 8008774 <forward_dense+0x3c8>
 8008494:	4413      	add	r3, r2
 8008496:	9009      	str	r0, [sp, #36]	@ 0x24
 8008498:	0099      	lsls	r1, r3, #2
 800849a:	f022 0301 	bic.w	r3, r2, #1
 800849e:	f002 0201 	and.w	r2, r2, #1
 80084a2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80084a6:	9118      	str	r1, [sp, #96]	@ 0x60
 80084a8:	920a      	str	r2, [sp, #40]	@ 0x28
 80084aa:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	f101 0320 	add.w	r3, r1, #32
 80084b4:	9207      	str	r2, [sp, #28]
 80084b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80084b8:	444b      	add	r3, r9
 80084ba:	469b      	mov	fp, r3
 80084bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	689a      	ldr	r2, [r3, #8]
 80084c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084c6:	b10b      	cbz	r3, 80084cc <forward_dense+0x120>
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	2c00      	cmp	r4, #0
 80084ce:	f000 834b 	beq.w	8008b68 <forward_dense+0x7bc>
 80084d2:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80084d4:	2904      	cmp	r1, #4
 80084d6:	f000 826a 	beq.w	80089ae <forward_dense+0x602>
 80084da:	9903      	ldr	r1, [sp, #12]
 80084dc:	9806      	ldr	r0, [sp, #24]
 80084de:	4281      	cmp	r1, r0
 80084e0:	f240 8356 	bls.w	8008b90 <forward_dense+0x7e4>
 80084e4:	4686      	mov	lr, r0
 80084e6:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80084e8:	eb00 090a 	add.w	r9, r0, sl
 80084ec:	0941      	lsrs	r1, r0, #5
 80084ee:	f10a 0004 	add.w	r0, sl, #4
 80084f2:	f8cd 9020 	str.w	r9, [sp, #32]
 80084f6:	9012      	str	r0, [sp, #72]	@ 0x48
 80084f8:	1c48      	adds	r0, r1, #1
 80084fa:	00c9      	lsls	r1, r1, #3
 80084fc:	3110      	adds	r1, #16
 80084fe:	9115      	str	r1, [sp, #84]	@ 0x54
 8008500:	00c1      	lsls	r1, r0, #3
 8008502:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008504:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8008508:	9114      	str	r1, [sp, #80]	@ 0x50
 800850a:	f1a9 0104 	sub.w	r1, r9, #4
 800850e:	f8dd 905c 	ldr.w	r9, [sp, #92]	@ 0x5c
 8008512:	910c      	str	r1, [sp, #48]	@ 0x30
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 8128 	beq.w	800876a <forward_dense+0x3be>
 800851a:	ecb3 5a01 	vldmia	r3!, {s10}
 800851e:	f1b9 0f07 	cmp.w	r9, #7
 8008522:	d83d      	bhi.n	80085a0 <forward_dense+0x1f4>
 8008524:	45da      	cmp	sl, fp
 8008526:	d211      	bcs.n	800854c <forward_dense+0x1a0>
 8008528:	eddf 7a92 	vldr	s15, [pc, #584]	@ 8008774 <forward_dense+0x3c8>
 800852c:	4650      	mov	r0, sl
 800852e:	4615      	mov	r5, r2
 8008530:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008534:	ecb0 7a01 	vldmia	r0!, {s14}
 8008538:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800853c:	4558      	cmp	r0, fp
 800853e:	edd1 6a00 	vldr	s13, [r1]
 8008542:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008546:	d3f3      	bcc.n	8008530 <forward_dense+0x184>
 8008548:	ee35 5a27 	vadd.f32	s10, s10, s15
 800854c:	9904      	ldr	r1, [sp, #16]
 800854e:	ecae 5a01 	vstmia	lr!, {s10}
 8008552:	440a      	add	r2, r1
 8008554:	9903      	ldr	r1, [sp, #12]
 8008556:	458e      	cmp	lr, r1
 8008558:	d3dc      	bcc.n	8008514 <forward_dense+0x168>
 800855a:	9a06      	ldr	r2, [sp, #24]
 800855c:	1a8b      	subs	r3, r1, r2
 800855e:	3b01      	subs	r3, #1
 8008560:	f023 0303 	bic.w	r3, r3, #3
 8008564:	3304      	adds	r3, #4
 8008566:	18d3      	adds	r3, r2, r3
 8008568:	4619      	mov	r1, r3
 800856a:	9306      	str	r3, [sp, #24]
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008570:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008572:	4413      	add	r3, r2
 8008574:	9a07      	ldr	r2, [sp, #28]
 8008576:	4281      	cmp	r1, r0
 8008578:	9303      	str	r3, [sp, #12]
 800857a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800857c:	441a      	add	r2, r3
 800857e:	449b      	add	fp, r3
 8008580:	9207      	str	r2, [sp, #28]
 8008582:	9a05      	ldr	r2, [sp, #20]
 8008584:	441a      	add	r2, r3
 8008586:	9205      	str	r2, [sp, #20]
 8008588:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800858a:	4692      	mov	sl, r2
 800858c:	f080 82fb 	bcs.w	8008b86 <forward_dense+0x7da>
 8008590:	441a      	add	r2, r3
 8008592:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008594:	e793      	b.n	80084be <forward_dense+0x112>
 8008596:	6853      	ldr	r3, [r2, #4]
 8008598:	deff      	udf	#255	@ 0xff
 800859a:	2300      	movs	r3, #0
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	deff      	udf	#255	@ 0xff
 80085a0:	f002 0103 	and.w	r1, r2, #3
 80085a4:	2902      	cmp	r1, #2
 80085a6:	f000 81e6 	beq.w	8008976 <forward_dense+0x5ca>
 80085aa:	2903      	cmp	r1, #3
 80085ac:	f000 80e4 	beq.w	8008778 <forward_dense+0x3cc>
 80085b0:	2901      	cmp	r1, #1
 80085b2:	f000 81ef 	beq.w	8008994 <forward_dense+0x5e8>
 80085b6:	9908      	ldr	r1, [sp, #32]
 80085b8:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8008774 <forward_dense+0x3c8>
 80085bc:	458a      	cmp	sl, r1
 80085be:	f200 82e9 	bhi.w	8008b94 <forward_dense+0x7e8>
 80085c2:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80085c4:	f102 0108 	add.w	r1, r2, #8
 80085c8:	f10a 0020 	add.w	r0, sl, #32
 80085cc:	18ae      	adds	r6, r5, r2
 80085ce:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80085d2:	3108      	adds	r1, #8
 80085d4:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 80085d8:	3020      	adds	r0, #32
 80085da:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80085de:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 80085e2:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 80085e6:	edd5 7a00 	vldr	s15, [r5]
 80085ea:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 80085ee:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80085f2:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 80085f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80085fa:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 80085fe:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 8008602:	edd5 2a00 	vldr	s5, [r5]
 8008606:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800860a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800860e:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 8008612:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008616:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 800861a:	ed95 3a00 	vldr	s6, [r5]
 800861e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8008622:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008626:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800862a:	edd5 3a00 	vldr	s7, [r5]
 800862e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8008632:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008636:	eee3 7a84 	vfma.f32	s15, s7, s8
 800863a:	ed95 4a00 	vldr	s8, [r5]
 800863e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8008642:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008646:	eee4 7a24 	vfma.f32	s15, s8, s9
 800864a:	edd5 4a00 	vldr	s9, [r5]
 800864e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8008652:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008656:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800865a:	edd5 5a00 	vldr	s11, [r5]
 800865e:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8008662:	428e      	cmp	r6, r1
 8008664:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008668:	eee5 7a86 	vfma.f32	s15, s11, s12
 800866c:	ed95 6a00 	vldr	s12, [r5]
 8008670:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008678:	d1a9      	bne.n	80085ce <forward_dense+0x222>
 800867a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800867c:	1850      	adds	r0, r2, r1
 800867e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8008680:	4559      	cmp	r1, fp
 8008682:	d26f      	bcs.n	8008764 <forward_dense+0x3b8>
 8008684:	7805      	ldrb	r5, [r0, #0]
 8008686:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800868a:	edd5 7a00 	vldr	s15, [r5]
 800868e:	460d      	mov	r5, r1
 8008690:	ecf5 6a01 	vldmia	r5!, {s13}
 8008694:	45ab      	cmp	fp, r5
 8008696:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800869a:	d963      	bls.n	8008764 <forward_dense+0x3b8>
 800869c:	7845      	ldrb	r5, [r0, #1]
 800869e:	edd1 6a01 	vldr	s13, [r1, #4]
 80086a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086a6:	edd5 7a00 	vldr	s15, [r5]
 80086aa:	f101 0508 	add.w	r5, r1, #8
 80086ae:	45ab      	cmp	fp, r5
 80086b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086b4:	d956      	bls.n	8008764 <forward_dense+0x3b8>
 80086b6:	7885      	ldrb	r5, [r0, #2]
 80086b8:	edd1 6a02 	vldr	s13, [r1, #8]
 80086bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086c0:	edd5 7a00 	vldr	s15, [r5]
 80086c4:	f101 050c 	add.w	r5, r1, #12
 80086c8:	45ab      	cmp	fp, r5
 80086ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086ce:	d949      	bls.n	8008764 <forward_dense+0x3b8>
 80086d0:	78c5      	ldrb	r5, [r0, #3]
 80086d2:	edd1 6a03 	vldr	s13, [r1, #12]
 80086d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086da:	edd5 7a00 	vldr	s15, [r5]
 80086de:	f101 0510 	add.w	r5, r1, #16
 80086e2:	45ab      	cmp	fp, r5
 80086e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086e8:	d93c      	bls.n	8008764 <forward_dense+0x3b8>
 80086ea:	7905      	ldrb	r5, [r0, #4]
 80086ec:	edd1 6a04 	vldr	s13, [r1, #16]
 80086f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80086f4:	edd5 7a00 	vldr	s15, [r5]
 80086f8:	f101 0514 	add.w	r5, r1, #20
 80086fc:	45ab      	cmp	fp, r5
 80086fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008702:	d92f      	bls.n	8008764 <forward_dense+0x3b8>
 8008704:	7945      	ldrb	r5, [r0, #5]
 8008706:	edd1 6a05 	vldr	s13, [r1, #20]
 800870a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800870e:	edd5 7a00 	vldr	s15, [r5]
 8008712:	f101 0518 	add.w	r5, r1, #24
 8008716:	45ab      	cmp	fp, r5
 8008718:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800871c:	d922      	bls.n	8008764 <forward_dense+0x3b8>
 800871e:	7985      	ldrb	r5, [r0, #6]
 8008720:	edd1 6a06 	vldr	s13, [r1, #24]
 8008724:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008728:	edd5 7a00 	vldr	s15, [r5]
 800872c:	f101 051c 	add.w	r5, r1, #28
 8008730:	45ab      	cmp	fp, r5
 8008732:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008736:	d915      	bls.n	8008764 <forward_dense+0x3b8>
 8008738:	79c5      	ldrb	r5, [r0, #7]
 800873a:	edd1 6a07 	vldr	s13, [r1, #28]
 800873e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008742:	edd5 7a00 	vldr	s15, [r5]
 8008746:	f101 0520 	add.w	r5, r1, #32
 800874a:	45ab      	cmp	fp, r5
 800874c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008750:	d908      	bls.n	8008764 <forward_dense+0x3b8>
 8008752:	edd1 7a08 	vldr	s15, [r1, #32]
 8008756:	7a01      	ldrb	r1, [r0, #8]
 8008758:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800875c:	edd1 6a00 	vldr	s13, [r1]
 8008760:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008764:	ee35 5a07 	vadd.f32	s10, s10, s14
 8008768:	e6f0      	b.n	800854c <forward_dense+0x1a0>
 800876a:	ed9f 5a02 	vldr	s10, [pc, #8]	@ 8008774 <forward_dense+0x3c8>
 800876e:	e6d6      	b.n	800851e <forward_dense+0x172>
 8008770:	3ffffff8 	.word	0x3ffffff8
 8008774:	00000000 	.word	0x00000000
 8008778:	eeb0 7a48 	vmov.f32	s14, s16
 800877c:	4650      	mov	r0, sl
 800877e:	4611      	mov	r1, r2
 8008780:	468c      	mov	ip, r1
 8008782:	4606      	mov	r6, r0
 8008784:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8008788:	ecf6 7a01 	vldmia	r6!, {s15}
 800878c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008790:	edd5 6a00 	vldr	s13, [r5]
 8008794:	9d08      	ldr	r5, [sp, #32]
 8008796:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800879a:	42ae      	cmp	r6, r5
 800879c:	d866      	bhi.n	800886c <forward_dense+0x4c0>
 800879e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80087a0:	f101 0711 	add.w	r7, r1, #17
 80087a4:	3109      	adds	r1, #9
 80087a6:	eba5 0800 	sub.w	r8, r5, r0
 80087aa:	3024      	adds	r0, #36	@ 0x24
 80087ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80087b0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80087b4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80087b8:	3108      	adds	r1, #8
 80087ba:	ed50 2a07 	vldr	s5, [r0, #-28]	@ 0xffffffe4
 80087be:	3020      	adds	r0, #32
 80087c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087c4:	ed10 3a10 	vldr	s6, [r0, #-64]	@ 0xffffffc0
 80087c8:	ed50 3a0e 	vldr	s7, [r0, #-56]	@ 0xffffffc8
 80087cc:	edd5 7a00 	vldr	s15, [r5]
 80087d0:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 80087d4:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80087d8:	ed10 4a0d 	vldr	s8, [r0, #-52]	@ 0xffffffcc
 80087dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087e0:	ed50 4a0c 	vldr	s9, [r0, #-48]	@ 0xffffffd0
 80087e4:	ed50 5a0b 	vldr	s11, [r0, #-44]	@ 0xffffffd4
 80087e8:	edd5 2a00 	vldr	s5, [r5]
 80087ec:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80087f0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80087f4:	ed10 6a0a 	vldr	s12, [r0, #-40]	@ 0xffffffd8
 80087f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087fc:	ed50 6a09 	vldr	s13, [r0, #-36]	@ 0xffffffdc
 8008800:	ed95 3a00 	vldr	s6, [r5]
 8008804:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8008808:	eee3 7a23 	vfma.f32	s15, s6, s7
 800880c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008810:	edd5 3a00 	vldr	s7, [r5]
 8008814:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8008818:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800881c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008820:	ed95 4a00 	vldr	s8, [r5]
 8008824:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8008828:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800882c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008830:	edd5 4a00 	vldr	s9, [r5]
 8008834:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8008838:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800883c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8008840:	edd5 5a00 	vldr	s11, [r5]
 8008844:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8008848:	428f      	cmp	r7, r1
 800884a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800884e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008852:	ed95 6a00 	vldr	s12, [r5]
 8008856:	eee6 7a26 	vfma.f32	s15, s12, s13
 800885a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800885e:	d1a9      	bne.n	80087b4 <forward_dense+0x408>
 8008860:	f108 0801 	add.w	r8, r8, #1
 8008864:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8008868:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800886c:	455e      	cmp	r6, fp
 800886e:	f4bf af79 	bcs.w	8008764 <forward_dense+0x3b8>
 8008872:	f89c 1000 	ldrb.w	r1, [ip]
 8008876:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800887a:	edd1 7a00 	vldr	s15, [r1]
 800887e:	4631      	mov	r1, r6
 8008880:	ecf1 6a01 	vldmia	r1!, {s13}
 8008884:	458b      	cmp	fp, r1
 8008886:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800888a:	f67f af6b 	bls.w	8008764 <forward_dense+0x3b8>
 800888e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8008892:	edd6 6a01 	vldr	s13, [r6, #4]
 8008896:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800889a:	edd1 7a00 	vldr	s15, [r1]
 800889e:	f106 0108 	add.w	r1, r6, #8
 80088a2:	458b      	cmp	fp, r1
 80088a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088a8:	f67f af5c 	bls.w	8008764 <forward_dense+0x3b8>
 80088ac:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80088b0:	edd6 6a02 	vldr	s13, [r6, #8]
 80088b4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80088b8:	edd1 7a00 	vldr	s15, [r1]
 80088bc:	f106 010c 	add.w	r1, r6, #12
 80088c0:	458b      	cmp	fp, r1
 80088c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088c6:	f67f af4d 	bls.w	8008764 <forward_dense+0x3b8>
 80088ca:	f89c 1003 	ldrb.w	r1, [ip, #3]
 80088ce:	edd6 6a03 	vldr	s13, [r6, #12]
 80088d2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80088d6:	edd1 7a00 	vldr	s15, [r1]
 80088da:	f106 0110 	add.w	r1, r6, #16
 80088de:	458b      	cmp	fp, r1
 80088e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088e4:	f67f af3e 	bls.w	8008764 <forward_dense+0x3b8>
 80088e8:	f89c 1004 	ldrb.w	r1, [ip, #4]
 80088ec:	edd6 6a04 	vldr	s13, [r6, #16]
 80088f0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80088f4:	edd1 7a00 	vldr	s15, [r1]
 80088f8:	f106 0114 	add.w	r1, r6, #20
 80088fc:	458b      	cmp	fp, r1
 80088fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008902:	f67f af2f 	bls.w	8008764 <forward_dense+0x3b8>
 8008906:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800890a:	edd6 6a05 	vldr	s13, [r6, #20]
 800890e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008912:	edd1 7a00 	vldr	s15, [r1]
 8008916:	f106 0118 	add.w	r1, r6, #24
 800891a:	458b      	cmp	fp, r1
 800891c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008920:	f67f af20 	bls.w	8008764 <forward_dense+0x3b8>
 8008924:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8008928:	edd6 6a06 	vldr	s13, [r6, #24]
 800892c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008930:	edd1 7a00 	vldr	s15, [r1]
 8008934:	f106 011c 	add.w	r1, r6, #28
 8008938:	458b      	cmp	fp, r1
 800893a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800893e:	f67f af11 	bls.w	8008764 <forward_dense+0x3b8>
 8008942:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8008946:	edd6 6a07 	vldr	s13, [r6, #28]
 800894a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800894e:	edd1 7a00 	vldr	s15, [r1]
 8008952:	f106 0120 	add.w	r1, r6, #32
 8008956:	458b      	cmp	fp, r1
 8008958:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800895c:	f67f af02 	bls.w	8008764 <forward_dense+0x3b8>
 8008960:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8008964:	edd6 7a08 	vldr	s15, [r6, #32]
 8008968:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800896c:	edd1 6a00 	vldr	s13, [r1]
 8008970:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008974:	e6f6      	b.n	8008764 <forward_dense+0x3b8>
 8008976:	eeb0 7a48 	vmov.f32	s14, s16
 800897a:	4650      	mov	r0, sl
 800897c:	4611      	mov	r1, r2
 800897e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008982:	ecf0 7a01 	vldmia	r0!, {s15}
 8008986:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800898a:	edd5 6a00 	vldr	s13, [r5]
 800898e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008992:	e6f5      	b.n	8008780 <forward_dense+0x3d4>
 8008994:	4611      	mov	r1, r2
 8008996:	edda 7a00 	vldr	s15, [sl]
 800899a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800899c:	f811 5b01 	ldrb.w	r5, [r1], #1
 80089a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80089a4:	ed95 7a00 	vldr	s14, [r5]
 80089a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089ac:	e7e7      	b.n	800897e <forward_dense+0x5d2>
 80089ae:	9803      	ldr	r0, [sp, #12]
 80089b0:	9906      	ldr	r1, [sp, #24]
 80089b2:	4288      	cmp	r0, r1
 80089b4:	f67f adda 	bls.w	800856c <forward_dense+0x1c0>
 80089b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089ba:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80089be:	468b      	mov	fp, r1
 80089c0:	f100 0c01 	add.w	ip, r0, #1
 80089c4:	9805      	ldr	r0, [sp, #20]
 80089c6:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80089ca:	3801      	subs	r0, #1
 80089cc:	9008      	str	r0, [sp, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80bf 	beq.w	8008b52 <forward_dense+0x7a6>
 80089d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089d6:	ecf3 2a01 	vldmia	r3!, {s5}
 80089da:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 8008774 <forward_dense+0x3c8>
 80089de:	2900      	cmp	r1, #0
 80089e0:	f000 80bf 	beq.w	8008b62 <forward_dense+0x7b6>
 80089e4:	1d10      	adds	r0, r2, #4
 80089e6:	f10a 0120 	add.w	r1, sl, #32
 80089ea:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 80089ee:	3004      	adds	r0, #4
 80089f0:	ed11 2a07 	vldr	s4, [r1, #-28]	@ 0xffffffe4
 80089f4:	3120      	adds	r1, #32
 80089f6:	f007 0e0f 	and.w	lr, r7, #15
 80089fa:	093f      	lsrs	r7, r7, #4
 80089fc:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8008a00:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8008a04:	ed11 4a10 	vldr	s8, [r1, #-64]	@ 0xffffffc0
 8008a08:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008a0c:	ed51 3a0e 	vldr	s7, [r1, #-56]	@ 0xffffffc8
 8008a10:	edde 7a00 	vldr	s15, [lr]
 8008a14:	ed97 3a00 	vldr	s6, [r7]
 8008a18:	0937      	lsrs	r7, r6, #4
 8008a1a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8008a1e:	f006 060f 	and.w	r6, r6, #15
 8008a22:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008a26:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8008a2a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008a2e:	ed11 5a0d 	vldr	s10, [r1, #-52]	@ 0xffffffcc
 8008a32:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008a36:	ed97 3a00 	vldr	s6, [r7]
 8008a3a:	ed96 4a00 	vldr	s8, [r6]
 8008a3e:	092e      	lsrs	r6, r5, #4
 8008a40:	ed51 4a0c 	vldr	s9, [r1, #-48]	@ 0xffffffd0
 8008a44:	f005 050f 	and.w	r5, r5, #15
 8008a48:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008a4c:	ed11 6a0b 	vldr	s12, [r1, #-44]	@ 0xffffffd4
 8008a50:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a54:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 8008a58:	ed51 6a09 	vldr	s13, [r1, #-36]	@ 0xffffffdc
 8008a5c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008a60:	eee4 7a05 	vfma.f32	s15, s8, s10
 8008a64:	ed96 4a00 	vldr	s8, [r6]
 8008a68:	ed95 5a00 	vldr	s10, [r5]
 8008a6c:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8008a70:	4560      	cmp	r0, ip
 8008a72:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8008a76:	f005 050f 	and.w	r5, r5, #15
 8008a7a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008a7e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008a82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008a86:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008a8a:	ed96 5a00 	vldr	s10, [r6]
 8008a8e:	ed95 6a00 	vldr	s12, [r5]
 8008a92:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a96:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a9e:	d1a4      	bne.n	80089ea <forward_dense+0x63e>
 8008aa0:	f1ac 0804 	sub.w	r8, ip, #4
 8008aa4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008aa8:	9905      	ldr	r1, [sp, #20]
 8008aaa:	458e      	cmp	lr, r1
 8008aac:	d229      	bcs.n	8008b02 <forward_dense+0x756>
 8008aae:	9908      	ldr	r1, [sp, #32]
 8008ab0:	f10e 0008 	add.w	r0, lr, #8
 8008ab4:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8008ab8:	eba1 070e 	sub.w	r7, r1, lr
 8008abc:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8008ac0:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8008ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ac8:	3008      	adds	r0, #8
 8008aca:	ed50 5a03 	vldr	s11, [r0, #-12]
 8008ace:	f001 050f 	and.w	r5, r1, #15
 8008ad2:	0909      	lsrs	r1, r1, #4
 8008ad4:	ed50 6a04 	vldr	s13, [r0, #-16]
 8008ad8:	42b7      	cmp	r7, r6
 8008ada:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008ade:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008ae2:	edd5 7a00 	vldr	s15, [r5]
 8008ae6:	ed91 6a00 	vldr	s12, [r1]
 8008aea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008aee:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008af2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008af6:	d1e5      	bne.n	8008ac4 <forward_dense+0x718>
 8008af8:	f109 0901 	add.w	r9, r9, #1
 8008afc:	44c8      	add	r8, r9
 8008afe:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8008b02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b04:	b1c1      	cbz	r1, 8008b38 <forward_dense+0x78c>
 8008b06:	f898 1000 	ldrb.w	r1, [r8]
 8008b0a:	edde 7a00 	vldr	s15, [lr]
 8008b0e:	0909      	lsrs	r1, r1, #4
 8008b10:	9804      	ldr	r0, [sp, #16]
 8008b12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008b16:	4402      	add	r2, r0
 8008b18:	4484      	add	ip, r0
 8008b1a:	edd1 6a00 	vldr	s13, [r1]
 8008b1e:	9903      	ldr	r1, [sp, #12]
 8008b20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b24:	ee72 2a87 	vadd.f32	s5, s5, s14
 8008b28:	eceb 2a01 	vstmia	fp!, {s5}
 8008b2c:	4559      	cmp	r1, fp
 8008b2e:	f63f af4e 	bhi.w	80089ce <forward_dense+0x622>
 8008b32:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8008b36:	e510      	b.n	800855a <forward_dense+0x1ae>
 8008b38:	9904      	ldr	r1, [sp, #16]
 8008b3a:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008b3e:	440a      	add	r2, r1
 8008b40:	448c      	add	ip, r1
 8008b42:	9903      	ldr	r1, [sp, #12]
 8008b44:	ecab 7a01 	vstmia	fp!, {s14}
 8008b48:	458b      	cmp	fp, r1
 8008b4a:	d2f2      	bcs.n	8008b32 <forward_dense+0x786>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f47f af41 	bne.w	80089d4 <forward_dense+0x628>
 8008b52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b54:	eef0 2a48 	vmov.f32	s5, s16
 8008b58:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8008be8 <forward_dense+0x83c>
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	f47f af41 	bne.w	80089e4 <forward_dense+0x638>
 8008b62:	46d6      	mov	lr, sl
 8008b64:	4690      	mov	r8, r2
 8008b66:	e79f      	b.n	8008aa8 <forward_dense+0x6fc>
 8008b68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	9d06      	ldr	r5, [sp, #24]
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008b72:	9000      	str	r0, [sp, #0]
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 fcf9 	bl	800956c <forward_lite_dense_if32of32wf32>
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b7e:	4413      	add	r3, r2
 8008b80:	4619      	mov	r1, r3
 8008b82:	9306      	str	r3, [sp, #24]
 8008b84:	e4f2      	b.n	800856c <forward_dense+0x1c0>
 8008b86:	b01b      	add	sp, #108	@ 0x6c
 8008b88:	ecbd 8b02 	vpop	{d8}
 8008b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b90:	4601      	mov	r1, r0
 8008b92:	e4eb      	b.n	800856c <forward_dense+0x1c0>
 8008b94:	4651      	mov	r1, sl
 8008b96:	4610      	mov	r0, r2
 8008b98:	e572      	b.n	8008680 <forward_dense+0x2d4>
 8008b9a:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8008b9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ba2:	d016      	beq.n	8008bd2 <forward_dense+0x826>
 8008ba4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ba8:	f000 fefc 	bl	80099a4 <ai_array_get_byte_size>
 8008bac:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	4651      	mov	r1, sl
 8008bb6:	f000 fe01 	bl	80097bc <st_int8_copy>
 8008bba:	e44b      	b.n	8008454 <forward_dense+0xa8>
 8008bbc:	2b04      	cmp	r3, #4
 8008bbe:	d00a      	beq.n	8008bd6 <forward_dense+0x82a>
 8008bc0:	f04f 0900 	mov.w	r9, #0
 8008bc4:	e441      	b.n	800844a <forward_dense+0x9e>
 8008bc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bc8:	e417      	b.n	80083fa <forward_dense+0x4e>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bce:	460b      	mov	r3, r1
 8008bd0:	e413      	b.n	80083fa <forward_dense+0x4e>
 8008bd2:	46c2      	mov	sl, r8
 8008bd4:	e43e      	b.n	8008454 <forward_dense+0xa8>
 8008bd6:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8008bda:	e43b      	b.n	8008454 <forward_dense+0xa8>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	deff      	udf	#255	@ 0xff
 8008be2:	2300      	movs	r3, #0
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	deff      	udf	#255	@ 0xff
 8008be8:	00000000 	.word	0x00000000

08008bec <forward_sigmoid>:
 8008bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bee:	ed2d 8b02 	vpush	{d8}
 8008bf2:	6982      	ldr	r2, [r0, #24]
 8008bf4:	8813      	ldrh	r3, [r2, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d03b      	beq.n	8008c72 <forward_sigmoid+0x86>
 8008bfa:	6852      	ldr	r2, [r2, #4]
 8008bfc:	6854      	ldr	r4, [r2, #4]
 8008bfe:	b104      	cbz	r4, 8008c02 <forward_sigmoid+0x16>
 8008c00:	6824      	ldr	r4, [r4, #0]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d034      	beq.n	8008c70 <forward_sigmoid+0x84>
 8008c06:	6915      	ldr	r5, [r2, #16]
 8008c08:	b105      	cbz	r5, 8008c0c <forward_sigmoid+0x20>
 8008c0a:	682d      	ldr	r5, [r5, #0]
 8008c0c:	68a3      	ldr	r3, [r4, #8]
 8008c0e:	0a1b      	lsrs	r3, r3, #8
 8008c10:	d031      	beq.n	8008c76 <forward_sigmoid+0x8a>
 8008c12:	68e0      	ldr	r0, [r4, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008c1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c1e:	4298      	cmp	r0, r3
 8008c20:	fb01 f202 	mul.w	r2, r1, r2
 8008c24:	d1f9      	bne.n	8008c1a <forward_sigmoid+0x2e>
 8008c26:	69a7      	ldr	r7, [r4, #24]
 8008c28:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008c2c:	69a9      	ldr	r1, [r5, #24]
 8008c2e:	4413      	add	r3, r2
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	688e      	ldr	r6, [r1, #8]
 8008c34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008c38:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8008c3c:	42aa      	cmp	r2, r5
 8008c3e:	d814      	bhi.n	8008c6a <forward_sigmoid+0x7e>
 8008c40:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8008c44:	3504      	adds	r5, #4
 8008c46:	3604      	adds	r6, #4
 8008c48:	462c      	mov	r4, r5
 8008c4a:	ed35 0a01 	vldmdb	r5!, {s0}
 8008c4e:	eeb1 0a40 	vneg.f32	s0, s0
 8008c52:	3c08      	subs	r4, #8
 8008c54:	f003 fbea 	bl	800c42c <expf>
 8008c58:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008c5c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8008c60:	ed66 7a01 	vstmdb	r6!, {s15}
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	42a3      	cmp	r3, r4
 8008c68:	d9ee      	bls.n	8008c48 <forward_sigmoid+0x5c>
 8008c6a:	ecbd 8b02 	vpop	{d8}
 8008c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c70:	2300      	movs	r3, #0
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	deff      	udf	#255	@ 0xff
 8008c76:	69ab      	ldr	r3, [r5, #24]
 8008c78:	69a7      	ldr	r7, [r4, #24]
 8008c7a:	689e      	ldr	r6, [r3, #8]
 8008c7c:	68bd      	ldr	r5, [r7, #8]
 8008c7e:	e7df      	b.n	8008c40 <forward_sigmoid+0x54>

08008c80 <forward_relu>:
 8008c80:	6982      	ldr	r2, [r0, #24]
 8008c82:	8813      	ldrh	r3, [r2, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d05b      	beq.n	8008d40 <forward_relu+0xc0>
 8008c88:	6851      	ldr	r1, [r2, #4]
 8008c8a:	684a      	ldr	r2, [r1, #4]
 8008c8c:	b102      	cbz	r2, 8008c90 <forward_relu+0x10>
 8008c8e:	6812      	ldr	r2, [r2, #0]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	f000 8123 	beq.w	8008edc <forward_relu+0x25c>
 8008c96:	b470      	push	{r4, r5, r6}
 8008c98:	690b      	ldr	r3, [r1, #16]
 8008c9a:	b103      	cbz	r3, 8008c9e <forward_relu+0x1e>
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69c6      	ldr	r6, [r0, #28]
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	f000 809e 	beq.w	8008de2 <forward_relu+0x162>
 8008ca6:	6871      	ldr	r1, [r6, #4]
 8008ca8:	6998      	ldr	r0, [r3, #24]
 8008caa:	2901      	cmp	r1, #1
 8008cac:	f000 80c3 	beq.w	8008e36 <forward_relu+0x1b6>
 8008cb0:	6893      	ldr	r3, [r2, #8]
 8008cb2:	6991      	ldr	r1, [r2, #24]
 8008cb4:	0a1b      	lsrs	r3, r3, #8
 8008cb6:	6880      	ldr	r0, [r0, #8]
 8008cb8:	688d      	ldr	r5, [r1, #8]
 8008cba:	f000 80f2 	beq.w	8008ea2 <forward_relu+0x222>
 8008cbe:	68d4      	ldr	r4, [r2, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	fb01 f202 	mul.w	r2, r1, r2
 8008cd0:	d1f9      	bne.n	8008cc6 <forward_relu+0x46>
 8008cd2:	68b3      	ldr	r3, [r6, #8]
 8008cd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8008cd8:	edd3 6a00 	vldr	s13, [r3]
 8008cdc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008ce0:	ed93 6a01 	vldr	s12, [r3, #4]
 8008ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce8:	d42c      	bmi.n	8008d44 <forward_relu+0xc4>
 8008cea:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008cee:	4413      	add	r3, r2
 8008cf0:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8008cf4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008cf8:	4295      	cmp	r5, r2
 8008cfa:	d81f      	bhi.n	8008d3c <forward_relu+0xbc>
 8008cfc:	3204      	adds	r2, #4
 8008cfe:	1d01      	adds	r1, r0, #4
 8008d00:	e00d      	b.n	8008d1e <forward_relu+0x9e>
 8008d02:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0a:	db03      	blt.n	8008d14 <forward_relu+0x94>
 8008d0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008d10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008d14:	3b08      	subs	r3, #8
 8008d16:	ed61 7a01 	vstmdb	r1!, {s15}
 8008d1a:	429d      	cmp	r5, r3
 8008d1c:	d80e      	bhi.n	8008d3c <forward_relu+0xbc>
 8008d1e:	4613      	mov	r3, r2
 8008d20:	ed72 7a01 	vldmdb	r2!, {s15}
 8008d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d2c:	d9e9      	bls.n	8008d02 <forward_relu+0x82>
 8008d2e:	3b08      	subs	r3, #8
 8008d30:	eef0 7a47 	vmov.f32	s15, s14
 8008d34:	429d      	cmp	r5, r3
 8008d36:	ed61 7a01 	vstmdb	r1!, {s15}
 8008d3a:	d9f0      	bls.n	8008d1e <forward_relu+0x9e>
 8008d3c:	bc70      	pop	{r4, r5, r6}
 8008d3e:	4770      	bx	lr
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	deff      	udf	#255	@ 0xff
 8008d44:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008d48:	f06f 4140 	mvn.w	r1, #3221225472	@ 0xc0000000
 8008d4c:	4411      	add	r1, r2
 8008d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d52:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8008d56:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008d5a:	d11f      	bne.n	8008d9c <forward_relu+0x11c>
 8008d5c:	429d      	cmp	r5, r3
 8008d5e:	d8ed      	bhi.n	8008d3c <forward_relu+0xbc>
 8008d60:	1b5d      	subs	r5, r3, r5
 8008d62:	1d1a      	adds	r2, r3, #4
 8008d64:	1d01      	adds	r1, r0, #4
 8008d66:	2000      	movs	r0, #0
 8008d68:	f025 0503 	bic.w	r5, r5, #3
 8008d6c:	1b5b      	subs	r3, r3, r5
 8008d6e:	ed72 7a01 	vldmdb	r2!, {s15}
 8008d72:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d7a:	dc0a      	bgt.n	8008d92 <forward_relu+0x112>
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8008d82:	d0db      	beq.n	8008d3c <forward_relu+0xbc>
 8008d84:	ed72 7a01 	vldmdb	r2!, {s15}
 8008d88:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d90:	ddf4      	ble.n	8008d7c <forward_relu+0xfc>
 8008d92:	429a      	cmp	r2, r3
 8008d94:	ed61 7a01 	vstmdb	r1!, {s15}
 8008d98:	d1e9      	bne.n	8008d6e <forward_relu+0xee>
 8008d9a:	e7cf      	b.n	8008d3c <forward_relu+0xbc>
 8008d9c:	429d      	cmp	r5, r3
 8008d9e:	d8cd      	bhi.n	8008d3c <forward_relu+0xbc>
 8008da0:	1b5d      	subs	r5, r3, r5
 8008da2:	1d1a      	adds	r2, r3, #4
 8008da4:	1d01      	adds	r1, r0, #4
 8008da6:	f025 0503 	bic.w	r5, r5, #3
 8008daa:	1b5b      	subs	r3, r3, r5
 8008dac:	ed72 7a01 	vldmdb	r2!, {s15}
 8008db0:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db8:	db0e      	blt.n	8008dd8 <forward_relu+0x158>
 8008dba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008dc4:	ed61 7a01 	vstmdb	r1!, {s15}
 8008dc8:	d0b8      	beq.n	8008d3c <forward_relu+0xbc>
 8008dca:	ed72 7a01 	vldmdb	r2!, {s15}
 8008dce:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd6:	daf0      	bge.n	8008dba <forward_relu+0x13a>
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	ed61 7a01 	vstmdb	r1!, {s15}
 8008dde:	d1e5      	bne.n	8008dac <forward_relu+0x12c>
 8008de0:	e7ac      	b.n	8008d3c <forward_relu+0xbc>
 8008de2:	6999      	ldr	r1, [r3, #24]
 8008de4:	6893      	ldr	r3, [r2, #8]
 8008de6:	6990      	ldr	r0, [r2, #24]
 8008de8:	0a1b      	lsrs	r3, r3, #8
 8008dea:	6889      	ldr	r1, [r1, #8]
 8008dec:	6884      	ldr	r4, [r0, #8]
 8008dee:	d06e      	beq.n	8008ece <forward_relu+0x24e>
 8008df0:	68d5      	ldr	r5, [r2, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008df8:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008dfc:	429d      	cmp	r5, r3
 8008dfe:	fb00 f202 	mul.w	r2, r0, r2
 8008e02:	d1f9      	bne.n	8008df8 <forward_relu+0x178>
 8008e04:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008e08:	4413      	add	r3, r2
 8008e0a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008e0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008e12:	4294      	cmp	r4, r2
 8008e14:	d892      	bhi.n	8008d3c <forward_relu+0xbc>
 8008e16:	3204      	adds	r2, #4
 8008e18:	3104      	adds	r1, #4
 8008e1a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008ee4 <forward_relu+0x264>
 8008e1e:	4613      	mov	r3, r2
 8008e20:	ed72 7a01 	vldmdb	r2!, {s15}
 8008e24:	3b08      	subs	r3, #8
 8008e26:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008e2a:	ed61 7a01 	vstmdb	r1!, {s15}
 8008e2e:	429c      	cmp	r4, r3
 8008e30:	d9f5      	bls.n	8008e1e <forward_relu+0x19e>
 8008e32:	bc70      	pop	{r4, r5, r6}
 8008e34:	4770      	bx	lr
 8008e36:	6993      	ldr	r3, [r2, #24]
 8008e38:	6880      	ldr	r0, [r0, #8]
 8008e3a:	689c      	ldr	r4, [r3, #8]
 8008e3c:	6893      	ldr	r3, [r2, #8]
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	d047      	beq.n	8008ed2 <forward_relu+0x252>
 8008e42:	68d5      	ldr	r5, [r2, #12]
 8008e44:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008e4c:	42ab      	cmp	r3, r5
 8008e4e:	fb02 f101 	mul.w	r1, r2, r1
 8008e52:	d1f9      	bne.n	8008e48 <forward_relu+0x1c8>
 8008e54:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 8008e58:	68b3      	ldr	r3, [r6, #8]
 8008e5a:	440a      	add	r2, r1
 8008e5c:	ed93 7a00 	vldr	s14, [r3]
 8008e60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e64:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008e68:	429c      	cmp	r4, r3
 8008e6a:	f63f af67 	bhi.w	8008d3c <forward_relu+0xbc>
 8008e6e:	1d02      	adds	r2, r0, #4
 8008e70:	3304      	adds	r3, #4
 8008e72:	2000      	movs	r0, #0
 8008e74:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008e78:	1f19      	subs	r1, r3, #4
 8008e7a:	3b08      	subs	r3, #8
 8008e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e84:	d406      	bmi.n	8008e94 <forward_relu+0x214>
 8008e86:	429c      	cmp	r4, r3
 8008e88:	f842 0d04 	str.w	r0, [r2, #-4]!
 8008e8c:	f63f af56 	bhi.w	8008d3c <forward_relu+0xbc>
 8008e90:	460b      	mov	r3, r1
 8008e92:	e7ef      	b.n	8008e74 <forward_relu+0x1f4>
 8008e94:	429c      	cmp	r4, r3
 8008e96:	ed62 7a01 	vstmdb	r2!, {s15}
 8008e9a:	f63f af4f 	bhi.w	8008d3c <forward_relu+0xbc>
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	e7e8      	b.n	8008e74 <forward_relu+0x1f4>
 8008ea2:	68b3      	ldr	r3, [r6, #8]
 8008ea4:	ed93 7a02 	vldr	s14, [r3, #8]
 8008ea8:	edd3 6a00 	vldr	s13, [r3]
 8008eac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008eb0:	ed93 6a01 	vldr	s12, [r3, #4]
 8008eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb8:	d401      	bmi.n	8008ebe <forward_relu+0x23e>
 8008eba:	462a      	mov	r2, r5
 8008ebc:	e71e      	b.n	8008cfc <forward_relu+0x7c>
 8008ebe:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008ec2:	462b      	mov	r3, r5
 8008ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec8:	f47f af6a 	bne.w	8008da0 <forward_relu+0x120>
 8008ecc:	e748      	b.n	8008d60 <forward_relu+0xe0>
 8008ece:	4622      	mov	r2, r4
 8008ed0:	e7a1      	b.n	8008e16 <forward_relu+0x196>
 8008ed2:	68b2      	ldr	r2, [r6, #8]
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	ed92 7a00 	vldr	s14, [r2]
 8008eda:	e7c8      	b.n	8008e6e <forward_relu+0x1ee>
 8008edc:	2300      	movs	r3, #0
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	deff      	udf	#255	@ 0xff
 8008ee2:	bf00      	nop
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <forward_mp>:
 8008ee8:	6983      	ldr	r3, [r0, #24]
 8008eea:	881a      	ldrh	r2, [r3, #0]
 8008eec:	2a00      	cmp	r2, #0
 8008eee:	f000 80bc 	beq.w	800906a <forward_mp+0x182>
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	684b      	ldr	r3, [r1, #4]
 8008ef6:	b103      	cbz	r3, 8008efa <forward_mp+0x12>
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2a01      	cmp	r2, #1
 8008efc:	f000 80ba 	beq.w	8009074 <forward_mp+0x18c>
 8008f00:	690a      	ldr	r2, [r1, #16]
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	f000 80b9 	beq.w	800907a <forward_mp+0x192>
 8008f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0c:	6811      	ldr	r1, [r2, #0]
 8008f0e:	b093      	sub	sp, #76	@ 0x4c
 8008f10:	68ca      	ldr	r2, [r1, #12]
 8008f12:	6989      	ldr	r1, [r1, #24]
 8008f14:	68d4      	ldr	r4, [r2, #12]
 8008f16:	6895      	ldr	r5, [r2, #8]
 8008f18:	688a      	ldr	r2, [r1, #8]
 8008f1a:	68d9      	ldr	r1, [r3, #12]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	9200      	str	r2, [sp, #0]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8008f24:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8008f28:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f2a:	9408      	str	r4, [sp, #32]
 8008f2c:	9504      	str	r5, [sp, #16]
 8008f2e:	e9d2 3600 	ldrd	r3, r6, [r2]
 8008f32:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 8008f36:	69c1      	ldr	r1, [r0, #28]
 8008f38:	f1c3 0a00 	rsb	sl, r3, #0
 8008f3c:	960d      	str	r6, [sp, #52]	@ 0x34
 8008f3e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f40:	6a01      	ldr	r1, [r0, #32]
 8008f42:	9705      	str	r7, [sp, #20]
 8008f44:	910a      	str	r1, [sp, #40]	@ 0x28
 8008f46:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8008f48:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f4a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8008f4c:	910c      	str	r1, [sp, #48]	@ 0x30
 8008f4e:	2c00      	cmp	r4, #0
 8008f50:	f000 8088 	beq.w	8009064 <forward_mp+0x17c>
 8008f54:	441a      	add	r2, r3
 8008f56:	9b05      	ldr	r3, [sp, #20]
 8008f58:	ea4f 0789 	mov.w	r7, r9, lsl #2
 8008f5c:	f04f 0b00 	mov.w	fp, #0
 8008f60:	fb09 f303 	mul.w	r3, r9, r3
 8008f64:	9201      	str	r2, [sp, #4]
 8008f66:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8008f6a:	4273      	negs	r3, r6
 8008f6c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f6e:	fb05 f307 	mul.w	r3, r5, r7
 8008f72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f76:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8008f7a:	9901      	ldr	r1, [sp, #4]
 8008f7c:	9307      	str	r3, [sp, #28]
 8008f7e:	428a      	cmp	r2, r1
 8008f80:	bf94      	ite	ls
 8008f82:	eb0a 0e02 	addls.w	lr, sl, r2
 8008f86:	eb0a 0e01 	addhi.w	lr, sl, r1
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	2a00      	cmp	r2, #0
 8008f8e:	d05f      	beq.n	8009050 <forward_mp+0x168>
 8008f90:	9a05      	ldr	r2, [sp, #20]
 8008f92:	9d00      	ldr	r5, [sp, #0]
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
 8008f98:	f8cd b044 	str.w	fp, [sp, #68]	@ 0x44
 8008f9c:	9303      	str	r3, [sp, #12]
 8008f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fa0:	18d3      	adds	r3, r2, r3
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	9302      	str	r3, [sp, #8]
 8008fa6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fa8:	9206      	str	r2, [sp, #24]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	469b      	mov	fp, r3
 8008fae:	db5e      	blt.n	800906e <forward_mp+0x186>
 8008fb0:	9a03      	ldr	r2, [sp, #12]
 8008fb2:	18d6      	adds	r6, r2, r3
 8008fb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fb6:	9902      	ldr	r1, [sp, #8]
 8008fb8:	fb06 2607 	mla	r6, r6, r7, r2
 8008fbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fbe:	428a      	cmp	r2, r1
 8008fc0:	bf94      	ite	ls
 8008fc2:	eb0b 0402 	addls.w	r4, fp, r2
 8008fc6:	eb0b 0401 	addhi.w	r4, fp, r1
 8008fca:	1ae4      	subs	r4, r4, r3
 8008fcc:	f1b9 0f00 	cmp.w	r9, #0
 8008fd0:	d008      	beq.n	8008fe4 <forward_mp+0xfc>
 8008fd2:	4633      	mov	r3, r6
 8008fd4:	462a      	mov	r2, r5
 8008fd6:	19b9      	adds	r1, r7, r6
 8008fd8:	f853 0b04 	ldr.w	r0, [r3], #4
 8008fdc:	4299      	cmp	r1, r3
 8008fde:	f842 0b04 	str.w	r0, [r2], #4
 8008fe2:	d1f9      	bne.n	8008fd8 <forward_mp+0xf0>
 8008fe4:	9b07      	ldr	r3, [sp, #28]
 8008fe6:	459e      	cmp	lr, r3
 8008fe8:	dd1f      	ble.n	800902a <forward_mp+0x142>
 8008fea:	469c      	mov	ip, r3
 8008fec:	fb07 6404 	mla	r4, r7, r4, r6
 8008ff0:	42a6      	cmp	r6, r4
 8008ff2:	d214      	bcs.n	800901e <forward_mp+0x136>
 8008ff4:	f1b9 0f00 	cmp.w	r9, #0
 8008ff8:	d011      	beq.n	800901e <forward_mp+0x136>
 8008ffa:	19f1      	adds	r1, r6, r7
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	4602      	mov	r2, r0
 8009000:	462b      	mov	r3, r5
 8009002:	ecf2 7a01 	vldmia	r2!, {s15}
 8009006:	ed93 7a00 	vldr	s14, [r3]
 800900a:	428a      	cmp	r2, r1
 800900c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8009010:	ece3 7a01 	vstmia	r3!, {s15}
 8009014:	d1f5      	bne.n	8009002 <forward_mp+0x11a>
 8009016:	4438      	add	r0, r7
 8009018:	4439      	add	r1, r7
 800901a:	42a0      	cmp	r0, r4
 800901c:	d3ef      	bcc.n	8008ffe <forward_mp+0x116>
 800901e:	f10c 0c01 	add.w	ip, ip, #1
 8009022:	4446      	add	r6, r8
 8009024:	4444      	add	r4, r8
 8009026:	45e6      	cmp	lr, ip
 8009028:	d1e2      	bne.n	8008ff0 <forward_mp+0x108>
 800902a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800902c:	443d      	add	r5, r7
 800902e:	9802      	ldr	r0, [sp, #8]
 8009030:	9a06      	ldr	r2, [sp, #24]
 8009032:	eb01 030b 	add.w	r3, r1, fp
 8009036:	1a41      	subs	r1, r0, r1
 8009038:	3201      	adds	r2, #1
 800903a:	9102      	str	r1, [sp, #8]
 800903c:	9904      	ldr	r1, [sp, #16]
 800903e:	9206      	str	r2, [sp, #24]
 8009040:	4291      	cmp	r1, r2
 8009042:	d1b2      	bne.n	8008faa <forward_mp+0xc2>
 8009044:	9b00      	ldr	r3, [sp, #0]
 8009046:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009048:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800904c:	4413      	add	r3, r2
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009052:	f10b 0b01 	add.w	fp, fp, #1
 8009056:	9a01      	ldr	r2, [sp, #4]
 8009058:	449a      	add	sl, r3
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	9b08      	ldr	r3, [sp, #32]
 8009060:	455b      	cmp	r3, fp
 8009062:	d187      	bne.n	8008f74 <forward_mp+0x8c>
 8009064:	b013      	add	sp, #76	@ 0x4c
 8009066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906a:	6853      	ldr	r3, [r2, #4]
 800906c:	deff      	udf	#255	@ 0xff
 800906e:	9e03      	ldr	r6, [sp, #12]
 8009070:	2300      	movs	r3, #0
 8009072:	e79f      	b.n	8008fb4 <forward_mp+0xcc>
 8009074:	2300      	movs	r3, #0
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	deff      	udf	#255	@ 0xff
 800907a:	68d3      	ldr	r3, [r2, #12]
 800907c:	deff      	udf	#255	@ 0xff
 800907e:	bf00      	nop

08009080 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	ed2d 8b0c 	vpush	{d8-d13}
 8009088:	b08d      	sub	sp, #52	@ 0x34
 800908a:	461d      	mov	r5, r3
 800908c:	9003      	str	r0, [sp, #12]
 800908e:	9207      	str	r2, [sp, #28]
 8009090:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8009092:	9308      	str	r3, [sp, #32]
 8009094:	f8dd b09c 	ldr.w	fp, [sp, #156]	@ 0x9c
 8009098:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800909a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800909c:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	@ 0x94
 80090a0:	fb00 f002 	mul.w	r0, r0, r2
 80090a4:	9004      	str	r0, [sp, #16]
 80090a6:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	@ 0xa4
 80090aa:	9009      	str	r0, [sp, #36]	@ 0x24
 80090ac:	2c00      	cmp	r4, #0
 80090ae:	f000 80ed 	beq.w	800928c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 80090b2:	009c      	lsls	r4, r3, #2
 80090b4:	fb00 f305 	mul.w	r3, r0, r5
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	9405      	str	r4, [sp, #20]
 80090bc:	9306      	str	r3, [sp, #24]
 80090be:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80090c0:	fb03 f305 	mul.w	r3, r3, r5
 80090c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80090cc:	425b      	negs	r3, r3
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	2300      	movs	r3, #0
 80090d2:	9302      	str	r3, [sp, #8]
 80090d4:	00ab      	lsls	r3, r5, #2
 80090d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f2c0 80dd 	blt.w	800929a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 80090e0:	9e01      	ldr	r6, [sp, #4]
 80090e2:	2000      	movs	r0, #0
 80090e4:	9d04      	ldr	r5, [sp, #16]
 80090e6:	9b07      	ldr	r3, [sp, #28]
 80090e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090ea:	9900      	ldr	r1, [sp, #0]
 80090ec:	fb05 3502 	mla	r5, r5, r2, r3
 80090f0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090f2:	440b      	add	r3, r1
 80090f4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 80090f6:	428b      	cmp	r3, r1
 80090f8:	bf94      	ite	ls
 80090fa:	ebc0 0003 	rsbls	r0, r0, r3
 80090fe:	ebc0 0001 	rsbhi	r0, r0, r1
 8009102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009104:	f1bb 0f00 	cmp.w	fp, #0
 8009108:	eba3 0a00 	sub.w	sl, r3, r0
 800910c:	9b08      	ldr	r3, [sp, #32]
 800910e:	eba1 0900 	sub.w	r9, r1, r0
 8009112:	fb03 f000 	mul.w	r0, r3, r0
 8009116:	f340 80c6 	ble.w	80092a6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 800911a:	f020 040f 	bic.w	r4, r0, #15
 800911e:	eeb0 7a40 	vmov.f32	s14, s0
 8009122:	fb02 fa0a 	mul.w	sl, r2, sl
 8009126:	f04f 0c00 	mov.w	ip, #0
 800912a:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 800912e:	fb02 f909 	mul.w	r9, r2, r9
 8009132:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009136:	f108 0801 	add.w	r8, r8, #1
 800913a:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800913e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8009142:	2c00      	cmp	r4, #0
 8009144:	f340 80a7 	ble.w	8009296 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 8009148:	f106 0240 	add.w	r2, r6, #64	@ 0x40
 800914c:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8009150:	2100      	movs	r1, #0
 8009152:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8009156:	3110      	adds	r1, #16
 8009158:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 800915c:	3340      	adds	r3, #64	@ 0x40
 800915e:	ed52 4a10 	vldr	s9, [r2, #-64]	@ 0xffffffc0
 8009162:	42a1      	cmp	r1, r4
 8009164:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009168:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800916c:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8009170:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8009174:	ed13 6a1e 	vldr	s12, [r3, #-120]	@ 0xffffff88
 8009178:	eee4 7a85 	vfma.f32	s15, s9, s10
 800917c:	ed53 6a1d 	vldr	s13, [r3, #-116]	@ 0xffffff8c
 8009180:	ed52 da1d 	vldr	s27, [r2, #-116]	@ 0xffffff8c
 8009184:	ed12 da1c 	vldr	s26, [r2, #-112]	@ 0xffffff90
 8009188:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 800918c:	ed12 ca1b 	vldr	s24, [r2, #-108]	@ 0xffffff94
 8009190:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8009194:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009198:	ed12 ba1a 	vldr	s22, [r2, #-104]	@ 0xffffff98
 800919c:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 80091a0:	ed12 aa19 	vldr	s20, [r2, #-100]	@ 0xffffff9c
 80091a4:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 80091a8:	ed12 9a18 	vldr	s18, [r2, #-96]	@ 0xffffffa0
 80091ac:	ed53 8a18 	vldr	s17, [r3, #-96]	@ 0xffffffa0
 80091b0:	eeed 7aa6 	vfma.f32	s15, s27, s13
 80091b4:	ed12 8a17 	vldr	s16, [r2, #-92]	@ 0xffffffa4
 80091b8:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80091bc:	ed12 1a16 	vldr	s2, [r2, #-88]	@ 0xffffffa8
 80091c0:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80091c4:	ed12 2a15 	vldr	s4, [r2, #-84]	@ 0xffffffac
 80091c8:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80091cc:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80091d0:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80091d4:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80091d8:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 80091dc:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 80091e0:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 80091e4:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80091e8:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80091ec:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80091f0:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80091f4:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80091f8:	eeea 7a29 	vfma.f32	s15, s20, s19
 80091fc:	eee9 7a28 	vfma.f32	s15, s18, s17
 8009200:	eee8 7a20 	vfma.f32	s15, s16, s1
 8009204:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009208:	eee2 7a22 	vfma.f32	s15, s4, s5
 800920c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009210:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009214:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009218:	eee6 7a26 	vfma.f32	s15, s12, s13
 800921c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009220:	db97      	blt.n	8009152 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 8009222:	4476      	add	r6, lr
 8009224:	4475      	add	r5, lr
 8009226:	4647      	mov	r7, r8
 8009228:	42b8      	cmp	r0, r7
 800922a:	dd10      	ble.n	800924e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 800922c:	463b      	mov	r3, r7
 800922e:	4631      	mov	r1, r6
 8009230:	462a      	mov	r2, r5
 8009232:	3301      	adds	r3, #1
 8009234:	ecf2 6a01 	vldmia	r2!, {s13}
 8009238:	ecf1 7a01 	vldmia	r1!, {s15}
 800923c:	4298      	cmp	r0, r3
 800923e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009242:	d1f6      	bne.n	8009232 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8009244:	1bc7      	subs	r7, r0, r7
 8009246:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800924a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800924e:	f10c 0c01 	add.w	ip, ip, #1
 8009252:	4456      	add	r6, sl
 8009254:	444d      	add	r5, r9
 8009256:	45dc      	cmp	ip, fp
 8009258:	f47f af73 	bne.w	8009142 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 800925c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 800925e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009260:	9a03      	ldr	r2, [sp, #12]
 8009262:	4401      	add	r1, r0
 8009264:	9b02      	ldr	r3, [sp, #8]
 8009266:	ed82 7a00 	vstr	s14, [r2]
 800926a:	9128      	str	r1, [sp, #160]	@ 0xa0
 800926c:	3301      	adds	r3, #1
 800926e:	9905      	ldr	r1, [sp, #20]
 8009270:	9302      	str	r3, [sp, #8]
 8009272:	440a      	add	r2, r1
 8009274:	9906      	ldr	r1, [sp, #24]
 8009276:	9203      	str	r2, [sp, #12]
 8009278:	9a00      	ldr	r2, [sp, #0]
 800927a:	1a12      	subs	r2, r2, r0
 800927c:	9200      	str	r2, [sp, #0]
 800927e:	9a01      	ldr	r2, [sp, #4]
 8009280:	440a      	add	r2, r1
 8009282:	9201      	str	r2, [sp, #4]
 8009284:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009286:	4293      	cmp	r3, r2
 8009288:	f47f af26 	bne.w	80090d8 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 800928c:	b00d      	add	sp, #52	@ 0x34
 800928e:	ecbd 8b0c 	vpop	{d8-d13}
 8009292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009296:	2700      	movs	r7, #0
 8009298:	e7c6      	b.n	8009228 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 800929a:	9a00      	ldr	r2, [sp, #0]
 800929c:	9b04      	ldr	r3, [sp, #16]
 800929e:	4610      	mov	r0, r2
 80092a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80092a2:	189d      	adds	r5, r3, r2
 80092a4:	e71f      	b.n	80090e6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 80092a6:	eeb0 7a40 	vmov.f32	s14, s0
 80092aa:	e7d7      	b.n	800925c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

080092ac <forward_lite_conv2d_if32of32wf32>:
 80092ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b0:	ed2d 8b02 	vpush	{d8}
 80092b4:	b09f      	sub	sp, #124	@ 0x7c
 80092b6:	4686      	mov	lr, r0
 80092b8:	4694      	mov	ip, r2
 80092ba:	af08      	add	r7, sp, #32
 80092bc:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	@ 0xb0
 80092c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80092c2:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	@ 0xac
 80092c6:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	@ 0xb4
 80092ca:	424e      	negs	r6, r1
 80092cc:	64fc      	str	r4, [r7, #76]	@ 0x4c
 80092ce:	f8d7 409c 	ldr.w	r4, [r7, #156]	@ 0x9c
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	613a      	str	r2, [r7, #16]
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80092dc:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	@ 0xa8
 80092e0:	617d      	str	r5, [r7, #20]
 80092e2:	633e      	str	r6, [r7, #48]	@ 0x30
 80092e4:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	@ 0x88
 80092e8:	2c00      	cmp	r4, #0
 80092ea:	f000 8092 	beq.w	8009412 <forward_lite_conv2d_if32of32wf32+0x166>
 80092ee:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80092f2:	6379      	str	r1, [r7, #52]	@ 0x34
 80092f4:	fb04 f202 	mul.w	r2, r4, r2
 80092f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092fc:	4244      	negs	r4, r0
 80092fe:	ed9f 8a9a 	vldr	s16, [pc, #616]	@ 8009568 <forward_lite_conv2d_if32of32wf32+0x2bc>
 8009302:	653c      	str	r4, [r7, #80]	@ 0x50
 8009304:	fb03 f402 	mul.w	r4, r3, r2
 8009308:	fb03 f201 	mul.w	r2, r3, r1
 800930c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8009310:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009314:	63bc      	str	r4, [r7, #56]	@ 0x38
 8009316:	fb01 f10a 	mul.w	r1, r1, sl
 800931a:	0089      	lsls	r1, r1, #2
 800931c:	61b9      	str	r1, [r7, #24]
 800931e:	fb05 f102 	mul.w	r1, r5, r2
 8009322:	4655      	mov	r5, sl
 8009324:	fb06 f202 	mul.w	r2, r6, r2
 8009328:	46da      	mov	sl, fp
 800932a:	0089      	lsls	r1, r1, #2
 800932c:	61f9      	str	r1, [r7, #28]
 800932e:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8009332:	f10b 0207 	add.w	r2, fp, #7
 8009336:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009338:	f022 0107 	bic.w	r1, r2, #7
 800933c:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8009340:	60f9      	str	r1, [r7, #12]
 8009342:	f10c 4178 	add.w	r1, ip, #4160749568	@ 0xf8000000
 8009346:	60ba      	str	r2, [r7, #8]
 8009348:	2200      	movs	r2, #0
 800934a:	6239      	str	r1, [r7, #32]
 800934c:	627a      	str	r2, [r7, #36]	@ 0x24
 800934e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009350:	2a00      	cmp	r2, #0
 8009352:	f2c0 80d5 	blt.w	8009500 <forward_lite_conv2d_if32of32wf32+0x254>
 8009356:	2200      	movs	r2, #0
 8009358:	f8d7 b028 	ldr.w	fp, [r7, #40]	@ 0x28
 800935c:	657a      	str	r2, [r7, #84]	@ 0x54
 800935e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009360:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009364:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8009368:	440a      	add	r2, r1
 800936a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800936c:	4282      	cmp	r2, r0
 800936e:	bf94      	ite	ls
 8009370:	ebc1 0102 	rsbls	r1, r1, r2
 8009374:	ebc1 0100 	rsbhi	r1, r1, r0
 8009378:	6a3a      	ldr	r2, [r7, #32]
 800937a:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 800937e:	6439      	str	r1, [r7, #64]	@ 0x40
 8009380:	d24d      	bcs.n	800941e <forward_lite_conv2d_if32of32wf32+0x172>
 8009382:	b385      	cbz	r5, 80093e6 <forward_lite_conv2d_if32of32wf32+0x13a>
 8009384:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009386:	2a00      	cmp	r2, #0
 8009388:	f000 80bf 	beq.w	800950a <forward_lite_conv2d_if32of32wf32+0x25e>
 800938c:	4659      	mov	r1, fp
 800938e:	4691      	mov	r9, r2
 8009390:	46d3      	mov	fp, sl
 8009392:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8009396:	693e      	ldr	r6, [r7, #16]
 8009398:	2400      	movs	r4, #0
 800939a:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 800939e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093a0:	3401      	adds	r4, #1
 80093a2:	ecb9 0a01 	vldmia	r9!, {s0}
 80093a6:	4640      	mov	r0, r8
 80093a8:	9207      	str	r2, [sp, #28]
 80093aa:	f108 0804 	add.w	r8, r8, #4
 80093ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80093b0:	e9cd a205 	strd	sl, r2, [sp, #20]
 80093b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80093b6:	9204      	str	r2, [sp, #16]
 80093b8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80093bc:	9203      	str	r2, [sp, #12]
 80093be:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80093c2:	9202      	str	r2, [sp, #8]
 80093c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80093c8:	e9cd 5200 	strd	r5, r2, [sp]
 80093cc:	4632      	mov	r2, r6
 80093ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80093d4:	445e      	add	r6, fp
 80093d6:	f7ff fe53 	bl	8009080 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80093da:	42a5      	cmp	r5, r4
 80093dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80093de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093e2:	d1dc      	bne.n	800939e <forward_lite_conv2d_if32of32wf32+0xf2>
 80093e4:	46da      	mov	sl, fp
 80093e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093e8:	69b8      	ldr	r0, [r7, #24]
 80093ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ec:	4401      	add	r1, r0
 80093ee:	6978      	ldr	r0, [r7, #20]
 80093f0:	3201      	adds	r2, #1
 80093f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80093f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80093f8:	4401      	add	r1, r0
 80093fa:	6339      	str	r1, [r7, #48]	@ 0x30
 80093fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80093fe:	1a09      	subs	r1, r1, r0
 8009400:	69f8      	ldr	r0, [r7, #28]
 8009402:	6379      	str	r1, [r7, #52]	@ 0x34
 8009404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009406:	4401      	add	r1, r0
 8009408:	62b9      	str	r1, [r7, #40]	@ 0x28
 800940a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800940e:	4291      	cmp	r1, r2
 8009410:	d19d      	bne.n	800934e <forward_lite_conv2d_if32of32wf32+0xa2>
 8009412:	375c      	adds	r7, #92	@ 0x5c
 8009414:	46bd      	mov	sp, r7
 8009416:	ecbd 8b02 	vpop	{d8}
 800941a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941e:	466a      	mov	r2, sp
 8009420:	ee08 2a90 	vmov	s17, r2
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	ebad 0d02 	sub.w	sp, sp, r2
 800942a:	aa08      	add	r2, sp, #32
 800942c:	2d00      	cmp	r5, #0
 800942e:	d03d      	beq.n	80094ac <forward_lite_conv2d_if32of32wf32+0x200>
 8009430:	6938      	ldr	r0, [r7, #16]
 8009432:	4659      	mov	r1, fp
 8009434:	68bc      	ldr	r4, [r7, #8]
 8009436:	46ab      	mov	fp, r5
 8009438:	f8d7 902c 	ldr.w	r9, [r7, #44]	@ 0x2c
 800943c:	f04f 0800 	mov.w	r8, #0
 8009440:	6bfe      	ldr	r6, [r7, #60]	@ 0x3c
 8009442:	4605      	mov	r5, r0
 8009444:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009446:	b138      	cbz	r0, 8009458 <forward_lite_conv2d_if32of32wf32+0x1ac>
 8009448:	4628      	mov	r0, r5
 800944a:	4694      	mov	ip, r2
 800944c:	f850 eb04 	ldr.w	lr, [r0], #4
 8009450:	42a0      	cmp	r0, r4
 8009452:	f84c eb04 	str.w	lr, [ip], #4
 8009456:	d1f9      	bne.n	800944c <forward_lite_conv2d_if32of32wf32+0x1a0>
 8009458:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800945a:	f108 0801 	add.w	r8, r8, #1
 800945e:	b348      	cbz	r0, 80094b4 <forward_lite_conv2d_if32of32wf32+0x208>
 8009460:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009462:	4455      	add	r5, sl
 8009464:	ecb6 0a01 	vldmia	r6!, {s0}
 8009468:	4454      	add	r4, sl
 800946a:	9007      	str	r0, [sp, #28]
 800946c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800946e:	9006      	str	r0, [sp, #24]
 8009470:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009472:	9005      	str	r0, [sp, #20]
 8009474:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009476:	9004      	str	r0, [sp, #16]
 8009478:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800947c:	9003      	str	r0, [sp, #12]
 800947e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8009482:	9002      	str	r0, [sp, #8]
 8009484:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8009488:	e9cd b000 	strd	fp, r0, [sp]
 800948c:	4648      	mov	r0, r9
 800948e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009492:	f109 0904 	add.w	r9, r9, #4
 8009496:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 800949a:	f7ff fdf1 	bl	8009080 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800949e:	45d8      	cmp	r8, fp
 80094a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094a4:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 80094a8:	d1cc      	bne.n	8009444 <forward_lite_conv2d_if32of32wf32+0x198>
 80094aa:	465d      	mov	r5, fp
 80094ac:	ee18 2a90 	vmov	r2, s17
 80094b0:	4695      	mov	sp, r2
 80094b2:	e798      	b.n	80093e6 <forward_lite_conv2d_if32of32wf32+0x13a>
 80094b4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80094b6:	eeb0 0a48 	vmov.f32	s0, s16
 80094ba:	4455      	add	r5, sl
 80094bc:	4454      	add	r4, sl
 80094be:	9007      	str	r0, [sp, #28]
 80094c0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80094c2:	9006      	str	r0, [sp, #24]
 80094c4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80094c6:	9005      	str	r0, [sp, #20]
 80094c8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80094ca:	9004      	str	r0, [sp, #16]
 80094cc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80094d0:	9003      	str	r0, [sp, #12]
 80094d2:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80094d6:	9002      	str	r0, [sp, #8]
 80094d8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80094dc:	e9cd b000 	strd	fp, r0, [sp]
 80094e0:	4648      	mov	r0, r9
 80094e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80094e6:	f109 0904 	add.w	r9, r9, #4
 80094ea:	e9c7 2111 	strd	r2, r1, [r7, #68]	@ 0x44
 80094ee:	f7ff fdc7 	bl	8009080 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80094f2:	45c3      	cmp	fp, r8
 80094f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094f8:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	@ 0x44
 80094fc:	d1a2      	bne.n	8009444 <forward_lite_conv2d_if32of32wf32+0x198>
 80094fe:	e7d4      	b.n	80094aa <forward_lite_conv2d_if32of32wf32+0x1fe>
 8009500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009502:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8009506:	657a      	str	r2, [r7, #84]	@ 0x54
 8009508:	e729      	b.n	800935e <forward_lite_conv2d_if32of32wf32+0xb2>
 800950a:	4659      	mov	r1, fp
 800950c:	f8d7 802c 	ldr.w	r8, [r7, #44]	@ 0x2c
 8009510:	46d3      	mov	fp, sl
 8009512:	693e      	ldr	r6, [r7, #16]
 8009514:	4614      	mov	r4, r2
 8009516:	f8d7 9054 	ldr.w	r9, [r7, #84]	@ 0x54
 800951a:	f8d7 a040 	ldr.w	sl, [r7, #64]	@ 0x40
 800951e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009520:	3401      	adds	r4, #1
 8009522:	4640      	mov	r0, r8
 8009524:	eeb0 0a48 	vmov.f32	s0, s16
 8009528:	9207      	str	r2, [sp, #28]
 800952a:	f108 0804 	add.w	r8, r8, #4
 800952e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009530:	f8cd 9010 	str.w	r9, [sp, #16]
 8009534:	e9cd a205 	strd	sl, r2, [sp, #20]
 8009538:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800953c:	9203      	str	r2, [sp, #12]
 800953e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009542:	9202      	str	r2, [sp, #8]
 8009544:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8009548:	e9cd 5200 	strd	r5, r2, [sp]
 800954c:	4632      	mov	r2, r6
 800954e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009552:	6579      	str	r1, [r7, #84]	@ 0x54
 8009554:	445e      	add	r6, fp
 8009556:	f7ff fd93 	bl	8009080 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800955a:	42a5      	cmp	r5, r4
 800955c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800955e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009562:	d1dc      	bne.n	800951e <forward_lite_conv2d_if32of32wf32+0x272>
 8009564:	e73e      	b.n	80093e4 <forward_lite_conv2d_if32of32wf32+0x138>
 8009566:	bf00      	nop
 8009568:	00000000 	.word	0x00000000

0800956c <forward_lite_dense_if32of32wf32>:
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	ed2d 8b0c 	vpush	{d8-d13}
 8009574:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	@ 0x54
 8009578:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800957c:	4287      	cmp	r7, r0
 800957e:	f240 8105 	bls.w	800978c <forward_lite_dense_if32of32wf32+0x220>
 8009582:	f1a6 0810 	sub.w	r8, r6, #16
 8009586:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800958a:	4605      	mov	r5, r0
 800958c:	f006 0b0f 	and.w	fp, r6, #15
 8009590:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009594:	f108 0801 	add.w	r8, r8, #1
 8009598:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800959c:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80095a0:	2e0f      	cmp	r6, #15
 80095a2:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80097b8 <forward_lite_dense_if32of32wf32+0x24c>
 80095a6:	f240 8102 	bls.w	80097ae <forward_lite_dense_if32of32wf32+0x242>
 80095aa:	f101 0c40 	add.w	ip, r1, #64	@ 0x40
 80095ae:	f102 0440 	add.w	r4, r2, #64	@ 0x40
 80095b2:	46b6      	mov	lr, r6
 80095b4:	ed54 6a0f 	vldr	s13, [r4, #-60]	@ 0xffffffc4
 80095b8:	f1ae 0e10 	sub.w	lr, lr, #16
 80095bc:	ed5c 7a0f 	vldr	s15, [ip, #-60]	@ 0xffffffc4
 80095c0:	3440      	adds	r4, #64	@ 0x40
 80095c2:	ed5c 4a10 	vldr	s9, [ip, #-64]	@ 0xffffffc0
 80095c6:	f1be 0f0f 	cmp.w	lr, #15
 80095ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095ce:	ed14 5a20 	vldr	s10, [r4, #-128]	@ 0xffffff80
 80095d2:	ed5c 5a0e 	vldr	s11, [ip, #-56]	@ 0xffffffc8
 80095d6:	f10c 0c40 	add.w	ip, ip, #64	@ 0x40
 80095da:	ed14 6a1e 	vldr	s12, [r4, #-120]	@ 0xffffff88
 80095de:	eee4 7a85 	vfma.f32	s15, s9, s10
 80095e2:	ed54 6a1d 	vldr	s13, [r4, #-116]	@ 0xffffff8c
 80095e6:	ed1c da1d 	vldr	s26, [ip, #-116]	@ 0xffffff8c
 80095ea:	ed5c ca1c 	vldr	s25, [ip, #-112]	@ 0xffffff90
 80095ee:	ed14 ca1c 	vldr	s24, [r4, #-112]	@ 0xffffff90
 80095f2:	ed5c ba1b 	vldr	s23, [ip, #-108]	@ 0xffffff94
 80095f6:	ed14 ba1b 	vldr	s22, [r4, #-108]	@ 0xffffff94
 80095fa:	eee5 7a86 	vfma.f32	s15, s11, s12
 80095fe:	ed5c aa1a 	vldr	s21, [ip, #-104]	@ 0xffffff98
 8009602:	ed14 aa1a 	vldr	s20, [r4, #-104]	@ 0xffffff98
 8009606:	ed5c 9a19 	vldr	s19, [ip, #-100]	@ 0xffffff9c
 800960a:	ed14 9a19 	vldr	s18, [r4, #-100]	@ 0xffffff9c
 800960e:	ed5c 8a18 	vldr	s17, [ip, #-96]	@ 0xffffffa0
 8009612:	ed14 8a18 	vldr	s16, [r4, #-96]	@ 0xffffffa0
 8009616:	eeed 7a26 	vfma.f32	s15, s26, s13
 800961a:	ed1c 0a17 	vldr	s0, [ip, #-92]	@ 0xffffffa4
 800961e:	ed54 0a17 	vldr	s1, [r4, #-92]	@ 0xffffffa4
 8009622:	ed1c 1a16 	vldr	s2, [ip, #-88]	@ 0xffffffa8
 8009626:	ed54 1a16 	vldr	s3, [r4, #-88]	@ 0xffffffa8
 800962a:	ed1c 2a15 	vldr	s4, [ip, #-84]	@ 0xffffffac
 800962e:	ed54 2a15 	vldr	s5, [r4, #-84]	@ 0xffffffac
 8009632:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009636:	ed1c 3a14 	vldr	s6, [ip, #-80]	@ 0xffffffb0
 800963a:	ed54 3a14 	vldr	s7, [r4, #-80]	@ 0xffffffb0
 800963e:	ed1c 4a13 	vldr	s8, [ip, #-76]	@ 0xffffffb4
 8009642:	ed54 4a13 	vldr	s9, [r4, #-76]	@ 0xffffffb4
 8009646:	ed1c 5a12 	vldr	s10, [ip, #-72]	@ 0xffffffb8
 800964a:	ed54 5a12 	vldr	s11, [r4, #-72]	@ 0xffffffb8
 800964e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009652:	ed1c 6a11 	vldr	s12, [ip, #-68]	@ 0xffffffbc
 8009656:	ed54 6a11 	vldr	s13, [r4, #-68]	@ 0xffffffbc
 800965a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800965e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009662:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009666:	eee0 7a20 	vfma.f32	s15, s0, s1
 800966a:	eee1 7a21 	vfma.f32	s15, s2, s3
 800966e:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009672:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009676:	eee4 7a24 	vfma.f32	s15, s8, s9
 800967a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800967e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009682:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009686:	d895      	bhi.n	80095b4 <forward_lite_dense_if32of32wf32+0x48>
 8009688:	eb02 0e0a 	add.w	lr, r2, sl
 800968c:	465c      	mov	r4, fp
 800968e:	46c4      	mov	ip, r8
 8009690:	2c00      	cmp	r4, #0
 8009692:	d075      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009694:	eddc 6a00 	vldr	s13, [ip]
 8009698:	2c01      	cmp	r4, #1
 800969a:	edde 7a00 	vldr	s15, [lr]
 800969e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096a2:	d06d      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 80096a4:	eddc 6a01 	vldr	s13, [ip, #4]
 80096a8:	2c02      	cmp	r4, #2
 80096aa:	edde 7a01 	vldr	s15, [lr, #4]
 80096ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096b2:	d065      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 80096b4:	eddc 6a02 	vldr	s13, [ip, #8]
 80096b8:	2c03      	cmp	r4, #3
 80096ba:	edde 7a02 	vldr	s15, [lr, #8]
 80096be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096c2:	d05d      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 80096c4:	eddc 6a03 	vldr	s13, [ip, #12]
 80096c8:	2c04      	cmp	r4, #4
 80096ca:	edde 7a03 	vldr	s15, [lr, #12]
 80096ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096d2:	d055      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 80096d4:	eddc 6a04 	vldr	s13, [ip, #16]
 80096d8:	2c05      	cmp	r4, #5
 80096da:	edde 7a04 	vldr	s15, [lr, #16]
 80096de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096e2:	d04d      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 80096e4:	eddc 6a05 	vldr	s13, [ip, #20]
 80096e8:	2c06      	cmp	r4, #6
 80096ea:	edde 7a05 	vldr	s15, [lr, #20]
 80096ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80096f2:	d045      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 80096f4:	eddc 6a06 	vldr	s13, [ip, #24]
 80096f8:	2c07      	cmp	r4, #7
 80096fa:	edde 7a06 	vldr	s15, [lr, #24]
 80096fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009702:	d03d      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009704:	eddc 6a07 	vldr	s13, [ip, #28]
 8009708:	2c08      	cmp	r4, #8
 800970a:	edde 7a07 	vldr	s15, [lr, #28]
 800970e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009712:	d035      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009714:	eddc 6a08 	vldr	s13, [ip, #32]
 8009718:	2c09      	cmp	r4, #9
 800971a:	edde 7a08 	vldr	s15, [lr, #32]
 800971e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009722:	d02d      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009724:	eddc 6a09 	vldr	s13, [ip, #36]	@ 0x24
 8009728:	2c0a      	cmp	r4, #10
 800972a:	edde 7a09 	vldr	s15, [lr, #36]	@ 0x24
 800972e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009732:	d025      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009734:	eddc 6a0a 	vldr	s13, [ip, #40]	@ 0x28
 8009738:	2c0b      	cmp	r4, #11
 800973a:	edde 7a0a 	vldr	s15, [lr, #40]	@ 0x28
 800973e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009742:	d01d      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009744:	eddc 6a0b 	vldr	s13, [ip, #44]	@ 0x2c
 8009748:	2c0c      	cmp	r4, #12
 800974a:	edde 7a0b 	vldr	s15, [lr, #44]	@ 0x2c
 800974e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009752:	d015      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009754:	eddc 6a0c 	vldr	s13, [ip, #48]	@ 0x30
 8009758:	3c0d      	subs	r4, #13
 800975a:	edde 7a0c 	vldr	s15, [lr, #48]	@ 0x30
 800975e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009762:	d00d      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009764:	eddc 6a0d 	vldr	s13, [ip, #52]	@ 0x34
 8009768:	2c01      	cmp	r4, #1
 800976a:	edde 7a0d 	vldr	s15, [lr, #52]	@ 0x34
 800976e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009772:	d005      	beq.n	8009780 <forward_lite_dense_if32of32wf32+0x214>
 8009774:	edde 6a0e 	vldr	s13, [lr, #56]	@ 0x38
 8009778:	eddc 7a0e 	vldr	s15, [ip, #56]	@ 0x38
 800977c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009780:	eca5 7a01 	vstmia	r5!, {s14}
 8009784:	42af      	cmp	r7, r5
 8009786:	444a      	add	r2, r9
 8009788:	f63f af0a 	bhi.w	80095a0 <forward_lite_dense_if32of32wf32+0x34>
 800978c:	b15b      	cbz	r3, 80097a6 <forward_lite_dense_if32of32wf32+0x23a>
 800978e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009790:	b14a      	cbz	r2, 80097a6 <forward_lite_dense_if32of32wf32+0x23a>
 8009792:	edd0 7a00 	vldr	s15, [r0]
 8009796:	ecb3 7a01 	vldmia	r3!, {s14}
 800979a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800979e:	ece0 7a01 	vstmia	r0!, {s15}
 80097a2:	4287      	cmp	r7, r0
 80097a4:	d1f5      	bne.n	8009792 <forward_lite_dense_if32of32wf32+0x226>
 80097a6:	ecbd 8b0c 	vpop	{d8-d13}
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	4634      	mov	r4, r6
 80097b0:	4696      	mov	lr, r2
 80097b2:	468c      	mov	ip, r1
 80097b4:	e76c      	b.n	8009690 <forward_lite_dense_if32of32wf32+0x124>
 80097b6:	bf00      	nop
 80097b8:	00000000 	.word	0x00000000

080097bc <st_int8_copy>:
 80097bc:	4288      	cmp	r0, r1
 80097be:	d010      	beq.n	80097e2 <st_int8_copy+0x26>
 80097c0:	b17a      	cbz	r2, 80097e2 <st_int8_copy+0x26>
 80097c2:	4288      	cmp	r0, r1
 80097c4:	eb00 0302 	add.w	r3, r0, r2
 80097c8:	d20c      	bcs.n	80097e4 <st_int8_copy+0x28>
 80097ca:	428b      	cmp	r3, r1
 80097cc:	d90a      	bls.n	80097e4 <st_int8_copy+0x28>
 80097ce:	4283      	cmp	r3, r0
 80097d0:	440a      	add	r2, r1
 80097d2:	d906      	bls.n	80097e2 <st_int8_copy+0x26>
 80097d4:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80097d8:	4283      	cmp	r3, r0
 80097da:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80097de:	d1f9      	bne.n	80097d4 <st_int8_copy+0x18>
 80097e0:	4770      	bx	lr
 80097e2:	4770      	bx	lr
 80097e4:	078b      	lsls	r3, r1, #30
 80097e6:	d102      	bne.n	80097ee <st_int8_copy+0x32>
 80097e8:	e008      	b.n	80097fc <st_int8_copy+0x40>
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	d04d      	beq.n	800988a <st_int8_copy+0xce>
 80097ee:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80097f2:	3a01      	subs	r2, #1
 80097f4:	f801 3b01 	strb.w	r3, [r1], #1
 80097f8:	078b      	lsls	r3, r1, #30
 80097fa:	d1f6      	bne.n	80097ea <st_int8_copy+0x2e>
 80097fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8009804:	d05e      	beq.n	80098c4 <st_int8_copy+0x108>
 8009806:	ea40 0301 	orr.w	r3, r0, r1
 800980a:	075b      	lsls	r3, r3, #29
 800980c:	d13e      	bne.n	800988c <st_int8_copy+0xd0>
 800980e:	f10e 33ff 	add.w	r3, lr, #4294967295	@ 0xffffffff
 8009812:	2b01      	cmp	r3, #1
 8009814:	d93a      	bls.n	800988c <st_int8_copy+0xd0>
 8009816:	f100 0310 	add.w	r3, r0, #16
 800981a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800981e:	f101 0c10 	add.w	ip, r1, #16
 8009822:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8009826:	3310      	adds	r3, #16
 8009828:	f10c 0c10 	add.w	ip, ip, #16
 800982c:	ed13 6b08 	vldr	d6, [r3, #-32]	@ 0xffffffe0
 8009830:	ed13 7b06 	vldr	d7, [r3, #-24]	@ 0xffffffe8
 8009834:	4573      	cmp	r3, lr
 8009836:	ed0c 6b08 	vstr	d6, [ip, #-32]	@ 0xffffffe0
 800983a:	ed0c 7b06 	vstr	d7, [ip, #-24]	@ 0xffffffe8
 800983e:	d1f2      	bne.n	8009826 <st_int8_copy+0x6a>
 8009840:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009844:	4421      	add	r1, r4
 8009846:	4420      	add	r0, r4
 8009848:	f002 0203 	and.w	r2, r2, #3
 800984c:	b16b      	cbz	r3, 800986a <st_int8_copy+0xae>
 800984e:	6804      	ldr	r4, [r0, #0]
 8009850:	600c      	str	r4, [r1, #0]
 8009852:	1e5c      	subs	r4, r3, #1
 8009854:	d005      	beq.n	8009862 <st_int8_copy+0xa6>
 8009856:	6845      	ldr	r5, [r0, #4]
 8009858:	2c01      	cmp	r4, #1
 800985a:	604d      	str	r5, [r1, #4]
 800985c:	d001      	beq.n	8009862 <st_int8_copy+0xa6>
 800985e:	6884      	ldr	r4, [r0, #8]
 8009860:	608c      	str	r4, [r1, #8]
 8009862:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009866:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800986a:	b162      	cbz	r2, 8009886 <st_int8_copy+0xca>
 800986c:	f990 3000 	ldrsb.w	r3, [r0]
 8009870:	3a01      	subs	r2, #1
 8009872:	700b      	strb	r3, [r1, #0]
 8009874:	d007      	beq.n	8009886 <st_int8_copy+0xca>
 8009876:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800987a:	2a01      	cmp	r2, #1
 800987c:	704b      	strb	r3, [r1, #1]
 800987e:	d002      	beq.n	8009886 <st_int8_copy+0xca>
 8009880:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8009884:	708b      	strb	r3, [r1, #2]
 8009886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800988a:	4770      	bx	lr
 800988c:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009890:	460b      	mov	r3, r1
 8009892:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8009896:	4684      	mov	ip, r0
 8009898:	f8dc 8000 	ldr.w	r8, [ip]
 800989c:	3310      	adds	r3, #16
 800989e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80098a2:	f10c 0c10 	add.w	ip, ip, #16
 80098a6:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80098aa:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80098ae:	f843 8c10 	str.w	r8, [r3, #-16]
 80098b2:	f843 7c0c 	str.w	r7, [r3, #-12]
 80098b6:	f843 6c08 	str.w	r6, [r3, #-8]
 80098ba:	f843 5c04 	str.w	r5, [r3, #-4]
 80098be:	459e      	cmp	lr, r3
 80098c0:	d1ea      	bne.n	8009898 <st_int8_copy+0xdc>
 80098c2:	e7bd      	b.n	8009840 <st_int8_copy+0x84>
 80098c4:	0893      	lsrs	r3, r2, #2
 80098c6:	f002 0203 	and.w	r2, r2, #3
 80098ca:	e7bf      	b.n	800984c <st_int8_copy+0x90>

080098cc <ai_array_to_buffer_fmt>:
 80098cc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d050      	beq.n	8009976 <ai_array_to_buffer_fmt+0xaa>
 80098d4:	f020 427e 	bic.w	r2, r0, #4261412864	@ 0xfe000000
 80098d8:	4b29      	ldr	r3, [pc, #164]	@ (8009980 <ai_array_to_buffer_fmt+0xb4>)
 80098da:	429a      	cmp	r2, r3
 80098dc:	d00b      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 80098de:	dc1c      	bgt.n	800991a <ai_array_to_buffer_fmt+0x4e>
 80098e0:	4b28      	ldr	r3, [pc, #160]	@ (8009984 <ai_array_to_buffer_fmt+0xb8>)
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d007      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 80098e6:	dd0b      	ble.n	8009900 <ai_array_to_buffer_fmt+0x34>
 80098e8:	4b27      	ldr	r3, [pc, #156]	@ (8009988 <ai_array_to_buffer_fmt+0xbc>)
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d003      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 80098ee:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d131      	bne.n	800995a <ai_array_to_buffer_fmt+0x8e>
 80098f6:	4613      	mov	r3, r2
 80098f8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80098fc:	4318      	orrs	r0, r3
 80098fe:	4770      	bx	lr
 8009900:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8009904:	429a      	cmp	r2, r3
 8009906:	d0f6      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 8009908:	dd2c      	ble.n	8009964 <ai_array_to_buffer_fmt+0x98>
 800990a:	4b20      	ldr	r3, [pc, #128]	@ (800998c <ai_array_to_buffer_fmt+0xc0>)
 800990c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8009910:	429a      	cmp	r2, r3
 8009912:	bf18      	it	ne
 8009914:	2340      	movne	r3, #64	@ 0x40
 8009916:	4318      	orrs	r0, r3
 8009918:	4770      	bx	lr
 800991a:	4b1d      	ldr	r3, [pc, #116]	@ (8009990 <ai_array_to_buffer_fmt+0xc4>)
 800991c:	429a      	cmp	r2, r3
 800991e:	d0ea      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 8009920:	dd0e      	ble.n	8009940 <ai_array_to_buffer_fmt+0x74>
 8009922:	4b1c      	ldr	r3, [pc, #112]	@ (8009994 <ai_array_to_buffer_fmt+0xc8>)
 8009924:	429a      	cmp	r2, r3
 8009926:	d0e6      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 8009928:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800992c:	429a      	cmp	r2, r3
 800992e:	d0e2      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 8009930:	4b19      	ldr	r3, [pc, #100]	@ (8009998 <ai_array_to_buffer_fmt+0xcc>)
 8009932:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8009936:	429a      	cmp	r2, r3
 8009938:	bf18      	it	ne
 800993a:	2340      	movne	r3, #64	@ 0x40
 800993c:	4318      	orrs	r0, r3
 800993e:	4770      	bx	lr
 8009940:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8009944:	429a      	cmp	r2, r3
 8009946:	d0d6      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 8009948:	3307      	adds	r3, #7
 800994a:	429a      	cmp	r2, r3
 800994c:	d0d3      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 800994e:	f2a3 3387 	subw	r3, r3, #903	@ 0x387
 8009952:	429a      	cmp	r2, r3
 8009954:	bf18      	it	ne
 8009956:	2340      	movne	r3, #64	@ 0x40
 8009958:	e7ce      	b.n	80098f8 <ai_array_to_buffer_fmt+0x2c>
 800995a:	4b10      	ldr	r3, [pc, #64]	@ (800999c <ai_array_to_buffer_fmt+0xd0>)
 800995c:	429a      	cmp	r2, r3
 800995e:	bf18      	it	ne
 8009960:	2340      	movne	r3, #64	@ 0x40
 8009962:	e7c9      	b.n	80098f8 <ai_array_to_buffer_fmt+0x2c>
 8009964:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8009968:	429a      	cmp	r2, r3
 800996a:	d0c4      	beq.n	80098f6 <ai_array_to_buffer_fmt+0x2a>
 800996c:	3380      	adds	r3, #128	@ 0x80
 800996e:	429a      	cmp	r2, r3
 8009970:	bf18      	it	ne
 8009972:	2340      	movne	r3, #64	@ 0x40
 8009974:	e7c0      	b.n	80098f8 <ai_array_to_buffer_fmt+0x2c>
 8009976:	4b0a      	ldr	r3, [pc, #40]	@ (80099a0 <ai_array_to_buffer_fmt+0xd4>)
 8009978:	4003      	ands	r3, r0
 800997a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800997e:	e7bb      	b.n	80098f8 <ai_array_to_buffer_fmt+0x2c>
 8009980:	00840040 	.word	0x00840040
 8009984:	00040840 	.word	0x00040840
 8009988:	00041040 	.word	0x00041040
 800998c:	00040447 	.word	0x00040447
 8009990:	00840840 	.word	0x00840840
 8009994:	00841040 	.word	0x00841040
 8009998:	0084084f 	.word	0x0084084f
 800999c:	0004084f 	.word	0x0004084f
 80099a0:	00803fff 	.word	0x00803fff

080099a4 <ai_array_get_byte_size>:
 80099a4:	b319      	cbz	r1, 80099ee <ai_array_get_byte_size+0x4a>
 80099a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80099aa:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80099ae:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80099b2:	11c0      	asrs	r0, r0, #7
 80099b4:	fb03 f101 	mul.w	r1, r3, r1
 80099b8:	2a04      	cmp	r2, #4
 80099ba:	f101 0107 	add.w	r1, r1, #7
 80099be:	f021 0107 	bic.w	r1, r1, #7
 80099c2:	fa21 f10c 	lsr.w	r1, r1, ip
 80099c6:	d00b      	beq.n	80099e0 <ai_array_get_byte_size+0x3c>
 80099c8:	2a08      	cmp	r2, #8
 80099ca:	d002      	beq.n	80099d2 <ai_array_get_byte_size+0x2e>
 80099cc:	3107      	adds	r1, #7
 80099ce:	08c8      	lsrs	r0, r1, #3
 80099d0:	4770      	bx	lr
 80099d2:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80099d6:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80099da:	3107      	adds	r1, #7
 80099dc:	08c8      	lsrs	r0, r1, #3
 80099de:	4770      	bx	lr
 80099e0:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80099e4:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80099e8:	3107      	adds	r1, #7
 80099ea:	08c8      	lsrs	r0, r1, #3
 80099ec:	4770      	bx	lr
 80099ee:	4608      	mov	r0, r1
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop

080099f4 <ai_array_get_data_byte_size>:
 80099f4:	b161      	cbz	r1, 8009a10 <ai_array_get_data_byte_size+0x1c>
 80099f6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80099fa:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80099fe:	fb03 f101 	mul.w	r1, r3, r1
 8009a02:	1dc8      	adds	r0, r1, #7
 8009a04:	f020 0007 	bic.w	r0, r0, #7
 8009a08:	40d0      	lsrs	r0, r2
 8009a0a:	3007      	adds	r0, #7
 8009a0c:	08c0      	lsrs	r0, r0, #3
 8009a0e:	4770      	bx	lr
 8009a10:	4608      	mov	r0, r1
 8009a12:	4770      	bx	lr

08009a14 <ai_version_get>:
 8009a14:	0212      	lsls	r2, r2, #8
 8009a16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009a1a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8009a1e:	4770      	bx	lr

08009a20 <get_tensor_byte_size>:
 8009a20:	b430      	push	{r4, r5}
 8009a22:	6985      	ldr	r5, [r0, #24]
 8009a24:	68c4      	ldr	r4, [r0, #12]
 8009a26:	6941      	ldr	r1, [r0, #20]
 8009a28:	4b06      	ldr	r3, [pc, #24]	@ (8009a44 <get_tensor_byte_size+0x24>)
 8009a2a:	6828      	ldr	r0, [r5, #0]
 8009a2c:	4a06      	ldr	r2, [pc, #24]	@ (8009a48 <get_tensor_byte_size+0x28>)
 8009a2e:	4003      	ands	r3, r0
 8009a30:	68c9      	ldr	r1, [r1, #12]
 8009a32:	68e0      	ldr	r0, [r4, #12]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	fb01 f000 	mul.w	r0, r1, r0
 8009a3a:	d101      	bne.n	8009a40 <get_tensor_byte_size+0x20>
 8009a3c:	3007      	adds	r0, #7
 8009a3e:	08c0      	lsrs	r0, r0, #3
 8009a40:	bc30      	pop	{r4, r5}
 8009a42:	4770      	bx	lr
 8009a44:	017fffff 	.word	0x017fffff
 8009a48:	000400c0 	.word	0x000400c0

08009a4c <__cvt>:
 8009a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	ec57 6b10 	vmov	r6, r7, d0
 8009a54:	2f00      	cmp	r7, #0
 8009a56:	460c      	mov	r4, r1
 8009a58:	4619      	mov	r1, r3
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	bfbb      	ittet	lt
 8009a5e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009a62:	461f      	movlt	r7, r3
 8009a64:	2300      	movge	r3, #0
 8009a66:	232d      	movlt	r3, #45	@ 0x2d
 8009a68:	700b      	strb	r3, [r1, #0]
 8009a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a6c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009a70:	4691      	mov	r9, r2
 8009a72:	f023 0820 	bic.w	r8, r3, #32
 8009a76:	bfbc      	itt	lt
 8009a78:	4632      	movlt	r2, r6
 8009a7a:	4616      	movlt	r6, r2
 8009a7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a80:	d005      	beq.n	8009a8e <__cvt+0x42>
 8009a82:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009a86:	d100      	bne.n	8009a8a <__cvt+0x3e>
 8009a88:	3401      	adds	r4, #1
 8009a8a:	2102      	movs	r1, #2
 8009a8c:	e000      	b.n	8009a90 <__cvt+0x44>
 8009a8e:	2103      	movs	r1, #3
 8009a90:	ab03      	add	r3, sp, #12
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	ab02      	add	r3, sp, #8
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	ec47 6b10 	vmov	d0, r6, r7
 8009a9c:	4653      	mov	r3, sl
 8009a9e:	4622      	mov	r2, r4
 8009aa0:	f000 fef6 	bl	800a890 <_dtoa_r>
 8009aa4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	d119      	bne.n	8009ae0 <__cvt+0x94>
 8009aac:	f019 0f01 	tst.w	r9, #1
 8009ab0:	d00e      	beq.n	8009ad0 <__cvt+0x84>
 8009ab2:	eb00 0904 	add.w	r9, r0, r4
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f7 f88b 	bl	8000bd8 <__aeabi_dcmpeq>
 8009ac2:	b108      	cbz	r0, 8009ac8 <__cvt+0x7c>
 8009ac4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ac8:	2230      	movs	r2, #48	@ 0x30
 8009aca:	9b03      	ldr	r3, [sp, #12]
 8009acc:	454b      	cmp	r3, r9
 8009ace:	d31e      	bcc.n	8009b0e <__cvt+0xc2>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ad4:	1b5b      	subs	r3, r3, r5
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	b004      	add	sp, #16
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ae4:	eb00 0904 	add.w	r9, r0, r4
 8009ae8:	d1e5      	bne.n	8009ab6 <__cvt+0x6a>
 8009aea:	7803      	ldrb	r3, [r0, #0]
 8009aec:	2b30      	cmp	r3, #48	@ 0x30
 8009aee:	d10a      	bne.n	8009b06 <__cvt+0xba>
 8009af0:	2200      	movs	r2, #0
 8009af2:	2300      	movs	r3, #0
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f7 f86e 	bl	8000bd8 <__aeabi_dcmpeq>
 8009afc:	b918      	cbnz	r0, 8009b06 <__cvt+0xba>
 8009afe:	f1c4 0401 	rsb	r4, r4, #1
 8009b02:	f8ca 4000 	str.w	r4, [sl]
 8009b06:	f8da 3000 	ldr.w	r3, [sl]
 8009b0a:	4499      	add	r9, r3
 8009b0c:	e7d3      	b.n	8009ab6 <__cvt+0x6a>
 8009b0e:	1c59      	adds	r1, r3, #1
 8009b10:	9103      	str	r1, [sp, #12]
 8009b12:	701a      	strb	r2, [r3, #0]
 8009b14:	e7d9      	b.n	8009aca <__cvt+0x7e>

08009b16 <__exponent>:
 8009b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	bfba      	itte	lt
 8009b1c:	4249      	neglt	r1, r1
 8009b1e:	232d      	movlt	r3, #45	@ 0x2d
 8009b20:	232b      	movge	r3, #43	@ 0x2b
 8009b22:	2909      	cmp	r1, #9
 8009b24:	7002      	strb	r2, [r0, #0]
 8009b26:	7043      	strb	r3, [r0, #1]
 8009b28:	dd29      	ble.n	8009b7e <__exponent+0x68>
 8009b2a:	f10d 0307 	add.w	r3, sp, #7
 8009b2e:	461d      	mov	r5, r3
 8009b30:	270a      	movs	r7, #10
 8009b32:	461a      	mov	r2, r3
 8009b34:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b38:	fb07 1416 	mls	r4, r7, r6, r1
 8009b3c:	3430      	adds	r4, #48	@ 0x30
 8009b3e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b42:	460c      	mov	r4, r1
 8009b44:	2c63      	cmp	r4, #99	@ 0x63
 8009b46:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	dcf1      	bgt.n	8009b32 <__exponent+0x1c>
 8009b4e:	3130      	adds	r1, #48	@ 0x30
 8009b50:	1e94      	subs	r4, r2, #2
 8009b52:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b56:	1c41      	adds	r1, r0, #1
 8009b58:	4623      	mov	r3, r4
 8009b5a:	42ab      	cmp	r3, r5
 8009b5c:	d30a      	bcc.n	8009b74 <__exponent+0x5e>
 8009b5e:	f10d 0309 	add.w	r3, sp, #9
 8009b62:	1a9b      	subs	r3, r3, r2
 8009b64:	42ac      	cmp	r4, r5
 8009b66:	bf88      	it	hi
 8009b68:	2300      	movhi	r3, #0
 8009b6a:	3302      	adds	r3, #2
 8009b6c:	4403      	add	r3, r0
 8009b6e:	1a18      	subs	r0, r3, r0
 8009b70:	b003      	add	sp, #12
 8009b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b74:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009b78:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009b7c:	e7ed      	b.n	8009b5a <__exponent+0x44>
 8009b7e:	2330      	movs	r3, #48	@ 0x30
 8009b80:	3130      	adds	r1, #48	@ 0x30
 8009b82:	7083      	strb	r3, [r0, #2]
 8009b84:	70c1      	strb	r1, [r0, #3]
 8009b86:	1d03      	adds	r3, r0, #4
 8009b88:	e7f1      	b.n	8009b6e <__exponent+0x58>
	...

08009b8c <_printf_float>:
 8009b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	b08d      	sub	sp, #52	@ 0x34
 8009b92:	460c      	mov	r4, r1
 8009b94:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009b98:	4616      	mov	r6, r2
 8009b9a:	461f      	mov	r7, r3
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	f000 fd9d 	bl	800a6dc <_localeconv_r>
 8009ba2:	6803      	ldr	r3, [r0, #0]
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7f6 fbea 	bl	8000380 <strlen>
 8009bac:	2300      	movs	r3, #0
 8009bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb4:	9005      	str	r0, [sp, #20]
 8009bb6:	3307      	adds	r3, #7
 8009bb8:	f023 0307 	bic.w	r3, r3, #7
 8009bbc:	f103 0208 	add.w	r2, r3, #8
 8009bc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009bc4:	f8d4 b000 	ldr.w	fp, [r4]
 8009bc8:	f8c8 2000 	str.w	r2, [r8]
 8009bcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009bd0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009bd4:	9307      	str	r3, [sp, #28]
 8009bd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bda:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009be2:	4b9c      	ldr	r3, [pc, #624]	@ (8009e54 <_printf_float+0x2c8>)
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009be8:	f7f7 f828 	bl	8000c3c <__aeabi_dcmpun>
 8009bec:	bb70      	cbnz	r0, 8009c4c <_printf_float+0xc0>
 8009bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bf2:	4b98      	ldr	r3, [pc, #608]	@ (8009e54 <_printf_float+0x2c8>)
 8009bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bf8:	f7f7 f802 	bl	8000c00 <__aeabi_dcmple>
 8009bfc:	bb30      	cbnz	r0, 8009c4c <_printf_float+0xc0>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2300      	movs	r3, #0
 8009c02:	4640      	mov	r0, r8
 8009c04:	4649      	mov	r1, r9
 8009c06:	f7f6 fff1 	bl	8000bec <__aeabi_dcmplt>
 8009c0a:	b110      	cbz	r0, 8009c12 <_printf_float+0x86>
 8009c0c:	232d      	movs	r3, #45	@ 0x2d
 8009c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c12:	4a91      	ldr	r2, [pc, #580]	@ (8009e58 <_printf_float+0x2cc>)
 8009c14:	4b91      	ldr	r3, [pc, #580]	@ (8009e5c <_printf_float+0x2d0>)
 8009c16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c1a:	bf94      	ite	ls
 8009c1c:	4690      	movls	r8, r2
 8009c1e:	4698      	movhi	r8, r3
 8009c20:	2303      	movs	r3, #3
 8009c22:	6123      	str	r3, [r4, #16]
 8009c24:	f02b 0304 	bic.w	r3, fp, #4
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	f04f 0900 	mov.w	r9, #0
 8009c2e:	9700      	str	r7, [sp, #0]
 8009c30:	4633      	mov	r3, r6
 8009c32:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009c34:	4621      	mov	r1, r4
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 fa7c 	bl	800a134 <_printf_common>
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	f040 808d 	bne.w	8009d5c <_printf_float+0x1d0>
 8009c42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c46:	b00d      	add	sp, #52	@ 0x34
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	464b      	mov	r3, r9
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7f6 fff2 	bl	8000c3c <__aeabi_dcmpun>
 8009c58:	b140      	cbz	r0, 8009c6c <_printf_float+0xe0>
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbc      	itt	lt
 8009c60:	232d      	movlt	r3, #45	@ 0x2d
 8009c62:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009c66:	4a7e      	ldr	r2, [pc, #504]	@ (8009e60 <_printf_float+0x2d4>)
 8009c68:	4b7e      	ldr	r3, [pc, #504]	@ (8009e64 <_printf_float+0x2d8>)
 8009c6a:	e7d4      	b.n	8009c16 <_printf_float+0x8a>
 8009c6c:	6863      	ldr	r3, [r4, #4]
 8009c6e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009c72:	9206      	str	r2, [sp, #24]
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	d13b      	bne.n	8009cf0 <_printf_float+0x164>
 8009c78:	2306      	movs	r3, #6
 8009c7a:	6063      	str	r3, [r4, #4]
 8009c7c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009c80:	2300      	movs	r3, #0
 8009c82:	6022      	str	r2, [r4, #0]
 8009c84:	9303      	str	r3, [sp, #12]
 8009c86:	ab0a      	add	r3, sp, #40	@ 0x28
 8009c88:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009c8c:	ab09      	add	r3, sp, #36	@ 0x24
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	6861      	ldr	r1, [r4, #4]
 8009c92:	ec49 8b10 	vmov	d0, r8, r9
 8009c96:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff fed6 	bl	8009a4c <__cvt>
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ca4:	2b47      	cmp	r3, #71	@ 0x47
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	d129      	bne.n	8009cfe <_printf_float+0x172>
 8009caa:	1cc8      	adds	r0, r1, #3
 8009cac:	db02      	blt.n	8009cb4 <_printf_float+0x128>
 8009cae:	6863      	ldr	r3, [r4, #4]
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	dd41      	ble.n	8009d38 <_printf_float+0x1ac>
 8009cb4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cb8:	fa5f fa8a 	uxtb.w	sl, sl
 8009cbc:	3901      	subs	r1, #1
 8009cbe:	4652      	mov	r2, sl
 8009cc0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009cc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009cc6:	f7ff ff26 	bl	8009b16 <__exponent>
 8009cca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ccc:	1813      	adds	r3, r2, r0
 8009cce:	2a01      	cmp	r2, #1
 8009cd0:	4681      	mov	r9, r0
 8009cd2:	6123      	str	r3, [r4, #16]
 8009cd4:	dc02      	bgt.n	8009cdc <_printf_float+0x150>
 8009cd6:	6822      	ldr	r2, [r4, #0]
 8009cd8:	07d2      	lsls	r2, r2, #31
 8009cda:	d501      	bpl.n	8009ce0 <_printf_float+0x154>
 8009cdc:	3301      	adds	r3, #1
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0a2      	beq.n	8009c2e <_printf_float+0xa2>
 8009ce8:	232d      	movs	r3, #45	@ 0x2d
 8009cea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cee:	e79e      	b.n	8009c2e <_printf_float+0xa2>
 8009cf0:	9a06      	ldr	r2, [sp, #24]
 8009cf2:	2a47      	cmp	r2, #71	@ 0x47
 8009cf4:	d1c2      	bne.n	8009c7c <_printf_float+0xf0>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1c0      	bne.n	8009c7c <_printf_float+0xf0>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e7bd      	b.n	8009c7a <_printf_float+0xee>
 8009cfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d02:	d9db      	bls.n	8009cbc <_printf_float+0x130>
 8009d04:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d08:	d118      	bne.n	8009d3c <_printf_float+0x1b0>
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	6863      	ldr	r3, [r4, #4]
 8009d0e:	dd0b      	ble.n	8009d28 <_printf_float+0x19c>
 8009d10:	6121      	str	r1, [r4, #16]
 8009d12:	b913      	cbnz	r3, 8009d1a <_printf_float+0x18e>
 8009d14:	6822      	ldr	r2, [r4, #0]
 8009d16:	07d0      	lsls	r0, r2, #31
 8009d18:	d502      	bpl.n	8009d20 <_printf_float+0x194>
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	440b      	add	r3, r1
 8009d1e:	6123      	str	r3, [r4, #16]
 8009d20:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d22:	f04f 0900 	mov.w	r9, #0
 8009d26:	e7db      	b.n	8009ce0 <_printf_float+0x154>
 8009d28:	b913      	cbnz	r3, 8009d30 <_printf_float+0x1a4>
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	07d2      	lsls	r2, r2, #31
 8009d2e:	d501      	bpl.n	8009d34 <_printf_float+0x1a8>
 8009d30:	3302      	adds	r3, #2
 8009d32:	e7f4      	b.n	8009d1e <_printf_float+0x192>
 8009d34:	2301      	movs	r3, #1
 8009d36:	e7f2      	b.n	8009d1e <_printf_float+0x192>
 8009d38:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d3e:	4299      	cmp	r1, r3
 8009d40:	db05      	blt.n	8009d4e <_printf_float+0x1c2>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	6121      	str	r1, [r4, #16]
 8009d46:	07d8      	lsls	r0, r3, #31
 8009d48:	d5ea      	bpl.n	8009d20 <_printf_float+0x194>
 8009d4a:	1c4b      	adds	r3, r1, #1
 8009d4c:	e7e7      	b.n	8009d1e <_printf_float+0x192>
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	bfd4      	ite	le
 8009d52:	f1c1 0202 	rsble	r2, r1, #2
 8009d56:	2201      	movgt	r2, #1
 8009d58:	4413      	add	r3, r2
 8009d5a:	e7e0      	b.n	8009d1e <_printf_float+0x192>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	055a      	lsls	r2, r3, #21
 8009d60:	d407      	bmi.n	8009d72 <_printf_float+0x1e6>
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	4642      	mov	r2, r8
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d12b      	bne.n	8009dc8 <_printf_float+0x23c>
 8009d70:	e767      	b.n	8009c42 <_printf_float+0xb6>
 8009d72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d76:	f240 80dd 	bls.w	8009f34 <_printf_float+0x3a8>
 8009d7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2300      	movs	r3, #0
 8009d82:	f7f6 ff29 	bl	8000bd8 <__aeabi_dcmpeq>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	d033      	beq.n	8009df2 <_printf_float+0x266>
 8009d8a:	4a37      	ldr	r2, [pc, #220]	@ (8009e68 <_printf_float+0x2dc>)
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b8      	blx	r7
 8009d94:	3001      	adds	r0, #1
 8009d96:	f43f af54 	beq.w	8009c42 <_printf_float+0xb6>
 8009d9a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009d9e:	4543      	cmp	r3, r8
 8009da0:	db02      	blt.n	8009da8 <_printf_float+0x21c>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	07d8      	lsls	r0, r3, #31
 8009da6:	d50f      	bpl.n	8009dc8 <_printf_float+0x23c>
 8009da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dac:	4631      	mov	r1, r6
 8009dae:	4628      	mov	r0, r5
 8009db0:	47b8      	blx	r7
 8009db2:	3001      	adds	r0, #1
 8009db4:	f43f af45 	beq.w	8009c42 <_printf_float+0xb6>
 8009db8:	f04f 0900 	mov.w	r9, #0
 8009dbc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009dc0:	f104 0a1a 	add.w	sl, r4, #26
 8009dc4:	45c8      	cmp	r8, r9
 8009dc6:	dc09      	bgt.n	8009ddc <_printf_float+0x250>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	079b      	lsls	r3, r3, #30
 8009dcc:	f100 8103 	bmi.w	8009fd6 <_printf_float+0x44a>
 8009dd0:	68e0      	ldr	r0, [r4, #12]
 8009dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd4:	4298      	cmp	r0, r3
 8009dd6:	bfb8      	it	lt
 8009dd8:	4618      	movlt	r0, r3
 8009dda:	e734      	b.n	8009c46 <_printf_float+0xba>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4652      	mov	r2, sl
 8009de0:	4631      	mov	r1, r6
 8009de2:	4628      	mov	r0, r5
 8009de4:	47b8      	blx	r7
 8009de6:	3001      	adds	r0, #1
 8009de8:	f43f af2b 	beq.w	8009c42 <_printf_float+0xb6>
 8009dec:	f109 0901 	add.w	r9, r9, #1
 8009df0:	e7e8      	b.n	8009dc4 <_printf_float+0x238>
 8009df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dc39      	bgt.n	8009e6c <_printf_float+0x2e0>
 8009df8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e68 <_printf_float+0x2dc>)
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4628      	mov	r0, r5
 8009e00:	47b8      	blx	r7
 8009e02:	3001      	adds	r0, #1
 8009e04:	f43f af1d 	beq.w	8009c42 <_printf_float+0xb6>
 8009e08:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009e0c:	ea59 0303 	orrs.w	r3, r9, r3
 8009e10:	d102      	bne.n	8009e18 <_printf_float+0x28c>
 8009e12:	6823      	ldr	r3, [r4, #0]
 8009e14:	07d9      	lsls	r1, r3, #31
 8009e16:	d5d7      	bpl.n	8009dc8 <_printf_float+0x23c>
 8009e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e1c:	4631      	mov	r1, r6
 8009e1e:	4628      	mov	r0, r5
 8009e20:	47b8      	blx	r7
 8009e22:	3001      	adds	r0, #1
 8009e24:	f43f af0d 	beq.w	8009c42 <_printf_float+0xb6>
 8009e28:	f04f 0a00 	mov.w	sl, #0
 8009e2c:	f104 0b1a 	add.w	fp, r4, #26
 8009e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e32:	425b      	negs	r3, r3
 8009e34:	4553      	cmp	r3, sl
 8009e36:	dc01      	bgt.n	8009e3c <_printf_float+0x2b0>
 8009e38:	464b      	mov	r3, r9
 8009e3a:	e793      	b.n	8009d64 <_printf_float+0x1d8>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	465a      	mov	r2, fp
 8009e40:	4631      	mov	r1, r6
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b8      	blx	r7
 8009e46:	3001      	adds	r0, #1
 8009e48:	f43f aefb 	beq.w	8009c42 <_printf_float+0xb6>
 8009e4c:	f10a 0a01 	add.w	sl, sl, #1
 8009e50:	e7ee      	b.n	8009e30 <_printf_float+0x2a4>
 8009e52:	bf00      	nop
 8009e54:	7fefffff 	.word	0x7fefffff
 8009e58:	0803aa48 	.word	0x0803aa48
 8009e5c:	0803aa4c 	.word	0x0803aa4c
 8009e60:	0803aa50 	.word	0x0803aa50
 8009e64:	0803aa54 	.word	0x0803aa54
 8009e68:	0803aa58 	.word	0x0803aa58
 8009e6c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e6e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e72:	4553      	cmp	r3, sl
 8009e74:	bfa8      	it	ge
 8009e76:	4653      	movge	r3, sl
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	4699      	mov	r9, r3
 8009e7c:	dc36      	bgt.n	8009eec <_printf_float+0x360>
 8009e7e:	f04f 0b00 	mov.w	fp, #0
 8009e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e86:	f104 021a 	add.w	r2, r4, #26
 8009e8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009e8c:	9306      	str	r3, [sp, #24]
 8009e8e:	eba3 0309 	sub.w	r3, r3, r9
 8009e92:	455b      	cmp	r3, fp
 8009e94:	dc31      	bgt.n	8009efa <_printf_float+0x36e>
 8009e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e98:	459a      	cmp	sl, r3
 8009e9a:	dc3a      	bgt.n	8009f12 <_printf_float+0x386>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	07da      	lsls	r2, r3, #31
 8009ea0:	d437      	bmi.n	8009f12 <_printf_float+0x386>
 8009ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea4:	ebaa 0903 	sub.w	r9, sl, r3
 8009ea8:	9b06      	ldr	r3, [sp, #24]
 8009eaa:	ebaa 0303 	sub.w	r3, sl, r3
 8009eae:	4599      	cmp	r9, r3
 8009eb0:	bfa8      	it	ge
 8009eb2:	4699      	movge	r9, r3
 8009eb4:	f1b9 0f00 	cmp.w	r9, #0
 8009eb8:	dc33      	bgt.n	8009f22 <_printf_float+0x396>
 8009eba:	f04f 0800 	mov.w	r8, #0
 8009ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ec2:	f104 0b1a 	add.w	fp, r4, #26
 8009ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec8:	ebaa 0303 	sub.w	r3, sl, r3
 8009ecc:	eba3 0309 	sub.w	r3, r3, r9
 8009ed0:	4543      	cmp	r3, r8
 8009ed2:	f77f af79 	ble.w	8009dc8 <_printf_float+0x23c>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	465a      	mov	r2, fp
 8009eda:	4631      	mov	r1, r6
 8009edc:	4628      	mov	r0, r5
 8009ede:	47b8      	blx	r7
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	f43f aeae 	beq.w	8009c42 <_printf_float+0xb6>
 8009ee6:	f108 0801 	add.w	r8, r8, #1
 8009eea:	e7ec      	b.n	8009ec6 <_printf_float+0x33a>
 8009eec:	4642      	mov	r2, r8
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d1c2      	bne.n	8009e7e <_printf_float+0x2f2>
 8009ef8:	e6a3      	b.n	8009c42 <_printf_float+0xb6>
 8009efa:	2301      	movs	r3, #1
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	9206      	str	r2, [sp, #24]
 8009f02:	47b8      	blx	r7
 8009f04:	3001      	adds	r0, #1
 8009f06:	f43f ae9c 	beq.w	8009c42 <_printf_float+0xb6>
 8009f0a:	9a06      	ldr	r2, [sp, #24]
 8009f0c:	f10b 0b01 	add.w	fp, fp, #1
 8009f10:	e7bb      	b.n	8009e8a <_printf_float+0x2fe>
 8009f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f16:	4631      	mov	r1, r6
 8009f18:	4628      	mov	r0, r5
 8009f1a:	47b8      	blx	r7
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d1c0      	bne.n	8009ea2 <_printf_float+0x316>
 8009f20:	e68f      	b.n	8009c42 <_printf_float+0xb6>
 8009f22:	9a06      	ldr	r2, [sp, #24]
 8009f24:	464b      	mov	r3, r9
 8009f26:	4442      	add	r2, r8
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d1c3      	bne.n	8009eba <_printf_float+0x32e>
 8009f32:	e686      	b.n	8009c42 <_printf_float+0xb6>
 8009f34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f38:	f1ba 0f01 	cmp.w	sl, #1
 8009f3c:	dc01      	bgt.n	8009f42 <_printf_float+0x3b6>
 8009f3e:	07db      	lsls	r3, r3, #31
 8009f40:	d536      	bpl.n	8009fb0 <_printf_float+0x424>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4642      	mov	r2, r8
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f43f ae78 	beq.w	8009c42 <_printf_float+0xb6>
 8009f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b8      	blx	r7
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	f43f ae70 	beq.w	8009c42 <_printf_float+0xb6>
 8009f62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f66:	2200      	movs	r2, #0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009f6e:	f7f6 fe33 	bl	8000bd8 <__aeabi_dcmpeq>
 8009f72:	b9c0      	cbnz	r0, 8009fa6 <_printf_float+0x41a>
 8009f74:	4653      	mov	r3, sl
 8009f76:	f108 0201 	add.w	r2, r8, #1
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b8      	blx	r7
 8009f80:	3001      	adds	r0, #1
 8009f82:	d10c      	bne.n	8009f9e <_printf_float+0x412>
 8009f84:	e65d      	b.n	8009c42 <_printf_float+0xb6>
 8009f86:	2301      	movs	r3, #1
 8009f88:	465a      	mov	r2, fp
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b8      	blx	r7
 8009f90:	3001      	adds	r0, #1
 8009f92:	f43f ae56 	beq.w	8009c42 <_printf_float+0xb6>
 8009f96:	f108 0801 	add.w	r8, r8, #1
 8009f9a:	45d0      	cmp	r8, sl
 8009f9c:	dbf3      	blt.n	8009f86 <_printf_float+0x3fa>
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009fa4:	e6df      	b.n	8009d66 <_printf_float+0x1da>
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	f104 0b1a 	add.w	fp, r4, #26
 8009fae:	e7f4      	b.n	8009f9a <_printf_float+0x40e>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4642      	mov	r2, r8
 8009fb4:	e7e1      	b.n	8009f7a <_printf_float+0x3ee>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	464a      	mov	r2, r9
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f43f ae3e 	beq.w	8009c42 <_printf_float+0xb6>
 8009fc6:	f108 0801 	add.w	r8, r8, #1
 8009fca:	68e3      	ldr	r3, [r4, #12]
 8009fcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009fce:	1a5b      	subs	r3, r3, r1
 8009fd0:	4543      	cmp	r3, r8
 8009fd2:	dcf0      	bgt.n	8009fb6 <_printf_float+0x42a>
 8009fd4:	e6fc      	b.n	8009dd0 <_printf_float+0x244>
 8009fd6:	f04f 0800 	mov.w	r8, #0
 8009fda:	f104 0919 	add.w	r9, r4, #25
 8009fde:	e7f4      	b.n	8009fca <_printf_float+0x43e>

08009fe0 <malloc>:
 8009fe0:	4b02      	ldr	r3, [pc, #8]	@ (8009fec <malloc+0xc>)
 8009fe2:	4601      	mov	r1, r0
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	f000 b825 	b.w	800a034 <_malloc_r>
 8009fea:	bf00      	nop
 8009fec:	20000b34 	.word	0x20000b34

08009ff0 <sbrk_aligned>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	4e0f      	ldr	r6, [pc, #60]	@ (800a030 <sbrk_aligned+0x40>)
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	6831      	ldr	r1, [r6, #0]
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	b911      	cbnz	r1, 800a002 <sbrk_aligned+0x12>
 8009ffc:	f000 fb72 	bl	800a6e4 <_sbrk_r>
 800a000:	6030      	str	r0, [r6, #0]
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	f000 fb6d 	bl	800a6e4 <_sbrk_r>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	d103      	bne.n	800a016 <sbrk_aligned+0x26>
 800a00e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a012:	4620      	mov	r0, r4
 800a014:	bd70      	pop	{r4, r5, r6, pc}
 800a016:	1cc4      	adds	r4, r0, #3
 800a018:	f024 0403 	bic.w	r4, r4, #3
 800a01c:	42a0      	cmp	r0, r4
 800a01e:	d0f8      	beq.n	800a012 <sbrk_aligned+0x22>
 800a020:	1a21      	subs	r1, r4, r0
 800a022:	4628      	mov	r0, r5
 800a024:	f000 fb5e 	bl	800a6e4 <_sbrk_r>
 800a028:	3001      	adds	r0, #1
 800a02a:	d1f2      	bne.n	800a012 <sbrk_aligned+0x22>
 800a02c:	e7ef      	b.n	800a00e <sbrk_aligned+0x1e>
 800a02e:	bf00      	nop
 800a030:	20021558 	.word	0x20021558

0800a034 <_malloc_r>:
 800a034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a038:	1ccd      	adds	r5, r1, #3
 800a03a:	f025 0503 	bic.w	r5, r5, #3
 800a03e:	3508      	adds	r5, #8
 800a040:	2d0c      	cmp	r5, #12
 800a042:	bf38      	it	cc
 800a044:	250c      	movcc	r5, #12
 800a046:	2d00      	cmp	r5, #0
 800a048:	4606      	mov	r6, r0
 800a04a:	db01      	blt.n	800a050 <_malloc_r+0x1c>
 800a04c:	42a9      	cmp	r1, r5
 800a04e:	d904      	bls.n	800a05a <_malloc_r+0x26>
 800a050:	230c      	movs	r3, #12
 800a052:	6033      	str	r3, [r6, #0]
 800a054:	2000      	movs	r0, #0
 800a056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a05a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a130 <_malloc_r+0xfc>
 800a05e:	f000 f9f7 	bl	800a450 <__malloc_lock>
 800a062:	f8d8 3000 	ldr.w	r3, [r8]
 800a066:	461c      	mov	r4, r3
 800a068:	bb44      	cbnz	r4, 800a0bc <_malloc_r+0x88>
 800a06a:	4629      	mov	r1, r5
 800a06c:	4630      	mov	r0, r6
 800a06e:	f7ff ffbf 	bl	8009ff0 <sbrk_aligned>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	4604      	mov	r4, r0
 800a076:	d158      	bne.n	800a12a <_malloc_r+0xf6>
 800a078:	f8d8 4000 	ldr.w	r4, [r8]
 800a07c:	4627      	mov	r7, r4
 800a07e:	2f00      	cmp	r7, #0
 800a080:	d143      	bne.n	800a10a <_malloc_r+0xd6>
 800a082:	2c00      	cmp	r4, #0
 800a084:	d04b      	beq.n	800a11e <_malloc_r+0xea>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	4639      	mov	r1, r7
 800a08a:	4630      	mov	r0, r6
 800a08c:	eb04 0903 	add.w	r9, r4, r3
 800a090:	f000 fb28 	bl	800a6e4 <_sbrk_r>
 800a094:	4581      	cmp	r9, r0
 800a096:	d142      	bne.n	800a11e <_malloc_r+0xea>
 800a098:	6821      	ldr	r1, [r4, #0]
 800a09a:	1a6d      	subs	r5, r5, r1
 800a09c:	4629      	mov	r1, r5
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f7ff ffa6 	bl	8009ff0 <sbrk_aligned>
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d03a      	beq.n	800a11e <_malloc_r+0xea>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	442b      	add	r3, r5
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	f8d8 3000 	ldr.w	r3, [r8]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	bb62      	cbnz	r2, 800a110 <_malloc_r+0xdc>
 800a0b6:	f8c8 7000 	str.w	r7, [r8]
 800a0ba:	e00f      	b.n	800a0dc <_malloc_r+0xa8>
 800a0bc:	6822      	ldr	r2, [r4, #0]
 800a0be:	1b52      	subs	r2, r2, r5
 800a0c0:	d420      	bmi.n	800a104 <_malloc_r+0xd0>
 800a0c2:	2a0b      	cmp	r2, #11
 800a0c4:	d917      	bls.n	800a0f6 <_malloc_r+0xc2>
 800a0c6:	1961      	adds	r1, r4, r5
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	6025      	str	r5, [r4, #0]
 800a0cc:	bf18      	it	ne
 800a0ce:	6059      	strne	r1, [r3, #4]
 800a0d0:	6863      	ldr	r3, [r4, #4]
 800a0d2:	bf08      	it	eq
 800a0d4:	f8c8 1000 	streq.w	r1, [r8]
 800a0d8:	5162      	str	r2, [r4, r5]
 800a0da:	604b      	str	r3, [r1, #4]
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f000 f9bd 	bl	800a45c <__malloc_unlock>
 800a0e2:	f104 000b 	add.w	r0, r4, #11
 800a0e6:	1d23      	adds	r3, r4, #4
 800a0e8:	f020 0007 	bic.w	r0, r0, #7
 800a0ec:	1ac2      	subs	r2, r0, r3
 800a0ee:	bf1c      	itt	ne
 800a0f0:	1a1b      	subne	r3, r3, r0
 800a0f2:	50a3      	strne	r3, [r4, r2]
 800a0f4:	e7af      	b.n	800a056 <_malloc_r+0x22>
 800a0f6:	6862      	ldr	r2, [r4, #4]
 800a0f8:	42a3      	cmp	r3, r4
 800a0fa:	bf0c      	ite	eq
 800a0fc:	f8c8 2000 	streq.w	r2, [r8]
 800a100:	605a      	strne	r2, [r3, #4]
 800a102:	e7eb      	b.n	800a0dc <_malloc_r+0xa8>
 800a104:	4623      	mov	r3, r4
 800a106:	6864      	ldr	r4, [r4, #4]
 800a108:	e7ae      	b.n	800a068 <_malloc_r+0x34>
 800a10a:	463c      	mov	r4, r7
 800a10c:	687f      	ldr	r7, [r7, #4]
 800a10e:	e7b6      	b.n	800a07e <_malloc_r+0x4a>
 800a110:	461a      	mov	r2, r3
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	42a3      	cmp	r3, r4
 800a116:	d1fb      	bne.n	800a110 <_malloc_r+0xdc>
 800a118:	2300      	movs	r3, #0
 800a11a:	6053      	str	r3, [r2, #4]
 800a11c:	e7de      	b.n	800a0dc <_malloc_r+0xa8>
 800a11e:	230c      	movs	r3, #12
 800a120:	6033      	str	r3, [r6, #0]
 800a122:	4630      	mov	r0, r6
 800a124:	f000 f99a 	bl	800a45c <__malloc_unlock>
 800a128:	e794      	b.n	800a054 <_malloc_r+0x20>
 800a12a:	6005      	str	r5, [r0, #0]
 800a12c:	e7d6      	b.n	800a0dc <_malloc_r+0xa8>
 800a12e:	bf00      	nop
 800a130:	2002155c 	.word	0x2002155c

0800a134 <_printf_common>:
 800a134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a138:	4616      	mov	r6, r2
 800a13a:	4698      	mov	r8, r3
 800a13c:	688a      	ldr	r2, [r1, #8]
 800a13e:	690b      	ldr	r3, [r1, #16]
 800a140:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a144:	4293      	cmp	r3, r2
 800a146:	bfb8      	it	lt
 800a148:	4613      	movlt	r3, r2
 800a14a:	6033      	str	r3, [r6, #0]
 800a14c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a150:	4607      	mov	r7, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b10a      	cbz	r2, 800a15a <_printf_common+0x26>
 800a156:	3301      	adds	r3, #1
 800a158:	6033      	str	r3, [r6, #0]
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	0699      	lsls	r1, r3, #26
 800a15e:	bf42      	ittt	mi
 800a160:	6833      	ldrmi	r3, [r6, #0]
 800a162:	3302      	addmi	r3, #2
 800a164:	6033      	strmi	r3, [r6, #0]
 800a166:	6825      	ldr	r5, [r4, #0]
 800a168:	f015 0506 	ands.w	r5, r5, #6
 800a16c:	d106      	bne.n	800a17c <_printf_common+0x48>
 800a16e:	f104 0a19 	add.w	sl, r4, #25
 800a172:	68e3      	ldr	r3, [r4, #12]
 800a174:	6832      	ldr	r2, [r6, #0]
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	42ab      	cmp	r3, r5
 800a17a:	dc26      	bgt.n	800a1ca <_printf_common+0x96>
 800a17c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a180:	6822      	ldr	r2, [r4, #0]
 800a182:	3b00      	subs	r3, #0
 800a184:	bf18      	it	ne
 800a186:	2301      	movne	r3, #1
 800a188:	0692      	lsls	r2, r2, #26
 800a18a:	d42b      	bmi.n	800a1e4 <_printf_common+0xb0>
 800a18c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a190:	4641      	mov	r1, r8
 800a192:	4638      	mov	r0, r7
 800a194:	47c8      	blx	r9
 800a196:	3001      	adds	r0, #1
 800a198:	d01e      	beq.n	800a1d8 <_printf_common+0xa4>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	6922      	ldr	r2, [r4, #16]
 800a19e:	f003 0306 	and.w	r3, r3, #6
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	bf02      	ittt	eq
 800a1a6:	68e5      	ldreq	r5, [r4, #12]
 800a1a8:	6833      	ldreq	r3, [r6, #0]
 800a1aa:	1aed      	subeq	r5, r5, r3
 800a1ac:	68a3      	ldr	r3, [r4, #8]
 800a1ae:	bf0c      	ite	eq
 800a1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1b4:	2500      	movne	r5, #0
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	bfc4      	itt	gt
 800a1ba:	1a9b      	subgt	r3, r3, r2
 800a1bc:	18ed      	addgt	r5, r5, r3
 800a1be:	2600      	movs	r6, #0
 800a1c0:	341a      	adds	r4, #26
 800a1c2:	42b5      	cmp	r5, r6
 800a1c4:	d11a      	bne.n	800a1fc <_printf_common+0xc8>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e008      	b.n	800a1dc <_printf_common+0xa8>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	4641      	mov	r1, r8
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	47c8      	blx	r9
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d103      	bne.n	800a1e0 <_printf_common+0xac>
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	e7c6      	b.n	800a172 <_printf_common+0x3e>
 800a1e4:	18e1      	adds	r1, r4, r3
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	2030      	movs	r0, #48	@ 0x30
 800a1ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1ee:	4422      	add	r2, r4
 800a1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a1f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a1f8:	3302      	adds	r3, #2
 800a1fa:	e7c7      	b.n	800a18c <_printf_common+0x58>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4622      	mov	r2, r4
 800a200:	4641      	mov	r1, r8
 800a202:	4638      	mov	r0, r7
 800a204:	47c8      	blx	r9
 800a206:	3001      	adds	r0, #1
 800a208:	d0e6      	beq.n	800a1d8 <_printf_common+0xa4>
 800a20a:	3601      	adds	r6, #1
 800a20c:	e7d9      	b.n	800a1c2 <_printf_common+0x8e>
	...

0800a210 <_printf_i>:
 800a210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a214:	7e0f      	ldrb	r7, [r1, #24]
 800a216:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a218:	2f78      	cmp	r7, #120	@ 0x78
 800a21a:	4691      	mov	r9, r2
 800a21c:	4680      	mov	r8, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	469a      	mov	sl, r3
 800a222:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a226:	d807      	bhi.n	800a238 <_printf_i+0x28>
 800a228:	2f62      	cmp	r7, #98	@ 0x62
 800a22a:	d80a      	bhi.n	800a242 <_printf_i+0x32>
 800a22c:	2f00      	cmp	r7, #0
 800a22e:	f000 80d2 	beq.w	800a3d6 <_printf_i+0x1c6>
 800a232:	2f58      	cmp	r7, #88	@ 0x58
 800a234:	f000 80b9 	beq.w	800a3aa <_printf_i+0x19a>
 800a238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a23c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a240:	e03a      	b.n	800a2b8 <_printf_i+0xa8>
 800a242:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a246:	2b15      	cmp	r3, #21
 800a248:	d8f6      	bhi.n	800a238 <_printf_i+0x28>
 800a24a:	a101      	add	r1, pc, #4	@ (adr r1, 800a250 <_printf_i+0x40>)
 800a24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a250:	0800a2a9 	.word	0x0800a2a9
 800a254:	0800a2bd 	.word	0x0800a2bd
 800a258:	0800a239 	.word	0x0800a239
 800a25c:	0800a239 	.word	0x0800a239
 800a260:	0800a239 	.word	0x0800a239
 800a264:	0800a239 	.word	0x0800a239
 800a268:	0800a2bd 	.word	0x0800a2bd
 800a26c:	0800a239 	.word	0x0800a239
 800a270:	0800a239 	.word	0x0800a239
 800a274:	0800a239 	.word	0x0800a239
 800a278:	0800a239 	.word	0x0800a239
 800a27c:	0800a3bd 	.word	0x0800a3bd
 800a280:	0800a2e7 	.word	0x0800a2e7
 800a284:	0800a377 	.word	0x0800a377
 800a288:	0800a239 	.word	0x0800a239
 800a28c:	0800a239 	.word	0x0800a239
 800a290:	0800a3df 	.word	0x0800a3df
 800a294:	0800a239 	.word	0x0800a239
 800a298:	0800a2e7 	.word	0x0800a2e7
 800a29c:	0800a239 	.word	0x0800a239
 800a2a0:	0800a239 	.word	0x0800a239
 800a2a4:	0800a37f 	.word	0x0800a37f
 800a2a8:	6833      	ldr	r3, [r6, #0]
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6032      	str	r2, [r6, #0]
 800a2b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e09d      	b.n	800a3f8 <_printf_i+0x1e8>
 800a2bc:	6833      	ldr	r3, [r6, #0]
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	1d19      	adds	r1, r3, #4
 800a2c2:	6031      	str	r1, [r6, #0]
 800a2c4:	0606      	lsls	r6, r0, #24
 800a2c6:	d501      	bpl.n	800a2cc <_printf_i+0xbc>
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	e003      	b.n	800a2d4 <_printf_i+0xc4>
 800a2cc:	0645      	lsls	r5, r0, #25
 800a2ce:	d5fb      	bpl.n	800a2c8 <_printf_i+0xb8>
 800a2d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2d4:	2d00      	cmp	r5, #0
 800a2d6:	da03      	bge.n	800a2e0 <_printf_i+0xd0>
 800a2d8:	232d      	movs	r3, #45	@ 0x2d
 800a2da:	426d      	negs	r5, r5
 800a2dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2e0:	4859      	ldr	r0, [pc, #356]	@ (800a448 <_printf_i+0x238>)
 800a2e2:	230a      	movs	r3, #10
 800a2e4:	e011      	b.n	800a30a <_printf_i+0xfa>
 800a2e6:	6821      	ldr	r1, [r4, #0]
 800a2e8:	6833      	ldr	r3, [r6, #0]
 800a2ea:	0608      	lsls	r0, r1, #24
 800a2ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2f0:	d402      	bmi.n	800a2f8 <_printf_i+0xe8>
 800a2f2:	0649      	lsls	r1, r1, #25
 800a2f4:	bf48      	it	mi
 800a2f6:	b2ad      	uxthmi	r5, r5
 800a2f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a2fa:	4853      	ldr	r0, [pc, #332]	@ (800a448 <_printf_i+0x238>)
 800a2fc:	6033      	str	r3, [r6, #0]
 800a2fe:	bf14      	ite	ne
 800a300:	230a      	movne	r3, #10
 800a302:	2308      	moveq	r3, #8
 800a304:	2100      	movs	r1, #0
 800a306:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a30a:	6866      	ldr	r6, [r4, #4]
 800a30c:	60a6      	str	r6, [r4, #8]
 800a30e:	2e00      	cmp	r6, #0
 800a310:	bfa2      	ittt	ge
 800a312:	6821      	ldrge	r1, [r4, #0]
 800a314:	f021 0104 	bicge.w	r1, r1, #4
 800a318:	6021      	strge	r1, [r4, #0]
 800a31a:	b90d      	cbnz	r5, 800a320 <_printf_i+0x110>
 800a31c:	2e00      	cmp	r6, #0
 800a31e:	d04b      	beq.n	800a3b8 <_printf_i+0x1a8>
 800a320:	4616      	mov	r6, r2
 800a322:	fbb5 f1f3 	udiv	r1, r5, r3
 800a326:	fb03 5711 	mls	r7, r3, r1, r5
 800a32a:	5dc7      	ldrb	r7, [r0, r7]
 800a32c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a330:	462f      	mov	r7, r5
 800a332:	42bb      	cmp	r3, r7
 800a334:	460d      	mov	r5, r1
 800a336:	d9f4      	bls.n	800a322 <_printf_i+0x112>
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d10b      	bne.n	800a354 <_printf_i+0x144>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	07df      	lsls	r7, r3, #31
 800a340:	d508      	bpl.n	800a354 <_printf_i+0x144>
 800a342:	6923      	ldr	r3, [r4, #16]
 800a344:	6861      	ldr	r1, [r4, #4]
 800a346:	4299      	cmp	r1, r3
 800a348:	bfde      	ittt	le
 800a34a:	2330      	movle	r3, #48	@ 0x30
 800a34c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a350:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a354:	1b92      	subs	r2, r2, r6
 800a356:	6122      	str	r2, [r4, #16]
 800a358:	f8cd a000 	str.w	sl, [sp]
 800a35c:	464b      	mov	r3, r9
 800a35e:	aa03      	add	r2, sp, #12
 800a360:	4621      	mov	r1, r4
 800a362:	4640      	mov	r0, r8
 800a364:	f7ff fee6 	bl	800a134 <_printf_common>
 800a368:	3001      	adds	r0, #1
 800a36a:	d14a      	bne.n	800a402 <_printf_i+0x1f2>
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a370:	b004      	add	sp, #16
 800a372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	f043 0320 	orr.w	r3, r3, #32
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	4833      	ldr	r0, [pc, #204]	@ (800a44c <_printf_i+0x23c>)
 800a380:	2778      	movs	r7, #120	@ 0x78
 800a382:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	6831      	ldr	r1, [r6, #0]
 800a38a:	061f      	lsls	r7, r3, #24
 800a38c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a390:	d402      	bmi.n	800a398 <_printf_i+0x188>
 800a392:	065f      	lsls	r7, r3, #25
 800a394:	bf48      	it	mi
 800a396:	b2ad      	uxthmi	r5, r5
 800a398:	6031      	str	r1, [r6, #0]
 800a39a:	07d9      	lsls	r1, r3, #31
 800a39c:	bf44      	itt	mi
 800a39e:	f043 0320 	orrmi.w	r3, r3, #32
 800a3a2:	6023      	strmi	r3, [r4, #0]
 800a3a4:	b11d      	cbz	r5, 800a3ae <_printf_i+0x19e>
 800a3a6:	2310      	movs	r3, #16
 800a3a8:	e7ac      	b.n	800a304 <_printf_i+0xf4>
 800a3aa:	4827      	ldr	r0, [pc, #156]	@ (800a448 <_printf_i+0x238>)
 800a3ac:	e7e9      	b.n	800a382 <_printf_i+0x172>
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	f023 0320 	bic.w	r3, r3, #32
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	e7f6      	b.n	800a3a6 <_printf_i+0x196>
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	e7bd      	b.n	800a338 <_printf_i+0x128>
 800a3bc:	6833      	ldr	r3, [r6, #0]
 800a3be:	6825      	ldr	r5, [r4, #0]
 800a3c0:	6961      	ldr	r1, [r4, #20]
 800a3c2:	1d18      	adds	r0, r3, #4
 800a3c4:	6030      	str	r0, [r6, #0]
 800a3c6:	062e      	lsls	r6, r5, #24
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	d501      	bpl.n	800a3d0 <_printf_i+0x1c0>
 800a3cc:	6019      	str	r1, [r3, #0]
 800a3ce:	e002      	b.n	800a3d6 <_printf_i+0x1c6>
 800a3d0:	0668      	lsls	r0, r5, #25
 800a3d2:	d5fb      	bpl.n	800a3cc <_printf_i+0x1bc>
 800a3d4:	8019      	strh	r1, [r3, #0]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	4616      	mov	r6, r2
 800a3dc:	e7bc      	b.n	800a358 <_printf_i+0x148>
 800a3de:	6833      	ldr	r3, [r6, #0]
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	6032      	str	r2, [r6, #0]
 800a3e4:	681e      	ldr	r6, [r3, #0]
 800a3e6:	6862      	ldr	r2, [r4, #4]
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7f5 ff78 	bl	80002e0 <memchr>
 800a3f0:	b108      	cbz	r0, 800a3f6 <_printf_i+0x1e6>
 800a3f2:	1b80      	subs	r0, r0, r6
 800a3f4:	6060      	str	r0, [r4, #4]
 800a3f6:	6863      	ldr	r3, [r4, #4]
 800a3f8:	6123      	str	r3, [r4, #16]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a400:	e7aa      	b.n	800a358 <_printf_i+0x148>
 800a402:	6923      	ldr	r3, [r4, #16]
 800a404:	4632      	mov	r2, r6
 800a406:	4649      	mov	r1, r9
 800a408:	4640      	mov	r0, r8
 800a40a:	47d0      	blx	sl
 800a40c:	3001      	adds	r0, #1
 800a40e:	d0ad      	beq.n	800a36c <_printf_i+0x15c>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	079b      	lsls	r3, r3, #30
 800a414:	d413      	bmi.n	800a43e <_printf_i+0x22e>
 800a416:	68e0      	ldr	r0, [r4, #12]
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	4298      	cmp	r0, r3
 800a41c:	bfb8      	it	lt
 800a41e:	4618      	movlt	r0, r3
 800a420:	e7a6      	b.n	800a370 <_printf_i+0x160>
 800a422:	2301      	movs	r3, #1
 800a424:	4632      	mov	r2, r6
 800a426:	4649      	mov	r1, r9
 800a428:	4640      	mov	r0, r8
 800a42a:	47d0      	blx	sl
 800a42c:	3001      	adds	r0, #1
 800a42e:	d09d      	beq.n	800a36c <_printf_i+0x15c>
 800a430:	3501      	adds	r5, #1
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	9903      	ldr	r1, [sp, #12]
 800a436:	1a5b      	subs	r3, r3, r1
 800a438:	42ab      	cmp	r3, r5
 800a43a:	dcf2      	bgt.n	800a422 <_printf_i+0x212>
 800a43c:	e7eb      	b.n	800a416 <_printf_i+0x206>
 800a43e:	2500      	movs	r5, #0
 800a440:	f104 0619 	add.w	r6, r4, #25
 800a444:	e7f5      	b.n	800a432 <_printf_i+0x222>
 800a446:	bf00      	nop
 800a448:	0803aa5a 	.word	0x0803aa5a
 800a44c:	0803aa6b 	.word	0x0803aa6b

0800a450 <__malloc_lock>:
 800a450:	4801      	ldr	r0, [pc, #4]	@ (800a458 <__malloc_lock+0x8>)
 800a452:	f000 b982 	b.w	800a75a <__retarget_lock_acquire_recursive>
 800a456:	bf00      	nop
 800a458:	2002169c 	.word	0x2002169c

0800a45c <__malloc_unlock>:
 800a45c:	4801      	ldr	r0, [pc, #4]	@ (800a464 <__malloc_unlock+0x8>)
 800a45e:	f000 b97d 	b.w	800a75c <__retarget_lock_release_recursive>
 800a462:	bf00      	nop
 800a464:	2002169c 	.word	0x2002169c

0800a468 <std>:
 800a468:	2300      	movs	r3, #0
 800a46a:	b510      	push	{r4, lr}
 800a46c:	4604      	mov	r4, r0
 800a46e:	e9c0 3300 	strd	r3, r3, [r0]
 800a472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a476:	6083      	str	r3, [r0, #8]
 800a478:	8181      	strh	r1, [r0, #12]
 800a47a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a47c:	81c2      	strh	r2, [r0, #14]
 800a47e:	6183      	str	r3, [r0, #24]
 800a480:	4619      	mov	r1, r3
 800a482:	2208      	movs	r2, #8
 800a484:	305c      	adds	r0, #92	@ 0x5c
 800a486:	f000 f921 	bl	800a6cc <memset>
 800a48a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c0 <std+0x58>)
 800a48c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a48e:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c4 <std+0x5c>)
 800a490:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a492:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c8 <std+0x60>)
 800a494:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a496:	4b0d      	ldr	r3, [pc, #52]	@ (800a4cc <std+0x64>)
 800a498:	6323      	str	r3, [r4, #48]	@ 0x30
 800a49a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d0 <std+0x68>)
 800a49c:	6224      	str	r4, [r4, #32]
 800a49e:	429c      	cmp	r4, r3
 800a4a0:	d006      	beq.n	800a4b0 <std+0x48>
 800a4a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4a6:	4294      	cmp	r4, r2
 800a4a8:	d002      	beq.n	800a4b0 <std+0x48>
 800a4aa:	33d0      	adds	r3, #208	@ 0xd0
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	d105      	bne.n	800a4bc <std+0x54>
 800a4b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4b8:	f000 b94e 	b.w	800a758 <__retarget_lock_init_recursive>
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800bf8d 	.word	0x0800bf8d
 800a4c4:	0800bfaf 	.word	0x0800bfaf
 800a4c8:	0800bfe7 	.word	0x0800bfe7
 800a4cc:	0800c00b 	.word	0x0800c00b
 800a4d0:	20021560 	.word	0x20021560

0800a4d4 <stdio_exit_handler>:
 800a4d4:	4a02      	ldr	r2, [pc, #8]	@ (800a4e0 <stdio_exit_handler+0xc>)
 800a4d6:	4903      	ldr	r1, [pc, #12]	@ (800a4e4 <stdio_exit_handler+0x10>)
 800a4d8:	4803      	ldr	r0, [pc, #12]	@ (800a4e8 <stdio_exit_handler+0x14>)
 800a4da:	f000 b869 	b.w	800a5b0 <_fwalk_sglue>
 800a4de:	bf00      	nop
 800a4e0:	20000b28 	.word	0x20000b28
 800a4e4:	0800b839 	.word	0x0800b839
 800a4e8:	20000b38 	.word	0x20000b38

0800a4ec <cleanup_stdio>:
 800a4ec:	6841      	ldr	r1, [r0, #4]
 800a4ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a520 <cleanup_stdio+0x34>)
 800a4f0:	4299      	cmp	r1, r3
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	d001      	beq.n	800a4fc <cleanup_stdio+0x10>
 800a4f8:	f001 f99e 	bl	800b838 <_fflush_r>
 800a4fc:	68a1      	ldr	r1, [r4, #8]
 800a4fe:	4b09      	ldr	r3, [pc, #36]	@ (800a524 <cleanup_stdio+0x38>)
 800a500:	4299      	cmp	r1, r3
 800a502:	d002      	beq.n	800a50a <cleanup_stdio+0x1e>
 800a504:	4620      	mov	r0, r4
 800a506:	f001 f997 	bl	800b838 <_fflush_r>
 800a50a:	68e1      	ldr	r1, [r4, #12]
 800a50c:	4b06      	ldr	r3, [pc, #24]	@ (800a528 <cleanup_stdio+0x3c>)
 800a50e:	4299      	cmp	r1, r3
 800a510:	d004      	beq.n	800a51c <cleanup_stdio+0x30>
 800a512:	4620      	mov	r0, r4
 800a514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a518:	f001 b98e 	b.w	800b838 <_fflush_r>
 800a51c:	bd10      	pop	{r4, pc}
 800a51e:	bf00      	nop
 800a520:	20021560 	.word	0x20021560
 800a524:	200215c8 	.word	0x200215c8
 800a528:	20021630 	.word	0x20021630

0800a52c <global_stdio_init.part.0>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	4b0b      	ldr	r3, [pc, #44]	@ (800a55c <global_stdio_init.part.0+0x30>)
 800a530:	4c0b      	ldr	r4, [pc, #44]	@ (800a560 <global_stdio_init.part.0+0x34>)
 800a532:	4a0c      	ldr	r2, [pc, #48]	@ (800a564 <global_stdio_init.part.0+0x38>)
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	4620      	mov	r0, r4
 800a538:	2200      	movs	r2, #0
 800a53a:	2104      	movs	r1, #4
 800a53c:	f7ff ff94 	bl	800a468 <std>
 800a540:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a544:	2201      	movs	r2, #1
 800a546:	2109      	movs	r1, #9
 800a548:	f7ff ff8e 	bl	800a468 <std>
 800a54c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a550:	2202      	movs	r2, #2
 800a552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a556:	2112      	movs	r1, #18
 800a558:	f7ff bf86 	b.w	800a468 <std>
 800a55c:	20021698 	.word	0x20021698
 800a560:	20021560 	.word	0x20021560
 800a564:	0800a4d5 	.word	0x0800a4d5

0800a568 <__sfp_lock_acquire>:
 800a568:	4801      	ldr	r0, [pc, #4]	@ (800a570 <__sfp_lock_acquire+0x8>)
 800a56a:	f000 b8f6 	b.w	800a75a <__retarget_lock_acquire_recursive>
 800a56e:	bf00      	nop
 800a570:	2002169d 	.word	0x2002169d

0800a574 <__sfp_lock_release>:
 800a574:	4801      	ldr	r0, [pc, #4]	@ (800a57c <__sfp_lock_release+0x8>)
 800a576:	f000 b8f1 	b.w	800a75c <__retarget_lock_release_recursive>
 800a57a:	bf00      	nop
 800a57c:	2002169d 	.word	0x2002169d

0800a580 <__sinit>:
 800a580:	b510      	push	{r4, lr}
 800a582:	4604      	mov	r4, r0
 800a584:	f7ff fff0 	bl	800a568 <__sfp_lock_acquire>
 800a588:	6a23      	ldr	r3, [r4, #32]
 800a58a:	b11b      	cbz	r3, 800a594 <__sinit+0x14>
 800a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a590:	f7ff bff0 	b.w	800a574 <__sfp_lock_release>
 800a594:	4b04      	ldr	r3, [pc, #16]	@ (800a5a8 <__sinit+0x28>)
 800a596:	6223      	str	r3, [r4, #32]
 800a598:	4b04      	ldr	r3, [pc, #16]	@ (800a5ac <__sinit+0x2c>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1f5      	bne.n	800a58c <__sinit+0xc>
 800a5a0:	f7ff ffc4 	bl	800a52c <global_stdio_init.part.0>
 800a5a4:	e7f2      	b.n	800a58c <__sinit+0xc>
 800a5a6:	bf00      	nop
 800a5a8:	0800a4ed 	.word	0x0800a4ed
 800a5ac:	20021698 	.word	0x20021698

0800a5b0 <_fwalk_sglue>:
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	4688      	mov	r8, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	2600      	movs	r6, #0
 800a5bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a5c4:	d505      	bpl.n	800a5d2 <_fwalk_sglue+0x22>
 800a5c6:	6824      	ldr	r4, [r4, #0]
 800a5c8:	2c00      	cmp	r4, #0
 800a5ca:	d1f7      	bne.n	800a5bc <_fwalk_sglue+0xc>
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5d2:	89ab      	ldrh	r3, [r5, #12]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d907      	bls.n	800a5e8 <_fwalk_sglue+0x38>
 800a5d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	d003      	beq.n	800a5e8 <_fwalk_sglue+0x38>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	47c0      	blx	r8
 800a5e6:	4306      	orrs	r6, r0
 800a5e8:	3568      	adds	r5, #104	@ 0x68
 800a5ea:	e7e9      	b.n	800a5c0 <_fwalk_sglue+0x10>

0800a5ec <iprintf>:
 800a5ec:	b40f      	push	{r0, r1, r2, r3}
 800a5ee:	b507      	push	{r0, r1, r2, lr}
 800a5f0:	4906      	ldr	r1, [pc, #24]	@ (800a60c <iprintf+0x20>)
 800a5f2:	ab04      	add	r3, sp, #16
 800a5f4:	6808      	ldr	r0, [r1, #0]
 800a5f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fa:	6881      	ldr	r1, [r0, #8]
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f000 ff7f 	bl	800b500 <_vfiprintf_r>
 800a602:	b003      	add	sp, #12
 800a604:	f85d eb04 	ldr.w	lr, [sp], #4
 800a608:	b004      	add	sp, #16
 800a60a:	4770      	bx	lr
 800a60c:	20000b34 	.word	0x20000b34

0800a610 <_puts_r>:
 800a610:	6a03      	ldr	r3, [r0, #32]
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	6884      	ldr	r4, [r0, #8]
 800a616:	4605      	mov	r5, r0
 800a618:	460e      	mov	r6, r1
 800a61a:	b90b      	cbnz	r3, 800a620 <_puts_r+0x10>
 800a61c:	f7ff ffb0 	bl	800a580 <__sinit>
 800a620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a622:	07db      	lsls	r3, r3, #31
 800a624:	d405      	bmi.n	800a632 <_puts_r+0x22>
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	0598      	lsls	r0, r3, #22
 800a62a:	d402      	bmi.n	800a632 <_puts_r+0x22>
 800a62c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a62e:	f000 f894 	bl	800a75a <__retarget_lock_acquire_recursive>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	0719      	lsls	r1, r3, #28
 800a636:	d502      	bpl.n	800a63e <_puts_r+0x2e>
 800a638:	6923      	ldr	r3, [r4, #16]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d135      	bne.n	800a6aa <_puts_r+0x9a>
 800a63e:	4621      	mov	r1, r4
 800a640:	4628      	mov	r0, r5
 800a642:	f001 fd25 	bl	800c090 <__swsetup_r>
 800a646:	b380      	cbz	r0, 800a6aa <_puts_r+0x9a>
 800a648:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a64c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a64e:	07da      	lsls	r2, r3, #31
 800a650:	d405      	bmi.n	800a65e <_puts_r+0x4e>
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	059b      	lsls	r3, r3, #22
 800a656:	d402      	bmi.n	800a65e <_puts_r+0x4e>
 800a658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a65a:	f000 f87f 	bl	800a75c <__retarget_lock_release_recursive>
 800a65e:	4628      	mov	r0, r5
 800a660:	bd70      	pop	{r4, r5, r6, pc}
 800a662:	2b00      	cmp	r3, #0
 800a664:	da04      	bge.n	800a670 <_puts_r+0x60>
 800a666:	69a2      	ldr	r2, [r4, #24]
 800a668:	429a      	cmp	r2, r3
 800a66a:	dc17      	bgt.n	800a69c <_puts_r+0x8c>
 800a66c:	290a      	cmp	r1, #10
 800a66e:	d015      	beq.n	800a69c <_puts_r+0x8c>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	6022      	str	r2, [r4, #0]
 800a676:	7019      	strb	r1, [r3, #0]
 800a678:	68a3      	ldr	r3, [r4, #8]
 800a67a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a67e:	3b01      	subs	r3, #1
 800a680:	60a3      	str	r3, [r4, #8]
 800a682:	2900      	cmp	r1, #0
 800a684:	d1ed      	bne.n	800a662 <_puts_r+0x52>
 800a686:	2b00      	cmp	r3, #0
 800a688:	da11      	bge.n	800a6ae <_puts_r+0x9e>
 800a68a:	4622      	mov	r2, r4
 800a68c:	210a      	movs	r1, #10
 800a68e:	4628      	mov	r0, r5
 800a690:	f001 fcbf 	bl	800c012 <__swbuf_r>
 800a694:	3001      	adds	r0, #1
 800a696:	d0d7      	beq.n	800a648 <_puts_r+0x38>
 800a698:	250a      	movs	r5, #10
 800a69a:	e7d7      	b.n	800a64c <_puts_r+0x3c>
 800a69c:	4622      	mov	r2, r4
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f001 fcb7 	bl	800c012 <__swbuf_r>
 800a6a4:	3001      	adds	r0, #1
 800a6a6:	d1e7      	bne.n	800a678 <_puts_r+0x68>
 800a6a8:	e7ce      	b.n	800a648 <_puts_r+0x38>
 800a6aa:	3e01      	subs	r6, #1
 800a6ac:	e7e4      	b.n	800a678 <_puts_r+0x68>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	6022      	str	r2, [r4, #0]
 800a6b4:	220a      	movs	r2, #10
 800a6b6:	701a      	strb	r2, [r3, #0]
 800a6b8:	e7ee      	b.n	800a698 <_puts_r+0x88>
	...

0800a6bc <puts>:
 800a6bc:	4b02      	ldr	r3, [pc, #8]	@ (800a6c8 <puts+0xc>)
 800a6be:	4601      	mov	r1, r0
 800a6c0:	6818      	ldr	r0, [r3, #0]
 800a6c2:	f7ff bfa5 	b.w	800a610 <_puts_r>
 800a6c6:	bf00      	nop
 800a6c8:	20000b34 	.word	0x20000b34

0800a6cc <memset>:
 800a6cc:	4402      	add	r2, r0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d100      	bne.n	800a6d6 <memset+0xa>
 800a6d4:	4770      	bx	lr
 800a6d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a6da:	e7f9      	b.n	800a6d0 <memset+0x4>

0800a6dc <_localeconv_r>:
 800a6dc:	4800      	ldr	r0, [pc, #0]	@ (800a6e0 <_localeconv_r+0x4>)
 800a6de:	4770      	bx	lr
 800a6e0:	20000c74 	.word	0x20000c74

0800a6e4 <_sbrk_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d06      	ldr	r5, [pc, #24]	@ (800a700 <_sbrk_r+0x1c>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	f7f7 fafc 	bl	8001cec <_sbrk>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_sbrk_r+0x1a>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_sbrk_r+0x1a>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	200216a0 	.word	0x200216a0

0800a704 <__errno>:
 800a704:	4b01      	ldr	r3, [pc, #4]	@ (800a70c <__errno+0x8>)
 800a706:	6818      	ldr	r0, [r3, #0]
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	20000b34 	.word	0x20000b34

0800a710 <__libc_init_array>:
 800a710:	b570      	push	{r4, r5, r6, lr}
 800a712:	4d0d      	ldr	r5, [pc, #52]	@ (800a748 <__libc_init_array+0x38>)
 800a714:	4c0d      	ldr	r4, [pc, #52]	@ (800a74c <__libc_init_array+0x3c>)
 800a716:	1b64      	subs	r4, r4, r5
 800a718:	10a4      	asrs	r4, r4, #2
 800a71a:	2600      	movs	r6, #0
 800a71c:	42a6      	cmp	r6, r4
 800a71e:	d109      	bne.n	800a734 <__libc_init_array+0x24>
 800a720:	4d0b      	ldr	r5, [pc, #44]	@ (800a750 <__libc_init_array+0x40>)
 800a722:	4c0c      	ldr	r4, [pc, #48]	@ (800a754 <__libc_init_array+0x44>)
 800a724:	f002 f998 	bl	800ca58 <_init>
 800a728:	1b64      	subs	r4, r4, r5
 800a72a:	10a4      	asrs	r4, r4, #2
 800a72c:	2600      	movs	r6, #0
 800a72e:	42a6      	cmp	r6, r4
 800a730:	d105      	bne.n	800a73e <__libc_init_array+0x2e>
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	f855 3b04 	ldr.w	r3, [r5], #4
 800a738:	4798      	blx	r3
 800a73a:	3601      	adds	r6, #1
 800a73c:	e7ee      	b.n	800a71c <__libc_init_array+0xc>
 800a73e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a742:	4798      	blx	r3
 800a744:	3601      	adds	r6, #1
 800a746:	e7f2      	b.n	800a72e <__libc_init_array+0x1e>
 800a748:	0803add8 	.word	0x0803add8
 800a74c:	0803add8 	.word	0x0803add8
 800a750:	0803add8 	.word	0x0803add8
 800a754:	0803addc 	.word	0x0803addc

0800a758 <__retarget_lock_init_recursive>:
 800a758:	4770      	bx	lr

0800a75a <__retarget_lock_acquire_recursive>:
 800a75a:	4770      	bx	lr

0800a75c <__retarget_lock_release_recursive>:
 800a75c:	4770      	bx	lr

0800a75e <memcpy>:
 800a75e:	440a      	add	r2, r1
 800a760:	4291      	cmp	r1, r2
 800a762:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a766:	d100      	bne.n	800a76a <memcpy+0xc>
 800a768:	4770      	bx	lr
 800a76a:	b510      	push	{r4, lr}
 800a76c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a770:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a774:	4291      	cmp	r1, r2
 800a776:	d1f9      	bne.n	800a76c <memcpy+0xe>
 800a778:	bd10      	pop	{r4, pc}

0800a77a <quorem>:
 800a77a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77e:	6903      	ldr	r3, [r0, #16]
 800a780:	690c      	ldr	r4, [r1, #16]
 800a782:	42a3      	cmp	r3, r4
 800a784:	4607      	mov	r7, r0
 800a786:	db7e      	blt.n	800a886 <quorem+0x10c>
 800a788:	3c01      	subs	r4, #1
 800a78a:	f101 0814 	add.w	r8, r1, #20
 800a78e:	00a3      	lsls	r3, r4, #2
 800a790:	f100 0514 	add.w	r5, r0, #20
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7b0:	d32e      	bcc.n	800a810 <quorem+0x96>
 800a7b2:	f04f 0a00 	mov.w	sl, #0
 800a7b6:	46c4      	mov	ip, r8
 800a7b8:	46ae      	mov	lr, r5
 800a7ba:	46d3      	mov	fp, sl
 800a7bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7c0:	b298      	uxth	r0, r3
 800a7c2:	fb06 a000 	mla	r0, r6, r0, sl
 800a7c6:	0c02      	lsrs	r2, r0, #16
 800a7c8:	0c1b      	lsrs	r3, r3, #16
 800a7ca:	fb06 2303 	mla	r3, r6, r3, r2
 800a7ce:	f8de 2000 	ldr.w	r2, [lr]
 800a7d2:	b280      	uxth	r0, r0
 800a7d4:	b292      	uxth	r2, r2
 800a7d6:	1a12      	subs	r2, r2, r0
 800a7d8:	445a      	add	r2, fp
 800a7da:	f8de 0000 	ldr.w	r0, [lr]
 800a7de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a7e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a7ec:	b292      	uxth	r2, r2
 800a7ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7f2:	45e1      	cmp	r9, ip
 800a7f4:	f84e 2b04 	str.w	r2, [lr], #4
 800a7f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7fc:	d2de      	bcs.n	800a7bc <quorem+0x42>
 800a7fe:	9b00      	ldr	r3, [sp, #0]
 800a800:	58eb      	ldr	r3, [r5, r3]
 800a802:	b92b      	cbnz	r3, 800a810 <quorem+0x96>
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	3b04      	subs	r3, #4
 800a808:	429d      	cmp	r5, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	d32f      	bcc.n	800a86e <quorem+0xf4>
 800a80e:	613c      	str	r4, [r7, #16]
 800a810:	4638      	mov	r0, r7
 800a812:	f001 fab3 	bl	800bd7c <__mcmp>
 800a816:	2800      	cmp	r0, #0
 800a818:	db25      	blt.n	800a866 <quorem+0xec>
 800a81a:	4629      	mov	r1, r5
 800a81c:	2000      	movs	r0, #0
 800a81e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a822:	f8d1 c000 	ldr.w	ip, [r1]
 800a826:	fa1f fe82 	uxth.w	lr, r2
 800a82a:	fa1f f38c 	uxth.w	r3, ip
 800a82e:	eba3 030e 	sub.w	r3, r3, lr
 800a832:	4403      	add	r3, r0
 800a834:	0c12      	lsrs	r2, r2, #16
 800a836:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a83a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a83e:	b29b      	uxth	r3, r3
 800a840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a844:	45c1      	cmp	r9, r8
 800a846:	f841 3b04 	str.w	r3, [r1], #4
 800a84a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a84e:	d2e6      	bcs.n	800a81e <quorem+0xa4>
 800a850:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a854:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a858:	b922      	cbnz	r2, 800a864 <quorem+0xea>
 800a85a:	3b04      	subs	r3, #4
 800a85c:	429d      	cmp	r5, r3
 800a85e:	461a      	mov	r2, r3
 800a860:	d30b      	bcc.n	800a87a <quorem+0x100>
 800a862:	613c      	str	r4, [r7, #16]
 800a864:	3601      	adds	r6, #1
 800a866:	4630      	mov	r0, r6
 800a868:	b003      	add	sp, #12
 800a86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	6812      	ldr	r2, [r2, #0]
 800a870:	3b04      	subs	r3, #4
 800a872:	2a00      	cmp	r2, #0
 800a874:	d1cb      	bne.n	800a80e <quorem+0x94>
 800a876:	3c01      	subs	r4, #1
 800a878:	e7c6      	b.n	800a808 <quorem+0x8e>
 800a87a:	6812      	ldr	r2, [r2, #0]
 800a87c:	3b04      	subs	r3, #4
 800a87e:	2a00      	cmp	r2, #0
 800a880:	d1ef      	bne.n	800a862 <quorem+0xe8>
 800a882:	3c01      	subs	r4, #1
 800a884:	e7ea      	b.n	800a85c <quorem+0xe2>
 800a886:	2000      	movs	r0, #0
 800a888:	e7ee      	b.n	800a868 <quorem+0xee>
 800a88a:	0000      	movs	r0, r0
 800a88c:	0000      	movs	r0, r0
	...

0800a890 <_dtoa_r>:
 800a890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a894:	69c7      	ldr	r7, [r0, #28]
 800a896:	b099      	sub	sp, #100	@ 0x64
 800a898:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a89c:	ec55 4b10 	vmov	r4, r5, d0
 800a8a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a8a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8a4:	4683      	mov	fp, r0
 800a8a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a8a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8aa:	b97f      	cbnz	r7, 800a8cc <_dtoa_r+0x3c>
 800a8ac:	2010      	movs	r0, #16
 800a8ae:	f7ff fb97 	bl	8009fe0 <malloc>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a8b8:	b920      	cbnz	r0, 800a8c4 <_dtoa_r+0x34>
 800a8ba:	4ba7      	ldr	r3, [pc, #668]	@ (800ab58 <_dtoa_r+0x2c8>)
 800a8bc:	21ef      	movs	r1, #239	@ 0xef
 800a8be:	48a7      	ldr	r0, [pc, #668]	@ (800ab5c <_dtoa_r+0x2cc>)
 800a8c0:	f001 fd06 	bl	800c2d0 <__assert_func>
 800a8c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a8c8:	6007      	str	r7, [r0, #0]
 800a8ca:	60c7      	str	r7, [r0, #12]
 800a8cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8d0:	6819      	ldr	r1, [r3, #0]
 800a8d2:	b159      	cbz	r1, 800a8ec <_dtoa_r+0x5c>
 800a8d4:	685a      	ldr	r2, [r3, #4]
 800a8d6:	604a      	str	r2, [r1, #4]
 800a8d8:	2301      	movs	r3, #1
 800a8da:	4093      	lsls	r3, r2
 800a8dc:	608b      	str	r3, [r1, #8]
 800a8de:	4658      	mov	r0, fp
 800a8e0:	f001 f812 	bl	800b908 <_Bfree>
 800a8e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	1e2b      	subs	r3, r5, #0
 800a8ee:	bfb9      	ittee	lt
 800a8f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a8f4:	9303      	strlt	r3, [sp, #12]
 800a8f6:	2300      	movge	r3, #0
 800a8f8:	6033      	strge	r3, [r6, #0]
 800a8fa:	9f03      	ldr	r7, [sp, #12]
 800a8fc:	4b98      	ldr	r3, [pc, #608]	@ (800ab60 <_dtoa_r+0x2d0>)
 800a8fe:	bfbc      	itt	lt
 800a900:	2201      	movlt	r2, #1
 800a902:	6032      	strlt	r2, [r6, #0]
 800a904:	43bb      	bics	r3, r7
 800a906:	d112      	bne.n	800a92e <_dtoa_r+0x9e>
 800a908:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a90a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a90e:	6013      	str	r3, [r2, #0]
 800a910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a914:	4323      	orrs	r3, r4
 800a916:	f000 854d 	beq.w	800b3b4 <_dtoa_r+0xb24>
 800a91a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a91c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ab74 <_dtoa_r+0x2e4>
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 854f 	beq.w	800b3c4 <_dtoa_r+0xb34>
 800a926:	f10a 0303 	add.w	r3, sl, #3
 800a92a:	f000 bd49 	b.w	800b3c0 <_dtoa_r+0xb30>
 800a92e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a932:	2200      	movs	r2, #0
 800a934:	ec51 0b17 	vmov	r0, r1, d7
 800a938:	2300      	movs	r3, #0
 800a93a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a93e:	f7f6 f94b 	bl	8000bd8 <__aeabi_dcmpeq>
 800a942:	4680      	mov	r8, r0
 800a944:	b158      	cbz	r0, 800a95e <_dtoa_r+0xce>
 800a946:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a948:	2301      	movs	r3, #1
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a94e:	b113      	cbz	r3, 800a956 <_dtoa_r+0xc6>
 800a950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a952:	4b84      	ldr	r3, [pc, #528]	@ (800ab64 <_dtoa_r+0x2d4>)
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ab78 <_dtoa_r+0x2e8>
 800a95a:	f000 bd33 	b.w	800b3c4 <_dtoa_r+0xb34>
 800a95e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a962:	aa16      	add	r2, sp, #88	@ 0x58
 800a964:	a917      	add	r1, sp, #92	@ 0x5c
 800a966:	4658      	mov	r0, fp
 800a968:	f001 fab8 	bl	800bedc <__d2b>
 800a96c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a970:	4681      	mov	r9, r0
 800a972:	2e00      	cmp	r6, #0
 800a974:	d077      	beq.n	800aa66 <_dtoa_r+0x1d6>
 800a976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a978:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a97c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a984:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a988:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a98c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a990:	4619      	mov	r1, r3
 800a992:	2200      	movs	r2, #0
 800a994:	4b74      	ldr	r3, [pc, #464]	@ (800ab68 <_dtoa_r+0x2d8>)
 800a996:	f7f5 fcff 	bl	8000398 <__aeabi_dsub>
 800a99a:	a369      	add	r3, pc, #420	@ (adr r3, 800ab40 <_dtoa_r+0x2b0>)
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f7f5 feb2 	bl	8000708 <__aeabi_dmul>
 800a9a4:	a368      	add	r3, pc, #416	@ (adr r3, 800ab48 <_dtoa_r+0x2b8>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	f7f5 fcf7 	bl	800039c <__adddf3>
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	f7f5 fe3e 	bl	8000634 <__aeabi_i2d>
 800a9b8:	a365      	add	r3, pc, #404	@ (adr r3, 800ab50 <_dtoa_r+0x2c0>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7f5 fea3 	bl	8000708 <__aeabi_dmul>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7f5 fce7 	bl	800039c <__adddf3>
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	460d      	mov	r5, r1
 800a9d2:	f7f6 f949 	bl	8000c68 <__aeabi_d2iz>
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	4607      	mov	r7, r0
 800a9da:	2300      	movs	r3, #0
 800a9dc:	4620      	mov	r0, r4
 800a9de:	4629      	mov	r1, r5
 800a9e0:	f7f6 f904 	bl	8000bec <__aeabi_dcmplt>
 800a9e4:	b140      	cbz	r0, 800a9f8 <_dtoa_r+0x168>
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f7f5 fe24 	bl	8000634 <__aeabi_i2d>
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	462b      	mov	r3, r5
 800a9f0:	f7f6 f8f2 	bl	8000bd8 <__aeabi_dcmpeq>
 800a9f4:	b900      	cbnz	r0, 800a9f8 <_dtoa_r+0x168>
 800a9f6:	3f01      	subs	r7, #1
 800a9f8:	2f16      	cmp	r7, #22
 800a9fa:	d851      	bhi.n	800aaa0 <_dtoa_r+0x210>
 800a9fc:	4b5b      	ldr	r3, [pc, #364]	@ (800ab6c <_dtoa_r+0x2dc>)
 800a9fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa0a:	f7f6 f8ef 	bl	8000bec <__aeabi_dcmplt>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d048      	beq.n	800aaa4 <_dtoa_r+0x214>
 800aa12:	3f01      	subs	r7, #1
 800aa14:	2300      	movs	r3, #0
 800aa16:	9312      	str	r3, [sp, #72]	@ 0x48
 800aa18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa1a:	1b9b      	subs	r3, r3, r6
 800aa1c:	1e5a      	subs	r2, r3, #1
 800aa1e:	bf44      	itt	mi
 800aa20:	f1c3 0801 	rsbmi	r8, r3, #1
 800aa24:	2300      	movmi	r3, #0
 800aa26:	9208      	str	r2, [sp, #32]
 800aa28:	bf54      	ite	pl
 800aa2a:	f04f 0800 	movpl.w	r8, #0
 800aa2e:	9308      	strmi	r3, [sp, #32]
 800aa30:	2f00      	cmp	r7, #0
 800aa32:	db39      	blt.n	800aaa8 <_dtoa_r+0x218>
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aa38:	443b      	add	r3, r7
 800aa3a:	9308      	str	r3, [sp, #32]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa42:	2b09      	cmp	r3, #9
 800aa44:	d864      	bhi.n	800ab10 <_dtoa_r+0x280>
 800aa46:	2b05      	cmp	r3, #5
 800aa48:	bfc4      	itt	gt
 800aa4a:	3b04      	subgt	r3, #4
 800aa4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aa4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa50:	f1a3 0302 	sub.w	r3, r3, #2
 800aa54:	bfcc      	ite	gt
 800aa56:	2400      	movgt	r4, #0
 800aa58:	2401      	movle	r4, #1
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d863      	bhi.n	800ab26 <_dtoa_r+0x296>
 800aa5e:	e8df f003 	tbb	[pc, r3]
 800aa62:	372a      	.short	0x372a
 800aa64:	5535      	.short	0x5535
 800aa66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aa6a:	441e      	add	r6, r3
 800aa6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	bfc1      	itttt	gt
 800aa74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa78:	409f      	lslgt	r7, r3
 800aa7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa82:	bfd6      	itet	le
 800aa84:	f1c3 0320 	rsble	r3, r3, #32
 800aa88:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa8c:	fa04 f003 	lslle.w	r0, r4, r3
 800aa90:	f7f5 fdc0 	bl	8000614 <__aeabi_ui2d>
 800aa94:	2201      	movs	r2, #1
 800aa96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa9a:	3e01      	subs	r6, #1
 800aa9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800aa9e:	e777      	b.n	800a990 <_dtoa_r+0x100>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e7b8      	b.n	800aa16 <_dtoa_r+0x186>
 800aaa4:	9012      	str	r0, [sp, #72]	@ 0x48
 800aaa6:	e7b7      	b.n	800aa18 <_dtoa_r+0x188>
 800aaa8:	427b      	negs	r3, r7
 800aaaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaac:	2300      	movs	r3, #0
 800aaae:	eba8 0807 	sub.w	r8, r8, r7
 800aab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aab4:	e7c4      	b.n	800aa40 <_dtoa_r+0x1b0>
 800aab6:	2300      	movs	r3, #0
 800aab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aaba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dc35      	bgt.n	800ab2c <_dtoa_r+0x29c>
 800aac0:	2301      	movs	r3, #1
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	9307      	str	r3, [sp, #28]
 800aac6:	461a      	mov	r2, r3
 800aac8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aaca:	e00b      	b.n	800aae4 <_dtoa_r+0x254>
 800aacc:	2301      	movs	r3, #1
 800aace:	e7f3      	b.n	800aab8 <_dtoa_r+0x228>
 800aad0:	2300      	movs	r3, #0
 800aad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aad4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aad6:	18fb      	adds	r3, r7, r3
 800aad8:	9300      	str	r3, [sp, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	2b01      	cmp	r3, #1
 800aade:	9307      	str	r3, [sp, #28]
 800aae0:	bfb8      	it	lt
 800aae2:	2301      	movlt	r3, #1
 800aae4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aae8:	2100      	movs	r1, #0
 800aaea:	2204      	movs	r2, #4
 800aaec:	f102 0514 	add.w	r5, r2, #20
 800aaf0:	429d      	cmp	r5, r3
 800aaf2:	d91f      	bls.n	800ab34 <_dtoa_r+0x2a4>
 800aaf4:	6041      	str	r1, [r0, #4]
 800aaf6:	4658      	mov	r0, fp
 800aaf8:	f000 fec6 	bl	800b888 <_Balloc>
 800aafc:	4682      	mov	sl, r0
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d13c      	bne.n	800ab7c <_dtoa_r+0x2ec>
 800ab02:	4b1b      	ldr	r3, [pc, #108]	@ (800ab70 <_dtoa_r+0x2e0>)
 800ab04:	4602      	mov	r2, r0
 800ab06:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab0a:	e6d8      	b.n	800a8be <_dtoa_r+0x2e>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e7e0      	b.n	800aad2 <_dtoa_r+0x242>
 800ab10:	2401      	movs	r4, #1
 800ab12:	2300      	movs	r3, #0
 800ab14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	9307      	str	r3, [sp, #28]
 800ab20:	2200      	movs	r2, #0
 800ab22:	2312      	movs	r3, #18
 800ab24:	e7d0      	b.n	800aac8 <_dtoa_r+0x238>
 800ab26:	2301      	movs	r3, #1
 800ab28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab2a:	e7f5      	b.n	800ab18 <_dtoa_r+0x288>
 800ab2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	9307      	str	r3, [sp, #28]
 800ab32:	e7d7      	b.n	800aae4 <_dtoa_r+0x254>
 800ab34:	3101      	adds	r1, #1
 800ab36:	0052      	lsls	r2, r2, #1
 800ab38:	e7d8      	b.n	800aaec <_dtoa_r+0x25c>
 800ab3a:	bf00      	nop
 800ab3c:	f3af 8000 	nop.w
 800ab40:	636f4361 	.word	0x636f4361
 800ab44:	3fd287a7 	.word	0x3fd287a7
 800ab48:	8b60c8b3 	.word	0x8b60c8b3
 800ab4c:	3fc68a28 	.word	0x3fc68a28
 800ab50:	509f79fb 	.word	0x509f79fb
 800ab54:	3fd34413 	.word	0x3fd34413
 800ab58:	0803aa89 	.word	0x0803aa89
 800ab5c:	0803aaa0 	.word	0x0803aaa0
 800ab60:	7ff00000 	.word	0x7ff00000
 800ab64:	0803aa59 	.word	0x0803aa59
 800ab68:	3ff80000 	.word	0x3ff80000
 800ab6c:	0803aba8 	.word	0x0803aba8
 800ab70:	0803aaf8 	.word	0x0803aaf8
 800ab74:	0803aa85 	.word	0x0803aa85
 800ab78:	0803aa58 	.word	0x0803aa58
 800ab7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab80:	6018      	str	r0, [r3, #0]
 800ab82:	9b07      	ldr	r3, [sp, #28]
 800ab84:	2b0e      	cmp	r3, #14
 800ab86:	f200 80a4 	bhi.w	800acd2 <_dtoa_r+0x442>
 800ab8a:	2c00      	cmp	r4, #0
 800ab8c:	f000 80a1 	beq.w	800acd2 <_dtoa_r+0x442>
 800ab90:	2f00      	cmp	r7, #0
 800ab92:	dd33      	ble.n	800abfc <_dtoa_r+0x36c>
 800ab94:	4bad      	ldr	r3, [pc, #692]	@ (800ae4c <_dtoa_r+0x5bc>)
 800ab96:	f007 020f 	and.w	r2, r7, #15
 800ab9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab9e:	ed93 7b00 	vldr	d7, [r3]
 800aba2:	05f8      	lsls	r0, r7, #23
 800aba4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aba8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800abac:	d516      	bpl.n	800abdc <_dtoa_r+0x34c>
 800abae:	4ba8      	ldr	r3, [pc, #672]	@ (800ae50 <_dtoa_r+0x5c0>)
 800abb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800abb8:	f7f5 fed0 	bl	800095c <__aeabi_ddiv>
 800abbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc0:	f004 040f 	and.w	r4, r4, #15
 800abc4:	2603      	movs	r6, #3
 800abc6:	4da2      	ldr	r5, [pc, #648]	@ (800ae50 <_dtoa_r+0x5c0>)
 800abc8:	b954      	cbnz	r4, 800abe0 <_dtoa_r+0x350>
 800abca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd2:	f7f5 fec3 	bl	800095c <__aeabi_ddiv>
 800abd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abda:	e028      	b.n	800ac2e <_dtoa_r+0x39e>
 800abdc:	2602      	movs	r6, #2
 800abde:	e7f2      	b.n	800abc6 <_dtoa_r+0x336>
 800abe0:	07e1      	lsls	r1, r4, #31
 800abe2:	d508      	bpl.n	800abf6 <_dtoa_r+0x366>
 800abe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800abec:	f7f5 fd8c 	bl	8000708 <__aeabi_dmul>
 800abf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abf4:	3601      	adds	r6, #1
 800abf6:	1064      	asrs	r4, r4, #1
 800abf8:	3508      	adds	r5, #8
 800abfa:	e7e5      	b.n	800abc8 <_dtoa_r+0x338>
 800abfc:	f000 80d2 	beq.w	800ada4 <_dtoa_r+0x514>
 800ac00:	427c      	negs	r4, r7
 800ac02:	4b92      	ldr	r3, [pc, #584]	@ (800ae4c <_dtoa_r+0x5bc>)
 800ac04:	4d92      	ldr	r5, [pc, #584]	@ (800ae50 <_dtoa_r+0x5c0>)
 800ac06:	f004 020f 	and.w	r2, r4, #15
 800ac0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac16:	f7f5 fd77 	bl	8000708 <__aeabi_dmul>
 800ac1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac1e:	1124      	asrs	r4, r4, #4
 800ac20:	2300      	movs	r3, #0
 800ac22:	2602      	movs	r6, #2
 800ac24:	2c00      	cmp	r4, #0
 800ac26:	f040 80b2 	bne.w	800ad8e <_dtoa_r+0x4fe>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1d3      	bne.n	800abd6 <_dtoa_r+0x346>
 800ac2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ac30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 80b7 	beq.w	800ada8 <_dtoa_r+0x518>
 800ac3a:	4b86      	ldr	r3, [pc, #536]	@ (800ae54 <_dtoa_r+0x5c4>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	4620      	mov	r0, r4
 800ac40:	4629      	mov	r1, r5
 800ac42:	f7f5 ffd3 	bl	8000bec <__aeabi_dcmplt>
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f000 80ae 	beq.w	800ada8 <_dtoa_r+0x518>
 800ac4c:	9b07      	ldr	r3, [sp, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 80aa 	beq.w	800ada8 <_dtoa_r+0x518>
 800ac54:	9b00      	ldr	r3, [sp, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dd37      	ble.n	800acca <_dtoa_r+0x43a>
 800ac5a:	1e7b      	subs	r3, r7, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	4b7d      	ldr	r3, [pc, #500]	@ (800ae58 <_dtoa_r+0x5c8>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	4629      	mov	r1, r5
 800ac66:	f7f5 fd4f 	bl	8000708 <__aeabi_dmul>
 800ac6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac6e:	9c00      	ldr	r4, [sp, #0]
 800ac70:	3601      	adds	r6, #1
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7f5 fcde 	bl	8000634 <__aeabi_i2d>
 800ac78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac7c:	f7f5 fd44 	bl	8000708 <__aeabi_dmul>
 800ac80:	4b76      	ldr	r3, [pc, #472]	@ (800ae5c <_dtoa_r+0x5cc>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	f7f5 fb8a 	bl	800039c <__adddf3>
 800ac88:	4605      	mov	r5, r0
 800ac8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac8e:	2c00      	cmp	r4, #0
 800ac90:	f040 808d 	bne.w	800adae <_dtoa_r+0x51e>
 800ac94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac98:	4b71      	ldr	r3, [pc, #452]	@ (800ae60 <_dtoa_r+0x5d0>)
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f7f5 fb7c 	bl	8000398 <__aeabi_dsub>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aca8:	462a      	mov	r2, r5
 800acaa:	4633      	mov	r3, r6
 800acac:	f7f5 ffbc 	bl	8000c28 <__aeabi_dcmpgt>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	f040 828b 	bne.w	800b1cc <_dtoa_r+0x93c>
 800acb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acba:	462a      	mov	r2, r5
 800acbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800acc0:	f7f5 ff94 	bl	8000bec <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f040 8128 	bne.w	800af1a <_dtoa_r+0x68a>
 800acca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800acce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800acd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f2c0 815a 	blt.w	800af8e <_dtoa_r+0x6fe>
 800acda:	2f0e      	cmp	r7, #14
 800acdc:	f300 8157 	bgt.w	800af8e <_dtoa_r+0x6fe>
 800ace0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae4c <_dtoa_r+0x5bc>)
 800ace2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ace6:	ed93 7b00 	vldr	d7, [r3]
 800acea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acec:	2b00      	cmp	r3, #0
 800acee:	ed8d 7b00 	vstr	d7, [sp]
 800acf2:	da03      	bge.n	800acfc <_dtoa_r+0x46c>
 800acf4:	9b07      	ldr	r3, [sp, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f340 8101 	ble.w	800aefe <_dtoa_r+0x66e>
 800acfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ad00:	4656      	mov	r6, sl
 800ad02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad06:	4620      	mov	r0, r4
 800ad08:	4629      	mov	r1, r5
 800ad0a:	f7f5 fe27 	bl	800095c <__aeabi_ddiv>
 800ad0e:	f7f5 ffab 	bl	8000c68 <__aeabi_d2iz>
 800ad12:	4680      	mov	r8, r0
 800ad14:	f7f5 fc8e 	bl	8000634 <__aeabi_i2d>
 800ad18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad1c:	f7f5 fcf4 	bl	8000708 <__aeabi_dmul>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ad2c:	f7f5 fb34 	bl	8000398 <__aeabi_dsub>
 800ad30:	f806 4b01 	strb.w	r4, [r6], #1
 800ad34:	9d07      	ldr	r5, [sp, #28]
 800ad36:	eba6 040a 	sub.w	r4, r6, sl
 800ad3a:	42a5      	cmp	r5, r4
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	f040 8117 	bne.w	800af72 <_dtoa_r+0x6e2>
 800ad44:	f7f5 fb2a 	bl	800039c <__adddf3>
 800ad48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	460d      	mov	r5, r1
 800ad50:	f7f5 ff6a 	bl	8000c28 <__aeabi_dcmpgt>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f040 80f9 	bne.w	800af4c <_dtoa_r+0x6bc>
 800ad5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad5e:	4620      	mov	r0, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 ff39 	bl	8000bd8 <__aeabi_dcmpeq>
 800ad66:	b118      	cbz	r0, 800ad70 <_dtoa_r+0x4e0>
 800ad68:	f018 0f01 	tst.w	r8, #1
 800ad6c:	f040 80ee 	bne.w	800af4c <_dtoa_r+0x6bc>
 800ad70:	4649      	mov	r1, r9
 800ad72:	4658      	mov	r0, fp
 800ad74:	f000 fdc8 	bl	800b908 <_Bfree>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	7033      	strb	r3, [r6, #0]
 800ad7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad7e:	3701      	adds	r7, #1
 800ad80:	601f      	str	r7, [r3, #0]
 800ad82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 831d 	beq.w	800b3c4 <_dtoa_r+0xb34>
 800ad8a:	601e      	str	r6, [r3, #0]
 800ad8c:	e31a      	b.n	800b3c4 <_dtoa_r+0xb34>
 800ad8e:	07e2      	lsls	r2, r4, #31
 800ad90:	d505      	bpl.n	800ad9e <_dtoa_r+0x50e>
 800ad92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad96:	f7f5 fcb7 	bl	8000708 <__aeabi_dmul>
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	1064      	asrs	r4, r4, #1
 800ada0:	3508      	adds	r5, #8
 800ada2:	e73f      	b.n	800ac24 <_dtoa_r+0x394>
 800ada4:	2602      	movs	r6, #2
 800ada6:	e742      	b.n	800ac2e <_dtoa_r+0x39e>
 800ada8:	9c07      	ldr	r4, [sp, #28]
 800adaa:	9704      	str	r7, [sp, #16]
 800adac:	e761      	b.n	800ac72 <_dtoa_r+0x3e2>
 800adae:	4b27      	ldr	r3, [pc, #156]	@ (800ae4c <_dtoa_r+0x5bc>)
 800adb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800adb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800adba:	4454      	add	r4, sl
 800adbc:	2900      	cmp	r1, #0
 800adbe:	d053      	beq.n	800ae68 <_dtoa_r+0x5d8>
 800adc0:	4928      	ldr	r1, [pc, #160]	@ (800ae64 <_dtoa_r+0x5d4>)
 800adc2:	2000      	movs	r0, #0
 800adc4:	f7f5 fdca 	bl	800095c <__aeabi_ddiv>
 800adc8:	4633      	mov	r3, r6
 800adca:	462a      	mov	r2, r5
 800adcc:	f7f5 fae4 	bl	8000398 <__aeabi_dsub>
 800add0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800add4:	4656      	mov	r6, sl
 800add6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adda:	f7f5 ff45 	bl	8000c68 <__aeabi_d2iz>
 800adde:	4605      	mov	r5, r0
 800ade0:	f7f5 fc28 	bl	8000634 <__aeabi_i2d>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adec:	f7f5 fad4 	bl	8000398 <__aeabi_dsub>
 800adf0:	3530      	adds	r5, #48	@ 0x30
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adfa:	f806 5b01 	strb.w	r5, [r6], #1
 800adfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae02:	f7f5 fef3 	bl	8000bec <__aeabi_dcmplt>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d171      	bne.n	800aeee <_dtoa_r+0x65e>
 800ae0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae0e:	4911      	ldr	r1, [pc, #68]	@ (800ae54 <_dtoa_r+0x5c4>)
 800ae10:	2000      	movs	r0, #0
 800ae12:	f7f5 fac1 	bl	8000398 <__aeabi_dsub>
 800ae16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae1a:	f7f5 fee7 	bl	8000bec <__aeabi_dcmplt>
 800ae1e:	2800      	cmp	r0, #0
 800ae20:	f040 8095 	bne.w	800af4e <_dtoa_r+0x6be>
 800ae24:	42a6      	cmp	r6, r4
 800ae26:	f43f af50 	beq.w	800acca <_dtoa_r+0x43a>
 800ae2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae58 <_dtoa_r+0x5c8>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	f7f5 fc69 	bl	8000708 <__aeabi_dmul>
 800ae36:	4b08      	ldr	r3, [pc, #32]	@ (800ae58 <_dtoa_r+0x5c8>)
 800ae38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae42:	f7f5 fc61 	bl	8000708 <__aeabi_dmul>
 800ae46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae4a:	e7c4      	b.n	800add6 <_dtoa_r+0x546>
 800ae4c:	0803aba8 	.word	0x0803aba8
 800ae50:	0803ab80 	.word	0x0803ab80
 800ae54:	3ff00000 	.word	0x3ff00000
 800ae58:	40240000 	.word	0x40240000
 800ae5c:	401c0000 	.word	0x401c0000
 800ae60:	40140000 	.word	0x40140000
 800ae64:	3fe00000 	.word	0x3fe00000
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f7f5 fc4c 	bl	8000708 <__aeabi_dmul>
 800ae70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae74:	9415      	str	r4, [sp, #84]	@ 0x54
 800ae76:	4656      	mov	r6, sl
 800ae78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae7c:	f7f5 fef4 	bl	8000c68 <__aeabi_d2iz>
 800ae80:	4605      	mov	r5, r0
 800ae82:	f7f5 fbd7 	bl	8000634 <__aeabi_i2d>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae8e:	f7f5 fa83 	bl	8000398 <__aeabi_dsub>
 800ae92:	3530      	adds	r5, #48	@ 0x30
 800ae94:	f806 5b01 	strb.w	r5, [r6], #1
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	42a6      	cmp	r6, r4
 800ae9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aea2:	f04f 0200 	mov.w	r2, #0
 800aea6:	d124      	bne.n	800aef2 <_dtoa_r+0x662>
 800aea8:	4bac      	ldr	r3, [pc, #688]	@ (800b15c <_dtoa_r+0x8cc>)
 800aeaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aeae:	f7f5 fa75 	bl	800039c <__adddf3>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeba:	f7f5 feb5 	bl	8000c28 <__aeabi_dcmpgt>
 800aebe:	2800      	cmp	r0, #0
 800aec0:	d145      	bne.n	800af4e <_dtoa_r+0x6be>
 800aec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aec6:	49a5      	ldr	r1, [pc, #660]	@ (800b15c <_dtoa_r+0x8cc>)
 800aec8:	2000      	movs	r0, #0
 800aeca:	f7f5 fa65 	bl	8000398 <__aeabi_dsub>
 800aece:	4602      	mov	r2, r0
 800aed0:	460b      	mov	r3, r1
 800aed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aed6:	f7f5 fe89 	bl	8000bec <__aeabi_dcmplt>
 800aeda:	2800      	cmp	r0, #0
 800aedc:	f43f aef5 	beq.w	800acca <_dtoa_r+0x43a>
 800aee0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800aee2:	1e73      	subs	r3, r6, #1
 800aee4:	9315      	str	r3, [sp, #84]	@ 0x54
 800aee6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aeea:	2b30      	cmp	r3, #48	@ 0x30
 800aeec:	d0f8      	beq.n	800aee0 <_dtoa_r+0x650>
 800aeee:	9f04      	ldr	r7, [sp, #16]
 800aef0:	e73e      	b.n	800ad70 <_dtoa_r+0x4e0>
 800aef2:	4b9b      	ldr	r3, [pc, #620]	@ (800b160 <_dtoa_r+0x8d0>)
 800aef4:	f7f5 fc08 	bl	8000708 <__aeabi_dmul>
 800aef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aefc:	e7bc      	b.n	800ae78 <_dtoa_r+0x5e8>
 800aefe:	d10c      	bne.n	800af1a <_dtoa_r+0x68a>
 800af00:	4b98      	ldr	r3, [pc, #608]	@ (800b164 <_dtoa_r+0x8d4>)
 800af02:	2200      	movs	r2, #0
 800af04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af08:	f7f5 fbfe 	bl	8000708 <__aeabi_dmul>
 800af0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af10:	f7f5 fe80 	bl	8000c14 <__aeabi_dcmpge>
 800af14:	2800      	cmp	r0, #0
 800af16:	f000 8157 	beq.w	800b1c8 <_dtoa_r+0x938>
 800af1a:	2400      	movs	r4, #0
 800af1c:	4625      	mov	r5, r4
 800af1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af20:	43db      	mvns	r3, r3
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	4656      	mov	r6, sl
 800af26:	2700      	movs	r7, #0
 800af28:	4621      	mov	r1, r4
 800af2a:	4658      	mov	r0, fp
 800af2c:	f000 fcec 	bl	800b908 <_Bfree>
 800af30:	2d00      	cmp	r5, #0
 800af32:	d0dc      	beq.n	800aeee <_dtoa_r+0x65e>
 800af34:	b12f      	cbz	r7, 800af42 <_dtoa_r+0x6b2>
 800af36:	42af      	cmp	r7, r5
 800af38:	d003      	beq.n	800af42 <_dtoa_r+0x6b2>
 800af3a:	4639      	mov	r1, r7
 800af3c:	4658      	mov	r0, fp
 800af3e:	f000 fce3 	bl	800b908 <_Bfree>
 800af42:	4629      	mov	r1, r5
 800af44:	4658      	mov	r0, fp
 800af46:	f000 fcdf 	bl	800b908 <_Bfree>
 800af4a:	e7d0      	b.n	800aeee <_dtoa_r+0x65e>
 800af4c:	9704      	str	r7, [sp, #16]
 800af4e:	4633      	mov	r3, r6
 800af50:	461e      	mov	r6, r3
 800af52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af56:	2a39      	cmp	r2, #57	@ 0x39
 800af58:	d107      	bne.n	800af6a <_dtoa_r+0x6da>
 800af5a:	459a      	cmp	sl, r3
 800af5c:	d1f8      	bne.n	800af50 <_dtoa_r+0x6c0>
 800af5e:	9a04      	ldr	r2, [sp, #16]
 800af60:	3201      	adds	r2, #1
 800af62:	9204      	str	r2, [sp, #16]
 800af64:	2230      	movs	r2, #48	@ 0x30
 800af66:	f88a 2000 	strb.w	r2, [sl]
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	3201      	adds	r2, #1
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	e7bd      	b.n	800aeee <_dtoa_r+0x65e>
 800af72:	4b7b      	ldr	r3, [pc, #492]	@ (800b160 <_dtoa_r+0x8d0>)
 800af74:	2200      	movs	r2, #0
 800af76:	f7f5 fbc7 	bl	8000708 <__aeabi_dmul>
 800af7a:	2200      	movs	r2, #0
 800af7c:	2300      	movs	r3, #0
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	f7f5 fe29 	bl	8000bd8 <__aeabi_dcmpeq>
 800af86:	2800      	cmp	r0, #0
 800af88:	f43f aebb 	beq.w	800ad02 <_dtoa_r+0x472>
 800af8c:	e6f0      	b.n	800ad70 <_dtoa_r+0x4e0>
 800af8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af90:	2a00      	cmp	r2, #0
 800af92:	f000 80db 	beq.w	800b14c <_dtoa_r+0x8bc>
 800af96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af98:	2a01      	cmp	r2, #1
 800af9a:	f300 80bf 	bgt.w	800b11c <_dtoa_r+0x88c>
 800af9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800afa0:	2a00      	cmp	r2, #0
 800afa2:	f000 80b7 	beq.w	800b114 <_dtoa_r+0x884>
 800afa6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800afaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800afac:	4646      	mov	r6, r8
 800afae:	9a08      	ldr	r2, [sp, #32]
 800afb0:	2101      	movs	r1, #1
 800afb2:	441a      	add	r2, r3
 800afb4:	4658      	mov	r0, fp
 800afb6:	4498      	add	r8, r3
 800afb8:	9208      	str	r2, [sp, #32]
 800afba:	f000 fd59 	bl	800ba70 <__i2b>
 800afbe:	4605      	mov	r5, r0
 800afc0:	b15e      	cbz	r6, 800afda <_dtoa_r+0x74a>
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	dd08      	ble.n	800afda <_dtoa_r+0x74a>
 800afc8:	42b3      	cmp	r3, r6
 800afca:	9a08      	ldr	r2, [sp, #32]
 800afcc:	bfa8      	it	ge
 800afce:	4633      	movge	r3, r6
 800afd0:	eba8 0803 	sub.w	r8, r8, r3
 800afd4:	1af6      	subs	r6, r6, r3
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	9308      	str	r3, [sp, #32]
 800afda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afdc:	b1f3      	cbz	r3, 800b01c <_dtoa_r+0x78c>
 800afde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 80b7 	beq.w	800b154 <_dtoa_r+0x8c4>
 800afe6:	b18c      	cbz	r4, 800b00c <_dtoa_r+0x77c>
 800afe8:	4629      	mov	r1, r5
 800afea:	4622      	mov	r2, r4
 800afec:	4658      	mov	r0, fp
 800afee:	f000 fdff 	bl	800bbf0 <__pow5mult>
 800aff2:	464a      	mov	r2, r9
 800aff4:	4601      	mov	r1, r0
 800aff6:	4605      	mov	r5, r0
 800aff8:	4658      	mov	r0, fp
 800affa:	f000 fd4f 	bl	800ba9c <__multiply>
 800affe:	4649      	mov	r1, r9
 800b000:	9004      	str	r0, [sp, #16]
 800b002:	4658      	mov	r0, fp
 800b004:	f000 fc80 	bl	800b908 <_Bfree>
 800b008:	9b04      	ldr	r3, [sp, #16]
 800b00a:	4699      	mov	r9, r3
 800b00c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b00e:	1b1a      	subs	r2, r3, r4
 800b010:	d004      	beq.n	800b01c <_dtoa_r+0x78c>
 800b012:	4649      	mov	r1, r9
 800b014:	4658      	mov	r0, fp
 800b016:	f000 fdeb 	bl	800bbf0 <__pow5mult>
 800b01a:	4681      	mov	r9, r0
 800b01c:	2101      	movs	r1, #1
 800b01e:	4658      	mov	r0, fp
 800b020:	f000 fd26 	bl	800ba70 <__i2b>
 800b024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b026:	4604      	mov	r4, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 81cf 	beq.w	800b3cc <_dtoa_r+0xb3c>
 800b02e:	461a      	mov	r2, r3
 800b030:	4601      	mov	r1, r0
 800b032:	4658      	mov	r0, fp
 800b034:	f000 fddc 	bl	800bbf0 <__pow5mult>
 800b038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	4604      	mov	r4, r0
 800b03e:	f300 8095 	bgt.w	800b16c <_dtoa_r+0x8dc>
 800b042:	9b02      	ldr	r3, [sp, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 8087 	bne.w	800b158 <_dtoa_r+0x8c8>
 800b04a:	9b03      	ldr	r3, [sp, #12]
 800b04c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b050:	2b00      	cmp	r3, #0
 800b052:	f040 8089 	bne.w	800b168 <_dtoa_r+0x8d8>
 800b056:	9b03      	ldr	r3, [sp, #12]
 800b058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b05c:	0d1b      	lsrs	r3, r3, #20
 800b05e:	051b      	lsls	r3, r3, #20
 800b060:	b12b      	cbz	r3, 800b06e <_dtoa_r+0x7de>
 800b062:	9b08      	ldr	r3, [sp, #32]
 800b064:	3301      	adds	r3, #1
 800b066:	9308      	str	r3, [sp, #32]
 800b068:	f108 0801 	add.w	r8, r8, #1
 800b06c:	2301      	movs	r3, #1
 800b06e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b070:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 81b0 	beq.w	800b3d8 <_dtoa_r+0xb48>
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b07e:	6918      	ldr	r0, [r3, #16]
 800b080:	f000 fcaa 	bl	800b9d8 <__hi0bits>
 800b084:	f1c0 0020 	rsb	r0, r0, #32
 800b088:	9b08      	ldr	r3, [sp, #32]
 800b08a:	4418      	add	r0, r3
 800b08c:	f010 001f 	ands.w	r0, r0, #31
 800b090:	d077      	beq.n	800b182 <_dtoa_r+0x8f2>
 800b092:	f1c0 0320 	rsb	r3, r0, #32
 800b096:	2b04      	cmp	r3, #4
 800b098:	dd6b      	ble.n	800b172 <_dtoa_r+0x8e2>
 800b09a:	9b08      	ldr	r3, [sp, #32]
 800b09c:	f1c0 001c 	rsb	r0, r0, #28
 800b0a0:	4403      	add	r3, r0
 800b0a2:	4480      	add	r8, r0
 800b0a4:	4406      	add	r6, r0
 800b0a6:	9308      	str	r3, [sp, #32]
 800b0a8:	f1b8 0f00 	cmp.w	r8, #0
 800b0ac:	dd05      	ble.n	800b0ba <_dtoa_r+0x82a>
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	4658      	mov	r0, fp
 800b0b4:	f000 fdf6 	bl	800bca4 <__lshift>
 800b0b8:	4681      	mov	r9, r0
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dd05      	ble.n	800b0cc <_dtoa_r+0x83c>
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	4658      	mov	r0, fp
 800b0c6:	f000 fded 	bl	800bca4 <__lshift>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d059      	beq.n	800b186 <_dtoa_r+0x8f6>
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	4648      	mov	r0, r9
 800b0d6:	f000 fe51 	bl	800bd7c <__mcmp>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	da53      	bge.n	800b186 <_dtoa_r+0x8f6>
 800b0de:	1e7b      	subs	r3, r7, #1
 800b0e0:	9304      	str	r3, [sp, #16]
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	220a      	movs	r2, #10
 800b0e8:	4658      	mov	r0, fp
 800b0ea:	f000 fc2f 	bl	800b94c <__multadd>
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0f0:	4681      	mov	r9, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8172 	beq.w	800b3dc <_dtoa_r+0xb4c>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	220a      	movs	r2, #10
 800b0fe:	4658      	mov	r0, fp
 800b100:	f000 fc24 	bl	800b94c <__multadd>
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	4605      	mov	r5, r0
 800b10a:	dc67      	bgt.n	800b1dc <_dtoa_r+0x94c>
 800b10c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b10e:	2b02      	cmp	r3, #2
 800b110:	dc41      	bgt.n	800b196 <_dtoa_r+0x906>
 800b112:	e063      	b.n	800b1dc <_dtoa_r+0x94c>
 800b114:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b116:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b11a:	e746      	b.n	800afaa <_dtoa_r+0x71a>
 800b11c:	9b07      	ldr	r3, [sp, #28]
 800b11e:	1e5c      	subs	r4, r3, #1
 800b120:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b122:	42a3      	cmp	r3, r4
 800b124:	bfbf      	itttt	lt
 800b126:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b128:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b12a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b12c:	1ae3      	sublt	r3, r4, r3
 800b12e:	bfb4      	ite	lt
 800b130:	18d2      	addlt	r2, r2, r3
 800b132:	1b1c      	subge	r4, r3, r4
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	bfbc      	itt	lt
 800b138:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b13a:	2400      	movlt	r4, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bfb5      	itete	lt
 800b140:	eba8 0603 	sublt.w	r6, r8, r3
 800b144:	9b07      	ldrge	r3, [sp, #28]
 800b146:	2300      	movlt	r3, #0
 800b148:	4646      	movge	r6, r8
 800b14a:	e730      	b.n	800afae <_dtoa_r+0x71e>
 800b14c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b14e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b150:	4646      	mov	r6, r8
 800b152:	e735      	b.n	800afc0 <_dtoa_r+0x730>
 800b154:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b156:	e75c      	b.n	800b012 <_dtoa_r+0x782>
 800b158:	2300      	movs	r3, #0
 800b15a:	e788      	b.n	800b06e <_dtoa_r+0x7de>
 800b15c:	3fe00000 	.word	0x3fe00000
 800b160:	40240000 	.word	0x40240000
 800b164:	40140000 	.word	0x40140000
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	e780      	b.n	800b06e <_dtoa_r+0x7de>
 800b16c:	2300      	movs	r3, #0
 800b16e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b170:	e782      	b.n	800b078 <_dtoa_r+0x7e8>
 800b172:	d099      	beq.n	800b0a8 <_dtoa_r+0x818>
 800b174:	9a08      	ldr	r2, [sp, #32]
 800b176:	331c      	adds	r3, #28
 800b178:	441a      	add	r2, r3
 800b17a:	4498      	add	r8, r3
 800b17c:	441e      	add	r6, r3
 800b17e:	9208      	str	r2, [sp, #32]
 800b180:	e792      	b.n	800b0a8 <_dtoa_r+0x818>
 800b182:	4603      	mov	r3, r0
 800b184:	e7f6      	b.n	800b174 <_dtoa_r+0x8e4>
 800b186:	9b07      	ldr	r3, [sp, #28]
 800b188:	9704      	str	r7, [sp, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dc20      	bgt.n	800b1d0 <_dtoa_r+0x940>
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b192:	2b02      	cmp	r3, #2
 800b194:	dd1e      	ble.n	800b1d4 <_dtoa_r+0x944>
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f47f aec0 	bne.w	800af1e <_dtoa_r+0x68e>
 800b19e:	4621      	mov	r1, r4
 800b1a0:	2205      	movs	r2, #5
 800b1a2:	4658      	mov	r0, fp
 800b1a4:	f000 fbd2 	bl	800b94c <__multadd>
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4648      	mov	r0, r9
 800b1ae:	f000 fde5 	bl	800bd7c <__mcmp>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	f77f aeb3 	ble.w	800af1e <_dtoa_r+0x68e>
 800b1b8:	4656      	mov	r6, sl
 800b1ba:	2331      	movs	r3, #49	@ 0x31
 800b1bc:	f806 3b01 	strb.w	r3, [r6], #1
 800b1c0:	9b04      	ldr	r3, [sp, #16]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	e6ae      	b.n	800af26 <_dtoa_r+0x696>
 800b1c8:	9c07      	ldr	r4, [sp, #28]
 800b1ca:	9704      	str	r7, [sp, #16]
 800b1cc:	4625      	mov	r5, r4
 800b1ce:	e7f3      	b.n	800b1b8 <_dtoa_r+0x928>
 800b1d0:	9b07      	ldr	r3, [sp, #28]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f000 8104 	beq.w	800b3e4 <_dtoa_r+0xb54>
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	dd05      	ble.n	800b1ec <_dtoa_r+0x95c>
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	4658      	mov	r0, fp
 800b1e6:	f000 fd5d 	bl	800bca4 <__lshift>
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d05a      	beq.n	800b2a8 <_dtoa_r+0xa18>
 800b1f2:	6869      	ldr	r1, [r5, #4]
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	f000 fb47 	bl	800b888 <_Balloc>
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	b928      	cbnz	r0, 800b20a <_dtoa_r+0x97a>
 800b1fe:	4b84      	ldr	r3, [pc, #528]	@ (800b410 <_dtoa_r+0xb80>)
 800b200:	4602      	mov	r2, r0
 800b202:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b206:	f7ff bb5a 	b.w	800a8be <_dtoa_r+0x2e>
 800b20a:	692a      	ldr	r2, [r5, #16]
 800b20c:	3202      	adds	r2, #2
 800b20e:	0092      	lsls	r2, r2, #2
 800b210:	f105 010c 	add.w	r1, r5, #12
 800b214:	300c      	adds	r0, #12
 800b216:	f7ff faa2 	bl	800a75e <memcpy>
 800b21a:	2201      	movs	r2, #1
 800b21c:	4631      	mov	r1, r6
 800b21e:	4658      	mov	r0, fp
 800b220:	f000 fd40 	bl	800bca4 <__lshift>
 800b224:	f10a 0301 	add.w	r3, sl, #1
 800b228:	9307      	str	r3, [sp, #28]
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	4453      	add	r3, sl
 800b22e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b230:	9b02      	ldr	r3, [sp, #8]
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	462f      	mov	r7, r5
 800b238:	930a      	str	r3, [sp, #40]	@ 0x28
 800b23a:	4605      	mov	r5, r0
 800b23c:	9b07      	ldr	r3, [sp, #28]
 800b23e:	4621      	mov	r1, r4
 800b240:	3b01      	subs	r3, #1
 800b242:	4648      	mov	r0, r9
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	f7ff fa98 	bl	800a77a <quorem>
 800b24a:	4639      	mov	r1, r7
 800b24c:	9002      	str	r0, [sp, #8]
 800b24e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b252:	4648      	mov	r0, r9
 800b254:	f000 fd92 	bl	800bd7c <__mcmp>
 800b258:	462a      	mov	r2, r5
 800b25a:	9008      	str	r0, [sp, #32]
 800b25c:	4621      	mov	r1, r4
 800b25e:	4658      	mov	r0, fp
 800b260:	f000 fda8 	bl	800bdb4 <__mdiff>
 800b264:	68c2      	ldr	r2, [r0, #12]
 800b266:	4606      	mov	r6, r0
 800b268:	bb02      	cbnz	r2, 800b2ac <_dtoa_r+0xa1c>
 800b26a:	4601      	mov	r1, r0
 800b26c:	4648      	mov	r0, r9
 800b26e:	f000 fd85 	bl	800bd7c <__mcmp>
 800b272:	4602      	mov	r2, r0
 800b274:	4631      	mov	r1, r6
 800b276:	4658      	mov	r0, fp
 800b278:	920e      	str	r2, [sp, #56]	@ 0x38
 800b27a:	f000 fb45 	bl	800b908 <_Bfree>
 800b27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b282:	9e07      	ldr	r6, [sp, #28]
 800b284:	ea43 0102 	orr.w	r1, r3, r2
 800b288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b28a:	4319      	orrs	r1, r3
 800b28c:	d110      	bne.n	800b2b0 <_dtoa_r+0xa20>
 800b28e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b292:	d029      	beq.n	800b2e8 <_dtoa_r+0xa58>
 800b294:	9b08      	ldr	r3, [sp, #32]
 800b296:	2b00      	cmp	r3, #0
 800b298:	dd02      	ble.n	800b2a0 <_dtoa_r+0xa10>
 800b29a:	9b02      	ldr	r3, [sp, #8]
 800b29c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b2a0:	9b00      	ldr	r3, [sp, #0]
 800b2a2:	f883 8000 	strb.w	r8, [r3]
 800b2a6:	e63f      	b.n	800af28 <_dtoa_r+0x698>
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	e7bb      	b.n	800b224 <_dtoa_r+0x994>
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	e7e1      	b.n	800b274 <_dtoa_r+0x9e4>
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	db04      	blt.n	800b2c0 <_dtoa_r+0xa30>
 800b2b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2b8:	430b      	orrs	r3, r1
 800b2ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2bc:	430b      	orrs	r3, r1
 800b2be:	d120      	bne.n	800b302 <_dtoa_r+0xa72>
 800b2c0:	2a00      	cmp	r2, #0
 800b2c2:	dded      	ble.n	800b2a0 <_dtoa_r+0xa10>
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	4658      	mov	r0, fp
 800b2ca:	f000 fceb 	bl	800bca4 <__lshift>
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	4681      	mov	r9, r0
 800b2d2:	f000 fd53 	bl	800bd7c <__mcmp>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	dc03      	bgt.n	800b2e2 <_dtoa_r+0xa52>
 800b2da:	d1e1      	bne.n	800b2a0 <_dtoa_r+0xa10>
 800b2dc:	f018 0f01 	tst.w	r8, #1
 800b2e0:	d0de      	beq.n	800b2a0 <_dtoa_r+0xa10>
 800b2e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2e6:	d1d8      	bne.n	800b29a <_dtoa_r+0xa0a>
 800b2e8:	9a00      	ldr	r2, [sp, #0]
 800b2ea:	2339      	movs	r3, #57	@ 0x39
 800b2ec:	7013      	strb	r3, [r2, #0]
 800b2ee:	4633      	mov	r3, r6
 800b2f0:	461e      	mov	r6, r3
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2f8:	2a39      	cmp	r2, #57	@ 0x39
 800b2fa:	d052      	beq.n	800b3a2 <_dtoa_r+0xb12>
 800b2fc:	3201      	adds	r2, #1
 800b2fe:	701a      	strb	r2, [r3, #0]
 800b300:	e612      	b.n	800af28 <_dtoa_r+0x698>
 800b302:	2a00      	cmp	r2, #0
 800b304:	dd07      	ble.n	800b316 <_dtoa_r+0xa86>
 800b306:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b30a:	d0ed      	beq.n	800b2e8 <_dtoa_r+0xa58>
 800b30c:	9a00      	ldr	r2, [sp, #0]
 800b30e:	f108 0301 	add.w	r3, r8, #1
 800b312:	7013      	strb	r3, [r2, #0]
 800b314:	e608      	b.n	800af28 <_dtoa_r+0x698>
 800b316:	9b07      	ldr	r3, [sp, #28]
 800b318:	9a07      	ldr	r2, [sp, #28]
 800b31a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b320:	4293      	cmp	r3, r2
 800b322:	d028      	beq.n	800b376 <_dtoa_r+0xae6>
 800b324:	4649      	mov	r1, r9
 800b326:	2300      	movs	r3, #0
 800b328:	220a      	movs	r2, #10
 800b32a:	4658      	mov	r0, fp
 800b32c:	f000 fb0e 	bl	800b94c <__multadd>
 800b330:	42af      	cmp	r7, r5
 800b332:	4681      	mov	r9, r0
 800b334:	f04f 0300 	mov.w	r3, #0
 800b338:	f04f 020a 	mov.w	r2, #10
 800b33c:	4639      	mov	r1, r7
 800b33e:	4658      	mov	r0, fp
 800b340:	d107      	bne.n	800b352 <_dtoa_r+0xac2>
 800b342:	f000 fb03 	bl	800b94c <__multadd>
 800b346:	4607      	mov	r7, r0
 800b348:	4605      	mov	r5, r0
 800b34a:	9b07      	ldr	r3, [sp, #28]
 800b34c:	3301      	adds	r3, #1
 800b34e:	9307      	str	r3, [sp, #28]
 800b350:	e774      	b.n	800b23c <_dtoa_r+0x9ac>
 800b352:	f000 fafb 	bl	800b94c <__multadd>
 800b356:	4629      	mov	r1, r5
 800b358:	4607      	mov	r7, r0
 800b35a:	2300      	movs	r3, #0
 800b35c:	220a      	movs	r2, #10
 800b35e:	4658      	mov	r0, fp
 800b360:	f000 faf4 	bl	800b94c <__multadd>
 800b364:	4605      	mov	r5, r0
 800b366:	e7f0      	b.n	800b34a <_dtoa_r+0xaba>
 800b368:	9b00      	ldr	r3, [sp, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bfcc      	ite	gt
 800b36e:	461e      	movgt	r6, r3
 800b370:	2601      	movle	r6, #1
 800b372:	4456      	add	r6, sl
 800b374:	2700      	movs	r7, #0
 800b376:	4649      	mov	r1, r9
 800b378:	2201      	movs	r2, #1
 800b37a:	4658      	mov	r0, fp
 800b37c:	f000 fc92 	bl	800bca4 <__lshift>
 800b380:	4621      	mov	r1, r4
 800b382:	4681      	mov	r9, r0
 800b384:	f000 fcfa 	bl	800bd7c <__mcmp>
 800b388:	2800      	cmp	r0, #0
 800b38a:	dcb0      	bgt.n	800b2ee <_dtoa_r+0xa5e>
 800b38c:	d102      	bne.n	800b394 <_dtoa_r+0xb04>
 800b38e:	f018 0f01 	tst.w	r8, #1
 800b392:	d1ac      	bne.n	800b2ee <_dtoa_r+0xa5e>
 800b394:	4633      	mov	r3, r6
 800b396:	461e      	mov	r6, r3
 800b398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b39c:	2a30      	cmp	r2, #48	@ 0x30
 800b39e:	d0fa      	beq.n	800b396 <_dtoa_r+0xb06>
 800b3a0:	e5c2      	b.n	800af28 <_dtoa_r+0x698>
 800b3a2:	459a      	cmp	sl, r3
 800b3a4:	d1a4      	bne.n	800b2f0 <_dtoa_r+0xa60>
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	9304      	str	r3, [sp, #16]
 800b3ac:	2331      	movs	r3, #49	@ 0x31
 800b3ae:	f88a 3000 	strb.w	r3, [sl]
 800b3b2:	e5b9      	b.n	800af28 <_dtoa_r+0x698>
 800b3b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b414 <_dtoa_r+0xb84>
 800b3ba:	b11b      	cbz	r3, 800b3c4 <_dtoa_r+0xb34>
 800b3bc:	f10a 0308 	add.w	r3, sl, #8
 800b3c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b3c2:	6013      	str	r3, [r2, #0]
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	b019      	add	sp, #100	@ 0x64
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	f77f ae37 	ble.w	800b042 <_dtoa_r+0x7b2>
 800b3d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3d8:	2001      	movs	r0, #1
 800b3da:	e655      	b.n	800b088 <_dtoa_r+0x7f8>
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f77f aed6 	ble.w	800b190 <_dtoa_r+0x900>
 800b3e4:	4656      	mov	r6, sl
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	4648      	mov	r0, r9
 800b3ea:	f7ff f9c6 	bl	800a77a <quorem>
 800b3ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3f2:	f806 8b01 	strb.w	r8, [r6], #1
 800b3f6:	9b00      	ldr	r3, [sp, #0]
 800b3f8:	eba6 020a 	sub.w	r2, r6, sl
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	ddb3      	ble.n	800b368 <_dtoa_r+0xad8>
 800b400:	4649      	mov	r1, r9
 800b402:	2300      	movs	r3, #0
 800b404:	220a      	movs	r2, #10
 800b406:	4658      	mov	r0, fp
 800b408:	f000 faa0 	bl	800b94c <__multadd>
 800b40c:	4681      	mov	r9, r0
 800b40e:	e7ea      	b.n	800b3e6 <_dtoa_r+0xb56>
 800b410:	0803aaf8 	.word	0x0803aaf8
 800b414:	0803aa7c 	.word	0x0803aa7c

0800b418 <_free_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4605      	mov	r5, r0
 800b41c:	2900      	cmp	r1, #0
 800b41e:	d041      	beq.n	800b4a4 <_free_r+0x8c>
 800b420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b424:	1f0c      	subs	r4, r1, #4
 800b426:	2b00      	cmp	r3, #0
 800b428:	bfb8      	it	lt
 800b42a:	18e4      	addlt	r4, r4, r3
 800b42c:	f7ff f810 	bl	800a450 <__malloc_lock>
 800b430:	4a1d      	ldr	r2, [pc, #116]	@ (800b4a8 <_free_r+0x90>)
 800b432:	6813      	ldr	r3, [r2, #0]
 800b434:	b933      	cbnz	r3, 800b444 <_free_r+0x2c>
 800b436:	6063      	str	r3, [r4, #4]
 800b438:	6014      	str	r4, [r2, #0]
 800b43a:	4628      	mov	r0, r5
 800b43c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b440:	f7ff b80c 	b.w	800a45c <__malloc_unlock>
 800b444:	42a3      	cmp	r3, r4
 800b446:	d908      	bls.n	800b45a <_free_r+0x42>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	1821      	adds	r1, r4, r0
 800b44c:	428b      	cmp	r3, r1
 800b44e:	bf01      	itttt	eq
 800b450:	6819      	ldreq	r1, [r3, #0]
 800b452:	685b      	ldreq	r3, [r3, #4]
 800b454:	1809      	addeq	r1, r1, r0
 800b456:	6021      	streq	r1, [r4, #0]
 800b458:	e7ed      	b.n	800b436 <_free_r+0x1e>
 800b45a:	461a      	mov	r2, r3
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	b10b      	cbz	r3, 800b464 <_free_r+0x4c>
 800b460:	42a3      	cmp	r3, r4
 800b462:	d9fa      	bls.n	800b45a <_free_r+0x42>
 800b464:	6811      	ldr	r1, [r2, #0]
 800b466:	1850      	adds	r0, r2, r1
 800b468:	42a0      	cmp	r0, r4
 800b46a:	d10b      	bne.n	800b484 <_free_r+0x6c>
 800b46c:	6820      	ldr	r0, [r4, #0]
 800b46e:	4401      	add	r1, r0
 800b470:	1850      	adds	r0, r2, r1
 800b472:	4283      	cmp	r3, r0
 800b474:	6011      	str	r1, [r2, #0]
 800b476:	d1e0      	bne.n	800b43a <_free_r+0x22>
 800b478:	6818      	ldr	r0, [r3, #0]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	6053      	str	r3, [r2, #4]
 800b47e:	4408      	add	r0, r1
 800b480:	6010      	str	r0, [r2, #0]
 800b482:	e7da      	b.n	800b43a <_free_r+0x22>
 800b484:	d902      	bls.n	800b48c <_free_r+0x74>
 800b486:	230c      	movs	r3, #12
 800b488:	602b      	str	r3, [r5, #0]
 800b48a:	e7d6      	b.n	800b43a <_free_r+0x22>
 800b48c:	6820      	ldr	r0, [r4, #0]
 800b48e:	1821      	adds	r1, r4, r0
 800b490:	428b      	cmp	r3, r1
 800b492:	bf04      	itt	eq
 800b494:	6819      	ldreq	r1, [r3, #0]
 800b496:	685b      	ldreq	r3, [r3, #4]
 800b498:	6063      	str	r3, [r4, #4]
 800b49a:	bf04      	itt	eq
 800b49c:	1809      	addeq	r1, r1, r0
 800b49e:	6021      	streq	r1, [r4, #0]
 800b4a0:	6054      	str	r4, [r2, #4]
 800b4a2:	e7ca      	b.n	800b43a <_free_r+0x22>
 800b4a4:	bd38      	pop	{r3, r4, r5, pc}
 800b4a6:	bf00      	nop
 800b4a8:	2002155c 	.word	0x2002155c

0800b4ac <__sfputc_r>:
 800b4ac:	6893      	ldr	r3, [r2, #8]
 800b4ae:	3b01      	subs	r3, #1
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	b410      	push	{r4}
 800b4b4:	6093      	str	r3, [r2, #8]
 800b4b6:	da08      	bge.n	800b4ca <__sfputc_r+0x1e>
 800b4b8:	6994      	ldr	r4, [r2, #24]
 800b4ba:	42a3      	cmp	r3, r4
 800b4bc:	db01      	blt.n	800b4c2 <__sfputc_r+0x16>
 800b4be:	290a      	cmp	r1, #10
 800b4c0:	d103      	bne.n	800b4ca <__sfputc_r+0x1e>
 800b4c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c6:	f000 bda4 	b.w	800c012 <__swbuf_r>
 800b4ca:	6813      	ldr	r3, [r2, #0]
 800b4cc:	1c58      	adds	r0, r3, #1
 800b4ce:	6010      	str	r0, [r2, #0]
 800b4d0:	7019      	strb	r1, [r3, #0]
 800b4d2:	4608      	mov	r0, r1
 800b4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <__sfputs_r>:
 800b4da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4dc:	4606      	mov	r6, r0
 800b4de:	460f      	mov	r7, r1
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	18d5      	adds	r5, r2, r3
 800b4e4:	42ac      	cmp	r4, r5
 800b4e6:	d101      	bne.n	800b4ec <__sfputs_r+0x12>
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	e007      	b.n	800b4fc <__sfputs_r+0x22>
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	463a      	mov	r2, r7
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f7ff ffda 	bl	800b4ac <__sfputc_r>
 800b4f8:	1c43      	adds	r3, r0, #1
 800b4fa:	d1f3      	bne.n	800b4e4 <__sfputs_r+0xa>
 800b4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b500 <_vfiprintf_r>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	460d      	mov	r5, r1
 800b506:	b09d      	sub	sp, #116	@ 0x74
 800b508:	4614      	mov	r4, r2
 800b50a:	4698      	mov	r8, r3
 800b50c:	4606      	mov	r6, r0
 800b50e:	b118      	cbz	r0, 800b518 <_vfiprintf_r+0x18>
 800b510:	6a03      	ldr	r3, [r0, #32]
 800b512:	b90b      	cbnz	r3, 800b518 <_vfiprintf_r+0x18>
 800b514:	f7ff f834 	bl	800a580 <__sinit>
 800b518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b51a:	07d9      	lsls	r1, r3, #31
 800b51c:	d405      	bmi.n	800b52a <_vfiprintf_r+0x2a>
 800b51e:	89ab      	ldrh	r3, [r5, #12]
 800b520:	059a      	lsls	r2, r3, #22
 800b522:	d402      	bmi.n	800b52a <_vfiprintf_r+0x2a>
 800b524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b526:	f7ff f918 	bl	800a75a <__retarget_lock_acquire_recursive>
 800b52a:	89ab      	ldrh	r3, [r5, #12]
 800b52c:	071b      	lsls	r3, r3, #28
 800b52e:	d501      	bpl.n	800b534 <_vfiprintf_r+0x34>
 800b530:	692b      	ldr	r3, [r5, #16]
 800b532:	b99b      	cbnz	r3, 800b55c <_vfiprintf_r+0x5c>
 800b534:	4629      	mov	r1, r5
 800b536:	4630      	mov	r0, r6
 800b538:	f000 fdaa 	bl	800c090 <__swsetup_r>
 800b53c:	b170      	cbz	r0, 800b55c <_vfiprintf_r+0x5c>
 800b53e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b540:	07dc      	lsls	r4, r3, #31
 800b542:	d504      	bpl.n	800b54e <_vfiprintf_r+0x4e>
 800b544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b548:	b01d      	add	sp, #116	@ 0x74
 800b54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54e:	89ab      	ldrh	r3, [r5, #12]
 800b550:	0598      	lsls	r0, r3, #22
 800b552:	d4f7      	bmi.n	800b544 <_vfiprintf_r+0x44>
 800b554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b556:	f7ff f901 	bl	800a75c <__retarget_lock_release_recursive>
 800b55a:	e7f3      	b.n	800b544 <_vfiprintf_r+0x44>
 800b55c:	2300      	movs	r3, #0
 800b55e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b560:	2320      	movs	r3, #32
 800b562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b566:	f8cd 800c 	str.w	r8, [sp, #12]
 800b56a:	2330      	movs	r3, #48	@ 0x30
 800b56c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b71c <_vfiprintf_r+0x21c>
 800b570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b574:	f04f 0901 	mov.w	r9, #1
 800b578:	4623      	mov	r3, r4
 800b57a:	469a      	mov	sl, r3
 800b57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b580:	b10a      	cbz	r2, 800b586 <_vfiprintf_r+0x86>
 800b582:	2a25      	cmp	r2, #37	@ 0x25
 800b584:	d1f9      	bne.n	800b57a <_vfiprintf_r+0x7a>
 800b586:	ebba 0b04 	subs.w	fp, sl, r4
 800b58a:	d00b      	beq.n	800b5a4 <_vfiprintf_r+0xa4>
 800b58c:	465b      	mov	r3, fp
 800b58e:	4622      	mov	r2, r4
 800b590:	4629      	mov	r1, r5
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ffa1 	bl	800b4da <__sfputs_r>
 800b598:	3001      	adds	r0, #1
 800b59a:	f000 80a7 	beq.w	800b6ec <_vfiprintf_r+0x1ec>
 800b59e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5a0:	445a      	add	r2, fp
 800b5a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 809f 	beq.w	800b6ec <_vfiprintf_r+0x1ec>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b8:	f10a 0a01 	add.w	sl, sl, #1
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	9307      	str	r3, [sp, #28]
 800b5c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5c6:	4654      	mov	r4, sl
 800b5c8:	2205      	movs	r2, #5
 800b5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ce:	4853      	ldr	r0, [pc, #332]	@ (800b71c <_vfiprintf_r+0x21c>)
 800b5d0:	f7f4 fe86 	bl	80002e0 <memchr>
 800b5d4:	9a04      	ldr	r2, [sp, #16]
 800b5d6:	b9d8      	cbnz	r0, 800b610 <_vfiprintf_r+0x110>
 800b5d8:	06d1      	lsls	r1, r2, #27
 800b5da:	bf44      	itt	mi
 800b5dc:	2320      	movmi	r3, #32
 800b5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e2:	0713      	lsls	r3, r2, #28
 800b5e4:	bf44      	itt	mi
 800b5e6:	232b      	movmi	r3, #43	@ 0x2b
 800b5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5f2:	d015      	beq.n	800b620 <_vfiprintf_r+0x120>
 800b5f4:	9a07      	ldr	r2, [sp, #28]
 800b5f6:	4654      	mov	r4, sl
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f04f 0c0a 	mov.w	ip, #10
 800b5fe:	4621      	mov	r1, r4
 800b600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b604:	3b30      	subs	r3, #48	@ 0x30
 800b606:	2b09      	cmp	r3, #9
 800b608:	d94b      	bls.n	800b6a2 <_vfiprintf_r+0x1a2>
 800b60a:	b1b0      	cbz	r0, 800b63a <_vfiprintf_r+0x13a>
 800b60c:	9207      	str	r2, [sp, #28]
 800b60e:	e014      	b.n	800b63a <_vfiprintf_r+0x13a>
 800b610:	eba0 0308 	sub.w	r3, r0, r8
 800b614:	fa09 f303 	lsl.w	r3, r9, r3
 800b618:	4313      	orrs	r3, r2
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	46a2      	mov	sl, r4
 800b61e:	e7d2      	b.n	800b5c6 <_vfiprintf_r+0xc6>
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	1d19      	adds	r1, r3, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	9103      	str	r1, [sp, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfbb      	ittet	lt
 800b62c:	425b      	neglt	r3, r3
 800b62e:	f042 0202 	orrlt.w	r2, r2, #2
 800b632:	9307      	strge	r3, [sp, #28]
 800b634:	9307      	strlt	r3, [sp, #28]
 800b636:	bfb8      	it	lt
 800b638:	9204      	strlt	r2, [sp, #16]
 800b63a:	7823      	ldrb	r3, [r4, #0]
 800b63c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b63e:	d10a      	bne.n	800b656 <_vfiprintf_r+0x156>
 800b640:	7863      	ldrb	r3, [r4, #1]
 800b642:	2b2a      	cmp	r3, #42	@ 0x2a
 800b644:	d132      	bne.n	800b6ac <_vfiprintf_r+0x1ac>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	1d1a      	adds	r2, r3, #4
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9203      	str	r2, [sp, #12]
 800b64e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b652:	3402      	adds	r4, #2
 800b654:	9305      	str	r3, [sp, #20]
 800b656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b72c <_vfiprintf_r+0x22c>
 800b65a:	7821      	ldrb	r1, [r4, #0]
 800b65c:	2203      	movs	r2, #3
 800b65e:	4650      	mov	r0, sl
 800b660:	f7f4 fe3e 	bl	80002e0 <memchr>
 800b664:	b138      	cbz	r0, 800b676 <_vfiprintf_r+0x176>
 800b666:	9b04      	ldr	r3, [sp, #16]
 800b668:	eba0 000a 	sub.w	r0, r0, sl
 800b66c:	2240      	movs	r2, #64	@ 0x40
 800b66e:	4082      	lsls	r2, r0
 800b670:	4313      	orrs	r3, r2
 800b672:	3401      	adds	r4, #1
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67a:	4829      	ldr	r0, [pc, #164]	@ (800b720 <_vfiprintf_r+0x220>)
 800b67c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b680:	2206      	movs	r2, #6
 800b682:	f7f4 fe2d 	bl	80002e0 <memchr>
 800b686:	2800      	cmp	r0, #0
 800b688:	d03f      	beq.n	800b70a <_vfiprintf_r+0x20a>
 800b68a:	4b26      	ldr	r3, [pc, #152]	@ (800b724 <_vfiprintf_r+0x224>)
 800b68c:	bb1b      	cbnz	r3, 800b6d6 <_vfiprintf_r+0x1d6>
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	3307      	adds	r3, #7
 800b692:	f023 0307 	bic.w	r3, r3, #7
 800b696:	3308      	adds	r3, #8
 800b698:	9303      	str	r3, [sp, #12]
 800b69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b69c:	443b      	add	r3, r7
 800b69e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6a0:	e76a      	b.n	800b578 <_vfiprintf_r+0x78>
 800b6a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	e7a8      	b.n	800b5fe <_vfiprintf_r+0xfe>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	3401      	adds	r4, #1
 800b6b0:	9305      	str	r3, [sp, #20]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	f04f 0c0a 	mov.w	ip, #10
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6be:	3a30      	subs	r2, #48	@ 0x30
 800b6c0:	2a09      	cmp	r2, #9
 800b6c2:	d903      	bls.n	800b6cc <_vfiprintf_r+0x1cc>
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0c6      	beq.n	800b656 <_vfiprintf_r+0x156>
 800b6c8:	9105      	str	r1, [sp, #20]
 800b6ca:	e7c4      	b.n	800b656 <_vfiprintf_r+0x156>
 800b6cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e7f0      	b.n	800b6b8 <_vfiprintf_r+0x1b8>
 800b6d6:	ab03      	add	r3, sp, #12
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	462a      	mov	r2, r5
 800b6dc:	4b12      	ldr	r3, [pc, #72]	@ (800b728 <_vfiprintf_r+0x228>)
 800b6de:	a904      	add	r1, sp, #16
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7fe fa53 	bl	8009b8c <_printf_float>
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	1c78      	adds	r0, r7, #1
 800b6ea:	d1d6      	bne.n	800b69a <_vfiprintf_r+0x19a>
 800b6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6ee:	07d9      	lsls	r1, r3, #31
 800b6f0:	d405      	bmi.n	800b6fe <_vfiprintf_r+0x1fe>
 800b6f2:	89ab      	ldrh	r3, [r5, #12]
 800b6f4:	059a      	lsls	r2, r3, #22
 800b6f6:	d402      	bmi.n	800b6fe <_vfiprintf_r+0x1fe>
 800b6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6fa:	f7ff f82f 	bl	800a75c <__retarget_lock_release_recursive>
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	065b      	lsls	r3, r3, #25
 800b702:	f53f af1f 	bmi.w	800b544 <_vfiprintf_r+0x44>
 800b706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b708:	e71e      	b.n	800b548 <_vfiprintf_r+0x48>
 800b70a:	ab03      	add	r3, sp, #12
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	462a      	mov	r2, r5
 800b710:	4b05      	ldr	r3, [pc, #20]	@ (800b728 <_vfiprintf_r+0x228>)
 800b712:	a904      	add	r1, sp, #16
 800b714:	4630      	mov	r0, r6
 800b716:	f7fe fd7b 	bl	800a210 <_printf_i>
 800b71a:	e7e4      	b.n	800b6e6 <_vfiprintf_r+0x1e6>
 800b71c:	0803ab09 	.word	0x0803ab09
 800b720:	0803ab13 	.word	0x0803ab13
 800b724:	08009b8d 	.word	0x08009b8d
 800b728:	0800b4db 	.word	0x0800b4db
 800b72c:	0803ab0f 	.word	0x0803ab0f

0800b730 <__sflush_r>:
 800b730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b738:	0716      	lsls	r6, r2, #28
 800b73a:	4605      	mov	r5, r0
 800b73c:	460c      	mov	r4, r1
 800b73e:	d454      	bmi.n	800b7ea <__sflush_r+0xba>
 800b740:	684b      	ldr	r3, [r1, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	dc02      	bgt.n	800b74c <__sflush_r+0x1c>
 800b746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	dd48      	ble.n	800b7de <__sflush_r+0xae>
 800b74c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b74e:	2e00      	cmp	r6, #0
 800b750:	d045      	beq.n	800b7de <__sflush_r+0xae>
 800b752:	2300      	movs	r3, #0
 800b754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b758:	682f      	ldr	r7, [r5, #0]
 800b75a:	6a21      	ldr	r1, [r4, #32]
 800b75c:	602b      	str	r3, [r5, #0]
 800b75e:	d030      	beq.n	800b7c2 <__sflush_r+0x92>
 800b760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	0759      	lsls	r1, r3, #29
 800b766:	d505      	bpl.n	800b774 <__sflush_r+0x44>
 800b768:	6863      	ldr	r3, [r4, #4]
 800b76a:	1ad2      	subs	r2, r2, r3
 800b76c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b76e:	b10b      	cbz	r3, 800b774 <__sflush_r+0x44>
 800b770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b772:	1ad2      	subs	r2, r2, r3
 800b774:	2300      	movs	r3, #0
 800b776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b778:	6a21      	ldr	r1, [r4, #32]
 800b77a:	4628      	mov	r0, r5
 800b77c:	47b0      	blx	r6
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	d106      	bne.n	800b792 <__sflush_r+0x62>
 800b784:	6829      	ldr	r1, [r5, #0]
 800b786:	291d      	cmp	r1, #29
 800b788:	d82b      	bhi.n	800b7e2 <__sflush_r+0xb2>
 800b78a:	4a2a      	ldr	r2, [pc, #168]	@ (800b834 <__sflush_r+0x104>)
 800b78c:	410a      	asrs	r2, r1
 800b78e:	07d6      	lsls	r6, r2, #31
 800b790:	d427      	bmi.n	800b7e2 <__sflush_r+0xb2>
 800b792:	2200      	movs	r2, #0
 800b794:	6062      	str	r2, [r4, #4]
 800b796:	04d9      	lsls	r1, r3, #19
 800b798:	6922      	ldr	r2, [r4, #16]
 800b79a:	6022      	str	r2, [r4, #0]
 800b79c:	d504      	bpl.n	800b7a8 <__sflush_r+0x78>
 800b79e:	1c42      	adds	r2, r0, #1
 800b7a0:	d101      	bne.n	800b7a6 <__sflush_r+0x76>
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	b903      	cbnz	r3, 800b7a8 <__sflush_r+0x78>
 800b7a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7aa:	602f      	str	r7, [r5, #0]
 800b7ac:	b1b9      	cbz	r1, 800b7de <__sflush_r+0xae>
 800b7ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7b2:	4299      	cmp	r1, r3
 800b7b4:	d002      	beq.n	800b7bc <__sflush_r+0x8c>
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f7ff fe2e 	bl	800b418 <_free_r>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7c0:	e00d      	b.n	800b7de <__sflush_r+0xae>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	47b0      	blx	r6
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	1c50      	adds	r0, r2, #1
 800b7cc:	d1c9      	bne.n	800b762 <__sflush_r+0x32>
 800b7ce:	682b      	ldr	r3, [r5, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d0c6      	beq.n	800b762 <__sflush_r+0x32>
 800b7d4:	2b1d      	cmp	r3, #29
 800b7d6:	d001      	beq.n	800b7dc <__sflush_r+0xac>
 800b7d8:	2b16      	cmp	r3, #22
 800b7da:	d11e      	bne.n	800b81a <__sflush_r+0xea>
 800b7dc:	602f      	str	r7, [r5, #0]
 800b7de:	2000      	movs	r0, #0
 800b7e0:	e022      	b.n	800b828 <__sflush_r+0xf8>
 800b7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7e6:	b21b      	sxth	r3, r3
 800b7e8:	e01b      	b.n	800b822 <__sflush_r+0xf2>
 800b7ea:	690f      	ldr	r7, [r1, #16]
 800b7ec:	2f00      	cmp	r7, #0
 800b7ee:	d0f6      	beq.n	800b7de <__sflush_r+0xae>
 800b7f0:	0793      	lsls	r3, r2, #30
 800b7f2:	680e      	ldr	r6, [r1, #0]
 800b7f4:	bf08      	it	eq
 800b7f6:	694b      	ldreq	r3, [r1, #20]
 800b7f8:	600f      	str	r7, [r1, #0]
 800b7fa:	bf18      	it	ne
 800b7fc:	2300      	movne	r3, #0
 800b7fe:	eba6 0807 	sub.w	r8, r6, r7
 800b802:	608b      	str	r3, [r1, #8]
 800b804:	f1b8 0f00 	cmp.w	r8, #0
 800b808:	dde9      	ble.n	800b7de <__sflush_r+0xae>
 800b80a:	6a21      	ldr	r1, [r4, #32]
 800b80c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b80e:	4643      	mov	r3, r8
 800b810:	463a      	mov	r2, r7
 800b812:	4628      	mov	r0, r5
 800b814:	47b0      	blx	r6
 800b816:	2800      	cmp	r0, #0
 800b818:	dc08      	bgt.n	800b82c <__sflush_r+0xfc>
 800b81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b822:	81a3      	strh	r3, [r4, #12]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82c:	4407      	add	r7, r0
 800b82e:	eba8 0800 	sub.w	r8, r8, r0
 800b832:	e7e7      	b.n	800b804 <__sflush_r+0xd4>
 800b834:	dfbffffe 	.word	0xdfbffffe

0800b838 <_fflush_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	4605      	mov	r5, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	b913      	cbnz	r3, 800b848 <_fflush_r+0x10>
 800b842:	2500      	movs	r5, #0
 800b844:	4628      	mov	r0, r5
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	b118      	cbz	r0, 800b852 <_fflush_r+0x1a>
 800b84a:	6a03      	ldr	r3, [r0, #32]
 800b84c:	b90b      	cbnz	r3, 800b852 <_fflush_r+0x1a>
 800b84e:	f7fe fe97 	bl	800a580 <__sinit>
 800b852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0f3      	beq.n	800b842 <_fflush_r+0xa>
 800b85a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b85c:	07d0      	lsls	r0, r2, #31
 800b85e:	d404      	bmi.n	800b86a <_fflush_r+0x32>
 800b860:	0599      	lsls	r1, r3, #22
 800b862:	d402      	bmi.n	800b86a <_fflush_r+0x32>
 800b864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b866:	f7fe ff78 	bl	800a75a <__retarget_lock_acquire_recursive>
 800b86a:	4628      	mov	r0, r5
 800b86c:	4621      	mov	r1, r4
 800b86e:	f7ff ff5f 	bl	800b730 <__sflush_r>
 800b872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b874:	07da      	lsls	r2, r3, #31
 800b876:	4605      	mov	r5, r0
 800b878:	d4e4      	bmi.n	800b844 <_fflush_r+0xc>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	059b      	lsls	r3, r3, #22
 800b87e:	d4e1      	bmi.n	800b844 <_fflush_r+0xc>
 800b880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b882:	f7fe ff6b 	bl	800a75c <__retarget_lock_release_recursive>
 800b886:	e7dd      	b.n	800b844 <_fflush_r+0xc>

0800b888 <_Balloc>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	69c6      	ldr	r6, [r0, #28]
 800b88c:	4604      	mov	r4, r0
 800b88e:	460d      	mov	r5, r1
 800b890:	b976      	cbnz	r6, 800b8b0 <_Balloc+0x28>
 800b892:	2010      	movs	r0, #16
 800b894:	f7fe fba4 	bl	8009fe0 <malloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	61e0      	str	r0, [r4, #28]
 800b89c:	b920      	cbnz	r0, 800b8a8 <_Balloc+0x20>
 800b89e:	4b18      	ldr	r3, [pc, #96]	@ (800b900 <_Balloc+0x78>)
 800b8a0:	4818      	ldr	r0, [pc, #96]	@ (800b904 <_Balloc+0x7c>)
 800b8a2:	216b      	movs	r1, #107	@ 0x6b
 800b8a4:	f000 fd14 	bl	800c2d0 <__assert_func>
 800b8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8ac:	6006      	str	r6, [r0, #0]
 800b8ae:	60c6      	str	r6, [r0, #12]
 800b8b0:	69e6      	ldr	r6, [r4, #28]
 800b8b2:	68f3      	ldr	r3, [r6, #12]
 800b8b4:	b183      	cbz	r3, 800b8d8 <_Balloc+0x50>
 800b8b6:	69e3      	ldr	r3, [r4, #28]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8be:	b9b8      	cbnz	r0, 800b8f0 <_Balloc+0x68>
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b8c6:	1d72      	adds	r2, r6, #5
 800b8c8:	0092      	lsls	r2, r2, #2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 fd1e 	bl	800c30c <_calloc_r>
 800b8d0:	b160      	cbz	r0, 800b8ec <_Balloc+0x64>
 800b8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8d6:	e00e      	b.n	800b8f6 <_Balloc+0x6e>
 800b8d8:	2221      	movs	r2, #33	@ 0x21
 800b8da:	2104      	movs	r1, #4
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fd15 	bl	800c30c <_calloc_r>
 800b8e2:	69e3      	ldr	r3, [r4, #28]
 800b8e4:	60f0      	str	r0, [r6, #12]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <_Balloc+0x2e>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	6802      	ldr	r2, [r0, #0]
 800b8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8fc:	e7f7      	b.n	800b8ee <_Balloc+0x66>
 800b8fe:	bf00      	nop
 800b900:	0803aa89 	.word	0x0803aa89
 800b904:	0803ab1a 	.word	0x0803ab1a

0800b908 <_Bfree>:
 800b908:	b570      	push	{r4, r5, r6, lr}
 800b90a:	69c6      	ldr	r6, [r0, #28]
 800b90c:	4605      	mov	r5, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b976      	cbnz	r6, 800b930 <_Bfree+0x28>
 800b912:	2010      	movs	r0, #16
 800b914:	f7fe fb64 	bl	8009fe0 <malloc>
 800b918:	4602      	mov	r2, r0
 800b91a:	61e8      	str	r0, [r5, #28]
 800b91c:	b920      	cbnz	r0, 800b928 <_Bfree+0x20>
 800b91e:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <_Bfree+0x3c>)
 800b920:	4809      	ldr	r0, [pc, #36]	@ (800b948 <_Bfree+0x40>)
 800b922:	218f      	movs	r1, #143	@ 0x8f
 800b924:	f000 fcd4 	bl	800c2d0 <__assert_func>
 800b928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b92c:	6006      	str	r6, [r0, #0]
 800b92e:	60c6      	str	r6, [r0, #12]
 800b930:	b13c      	cbz	r4, 800b942 <_Bfree+0x3a>
 800b932:	69eb      	ldr	r3, [r5, #28]
 800b934:	6862      	ldr	r2, [r4, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b93c:	6021      	str	r1, [r4, #0]
 800b93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	0803aa89 	.word	0x0803aa89
 800b948:	0803ab1a 	.word	0x0803ab1a

0800b94c <__multadd>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	690d      	ldr	r5, [r1, #16]
 800b952:	4607      	mov	r7, r0
 800b954:	460c      	mov	r4, r1
 800b956:	461e      	mov	r6, r3
 800b958:	f101 0c14 	add.w	ip, r1, #20
 800b95c:	2000      	movs	r0, #0
 800b95e:	f8dc 3000 	ldr.w	r3, [ip]
 800b962:	b299      	uxth	r1, r3
 800b964:	fb02 6101 	mla	r1, r2, r1, r6
 800b968:	0c1e      	lsrs	r6, r3, #16
 800b96a:	0c0b      	lsrs	r3, r1, #16
 800b96c:	fb02 3306 	mla	r3, r2, r6, r3
 800b970:	b289      	uxth	r1, r1
 800b972:	3001      	adds	r0, #1
 800b974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b978:	4285      	cmp	r5, r0
 800b97a:	f84c 1b04 	str.w	r1, [ip], #4
 800b97e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b982:	dcec      	bgt.n	800b95e <__multadd+0x12>
 800b984:	b30e      	cbz	r6, 800b9ca <__multadd+0x7e>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dc19      	bgt.n	800b9c0 <__multadd+0x74>
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4638      	mov	r0, r7
 800b990:	3101      	adds	r1, #1
 800b992:	f7ff ff79 	bl	800b888 <_Balloc>
 800b996:	4680      	mov	r8, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <__multadd+0x5a>
 800b99a:	4602      	mov	r2, r0
 800b99c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d0 <__multadd+0x84>)
 800b99e:	480d      	ldr	r0, [pc, #52]	@ (800b9d4 <__multadd+0x88>)
 800b9a0:	21ba      	movs	r1, #186	@ 0xba
 800b9a2:	f000 fc95 	bl	800c2d0 <__assert_func>
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	3202      	adds	r2, #2
 800b9aa:	f104 010c 	add.w	r1, r4, #12
 800b9ae:	0092      	lsls	r2, r2, #2
 800b9b0:	300c      	adds	r0, #12
 800b9b2:	f7fe fed4 	bl	800a75e <memcpy>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ffa5 	bl	800b908 <_Bfree>
 800b9be:	4644      	mov	r4, r8
 800b9c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9c4:	3501      	adds	r5, #1
 800b9c6:	615e      	str	r6, [r3, #20]
 800b9c8:	6125      	str	r5, [r4, #16]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d0:	0803aaf8 	.word	0x0803aaf8
 800b9d4:	0803ab1a 	.word	0x0803ab1a

0800b9d8 <__hi0bits>:
 800b9d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9dc:	4603      	mov	r3, r0
 800b9de:	bf36      	itet	cc
 800b9e0:	0403      	lslcc	r3, r0, #16
 800b9e2:	2000      	movcs	r0, #0
 800b9e4:	2010      	movcc	r0, #16
 800b9e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ea:	bf3c      	itt	cc
 800b9ec:	021b      	lslcc	r3, r3, #8
 800b9ee:	3008      	addcc	r0, #8
 800b9f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9f4:	bf3c      	itt	cc
 800b9f6:	011b      	lslcc	r3, r3, #4
 800b9f8:	3004      	addcc	r0, #4
 800b9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9fe:	bf3c      	itt	cc
 800ba00:	009b      	lslcc	r3, r3, #2
 800ba02:	3002      	addcc	r0, #2
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	db05      	blt.n	800ba14 <__hi0bits+0x3c>
 800ba08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba0c:	f100 0001 	add.w	r0, r0, #1
 800ba10:	bf08      	it	eq
 800ba12:	2020      	moveq	r0, #32
 800ba14:	4770      	bx	lr

0800ba16 <__lo0bits>:
 800ba16:	6803      	ldr	r3, [r0, #0]
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f013 0007 	ands.w	r0, r3, #7
 800ba1e:	d00b      	beq.n	800ba38 <__lo0bits+0x22>
 800ba20:	07d9      	lsls	r1, r3, #31
 800ba22:	d421      	bmi.n	800ba68 <__lo0bits+0x52>
 800ba24:	0798      	lsls	r0, r3, #30
 800ba26:	bf49      	itett	mi
 800ba28:	085b      	lsrmi	r3, r3, #1
 800ba2a:	089b      	lsrpl	r3, r3, #2
 800ba2c:	2001      	movmi	r0, #1
 800ba2e:	6013      	strmi	r3, [r2, #0]
 800ba30:	bf5c      	itt	pl
 800ba32:	6013      	strpl	r3, [r2, #0]
 800ba34:	2002      	movpl	r0, #2
 800ba36:	4770      	bx	lr
 800ba38:	b299      	uxth	r1, r3
 800ba3a:	b909      	cbnz	r1, 800ba40 <__lo0bits+0x2a>
 800ba3c:	0c1b      	lsrs	r3, r3, #16
 800ba3e:	2010      	movs	r0, #16
 800ba40:	b2d9      	uxtb	r1, r3
 800ba42:	b909      	cbnz	r1, 800ba48 <__lo0bits+0x32>
 800ba44:	3008      	adds	r0, #8
 800ba46:	0a1b      	lsrs	r3, r3, #8
 800ba48:	0719      	lsls	r1, r3, #28
 800ba4a:	bf04      	itt	eq
 800ba4c:	091b      	lsreq	r3, r3, #4
 800ba4e:	3004      	addeq	r0, #4
 800ba50:	0799      	lsls	r1, r3, #30
 800ba52:	bf04      	itt	eq
 800ba54:	089b      	lsreq	r3, r3, #2
 800ba56:	3002      	addeq	r0, #2
 800ba58:	07d9      	lsls	r1, r3, #31
 800ba5a:	d403      	bmi.n	800ba64 <__lo0bits+0x4e>
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	f100 0001 	add.w	r0, r0, #1
 800ba62:	d003      	beq.n	800ba6c <__lo0bits+0x56>
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	4770      	bx	lr
 800ba68:	2000      	movs	r0, #0
 800ba6a:	4770      	bx	lr
 800ba6c:	2020      	movs	r0, #32
 800ba6e:	4770      	bx	lr

0800ba70 <__i2b>:
 800ba70:	b510      	push	{r4, lr}
 800ba72:	460c      	mov	r4, r1
 800ba74:	2101      	movs	r1, #1
 800ba76:	f7ff ff07 	bl	800b888 <_Balloc>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	b928      	cbnz	r0, 800ba8a <__i2b+0x1a>
 800ba7e:	4b05      	ldr	r3, [pc, #20]	@ (800ba94 <__i2b+0x24>)
 800ba80:	4805      	ldr	r0, [pc, #20]	@ (800ba98 <__i2b+0x28>)
 800ba82:	f240 1145 	movw	r1, #325	@ 0x145
 800ba86:	f000 fc23 	bl	800c2d0 <__assert_func>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	6144      	str	r4, [r0, #20]
 800ba8e:	6103      	str	r3, [r0, #16]
 800ba90:	bd10      	pop	{r4, pc}
 800ba92:	bf00      	nop
 800ba94:	0803aaf8 	.word	0x0803aaf8
 800ba98:	0803ab1a 	.word	0x0803ab1a

0800ba9c <__multiply>:
 800ba9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	4614      	mov	r4, r2
 800baa2:	690a      	ldr	r2, [r1, #16]
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	bfa8      	it	ge
 800baaa:	4623      	movge	r3, r4
 800baac:	460f      	mov	r7, r1
 800baae:	bfa4      	itt	ge
 800bab0:	460c      	movge	r4, r1
 800bab2:	461f      	movge	r7, r3
 800bab4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bab8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800babc:	68a3      	ldr	r3, [r4, #8]
 800babe:	6861      	ldr	r1, [r4, #4]
 800bac0:	eb0a 0609 	add.w	r6, sl, r9
 800bac4:	42b3      	cmp	r3, r6
 800bac6:	b085      	sub	sp, #20
 800bac8:	bfb8      	it	lt
 800baca:	3101      	addlt	r1, #1
 800bacc:	f7ff fedc 	bl	800b888 <_Balloc>
 800bad0:	b930      	cbnz	r0, 800bae0 <__multiply+0x44>
 800bad2:	4602      	mov	r2, r0
 800bad4:	4b44      	ldr	r3, [pc, #272]	@ (800bbe8 <__multiply+0x14c>)
 800bad6:	4845      	ldr	r0, [pc, #276]	@ (800bbec <__multiply+0x150>)
 800bad8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800badc:	f000 fbf8 	bl	800c2d0 <__assert_func>
 800bae0:	f100 0514 	add.w	r5, r0, #20
 800bae4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bae8:	462b      	mov	r3, r5
 800baea:	2200      	movs	r2, #0
 800baec:	4543      	cmp	r3, r8
 800baee:	d321      	bcc.n	800bb34 <__multiply+0x98>
 800baf0:	f107 0114 	add.w	r1, r7, #20
 800baf4:	f104 0214 	add.w	r2, r4, #20
 800baf8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bafc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bb00:	9302      	str	r3, [sp, #8]
 800bb02:	1b13      	subs	r3, r2, r4
 800bb04:	3b15      	subs	r3, #21
 800bb06:	f023 0303 	bic.w	r3, r3, #3
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	f104 0715 	add.w	r7, r4, #21
 800bb10:	42ba      	cmp	r2, r7
 800bb12:	bf38      	it	cc
 800bb14:	2304      	movcc	r3, #4
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	9b02      	ldr	r3, [sp, #8]
 800bb1a:	9103      	str	r1, [sp, #12]
 800bb1c:	428b      	cmp	r3, r1
 800bb1e:	d80c      	bhi.n	800bb3a <__multiply+0x9e>
 800bb20:	2e00      	cmp	r6, #0
 800bb22:	dd03      	ble.n	800bb2c <__multiply+0x90>
 800bb24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d05b      	beq.n	800bbe4 <__multiply+0x148>
 800bb2c:	6106      	str	r6, [r0, #16]
 800bb2e:	b005      	add	sp, #20
 800bb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb34:	f843 2b04 	str.w	r2, [r3], #4
 800bb38:	e7d8      	b.n	800baec <__multiply+0x50>
 800bb3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb3e:	f1ba 0f00 	cmp.w	sl, #0
 800bb42:	d024      	beq.n	800bb8e <__multiply+0xf2>
 800bb44:	f104 0e14 	add.w	lr, r4, #20
 800bb48:	46a9      	mov	r9, r5
 800bb4a:	f04f 0c00 	mov.w	ip, #0
 800bb4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb52:	f8d9 3000 	ldr.w	r3, [r9]
 800bb56:	fa1f fb87 	uxth.w	fp, r7
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bb64:	f8d9 7000 	ldr.w	r7, [r9]
 800bb68:	4463      	add	r3, ip
 800bb6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb6e:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb7c:	4572      	cmp	r2, lr
 800bb7e:	f849 3b04 	str.w	r3, [r9], #4
 800bb82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb86:	d8e2      	bhi.n	800bb4e <__multiply+0xb2>
 800bb88:	9b01      	ldr	r3, [sp, #4]
 800bb8a:	f845 c003 	str.w	ip, [r5, r3]
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb94:	3104      	adds	r1, #4
 800bb96:	f1b9 0f00 	cmp.w	r9, #0
 800bb9a:	d021      	beq.n	800bbe0 <__multiply+0x144>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	f104 0c14 	add.w	ip, r4, #20
 800bba2:	46ae      	mov	lr, r5
 800bba4:	f04f 0a00 	mov.w	sl, #0
 800bba8:	f8bc b000 	ldrh.w	fp, [ip]
 800bbac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bbb0:	fb09 770b 	mla	r7, r9, fp, r7
 800bbb4:	4457      	add	r7, sl
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bbbc:	f84e 3b04 	str.w	r3, [lr], #4
 800bbc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bbc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbc8:	f8be 3000 	ldrh.w	r3, [lr]
 800bbcc:	fb09 330a 	mla	r3, r9, sl, r3
 800bbd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bbd4:	4562      	cmp	r2, ip
 800bbd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbda:	d8e5      	bhi.n	800bba8 <__multiply+0x10c>
 800bbdc:	9f01      	ldr	r7, [sp, #4]
 800bbde:	51eb      	str	r3, [r5, r7]
 800bbe0:	3504      	adds	r5, #4
 800bbe2:	e799      	b.n	800bb18 <__multiply+0x7c>
 800bbe4:	3e01      	subs	r6, #1
 800bbe6:	e79b      	b.n	800bb20 <__multiply+0x84>
 800bbe8:	0803aaf8 	.word	0x0803aaf8
 800bbec:	0803ab1a 	.word	0x0803ab1a

0800bbf0 <__pow5mult>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	4615      	mov	r5, r2
 800bbf6:	f012 0203 	ands.w	r2, r2, #3
 800bbfa:	4607      	mov	r7, r0
 800bbfc:	460e      	mov	r6, r1
 800bbfe:	d007      	beq.n	800bc10 <__pow5mult+0x20>
 800bc00:	4c25      	ldr	r4, [pc, #148]	@ (800bc98 <__pow5mult+0xa8>)
 800bc02:	3a01      	subs	r2, #1
 800bc04:	2300      	movs	r3, #0
 800bc06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc0a:	f7ff fe9f 	bl	800b94c <__multadd>
 800bc0e:	4606      	mov	r6, r0
 800bc10:	10ad      	asrs	r5, r5, #2
 800bc12:	d03d      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc14:	69fc      	ldr	r4, [r7, #28]
 800bc16:	b97c      	cbnz	r4, 800bc38 <__pow5mult+0x48>
 800bc18:	2010      	movs	r0, #16
 800bc1a:	f7fe f9e1 	bl	8009fe0 <malloc>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	61f8      	str	r0, [r7, #28]
 800bc22:	b928      	cbnz	r0, 800bc30 <__pow5mult+0x40>
 800bc24:	4b1d      	ldr	r3, [pc, #116]	@ (800bc9c <__pow5mult+0xac>)
 800bc26:	481e      	ldr	r0, [pc, #120]	@ (800bca0 <__pow5mult+0xb0>)
 800bc28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc2c:	f000 fb50 	bl	800c2d0 <__assert_func>
 800bc30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc34:	6004      	str	r4, [r0, #0]
 800bc36:	60c4      	str	r4, [r0, #12]
 800bc38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc40:	b94c      	cbnz	r4, 800bc56 <__pow5mult+0x66>
 800bc42:	f240 2171 	movw	r1, #625	@ 0x271
 800bc46:	4638      	mov	r0, r7
 800bc48:	f7ff ff12 	bl	800ba70 <__i2b>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc52:	4604      	mov	r4, r0
 800bc54:	6003      	str	r3, [r0, #0]
 800bc56:	f04f 0900 	mov.w	r9, #0
 800bc5a:	07eb      	lsls	r3, r5, #31
 800bc5c:	d50a      	bpl.n	800bc74 <__pow5mult+0x84>
 800bc5e:	4631      	mov	r1, r6
 800bc60:	4622      	mov	r2, r4
 800bc62:	4638      	mov	r0, r7
 800bc64:	f7ff ff1a 	bl	800ba9c <__multiply>
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	4638      	mov	r0, r7
 800bc6e:	f7ff fe4b 	bl	800b908 <_Bfree>
 800bc72:	4646      	mov	r6, r8
 800bc74:	106d      	asrs	r5, r5, #1
 800bc76:	d00b      	beq.n	800bc90 <__pow5mult+0xa0>
 800bc78:	6820      	ldr	r0, [r4, #0]
 800bc7a:	b938      	cbnz	r0, 800bc8c <__pow5mult+0x9c>
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4621      	mov	r1, r4
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ff0b 	bl	800ba9c <__multiply>
 800bc86:	6020      	str	r0, [r4, #0]
 800bc88:	f8c0 9000 	str.w	r9, [r0]
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	e7e4      	b.n	800bc5a <__pow5mult+0x6a>
 800bc90:	4630      	mov	r0, r6
 800bc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc96:	bf00      	nop
 800bc98:	0803ab74 	.word	0x0803ab74
 800bc9c:	0803aa89 	.word	0x0803aa89
 800bca0:	0803ab1a 	.word	0x0803ab1a

0800bca4 <__lshift>:
 800bca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bca8:	460c      	mov	r4, r1
 800bcaa:	6849      	ldr	r1, [r1, #4]
 800bcac:	6923      	ldr	r3, [r4, #16]
 800bcae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	4691      	mov	r9, r2
 800bcb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcbc:	f108 0601 	add.w	r6, r8, #1
 800bcc0:	42b3      	cmp	r3, r6
 800bcc2:	db0b      	blt.n	800bcdc <__lshift+0x38>
 800bcc4:	4638      	mov	r0, r7
 800bcc6:	f7ff fddf 	bl	800b888 <_Balloc>
 800bcca:	4605      	mov	r5, r0
 800bccc:	b948      	cbnz	r0, 800bce2 <__lshift+0x3e>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	4b28      	ldr	r3, [pc, #160]	@ (800bd74 <__lshift+0xd0>)
 800bcd2:	4829      	ldr	r0, [pc, #164]	@ (800bd78 <__lshift+0xd4>)
 800bcd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcd8:	f000 fafa 	bl	800c2d0 <__assert_func>
 800bcdc:	3101      	adds	r1, #1
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	e7ee      	b.n	800bcc0 <__lshift+0x1c>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f100 0114 	add.w	r1, r0, #20
 800bce8:	f100 0210 	add.w	r2, r0, #16
 800bcec:	4618      	mov	r0, r3
 800bcee:	4553      	cmp	r3, sl
 800bcf0:	db33      	blt.n	800bd5a <__lshift+0xb6>
 800bcf2:	6920      	ldr	r0, [r4, #16]
 800bcf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcf8:	f104 0314 	add.w	r3, r4, #20
 800bcfc:	f019 091f 	ands.w	r9, r9, #31
 800bd00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd08:	d02b      	beq.n	800bd62 <__lshift+0xbe>
 800bd0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bd0e:	468a      	mov	sl, r1
 800bd10:	2200      	movs	r2, #0
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	fa00 f009 	lsl.w	r0, r0, r9
 800bd18:	4310      	orrs	r0, r2
 800bd1a:	f84a 0b04 	str.w	r0, [sl], #4
 800bd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd22:	459c      	cmp	ip, r3
 800bd24:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd28:	d8f3      	bhi.n	800bd12 <__lshift+0x6e>
 800bd2a:	ebac 0304 	sub.w	r3, ip, r4
 800bd2e:	3b15      	subs	r3, #21
 800bd30:	f023 0303 	bic.w	r3, r3, #3
 800bd34:	3304      	adds	r3, #4
 800bd36:	f104 0015 	add.w	r0, r4, #21
 800bd3a:	4584      	cmp	ip, r0
 800bd3c:	bf38      	it	cc
 800bd3e:	2304      	movcc	r3, #4
 800bd40:	50ca      	str	r2, [r1, r3]
 800bd42:	b10a      	cbz	r2, 800bd48 <__lshift+0xa4>
 800bd44:	f108 0602 	add.w	r6, r8, #2
 800bd48:	3e01      	subs	r6, #1
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	612e      	str	r6, [r5, #16]
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f7ff fdda 	bl	800b908 <_Bfree>
 800bd54:	4628      	mov	r0, r5
 800bd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd5e:	3301      	adds	r3, #1
 800bd60:	e7c5      	b.n	800bcee <__lshift+0x4a>
 800bd62:	3904      	subs	r1, #4
 800bd64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd68:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd6c:	459c      	cmp	ip, r3
 800bd6e:	d8f9      	bhi.n	800bd64 <__lshift+0xc0>
 800bd70:	e7ea      	b.n	800bd48 <__lshift+0xa4>
 800bd72:	bf00      	nop
 800bd74:	0803aaf8 	.word	0x0803aaf8
 800bd78:	0803ab1a 	.word	0x0803ab1a

0800bd7c <__mcmp>:
 800bd7c:	690a      	ldr	r2, [r1, #16]
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6900      	ldr	r0, [r0, #16]
 800bd82:	1a80      	subs	r0, r0, r2
 800bd84:	b530      	push	{r4, r5, lr}
 800bd86:	d10e      	bne.n	800bda6 <__mcmp+0x2a>
 800bd88:	3314      	adds	r3, #20
 800bd8a:	3114      	adds	r1, #20
 800bd8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd9c:	4295      	cmp	r5, r2
 800bd9e:	d003      	beq.n	800bda8 <__mcmp+0x2c>
 800bda0:	d205      	bcs.n	800bdae <__mcmp+0x32>
 800bda2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bda6:	bd30      	pop	{r4, r5, pc}
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	d3f3      	bcc.n	800bd94 <__mcmp+0x18>
 800bdac:	e7fb      	b.n	800bda6 <__mcmp+0x2a>
 800bdae:	2001      	movs	r0, #1
 800bdb0:	e7f9      	b.n	800bda6 <__mcmp+0x2a>
	...

0800bdb4 <__mdiff>:
 800bdb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	4689      	mov	r9, r1
 800bdba:	4606      	mov	r6, r0
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	4648      	mov	r0, r9
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	f7ff ffdb 	bl	800bd7c <__mcmp>
 800bdc6:	1e05      	subs	r5, r0, #0
 800bdc8:	d112      	bne.n	800bdf0 <__mdiff+0x3c>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f7ff fd5b 	bl	800b888 <_Balloc>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	b928      	cbnz	r0, 800bde2 <__mdiff+0x2e>
 800bdd6:	4b3f      	ldr	r3, [pc, #252]	@ (800bed4 <__mdiff+0x120>)
 800bdd8:	f240 2137 	movw	r1, #567	@ 0x237
 800bddc:	483e      	ldr	r0, [pc, #248]	@ (800bed8 <__mdiff+0x124>)
 800bdde:	f000 fa77 	bl	800c2d0 <__assert_func>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bde8:	4610      	mov	r0, r2
 800bdea:	b003      	add	sp, #12
 800bdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf0:	bfbc      	itt	lt
 800bdf2:	464b      	movlt	r3, r9
 800bdf4:	46a1      	movlt	r9, r4
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdfc:	bfba      	itte	lt
 800bdfe:	461c      	movlt	r4, r3
 800be00:	2501      	movlt	r5, #1
 800be02:	2500      	movge	r5, #0
 800be04:	f7ff fd40 	bl	800b888 <_Balloc>
 800be08:	4602      	mov	r2, r0
 800be0a:	b918      	cbnz	r0, 800be14 <__mdiff+0x60>
 800be0c:	4b31      	ldr	r3, [pc, #196]	@ (800bed4 <__mdiff+0x120>)
 800be0e:	f240 2145 	movw	r1, #581	@ 0x245
 800be12:	e7e3      	b.n	800bddc <__mdiff+0x28>
 800be14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be18:	6926      	ldr	r6, [r4, #16]
 800be1a:	60c5      	str	r5, [r0, #12]
 800be1c:	f109 0310 	add.w	r3, r9, #16
 800be20:	f109 0514 	add.w	r5, r9, #20
 800be24:	f104 0e14 	add.w	lr, r4, #20
 800be28:	f100 0b14 	add.w	fp, r0, #20
 800be2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be34:	9301      	str	r3, [sp, #4]
 800be36:	46d9      	mov	r9, fp
 800be38:	f04f 0c00 	mov.w	ip, #0
 800be3c:	9b01      	ldr	r3, [sp, #4]
 800be3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	fa1f f38a 	uxth.w	r3, sl
 800be4c:	4619      	mov	r1, r3
 800be4e:	b283      	uxth	r3, r0
 800be50:	1acb      	subs	r3, r1, r3
 800be52:	0c00      	lsrs	r0, r0, #16
 800be54:	4463      	add	r3, ip
 800be56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be5e:	b29b      	uxth	r3, r3
 800be60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be64:	4576      	cmp	r6, lr
 800be66:	f849 3b04 	str.w	r3, [r9], #4
 800be6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be6e:	d8e5      	bhi.n	800be3c <__mdiff+0x88>
 800be70:	1b33      	subs	r3, r6, r4
 800be72:	3b15      	subs	r3, #21
 800be74:	f023 0303 	bic.w	r3, r3, #3
 800be78:	3415      	adds	r4, #21
 800be7a:	3304      	adds	r3, #4
 800be7c:	42a6      	cmp	r6, r4
 800be7e:	bf38      	it	cc
 800be80:	2304      	movcc	r3, #4
 800be82:	441d      	add	r5, r3
 800be84:	445b      	add	r3, fp
 800be86:	461e      	mov	r6, r3
 800be88:	462c      	mov	r4, r5
 800be8a:	4544      	cmp	r4, r8
 800be8c:	d30e      	bcc.n	800beac <__mdiff+0xf8>
 800be8e:	f108 0103 	add.w	r1, r8, #3
 800be92:	1b49      	subs	r1, r1, r5
 800be94:	f021 0103 	bic.w	r1, r1, #3
 800be98:	3d03      	subs	r5, #3
 800be9a:	45a8      	cmp	r8, r5
 800be9c:	bf38      	it	cc
 800be9e:	2100      	movcc	r1, #0
 800bea0:	440b      	add	r3, r1
 800bea2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bea6:	b191      	cbz	r1, 800bece <__mdiff+0x11a>
 800bea8:	6117      	str	r7, [r2, #16]
 800beaa:	e79d      	b.n	800bde8 <__mdiff+0x34>
 800beac:	f854 1b04 	ldr.w	r1, [r4], #4
 800beb0:	46e6      	mov	lr, ip
 800beb2:	0c08      	lsrs	r0, r1, #16
 800beb4:	fa1c fc81 	uxtah	ip, ip, r1
 800beb8:	4471      	add	r1, lr
 800beba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bebe:	b289      	uxth	r1, r1
 800bec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bec4:	f846 1b04 	str.w	r1, [r6], #4
 800bec8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800becc:	e7dd      	b.n	800be8a <__mdiff+0xd6>
 800bece:	3f01      	subs	r7, #1
 800bed0:	e7e7      	b.n	800bea2 <__mdiff+0xee>
 800bed2:	bf00      	nop
 800bed4:	0803aaf8 	.word	0x0803aaf8
 800bed8:	0803ab1a 	.word	0x0803ab1a

0800bedc <__d2b>:
 800bedc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee0:	460f      	mov	r7, r1
 800bee2:	2101      	movs	r1, #1
 800bee4:	ec59 8b10 	vmov	r8, r9, d0
 800bee8:	4616      	mov	r6, r2
 800beea:	f7ff fccd 	bl	800b888 <_Balloc>
 800beee:	4604      	mov	r4, r0
 800bef0:	b930      	cbnz	r0, 800bf00 <__d2b+0x24>
 800bef2:	4602      	mov	r2, r0
 800bef4:	4b23      	ldr	r3, [pc, #140]	@ (800bf84 <__d2b+0xa8>)
 800bef6:	4824      	ldr	r0, [pc, #144]	@ (800bf88 <__d2b+0xac>)
 800bef8:	f240 310f 	movw	r1, #783	@ 0x30f
 800befc:	f000 f9e8 	bl	800c2d0 <__assert_func>
 800bf00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf08:	b10d      	cbz	r5, 800bf0e <__d2b+0x32>
 800bf0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	f1b8 0300 	subs.w	r3, r8, #0
 800bf14:	d023      	beq.n	800bf5e <__d2b+0x82>
 800bf16:	4668      	mov	r0, sp
 800bf18:	9300      	str	r3, [sp, #0]
 800bf1a:	f7ff fd7c 	bl	800ba16 <__lo0bits>
 800bf1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf22:	b1d0      	cbz	r0, 800bf5a <__d2b+0x7e>
 800bf24:	f1c0 0320 	rsb	r3, r0, #32
 800bf28:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2c:	430b      	orrs	r3, r1
 800bf2e:	40c2      	lsrs	r2, r0
 800bf30:	6163      	str	r3, [r4, #20]
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9b01      	ldr	r3, [sp, #4]
 800bf36:	61a3      	str	r3, [r4, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bf0c      	ite	eq
 800bf3c:	2201      	moveq	r2, #1
 800bf3e:	2202      	movne	r2, #2
 800bf40:	6122      	str	r2, [r4, #16]
 800bf42:	b1a5      	cbz	r5, 800bf6e <__d2b+0x92>
 800bf44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf48:	4405      	add	r5, r0
 800bf4a:	603d      	str	r5, [r7, #0]
 800bf4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf50:	6030      	str	r0, [r6, #0]
 800bf52:	4620      	mov	r0, r4
 800bf54:	b003      	add	sp, #12
 800bf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf5a:	6161      	str	r1, [r4, #20]
 800bf5c:	e7ea      	b.n	800bf34 <__d2b+0x58>
 800bf5e:	a801      	add	r0, sp, #4
 800bf60:	f7ff fd59 	bl	800ba16 <__lo0bits>
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	6163      	str	r3, [r4, #20]
 800bf68:	3020      	adds	r0, #32
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	e7e8      	b.n	800bf40 <__d2b+0x64>
 800bf6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf76:	6038      	str	r0, [r7, #0]
 800bf78:	6918      	ldr	r0, [r3, #16]
 800bf7a:	f7ff fd2d 	bl	800b9d8 <__hi0bits>
 800bf7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf82:	e7e5      	b.n	800bf50 <__d2b+0x74>
 800bf84:	0803aaf8 	.word	0x0803aaf8
 800bf88:	0803ab1a 	.word	0x0803ab1a

0800bf8c <__sread>:
 800bf8c:	b510      	push	{r4, lr}
 800bf8e:	460c      	mov	r4, r1
 800bf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf94:	f000 f978 	bl	800c288 <_read_r>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	bfab      	itete	ge
 800bf9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf9e:	89a3      	ldrhlt	r3, [r4, #12]
 800bfa0:	181b      	addge	r3, r3, r0
 800bfa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bfa6:	bfac      	ite	ge
 800bfa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bfaa:	81a3      	strhlt	r3, [r4, #12]
 800bfac:	bd10      	pop	{r4, pc}

0800bfae <__swrite>:
 800bfae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	461f      	mov	r7, r3
 800bfb4:	898b      	ldrh	r3, [r1, #12]
 800bfb6:	05db      	lsls	r3, r3, #23
 800bfb8:	4605      	mov	r5, r0
 800bfba:	460c      	mov	r4, r1
 800bfbc:	4616      	mov	r6, r2
 800bfbe:	d505      	bpl.n	800bfcc <__swrite+0x1e>
 800bfc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f000 f94c 	bl	800c264 <_lseek_r>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	4632      	mov	r2, r6
 800bfda:	463b      	mov	r3, r7
 800bfdc:	4628      	mov	r0, r5
 800bfde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe2:	f000 b963 	b.w	800c2ac <_write_r>

0800bfe6 <__sseek>:
 800bfe6:	b510      	push	{r4, lr}
 800bfe8:	460c      	mov	r4, r1
 800bfea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfee:	f000 f939 	bl	800c264 <_lseek_r>
 800bff2:	1c43      	adds	r3, r0, #1
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	bf15      	itete	ne
 800bff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c002:	81a3      	strheq	r3, [r4, #12]
 800c004:	bf18      	it	ne
 800c006:	81a3      	strhne	r3, [r4, #12]
 800c008:	bd10      	pop	{r4, pc}

0800c00a <__sclose>:
 800c00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c00e:	f000 b8f7 	b.w	800c200 <_close_r>

0800c012 <__swbuf_r>:
 800c012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c014:	460e      	mov	r6, r1
 800c016:	4614      	mov	r4, r2
 800c018:	4605      	mov	r5, r0
 800c01a:	b118      	cbz	r0, 800c024 <__swbuf_r+0x12>
 800c01c:	6a03      	ldr	r3, [r0, #32]
 800c01e:	b90b      	cbnz	r3, 800c024 <__swbuf_r+0x12>
 800c020:	f7fe faae 	bl	800a580 <__sinit>
 800c024:	69a3      	ldr	r3, [r4, #24]
 800c026:	60a3      	str	r3, [r4, #8]
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	071a      	lsls	r2, r3, #28
 800c02c:	d501      	bpl.n	800c032 <__swbuf_r+0x20>
 800c02e:	6923      	ldr	r3, [r4, #16]
 800c030:	b943      	cbnz	r3, 800c044 <__swbuf_r+0x32>
 800c032:	4621      	mov	r1, r4
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f82b 	bl	800c090 <__swsetup_r>
 800c03a:	b118      	cbz	r0, 800c044 <__swbuf_r+0x32>
 800c03c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c040:	4638      	mov	r0, r7
 800c042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	6922      	ldr	r2, [r4, #16]
 800c048:	1a98      	subs	r0, r3, r2
 800c04a:	6963      	ldr	r3, [r4, #20]
 800c04c:	b2f6      	uxtb	r6, r6
 800c04e:	4283      	cmp	r3, r0
 800c050:	4637      	mov	r7, r6
 800c052:	dc05      	bgt.n	800c060 <__swbuf_r+0x4e>
 800c054:	4621      	mov	r1, r4
 800c056:	4628      	mov	r0, r5
 800c058:	f7ff fbee 	bl	800b838 <_fflush_r>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d1ed      	bne.n	800c03c <__swbuf_r+0x2a>
 800c060:	68a3      	ldr	r3, [r4, #8]
 800c062:	3b01      	subs	r3, #1
 800c064:	60a3      	str	r3, [r4, #8]
 800c066:	6823      	ldr	r3, [r4, #0]
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	6022      	str	r2, [r4, #0]
 800c06c:	701e      	strb	r6, [r3, #0]
 800c06e:	6962      	ldr	r2, [r4, #20]
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	429a      	cmp	r2, r3
 800c074:	d004      	beq.n	800c080 <__swbuf_r+0x6e>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	07db      	lsls	r3, r3, #31
 800c07a:	d5e1      	bpl.n	800c040 <__swbuf_r+0x2e>
 800c07c:	2e0a      	cmp	r6, #10
 800c07e:	d1df      	bne.n	800c040 <__swbuf_r+0x2e>
 800c080:	4621      	mov	r1, r4
 800c082:	4628      	mov	r0, r5
 800c084:	f7ff fbd8 	bl	800b838 <_fflush_r>
 800c088:	2800      	cmp	r0, #0
 800c08a:	d0d9      	beq.n	800c040 <__swbuf_r+0x2e>
 800c08c:	e7d6      	b.n	800c03c <__swbuf_r+0x2a>
	...

0800c090 <__swsetup_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4b29      	ldr	r3, [pc, #164]	@ (800c138 <__swsetup_r+0xa8>)
 800c094:	4605      	mov	r5, r0
 800c096:	6818      	ldr	r0, [r3, #0]
 800c098:	460c      	mov	r4, r1
 800c09a:	b118      	cbz	r0, 800c0a4 <__swsetup_r+0x14>
 800c09c:	6a03      	ldr	r3, [r0, #32]
 800c09e:	b90b      	cbnz	r3, 800c0a4 <__swsetup_r+0x14>
 800c0a0:	f7fe fa6e 	bl	800a580 <__sinit>
 800c0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a8:	0719      	lsls	r1, r3, #28
 800c0aa:	d422      	bmi.n	800c0f2 <__swsetup_r+0x62>
 800c0ac:	06da      	lsls	r2, r3, #27
 800c0ae:	d407      	bmi.n	800c0c0 <__swsetup_r+0x30>
 800c0b0:	2209      	movs	r2, #9
 800c0b2:	602a      	str	r2, [r5, #0]
 800c0b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0be:	e033      	b.n	800c128 <__swsetup_r+0x98>
 800c0c0:	0758      	lsls	r0, r3, #29
 800c0c2:	d512      	bpl.n	800c0ea <__swsetup_r+0x5a>
 800c0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0c6:	b141      	cbz	r1, 800c0da <__swsetup_r+0x4a>
 800c0c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	d002      	beq.n	800c0d6 <__swsetup_r+0x46>
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f7ff f9a1 	bl	800b418 <_free_r>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	6063      	str	r3, [r4, #4]
 800c0e6:	6923      	ldr	r3, [r4, #16]
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f043 0308 	orr.w	r3, r3, #8
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	6923      	ldr	r3, [r4, #16]
 800c0f4:	b94b      	cbnz	r3, 800c10a <__swsetup_r+0x7a>
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c100:	d003      	beq.n	800c10a <__swsetup_r+0x7a>
 800c102:	4621      	mov	r1, r4
 800c104:	4628      	mov	r0, r5
 800c106:	f000 f83f 	bl	800c188 <__smakebuf_r>
 800c10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c10e:	f013 0201 	ands.w	r2, r3, #1
 800c112:	d00a      	beq.n	800c12a <__swsetup_r+0x9a>
 800c114:	2200      	movs	r2, #0
 800c116:	60a2      	str	r2, [r4, #8]
 800c118:	6962      	ldr	r2, [r4, #20]
 800c11a:	4252      	negs	r2, r2
 800c11c:	61a2      	str	r2, [r4, #24]
 800c11e:	6922      	ldr	r2, [r4, #16]
 800c120:	b942      	cbnz	r2, 800c134 <__swsetup_r+0xa4>
 800c122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c126:	d1c5      	bne.n	800c0b4 <__swsetup_r+0x24>
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	0799      	lsls	r1, r3, #30
 800c12c:	bf58      	it	pl
 800c12e:	6962      	ldrpl	r2, [r4, #20]
 800c130:	60a2      	str	r2, [r4, #8]
 800c132:	e7f4      	b.n	800c11e <__swsetup_r+0x8e>
 800c134:	2000      	movs	r0, #0
 800c136:	e7f7      	b.n	800c128 <__swsetup_r+0x98>
 800c138:	20000b34 	.word	0x20000b34

0800c13c <__swhatbuf_r>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	460c      	mov	r4, r1
 800c140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c144:	2900      	cmp	r1, #0
 800c146:	b096      	sub	sp, #88	@ 0x58
 800c148:	4615      	mov	r5, r2
 800c14a:	461e      	mov	r6, r3
 800c14c:	da0d      	bge.n	800c16a <__swhatbuf_r+0x2e>
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c154:	f04f 0100 	mov.w	r1, #0
 800c158:	bf14      	ite	ne
 800c15a:	2340      	movne	r3, #64	@ 0x40
 800c15c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c160:	2000      	movs	r0, #0
 800c162:	6031      	str	r1, [r6, #0]
 800c164:	602b      	str	r3, [r5, #0]
 800c166:	b016      	add	sp, #88	@ 0x58
 800c168:	bd70      	pop	{r4, r5, r6, pc}
 800c16a:	466a      	mov	r2, sp
 800c16c:	f000 f858 	bl	800c220 <_fstat_r>
 800c170:	2800      	cmp	r0, #0
 800c172:	dbec      	blt.n	800c14e <__swhatbuf_r+0x12>
 800c174:	9901      	ldr	r1, [sp, #4]
 800c176:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c17a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c17e:	4259      	negs	r1, r3
 800c180:	4159      	adcs	r1, r3
 800c182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c186:	e7eb      	b.n	800c160 <__swhatbuf_r+0x24>

0800c188 <__smakebuf_r>:
 800c188:	898b      	ldrh	r3, [r1, #12]
 800c18a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c18c:	079d      	lsls	r5, r3, #30
 800c18e:	4606      	mov	r6, r0
 800c190:	460c      	mov	r4, r1
 800c192:	d507      	bpl.n	800c1a4 <__smakebuf_r+0x1c>
 800c194:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	6123      	str	r3, [r4, #16]
 800c19c:	2301      	movs	r3, #1
 800c19e:	6163      	str	r3, [r4, #20]
 800c1a0:	b003      	add	sp, #12
 800c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a4:	ab01      	add	r3, sp, #4
 800c1a6:	466a      	mov	r2, sp
 800c1a8:	f7ff ffc8 	bl	800c13c <__swhatbuf_r>
 800c1ac:	9f00      	ldr	r7, [sp, #0]
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7fd ff3e 	bl	800a034 <_malloc_r>
 800c1b8:	b948      	cbnz	r0, 800c1ce <__smakebuf_r+0x46>
 800c1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1be:	059a      	lsls	r2, r3, #22
 800c1c0:	d4ee      	bmi.n	800c1a0 <__smakebuf_r+0x18>
 800c1c2:	f023 0303 	bic.w	r3, r3, #3
 800c1c6:	f043 0302 	orr.w	r3, r3, #2
 800c1ca:	81a3      	strh	r3, [r4, #12]
 800c1cc:	e7e2      	b.n	800c194 <__smakebuf_r+0xc>
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	6020      	str	r0, [r4, #0]
 800c1d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	9b01      	ldr	r3, [sp, #4]
 800c1da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1de:	b15b      	cbz	r3, 800c1f8 <__smakebuf_r+0x70>
 800c1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f000 f82d 	bl	800c244 <_isatty_r>
 800c1ea:	b128      	cbz	r0, 800c1f8 <__smakebuf_r+0x70>
 800c1ec:	89a3      	ldrh	r3, [r4, #12]
 800c1ee:	f023 0303 	bic.w	r3, r3, #3
 800c1f2:	f043 0301 	orr.w	r3, r3, #1
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	431d      	orrs	r5, r3
 800c1fc:	81a5      	strh	r5, [r4, #12]
 800c1fe:	e7cf      	b.n	800c1a0 <__smakebuf_r+0x18>

0800c200 <_close_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4d06      	ldr	r5, [pc, #24]	@ (800c21c <_close_r+0x1c>)
 800c204:	2300      	movs	r3, #0
 800c206:	4604      	mov	r4, r0
 800c208:	4608      	mov	r0, r1
 800c20a:	602b      	str	r3, [r5, #0]
 800c20c:	f000 fbe2 	bl	800c9d4 <_close>
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d102      	bne.n	800c21a <_close_r+0x1a>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	b103      	cbz	r3, 800c21a <_close_r+0x1a>
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	200216a0 	.word	0x200216a0

0800c220 <_fstat_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d07      	ldr	r5, [pc, #28]	@ (800c240 <_fstat_r+0x20>)
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	4608      	mov	r0, r1
 800c22a:	4611      	mov	r1, r2
 800c22c:	602b      	str	r3, [r5, #0]
 800c22e:	f000 fbd9 	bl	800c9e4 <_fstat>
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	d102      	bne.n	800c23c <_fstat_r+0x1c>
 800c236:	682b      	ldr	r3, [r5, #0]
 800c238:	b103      	cbz	r3, 800c23c <_fstat_r+0x1c>
 800c23a:	6023      	str	r3, [r4, #0]
 800c23c:	bd38      	pop	{r3, r4, r5, pc}
 800c23e:	bf00      	nop
 800c240:	200216a0 	.word	0x200216a0

0800c244 <_isatty_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	4d06      	ldr	r5, [pc, #24]	@ (800c260 <_isatty_r+0x1c>)
 800c248:	2300      	movs	r3, #0
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	602b      	str	r3, [r5, #0]
 800c250:	f000 fbd8 	bl	800ca04 <_isatty>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_isatty_r+0x1a>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_isatty_r+0x1a>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	200216a0 	.word	0x200216a0

0800c264 <_lseek_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	@ (800c284 <_lseek_r+0x20>)
 800c268:	4604      	mov	r4, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	4611      	mov	r1, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f000 fbd6 	bl	800ca24 <_lseek>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_lseek_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_lseek_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	200216a0 	.word	0x200216a0

0800c288 <_read_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	@ (800c2a8 <_read_r+0x20>)
 800c28c:	4604      	mov	r4, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	4611      	mov	r1, r2
 800c292:	2200      	movs	r2, #0
 800c294:	602a      	str	r2, [r5, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	f000 fbcc 	bl	800ca34 <_read>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_read_r+0x1e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_read_r+0x1e>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	200216a0 	.word	0x200216a0

0800c2ac <_write_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d07      	ldr	r5, [pc, #28]	@ (800c2cc <_write_r+0x20>)
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	4608      	mov	r0, r1
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	602a      	str	r2, [r5, #0]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	f000 fbc2 	bl	800ca44 <_write>
 800c2c0:	1c43      	adds	r3, r0, #1
 800c2c2:	d102      	bne.n	800c2ca <_write_r+0x1e>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	b103      	cbz	r3, 800c2ca <_write_r+0x1e>
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	bd38      	pop	{r3, r4, r5, pc}
 800c2cc:	200216a0 	.word	0x200216a0

0800c2d0 <__assert_func>:
 800c2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2d2:	4614      	mov	r4, r2
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	4b09      	ldr	r3, [pc, #36]	@ (800c2fc <__assert_func+0x2c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4605      	mov	r5, r0
 800c2dc:	68d8      	ldr	r0, [r3, #12]
 800c2de:	b954      	cbnz	r4, 800c2f6 <__assert_func+0x26>
 800c2e0:	4b07      	ldr	r3, [pc, #28]	@ (800c300 <__assert_func+0x30>)
 800c2e2:	461c      	mov	r4, r3
 800c2e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2e8:	9100      	str	r1, [sp, #0]
 800c2ea:	462b      	mov	r3, r5
 800c2ec:	4905      	ldr	r1, [pc, #20]	@ (800c304 <__assert_func+0x34>)
 800c2ee:	f000 f833 	bl	800c358 <fiprintf>
 800c2f2:	f000 f850 	bl	800c396 <abort>
 800c2f6:	4b04      	ldr	r3, [pc, #16]	@ (800c308 <__assert_func+0x38>)
 800c2f8:	e7f4      	b.n	800c2e4 <__assert_func+0x14>
 800c2fa:	bf00      	nop
 800c2fc:	20000b34 	.word	0x20000b34
 800c300:	0803adb6 	.word	0x0803adb6
 800c304:	0803ad88 	.word	0x0803ad88
 800c308:	0803ad7b 	.word	0x0803ad7b

0800c30c <_calloc_r>:
 800c30c:	b570      	push	{r4, r5, r6, lr}
 800c30e:	fba1 5402 	umull	r5, r4, r1, r2
 800c312:	b93c      	cbnz	r4, 800c324 <_calloc_r+0x18>
 800c314:	4629      	mov	r1, r5
 800c316:	f7fd fe8d 	bl	800a034 <_malloc_r>
 800c31a:	4606      	mov	r6, r0
 800c31c:	b928      	cbnz	r0, 800c32a <_calloc_r+0x1e>
 800c31e:	2600      	movs	r6, #0
 800c320:	4630      	mov	r0, r6
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	220c      	movs	r2, #12
 800c326:	6002      	str	r2, [r0, #0]
 800c328:	e7f9      	b.n	800c31e <_calloc_r+0x12>
 800c32a:	462a      	mov	r2, r5
 800c32c:	4621      	mov	r1, r4
 800c32e:	f7fe f9cd 	bl	800a6cc <memset>
 800c332:	e7f5      	b.n	800c320 <_calloc_r+0x14>

0800c334 <__ascii_mbtowc>:
 800c334:	b082      	sub	sp, #8
 800c336:	b901      	cbnz	r1, 800c33a <__ascii_mbtowc+0x6>
 800c338:	a901      	add	r1, sp, #4
 800c33a:	b142      	cbz	r2, 800c34e <__ascii_mbtowc+0x1a>
 800c33c:	b14b      	cbz	r3, 800c352 <__ascii_mbtowc+0x1e>
 800c33e:	7813      	ldrb	r3, [r2, #0]
 800c340:	600b      	str	r3, [r1, #0]
 800c342:	7812      	ldrb	r2, [r2, #0]
 800c344:	1e10      	subs	r0, r2, #0
 800c346:	bf18      	it	ne
 800c348:	2001      	movne	r0, #1
 800c34a:	b002      	add	sp, #8
 800c34c:	4770      	bx	lr
 800c34e:	4610      	mov	r0, r2
 800c350:	e7fb      	b.n	800c34a <__ascii_mbtowc+0x16>
 800c352:	f06f 0001 	mvn.w	r0, #1
 800c356:	e7f8      	b.n	800c34a <__ascii_mbtowc+0x16>

0800c358 <fiprintf>:
 800c358:	b40e      	push	{r1, r2, r3}
 800c35a:	b503      	push	{r0, r1, lr}
 800c35c:	4601      	mov	r1, r0
 800c35e:	ab03      	add	r3, sp, #12
 800c360:	4805      	ldr	r0, [pc, #20]	@ (800c378 <fiprintf+0x20>)
 800c362:	f853 2b04 	ldr.w	r2, [r3], #4
 800c366:	6800      	ldr	r0, [r0, #0]
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	f7ff f8c9 	bl	800b500 <_vfiprintf_r>
 800c36e:	b002      	add	sp, #8
 800c370:	f85d eb04 	ldr.w	lr, [sp], #4
 800c374:	b003      	add	sp, #12
 800c376:	4770      	bx	lr
 800c378:	20000b34 	.word	0x20000b34

0800c37c <__ascii_wctomb>:
 800c37c:	4603      	mov	r3, r0
 800c37e:	4608      	mov	r0, r1
 800c380:	b141      	cbz	r1, 800c394 <__ascii_wctomb+0x18>
 800c382:	2aff      	cmp	r2, #255	@ 0xff
 800c384:	d904      	bls.n	800c390 <__ascii_wctomb+0x14>
 800c386:	228a      	movs	r2, #138	@ 0x8a
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c38e:	4770      	bx	lr
 800c390:	700a      	strb	r2, [r1, #0]
 800c392:	2001      	movs	r0, #1
 800c394:	4770      	bx	lr

0800c396 <abort>:
 800c396:	b508      	push	{r3, lr}
 800c398:	2006      	movs	r0, #6
 800c39a:	f000 f82b 	bl	800c3f4 <raise>
 800c39e:	2001      	movs	r0, #1
 800c3a0:	f000 fb58 	bl	800ca54 <_exit>

0800c3a4 <_raise_r>:
 800c3a4:	291f      	cmp	r1, #31
 800c3a6:	b538      	push	{r3, r4, r5, lr}
 800c3a8:	4605      	mov	r5, r0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	d904      	bls.n	800c3b8 <_raise_r+0x14>
 800c3ae:	2316      	movs	r3, #22
 800c3b0:	6003      	str	r3, [r0, #0]
 800c3b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3b6:	bd38      	pop	{r3, r4, r5, pc}
 800c3b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3ba:	b112      	cbz	r2, 800c3c2 <_raise_r+0x1e>
 800c3bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3c0:	b94b      	cbnz	r3, 800c3d6 <_raise_r+0x32>
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	f000 f830 	bl	800c428 <_getpid_r>
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3d2:	f000 b817 	b.w	800c404 <_kill_r>
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d00a      	beq.n	800c3f0 <_raise_r+0x4c>
 800c3da:	1c59      	adds	r1, r3, #1
 800c3dc:	d103      	bne.n	800c3e6 <_raise_r+0x42>
 800c3de:	2316      	movs	r3, #22
 800c3e0:	6003      	str	r3, [r0, #0]
 800c3e2:	2001      	movs	r0, #1
 800c3e4:	e7e7      	b.n	800c3b6 <_raise_r+0x12>
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	4798      	blx	r3
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	e7e0      	b.n	800c3b6 <_raise_r+0x12>

0800c3f4 <raise>:
 800c3f4:	4b02      	ldr	r3, [pc, #8]	@ (800c400 <raise+0xc>)
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	6818      	ldr	r0, [r3, #0]
 800c3fa:	f7ff bfd3 	b.w	800c3a4 <_raise_r>
 800c3fe:	bf00      	nop
 800c400:	20000b34 	.word	0x20000b34

0800c404 <_kill_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d07      	ldr	r5, [pc, #28]	@ (800c424 <_kill_r+0x20>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4604      	mov	r4, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	4611      	mov	r1, r2
 800c410:	602b      	str	r3, [r5, #0]
 800c412:	f000 faff 	bl	800ca14 <_kill>
 800c416:	1c43      	adds	r3, r0, #1
 800c418:	d102      	bne.n	800c420 <_kill_r+0x1c>
 800c41a:	682b      	ldr	r3, [r5, #0]
 800c41c:	b103      	cbz	r3, 800c420 <_kill_r+0x1c>
 800c41e:	6023      	str	r3, [r4, #0]
 800c420:	bd38      	pop	{r3, r4, r5, pc}
 800c422:	bf00      	nop
 800c424:	200216a0 	.word	0x200216a0

0800c428 <_getpid_r>:
 800c428:	f000 bae4 	b.w	800c9f4 <_getpid>

0800c42c <expf>:
 800c42c:	b508      	push	{r3, lr}
 800c42e:	ed2d 8b02 	vpush	{d8}
 800c432:	eef0 8a40 	vmov.f32	s17, s0
 800c436:	f000 f88b 	bl	800c550 <__ieee754_expf>
 800c43a:	eeb0 8a40 	vmov.f32	s16, s0
 800c43e:	eeb0 0a68 	vmov.f32	s0, s17
 800c442:	f000 f875 	bl	800c530 <finitef>
 800c446:	b160      	cbz	r0, 800c462 <expf+0x36>
 800c448:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800c488 <expf+0x5c>
 800c44c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c454:	dd0a      	ble.n	800c46c <expf+0x40>
 800c456:	f7fe f955 	bl	800a704 <__errno>
 800c45a:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800c48c <expf+0x60>
 800c45e:	2322      	movs	r3, #34	@ 0x22
 800c460:	6003      	str	r3, [r0, #0]
 800c462:	eeb0 0a48 	vmov.f32	s0, s16
 800c466:	ecbd 8b02 	vpop	{d8}
 800c46a:	bd08      	pop	{r3, pc}
 800c46c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c490 <expf+0x64>
 800c470:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c478:	d5f3      	bpl.n	800c462 <expf+0x36>
 800c47a:	f7fe f943 	bl	800a704 <__errno>
 800c47e:	2322      	movs	r3, #34	@ 0x22
 800c480:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c494 <expf+0x68>
 800c484:	6003      	str	r3, [r0, #0]
 800c486:	e7ec      	b.n	800c462 <expf+0x36>
 800c488:	42b17217 	.word	0x42b17217
 800c48c:	7f800000 	.word	0x7f800000
 800c490:	c2cff1b5 	.word	0xc2cff1b5
 800c494:	00000000 	.word	0x00000000

0800c498 <log10f>:
 800c498:	b508      	push	{r3, lr}
 800c49a:	ed2d 8b02 	vpush	{d8}
 800c49e:	eeb0 8a40 	vmov.f32	s16, s0
 800c4a2:	f000 fa19 	bl	800c8d8 <__ieee754_log10f>
 800c4a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800c4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ae:	d60f      	bvs.n	800c4d0 <log10f+0x38>
 800c4b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b8:	d80a      	bhi.n	800c4d0 <log10f+0x38>
 800c4ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4c2:	d108      	bne.n	800c4d6 <log10f+0x3e>
 800c4c4:	f7fe f91e 	bl	800a704 <__errno>
 800c4c8:	2322      	movs	r3, #34	@ 0x22
 800c4ca:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c4ec <log10f+0x54>
 800c4ce:	6003      	str	r3, [r0, #0]
 800c4d0:	ecbd 8b02 	vpop	{d8}
 800c4d4:	bd08      	pop	{r3, pc}
 800c4d6:	f7fe f915 	bl	800a704 <__errno>
 800c4da:	ecbd 8b02 	vpop	{d8}
 800c4de:	2321      	movs	r3, #33	@ 0x21
 800c4e0:	6003      	str	r3, [r0, #0]
 800c4e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c4e6:	4802      	ldr	r0, [pc, #8]	@ (800c4f0 <log10f+0x58>)
 800c4e8:	f000 b82c 	b.w	800c544 <nanf>
 800c4ec:	ff800000 	.word	0xff800000
 800c4f0:	0803adb6 	.word	0x0803adb6

0800c4f4 <sqrtf>:
 800c4f4:	b508      	push	{r3, lr}
 800c4f6:	ed2d 8b02 	vpush	{d8}
 800c4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c4fe:	f000 f8f5 	bl	800c6ec <__ieee754_sqrtf>
 800c502:	eeb4 8a48 	vcmp.f32	s16, s16
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	d60c      	bvs.n	800c526 <sqrtf+0x32>
 800c50c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c52c <sqrtf+0x38>
 800c510:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c518:	d505      	bpl.n	800c526 <sqrtf+0x32>
 800c51a:	f7fe f8f3 	bl	800a704 <__errno>
 800c51e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c522:	2321      	movs	r3, #33	@ 0x21
 800c524:	6003      	str	r3, [r0, #0]
 800c526:	ecbd 8b02 	vpop	{d8}
 800c52a:	bd08      	pop	{r3, pc}
 800c52c:	00000000 	.word	0x00000000

0800c530 <finitef>:
 800c530:	ee10 3a10 	vmov	r3, s0
 800c534:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c538:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c53c:	bfac      	ite	ge
 800c53e:	2000      	movge	r0, #0
 800c540:	2001      	movlt	r0, #1
 800c542:	4770      	bx	lr

0800c544 <nanf>:
 800c544:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c54c <nanf+0x8>
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	7fc00000 	.word	0x7fc00000

0800c550 <__ieee754_expf>:
 800c550:	ee10 2a10 	vmov	r2, s0
 800c554:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800c558:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c55c:	d902      	bls.n	800c564 <__ieee754_expf+0x14>
 800c55e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c562:	4770      	bx	lr
 800c564:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800c568:	d106      	bne.n	800c578 <__ieee754_expf+0x28>
 800c56a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800c6a4 <__ieee754_expf+0x154>
 800c56e:	2900      	cmp	r1, #0
 800c570:	bf18      	it	ne
 800c572:	eeb0 0a67 	vmovne.f32	s0, s15
 800c576:	4770      	bx	lr
 800c578:	484b      	ldr	r0, [pc, #300]	@ (800c6a8 <__ieee754_expf+0x158>)
 800c57a:	4282      	cmp	r2, r0
 800c57c:	dd02      	ble.n	800c584 <__ieee754_expf+0x34>
 800c57e:	2000      	movs	r0, #0
 800c580:	f000 ba22 	b.w	800c9c8 <__math_oflowf>
 800c584:	2a00      	cmp	r2, #0
 800c586:	da05      	bge.n	800c594 <__ieee754_expf+0x44>
 800c588:	4a48      	ldr	r2, [pc, #288]	@ (800c6ac <__ieee754_expf+0x15c>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d902      	bls.n	800c594 <__ieee754_expf+0x44>
 800c58e:	2000      	movs	r0, #0
 800c590:	f000 ba14 	b.w	800c9bc <__math_uflowf>
 800c594:	4a46      	ldr	r2, [pc, #280]	@ (800c6b0 <__ieee754_expf+0x160>)
 800c596:	4293      	cmp	r3, r2
 800c598:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800c59c:	d952      	bls.n	800c644 <__ieee754_expf+0xf4>
 800c59e:	4a45      	ldr	r2, [pc, #276]	@ (800c6b4 <__ieee754_expf+0x164>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800c5a6:	d834      	bhi.n	800c612 <__ieee754_expf+0xc2>
 800c5a8:	4b43      	ldr	r3, [pc, #268]	@ (800c6b8 <__ieee754_expf+0x168>)
 800c5aa:	4413      	add	r3, r2
 800c5ac:	ed93 7a00 	vldr	s14, [r3]
 800c5b0:	4b42      	ldr	r3, [pc, #264]	@ (800c6bc <__ieee754_expf+0x16c>)
 800c5b2:	4413      	add	r3, r2
 800c5b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c5b8:	f1c1 0201 	rsb	r2, r1, #1
 800c5bc:	edd3 7a00 	vldr	s15, [r3]
 800c5c0:	1a52      	subs	r2, r2, r1
 800c5c2:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c5c6:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c5ca:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800c6c0 <__ieee754_expf+0x170>
 800c5ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c6c4 <__ieee754_expf+0x174>
 800c5d2:	eee6 6a05 	vfma.f32	s13, s12, s10
 800c5d6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800c6c8 <__ieee754_expf+0x178>
 800c5da:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c5de:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c6cc <__ieee754_expf+0x17c>
 800c5e2:	eee5 6a06 	vfma.f32	s13, s10, s12
 800c5e6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800c6d0 <__ieee754_expf+0x180>
 800c5ea:	eea6 5a86 	vfma.f32	s10, s13, s12
 800c5ee:	eef0 6a40 	vmov.f32	s13, s0
 800c5f2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800c5f6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800c5fa:	ee20 5a26 	vmul.f32	s10, s0, s13
 800c5fe:	bb92      	cbnz	r2, 800c666 <__ieee754_expf+0x116>
 800c600:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800c604:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800c608:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c60c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800c610:	4770      	bx	lr
 800c612:	4b30      	ldr	r3, [pc, #192]	@ (800c6d4 <__ieee754_expf+0x184>)
 800c614:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800c6d8 <__ieee754_expf+0x188>
 800c618:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800c6dc <__ieee754_expf+0x18c>
 800c61c:	4413      	add	r3, r2
 800c61e:	edd3 7a00 	vldr	s15, [r3]
 800c622:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c626:	eeb0 7a40 	vmov.f32	s14, s0
 800c62a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c62e:	ee17 2a90 	vmov	r2, s15
 800c632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c636:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c63a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800c6e0 <__ieee754_expf+0x190>
 800c63e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c642:	e7be      	b.n	800c5c2 <__ieee754_expf+0x72>
 800c644:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c648:	d20b      	bcs.n	800c662 <__ieee754_expf+0x112>
 800c64a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c6e4 <__ieee754_expf+0x194>
 800c64e:	ee70 6a26 	vadd.f32	s13, s0, s13
 800c652:	eef4 6ae5 	vcmpe.f32	s13, s11
 800c656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c65a:	dd02      	ble.n	800c662 <__ieee754_expf+0x112>
 800c65c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800c660:	4770      	bx	lr
 800c662:	2200      	movs	r2, #0
 800c664:	e7af      	b.n	800c5c6 <__ieee754_expf+0x76>
 800c666:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c66a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800c66e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800c672:	bfb8      	it	lt
 800c674:	3264      	addlt	r2, #100	@ 0x64
 800c676:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c67a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c67e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c682:	ee17 3a90 	vmov	r3, s15
 800c686:	bfab      	itete	ge
 800c688:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800c68c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800c690:	ee00 3a10 	vmovge	s0, r3
 800c694:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800c6e8 <__ieee754_expf+0x198>
 800c698:	bfbc      	itt	lt
 800c69a:	ee00 3a10 	vmovlt	s0, r3
 800c69e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800c6a2:	4770      	bx	lr
 800c6a4:	00000000 	.word	0x00000000
 800c6a8:	42b17217 	.word	0x42b17217
 800c6ac:	42cff1b5 	.word	0x42cff1b5
 800c6b0:	3eb17218 	.word	0x3eb17218
 800c6b4:	3f851591 	.word	0x3f851591
 800c6b8:	0803adc0 	.word	0x0803adc0
 800c6bc:	0803adb8 	.word	0x0803adb8
 800c6c0:	3331bb4c 	.word	0x3331bb4c
 800c6c4:	b5ddea0e 	.word	0xb5ddea0e
 800c6c8:	388ab355 	.word	0x388ab355
 800c6cc:	bb360b61 	.word	0xbb360b61
 800c6d0:	3e2aaaab 	.word	0x3e2aaaab
 800c6d4:	0803adc8 	.word	0x0803adc8
 800c6d8:	3fb8aa3b 	.word	0x3fb8aa3b
 800c6dc:	3f317180 	.word	0x3f317180
 800c6e0:	3717f7d1 	.word	0x3717f7d1
 800c6e4:	7149f2ca 	.word	0x7149f2ca
 800c6e8:	0d800000 	.word	0x0d800000

0800c6ec <__ieee754_sqrtf>:
 800c6ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c6f0:	4770      	bx	lr
	...

0800c6f4 <__ieee754_logf>:
 800c6f4:	ee10 3a10 	vmov	r3, s0
 800c6f8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c6fc:	d106      	bne.n	800c70c <__ieee754_logf+0x18>
 800c6fe:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800c898 <__ieee754_logf+0x1a4>
 800c702:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800c89c <__ieee754_logf+0x1a8>
 800c706:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c70a:	4770      	bx	lr
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	461a      	mov	r2, r3
 800c710:	da02      	bge.n	800c718 <__ieee754_logf+0x24>
 800c712:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c716:	e7f4      	b.n	800c702 <__ieee754_logf+0xe>
 800c718:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c71c:	db02      	blt.n	800c724 <__ieee754_logf+0x30>
 800c71e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c722:	4770      	bx	lr
 800c724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c728:	bfb8      	it	lt
 800c72a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800c8a0 <__ieee754_logf+0x1ac>
 800c72e:	485d      	ldr	r0, [pc, #372]	@ (800c8a4 <__ieee754_logf+0x1b0>)
 800c730:	bfbe      	ittt	lt
 800c732:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c736:	f06f 0118 	mvnlt.w	r1, #24
 800c73a:	ee17 2a90 	vmovlt	r2, s15
 800c73e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800c742:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c746:	4410      	add	r0, r2
 800c748:	bfa8      	it	ge
 800c74a:	2100      	movge	r1, #0
 800c74c:	3b7f      	subs	r3, #127	@ 0x7f
 800c74e:	440b      	add	r3, r1
 800c750:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800c754:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800c758:	4311      	orrs	r1, r2
 800c75a:	ee00 1a10 	vmov	s0, r1
 800c75e:	4952      	ldr	r1, [pc, #328]	@ (800c8a8 <__ieee754_logf+0x1b4>)
 800c760:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800c764:	f102 000f 	add.w	r0, r2, #15
 800c768:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c76c:	4001      	ands	r1, r0
 800c76e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c772:	bb89      	cbnz	r1, 800c7d8 <__ieee754_logf+0xe4>
 800c774:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77c:	d10f      	bne.n	800c79e <__ieee754_logf+0xaa>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 8087 	beq.w	800c892 <__ieee754_logf+0x19e>
 800c784:	ee07 3a90 	vmov	s15, r3
 800c788:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800c8ac <__ieee754_logf+0x1b8>
 800c78c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800c8b0 <__ieee754_logf+0x1bc>
 800c790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c794:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c798:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c79c:	4770      	bx	lr
 800c79e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800c8b4 <__ieee754_logf+0x1c0>
 800c7a2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c7a6:	eee0 7a66 	vfms.f32	s15, s0, s13
 800c7aa:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c7ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7b2:	b913      	cbnz	r3, 800c7ba <__ieee754_logf+0xc6>
 800c7b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c7b8:	4770      	bx	lr
 800c7ba:	ee07 3a90 	vmov	s15, r3
 800c7be:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c8ac <__ieee754_logf+0x1b8>
 800c7c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7c6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c7ca:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c7ce:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c8b0 <__ieee754_logf+0x1bc>
 800c7d2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800c7d6:	4770      	bx	lr
 800c7d8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c7dc:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c7e0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c8b8 <__ieee754_logf+0x1c4>
 800c7e4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800c8bc <__ieee754_logf+0x1c8>
 800c7e8:	4935      	ldr	r1, [pc, #212]	@ (800c8c0 <__ieee754_logf+0x1cc>)
 800c7ea:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800c7ee:	4411      	add	r1, r2
 800c7f0:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800c7f4:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800c7f8:	430a      	orrs	r2, r1
 800c7fa:	2a00      	cmp	r2, #0
 800c7fc:	ee07 3a90 	vmov	s15, r3
 800c800:	ee26 5a06 	vmul.f32	s10, s12, s12
 800c804:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c808:	ee25 7a05 	vmul.f32	s14, s10, s10
 800c80c:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800c8c4 <__ieee754_logf+0x1d0>
 800c810:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c814:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800c8c8 <__ieee754_logf+0x1d4>
 800c818:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c81c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800c8cc <__ieee754_logf+0x1d8>
 800c820:	eee7 7a24 	vfma.f32	s15, s14, s9
 800c824:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800c8d0 <__ieee754_logf+0x1dc>
 800c828:	eee7 4a87 	vfma.f32	s9, s15, s14
 800c82c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800c8d4 <__ieee754_logf+0x1e0>
 800c830:	eee4 7a87 	vfma.f32	s15, s9, s14
 800c834:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c838:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c83c:	dd1a      	ble.n	800c874 <__ieee754_logf+0x180>
 800c83e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800c842:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c846:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c84a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c84e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c852:	b913      	cbnz	r3, 800c85a <__ieee754_logf+0x166>
 800c854:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c858:	e7ac      	b.n	800c7b4 <__ieee754_logf+0xc0>
 800c85a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800c8ac <__ieee754_logf+0x1b8>
 800c85e:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c862:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c866:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c86a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800c8b0 <__ieee754_logf+0x1bc>
 800c86e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800c872:	4770      	bx	lr
 800c874:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c878:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c87c:	b913      	cbnz	r3, 800c884 <__ieee754_logf+0x190>
 800c87e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c882:	4770      	bx	lr
 800c884:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800c8ac <__ieee754_logf+0x1b8>
 800c888:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c88c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c890:	e7eb      	b.n	800c86a <__ieee754_logf+0x176>
 800c892:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800c89c <__ieee754_logf+0x1a8>
 800c896:	4770      	bx	lr
 800c898:	cc000000 	.word	0xcc000000
 800c89c:	00000000 	.word	0x00000000
 800c8a0:	4c000000 	.word	0x4c000000
 800c8a4:	004afb20 	.word	0x004afb20
 800c8a8:	007ffff0 	.word	0x007ffff0
 800c8ac:	3717f7d1 	.word	0x3717f7d1
 800c8b0:	3f317180 	.word	0x3f317180
 800c8b4:	3eaaaaab 	.word	0x3eaaaaab
 800c8b8:	3e1cd04f 	.word	0x3e1cd04f
 800c8bc:	3e178897 	.word	0x3e178897
 800c8c0:	ffcf5c30 	.word	0xffcf5c30
 800c8c4:	3e638e29 	.word	0x3e638e29
 800c8c8:	3ecccccd 	.word	0x3ecccccd
 800c8cc:	3e3a3325 	.word	0x3e3a3325
 800c8d0:	3e924925 	.word	0x3e924925
 800c8d4:	3f2aaaab 	.word	0x3f2aaaab

0800c8d8 <__ieee754_log10f>:
 800c8d8:	b508      	push	{r3, lr}
 800c8da:	ee10 3a10 	vmov	r3, s0
 800c8de:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c8e2:	ed2d 8b02 	vpush	{d8}
 800c8e6:	d108      	bne.n	800c8fa <__ieee754_log10f+0x22>
 800c8e8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800c970 <__ieee754_log10f+0x98>
 800c8ec:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800c974 <__ieee754_log10f+0x9c>
 800c8f0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c8f4:	ecbd 8b02 	vpop	{d8}
 800c8f8:	bd08      	pop	{r3, pc}
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	da02      	bge.n	800c906 <__ieee754_log10f+0x2e>
 800c900:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c904:	e7f2      	b.n	800c8ec <__ieee754_log10f+0x14>
 800c906:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c90a:	db02      	blt.n	800c912 <__ieee754_log10f+0x3a>
 800c90c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c910:	e7f0      	b.n	800c8f4 <__ieee754_log10f+0x1c>
 800c912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c916:	bfbf      	itttt	lt
 800c918:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800c978 <__ieee754_log10f+0xa0>
 800c91c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c920:	f06f 0118 	mvnlt.w	r1, #24
 800c924:	ee17 2a90 	vmovlt	r2, s15
 800c928:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800c92c:	bfa8      	it	ge
 800c92e:	2100      	movge	r1, #0
 800c930:	3b7f      	subs	r3, #127	@ 0x7f
 800c932:	440b      	add	r3, r1
 800c934:	0fd9      	lsrs	r1, r3, #31
 800c936:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c942:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800c946:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c94a:	ee00 3a10 	vmov	s0, r3
 800c94e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c952:	f7ff fecf 	bl	800c6f4 <__ieee754_logf>
 800c956:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800c97c <__ieee754_log10f+0xa4>
 800c95a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c95e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c980 <__ieee754_log10f+0xa8>
 800c962:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c966:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800c984 <__ieee754_log10f+0xac>
 800c96a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c96e:	e7c1      	b.n	800c8f4 <__ieee754_log10f+0x1c>
 800c970:	cc000000 	.word	0xcc000000
 800c974:	00000000 	.word	0x00000000
 800c978:	4c000000 	.word	0x4c000000
 800c97c:	3ede5bd9 	.word	0x3ede5bd9
 800c980:	355427db 	.word	0x355427db
 800c984:	3e9a2080 	.word	0x3e9a2080

0800c988 <with_errnof>:
 800c988:	b510      	push	{r4, lr}
 800c98a:	ed2d 8b02 	vpush	{d8}
 800c98e:	eeb0 8a40 	vmov.f32	s16, s0
 800c992:	4604      	mov	r4, r0
 800c994:	f7fd feb6 	bl	800a704 <__errno>
 800c998:	eeb0 0a48 	vmov.f32	s0, s16
 800c99c:	ecbd 8b02 	vpop	{d8}
 800c9a0:	6004      	str	r4, [r0, #0]
 800c9a2:	bd10      	pop	{r4, pc}

0800c9a4 <xflowf>:
 800c9a4:	b130      	cbz	r0, 800c9b4 <xflowf+0x10>
 800c9a6:	eef1 7a40 	vneg.f32	s15, s0
 800c9aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c9ae:	2022      	movs	r0, #34	@ 0x22
 800c9b0:	f7ff bfea 	b.w	800c988 <with_errnof>
 800c9b4:	eef0 7a40 	vmov.f32	s15, s0
 800c9b8:	e7f7      	b.n	800c9aa <xflowf+0x6>
	...

0800c9bc <__math_uflowf>:
 800c9bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c9c4 <__math_uflowf+0x8>
 800c9c0:	f7ff bff0 	b.w	800c9a4 <xflowf>
 800c9c4:	10000000 	.word	0x10000000

0800c9c8 <__math_oflowf>:
 800c9c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c9d0 <__math_oflowf+0x8>
 800c9cc:	f7ff bfea 	b.w	800c9a4 <xflowf>
 800c9d0:	70000000 	.word	0x70000000

0800c9d4 <_close>:
 800c9d4:	4b02      	ldr	r3, [pc, #8]	@ (800c9e0 <_close+0xc>)
 800c9d6:	2258      	movs	r2, #88	@ 0x58
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9de:	4770      	bx	lr
 800c9e0:	200216a0 	.word	0x200216a0

0800c9e4 <_fstat>:
 800c9e4:	4b02      	ldr	r3, [pc, #8]	@ (800c9f0 <_fstat+0xc>)
 800c9e6:	2258      	movs	r2, #88	@ 0x58
 800c9e8:	601a      	str	r2, [r3, #0]
 800c9ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9ee:	4770      	bx	lr
 800c9f0:	200216a0 	.word	0x200216a0

0800c9f4 <_getpid>:
 800c9f4:	4b02      	ldr	r3, [pc, #8]	@ (800ca00 <_getpid+0xc>)
 800c9f6:	2258      	movs	r2, #88	@ 0x58
 800c9f8:	601a      	str	r2, [r3, #0]
 800c9fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9fe:	4770      	bx	lr
 800ca00:	200216a0 	.word	0x200216a0

0800ca04 <_isatty>:
 800ca04:	4b02      	ldr	r3, [pc, #8]	@ (800ca10 <_isatty+0xc>)
 800ca06:	2258      	movs	r2, #88	@ 0x58
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	2000      	movs	r0, #0
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	200216a0 	.word	0x200216a0

0800ca14 <_kill>:
 800ca14:	4b02      	ldr	r3, [pc, #8]	@ (800ca20 <_kill+0xc>)
 800ca16:	2258      	movs	r2, #88	@ 0x58
 800ca18:	601a      	str	r2, [r3, #0]
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca1e:	4770      	bx	lr
 800ca20:	200216a0 	.word	0x200216a0

0800ca24 <_lseek>:
 800ca24:	4b02      	ldr	r3, [pc, #8]	@ (800ca30 <_lseek+0xc>)
 800ca26:	2258      	movs	r2, #88	@ 0x58
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca2e:	4770      	bx	lr
 800ca30:	200216a0 	.word	0x200216a0

0800ca34 <_read>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	@ (800ca40 <_read+0xc>)
 800ca36:	2258      	movs	r2, #88	@ 0x58
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca3e:	4770      	bx	lr
 800ca40:	200216a0 	.word	0x200216a0

0800ca44 <_write>:
 800ca44:	4b02      	ldr	r3, [pc, #8]	@ (800ca50 <_write+0xc>)
 800ca46:	2258      	movs	r2, #88	@ 0x58
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca4e:	4770      	bx	lr
 800ca50:	200216a0 	.word	0x200216a0

0800ca54 <_exit>:
 800ca54:	e7fe      	b.n	800ca54 <_exit>
	...

0800ca58 <_init>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	bf00      	nop
 800ca5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca5e:	bc08      	pop	{r3}
 800ca60:	469e      	mov	lr, r3
 800ca62:	4770      	bx	lr

0800ca64 <_fini>:
 800ca64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca66:	bf00      	nop
 800ca68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca6a:	bc08      	pop	{r3}
 800ca6c:	469e      	mov	lr, r3
 800ca6e:	4770      	bx	lr
