ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB141:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "ssd1306.h"
  25:Core/Src/main.c **** #include "fonts.h"
  26:Core/Src/main.c **** #include "display.h"
  27:Core/Src/main.c **** #include "filemanager.h"
  28:Core/Src/main.c **** #include "audio.h"
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** UART_HandleTypeDef huart2;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** /* USER CODE BEGIN PV */
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE END PV */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  56:Core/Src/main.c **** void SystemClock_Config(void);
  57:Core/Src/main.c **** static void MX_GPIO_Init(void);
  58:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  59:Core/Src/main.c **** static void MX_I2C1_Init(void);
  60:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE END PFP */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  65:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* USER CODE END 0 */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /**
  70:Core/Src/main.c ****   * @brief  The application entry point.
  71:Core/Src/main.c ****   * @retval int
  72:Core/Src/main.c ****   */
  73:Core/Src/main.c **** int main(void)
  74:Core/Src/main.c **** {
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c ****   /* USER CODE END 1 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  81:Core/Src/main.c **** 
  82:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  83:Core/Src/main.c ****   HAL_Init();
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END Init */
  88:Core/Src/main.c **** 
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 3


  89:Core/Src/main.c ****   /* Configure the system clock */
  90:Core/Src/main.c ****   SystemClock_Config();
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE END SysInit */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* Initialize all configured peripherals */
  97:Core/Src/main.c ****   MX_GPIO_Init();
  98:Core/Src/main.c ****   MX_USART2_UART_Init();
  99:Core/Src/main.c ****   MX_I2C1_Init();
 100:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   // Init lcd using one of the stm32HAL i2c typedefs
 103:Core/Src/main.c ****   if (ssd1306_Init(&hi2c1) != 0) {
 104:Core/Src/main.c ****     Error_Handler();
 105:Core/Src/main.c ****   }
 106:Core/Src/main.c ****   HAL_Delay(1000);
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   ssd1306_Fill(Black);
 109:Core/Src/main.c ****   ssd1306_UpdateScreen(&hi2c1);
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   HAL_Delay(1000);
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   // Filemanager
 114:Core/Src/main.c ****   FileManager fm;
 115:Core/Src/main.c ****   initializeFileManager(&fm);
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   // Adding some dummy files
 118:Core/Src/main.c ****   addFile(&fm, "fart1.wav");
 119:Core/Src/main.c ****   addFile(&fm, "fart2.wav");
 120:Core/Src/main.c ****   addFile(&fm, "fart3.wav");
 121:Core/Src/main.c ****   addFile(&fm, "fart4.wav");
 122:Core/Src/main.c ****   addFile(&fm, "fart5.wav");
 123:Core/Src/main.c ****   addFile(&fm, "fart6.wav");
 124:Core/Src/main.c ****   addFile(&fm, "fart7.wav");
 125:Core/Src/main.c ****   addFile(&fm, "fart8.wav");
 126:Core/Src/main.c ****   addFile(&fm, "fart9.wav");
 127:Core/Src/main.c ****   addFile(&fm, "fart10.wav");
 128:Core/Src/main.c ****   addFile(&fm, "fart11.wav");
 129:Core/Src/main.c ****   addFile(&fm, "fart12.wav");
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   uint32_t num_samples = 2000;
 132:Core/Src/main.c ****   int16_t samples[num_samples];
 133:Core/Src/main.c ****   generateWaveform(samples, num_samples);
 134:Core/Src/main.c ****   drawWaveform(&hi2c1,samples, num_samples);
 135:Core/Src/main.c ****   /* USER CODE END 2 */
 136:Core/Src/main.c ****   /* Infinite loop */
 137:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 138:Core/Src/main.c ****   while (1)
 139:Core/Src/main.c ****   { 
 140:Core/Src/main.c ****     // HAL_Delay(300);
 141:Core/Src/main.c ****     // selectFile(&fm);
 142:Core/Src/main.c ****     // // Displaying the files
 143:Core/Src/main.c ****     // char *filenames[MAX_FILES];
 144:Core/Src/main.c ****     // for (int i = 0; i < fm.num_files; i++) {
 145:Core/Src/main.c ****     //     filenames[i] = fm.files[i].filename; // Extracting filenames from File structures
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 4


 146:Core/Src/main.c ****     // }
 147:Core/Src/main.c ****     // char *currentFileName = fm.files[fm.current_file_index].filename;
 148:Core/Src/main.c ****     // displayStrings(&hi2c1, filenames, fm.num_files, fm.cursor_index);
 149:Core/Src/main.c ****     // renderSelectedFile(&hi2c1, currentFileName);
 150:Core/Src/main.c ****     // // Update display
 151:Core/Src/main.c ****     // ssd1306_UpdateScreen(&hi2c1);
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****     // cursorUp(&fm);
 155:Core/Src/main.c ****     /* USER CODE END WHILE */
 156:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 157:Core/Src/main.c ****   }
 158:Core/Src/main.c ****   /* USER CODE END 3 */
 159:Core/Src/main.c **** }
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** /**
 162:Core/Src/main.c ****   * @brief System Clock Configuration
 163:Core/Src/main.c ****   * @retval None
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c **** void SystemClock_Config(void)
 166:Core/Src/main.c **** {
 167:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 168:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 171:Core/Src/main.c ****   */
 172:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 173:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 176:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 177:Core/Src/main.c ****   */
 178:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 179:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 180:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 181:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 186:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 187:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 188:Core/Src/main.c ****   {
 189:Core/Src/main.c ****     Error_Handler();
 190:Core/Src/main.c ****   }
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 193:Core/Src/main.c ****   */
 194:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 195:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 196:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 197:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 199:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 202:Core/Src/main.c ****   {
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 5


 203:Core/Src/main.c ****     Error_Handler();
 204:Core/Src/main.c ****   }
 205:Core/Src/main.c **** }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c **** /**
 208:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 209:Core/Src/main.c ****   * @param None
 210:Core/Src/main.c ****   * @retval None
 211:Core/Src/main.c ****   */
 212:Core/Src/main.c **** static void MX_I2C1_Init(void)
 213:Core/Src/main.c **** {
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 222:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 223:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 224:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 225:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 226:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 227:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 228:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 229:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 230:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 231:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c **** }
 240:Core/Src/main.c **** 
 241:Core/Src/main.c **** /**
 242:Core/Src/main.c ****   * @brief USART2 Initialization Function
 243:Core/Src/main.c ****   * @param None
 244:Core/Src/main.c ****   * @retval None
 245:Core/Src/main.c ****   */
 246:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 247:Core/Src/main.c **** {
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 256:Core/Src/main.c ****   huart2.Instance = USART2;
 257:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 258:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 259:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 6


 260:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 261:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 262:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 263:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 264:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 265:Core/Src/main.c ****   {
 266:Core/Src/main.c ****     Error_Handler();
 267:Core/Src/main.c ****   }
 268:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** }
 273:Core/Src/main.c **** 
 274:Core/Src/main.c **** /**
 275:Core/Src/main.c ****   * @brief GPIO Initialization Function
 276:Core/Src/main.c ****   * @param None
 277:Core/Src/main.c ****   * @retval None
 278:Core/Src/main.c ****   */
 279:Core/Src/main.c **** static void MX_GPIO_Init(void)
 280:Core/Src/main.c **** {
  28              		.loc 1 280 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
  37 0002 8BB0     		sub	sp, sp, #44
  38              		.cfi_def_cfa_offset 56
 281:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 281 3 view .LVU1
  40              		.loc 1 281 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0594     		str	r4, [sp, #20]
  43 0008 0694     		str	r4, [sp, #24]
  44 000a 0794     		str	r4, [sp, #28]
  45 000c 0894     		str	r4, [sp, #32]
  46 000e 0994     		str	r4, [sp, #36]
 282:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 283:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 286:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  47              		.loc 1 286 3 is_stmt 1 view .LVU3
  48              	.LBB4:
  49              		.loc 1 286 3 view .LVU4
  50 0010 0194     		str	r4, [sp, #4]
  51              		.loc 1 286 3 view .LVU5
  52 0012 224B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F00402 		orr	r2, r2, #4
  55 001a 1A63     		str	r2, [r3, #48]
  56              		.loc 1 286 3 view .LVU6
  57 001c 1A6B     		ldr	r2, [r3, #48]
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 7


  58 001e 02F00402 		and	r2, r2, #4
  59 0022 0192     		str	r2, [sp, #4]
  60              		.loc 1 286 3 view .LVU7
  61 0024 019A     		ldr	r2, [sp, #4]
  62              	.LBE4:
  63              		.loc 1 286 3 view .LVU8
 287:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  64              		.loc 1 287 3 view .LVU9
  65              	.LBB5:
  66              		.loc 1 287 3 view .LVU10
  67 0026 0294     		str	r4, [sp, #8]
  68              		.loc 1 287 3 view .LVU11
  69 0028 1A6B     		ldr	r2, [r3, #48]
  70 002a 42F08002 		orr	r2, r2, #128
  71 002e 1A63     		str	r2, [r3, #48]
  72              		.loc 1 287 3 view .LVU12
  73 0030 1A6B     		ldr	r2, [r3, #48]
  74 0032 02F08002 		and	r2, r2, #128
  75 0036 0292     		str	r2, [sp, #8]
  76              		.loc 1 287 3 view .LVU13
  77 0038 029A     		ldr	r2, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 287 3 view .LVU14
 288:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 288 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 288 3 view .LVU16
  83 003a 0394     		str	r4, [sp, #12]
  84              		.loc 1 288 3 view .LVU17
  85 003c 1A6B     		ldr	r2, [r3, #48]
  86 003e 42F00102 		orr	r2, r2, #1
  87 0042 1A63     		str	r2, [r3, #48]
  88              		.loc 1 288 3 view .LVU18
  89 0044 1A6B     		ldr	r2, [r3, #48]
  90 0046 02F00102 		and	r2, r2, #1
  91 004a 0392     		str	r2, [sp, #12]
  92              		.loc 1 288 3 view .LVU19
  93 004c 039A     		ldr	r2, [sp, #12]
  94              	.LBE6:
  95              		.loc 1 288 3 view .LVU20
 289:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  96              		.loc 1 289 3 view .LVU21
  97              	.LBB7:
  98              		.loc 1 289 3 view .LVU22
  99 004e 0494     		str	r4, [sp, #16]
 100              		.loc 1 289 3 view .LVU23
 101 0050 1A6B     		ldr	r2, [r3, #48]
 102 0052 42F00202 		orr	r2, r2, #2
 103 0056 1A63     		str	r2, [r3, #48]
 104              		.loc 1 289 3 view .LVU24
 105 0058 1B6B     		ldr	r3, [r3, #48]
 106 005a 03F00203 		and	r3, r3, #2
 107 005e 0493     		str	r3, [sp, #16]
 108              		.loc 1 289 3 view .LVU25
 109 0060 049B     		ldr	r3, [sp, #16]
 110              	.LBE7:
 111              		.loc 1 289 3 view .LVU26
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 8


 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 292:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 112              		.loc 1 292 3 view .LVU27
 113 0062 0F4D     		ldr	r5, .L3+4
 114 0064 2246     		mov	r2, r4
 115 0066 2021     		movs	r1, #32
 116 0068 2846     		mov	r0, r5
 117 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL0:
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 295:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 119              		.loc 1 295 3 view .LVU28
 120              		.loc 1 295 23 is_stmt 0 view .LVU29
 121 006e 4FF40053 		mov	r3, #8192
 122 0072 0593     		str	r3, [sp, #20]
 296:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 123              		.loc 1 296 3 is_stmt 1 view .LVU30
 124              		.loc 1 296 24 is_stmt 0 view .LVU31
 125 0074 4FF40413 		mov	r3, #2162688
 126 0078 0693     		str	r3, [sp, #24]
 297:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 127              		.loc 1 297 3 is_stmt 1 view .LVU32
 128              		.loc 1 297 24 is_stmt 0 view .LVU33
 129 007a 0794     		str	r4, [sp, #28]
 298:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 130              		.loc 1 298 3 is_stmt 1 view .LVU34
 131 007c 05A9     		add	r1, sp, #20
 132 007e 0948     		ldr	r0, .L3+8
 133 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL1:
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 301:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 135              		.loc 1 301 3 view .LVU35
 136              		.loc 1 301 23 is_stmt 0 view .LVU36
 137 0084 2023     		movs	r3, #32
 138 0086 0593     		str	r3, [sp, #20]
 302:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 139              		.loc 1 302 3 is_stmt 1 view .LVU37
 140              		.loc 1 302 24 is_stmt 0 view .LVU38
 141 0088 0123     		movs	r3, #1
 142 008a 0693     		str	r3, [sp, #24]
 303:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 143              		.loc 1 303 3 is_stmt 1 view .LVU39
 144              		.loc 1 303 24 is_stmt 0 view .LVU40
 145 008c 0794     		str	r4, [sp, #28]
 304:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 146              		.loc 1 304 3 is_stmt 1 view .LVU41
 147              		.loc 1 304 25 is_stmt 0 view .LVU42
 148 008e 0894     		str	r4, [sp, #32]
 305:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 149              		.loc 1 305 3 is_stmt 1 view .LVU43
 150 0090 05A9     		add	r1, sp, #20
 151 0092 2846     		mov	r0, r5
 152 0094 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 9


 153              	.LVL2:
 306:Core/Src/main.c **** 
 307:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 308:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 309:Core/Src/main.c **** }
 154              		.loc 1 309 1 is_stmt 0 view .LVU44
 155 0098 0BB0     		add	sp, sp, #44
 156              		.cfi_def_cfa_offset 12
 157              		@ sp needed
 158 009a 30BD     		pop	{r4, r5, pc}
 159              	.L4:
 160              		.align	2
 161              	.L3:
 162 009c 00380240 		.word	1073887232
 163 00a0 00000240 		.word	1073872896
 164 00a4 00080240 		.word	1073874944
 165              		.cfi_endproc
 166              	.LFE141:
 168              		.section	.text.Error_Handler,"ax",%progbits
 169              		.align	1
 170              		.global	Error_Handler
 171              		.syntax unified
 172              		.thumb
 173              		.thumb_func
 175              	Error_Handler:
 176              	.LFB142:
 310:Core/Src/main.c **** 
 311:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c **** /* USER CODE END 4 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c **** /**
 316:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 317:Core/Src/main.c ****   * @retval None
 318:Core/Src/main.c ****   */
 319:Core/Src/main.c **** void Error_Handler(void)
 320:Core/Src/main.c **** {
 177              		.loc 1 320 1 is_stmt 1 view -0
 178              		.cfi_startproc
 179              		@ Volatile: function does not return.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 321:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 322:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 323:Core/Src/main.c ****   __disable_irq();
 183              		.loc 1 323 3 view .LVU46
 184              	.LBB8:
 185              	.LBI8:
 186              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 10


   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 11


  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 12


 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 13


 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 14


 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 15


 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 16


 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 17


 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 18


 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 19


 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 20


 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 21


 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 22


 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 23


 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 24


 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 25


 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 26


 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 187              		.loc 2 960 27 view .LVU47
 188              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 189              		.loc 2 962 3 view .LVU48
 190              		.syntax unified
 191              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 192 0000 72B6     		cpsid i
 193              	@ 0 "" 2
 194              		.thumb
 195              		.syntax unified
 196              	.L6:
 197              	.LBE9:
 198              	.LBE8:
 324:Core/Src/main.c ****   while (1)
 199              		.loc 1 324 3 view .LVU49
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 27


 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****   }
 200              		.loc 1 326 3 view .LVU50
 324:Core/Src/main.c ****   while (1)
 201              		.loc 1 324 9 view .LVU51
 202 0002 FEE7     		b	.L6
 203              		.cfi_endproc
 204              	.LFE142:
 206              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	MX_USART2_UART_Init:
 213              	.LFB140:
 247:Core/Src/main.c **** 
 214              		.loc 1 247 1 view -0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218 0000 08B5     		push	{r3, lr}
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 3, -8
 221              		.cfi_offset 14, -4
 256:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 222              		.loc 1 256 3 view .LVU53
 256:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 223              		.loc 1 256 19 is_stmt 0 view .LVU54
 224 0002 0A48     		ldr	r0, .L11
 225 0004 0A4B     		ldr	r3, .L11+4
 226 0006 0360     		str	r3, [r0]
 257:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 227              		.loc 1 257 3 is_stmt 1 view .LVU55
 257:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 228              		.loc 1 257 24 is_stmt 0 view .LVU56
 229 0008 4FF4E133 		mov	r3, #115200
 230 000c 4360     		str	r3, [r0, #4]
 258:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 231              		.loc 1 258 3 is_stmt 1 view .LVU57
 258:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 232              		.loc 1 258 26 is_stmt 0 view .LVU58
 233 000e 0023     		movs	r3, #0
 234 0010 8360     		str	r3, [r0, #8]
 259:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 235              		.loc 1 259 3 is_stmt 1 view .LVU59
 259:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 236              		.loc 1 259 24 is_stmt 0 view .LVU60
 237 0012 C360     		str	r3, [r0, #12]
 260:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 238              		.loc 1 260 3 is_stmt 1 view .LVU61
 260:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 239              		.loc 1 260 22 is_stmt 0 view .LVU62
 240 0014 0361     		str	r3, [r0, #16]
 261:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 241              		.loc 1 261 3 is_stmt 1 view .LVU63
 261:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 242              		.loc 1 261 20 is_stmt 0 view .LVU64
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 28


 243 0016 0C22     		movs	r2, #12
 244 0018 4261     		str	r2, [r0, #20]
 262:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 245              		.loc 1 262 3 is_stmt 1 view .LVU65
 262:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 246              		.loc 1 262 25 is_stmt 0 view .LVU66
 247 001a 8361     		str	r3, [r0, #24]
 263:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 248              		.loc 1 263 3 is_stmt 1 view .LVU67
 263:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 249              		.loc 1 263 28 is_stmt 0 view .LVU68
 250 001c C361     		str	r3, [r0, #28]
 264:Core/Src/main.c ****   {
 251              		.loc 1 264 3 is_stmt 1 view .LVU69
 264:Core/Src/main.c ****   {
 252              		.loc 1 264 7 is_stmt 0 view .LVU70
 253 001e FFF7FEFF 		bl	HAL_UART_Init
 254              	.LVL3:
 264:Core/Src/main.c ****   {
 255              		.loc 1 264 6 discriminator 1 view .LVU71
 256 0022 00B9     		cbnz	r0, .L10
 272:Core/Src/main.c **** 
 257              		.loc 1 272 1 view .LVU72
 258 0024 08BD     		pop	{r3, pc}
 259              	.L10:
 266:Core/Src/main.c ****   }
 260              		.loc 1 266 5 is_stmt 1 view .LVU73
 261 0026 FFF7FEFF 		bl	Error_Handler
 262              	.LVL4:
 263              	.L12:
 264 002a 00BF     		.align	2
 265              	.L11:
 266 002c 00000000 		.word	huart2
 267 0030 00440040 		.word	1073759232
 268              		.cfi_endproc
 269              	.LFE140:
 271              		.section	.text.MX_I2C1_Init,"ax",%progbits
 272              		.align	1
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 277              	MX_I2C1_Init:
 278              	.LFB139:
 213:Core/Src/main.c **** 
 279              		.loc 1 213 1 view -0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283 0000 08B5     		push	{r3, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 3, -8
 286              		.cfi_offset 14, -4
 222:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 287              		.loc 1 222 3 view .LVU75
 222:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 288              		.loc 1 222 18 is_stmt 0 view .LVU76
 289 0002 0A48     		ldr	r0, .L17
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 29


 290 0004 0A4B     		ldr	r3, .L17+4
 291 0006 0360     		str	r3, [r0]
 223:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 292              		.loc 1 223 3 is_stmt 1 view .LVU77
 223:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 293              		.loc 1 223 25 is_stmt 0 view .LVU78
 294 0008 0A4B     		ldr	r3, .L17+8
 295 000a 4360     		str	r3, [r0, #4]
 224:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 296              		.loc 1 224 3 is_stmt 1 view .LVU79
 224:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 297              		.loc 1 224 24 is_stmt 0 view .LVU80
 298 000c 0023     		movs	r3, #0
 299 000e 8360     		str	r3, [r0, #8]
 225:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 300              		.loc 1 225 3 is_stmt 1 view .LVU81
 225:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 301              		.loc 1 225 26 is_stmt 0 view .LVU82
 302 0010 C360     		str	r3, [r0, #12]
 226:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 303              		.loc 1 226 3 is_stmt 1 view .LVU83
 226:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 304              		.loc 1 226 29 is_stmt 0 view .LVU84
 305 0012 4FF48042 		mov	r2, #16384
 306 0016 0261     		str	r2, [r0, #16]
 227:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 307              		.loc 1 227 3 is_stmt 1 view .LVU85
 227:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 308              		.loc 1 227 30 is_stmt 0 view .LVU86
 309 0018 4361     		str	r3, [r0, #20]
 228:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 310              		.loc 1 228 3 is_stmt 1 view .LVU87
 228:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 311              		.loc 1 228 26 is_stmt 0 view .LVU88
 312 001a 8361     		str	r3, [r0, #24]
 229:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 313              		.loc 1 229 3 is_stmt 1 view .LVU89
 229:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 314              		.loc 1 229 30 is_stmt 0 view .LVU90
 315 001c C361     		str	r3, [r0, #28]
 230:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 316              		.loc 1 230 3 is_stmt 1 view .LVU91
 230:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 317              		.loc 1 230 28 is_stmt 0 view .LVU92
 318 001e 0362     		str	r3, [r0, #32]
 231:Core/Src/main.c ****   {
 319              		.loc 1 231 3 is_stmt 1 view .LVU93
 231:Core/Src/main.c ****   {
 320              		.loc 1 231 7 is_stmt 0 view .LVU94
 321 0020 FFF7FEFF 		bl	HAL_I2C_Init
 322              	.LVL5:
 231:Core/Src/main.c ****   {
 323              		.loc 1 231 6 discriminator 1 view .LVU95
 324 0024 00B9     		cbnz	r0, .L16
 239:Core/Src/main.c **** 
 325              		.loc 1 239 1 view .LVU96
 326 0026 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 30


 327              	.L16:
 233:Core/Src/main.c ****   }
 328              		.loc 1 233 5 is_stmt 1 view .LVU97
 329 0028 FFF7FEFF 		bl	Error_Handler
 330              	.LVL6:
 331              	.L18:
 332              		.align	2
 333              	.L17:
 334 002c 00000000 		.word	hi2c1
 335 0030 00540040 		.word	1073763328
 336 0034 A0860100 		.word	100000
 337              		.cfi_endproc
 338              	.LFE139:
 340              		.section	.text.SystemClock_Config,"ax",%progbits
 341              		.align	1
 342              		.global	SystemClock_Config
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 347              	SystemClock_Config:
 348              	.LFB138:
 166:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 349              		.loc 1 166 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 80
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353 0000 00B5     		push	{lr}
 354              		.cfi_def_cfa_offset 4
 355              		.cfi_offset 14, -4
 356 0002 95B0     		sub	sp, sp, #84
 357              		.cfi_def_cfa_offset 88
 167:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 358              		.loc 1 167 3 view .LVU99
 167:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 359              		.loc 1 167 22 is_stmt 0 view .LVU100
 360 0004 3022     		movs	r2, #48
 361 0006 0021     		movs	r1, #0
 362 0008 08A8     		add	r0, sp, #32
 363 000a FFF7FEFF 		bl	memset
 364              	.LVL7:
 168:Core/Src/main.c **** 
 365              		.loc 1 168 3 is_stmt 1 view .LVU101
 168:Core/Src/main.c **** 
 366              		.loc 1 168 22 is_stmt 0 view .LVU102
 367 000e 0023     		movs	r3, #0
 368 0010 0393     		str	r3, [sp, #12]
 369 0012 0493     		str	r3, [sp, #16]
 370 0014 0593     		str	r3, [sp, #20]
 371 0016 0693     		str	r3, [sp, #24]
 372 0018 0793     		str	r3, [sp, #28]
 172:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 373              		.loc 1 172 3 is_stmt 1 view .LVU103
 374              	.LBB10:
 172:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 375              		.loc 1 172 3 view .LVU104
 376 001a 0193     		str	r3, [sp, #4]
 172:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 31


 377              		.loc 1 172 3 view .LVU105
 378 001c 1F4A     		ldr	r2, .L25
 379 001e 116C     		ldr	r1, [r2, #64]
 380 0020 41F08051 		orr	r1, r1, #268435456
 381 0024 1164     		str	r1, [r2, #64]
 172:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 382              		.loc 1 172 3 view .LVU106
 383 0026 126C     		ldr	r2, [r2, #64]
 384 0028 02F08052 		and	r2, r2, #268435456
 385 002c 0192     		str	r2, [sp, #4]
 172:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 386              		.loc 1 172 3 view .LVU107
 387 002e 019A     		ldr	r2, [sp, #4]
 388              	.LBE10:
 172:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 389              		.loc 1 172 3 view .LVU108
 173:Core/Src/main.c **** 
 390              		.loc 1 173 3 view .LVU109
 391              	.LBB11:
 173:Core/Src/main.c **** 
 392              		.loc 1 173 3 view .LVU110
 393 0030 0293     		str	r3, [sp, #8]
 173:Core/Src/main.c **** 
 394              		.loc 1 173 3 view .LVU111
 395 0032 1B49     		ldr	r1, .L25+4
 396 0034 0A68     		ldr	r2, [r1]
 397 0036 22F44042 		bic	r2, r2, #49152
 398 003a 42F40042 		orr	r2, r2, #32768
 399 003e 0A60     		str	r2, [r1]
 173:Core/Src/main.c **** 
 400              		.loc 1 173 3 view .LVU112
 401 0040 0A68     		ldr	r2, [r1]
 402 0042 02F44042 		and	r2, r2, #49152
 403 0046 0292     		str	r2, [sp, #8]
 173:Core/Src/main.c **** 
 404              		.loc 1 173 3 view .LVU113
 405 0048 029A     		ldr	r2, [sp, #8]
 406              	.LBE11:
 173:Core/Src/main.c **** 
 407              		.loc 1 173 3 view .LVU114
 178:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 408              		.loc 1 178 3 view .LVU115
 178:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 409              		.loc 1 178 36 is_stmt 0 view .LVU116
 410 004a 0221     		movs	r1, #2
 411 004c 0891     		str	r1, [sp, #32]
 179:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 412              		.loc 1 179 3 is_stmt 1 view .LVU117
 179:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 413              		.loc 1 179 30 is_stmt 0 view .LVU118
 414 004e 0122     		movs	r2, #1
 415 0050 0B92     		str	r2, [sp, #44]
 180:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 416              		.loc 1 180 3 is_stmt 1 view .LVU119
 180:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 417              		.loc 1 180 41 is_stmt 0 view .LVU120
 418 0052 1022     		movs	r2, #16
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 32


 419 0054 0C92     		str	r2, [sp, #48]
 181:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 420              		.loc 1 181 3 is_stmt 1 view .LVU121
 181:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 421              		.loc 1 181 34 is_stmt 0 view .LVU122
 422 0056 0E91     		str	r1, [sp, #56]
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 423              		.loc 1 182 3 is_stmt 1 view .LVU123
 182:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 424              		.loc 1 182 35 is_stmt 0 view .LVU124
 425 0058 0F93     		str	r3, [sp, #60]
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 426              		.loc 1 183 3 is_stmt 1 view .LVU125
 183:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 427              		.loc 1 183 30 is_stmt 0 view .LVU126
 428 005a 1092     		str	r2, [sp, #64]
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 429              		.loc 1 184 3 is_stmt 1 view .LVU127
 184:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 430              		.loc 1 184 30 is_stmt 0 view .LVU128
 431 005c 4FF4A873 		mov	r3, #336
 432 0060 1193     		str	r3, [sp, #68]
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 433              		.loc 1 185 3 is_stmt 1 view .LVU129
 185:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 434              		.loc 1 185 30 is_stmt 0 view .LVU130
 435 0062 0423     		movs	r3, #4
 436 0064 1293     		str	r3, [sp, #72]
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 437              		.loc 1 186 3 is_stmt 1 view .LVU131
 186:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 438              		.loc 1 186 30 is_stmt 0 view .LVU132
 439 0066 0723     		movs	r3, #7
 440 0068 1393     		str	r3, [sp, #76]
 187:Core/Src/main.c ****   {
 441              		.loc 1 187 3 is_stmt 1 view .LVU133
 187:Core/Src/main.c ****   {
 442              		.loc 1 187 7 is_stmt 0 view .LVU134
 443 006a 08A8     		add	r0, sp, #32
 444 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 445              	.LVL8:
 187:Core/Src/main.c ****   {
 446              		.loc 1 187 6 discriminator 1 view .LVU135
 447 0070 80B9     		cbnz	r0, .L23
 194:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 448              		.loc 1 194 3 is_stmt 1 view .LVU136
 194:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 449              		.loc 1 194 31 is_stmt 0 view .LVU137
 450 0072 0F23     		movs	r3, #15
 451 0074 0393     		str	r3, [sp, #12]
 196:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 452              		.loc 1 196 3 is_stmt 1 view .LVU138
 196:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 453              		.loc 1 196 34 is_stmt 0 view .LVU139
 454 0076 0221     		movs	r1, #2
 455 0078 0491     		str	r1, [sp, #16]
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 33


 456              		.loc 1 197 3 is_stmt 1 view .LVU140
 197:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 457              		.loc 1 197 35 is_stmt 0 view .LVU141
 458 007a 0023     		movs	r3, #0
 459 007c 0593     		str	r3, [sp, #20]
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 460              		.loc 1 198 3 is_stmt 1 view .LVU142
 198:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 461              		.loc 1 198 36 is_stmt 0 view .LVU143
 462 007e 4FF48052 		mov	r2, #4096
 463 0082 0692     		str	r2, [sp, #24]
 199:Core/Src/main.c **** 
 464              		.loc 1 199 3 is_stmt 1 view .LVU144
 199:Core/Src/main.c **** 
 465              		.loc 1 199 36 is_stmt 0 view .LVU145
 466 0084 0793     		str	r3, [sp, #28]
 201:Core/Src/main.c ****   {
 467              		.loc 1 201 3 is_stmt 1 view .LVU146
 201:Core/Src/main.c ****   {
 468              		.loc 1 201 7 is_stmt 0 view .LVU147
 469 0086 03A8     		add	r0, sp, #12
 470 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 471              	.LVL9:
 201:Core/Src/main.c ****   {
 472              		.loc 1 201 6 discriminator 1 view .LVU148
 473 008c 20B9     		cbnz	r0, .L24
 205:Core/Src/main.c **** 
 474              		.loc 1 205 1 view .LVU149
 475 008e 15B0     		add	sp, sp, #84
 476              		.cfi_remember_state
 477              		.cfi_def_cfa_offset 4
 478              		@ sp needed
 479 0090 5DF804FB 		ldr	pc, [sp], #4
 480              	.L23:
 481              		.cfi_restore_state
 189:Core/Src/main.c ****   }
 482              		.loc 1 189 5 is_stmt 1 view .LVU150
 483 0094 FFF7FEFF 		bl	Error_Handler
 484              	.LVL10:
 485              	.L24:
 203:Core/Src/main.c ****   }
 486              		.loc 1 203 5 view .LVU151
 487 0098 FFF7FEFF 		bl	Error_Handler
 488              	.LVL11:
 489              	.L26:
 490              		.align	2
 491              	.L25:
 492 009c 00380240 		.word	1073887232
 493 00a0 00700040 		.word	1073770496
 494              		.cfi_endproc
 495              	.LFE138:
 497              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 498              		.align	2
 499              	.LC0:
 500 0000 66617274 		.ascii	"fart1.wav\000"
 500      312E7761 
 500      7600
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 34


 501 000a 0000     		.align	2
 502              	.LC1:
 503 000c 66617274 		.ascii	"fart2.wav\000"
 503      322E7761 
 503      7600
 504 0016 0000     		.align	2
 505              	.LC2:
 506 0018 66617274 		.ascii	"fart3.wav\000"
 506      332E7761 
 506      7600
 507 0022 0000     		.align	2
 508              	.LC3:
 509 0024 66617274 		.ascii	"fart4.wav\000"
 509      342E7761 
 509      7600
 510 002e 0000     		.align	2
 511              	.LC4:
 512 0030 66617274 		.ascii	"fart5.wav\000"
 512      352E7761 
 512      7600
 513 003a 0000     		.align	2
 514              	.LC5:
 515 003c 66617274 		.ascii	"fart6.wav\000"
 515      362E7761 
 515      7600
 516 0046 0000     		.align	2
 517              	.LC6:
 518 0048 66617274 		.ascii	"fart7.wav\000"
 518      372E7761 
 518      7600
 519 0052 0000     		.align	2
 520              	.LC7:
 521 0054 66617274 		.ascii	"fart8.wav\000"
 521      382E7761 
 521      7600
 522 005e 0000     		.align	2
 523              	.LC8:
 524 0060 66617274 		.ascii	"fart9.wav\000"
 524      392E7761 
 524      7600
 525 006a 0000     		.align	2
 526              	.LC9:
 527 006c 66617274 		.ascii	"fart10.wav\000"
 527      31302E77 
 527      617600
 528 0077 00       		.align	2
 529              	.LC10:
 530 0078 66617274 		.ascii	"fart11.wav\000"
 530      31312E77 
 530      617600
 531 0083 00       		.align	2
 532              	.LC11:
 533 0084 66617274 		.ascii	"fart12.wav\000"
 533      31322E77 
 533      617600
 534              		.section	.text.main,"ax",%progbits
 535              		.align	1
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 35


 536              		.global	main
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 541              	main:
 542              	.LFB137:
  74:Core/Src/main.c **** 
 543              		.loc 1 74 1 view -0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 1016
 546              		@ frame_needed = 1, uses_anonymous_args = 0
 547 0000 B0B5     		push	{r4, r5, r7, lr}
 548              		.cfi_def_cfa_offset 16
 549              		.cfi_offset 4, -16
 550              		.cfi_offset 5, -12
 551              		.cfi_offset 7, -8
 552              		.cfi_offset 14, -4
 553 0002 ADF57E7D 		sub	sp, sp, #1016
 554              		.cfi_def_cfa_offset 1032
 555 0006 00AF     		add	r7, sp, #0
 556              		.cfi_def_cfa_register 7
  83:Core/Src/main.c **** 
 557              		.loc 1 83 3 view .LVU153
 558 0008 FFF7FEFF 		bl	HAL_Init
 559              	.LVL12:
  90:Core/Src/main.c **** 
 560              		.loc 1 90 3 view .LVU154
 561 000c FFF7FEFF 		bl	SystemClock_Config
 562              	.LVL13:
  97:Core/Src/main.c ****   MX_USART2_UART_Init();
 563              		.loc 1 97 3 view .LVU155
 564 0010 FFF7FEFF 		bl	MX_GPIO_Init
 565              	.LVL14:
  98:Core/Src/main.c ****   MX_I2C1_Init();
 566              		.loc 1 98 3 view .LVU156
 567 0014 FFF7FEFF 		bl	MX_USART2_UART_Init
 568              	.LVL15:
  99:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 569              		.loc 1 99 3 view .LVU157
 570 0018 FFF7FEFF 		bl	MX_I2C1_Init
 571              	.LVL16:
 103:Core/Src/main.c ****     Error_Handler();
 572              		.loc 1 103 3 view .LVU158
 103:Core/Src/main.c ****     Error_Handler();
 573              		.loc 1 103 7 is_stmt 0 view .LVU159
 574 001c 2B48     		ldr	r0, .L31
 575 001e FFF7FEFF 		bl	ssd1306_Init
 576              	.LVL17:
 103:Core/Src/main.c ****     Error_Handler();
 577              		.loc 1 103 6 discriminator 1 view .LVU160
 578 0022 08B1     		cbz	r0, .L28
 104:Core/Src/main.c ****   }
 579              		.loc 1 104 5 is_stmt 1 view .LVU161
 580 0024 FFF7FEFF 		bl	Error_Handler
 581              	.LVL18:
 582              	.L28:
 106:Core/Src/main.c **** 
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 36


 583              		.loc 1 106 3 view .LVU162
 584 0028 4FF47A70 		mov	r0, #1000
 585 002c FFF7FEFF 		bl	HAL_Delay
 586              	.LVL19:
 108:Core/Src/main.c ****   ssd1306_UpdateScreen(&hi2c1);
 587              		.loc 1 108 3 view .LVU163
 588 0030 0020     		movs	r0, #0
 589 0032 FFF7FEFF 		bl	ssd1306_Fill
 590              	.LVL20:
 109:Core/Src/main.c **** 
 591              		.loc 1 109 3 view .LVU164
 592 0036 254C     		ldr	r4, .L31
 593 0038 2046     		mov	r0, r4
 594 003a FFF7FEFF 		bl	ssd1306_UpdateScreen
 595              	.LVL21:
 111:Core/Src/main.c **** 
 596              		.loc 1 111 3 view .LVU165
 597 003e 4FF47A70 		mov	r0, #1000
 598 0042 FFF7FEFF 		bl	HAL_Delay
 599              	.LVL22:
 114:Core/Src/main.c ****   initializeFileManager(&fm);
 600              		.loc 1 114 3 view .LVU166
 115:Core/Src/main.c **** 
 601              		.loc 1 115 3 view .LVU167
 602 0046 381D     		adds	r0, r7, #4
 603 0048 FFF7FEFF 		bl	initializeFileManager
 604              	.LVL23:
 118:Core/Src/main.c ****   addFile(&fm, "fart2.wav");
 605              		.loc 1 118 3 view .LVU168
 606 004c 2049     		ldr	r1, .L31+4
 607 004e 381D     		adds	r0, r7, #4
 608 0050 FFF7FEFF 		bl	addFile
 609              	.LVL24:
 119:Core/Src/main.c ****   addFile(&fm, "fart3.wav");
 610              		.loc 1 119 3 view .LVU169
 611 0054 1F49     		ldr	r1, .L31+8
 612 0056 381D     		adds	r0, r7, #4
 613 0058 FFF7FEFF 		bl	addFile
 614              	.LVL25:
 120:Core/Src/main.c ****   addFile(&fm, "fart4.wav");
 615              		.loc 1 120 3 view .LVU170
 616 005c 1E49     		ldr	r1, .L31+12
 617 005e 381D     		adds	r0, r7, #4
 618 0060 FFF7FEFF 		bl	addFile
 619              	.LVL26:
 121:Core/Src/main.c ****   addFile(&fm, "fart5.wav");
 620              		.loc 1 121 3 view .LVU171
 621 0064 1D49     		ldr	r1, .L31+16
 622 0066 381D     		adds	r0, r7, #4
 623 0068 FFF7FEFF 		bl	addFile
 624              	.LVL27:
 122:Core/Src/main.c ****   addFile(&fm, "fart6.wav");
 625              		.loc 1 122 3 view .LVU172
 626 006c 1C49     		ldr	r1, .L31+20
 627 006e 381D     		adds	r0, r7, #4
 628 0070 FFF7FEFF 		bl	addFile
 629              	.LVL28:
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 37


 123:Core/Src/main.c ****   addFile(&fm, "fart7.wav");
 630              		.loc 1 123 3 view .LVU173
 631 0074 1B49     		ldr	r1, .L31+24
 632 0076 381D     		adds	r0, r7, #4
 633 0078 FFF7FEFF 		bl	addFile
 634              	.LVL29:
 124:Core/Src/main.c ****   addFile(&fm, "fart8.wav");
 635              		.loc 1 124 3 view .LVU174
 636 007c 1A49     		ldr	r1, .L31+28
 637 007e 381D     		adds	r0, r7, #4
 638 0080 FFF7FEFF 		bl	addFile
 639              	.LVL30:
 125:Core/Src/main.c ****   addFile(&fm, "fart9.wav");
 640              		.loc 1 125 3 view .LVU175
 641 0084 1949     		ldr	r1, .L31+32
 642 0086 381D     		adds	r0, r7, #4
 643 0088 FFF7FEFF 		bl	addFile
 644              	.LVL31:
 126:Core/Src/main.c ****   addFile(&fm, "fart10.wav");
 645              		.loc 1 126 3 view .LVU176
 646 008c 1849     		ldr	r1, .L31+36
 647 008e 381D     		adds	r0, r7, #4
 648 0090 FFF7FEFF 		bl	addFile
 649              	.LVL32:
 127:Core/Src/main.c ****   addFile(&fm, "fart11.wav");
 650              		.loc 1 127 3 view .LVU177
 651 0094 1749     		ldr	r1, .L31+40
 652 0096 381D     		adds	r0, r7, #4
 653 0098 FFF7FEFF 		bl	addFile
 654              	.LVL33:
 128:Core/Src/main.c ****   addFile(&fm, "fart12.wav");
 655              		.loc 1 128 3 view .LVU178
 656 009c 1649     		ldr	r1, .L31+44
 657 009e 381D     		adds	r0, r7, #4
 658 00a0 FFF7FEFF 		bl	addFile
 659              	.LVL34:
 129:Core/Src/main.c **** 
 660              		.loc 1 129 3 view .LVU179
 661 00a4 1549     		ldr	r1, .L31+48
 662 00a6 381D     		adds	r0, r7, #4
 663 00a8 FFF7FEFF 		bl	addFile
 664              	.LVL35:
 131:Core/Src/main.c ****   int16_t samples[num_samples];
 665              		.loc 1 131 3 view .LVU180
 132:Core/Src/main.c ****   generateWaveform(samples, num_samples);
 666              		.loc 1 132 3 view .LVU181
 132:Core/Src/main.c ****   generateWaveform(samples, num_samples);
 667              		.loc 1 132 11 is_stmt 0 view .LVU182
 668 00ac ADF57A6D 		sub	sp, sp, #4000
 669 00b0 6D46     		mov	r5, sp
 670              	.LVL36:
 133:Core/Src/main.c ****   drawWaveform(&hi2c1,samples, num_samples);
 671              		.loc 1 133 3 is_stmt 1 view .LVU183
 672 00b2 4FF4FA61 		mov	r1, #2000
 673 00b6 2846     		mov	r0, r5
 674 00b8 FFF7FEFF 		bl	generateWaveform
 675              	.LVL37:
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 38


 134:Core/Src/main.c ****   /* USER CODE END 2 */
 676              		.loc 1 134 3 view .LVU184
 677 00bc 4FF4FA62 		mov	r2, #2000
 678 00c0 2946     		mov	r1, r5
 679 00c2 2046     		mov	r0, r4
 680 00c4 FFF7FEFF 		bl	drawWaveform
 681              	.LVL38:
 682              	.L29:
 138:Core/Src/main.c ****   { 
 683              		.loc 1 138 3 view .LVU185
 157:Core/Src/main.c ****   /* USER CODE END 3 */
 684              		.loc 1 157 3 view .LVU186
 138:Core/Src/main.c ****   { 
 685              		.loc 1 138 9 view .LVU187
 686 00c8 FEE7     		b	.L29
 687              	.L32:
 688 00ca 00BF     		.align	2
 689              	.L31:
 690 00cc 00000000 		.word	hi2c1
 691 00d0 00000000 		.word	.LC0
 692 00d4 0C000000 		.word	.LC1
 693 00d8 18000000 		.word	.LC2
 694 00dc 24000000 		.word	.LC3
 695 00e0 30000000 		.word	.LC4
 696 00e4 3C000000 		.word	.LC5
 697 00e8 48000000 		.word	.LC6
 698 00ec 54000000 		.word	.LC7
 699 00f0 60000000 		.word	.LC8
 700 00f4 6C000000 		.word	.LC9
 701 00f8 78000000 		.word	.LC10
 702 00fc 84000000 		.word	.LC11
 703              		.cfi_endproc
 704              	.LFE137:
 706              		.global	huart2
 707              		.section	.bss.huart2,"aw",%nobits
 708              		.align	2
 711              	huart2:
 712 0000 00000000 		.space	72
 712      00000000 
 712      00000000 
 712      00000000 
 712      00000000 
 713              		.global	hi2c1
 714              		.section	.bss.hi2c1,"aw",%nobits
 715              		.align	2
 718              	hi2c1:
 719 0000 00000000 		.space	84
 719      00000000 
 719      00000000 
 719      00000000 
 719      00000000 
 720              		.text
 721              	.Letext0:
 722              		.file 3 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-de
 723              		.file 4 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-de
 724              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 725              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 39


 726              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 727              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 728              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 729              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 730              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 731              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 732              		.file 13 "Core/Inc/ssd1306.h"
 733              		.file 14 "Core/Inc/filemanager.h"
 734              		.file 15 "Core/Inc/display.h"
 735              		.file 16 "Core/Inc/audio.h"
 736              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 737              		.file 18 "<built-in>"
ARM GAS  C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:162    .text.MX_GPIO_Init:0000009c $d
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:169    .text.Error_Handler:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:175    .text.Error_Handler:00000000 Error_Handler
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:207    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:212    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:266    .text.MX_USART2_UART_Init:0000002c $d
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:711    .bss.huart2:00000000 huart2
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:272    .text.MX_I2C1_Init:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:277    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:334    .text.MX_I2C1_Init:0000002c $d
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:718    .bss.hi2c1:00000000 hi2c1
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:341    .text.SystemClock_Config:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:347    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:492    .text.SystemClock_Config:0000009c $d
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:498    .rodata.main.str1.4:00000000 $d
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:535    .text.main:00000000 $t
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:541    .text.main:00000000 main
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:690    .text.main:000000cc $d
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:708    .bss.huart2:00000000 $d
C:\Users\jonas\AppData\Local\Temp\ccMWvXqy.s:715    .bss.hi2c1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_I2C_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
ssd1306_Init
HAL_Delay
ssd1306_Fill
ssd1306_UpdateScreen
initializeFileManager
addFile
generateWaveform
drawWaveform
