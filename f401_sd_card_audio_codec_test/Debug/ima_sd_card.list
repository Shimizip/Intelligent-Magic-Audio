
ima_sd_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08007380  08007380  00008380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800764c  0800764c  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  0800764c  0800764c  0000864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007654  08007654  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007654  08007654  00008654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800765c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000074  080076d0  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080076d0  000093cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edcc  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002882  00000000  00000000  00017e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0001a6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ee  00000000  00000000  0001b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a9f  00000000  00000000  0001bdde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011965  00000000  00000000  0003387d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088faf  00000000  00000000  000451e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce191  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000ce1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d1b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007368 	.word	0x08007368

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08007368 	.word	0x08007368

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000580:	b40f      	push	{r0, r1, r2, r3}
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	693a      	ldr	r2, [r7, #16]
 8000592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <myprintf+0x44>)
 8000598:	f006 fa58 	bl	8006a4c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800059c:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <myprintf+0x44>)
 800059e:	f7ff fe1f 	bl	80001e0 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ae:	4905      	ldr	r1, [pc, #20]	@ (80005c4 <myprintf+0x44>)
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <myprintf+0x48>)
 80005b2:	f002 f93d 	bl	8002830 <HAL_UART_Transmit>

}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c0:	b004      	add	sp, #16
 80005c2:	4770      	bx	lr
 80005c4:	20000134 	.word	0x20000134
 80005c8:	200000ec 	.word	0x200000ec

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	f5ad 6d94 	sub.w	sp, sp, #1184	@ 0x4a0
 80005d2:	af00      	add	r7, sp, #0
int main(void)
 80005d4:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80005d8:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fbea 	bl	8000db4 <HAL_Init>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f90c 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f9d6 	bl	8000994 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f9aa 	bl	8000940 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80005ec:	f003 f8d2 	bl	8003794 <MX_FATFS_Init>
  MX_SPI2_Init();
 80005f0:	f000 f970 	bl	80008d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 80005f4:	4870      	ldr	r0, [pc, #448]	@ (80007b8 <main+0x1ec>)
 80005f6:	f7ff ffc3 	bl	8000580 <myprintf>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 80005fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fe:	f000 fc4b 	bl	8000e98 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "1", 1); //1=mount now
 8000602:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8000606:	2201      	movs	r2, #1
 8000608:	496c      	ldr	r1, [pc, #432]	@ (80007bc <main+0x1f0>)
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fb48 	bl	8005ca0 <f_mount>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if (fres != FR_OK) {
 8000616:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800061a:	2b00      	cmp	r3, #0
 800061c:	d005      	beq.n	800062a <main+0x5e>
	myprintf("f_mount error (%i)\r\n", fres);
 800061e:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000622:	4619      	mov	r1, r3
 8000624:	4866      	ldr	r0, [pc, #408]	@ (80007c0 <main+0x1f4>)
 8000626:	f7ff ffab 	bl	8000580 <myprintf>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 800062a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800062e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000632:	4619      	mov	r1, r3
 8000634:	4863      	ldr	r0, [pc, #396]	@ (80007c4 <main+0x1f8>)
 8000636:	f006 f88f 	bl	8006758 <f_getfree>
 800063a:	4603      	mov	r3, r0
 800063c:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if (fres != FR_OK) {
 8000640:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000644:	2b00      	cmp	r3, #0
 8000646:	d005      	beq.n	8000654 <main+0x88>
	myprintf("f_getfree error (%i)\r\n", fres);
 8000648:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800064c:	4619      	mov	r1, r3
 800064e:	485e      	ldr	r0, [pc, #376]	@ (80007c8 <main+0x1fc>)
 8000650:	f7ff ff96 	bl	8000580 <myprintf>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000654:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000658:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	3b02      	subs	r3, #2
 8000662:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8000666:	f2a2 427c 	subw	r2, r2, #1148	@ 0x47c
 800066a:	6812      	ldr	r2, [r2, #0]
 800066c:	8952      	ldrh	r2, [r2, #10]
 800066e:	fb02 f303 	mul.w	r3, r2, r3
 8000672:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
  free_sectors = free_clusters * getFreeFs->csize;
 8000676:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800067a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	895b      	ldrh	r3, [r3, #10]
 8000682:	461a      	mov	r2, r3
 8000684:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000688:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	fb02 f303 	mul.w	r3, r2, r3
 8000692:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000696:	f8d7 3498 	ldr.w	r3, [r7, #1176]	@ 0x498
 800069a:	0859      	lsrs	r1, r3, #1
 800069c:	f8d7 3494 	ldr.w	r3, [r7, #1172]	@ 0x494
 80006a0:	085b      	lsrs	r3, r3, #1
 80006a2:	461a      	mov	r2, r3
 80006a4:	4849      	ldr	r0, [pc, #292]	@ (80007cc <main+0x200>)
 80006a6:	f7ff ff6b 	bl	8000580 <myprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80006aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006ae:	2201      	movs	r2, #1
 80006b0:	4947      	ldr	r1, [pc, #284]	@ (80007d0 <main+0x204>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fb3a 	bl	8005d2c <f_open>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if (fres != FR_OK) {
 80006be:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d004      	beq.n	80006d0 <main+0x104>
	myprintf("f_open error (%i)\r\n");
 80006c6:	4843      	ldr	r0, [pc, #268]	@ (80007d4 <main+0x208>)
 80006c8:	f7ff ff5a 	bl	8000580 <myprintf>
	while(1);
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <main+0x100>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 80006d0:	4841      	ldr	r0, [pc, #260]	@ (80007d8 <main+0x20c>)
 80006d2:	f7ff ff55 	bl	8000580 <myprintf>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006d6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	211e      	movs	r1, #30
 80006de:	4618      	mov	r0, r3
 80006e0:	f006 f8ef 	bl	80068c2 <f_gets>
 80006e4:	f8c7 0490 	str.w	r0, [r7, #1168]	@ 0x490
  if(rres != 0) {
 80006e8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	@ 0x490
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d005      	beq.n	80006fc <main+0x130>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4619      	mov	r1, r3
 80006f4:	4839      	ldr	r0, [pc, #228]	@ (80007dc <main+0x210>)
 80006f6:	f7ff ff43 	bl	8000580 <myprintf>
 80006fa:	e005      	b.n	8000708 <main+0x13c>
  } else {
	myprintf("f_gets error (%i)\r\n", fres);
 80006fc:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000700:	4619      	mov	r1, r3
 8000702:	4837      	ldr	r0, [pc, #220]	@ (80007e0 <main+0x214>)
 8000704:	f7ff ff3c 	bl	8000580 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000708:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800070c:	4618      	mov	r0, r3
 800070e:	f005 fff9 	bl	8006704 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000716:	221a      	movs	r2, #26
 8000718:	4932      	ldr	r1, [pc, #200]	@ (80007e4 <main+0x218>)
 800071a:	4618      	mov	r0, r3
 800071c:	f005 fb06 	bl	8005d2c <f_open>
 8000720:	4603      	mov	r3, r0
 8000722:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if(fres == FR_OK) {
 8000726:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800072a:	2b00      	cmp	r3, #0
 800072c:	d103      	bne.n	8000736 <main+0x16a>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 800072e:	482e      	ldr	r0, [pc, #184]	@ (80007e8 <main+0x21c>)
 8000730:	f7ff ff26 	bl	8000580 <myprintf>
 8000734:	e005      	b.n	8000742 <main+0x176>
  } else {
	myprintf("f_open error (%i)\r\n", fres);
 8000736:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 800073a:	4619      	mov	r1, r3
 800073c:	4825      	ldr	r0, [pc, #148]	@ (80007d4 <main+0x208>)
 800073e:	f7ff ff1f 	bl	8000580 <myprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4a29      	ldr	r2, [pc, #164]	@ (80007ec <main+0x220>)
 8000746:	461c      	mov	r4, r3
 8000748:	4615      	mov	r5, r2
 800074a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800074e:	682b      	ldr	r3, [r5, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	8022      	strh	r2, [r4, #0]
 8000754:	3402      	adds	r4, #2
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800075a:	463b      	mov	r3, r7
 800075c:	1d39      	adds	r1, r7, #4
 800075e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000762:	2213      	movs	r2, #19
 8000764:	f005 fddb 	bl	800631e <f_write>
 8000768:	4603      	mov	r3, r0
 800076a:	f887 349f 	strb.w	r3, [r7, #1183]	@ 0x49f
  if(fres == FR_OK) {
 800076e:	f897 349f 	ldrb.w	r3, [r7, #1183]	@ 0x49f
 8000772:	2b00      	cmp	r3, #0
 8000774:	d109      	bne.n	800078a <main+0x1be>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000776:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800077a:	f5a3 6394 	sub.w	r3, r3, #1184	@ 0x4a0
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	481b      	ldr	r0, [pc, #108]	@ (80007f0 <main+0x224>)
 8000784:	f7ff fefc 	bl	8000580 <myprintf>
 8000788:	e002      	b.n	8000790 <main+0x1c4>
  } else {
	myprintf("f_write error (%i)\r\n");
 800078a:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <main+0x228>)
 800078c:	f7ff fef8 	bl	8000580 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 8000790:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000794:	4618      	mov	r0, r3
 8000796:	f005 ffb5 	bl	8006704 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800079a:	2200      	movs	r2, #0
 800079c:	4909      	ldr	r1, [pc, #36]	@ (80007c4 <main+0x1f8>)
 800079e:	2000      	movs	r0, #0
 80007a0:	f005 fa7e 	bl	8005ca0 <f_mount>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      //Blink the LED every second
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007a4:	2120      	movs	r1, #32
 80007a6:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <main+0x22c>)
 80007a8:	f000 fee7 	bl	800157a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80007ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b0:	f000 fb72 	bl	8000e98 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80007b4:	bf00      	nop
 80007b6:	e7f5      	b.n	80007a4 <main+0x1d8>
 80007b8:	08007380 	.word	0x08007380
 80007bc:	080073a0 	.word	0x080073a0
 80007c0:	080073a4 	.word	0x080073a4
 80007c4:	080073bc 	.word	0x080073bc
 80007c8:	080073c0 	.word	0x080073c0
 80007cc:	080073d8 	.word	0x080073d8
 80007d0:	08007420 	.word	0x08007420
 80007d4:	0800742c 	.word	0x0800742c
 80007d8:	08007440 	.word	0x08007440
 80007dc:	08007470 	.word	0x08007470
 80007e0:	0800749c 	.word	0x0800749c
 80007e4:	080074b0 	.word	0x080074b0
 80007e8:	080074bc 	.word	0x080074bc
 80007ec:	080074ec 	.word	0x080074ec
 80007f0:	08007500 	.word	0x08007500
 80007f4:	08007524 	.word	0x08007524
 80007f8:	40020000 	.word	0x40020000

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f006 f92c 	bl	8006a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <SystemClock_Config+0xd0>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a28      	ldr	r2, [pc, #160]	@ (80008cc <SystemClock_Config+0xd0>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <SystemClock_Config+0xd0>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000848:	4a21      	ldr	r2, [pc, #132]	@ (80008d0 <SystemClock_Config+0xd4>)
 800084a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <SystemClock_Config+0xd4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000868:	2302      	movs	r3, #2
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000870:	2310      	movs	r3, #16
 8000872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000874:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000878:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800087a:	2304      	movs	r3, #4
 800087c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087e:	2307      	movs	r3, #7
 8000880:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fe92 	bl	80015b0 <HAL_RCC_OscConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000892:	f000 f903 	bl	8000a9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000896:	230f      	movs	r3, #15
 8000898:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2102      	movs	r1, #2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f8f4 	bl	8001aa0 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008be:	f000 f8ed 	bl	8000a9c <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	@ 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_SPI2_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	@ (800093c <MX_SPI2_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_SPI2_Init+0x64>)
 80008e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_SPI2_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_SPI2_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_SPI2_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_SPI2_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_SPI2_Init+0x64>)
 8000900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_SPI2_Init+0x64>)
 8000908:	2230      	movs	r2, #48	@ 0x30
 800090a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_SPI2_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_SPI2_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_SPI2_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_SPI2_Init+0x64>)
 8000920:	220a      	movs	r2, #10
 8000922:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_SPI2_Init+0x64>)
 8000926:	f001 fadb 	bl	8001ee0 <HAL_SPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 f8b4 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000094 	.word	0x20000094
 800093c:	40003800 	.word	0x40003800

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 8000946:	4a12      	ldr	r2, [pc, #72]	@ (8000990 <MX_USART2_UART_Init+0x50>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_USART2_UART_Init+0x4c>)
 8000978:	f001 ff0a 	bl	8002790 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f88b 	bl	8000a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000ec 	.word	0x200000ec
 8000990:	40004400 	.word	0x40004400

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a36      	ldr	r2, [pc, #216]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b34      	ldr	r3, [pc, #208]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b30      	ldr	r3, [pc, #192]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a2f      	ldr	r2, [pc, #188]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <MX_GPIO_Init+0xf8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	481c      	ldr	r0, [pc, #112]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 8000a20:	f000 fd92 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2102      	movs	r1, #2
 8000a28:	481a      	ldr	r0, [pc, #104]	@ (8000a94 <MX_GPIO_Init+0x100>)
 8000a2a:	f000 fd8d 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a34:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_GPIO_Init+0x104>)
 8000a46:	f000 fbfb 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480b      	ldr	r0, [pc, #44]	@ (8000a90 <MX_GPIO_Init+0xfc>)
 8000a62:	f000 fbed 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a66:	2302      	movs	r3, #2
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_GPIO_Init+0x100>)
 8000a7e:	f000 fbdf 	bl	8001240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40020800 	.word	0x40020800

08000a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <Error_Handler+0x8>

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ae6:	2007      	movs	r0, #7
 8000ae8:	f000 faca 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <HAL_SPI_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12c      	bne.n	8000b74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_SPI_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b52:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b64:	2305      	movs	r3, #5
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_SPI_MspInit+0x8c>)
 8000b70:	f000 fb66 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	@ 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40003800 	.word	0x40003800
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8000c1c <HAL_UART_MspInit+0x94>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d133      	bne.n	8000c12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b1c      	ldr	r3, [pc, #112]	@ (8000c20 <HAL_UART_MspInit+0x98>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <HAL_UART_MspInit+0x98>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b19      	ldr	r3, [pc, #100]	@ (8000c20 <HAL_UART_MspInit+0x98>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <HAL_UART_MspInit+0x98>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <HAL_UART_MspInit+0x98>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_UART_MspInit+0x98>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be2:	230c      	movs	r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <HAL_UART_MspInit+0x9c>)
 8000bfe:	f000 fb1f 	bl	8001240 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2026      	movs	r0, #38	@ 0x26
 8000c08:	f000 fa45 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0c:	2026      	movs	r0, #38	@ 0x26
 8000c0e:	f000 fa5e 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	@ 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <NMI_Handler+0x4>

08000c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <MemManage_Handler+0x4>

08000c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <SysTick_Handler+0x38>)
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d005      	beq.n	8000c94 <SysTick_Handler+0x18>
			Timer1--;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <SysTick_Handler+0x38>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <SysTick_Handler+0x38>)
 8000c92:	801a      	strh	r2, [r3, #0]
		if(Timer2 > 0)
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <SysTick_Handler+0x3c>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d005      	beq.n	8000ca8 <SysTick_Handler+0x2c>
				Timer2--;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <SysTick_Handler+0x3c>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <SysTick_Handler+0x3c>)
 8000ca6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 f8d6 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000cac:	f000 fa29 	bl	8001102 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000090 	.word	0x20000090
 8000cb8:	20000092 	.word	0x20000092

08000cbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <USART2_IRQHandler+0x10>)
 8000cc2:	f001 fe41 	bl	8002948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000ec 	.word	0x200000ec

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f005 feba 	bl	8006a78 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20018000 	.word	0x20018000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000234 	.word	0x20000234
 8000d38:	200003d0 	.word	0x200003d0

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f005 fe79 	bl	8006a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fc1b 	bl	80005cc <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000da4:	0800765c 	.word	0x0800765c
  ldr r2, =_sbss
 8000da8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dac:	200003cc 	.word	0x200003cc

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f94f 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fe5e 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f967 	bl	80010ea <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e34:	f000 f92f 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000238 	.word	0x20000238

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000238 	.word	0x20000238

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	@ (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	@ (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	@ (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	@ 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	@ (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001106:	f000 f802 	bl	800110e <HAL_SYSTICK_Callback>
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001128:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800112a:	f7ff fea9 	bl	8000e80 <HAL_GetTick>
 800112e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d008      	beq.n	800114e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2280      	movs	r2, #128	@ 0x80
 8001140:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e052      	b.n	80011f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0216 	bic.w	r2, r2, #22
 800115c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	695a      	ldr	r2, [r3, #20]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800116c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	2b00      	cmp	r3, #0
 8001174:	d103      	bne.n	800117e <HAL_DMA_Abort+0x62>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0208 	bic.w	r2, r2, #8
 800118c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0201 	bic.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119e:	e013      	b.n	80011c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a0:	f7ff fe6e 	bl	8000e80 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d90c      	bls.n	80011c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2220      	movs	r2, #32
 80011b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e015      	b.n	80011f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e4      	bne.n	80011a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011da:	223f      	movs	r2, #63	@ 0x3f
 80011dc:	409a      	lsls	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d004      	beq.n	800121a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2280      	movs	r2, #128	@ 0x80
 8001214:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00c      	b.n	8001234 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2205      	movs	r2, #5
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	e159      	b.n	8001510 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	f040 8148 	bne.w	800150a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d005      	beq.n	8001292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128e:	2b02      	cmp	r3, #2
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d017      	beq.n	8001330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	2203      	movs	r2, #3
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d123      	bne.n	8001384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	220f      	movs	r2, #15
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	69b9      	ldr	r1, [r7, #24]
 8001380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0203 	and.w	r2, r3, #3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80a2 	beq.w	800150a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b57      	ldr	r3, [pc, #348]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ce:	4a56      	ldr	r2, [pc, #344]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d6:	4b54      	ldr	r3, [pc, #336]	@ (8001528 <HAL_GPIO_Init+0x2e8>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e2:	4a52      	ldr	r2, [pc, #328]	@ (800152c <HAL_GPIO_Init+0x2ec>)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3302      	adds	r3, #2
 80013ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	220f      	movs	r2, #15
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a49      	ldr	r2, [pc, #292]	@ (8001530 <HAL_GPIO_Init+0x2f0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x202>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <HAL_GPIO_Init+0x2f4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x1fe>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a47      	ldr	r2, [pc, #284]	@ (8001538 <HAL_GPIO_Init+0x2f8>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x1fa>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a46      	ldr	r2, [pc, #280]	@ (800153c <HAL_GPIO_Init+0x2fc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x1f6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a45      	ldr	r2, [pc, #276]	@ (8001540 <HAL_GPIO_Init+0x300>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x1f2>
 800142e:	2304      	movs	r3, #4
 8001430:	e008      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001432:	2307      	movs	r3, #7
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001436:	2303      	movs	r3, #3
 8001438:	e004      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143a:	2302      	movs	r3, #2
 800143c:	e002      	b.n	8001444 <HAL_GPIO_Init+0x204>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_GPIO_Init+0x204>
 8001442:	2300      	movs	r3, #0
 8001444:	69fa      	ldr	r2, [r7, #28]
 8001446:	f002 0203 	and.w	r2, r2, #3
 800144a:	0092      	lsls	r2, r2, #2
 800144c:	4093      	lsls	r3, r2
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001454:	4935      	ldr	r1, [pc, #212]	@ (800152c <HAL_GPIO_Init+0x2ec>)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	089b      	lsrs	r3, r3, #2
 800145a:	3302      	adds	r3, #2
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001486:	4a2f      	ldr	r2, [pc, #188]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800148c:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <HAL_GPIO_Init+0x304>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b0:	4a24      	ldr	r2, [pc, #144]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	43db      	mvns	r3, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4013      	ands	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014da:	4a1a      	ldr	r2, [pc, #104]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_GPIO_Init+0x304>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001504:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <HAL_GPIO_Init+0x304>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b0f      	cmp	r3, #15
 8001514:	f67f aea2 	bls.w	800125c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3724      	adds	r7, #36	@ 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020400 	.word	0x40020400
 8001538:	40020800 	.word	0x40020800
 800153c:	40020c00 	.word	0x40020c00
 8001540:	40021000 	.word	0x40021000
 8001544:	40013c00 	.word	0x40013c00

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158c:	887a      	ldrh	r2, [r7, #2]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	041a      	lsls	r2, r3, #16
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43d9      	mvns	r1, r3
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	400b      	ands	r3, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e267      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d075      	beq.n	80016ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	4b88      	ldr	r3, [pc, #544]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d00c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b85      	ldr	r3, [pc, #532]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4b82      	ldr	r3, [pc, #520]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b7e      	ldr	r3, [pc, #504]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d05b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d157      	bne.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e242      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x74>
 8001616:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b70      	ldr	r3, [pc, #448]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6f      	ldr	r2, [pc, #444]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6d      	ldr	r3, [pc, #436]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6c      	ldr	r2, [pc, #432]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001648:	4b69      	ldr	r3, [pc, #420]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a68      	ldr	r2, [pc, #416]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b66      	ldr	r3, [pc, #408]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a65      	ldr	r2, [pc, #404]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fc0a 	bl	8000e80 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fc06 	bl	8000e80 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	@ 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e207      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5b      	ldr	r3, [pc, #364]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xc0>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fbf6 	bl	8000e80 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fbf2 	bl	8000e80 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	@ 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1f3      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b51      	ldr	r3, [pc, #324]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b47      	ldr	r3, [pc, #284]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b44      	ldr	r3, [pc, #272]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b41      	ldr	r3, [pc, #260]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4937      	ldr	r1, [pc, #220]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b34      	ldr	r3, [pc, #208]	@ (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fbab 	bl	8000e80 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fba7 	bl	8000e80 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a8      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4925      	ldr	r1, [pc, #148]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fb8a 	bl	8000e80 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fb86 	bl	8000e80 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e187      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d036      	beq.n	8001808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fb6a 	bl	8000e80 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fb66 	bl	8000e80 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e167      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x200>
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fb53 	bl	8000e80 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e00e      	b.n	80017fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fb4f 	bl	8000e80 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d907      	bls.n	80017fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e150      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	42470000 	.word	0x42470000
 80017f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b88      	ldr	r3, [pc, #544]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ea      	bne.n	80017de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8097 	beq.w	8001944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b81      	ldr	r3, [pc, #516]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	4a7c      	ldr	r2, [pc, #496]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	@ 0x40
 8001836:	4b7a      	ldr	r3, [pc, #488]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b77      	ldr	r3, [pc, #476]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b74      	ldr	r3, [pc, #464]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a73      	ldr	r2, [pc, #460]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fb0f 	bl	8000e80 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fb0b 	bl	8000e80 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e10c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b6a      	ldr	r3, [pc, #424]	@ (8001a24 <HAL_RCC_OscConfig+0x474>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x2ea>
 800188c:	4b64      	ldr	r3, [pc, #400]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001890:	4a63      	ldr	r2, [pc, #396]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	@ 0x70
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x30c>
 80018a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 80018bc:	4b58      	ldr	r3, [pc, #352]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018c0:	4a57      	ldr	r2, [pc, #348]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80018c8:	4b55      	ldr	r3, [pc, #340]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a54      	ldr	r2, [pc, #336]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fad0 	bl	8000e80 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff facc 	bl	8000e80 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0cb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	4b49      	ldr	r3, [pc, #292]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ee      	beq.n	80018e4 <HAL_RCC_OscConfig+0x334>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff faba 	bl	8000e80 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fab6 	bl	8000e80 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0b5      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	4b3e      	ldr	r3, [pc, #248]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ee      	bne.n	8001910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193c:	4a38      	ldr	r2, [pc, #224]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a1 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194e:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d05c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d141      	bne.n	80019e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fa8a 	bl	8000e80 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fa86 	bl	8000e80 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e087      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b27      	ldr	r3, [pc, #156]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	491b      	ldr	r1, [pc, #108]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fa5f 	bl	8000e80 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fa5b 	bl	8000e80 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e05c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x416>
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fa48 	bl	8000e80 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fa44 	bl	8000e80 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e045      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e038      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_RCC_OscConfig+0x4ec>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d028      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d121      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cc      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b68      	ldr	r3, [pc, #416]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d90c      	bls.n	8001adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b65      	ldr	r3, [pc, #404]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a58      	ldr	r2, [pc, #352]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a52      	ldr	r2, [pc, #328]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e067      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4934      	ldr	r1, [pc, #208]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff f976 	bl	8000e80 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f972 	bl	8000e80 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2b      	ldr	r3, [pc, #172]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b25      	ldr	r3, [pc, #148]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20c      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	@ (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f8d6 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08007580 	.word	0x08007580
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c70:	b094      	sub	sp, #80	@ 0x50
 8001c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c78:	2300      	movs	r3, #0
 8001c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c84:	4b79      	ldr	r3, [pc, #484]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d00d      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	f200 80e1 	bhi.w	8001e58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9e:	e0db      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ca4:	e0db      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b73      	ldr	r3, [pc, #460]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001caa:	e0d8      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b6f      	ldr	r3, [pc, #444]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d063      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	2200      	movs	r2, #0
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cde:	4622      	mov	r2, r4
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	0159      	lsls	r1, r3, #5
 8001cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf0:	0150      	lsls	r0, r2, #5
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	1a51      	subs	r1, r2, r1
 8001cfa:	6139      	str	r1, [r7, #16]
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	f04f 0300 	mov.w	r3, #0
 8001d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d10:	4659      	mov	r1, fp
 8001d12:	018b      	lsls	r3, r1, #6
 8001d14:	4651      	mov	r1, sl
 8001d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d1a:	4651      	mov	r1, sl
 8001d1c:	018a      	lsls	r2, r1, #6
 8001d1e:	4651      	mov	r1, sl
 8001d20:	ebb2 0801 	subs.w	r8, r2, r1
 8001d24:	4659      	mov	r1, fp
 8001d26:	eb63 0901 	sbc.w	r9, r3, r1
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d3e:	4690      	mov	r8, r2
 8001d40:	4699      	mov	r9, r3
 8001d42:	4623      	mov	r3, r4
 8001d44:	eb18 0303 	adds.w	r3, r8, r3
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	462b      	mov	r3, r5
 8001d4c:	eb49 0303 	adc.w	r3, r9, r3
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f04f 0300 	mov.w	r3, #0
 8001d5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d5e:	4629      	mov	r1, r5
 8001d60:	024b      	lsls	r3, r1, #9
 8001d62:	4621      	mov	r1, r4
 8001d64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d68:	4621      	mov	r1, r4
 8001d6a:	024a      	lsls	r2, r1, #9
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d72:	2200      	movs	r2, #0
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d7c:	f7fe fa88 	bl	8000290 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d88:	e058      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b38      	ldr	r3, [pc, #224]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	2200      	movs	r2, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	4611      	mov	r1, r2
 8001d96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9a:	623b      	str	r3, [r7, #32]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da4:	4642      	mov	r2, r8
 8001da6:	464b      	mov	r3, r9
 8001da8:	f04f 0000 	mov.w	r0, #0
 8001dac:	f04f 0100 	mov.w	r1, #0
 8001db0:	0159      	lsls	r1, r3, #5
 8001db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001db6:	0150      	lsls	r0, r2, #5
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8001de0:	eb63 050b 	sbc.w	r5, r3, fp
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	00eb      	lsls	r3, r5, #3
 8001dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df2:	00e2      	lsls	r2, r4, #3
 8001df4:	4614      	mov	r4, r2
 8001df6:	461d      	mov	r5, r3
 8001df8:	4643      	mov	r3, r8
 8001dfa:	18e3      	adds	r3, r4, r3
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	464b      	mov	r3, r9
 8001e00:	eb45 0303 	adc.w	r3, r5, r3
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e12:	4629      	mov	r1, r5
 8001e14:	028b      	lsls	r3, r1, #10
 8001e16:	4621      	mov	r1, r4
 8001e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e1c:	4621      	mov	r1, r4
 8001e1e:	028a      	lsls	r2, r1, #10
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e26:	2200      	movs	r2, #0
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	61fa      	str	r2, [r7, #28]
 8001e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e30:	f7fe fa2e 	bl	8000290 <__aeabi_uldivmod>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e56:	e002      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3750      	adds	r7, #80	@ 0x50
 8001e64:	46bd      	mov	sp, r7
 8001e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	00f42400 	.word	0x00f42400
 8001e74:	007a1200 	.word	0x007a1200

08001e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e7c:	4b03      	ldr	r3, [pc, #12]	@ (8001e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000

08001e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e94:	f7ff fff0 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0a9b      	lsrs	r3, r3, #10
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	4903      	ldr	r1, [pc, #12]	@ (8001eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08007590 	.word	0x08007590

08001eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ebc:	f7ff ffdc 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	0b5b      	lsrs	r3, r3, #13
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4903      	ldr	r1, [pc, #12]	@ (8001edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	08007590 	.word	0x08007590

08001ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e07b      	b.n	8001fea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f02:	d009      	beq.n	8001f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	e005      	b.n	8001f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fde0 	bl	8000af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f9c:	ea42 0103 	orr.w	r1, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	f003 0104 	and.w	r1, r3, #4
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	f003 0210 	and.w	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69da      	ldr	r2, [r3, #28]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b088      	sub	sp, #32
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	4613      	mov	r3, r2
 8002000:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_SPI_Transmit+0x22>
 8002010:	2302      	movs	r3, #2
 8002012:	e12d      	b.n	8002270 <HAL_SPI_Transmit+0x27e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800201c:	f7fe ff30 	bl	8000e80 <HAL_GetTick>
 8002020:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d002      	beq.n	8002038 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002036:	e116      	b.n	8002266 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_SPI_Transmit+0x52>
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002048:	e10d      	b.n	8002266 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	88fa      	ldrh	r2, [r7, #6]
 8002062:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2200      	movs	r2, #0
 800207a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002090:	d10f      	bne.n	80020b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020bc:	2b40      	cmp	r3, #64	@ 0x40
 80020be:	d007      	beq.n	80020d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020d8:	d14f      	bne.n	800217a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_SPI_Transmit+0xf6>
 80020e2:	8afb      	ldrh	r3, [r7, #22]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d142      	bne.n	800216e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	881a      	ldrh	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	1c9a      	adds	r2, r3, #2
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800210c:	e02f      	b.n	800216e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d112      	bne.n	8002142 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	1c9a      	adds	r2, r3, #2
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002140:	e015      	b.n	800216e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002142:	f7fe fe9d 	bl	8000e80 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d803      	bhi.n	800215a <HAL_SPI_Transmit+0x168>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002158:	d102      	bne.n	8002160 <HAL_SPI_Transmit+0x16e>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d106      	bne.n	800216e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800216c:	e07b      	b.n	8002266 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1ca      	bne.n	800210e <HAL_SPI_Transmit+0x11c>
 8002178:	e050      	b.n	800221c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_SPI_Transmit+0x196>
 8002182:	8afb      	ldrh	r3, [r7, #22]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d144      	bne.n	8002212 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	330c      	adds	r3, #12
 8002192:	7812      	ldrb	r2, [r2, #0]
 8002194:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80021ae:	e030      	b.n	8002212 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d113      	bne.n	80021e6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	330c      	adds	r3, #12
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80021e4:	e015      	b.n	8002212 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e6:	f7fe fe4b 	bl	8000e80 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d803      	bhi.n	80021fe <HAL_SPI_Transmit+0x20c>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021fc:	d102      	bne.n	8002204 <HAL_SPI_Transmit+0x212>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002210:	e029      	b.n	8002266 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1c9      	bne.n	80021b0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	6839      	ldr	r1, [r7, #0]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fa61 	bl	80026e8 <SPI_EndRxTxTransaction>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10a      	bne.n	8002250 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	77fb      	strb	r3, [r7, #31]
 800225c:	e003      	b.n	8002266 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800226e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3720      	adds	r7, #32
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	@ 0x30
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002286:	2301      	movs	r3, #1
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_SPI_TransmitReceive+0x26>
 800229a:	2302      	movs	r3, #2
 800229c:	e198      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x358>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022a6:	f7fe fdeb 	bl	8000e80 <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d00f      	beq.n	80022e8 <HAL_SPI_TransmitReceive+0x70>
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022ce:	d107      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x68>
 80022d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d003      	beq.n	80022e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022e0:	2302      	movs	r3, #2
 80022e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80022e6:	e16d      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x82>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x82>
 80022f4:	887b      	ldrh	r3, [r7, #2]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002300:	e160      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b04      	cmp	r3, #4
 800230c:	d003      	beq.n	8002316 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	887a      	ldrh	r2, [r7, #2]
 8002326:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	887a      	ldrh	r2, [r7, #2]
 800233e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002356:	2b40      	cmp	r3, #64	@ 0x40
 8002358:	d007      	beq.n	800236a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002372:	d17c      	bne.n	800246e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_SPI_TransmitReceive+0x10a>
 800237c:	8b7b      	ldrh	r3, [r7, #26]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d16a      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002386:	881a      	ldrh	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	1c9a      	adds	r2, r3, #2
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a6:	e057      	b.n	8002458 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d11b      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x176>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d016      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x176>
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d113      	bne.n	80023ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	881a      	ldrh	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	1c9a      	adds	r2, r3, #2
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d119      	bne.n	8002430 <HAL_SPI_TransmitReceive+0x1b8>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d014      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002410:	b292      	uxth	r2, r2
 8002412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800242c:	2301      	movs	r3, #1
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002430:	f7fe fd26 	bl	8000e80 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800243c:	429a      	cmp	r2, r3
 800243e:	d80b      	bhi.n	8002458 <HAL_SPI_TransmitReceive+0x1e0>
 8002440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002446:	d007      	beq.n	8002458 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002456:	e0b5      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1a2      	bne.n	80023a8 <HAL_SPI_TransmitReceive+0x130>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d19d      	bne.n	80023a8 <HAL_SPI_TransmitReceive+0x130>
 800246c:	e080      	b.n	8002570 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d002      	beq.n	800247c <HAL_SPI_TransmitReceive+0x204>
 8002476:	8b7b      	ldrh	r3, [r7, #26]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d16f      	bne.n	800255c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a2:	e05b      	b.n	800255c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d11c      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x274>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d017      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x274>
 80024bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d114      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d119      	bne.n	800252e <HAL_SPI_TransmitReceive+0x2b6>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d014      	beq.n	800252e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800252a:	2301      	movs	r3, #1
 800252c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800252e:	f7fe fca7 	bl	8000e80 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800253a:	429a      	cmp	r2, r3
 800253c:	d803      	bhi.n	8002546 <HAL_SPI_TransmitReceive+0x2ce>
 800253e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002544:	d102      	bne.n	800254c <HAL_SPI_TransmitReceive+0x2d4>
 8002546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800255a:	e033      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d19e      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x22c>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d199      	bne.n	80024a4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002572:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f8b7 	bl	80026e8 <SPI_EndRxTxTransaction>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800258c:	e01a      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10a      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80025ba:	e003      	b.n	80025c4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80025cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3730      	adds	r7, #48	@ 0x30
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025e8:	f7fe fc4a 	bl	8000e80 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025f8:	f7fe fc42 	bl	8000e80 <HAL_GetTick>
 80025fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025fe:	4b39      	ldr	r3, [pc, #228]	@ (80026e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	015b      	lsls	r3, r3, #5
 8002604:	0d1b      	lsrs	r3, r3, #20
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800260e:	e054      	b.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002616:	d050      	beq.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002618:	f7fe fc32 	bl	8000e80 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	d902      	bls.n	800262e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d13d      	bne.n	80026aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800263c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002646:	d111      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002650:	d004      	beq.n	800265c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800265a:	d107      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800266a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002674:	d10f      	bne.n	8002696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e017      	b.n	80026da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d19b      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2201      	movs	r2, #1
 80026fc:	2102      	movs	r1, #2
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff ff6a 	bl	80025d8 <SPI_WaitFlagStateUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e032      	b.n	8002780 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800271a:	4b1b      	ldr	r3, [pc, #108]	@ (8002788 <SPI_EndRxTxTransaction+0xa0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1b      	ldr	r2, [pc, #108]	@ (800278c <SPI_EndRxTxTransaction+0xa4>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	0d5b      	lsrs	r3, r3, #21
 8002726:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002738:	d112      	bne.n	8002760 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	2180      	movs	r1, #128	@ 0x80
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff ff47 	bl	80025d8 <SPI_WaitFlagStateUntilTimeout>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e00f      	b.n	8002780 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3b01      	subs	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	2b80      	cmp	r3, #128	@ 0x80
 8002778:	d0f2      	beq.n	8002760 <SPI_EndRxTxTransaction+0x78>
 800277a:	e000      	b.n	800277e <SPI_EndRxTxTransaction+0x96>
        break;
 800277c:	bf00      	nop
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000000 	.word	0x20000000
 800278c:	165e9f81 	.word	0x165e9f81

08002790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e042      	b.n	8002828 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f9e6 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	@ 0x24
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fd69 	bl	80032ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	@ 0x28
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	4613      	mov	r3, r2
 800283e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b20      	cmp	r3, #32
 800284e:	d175      	bne.n	800293c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_UART_Transmit+0x2c>
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e06e      	b.n	800293e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2221      	movs	r2, #33	@ 0x21
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286e:	f7fe fb07 	bl	8000e80 <HAL_GetTick>
 8002872:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Transmit+0x6c>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a4:	e02e      	b.n	8002904 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	@ 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fb05 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e03a      	b.n	800293e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	3302      	adds	r3, #2
 80028e2:	61bb      	str	r3, [r7, #24]
 80028e4:	e007      	b.n	80028f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	781a      	ldrb	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1cb      	bne.n	80028a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2200      	movs	r2, #0
 8002916:	2140      	movs	r1, #64	@ 0x40
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fad1 	bl	8002ec0 <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e006      	b.n	800293e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b0ba      	sub	sp, #232	@ 0xe8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800297a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800298e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_UART_IRQHandler+0x66>
 800299a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fbc2 	bl	8003130 <UART_Receive_IT>
      return;
 80029ac:	e25b      	b.n	8002e66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80de 	beq.w	8002b74 <HAL_UART_IRQHandler+0x22c>
 80029b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d106      	bne.n	80029d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80d1 	beq.w	8002b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_UART_IRQHandler+0xae>
 80029de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_UART_IRQHandler+0xd2>
 8002a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_UART_IRQHandler+0xf6>
 8002a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a36:	f043 0204 	orr.w	r2, r3, #4
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d011      	beq.n	8002a6e <HAL_UART_IRQHandler+0x126>
 8002a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f043 0208 	orr.w	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 81f2 	beq.w	8002e5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_UART_IRQHandler+0x14e>
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fb4d 	bl	8003130 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x17a>
 8002aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d04f      	beq.n	8002b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa55 	bl	8002f72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b40      	cmp	r3, #64	@ 0x40
 8002ad4:	d141      	bne.n	8002b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3314      	adds	r3, #20
 8002adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3314      	adds	r3, #20
 8002afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1d9      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d013      	beq.n	8002b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d28 <HAL_UART_IRQHandler+0x3e0>)
 8002b30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fb60 	bl	80011fc <HAL_DMA_Abort_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d016      	beq.n	8002b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b50:	e00e      	b.n	8002b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f99e 	bl	8002e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b58:	e00a      	b.n	8002b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f99a 	bl	8002e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	e006      	b.n	8002b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f996 	bl	8002e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b6e:	e175      	b.n	8002e5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	bf00      	nop
    return;
 8002b72:	e173      	b.n	8002e5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	f040 814f 	bne.w	8002e1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 8148 	beq.w	8002e1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8141 	beq.w	8002e1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bba:	2b40      	cmp	r3, #64	@ 0x40
 8002bbc:	f040 80b6 	bne.w	8002d2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8145 	beq.w	8002e60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bde:	429a      	cmp	r2, r3
 8002be0:	f080 813e 	bcs.w	8002e60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bf6:	f000 8088 	beq.w	8002d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c36:	e841 2300 	strex	r3, r2, [r1]
 8002c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1d9      	bne.n	8002bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3314      	adds	r3, #20
 8002c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c76:	e841 2300 	strex	r3, r2, [r1]
 8002c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e1      	bne.n	8002c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002c92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002ca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002caa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cae:	e841 2300 	strex	r3, r2, [r1]
 8002cb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e3      	bne.n	8002c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cda:	f023 0310 	bic.w	r3, r3, #16
 8002cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002cec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002cee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e3      	bne.n	8002cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fa09 	bl	800111c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4619      	mov	r1, r3
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8c1 	bl	8002ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d26:	e09b      	b.n	8002e60 <HAL_UART_IRQHandler+0x518>
 8002d28:	08003039 	.word	0x08003039
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 808e 	beq.w	8002e64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8089 	beq.w	8002e64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d76:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e3      	bne.n	8002d52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	623b      	str	r3, [r7, #32]
   return(result);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3314      	adds	r3, #20
 8002daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dae:	633a      	str	r2, [r7, #48]	@ 0x30
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e3      	bne.n	8002d8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0310 	bic.w	r3, r3, #16
 8002de6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002df4:	61fa      	str	r2, [r7, #28]
 8002df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	69b9      	ldr	r1, [r7, #24]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	617b      	str	r3, [r7, #20]
   return(result);
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e3      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f847 	bl	8002ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e1a:	e023      	b.n	8002e64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_UART_IRQHandler+0x4f4>
 8002e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f913 	bl	8003060 <UART_Transmit_IT>
    return;
 8002e3a:	e014      	b.n	8002e66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <HAL_UART_IRQHandler+0x51e>
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f953 	bl	8003100 <UART_EndTransmit_IT>
    return;
 8002e5a:	e004      	b.n	8002e66 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e5c:	bf00      	nop
 8002e5e:	e002      	b.n	8002e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e60:	bf00      	nop
 8002e62:	e000      	b.n	8002e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e64:	bf00      	nop
  }
}
 8002e66:	37e8      	adds	r7, #232	@ 0xe8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed0:	e03b      	b.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ed8:	d037      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fd ffd1 	bl	8000e80 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e03a      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d023      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b80      	cmp	r3, #128	@ 0x80
 8002f06:	d020      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b40      	cmp	r3, #64	@ 0x40
 8002f0c:	d01d      	beq.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d116      	bne.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f81d 	bl	8002f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d0b4      	beq.n	8002ed2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b095      	sub	sp, #84	@ 0x54
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e5      	bne.n	8002fae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d119      	bne.n	800301e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f023 0310 	bic.w	r3, r3, #16
 8003000:	647b      	str	r3, [r7, #68]	@ 0x44
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800300a:	61ba      	str	r2, [r7, #24]
 800300c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6979      	ldr	r1, [r7, #20]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	613b      	str	r3, [r7, #16]
   return(result);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e5      	bne.n	8002fea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800302c:	bf00      	nop
 800302e:	3754      	adds	r7, #84	@ 0x54
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003044:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff ff1e 	bl	8002e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003058:	bf00      	nop
 800305a:	3710      	adds	r7, #16
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b21      	cmp	r3, #33	@ 0x21
 8003072:	d13e      	bne.n	80030f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800307c:	d114      	bne.n	80030a8 <UART_Transmit_IT+0x48>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d110      	bne.n	80030a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800309a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	1c9a      	adds	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]
 80030a6:	e008      	b.n	80030ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6211      	str	r1, [r2, #32]
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030be:	b29b      	uxth	r3, r3
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4619      	mov	r1, r3
 80030c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e000      	b.n	80030f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
  }
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003116:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fea3 	bl	8002e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08c      	sub	sp, #48	@ 0x30
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b22      	cmp	r3, #34	@ 0x22
 8003142:	f040 80ae 	bne.w	80032a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314e:	d117      	bne.n	8003180 <UART_Receive_IT+0x50>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d113      	bne.n	8003180 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316e:	b29a      	uxth	r2, r3
 8003170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003172:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	629a      	str	r2, [r3, #40]	@ 0x28
 800317e:	e026      	b.n	80031ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003192:	d007      	beq.n	80031a4 <UART_Receive_IT+0x74>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <UART_Receive_IT+0x82>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d106      	bne.n	80031b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	701a      	strb	r2, [r3, #0]
 80031b0:	e008      	b.n	80031c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4619      	mov	r1, r3
 80031dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d15d      	bne.n	800329e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0220 	bic.w	r2, r2, #32
 80031f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003200:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003224:	2b01      	cmp	r3, #1
 8003226:	d135      	bne.n	8003294 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	613b      	str	r3, [r7, #16]
   return(result);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f023 0310 	bic.w	r3, r3, #16
 8003244:	627b      	str	r3, [r7, #36]	@ 0x24
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324e:	623a      	str	r2, [r7, #32]
 8003250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	69f9      	ldr	r1, [r7, #28]
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	61bb      	str	r3, [r7, #24]
   return(result);
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e5      	bne.n	800322e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d10a      	bne.n	8003286 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff fe0b 	bl	8002ea8 <HAL_UARTEx_RxEventCallback>
 8003292:	e002      	b.n	800329a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff fdf3 	bl	8002e80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e002      	b.n	80032a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3730      	adds	r7, #48	@ 0x30
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b0:	b0c0      	sub	sp, #256	@ 0x100
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	68d9      	ldr	r1, [r3, #12]
 80032ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	ea40 0301 	orr.w	r3, r0, r1
 80032d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003304:	f021 010c 	bic.w	r1, r1, #12
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003312:	430b      	orrs	r3, r1
 8003314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003326:	6999      	ldr	r1, [r3, #24]
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	ea40 0301 	orr.w	r3, r0, r1
 8003332:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b8f      	ldr	r3, [pc, #572]	@ (8003578 <UART_SetConfig+0x2cc>)
 800333c:	429a      	cmp	r2, r3
 800333e:	d005      	beq.n	800334c <UART_SetConfig+0xa0>
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4b8d      	ldr	r3, [pc, #564]	@ (800357c <UART_SetConfig+0x2d0>)
 8003348:	429a      	cmp	r2, r3
 800334a:	d104      	bne.n	8003356 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800334c:	f7fe fdb4 	bl	8001eb8 <HAL_RCC_GetPCLK2Freq>
 8003350:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003354:	e003      	b.n	800335e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003356:	f7fe fd9b 	bl	8001e90 <HAL_RCC_GetPCLK1Freq>
 800335a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003368:	f040 810c 	bne.w	8003584 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800336c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003376:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800337a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800337e:	4622      	mov	r2, r4
 8003380:	462b      	mov	r3, r5
 8003382:	1891      	adds	r1, r2, r2
 8003384:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003386:	415b      	adcs	r3, r3
 8003388:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800338a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800338e:	4621      	mov	r1, r4
 8003390:	eb12 0801 	adds.w	r8, r2, r1
 8003394:	4629      	mov	r1, r5
 8003396:	eb43 0901 	adc.w	r9, r3, r1
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ae:	4690      	mov	r8, r2
 80033b0:	4699      	mov	r9, r3
 80033b2:	4623      	mov	r3, r4
 80033b4:	eb18 0303 	adds.w	r3, r8, r3
 80033b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033bc:	462b      	mov	r3, r5
 80033be:	eb49 0303 	adc.w	r3, r9, r3
 80033c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80033d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033da:	460b      	mov	r3, r1
 80033dc:	18db      	adds	r3, r3, r3
 80033de:	653b      	str	r3, [r7, #80]	@ 0x50
 80033e0:	4613      	mov	r3, r2
 80033e2:	eb42 0303 	adc.w	r3, r2, r3
 80033e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80033e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80033ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80033f0:	f7fc ff4e 	bl	8000290 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4b61      	ldr	r3, [pc, #388]	@ (8003580 <UART_SetConfig+0x2d4>)
 80033fa:	fba3 2302 	umull	r2, r3, r3, r2
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	011c      	lsls	r4, r3, #4
 8003402:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800340c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003410:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003414:	4642      	mov	r2, r8
 8003416:	464b      	mov	r3, r9
 8003418:	1891      	adds	r1, r2, r2
 800341a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800341c:	415b      	adcs	r3, r3
 800341e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003420:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003424:	4641      	mov	r1, r8
 8003426:	eb12 0a01 	adds.w	sl, r2, r1
 800342a:	4649      	mov	r1, r9
 800342c:	eb43 0b01 	adc.w	fp, r3, r1
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800343c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003444:	4692      	mov	sl, r2
 8003446:	469b      	mov	fp, r3
 8003448:	4643      	mov	r3, r8
 800344a:	eb1a 0303 	adds.w	r3, sl, r3
 800344e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003452:	464b      	mov	r3, r9
 8003454:	eb4b 0303 	adc.w	r3, fp, r3
 8003458:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003468:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800346c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003470:	460b      	mov	r3, r1
 8003472:	18db      	adds	r3, r3, r3
 8003474:	643b      	str	r3, [r7, #64]	@ 0x40
 8003476:	4613      	mov	r3, r2
 8003478:	eb42 0303 	adc.w	r3, r2, r3
 800347c:	647b      	str	r3, [r7, #68]	@ 0x44
 800347e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003482:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003486:	f7fc ff03 	bl	8000290 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4611      	mov	r1, r2
 8003490:	4b3b      	ldr	r3, [pc, #236]	@ (8003580 <UART_SetConfig+0x2d4>)
 8003492:	fba3 2301 	umull	r2, r3, r3, r1
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2264      	movs	r2, #100	@ 0x64
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	1acb      	subs	r3, r1, r3
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034a6:	4b36      	ldr	r3, [pc, #216]	@ (8003580 <UART_SetConfig+0x2d4>)
 80034a8:	fba3 2302 	umull	r2, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034b4:	441c      	add	r4, r3
 80034b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80034c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80034c8:	4642      	mov	r2, r8
 80034ca:	464b      	mov	r3, r9
 80034cc:	1891      	adds	r1, r2, r2
 80034ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80034d0:	415b      	adcs	r3, r3
 80034d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80034d8:	4641      	mov	r1, r8
 80034da:	1851      	adds	r1, r2, r1
 80034dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80034de:	4649      	mov	r1, r9
 80034e0:	414b      	adcs	r3, r1
 80034e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80034f0:	4659      	mov	r1, fp
 80034f2:	00cb      	lsls	r3, r1, #3
 80034f4:	4651      	mov	r1, sl
 80034f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034fa:	4651      	mov	r1, sl
 80034fc:	00ca      	lsls	r2, r1, #3
 80034fe:	4610      	mov	r0, r2
 8003500:	4619      	mov	r1, r3
 8003502:	4603      	mov	r3, r0
 8003504:	4642      	mov	r2, r8
 8003506:	189b      	adds	r3, r3, r2
 8003508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800350c:	464b      	mov	r3, r9
 800350e:	460a      	mov	r2, r1
 8003510:	eb42 0303 	adc.w	r3, r2, r3
 8003514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003524:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003528:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800352c:	460b      	mov	r3, r1
 800352e:	18db      	adds	r3, r3, r3
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003532:	4613      	mov	r3, r2
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800353a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800353e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003542:	f7fc fea5 	bl	8000290 <__aeabi_uldivmod>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4b0d      	ldr	r3, [pc, #52]	@ (8003580 <UART_SetConfig+0x2d4>)
 800354c:	fba3 1302 	umull	r1, r3, r3, r2
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	2164      	movs	r1, #100	@ 0x64
 8003554:	fb01 f303 	mul.w	r3, r1, r3
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	3332      	adds	r3, #50	@ 0x32
 800355e:	4a08      	ldr	r2, [pc, #32]	@ (8003580 <UART_SetConfig+0x2d4>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	f003 0207 	and.w	r2, r3, #7
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4422      	add	r2, r4
 8003572:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003574:	e106      	b.n	8003784 <UART_SetConfig+0x4d8>
 8003576:	bf00      	nop
 8003578:	40011000 	.word	0x40011000
 800357c:	40011400 	.word	0x40011400
 8003580:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003588:	2200      	movs	r2, #0
 800358a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800358e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003592:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003596:	4642      	mov	r2, r8
 8003598:	464b      	mov	r3, r9
 800359a:	1891      	adds	r1, r2, r2
 800359c:	6239      	str	r1, [r7, #32]
 800359e:	415b      	adcs	r3, r3
 80035a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035a6:	4641      	mov	r1, r8
 80035a8:	1854      	adds	r4, r2, r1
 80035aa:	4649      	mov	r1, r9
 80035ac:	eb43 0501 	adc.w	r5, r3, r1
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	00eb      	lsls	r3, r5, #3
 80035ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035be:	00e2      	lsls	r2, r4, #3
 80035c0:	4614      	mov	r4, r2
 80035c2:	461d      	mov	r5, r3
 80035c4:	4643      	mov	r3, r8
 80035c6:	18e3      	adds	r3, r4, r3
 80035c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80035cc:	464b      	mov	r3, r9
 80035ce:	eb45 0303 	adc.w	r3, r5, r3
 80035d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80035e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80035f2:	4629      	mov	r1, r5
 80035f4:	008b      	lsls	r3, r1, #2
 80035f6:	4621      	mov	r1, r4
 80035f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035fc:	4621      	mov	r1, r4
 80035fe:	008a      	lsls	r2, r1, #2
 8003600:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003604:	f7fc fe44 	bl	8000290 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4b60      	ldr	r3, [pc, #384]	@ (8003790 <UART_SetConfig+0x4e4>)
 800360e:	fba3 2302 	umull	r2, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	011c      	lsls	r4, r3, #4
 8003616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800361a:	2200      	movs	r2, #0
 800361c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003620:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003624:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	1891      	adds	r1, r2, r2
 800362e:	61b9      	str	r1, [r7, #24]
 8003630:	415b      	adcs	r3, r3
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003638:	4641      	mov	r1, r8
 800363a:	1851      	adds	r1, r2, r1
 800363c:	6139      	str	r1, [r7, #16]
 800363e:	4649      	mov	r1, r9
 8003640:	414b      	adcs	r3, r1
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003650:	4659      	mov	r1, fp
 8003652:	00cb      	lsls	r3, r1, #3
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800365a:	4651      	mov	r1, sl
 800365c:	00ca      	lsls	r2, r1, #3
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	4603      	mov	r3, r0
 8003664:	4642      	mov	r2, r8
 8003666:	189b      	adds	r3, r3, r2
 8003668:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800366c:	464b      	mov	r3, r9
 800366e:	460a      	mov	r2, r1
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003682:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003690:	4649      	mov	r1, r9
 8003692:	008b      	lsls	r3, r1, #2
 8003694:	4641      	mov	r1, r8
 8003696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800369a:	4641      	mov	r1, r8
 800369c:	008a      	lsls	r2, r1, #2
 800369e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036a2:	f7fc fdf5 	bl	8000290 <__aeabi_uldivmod>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4611      	mov	r1, r2
 80036ac:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <UART_SetConfig+0x4e4>)
 80036ae:	fba3 2301 	umull	r2, r3, r3, r1
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	2264      	movs	r2, #100	@ 0x64
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	1acb      	subs	r3, r1, r3
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	3332      	adds	r3, #50	@ 0x32
 80036c0:	4a33      	ldr	r2, [pc, #204]	@ (8003790 <UART_SetConfig+0x4e4>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036cc:	441c      	add	r4, r3
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d2:	2200      	movs	r2, #0
 80036d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80036d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80036d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	1891      	adds	r1, r2, r2
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	415b      	adcs	r3, r3
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036ec:	4641      	mov	r1, r8
 80036ee:	1851      	adds	r1, r2, r1
 80036f0:	6039      	str	r1, [r7, #0]
 80036f2:	4649      	mov	r1, r9
 80036f4:	414b      	adcs	r3, r1
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003704:	4659      	mov	r1, fp
 8003706:	00cb      	lsls	r3, r1, #3
 8003708:	4651      	mov	r1, sl
 800370a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800370e:	4651      	mov	r1, sl
 8003710:	00ca      	lsls	r2, r1, #3
 8003712:	4610      	mov	r0, r2
 8003714:	4619      	mov	r1, r3
 8003716:	4603      	mov	r3, r0
 8003718:	4642      	mov	r2, r8
 800371a:	189b      	adds	r3, r3, r2
 800371c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800371e:	464b      	mov	r3, r9
 8003720:	460a      	mov	r2, r1
 8003722:	eb42 0303 	adc.w	r3, r2, r3
 8003726:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	663b      	str	r3, [r7, #96]	@ 0x60
 8003732:	667a      	str	r2, [r7, #100]	@ 0x64
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003740:	4649      	mov	r1, r9
 8003742:	008b      	lsls	r3, r1, #2
 8003744:	4641      	mov	r1, r8
 8003746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800374a:	4641      	mov	r1, r8
 800374c:	008a      	lsls	r2, r1, #2
 800374e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003752:	f7fc fd9d 	bl	8000290 <__aeabi_uldivmod>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <UART_SetConfig+0x4e4>)
 800375c:	fba3 1302 	umull	r1, r3, r3, r2
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	2164      	movs	r1, #100	@ 0x64
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	3332      	adds	r3, #50	@ 0x32
 800376e:	4a08      	ldr	r2, [pc, #32]	@ (8003790 <UART_SetConfig+0x4e4>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	095b      	lsrs	r3, r3, #5
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4422      	add	r2, r4
 8003782:	609a      	str	r2, [r3, #8]
}
 8003784:	bf00      	nop
 8003786:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800378a:	46bd      	mov	sp, r7
 800378c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003790:	51eb851f 	.word	0x51eb851f

08003794 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003798:	4904      	ldr	r1, [pc, #16]	@ (80037ac <MX_FATFS_Init+0x18>)
 800379a:	4805      	ldr	r0, [pc, #20]	@ (80037b0 <MX_FATFS_Init+0x1c>)
 800379c:	f003 f91c 	bl	80069d8 <FATFS_LinkDriver>
 80037a0:	4603      	mov	r3, r0
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <MX_FATFS_Init+0x20>)
 80037a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000240 	.word	0x20000240
 80037b0:	2000000c 	.word	0x2000000c
 80037b4:	2000023c 	.word	0x2000023c

080037b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80037bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f9d3 	bl	8003b80 <USER_SPI_initialize>
 80037da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fab1 	bl	8003d58 <USER_SPI_status>
 80037f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 8003810:	7bf8      	ldrb	r0, [r7, #15]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	f000 fab4 	bl	8003d84 <USER_SPI_read>
 800381c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	4603      	mov	r3, r0
 8003834:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 8003836:	7bf8      	ldrb	r0, [r7, #15]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	f000 fb07 	bl	8003e50 <USER_SPI_write>
 8003842:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	603a      	str	r2, [r7, #0]
 8003856:	71fb      	strb	r3, [r7, #7]
 8003858:	460b      	mov	r3, r1
 800385a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800385c:	79b9      	ldrb	r1, [r7, #6]
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fb70 	bl	8003f48 <USER_SPI_ioctl>
 8003868:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800387c:	f7fd fb00 	bl	8000e80 <HAL_GetTick>
 8003880:	4603      	mov	r3, r0
 8003882:	4a04      	ldr	r2, [pc, #16]	@ (8003894 <SPI_Timer_On+0x20>)
 8003884:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003886:	4a04      	ldr	r2, [pc, #16]	@ (8003898 <SPI_Timer_On+0x24>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000248 	.word	0x20000248
 8003898:	2000024c 	.word	0x2000024c

0800389c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80038a0:	f7fd faee 	bl	8000e80 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b06      	ldr	r3, [pc, #24]	@ (80038c0 <SPI_Timer_Status+0x24>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1ad2      	subs	r2, r2, r3
 80038ac:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <SPI_Timer_Status+0x28>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	bf34      	ite	cc
 80038b4:	2301      	movcc	r3, #1
 80038b6:	2300      	movcs	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000248 	.word	0x20000248
 80038c4:	2000024c 	.word	0x2000024c

080038c8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80038d2:	f107 020f 	add.w	r2, r7, #15
 80038d6:	1df9      	adds	r1, r7, #7
 80038d8:	2332      	movs	r3, #50	@ 0x32
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2301      	movs	r3, #1
 80038de:	4804      	ldr	r0, [pc, #16]	@ (80038f0 <xchg_spi+0x28>)
 80038e0:	f7fe fcca 	bl	8002278 <HAL_SPI_TransmitReceive>
    return rxDat;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000094 	.word	0x20000094

080038f4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	e00a      	b.n	800391a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	18d4      	adds	r4, r2, r3
 800390a:	20ff      	movs	r0, #255	@ 0xff
 800390c:	f7ff ffdc 	bl	80038c8 <xchg_spi>
 8003910:	4603      	mov	r3, r0
 8003912:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d3f0      	bcc.n	8003904 <rcvr_spi_multi+0x10>
	}
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bd90      	pop	{r4, r7, pc}

0800392c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b29a      	uxth	r2, r3
 800393a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4803      	ldr	r0, [pc, #12]	@ (8003950 <xmit_spi_multi+0x24>)
 8003942:	f7fe fb56 	bl	8001ff2 <HAL_SPI_Transmit>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000094 	.word	0x20000094

08003954 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800395c:	f7fd fa90 	bl	8000e80 <HAL_GetTick>
 8003960:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003966:	20ff      	movs	r0, #255	@ 0xff
 8003968:	f7ff ffae 	bl	80038c8 <xchg_spi>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2bff      	cmp	r3, #255	@ 0xff
 8003974:	d007      	beq.n	8003986 <wait_ready+0x32>
 8003976:	f7fd fa83 	bl	8000e80 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	429a      	cmp	r2, r3
 8003984:	d8ef      	bhi.n	8003966 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2bff      	cmp	r3, #255	@ 0xff
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80039a0:	2201      	movs	r2, #1
 80039a2:	2102      	movs	r1, #2
 80039a4:	4803      	ldr	r0, [pc, #12]	@ (80039b4 <despiselect+0x18>)
 80039a6:	f7fd fdcf 	bl	8001548 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80039aa:	20ff      	movs	r0, #255	@ 0xff
 80039ac:	f7ff ff8c 	bl	80038c8 <xchg_spi>

}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40020400 	.word	0x40020400

080039b8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80039bc:	2200      	movs	r2, #0
 80039be:	2102      	movs	r1, #2
 80039c0:	4809      	ldr	r0, [pc, #36]	@ (80039e8 <spiselect+0x30>)
 80039c2:	f7fd fdc1 	bl	8001548 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80039c6:	20ff      	movs	r0, #255	@ 0xff
 80039c8:	f7ff ff7e 	bl	80038c8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80039cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80039d0:	f7ff ffc0 	bl	8003954 <wait_ready>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <spiselect+0x26>
 80039da:	2301      	movs	r3, #1
 80039dc:	e002      	b.n	80039e4 <spiselect+0x2c>

	despiselect();
 80039de:	f7ff ffdd 	bl	800399c <despiselect>
	return 0;	/* Timeout */
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40020400 	.word	0x40020400

080039ec <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80039f6:	20c8      	movs	r0, #200	@ 0xc8
 80039f8:	f7ff ff3c 	bl	8003874 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80039fc:	20ff      	movs	r0, #255	@ 0xff
 80039fe:	f7ff ff63 	bl	80038c8 <xchg_spi>
 8003a02:	4603      	mov	r3, r0
 8003a04:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2bff      	cmp	r3, #255	@ 0xff
 8003a0a:	d104      	bne.n	8003a16 <rcvr_datablock+0x2a>
 8003a0c:	f7ff ff46 	bl	800389c <SPI_Timer_Status>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f2      	bne.n	80039fc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2bfe      	cmp	r3, #254	@ 0xfe
 8003a1a:	d001      	beq.n	8003a20 <rcvr_datablock+0x34>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e00a      	b.n	8003a36 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ff66 	bl	80038f4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003a28:	20ff      	movs	r0, #255	@ 0xff
 8003a2a:	f7ff ff4d 	bl	80038c8 <xchg_spi>
 8003a2e:	20ff      	movs	r0, #255	@ 0xff
 8003a30:	f7ff ff4a 	bl	80038c8 <xchg_spi>

	return 1;						/* Function succeeded */
 8003a34:	2301      	movs	r3, #1
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003a4a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a4e:	f7ff ff81 	bl	8003954 <wait_ready>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <xmit_datablock+0x1e>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e01e      	b.n	8003a9a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ff32 	bl	80038c8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2bfd      	cmp	r3, #253	@ 0xfd
 8003a68:	d016      	beq.n	8003a98 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003a6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff5c 	bl	800392c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003a74:	20ff      	movs	r0, #255	@ 0xff
 8003a76:	f7ff ff27 	bl	80038c8 <xchg_spi>
 8003a7a:	20ff      	movs	r0, #255	@ 0xff
 8003a7c:	f7ff ff24 	bl	80038c8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003a80:	20ff      	movs	r0, #255	@ 0xff
 8003a82:	f7ff ff21 	bl	80038c8 <xchg_spi>
 8003a86:	4603      	mov	r3, r0
 8003a88:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d001      	beq.n	8003a98 <xmit_datablock+0x5a>
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <xmit_datablock+0x5c>
	}
	return 1;
 8003a98:	2301      	movs	r3, #1
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	6039      	str	r1, [r7, #0]
 8003aac:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da0e      	bge.n	8003ad4 <send_cmd+0x32>
		cmd &= 0x7F;
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003abc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	2037      	movs	r0, #55	@ 0x37
 8003ac2:	f7ff ffee 	bl	8003aa2 <send_cmd>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003aca:	7bbb      	ldrb	r3, [r7, #14]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d901      	bls.n	8003ad4 <send_cmd+0x32>
 8003ad0:	7bbb      	ldrb	r3, [r7, #14]
 8003ad2:	e051      	b.n	8003b78 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d008      	beq.n	8003aec <send_cmd+0x4a>
		despiselect();
 8003ada:	f7ff ff5f 	bl	800399c <despiselect>
		if (!spiselect()) return 0xFF;
 8003ade:	f7ff ff6b 	bl	80039b8 <spiselect>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <send_cmd+0x4a>
 8003ae8:	23ff      	movs	r3, #255	@ 0xff
 8003aea:	e045      	b.n	8003b78 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fee7 	bl	80038c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	0e1b      	lsrs	r3, r3, #24
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fee1 	bl	80038c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fedb 	bl	80038c8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff fed5 	bl	80038c8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fed0 	bl	80038c8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <send_cmd+0x94>
 8003b32:	2395      	movs	r3, #149	@ 0x95
 8003b34:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d101      	bne.n	8003b40 <send_cmd+0x9e>
 8003b3c:	2387      	movs	r3, #135	@ 0x87
 8003b3e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff fec0 	bl	80038c8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d102      	bne.n	8003b54 <send_cmd+0xb2>
 8003b4e:	20ff      	movs	r0, #255	@ 0xff
 8003b50:	f7ff feba 	bl	80038c8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003b54:	230a      	movs	r3, #10
 8003b56:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003b58:	20ff      	movs	r0, #255	@ 0xff
 8003b5a:	f7ff feb5 	bl	80038c8 <xchg_spi>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da05      	bge.n	8003b76 <send_cmd+0xd4>
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <USER_SPI_initialize+0x14>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0d6      	b.n	8003d42 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003b94:	4b6d      	ldr	r3, [pc, #436]	@ (8003d4c <USER_SPI_initialize+0x1cc>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <USER_SPI_initialize+0x2a>
 8003ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d4c <USER_SPI_initialize+0x1cc>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	e0cb      	b.n	8003d42 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8003baa:	4b69      	ldr	r3, [pc, #420]	@ (8003d50 <USER_SPI_initialize+0x1d0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003bb4:	4b66      	ldr	r3, [pc, #408]	@ (8003d50 <USER_SPI_initialize+0x1d0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8003bbc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003bbe:	230a      	movs	r3, #10
 8003bc0:	73fb      	strb	r3, [r7, #15]
 8003bc2:	e005      	b.n	8003bd0 <USER_SPI_initialize+0x50>
 8003bc4:	20ff      	movs	r0, #255	@ 0xff
 8003bc6:	f7ff fe7f 	bl	80038c8 <xchg_spi>
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f6      	bne.n	8003bc4 <USER_SPI_initialize+0x44>

	ty = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003bda:	2100      	movs	r1, #0
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7ff ff60 	bl	8003aa2 <send_cmd>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	f040 808b 	bne.w	8003d00 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003bea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003bee:	f7ff fe41 	bl	8003874 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003bf2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8003bf6:	2008      	movs	r0, #8
 8003bf8:	f7ff ff53 	bl	8003aa2 <send_cmd>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d151      	bne.n	8003ca6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
 8003c06:	e00d      	b.n	8003c24 <USER_SPI_initialize+0xa4>
 8003c08:	7bfc      	ldrb	r4, [r7, #15]
 8003c0a:	20ff      	movs	r0, #255	@ 0xff
 8003c0c:	f7ff fe5c 	bl	80038c8 <xchg_spi>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	f104 0310 	add.w	r3, r4, #16
 8003c18:	443b      	add	r3, r7
 8003c1a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3301      	adds	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d9ee      	bls.n	8003c08 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003c2a:	7abb      	ldrb	r3, [r7, #10]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d167      	bne.n	8003d00 <USER_SPI_initialize+0x180>
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	2baa      	cmp	r3, #170	@ 0xaa
 8003c34:	d164      	bne.n	8003d00 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003c36:	bf00      	nop
 8003c38:	f7ff fe30 	bl	800389c <SPI_Timer_Status>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <USER_SPI_initialize+0xd2>
 8003c42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003c46:	20a9      	movs	r0, #169	@ 0xa9
 8003c48:	f7ff ff2b 	bl	8003aa2 <send_cmd>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f2      	bne.n	8003c38 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003c52:	f7ff fe23 	bl	800389c <SPI_Timer_Status>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d051      	beq.n	8003d00 <USER_SPI_initialize+0x180>
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	203a      	movs	r0, #58	@ 0x3a
 8003c60:	f7ff ff1f 	bl	8003aa2 <send_cmd>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d14a      	bne.n	8003d00 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e00d      	b.n	8003c8c <USER_SPI_initialize+0x10c>
 8003c70:	7bfc      	ldrb	r4, [r7, #15]
 8003c72:	20ff      	movs	r0, #255	@ 0xff
 8003c74:	f7ff fe28 	bl	80038c8 <xchg_spi>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f104 0310 	add.w	r3, r4, #16
 8003c80:	443b      	add	r3, r7
 8003c82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d9ee      	bls.n	8003c70 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003c92:	7a3b      	ldrb	r3, [r7, #8]
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <USER_SPI_initialize+0x120>
 8003c9c:	230c      	movs	r3, #12
 8003c9e:	e000      	b.n	8003ca2 <USER_SPI_initialize+0x122>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	737b      	strb	r3, [r7, #13]
 8003ca4:	e02c      	b.n	8003d00 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	20a9      	movs	r0, #169	@ 0xa9
 8003caa:	f7ff fefa 	bl	8003aa2 <send_cmd>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d804      	bhi.n	8003cbe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	737b      	strb	r3, [r7, #13]
 8003cb8:	23a9      	movs	r3, #169	@ 0xa9
 8003cba:	73bb      	strb	r3, [r7, #14]
 8003cbc:	e003      	b.n	8003cc6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	737b      	strb	r3, [r7, #13]
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003cc6:	bf00      	nop
 8003cc8:	f7ff fde8 	bl	800389c <SPI_Timer_Status>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <USER_SPI_initialize+0x162>
 8003cd2:	7bbb      	ldrb	r3, [r7, #14]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fee3 	bl	8003aa2 <send_cmd>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1f2      	bne.n	8003cc8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003ce2:	f7ff fddb 	bl	800389c <SPI_Timer_Status>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <USER_SPI_initialize+0x17c>
 8003cec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cf0:	2010      	movs	r0, #16
 8003cf2:	f7ff fed6 	bl	8003aa2 <send_cmd>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <USER_SPI_initialize+0x180>
				ty = 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003d00:	4a14      	ldr	r2, [pc, #80]	@ (8003d54 <USER_SPI_initialize+0x1d4>)
 8003d02:	7b7b      	ldrb	r3, [r7, #13]
 8003d04:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003d06:	f7ff fe49 	bl	800399c <despiselect>

	if (ty) {			/* OK */
 8003d0a:	7b7b      	ldrb	r3, [r7, #13]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d012      	beq.n	8003d36 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8003d10:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <USER_SPI_initialize+0x1d0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <USER_SPI_initialize+0x1d0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0210 	orr.w	r2, r2, #16
 8003d22:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003d24:	4b09      	ldr	r3, [pc, #36]	@ (8003d4c <USER_SPI_initialize+0x1cc>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <USER_SPI_initialize+0x1cc>)
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e002      	b.n	8003d3c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <USER_SPI_initialize+0x1cc>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003d3c:	4b03      	ldr	r3, [pc, #12]	@ (8003d4c <USER_SPI_initialize+0x1cc>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	b2db      	uxtb	r3, r3
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd90      	pop	{r4, r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000020 	.word	0x20000020
 8003d50:	20000094 	.word	0x20000094
 8003d54:	20000244 	.word	0x20000244

08003d58 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <USER_SPI_status+0x14>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e002      	b.n	8003d72 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003d6c:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <USER_SPI_status+0x28>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b2db      	uxtb	r3, r3
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000020 	.word	0x20000020

08003d84 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d102      	bne.n	8003da0 <USER_SPI_read+0x1c>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <USER_SPI_read+0x20>
 8003da0:	2304      	movs	r3, #4
 8003da2:	e04d      	b.n	8003e40 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003da4:	4b28      	ldr	r3, [pc, #160]	@ (8003e48 <USER_SPI_read+0xc4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <USER_SPI_read+0x32>
 8003db2:	2303      	movs	r3, #3
 8003db4:	e044      	b.n	8003e40 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003db6:	4b25      	ldr	r3, [pc, #148]	@ (8003e4c <USER_SPI_read+0xc8>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <USER_SPI_read+0x44>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	025b      	lsls	r3, r3, #9
 8003dc6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d111      	bne.n	8003df2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	2011      	movs	r0, #17
 8003dd2:	f7ff fe66 	bl	8003aa2 <send_cmd>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d129      	bne.n	8003e30 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003ddc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003de0:	68b8      	ldr	r0, [r7, #8]
 8003de2:	f7ff fe03 	bl	80039ec <rcvr_datablock>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d021      	beq.n	8003e30 <USER_SPI_read+0xac>
			count = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	e01e      	b.n	8003e30 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	2012      	movs	r0, #18
 8003df6:	f7ff fe54 	bl	8003aa2 <send_cmd>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d117      	bne.n	8003e30 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003e00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f7ff fdf1 	bl	80039ec <rcvr_datablock>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <USER_SPI_read+0xa2>
				buff += 512;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003e16:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ed      	bne.n	8003e00 <USER_SPI_read+0x7c>
 8003e24:	e000      	b.n	8003e28 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003e26:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003e28:	2100      	movs	r1, #0
 8003e2a:	200c      	movs	r0, #12
 8003e2c:	f7ff fe39 	bl	8003aa2 <send_cmd>
		}
	}
	despiselect();
 8003e30:	f7ff fdb4 	bl	800399c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf14      	ite	ne
 8003e3a:	2301      	movne	r3, #1
 8003e3c:	2300      	moveq	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000020 	.word	0x20000020
 8003e4c:	20000244 	.word	0x20000244

08003e50 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <USER_SPI_write+0x1c>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <USER_SPI_write+0x20>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	e063      	b.n	8003f38 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003e70:	4b33      	ldr	r3, [pc, #204]	@ (8003f40 <USER_SPI_write+0xf0>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <USER_SPI_write+0x32>
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e05a      	b.n	8003f38 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003e82:	4b2f      	ldr	r3, [pc, #188]	@ (8003f40 <USER_SPI_write+0xf0>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <USER_SPI_write+0x44>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e051      	b.n	8003f38 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003e94:	4b2b      	ldr	r3, [pc, #172]	@ (8003f44 <USER_SPI_write+0xf4>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <USER_SPI_write+0x56>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	025b      	lsls	r3, r3, #9
 8003ea4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d110      	bne.n	8003ece <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	2018      	movs	r0, #24
 8003eb0:	f7ff fdf7 	bl	8003aa2 <send_cmd>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d136      	bne.n	8003f28 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003eba:	21fe      	movs	r1, #254	@ 0xfe
 8003ebc:	68b8      	ldr	r0, [r7, #8]
 8003ebe:	f7ff fdbe 	bl	8003a3e <xmit_datablock>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d02f      	beq.n	8003f28 <USER_SPI_write+0xd8>
			count = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	e02c      	b.n	8003f28 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003ece:	4b1d      	ldr	r3, [pc, #116]	@ (8003f44 <USER_SPI_write+0xf4>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f003 0306 	and.w	r3, r3, #6
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <USER_SPI_write+0x92>
 8003eda:	6839      	ldr	r1, [r7, #0]
 8003edc:	2097      	movs	r0, #151	@ 0x97
 8003ede:	f7ff fde0 	bl	8003aa2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	2019      	movs	r0, #25
 8003ee6:	f7ff fddc 	bl	8003aa2 <send_cmd>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11b      	bne.n	8003f28 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003ef0:	21fc      	movs	r1, #252	@ 0xfc
 8003ef2:	68b8      	ldr	r0, [r7, #8]
 8003ef4:	f7ff fda3 	bl	8003a3e <xmit_datablock>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <USER_SPI_write+0xc4>
				buff += 512;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f04:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ee      	bne.n	8003ef0 <USER_SPI_write+0xa0>
 8003f12:	e000      	b.n	8003f16 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003f14:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003f16:	21fd      	movs	r1, #253	@ 0xfd
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7ff fd90 	bl	8003a3e <xmit_datablock>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <USER_SPI_write+0xd8>
 8003f24:	2301      	movs	r3, #1
 8003f26:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003f28:	f7ff fd38 	bl	800399c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20000020 	.word	0x20000020
 8003f44:	20000244 	.word	0x20000244

08003f48 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	603a      	str	r2, [r7, #0]
 8003f52:	71fb      	strb	r3, [r7, #7]
 8003f54:	460b      	mov	r3, r1
 8003f56:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003f58:	79fb      	ldrb	r3, [r7, #7]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <USER_SPI_ioctl+0x1a>
 8003f5e:	2304      	movs	r3, #4
 8003f60:	e15a      	b.n	8004218 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003f62:	4baf      	ldr	r3, [pc, #700]	@ (8004220 <USER_SPI_ioctl+0x2d8>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <USER_SPI_ioctl+0x2c>
 8003f70:	2303      	movs	r3, #3
 8003f72:	e151      	b.n	8004218 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8003f7a:	79bb      	ldrb	r3, [r7, #6]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	f200 8136 	bhi.w	80041ee <USER_SPI_ioctl+0x2a6>
 8003f82:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <USER_SPI_ioctl+0x40>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003f9d 	.word	0x08003f9d
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	080041ef 	.word	0x080041ef
 8003f94:	0800405d 	.word	0x0800405d
 8003f98:	08004153 	.word	0x08004153
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003f9c:	f7ff fd0c 	bl	80039b8 <spiselect>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8127 	beq.w	80041f6 <USER_SPI_ioctl+0x2ae>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8003fae:	e122      	b.n	80041f6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	2009      	movs	r0, #9
 8003fb4:	f7ff fd75 	bl	8003aa2 <send_cmd>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f040 811d 	bne.w	80041fa <USER_SPI_ioctl+0x2b2>
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	2110      	movs	r1, #16
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fd10 	bl	80039ec <rcvr_datablock>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8113 	beq.w	80041fa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003fd4:	7b3b      	ldrb	r3, [r7, #12]
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d111      	bne.n	8004002 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003fde:	7d7b      	ldrb	r3, [r7, #21]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	7d3b      	ldrb	r3, [r7, #20]
 8003fe4:	021b      	lsls	r3, r3, #8
 8003fe6:	4413      	add	r3, r2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	029a      	lsls	r2, r3, #10
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e028      	b.n	8004054 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004002:	7c7b      	ldrb	r3, [r7, #17]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	7dbb      	ldrb	r3, [r7, #22]
 800400c:	09db      	lsrs	r3, r3, #7
 800400e:	b2db      	uxtb	r3, r3
 8004010:	4413      	add	r3, r2
 8004012:	b2da      	uxtb	r2, r3
 8004014:	7d7b      	ldrb	r3, [r7, #21]
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	f003 0306 	and.w	r3, r3, #6
 800401e:	b2db      	uxtb	r3, r3
 8004020:	4413      	add	r3, r2
 8004022:	b2db      	uxtb	r3, r3
 8004024:	3302      	adds	r3, #2
 8004026:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800402a:	7d3b      	ldrb	r3, [r7, #20]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	7cbb      	ldrb	r3, [r7, #18]
 800403a:	029b      	lsls	r3, r3, #10
 800403c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004040:	4413      	add	r3, r2
 8004042:	3301      	adds	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004046:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800404a:	3b09      	subs	r3, #9
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	409a      	lsls	r2, r3
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800405a:	e0ce      	b.n	80041fa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800405c:	4b71      	ldr	r3, [pc, #452]	@ (8004224 <USER_SPI_ioctl+0x2dc>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d031      	beq.n	80040cc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004068:	2100      	movs	r1, #0
 800406a:	208d      	movs	r0, #141	@ 0x8d
 800406c:	f7ff fd19 	bl	8003aa2 <send_cmd>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	f040 80c3 	bne.w	80041fe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004078:	20ff      	movs	r0, #255	@ 0xff
 800407a:	f7ff fc25 	bl	80038c8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800407e:	f107 030c 	add.w	r3, r7, #12
 8004082:	2110      	movs	r1, #16
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fcb1 	bl	80039ec <rcvr_datablock>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80b6 	beq.w	80041fe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004092:	2330      	movs	r3, #48	@ 0x30
 8004094:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004098:	e007      	b.n	80040aa <USER_SPI_ioctl+0x162>
 800409a:	20ff      	movs	r0, #255	@ 0xff
 800409c:	f7ff fc14 	bl	80038c8 <xchg_spi>
 80040a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040a4:	3b01      	subs	r3, #1
 80040a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80040aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f3      	bne.n	800409a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80040b2:	7dbb      	ldrb	r3, [r7, #22]
 80040b4:	091b      	lsrs	r3, r3, #4
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	2310      	movs	r3, #16
 80040bc:	fa03 f202 	lsl.w	r2, r3, r2
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80040ca:	e098      	b.n	80041fe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80040cc:	2100      	movs	r1, #0
 80040ce:	2009      	movs	r0, #9
 80040d0:	f7ff fce7 	bl	8003aa2 <send_cmd>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f040 8091 	bne.w	80041fe <USER_SPI_ioctl+0x2b6>
 80040dc:	f107 030c 	add.w	r3, r7, #12
 80040e0:	2110      	movs	r1, #16
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fc82 	bl	80039ec <rcvr_datablock>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 8087 	beq.w	80041fe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80040f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004224 <USER_SPI_ioctl+0x2dc>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80040fc:	7dbb      	ldrb	r3, [r7, #22]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8004104:	7dfa      	ldrb	r2, [r7, #23]
 8004106:	09d2      	lsrs	r2, r2, #7
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	4413      	add	r3, r2
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	7e7b      	ldrb	r3, [r7, #25]
 8004110:	099b      	lsrs	r3, r3, #6
 8004112:	b2db      	uxtb	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	461a      	mov	r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e013      	b.n	800414a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004122:	7dbb      	ldrb	r3, [r7, #22]
 8004124:	109b      	asrs	r3, r3, #2
 8004126:	b29b      	uxth	r3, r3
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	3301      	adds	r3, #1
 800412e:	7dfa      	ldrb	r2, [r7, #23]
 8004130:	00d2      	lsls	r2, r2, #3
 8004132:	f002 0218 	and.w	r2, r2, #24
 8004136:	7df9      	ldrb	r1, [r7, #23]
 8004138:	0949      	lsrs	r1, r1, #5
 800413a:	b2c9      	uxtb	r1, r1
 800413c:	440a      	add	r2, r1
 800413e:	3201      	adds	r2, #1
 8004140:	fb02 f303 	mul.w	r3, r2, r3
 8004144:	461a      	mov	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8004150:	e055      	b.n	80041fe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004152:	4b34      	ldr	r3, [pc, #208]	@ (8004224 <USER_SPI_ioctl+0x2dc>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	f003 0306 	and.w	r3, r3, #6
 800415a:	2b00      	cmp	r3, #0
 800415c:	d051      	beq.n	8004202 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800415e:	f107 020c 	add.w	r2, r7, #12
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	210b      	movs	r1, #11
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff feee 	bl	8003f48 <USER_SPI_ioctl>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d149      	bne.n	8004206 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004172:	7b3b      	ldrb	r3, [r7, #12]
 8004174:	099b      	lsrs	r3, r3, #6
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <USER_SPI_ioctl+0x23e>
 800417c:	7dbb      	ldrb	r3, [r7, #22]
 800417e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d041      	beq.n	800420a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8004196:	4b23      	ldr	r3, [pc, #140]	@ (8004224 <USER_SPI_ioctl+0x2dc>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d105      	bne.n	80041ae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80041a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a4:	025b      	lsls	r3, r3, #9
 80041a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	025b      	lsls	r3, r3, #9
 80041ac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80041ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041b0:	2020      	movs	r0, #32
 80041b2:	f7ff fc76 	bl	8003aa2 <send_cmd>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d128      	bne.n	800420e <USER_SPI_ioctl+0x2c6>
 80041bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041be:	2021      	movs	r0, #33	@ 0x21
 80041c0:	f7ff fc6f 	bl	8003aa2 <send_cmd>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d121      	bne.n	800420e <USER_SPI_ioctl+0x2c6>
 80041ca:	2100      	movs	r1, #0
 80041cc:	2026      	movs	r0, #38	@ 0x26
 80041ce:	f7ff fc68 	bl	8003aa2 <send_cmd>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11a      	bne.n	800420e <USER_SPI_ioctl+0x2c6>
 80041d8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80041dc:	f7ff fbba 	bl	8003954 <wait_ready>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d013      	beq.n	800420e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80041ec:	e00f      	b.n	800420e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80041ee:	2304      	movs	r3, #4
 80041f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80041f4:	e00c      	b.n	8004210 <USER_SPI_ioctl+0x2c8>
		break;
 80041f6:	bf00      	nop
 80041f8:	e00a      	b.n	8004210 <USER_SPI_ioctl+0x2c8>
		break;
 80041fa:	bf00      	nop
 80041fc:	e008      	b.n	8004210 <USER_SPI_ioctl+0x2c8>
		break;
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <USER_SPI_ioctl+0x2c8>
		break;
 800420e:	bf00      	nop
	}

	despiselect();
 8004210:	f7ff fbc4 	bl	800399c <despiselect>

	return res;
 8004214:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004218:	4618      	mov	r0, r3
 800421a:	3730      	adds	r7, #48	@ 0x30
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000020 	.word	0x20000020
 8004224:	20000244 	.word	0x20000244

08004228 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	4a08      	ldr	r2, [pc, #32]	@ (8004258 <disk_status+0x30>)
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	79fa      	ldrb	r2, [r7, #7]
 8004240:	4905      	ldr	r1, [pc, #20]	@ (8004258 <disk_status+0x30>)
 8004242:	440a      	add	r2, r1
 8004244:	7a12      	ldrb	r2, [r2, #8]
 8004246:	4610      	mov	r0, r2
 8004248:	4798      	blx	r3
 800424a:	4603      	mov	r3, r0
 800424c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800424e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000278 	.word	0x20000278

0800425c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	4a0e      	ldr	r2, [pc, #56]	@ (80042a8 <disk_initialize+0x4c>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d114      	bne.n	800429e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	4a0c      	ldr	r2, [pc, #48]	@ (80042a8 <disk_initialize+0x4c>)
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	79fa      	ldrb	r2, [r7, #7]
 8004282:	4909      	ldr	r1, [pc, #36]	@ (80042a8 <disk_initialize+0x4c>)
 8004284:	440a      	add	r2, r1
 8004286:	7a12      	ldrb	r2, [r2, #8]
 8004288:	4610      	mov	r0, r2
 800428a:	4798      	blx	r3
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d103      	bne.n	800429e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	4a03      	ldr	r2, [pc, #12]	@ (80042a8 <disk_initialize+0x4c>)
 800429a:	2101      	movs	r1, #1
 800429c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000278 	.word	0x20000278

080042ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4603      	mov	r3, r0
 80042ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	4a0a      	ldr	r2, [pc, #40]	@ (80042e8 <disk_read+0x3c>)
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	689c      	ldr	r4, [r3, #8]
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4a07      	ldr	r2, [pc, #28]	@ (80042e8 <disk_read+0x3c>)
 80042cc:	4413      	add	r3, r2
 80042ce:	7a18      	ldrb	r0, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	47a0      	blx	r4
 80042d8:	4603      	mov	r3, r0
 80042da:	75fb      	strb	r3, [r7, #23]
  return res;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	371c      	adds	r7, #28
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd90      	pop	{r4, r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000278 	.word	0x20000278

080042ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80042ec:	b590      	push	{r4, r7, lr}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4603      	mov	r3, r0
 80042fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <disk_write+0x3c>)
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68dc      	ldr	r4, [r3, #12]
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	4a07      	ldr	r2, [pc, #28]	@ (8004328 <disk_write+0x3c>)
 800430c:	4413      	add	r3, r2
 800430e:	7a18      	ldrb	r0, [r3, #8]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	47a0      	blx	r4
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]
  return res;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
}
 800431e:	4618      	mov	r0, r3
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	bd90      	pop	{r4, r7, pc}
 8004326:	bf00      	nop
 8004328:	20000278 	.word	0x20000278

0800432c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	603a      	str	r2, [r7, #0]
 8004336:	71fb      	strb	r3, [r7, #7]
 8004338:	460b      	mov	r3, r1
 800433a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4a09      	ldr	r2, [pc, #36]	@ (8004364 <disk_ioctl+0x38>)
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	79fa      	ldrb	r2, [r7, #7]
 800434a:	4906      	ldr	r1, [pc, #24]	@ (8004364 <disk_ioctl+0x38>)
 800434c:	440a      	add	r2, r1
 800434e:	7a10      	ldrb	r0, [r2, #8]
 8004350:	79b9      	ldrb	r1, [r7, #6]
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	4798      	blx	r3
 8004356:	4603      	mov	r3, r0
 8004358:	73fb      	strb	r3, [r7, #15]
  return res;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000278 	.word	0x20000278

08004368 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3301      	adds	r3, #1
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004378:	89fb      	ldrh	r3, [r7, #14]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	b21a      	sxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b21b      	sxth	r3, r3
 8004384:	4313      	orrs	r3, r2
 8004386:	b21b      	sxth	r3, r3
 8004388:	81fb      	strh	r3, [r7, #14]
	return rv;
 800438a:	89fb      	ldrh	r3, [r7, #14]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3303      	adds	r3, #3
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	3202      	adds	r2, #2
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	3201      	adds	r2, #1
 80043be:	7812      	ldrb	r2, [r2, #0]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	7812      	ldrb	r2, [r2, #0]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	887a      	ldrh	r2, [r7, #2]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00d      	beq.n	80044a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	1c53      	adds	r3, r2, #1
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1c59      	adds	r1, r3, #1
 8004490:	6179      	str	r1, [r7, #20]
 8004492:	7812      	ldrb	r2, [r2, #0]
 8004494:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3b01      	subs	r3, #1
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f1      	bne.n	8004486 <mem_cpy+0x1a>
	}
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80044ae:	b480      	push	{r7}
 80044b0:	b087      	sub	sp, #28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	617a      	str	r2, [r7, #20]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	3b01      	subs	r3, #1
 80044ce:	607b      	str	r3, [r7, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f3      	bne.n	80044be <mem_set+0x10>
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80044e4:	b480      	push	{r7}
 80044e6:	b089      	sub	sp, #36	@ 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	61fa      	str	r2, [r7, #28]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	4619      	mov	r1, r3
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	61ba      	str	r2, [r7, #24]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	1acb      	subs	r3, r1, r3
 8004510:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3b01      	subs	r3, #1
 8004516:	607b      	str	r3, [r7, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <mem_cmp+0x40>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0eb      	beq.n	80044fc <mem_cmp+0x18>

	return r;
 8004524:	697b      	ldr	r3, [r7, #20]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3724      	adds	r7, #36	@ 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800453c:	e002      	b.n	8004544 <chk_chr+0x12>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3301      	adds	r3, #1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <chk_chr+0x26>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	4293      	cmp	r3, r2
 8004556:	d1f2      	bne.n	800453e <chk_chr+0xc>
	return *str;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	781b      	ldrb	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e029      	b.n	80045d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800457c:	4a27      	ldr	r2, [pc, #156]	@ (800461c <chk_lock+0xb4>)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	4413      	add	r3, r2
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d01d      	beq.n	80045c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800458a:	4a24      	ldr	r2, [pc, #144]	@ (800461c <chk_lock+0xb4>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	4413      	add	r3, r2
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d116      	bne.n	80045ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800459c:	4a1f      	ldr	r2, [pc, #124]	@ (800461c <chk_lock+0xb4>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d10c      	bne.n	80045ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80045b0:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <chk_lock+0xb4>)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	4413      	add	r3, r2
 80045b8:	3308      	adds	r3, #8
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d102      	bne.n	80045ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80045c4:	e007      	b.n	80045d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3301      	adds	r3, #1
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d9d2      	bls.n	800457c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d109      	bne.n	80045f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <chk_lock+0x80>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d101      	bne.n	80045ec <chk_lock+0x84>
 80045e8:	2300      	movs	r3, #0
 80045ea:	e010      	b.n	800460e <chk_lock+0xa6>
 80045ec:	2312      	movs	r3, #18
 80045ee:	e00e      	b.n	800460e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d108      	bne.n	8004608 <chk_lock+0xa0>
 80045f6:	4a09      	ldr	r2, [pc, #36]	@ (800461c <chk_lock+0xb4>)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	4413      	add	r3, r2
 80045fe:	330c      	adds	r3, #12
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004606:	d101      	bne.n	800460c <chk_lock+0xa4>
 8004608:	2310      	movs	r3, #16
 800460a:	e000      	b.n	800460e <chk_lock+0xa6>
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000258 	.word	0x20000258

08004620 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004626:	2300      	movs	r3, #0
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	e002      	b.n	8004632 <enq_lock+0x12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3301      	adds	r3, #1
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d806      	bhi.n	8004646 <enq_lock+0x26>
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <enq_lock+0x40>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	4413      	add	r3, r2
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f2      	bne.n	800462c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b02      	cmp	r3, #2
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000258 	.word	0x20000258

08004664 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	e01f      	b.n	80046b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004674:	4a41      	ldr	r2, [pc, #260]	@ (800477c <inc_lock+0x118>)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	4413      	add	r3, r2
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d113      	bne.n	80046ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004686:	4a3d      	ldr	r2, [pc, #244]	@ (800477c <inc_lock+0x118>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	4413      	add	r3, r2
 800468e:	3304      	adds	r3, #4
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004696:	429a      	cmp	r2, r3
 8004698:	d109      	bne.n	80046ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800469a:	4a38      	ldr	r2, [pc, #224]	@ (800477c <inc_lock+0x118>)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	4413      	add	r3, r2
 80046a2:	3308      	adds	r3, #8
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d006      	beq.n	80046bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d9dc      	bls.n	8004674 <inc_lock+0x10>
 80046ba:	e000      	b.n	80046be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80046bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d132      	bne.n	800472a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e002      	b.n	80046d0 <inc_lock+0x6c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d806      	bhi.n	80046e4 <inc_lock+0x80>
 80046d6:	4a29      	ldr	r2, [pc, #164]	@ (800477c <inc_lock+0x118>)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	4413      	add	r3, r2
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f2      	bne.n	80046ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d101      	bne.n	80046ee <inc_lock+0x8a>
 80046ea:	2300      	movs	r3, #0
 80046ec:	e040      	b.n	8004770 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4922      	ldr	r1, [pc, #136]	@ (800477c <inc_lock+0x118>)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	440b      	add	r3, r1
 80046fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	491e      	ldr	r1, [pc, #120]	@ (800477c <inc_lock+0x118>)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	440b      	add	r3, r1
 8004708:	3304      	adds	r3, #4
 800470a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	491a      	ldr	r1, [pc, #104]	@ (800477c <inc_lock+0x118>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	440b      	add	r3, r1
 8004718:	3308      	adds	r3, #8
 800471a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <inc_lock+0x118>)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	4413      	add	r3, r2
 8004724:	330c      	adds	r3, #12
 8004726:	2200      	movs	r2, #0
 8004728:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d009      	beq.n	8004744 <inc_lock+0xe0>
 8004730:	4a12      	ldr	r2, [pc, #72]	@ (800477c <inc_lock+0x118>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	4413      	add	r3, r2
 8004738:	330c      	adds	r3, #12
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <inc_lock+0xe0>
 8004740:	2300      	movs	r3, #0
 8004742:	e015      	b.n	8004770 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d108      	bne.n	800475c <inc_lock+0xf8>
 800474a:	4a0c      	ldr	r2, [pc, #48]	@ (800477c <inc_lock+0x118>)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	4413      	add	r3, r2
 8004752:	330c      	adds	r3, #12
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	3301      	adds	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	e001      	b.n	8004760 <inc_lock+0xfc>
 800475c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004760:	4906      	ldr	r1, [pc, #24]	@ (800477c <inc_lock+0x118>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	440b      	add	r3, r1
 8004768:	330c      	adds	r3, #12
 800476a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000258 	.word	0x20000258

08004780 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d825      	bhi.n	80047e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8004794:	4a17      	ldr	r2, [pc, #92]	@ (80047f4 <dec_lock+0x74>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	4413      	add	r3, r2
 800479c:	330c      	adds	r3, #12
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047a2:	89fb      	ldrh	r3, [r7, #14]
 80047a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047a8:	d101      	bne.n	80047ae <dec_lock+0x2e>
 80047aa:	2300      	movs	r3, #0
 80047ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <dec_lock+0x3a>
 80047b4:	89fb      	ldrh	r3, [r7, #14]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80047ba:	4a0e      	ldr	r2, [pc, #56]	@ (80047f4 <dec_lock+0x74>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	4413      	add	r3, r2
 80047c2:	330c      	adds	r3, #12
 80047c4:	89fa      	ldrh	r2, [r7, #14]
 80047c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047c8:	89fb      	ldrh	r3, [r7, #14]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d105      	bne.n	80047da <dec_lock+0x5a>
 80047ce:	4a09      	ldr	r2, [pc, #36]	@ (80047f4 <dec_lock+0x74>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	4413      	add	r3, r2
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	737b      	strb	r3, [r7, #13]
 80047de:	e001      	b.n	80047e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047e0:	2302      	movs	r3, #2
 80047e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80047e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000258 	.word	0x20000258

080047f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e010      	b.n	8004828 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004806:	4a0d      	ldr	r2, [pc, #52]	@ (800483c <clear_lock+0x44>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	4413      	add	r3, r2
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d105      	bne.n	8004822 <clear_lock+0x2a>
 8004816:	4a09      	ldr	r2, [pc, #36]	@ (800483c <clear_lock+0x44>)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	4413      	add	r3, r2
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	3301      	adds	r3, #1
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d9eb      	bls.n	8004806 <clear_lock+0xe>
	}
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	20000258 	.word	0x20000258

08004840 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	78db      	ldrb	r3, [r3, #3]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d034      	beq.n	80048be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004858:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	7858      	ldrb	r0, [r3, #1]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004864:	2301      	movs	r3, #1
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	f7ff fd40 	bl	80042ec <disk_write>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
 8004876:	e022      	b.n	80048be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	1ad2      	subs	r2, r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	429a      	cmp	r2, r3
 800488c:	d217      	bcs.n	80048be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	789b      	ldrb	r3, [r3, #2]
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	e010      	b.n	80048b8 <sync_window+0x78>
					wsect += fs->fsize;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4413      	add	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	7858      	ldrb	r0, [r3, #1]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80048aa:	2301      	movs	r3, #1
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	f7ff fd1d 	bl	80042ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d8eb      	bhi.n	8004896 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d01b      	beq.n	8004918 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ffad 	bl	8004840 <sync_window>
 80048e6:	4603      	mov	r3, r0
 80048e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d113      	bne.n	8004918 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	7858      	ldrb	r0, [r3, #1]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80048fa:	2301      	movs	r3, #1
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	f7ff fcd5 	bl	80042ac <disk_read>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004908:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800490c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff87 	bl	8004840 <sync_window>
 8004932:	4603      	mov	r3, r0
 8004934:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d158      	bne.n	80049ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d148      	bne.n	80049d6 <sync_fs+0xb2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	791b      	ldrb	r3, [r3, #4]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d144      	bne.n	80049d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3330      	adds	r3, #48	@ 0x30
 8004950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fda9 	bl	80044ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3330      	adds	r3, #48	@ 0x30
 8004960:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004964:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff fd38 	bl	80043de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3330      	adds	r3, #48	@ 0x30
 8004972:	4921      	ldr	r1, [pc, #132]	@ (80049f8 <sync_fs+0xd4>)
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fd4d 	bl	8004414 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3330      	adds	r3, #48	@ 0x30
 800497e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004982:	491e      	ldr	r1, [pc, #120]	@ (80049fc <sync_fs+0xd8>)
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fd45 	bl	8004414 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3330      	adds	r3, #48	@ 0x30
 800498e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	4619      	mov	r1, r3
 8004998:	4610      	mov	r0, r2
 800499a:	f7ff fd3b 	bl	8004414 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	3330      	adds	r3, #48	@ 0x30
 80049a2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7ff fd31 	bl	8004414 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7858      	ldrb	r0, [r3, #1]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ca:	2301      	movs	r3, #1
 80049cc:	f7ff fc8e 	bl	80042ec <disk_write>
			fs->fsi_flag = 0;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	785b      	ldrb	r3, [r3, #1]
 80049da:	2200      	movs	r2, #0
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fca4 	bl	800432c <disk_ioctl>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <sync_fs+0xca>
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	41615252 	.word	0x41615252
 80049fc:	61417272 	.word	0x61417272

08004a00 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	3b02      	subs	r3, #2
 8004a0e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	3b02      	subs	r3, #2
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d301      	bcc.n	8004a20 <clust2sect+0x20>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e008      	b.n	8004a32 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	895b      	ldrh	r3, [r3, #10]
 8004a24:	461a      	mov	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	fb03 f202 	mul.w	r2, r3, r2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	4413      	add	r3, r2
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d904      	bls.n	8004a5e <get_fat+0x20>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d302      	bcc.n	8004a64 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004a5e:	2301      	movs	r3, #1
 8004a60:	617b      	str	r3, [r7, #20]
 8004a62:	e08e      	b.n	8004b82 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a68:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d061      	beq.n	8004b36 <get_fat+0xf8>
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	dc7b      	bgt.n	8004b6e <get_fat+0x130>
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d002      	beq.n	8004a80 <get_fat+0x42>
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d041      	beq.n	8004b02 <get_fat+0xc4>
 8004a7e:	e076      	b.n	8004b6e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	0a5b      	lsrs	r3, r3, #9
 8004a96:	4413      	add	r3, r2
 8004a98:	4619      	mov	r1, r3
 8004a9a:	6938      	ldr	r0, [r7, #16]
 8004a9c:	f7ff ff14 	bl	80048c8 <move_window>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d166      	bne.n	8004b74 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	60fa      	str	r2, [r7, #12]
 8004aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ab8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6a1a      	ldr	r2, [r3, #32]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0a5b      	lsrs	r3, r3, #9
 8004ac2:	4413      	add	r3, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6938      	ldr	r0, [r7, #16]
 8004ac8:	f7ff fefe 	bl	80048c8 <move_window>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d152      	bne.n	8004b78 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <get_fat+0xba>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	e002      	b.n	8004afe <get_fat+0xc0>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afe:	617b      	str	r3, [r7, #20]
			break;
 8004b00:	e03f      	b.n	8004b82 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6a1a      	ldr	r2, [r3, #32]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	6938      	ldr	r0, [r7, #16]
 8004b10:	f7ff feda 	bl	80048c8 <move_window>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d130      	bne.n	8004b7c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004b28:	4413      	add	r3, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fc1c 	bl	8004368 <ld_word>
 8004b30:	4603      	mov	r3, r0
 8004b32:	617b      	str	r3, [r7, #20]
			break;
 8004b34:	e025      	b.n	8004b82 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	09db      	lsrs	r3, r3, #7
 8004b3e:	4413      	add	r3, r2
 8004b40:	4619      	mov	r1, r3
 8004b42:	6938      	ldr	r0, [r7, #16]
 8004b44:	f7ff fec0 	bl	80048c8 <move_window>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d118      	bne.n	8004b80 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fc1a 	bl	8004398 <ld_dword>
 8004b64:	4603      	mov	r3, r0
 8004b66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004b6a:	617b      	str	r3, [r7, #20]
			break;
 8004b6c:	e009      	b.n	8004b82 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004b6e:	2301      	movs	r3, #1
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	e006      	b.n	8004b82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b74:	bf00      	nop
 8004b76:	e004      	b.n	8004b82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b78:	bf00      	nop
 8004b7a:	e002      	b.n	8004b82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004b7c:	bf00      	nop
 8004b7e:	e000      	b.n	8004b82 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b80:	bf00      	nop
		}
	}

	return val;
 8004b82:	697b      	ldr	r3, [r7, #20]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b089      	sub	sp, #36	@ 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	f240 80d9 	bls.w	8004d56 <put_fat+0x1ca>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	f080 80d3 	bcs.w	8004d56 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	f000 8096 	beq.w	8004ce6 <put_fat+0x15a>
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	f300 80cb 	bgt.w	8004d56 <put_fat+0x1ca>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d002      	beq.n	8004bca <put_fat+0x3e>
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d06e      	beq.n	8004ca6 <put_fat+0x11a>
 8004bc8:	e0c5      	b.n	8004d56 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	0a5b      	lsrs	r3, r3, #9
 8004be0:	4413      	add	r3, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f7ff fe6f 	bl	80048c8 <move_window>
 8004bea:	4603      	mov	r3, r0
 8004bec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bee:	7ffb      	ldrb	r3, [r7, #31]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f040 80a9 	bne.w	8004d48 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	61b9      	str	r1, [r7, #24]
 8004c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c06:	4413      	add	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <put_fat+0xa4>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	b25b      	sxtb	r3, r3
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	b25a      	sxtb	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	b25b      	sxtb	r3, r3
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e001      	b.n	8004c34 <put_fat+0xa8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1a      	ldr	r2, [r3, #32]
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	0a5b      	lsrs	r3, r3, #9
 8004c46:	4413      	add	r3, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff fe3c 	bl	80048c8 <move_window>
 8004c50:	4603      	mov	r3, r0
 8004c52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c54:	7ffb      	ldrb	r3, [r7, #31]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d178      	bne.n	8004d4c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	4413      	add	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <put_fat+0xf0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	091b      	lsrs	r3, r3, #4
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	e00e      	b.n	8004c9a <put_fat+0x10e>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	b25b      	sxtb	r3, r3
 8004c82:	f023 030f 	bic.w	r3, r3, #15
 8004c86:	b25a      	sxtb	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	b25b      	sxtb	r3, r3
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	b25b      	sxtb	r3, r3
 8004c94:	4313      	orrs	r3, r2
 8004c96:	b25b      	sxtb	r3, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	70da      	strb	r2, [r3, #3]
			break;
 8004ca4:	e057      	b.n	8004d56 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	4413      	add	r3, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f7ff fe08 	bl	80048c8 <move_window>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cbc:	7ffb      	ldrb	r3, [r7, #31]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d146      	bne.n	8004d50 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004cd0:	4413      	add	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	b292      	uxth	r2, r2
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fb80 	bl	80043de <st_word>
			fs->wflag = 1;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	70da      	strb	r2, [r3, #3]
			break;
 8004ce4:	e037      	b.n	8004d56 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a1a      	ldr	r2, [r3, #32]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	09db      	lsrs	r3, r3, #7
 8004cee:	4413      	add	r3, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff fde8 	bl	80048c8 <move_window>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cfc:	7ffb      	ldrb	r3, [r7, #31]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d128      	bne.n	8004d54 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004d16:	4413      	add	r3, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7ff fb3d 	bl	8004398 <ld_dword>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004d24:	4323      	orrs	r3, r4
 8004d26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004d36:	4413      	add	r3, r2
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fb6a 	bl	8004414 <st_dword>
			fs->wflag = 1;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	70da      	strb	r2, [r3, #3]
			break;
 8004d46:	e006      	b.n	8004d56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d48:	bf00      	nop
 8004d4a:	e004      	b.n	8004d56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d4c:	bf00      	nop
 8004d4e:	e002      	b.n	8004d56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004d54:	bf00      	nop
		}
	}
	return res;
 8004d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3724      	adds	r7, #36	@ 0x24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}

08004d60 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d904      	bls.n	8004d86 <remove_chain+0x26>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d301      	bcc.n	8004d8a <remove_chain+0x2a>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e04b      	b.n	8004e22 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00c      	beq.n	8004daa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f7ff fef8 	bl	8004b8c <put_fat>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004da0:	7ffb      	ldrb	r3, [r7, #31]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <remove_chain+0x4a>
 8004da6:	7ffb      	ldrb	r3, [r7, #31]
 8004da8:	e03b      	b.n	8004e22 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff fe46 	bl	8004a3e <get_fat>
 8004db2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d031      	beq.n	8004e1e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <remove_chain+0x64>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e02e      	b.n	8004e22 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dca:	d101      	bne.n	8004dd0 <remove_chain+0x70>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e028      	b.n	8004e22 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	68b9      	ldr	r1, [r7, #8]
 8004dd4:	69b8      	ldr	r0, [r7, #24]
 8004dd6:	f7ff fed9 	bl	8004b8c <put_fat>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <remove_chain+0x88>
 8004de4:	7ffb      	ldrb	r3, [r7, #31]
 8004de6:	e01c      	b.n	8004e22 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	3b02      	subs	r3, #2
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d20b      	bcs.n	8004e0e <remove_chain+0xae>
			fs->free_clst++;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	791b      	ldrb	r3, [r3, #4]
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d3c6      	bcc.n	8004daa <remove_chain+0x4a>
 8004e1c:	e000      	b.n	8004e20 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004e1e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b088      	sub	sp, #32
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10d      	bne.n	8004e5c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <create_chain+0x2c>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d31b      	bcc.n	8004e8e <create_chain+0x64>
 8004e56:	2301      	movs	r3, #1
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e018      	b.n	8004e8e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fded 	bl	8004a3e <get_fat>
 8004e64:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d801      	bhi.n	8004e70 <create_chain+0x46>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e070      	b.n	8004f52 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e76:	d101      	bne.n	8004e7c <create_chain+0x52>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	e06a      	b.n	8004f52 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d201      	bcs.n	8004e8a <create_chain+0x60>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	e063      	b.n	8004f52 <create_chain+0x128>
		scl = clst;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3301      	adds	r3, #1
 8004e96:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d307      	bcc.n	8004eb2 <create_chain+0x88>
				ncl = 2;
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d901      	bls.n	8004eb2 <create_chain+0x88>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e04f      	b.n	8004f52 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004eb2:	69f9      	ldr	r1, [r7, #28]
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fdc2 	bl	8004a3e <get_fat>
 8004eba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00e      	beq.n	8004ee0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d003      	beq.n	8004ed0 <create_chain+0xa6>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ece:	d101      	bne.n	8004ed4 <create_chain+0xaa>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	e03e      	b.n	8004f52 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1da      	bne.n	8004e92 <create_chain+0x68>
 8004edc:	2300      	movs	r3, #0
 8004ede:	e038      	b.n	8004f52 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ee0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004ee2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ee6:	69f9      	ldr	r1, [r7, #28]
 8004ee8:	6938      	ldr	r0, [r7, #16]
 8004eea:	f7ff fe4f 	bl	8004b8c <put_fat>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <create_chain+0xe2>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d006      	beq.n	8004f0c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	6938      	ldr	r0, [r7, #16]
 8004f04:	f7ff fe42 	bl	8004b8c <put_fat>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d116      	bne.n	8004f40 <create_chain+0x116>
		fs->last_clst = ncl;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	3b02      	subs	r3, #2
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d804      	bhi.n	8004f30 <create_chain+0x106>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	1e5a      	subs	r2, r3, #1
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	791b      	ldrb	r3, [r3, #4]
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	711a      	strb	r2, [r3, #4]
 8004f3e:	e007      	b.n	8004f50 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d102      	bne.n	8004f4c <create_chain+0x122>
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f4a:	e000      	b.n	8004f4e <create_chain+0x124>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004f50:	69fb      	ldr	r3, [r7, #28]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b087      	sub	sp, #28
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6e:	3304      	adds	r3, #4
 8004f70:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	0a5b      	lsrs	r3, r3, #9
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	8952      	ldrh	r2, [r2, #10]
 8004f7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	613a      	str	r2, [r7, #16]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <clmt_clust+0x3a>
 8004f90:	2300      	movs	r3, #0
 8004f92:	e010      	b.n	8004fb6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d307      	bcc.n	8004fac <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004faa:	e7e9      	b.n	8004f80 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004fac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
 8004fca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004fd8:	d204      	bcs.n	8004fe4 <dir_sdi+0x22>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e063      	b.n	80050b0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <dir_sdi+0x46>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d902      	bls.n	8005008 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10c      	bne.n	8005028 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	8912      	ldrh	r2, [r2, #8]
 8005016:	4293      	cmp	r3, r2
 8005018:	d301      	bcc.n	800501e <dir_sdi+0x5c>
 800501a:	2302      	movs	r3, #2
 800501c:	e048      	b.n	80050b0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	61da      	str	r2, [r3, #28]
 8005026:	e029      	b.n	800507c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005030:	e019      	b.n	8005066 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6979      	ldr	r1, [r7, #20]
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fd01 	bl	8004a3e <get_fat>
 800503c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005044:	d101      	bne.n	800504a <dir_sdi+0x88>
 8005046:	2301      	movs	r3, #1
 8005048:	e032      	b.n	80050b0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d904      	bls.n	800505a <dir_sdi+0x98>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	429a      	cmp	r2, r3
 8005058:	d301      	bcc.n	800505e <dir_sdi+0x9c>
 800505a:	2302      	movs	r3, #2
 800505c:	e028      	b.n	80050b0 <dir_sdi+0xee>
			ofs -= csz;
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	429a      	cmp	r2, r3
 800506c:	d2e1      	bcs.n	8005032 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800506e:	6979      	ldr	r1, [r7, #20]
 8005070:	6938      	ldr	r0, [r7, #16]
 8005072:	f7ff fcc5 	bl	8004a00 <clust2sect>
 8005076:	4602      	mov	r2, r0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <dir_sdi+0xcc>
 800508a:	2302      	movs	r3, #2
 800508c:	e010      	b.n	80050b0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69da      	ldr	r2, [r3, #28]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	0a5b      	lsrs	r3, r3, #9
 8005096:	441a      	add	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a8:	441a      	add	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	3320      	adds	r3, #32
 80050ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <dir_next+0x28>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050de:	d301      	bcc.n	80050e4 <dir_next+0x2c>
 80050e0:	2304      	movs	r3, #4
 80050e2:	e0aa      	b.n	800523a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f040 8098 	bne.w	8005220 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	8912      	ldrh	r2, [r2, #8]
 800510a:	4293      	cmp	r3, r2
 800510c:	f0c0 8088 	bcc.w	8005220 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
 8005116:	2304      	movs	r3, #4
 8005118:	e08f      	b.n	800523a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	0a5b      	lsrs	r3, r3, #9
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	8952      	ldrh	r2, [r2, #10]
 8005122:	3a01      	subs	r2, #1
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d17a      	bne.n	8005220 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7ff fc83 	bl	8004a3e <get_fat>
 8005138:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d801      	bhi.n	8005144 <dir_next+0x8c>
 8005140:	2302      	movs	r3, #2
 8005142:	e07a      	b.n	800523a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800514a:	d101      	bne.n	8005150 <dir_next+0x98>
 800514c:	2301      	movs	r3, #1
 800514e:	e074      	b.n	800523a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	429a      	cmp	r2, r3
 8005158:	d358      	bcc.n	800520c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	61da      	str	r2, [r3, #28]
 8005166:	2304      	movs	r3, #4
 8005168:	e067      	b.n	800523a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7ff fe59 	bl	8004e2a <create_chain>
 8005178:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <dir_next+0xcc>
 8005180:	2307      	movs	r3, #7
 8005182:	e05a      	b.n	800523a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <dir_next+0xd6>
 800518a:	2302      	movs	r3, #2
 800518c:	e055      	b.n	800523a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005194:	d101      	bne.n	800519a <dir_next+0xe2>
 8005196:	2301      	movs	r3, #1
 8005198:	e04f      	b.n	800523a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff fb50 	bl	8004840 <sync_window>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <dir_next+0xf2>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e047      	b.n	800523a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3330      	adds	r3, #48	@ 0x30
 80051ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff f97a 	bl	80044ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	6979      	ldr	r1, [r7, #20]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff fc1d 	bl	8004a00 <clust2sect>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051cc:	e012      	b.n	80051f4 <dir_next+0x13c>
						fs->wflag = 1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff fb33 	bl	8004840 <sync_window>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <dir_next+0x12c>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e02a      	b.n	800523a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	3301      	adds	r3, #1
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	895b      	ldrh	r3, [r3, #10]
 80051f8:	461a      	mov	r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d3e6      	bcc.n	80051ce <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1ad2      	subs	r2, r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fbf3 	bl	8004a00 <clust2sect>
 800521a:	4602      	mov	r2, r0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	441a      	add	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b086      	sub	sp, #24
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005252:	2100      	movs	r1, #0
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7ff feb4 	bl	8004fc2 <dir_sdi>
 800525a:	4603      	mov	r3, r0
 800525c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800525e:	7dfb      	ldrb	r3, [r7, #23]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d12b      	bne.n	80052bc <dir_alloc+0x7a>
		n = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	4619      	mov	r1, r3
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fb2a 	bl	80048c8 <move_window>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d11d      	bne.n	80052ba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2be5      	cmp	r3, #229	@ 0xe5
 8005286:	d004      	beq.n	8005292 <dir_alloc+0x50>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d107      	bne.n	80052a2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3301      	adds	r3, #1
 8005296:	613b      	str	r3, [r7, #16]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d102      	bne.n	80052a6 <dir_alloc+0x64>
 80052a0:	e00c      	b.n	80052bc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80052a6:	2101      	movs	r1, #1
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ff05 	bl	80050b8 <dir_next>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0d7      	beq.n	8005268 <dir_alloc+0x26>
 80052b8:	e000      	b.n	80052bc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80052ba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d101      	bne.n	80052c6 <dir_alloc+0x84>
 80052c2:	2307      	movs	r3, #7
 80052c4:	75fb      	strb	r3, [r7, #23]
	return res;
 80052c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	331a      	adds	r3, #26
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff f842 	bl	8004368 <ld_word>
 80052e4:	4603      	mov	r3, r0
 80052e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d109      	bne.n	8005304 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	3314      	adds	r3, #20
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff f837 	bl	8004368 <ld_word>
 80052fa:	4603      	mov	r3, r0
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005304:	68fb      	ldr	r3, [r7, #12]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	331a      	adds	r3, #26
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	b292      	uxth	r2, r2
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f85a 	bl	80043de <st_word>
	if (fs->fs_type == FS_FAT32) {
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d109      	bne.n	8005346 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f103 0214 	add.w	r2, r3, #20
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	b29b      	uxth	r3, r3
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f7ff f84c 	bl	80043de <st_word>
	}
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800535c:	2100      	movs	r1, #0
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fe2f 	bl	8004fc2 <dir_sdi>
 8005364:	4603      	mov	r3, r0
 8005366:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <dir_find+0x24>
 800536e:	7dfb      	ldrb	r3, [r7, #23]
 8005370:	e03e      	b.n	80053f0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	4619      	mov	r1, r3
 8005378:	6938      	ldr	r0, [r7, #16]
 800537a:	f7ff faa5 	bl	80048c8 <move_window>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d12f      	bne.n	80053e8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <dir_find+0x4e>
 8005396:	2304      	movs	r3, #4
 8005398:	75fb      	strb	r3, [r7, #23]
 800539a:	e028      	b.n	80053ee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	330b      	adds	r3, #11
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	330b      	adds	r3, #11
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <dir_find+0x86>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a18      	ldr	r0, [r3, #32]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3324      	adds	r3, #36	@ 0x24
 80053c6:	220b      	movs	r2, #11
 80053c8:	4619      	mov	r1, r3
 80053ca:	f7ff f88b 	bl	80044e4 <mem_cmp>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80053d4:	2100      	movs	r1, #0
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fe6e 	bl	80050b8 <dir_next>
 80053dc:	4603      	mov	r3, r0
 80053de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0c5      	beq.n	8005372 <dir_find+0x24>
 80053e6:	e002      	b.n	80053ee <dir_find+0xa0>
		if (res != FR_OK) break;
 80053e8:	bf00      	nop
 80053ea:	e000      	b.n	80053ee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80053ec:	bf00      	nop

	return res;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005406:	2101      	movs	r1, #1
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff1a 	bl	8005242 <dir_alloc>
 800540e:	4603      	mov	r3, r0
 8005410:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11c      	bne.n	8005452 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	4619      	mov	r1, r3
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f7ff fa52 	bl	80048c8 <move_window>
 8005424:	4603      	mov	r3, r0
 8005426:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d111      	bne.n	8005452 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	2220      	movs	r2, #32
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff f839 	bl	80044ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a18      	ldr	r0, [r3, #32]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3324      	adds	r3, #36	@ 0x24
 8005444:	220b      	movs	r2, #11
 8005446:	4619      	mov	r1, r3
 8005448:	f7ff f810 	bl	800446c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2201      	movs	r2, #1
 8005450:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005452:	7bfb      	ldrb	r3, [r7, #15]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3324      	adds	r3, #36	@ 0x24
 8005470:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005472:	220b      	movs	r2, #11
 8005474:	2120      	movs	r1, #32
 8005476:	68b8      	ldr	r0, [r7, #8]
 8005478:	f7ff f819 	bl	80044ae <mem_set>
	si = i = 0; ni = 8;
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	2308      	movs	r3, #8
 8005486:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	61fa      	str	r2, [r7, #28]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4413      	add	r3, r2
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005496:	7efb      	ldrb	r3, [r7, #27]
 8005498:	2b20      	cmp	r3, #32
 800549a:	d94e      	bls.n	800553a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800549c:	7efb      	ldrb	r3, [r7, #27]
 800549e:	2b2f      	cmp	r3, #47	@ 0x2f
 80054a0:	d006      	beq.n	80054b0 <create_name+0x54>
 80054a2:	7efb      	ldrb	r3, [r7, #27]
 80054a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80054a6:	d110      	bne.n	80054ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80054a8:	e002      	b.n	80054b0 <create_name+0x54>
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3301      	adds	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80054ba:	d0f6      	beq.n	80054aa <create_name+0x4e>
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80054c6:	d0f0      	beq.n	80054aa <create_name+0x4e>
			break;
 80054c8:	e038      	b.n	800553c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80054ca:	7efb      	ldrb	r3, [r7, #27]
 80054cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80054ce:	d003      	beq.n	80054d8 <create_name+0x7c>
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d30c      	bcc.n	80054f2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b0b      	cmp	r3, #11
 80054dc:	d002      	beq.n	80054e4 <create_name+0x88>
 80054de:	7efb      	ldrb	r3, [r7, #27]
 80054e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80054e2:	d001      	beq.n	80054e8 <create_name+0x8c>
 80054e4:	2306      	movs	r3, #6
 80054e6:	e044      	b.n	8005572 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80054e8:	2308      	movs	r3, #8
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	230b      	movs	r3, #11
 80054ee:	617b      	str	r3, [r7, #20]
			continue;
 80054f0:	e022      	b.n	8005538 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80054f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da04      	bge.n	8005504 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80054fa:	7efb      	ldrb	r3, [r7, #27]
 80054fc:	3b80      	subs	r3, #128	@ 0x80
 80054fe:	4a1f      	ldr	r2, [pc, #124]	@ (800557c <create_name+0x120>)
 8005500:	5cd3      	ldrb	r3, [r2, r3]
 8005502:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005504:	7efb      	ldrb	r3, [r7, #27]
 8005506:	4619      	mov	r1, r3
 8005508:	481d      	ldr	r0, [pc, #116]	@ (8005580 <create_name+0x124>)
 800550a:	f7ff f812 	bl	8004532 <chk_chr>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <create_name+0xbc>
 8005514:	2306      	movs	r3, #6
 8005516:	e02c      	b.n	8005572 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005518:	7efb      	ldrb	r3, [r7, #27]
 800551a:	2b60      	cmp	r3, #96	@ 0x60
 800551c:	d905      	bls.n	800552a <create_name+0xce>
 800551e:	7efb      	ldrb	r3, [r7, #27]
 8005520:	2b7a      	cmp	r3, #122	@ 0x7a
 8005522:	d802      	bhi.n	800552a <create_name+0xce>
 8005524:	7efb      	ldrb	r3, [r7, #27]
 8005526:	3b20      	subs	r3, #32
 8005528:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	613a      	str	r2, [r7, #16]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4413      	add	r3, r2
 8005534:	7efa      	ldrb	r2, [r7, #27]
 8005536:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005538:	e7a6      	b.n	8005488 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800553a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	441a      	add	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <create_name+0xf4>
 800554c:	2306      	movs	r3, #6
 800554e:	e010      	b.n	8005572 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2be5      	cmp	r3, #229	@ 0xe5
 8005556:	d102      	bne.n	800555e <create_name+0x102>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2205      	movs	r2, #5
 800555c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800555e:	7efb      	ldrb	r3, [r7, #27]
 8005560:	2b20      	cmp	r3, #32
 8005562:	d801      	bhi.n	8005568 <create_name+0x10c>
 8005564:	2204      	movs	r2, #4
 8005566:	e000      	b.n	800556a <create_name+0x10e>
 8005568:	2200      	movs	r2, #0
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	330b      	adds	r3, #11
 800556e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005570:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	08007598 	.word	0x08007598
 8005580:	0800753c 	.word	0x0800753c

08005584 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005598:	e002      	b.n	80055a0 <follow_path+0x1c>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80055a6:	d0f8      	beq.n	800559a <follow_path+0x16>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80055ae:	d0f4      	beq.n	800559a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2200      	movs	r2, #0
 80055b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b1f      	cmp	r3, #31
 80055bc:	d80a      	bhi.n	80055d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2280      	movs	r2, #128	@ 0x80
 80055c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80055c6:	2100      	movs	r1, #0
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7ff fcfa 	bl	8004fc2 <dir_sdi>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]
 80055d2:	e043      	b.n	800565c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80055d4:	463b      	mov	r3, r7
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ff3f 	bl	800545c <create_name>
 80055de:	4603      	mov	r3, r0
 80055e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80055e2:	7dfb      	ldrb	r3, [r7, #23]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d134      	bne.n	8005652 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff feb0 	bl	800534e <dir_find>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80055f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005600:	7dfb      	ldrb	r3, [r7, #23]
 8005602:	2b04      	cmp	r3, #4
 8005604:	d127      	bne.n	8005656 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d122      	bne.n	8005656 <follow_path+0xd2>
 8005610:	2305      	movs	r3, #5
 8005612:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005614:	e01f      	b.n	8005656 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005616:	7afb      	ldrb	r3, [r7, #11]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d11c      	bne.n	800565a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	799b      	ldrb	r3, [r3, #6]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800562c:	2305      	movs	r3, #5
 800562e:	75fb      	strb	r3, [r7, #23]
 8005630:	e014      	b.n	800565c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005640:	4413      	add	r3, r2
 8005642:	4619      	mov	r1, r3
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff fe43 	bl	80052d0 <ld_clust>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005650:	e7c0      	b.n	80055d4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005652:	bf00      	nop
 8005654:	e002      	b.n	800565c <follow_path+0xd8>
				break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800565a:	bf00      	nop
			}
		}
	}

	return res;
 800565c:	7dfb      	ldrb	r3, [r7, #23]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005666:	b480      	push	{r7}
 8005668:	b087      	sub	sp, #28
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005672:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d031      	beq.n	80056e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e002      	b.n	800568a <get_ldnumber+0x24>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	3301      	adds	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b20      	cmp	r3, #32
 8005690:	d903      	bls.n	800569a <get_ldnumber+0x34>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b3a      	cmp	r3, #58	@ 0x3a
 8005698:	d1f4      	bne.n	8005684 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b3a      	cmp	r3, #58	@ 0x3a
 80056a0:	d11c      	bne.n	80056dc <get_ldnumber+0x76>
			tp = *path;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1c5a      	adds	r2, r3, #1
 80056ac:	60fa      	str	r2, [r7, #12]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	3b30      	subs	r3, #48	@ 0x30
 80056b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b09      	cmp	r3, #9
 80056b8:	d80e      	bhi.n	80056d8 <get_ldnumber+0x72>
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d10a      	bne.n	80056d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d107      	bne.n	80056d8 <get_ldnumber+0x72>
					vol = (int)i;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	3301      	adds	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	e002      	b.n	80056e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80056e0:	693b      	ldr	r3, [r7, #16]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	70da      	strb	r2, [r3, #3]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005706:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff f8dc 	bl	80048c8 <move_window>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <check_fs+0x2a>
 8005716:	2304      	movs	r3, #4
 8005718:	e038      	b.n	800578c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3330      	adds	r3, #48	@ 0x30
 800571e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fe20 	bl	8004368 <ld_word>
 8005728:	4603      	mov	r3, r0
 800572a:	461a      	mov	r2, r3
 800572c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005730:	429a      	cmp	r2, r3
 8005732:	d001      	beq.n	8005738 <check_fs+0x48>
 8005734:	2303      	movs	r3, #3
 8005736:	e029      	b.n	800578c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800573e:	2be9      	cmp	r3, #233	@ 0xe9
 8005740:	d009      	beq.n	8005756 <check_fs+0x66>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005748:	2beb      	cmp	r3, #235	@ 0xeb
 800574a:	d11e      	bne.n	800578a <check_fs+0x9a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005752:	2b90      	cmp	r3, #144	@ 0x90
 8005754:	d119      	bne.n	800578a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3330      	adds	r3, #48	@ 0x30
 800575a:	3336      	adds	r3, #54	@ 0x36
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fe1b 	bl	8004398 <ld_dword>
 8005762:	4603      	mov	r3, r0
 8005764:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005768:	4a0a      	ldr	r2, [pc, #40]	@ (8005794 <check_fs+0xa4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d101      	bne.n	8005772 <check_fs+0x82>
 800576e:	2300      	movs	r3, #0
 8005770:	e00c      	b.n	800578c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3330      	adds	r3, #48	@ 0x30
 8005776:	3352      	adds	r3, #82	@ 0x52
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fe0d 	bl	8004398 <ld_dword>
 800577e:	4603      	mov	r3, r0
 8005780:	4a05      	ldr	r2, [pc, #20]	@ (8005798 <check_fs+0xa8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d101      	bne.n	800578a <check_fs+0x9a>
 8005786:	2300      	movs	r3, #0
 8005788:	e000      	b.n	800578c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800578a:	2302      	movs	r3, #2
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	00544146 	.word	0x00544146
 8005798:	33544146 	.word	0x33544146

0800579c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b096      	sub	sp, #88	@ 0x58
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ff58 	bl	8005666 <get_ldnumber>
 80057b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da01      	bge.n	80057c2 <find_volume+0x26>
 80057be:	230b      	movs	r3, #11
 80057c0:	e22d      	b.n	8005c1e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80057c2:	4aa1      	ldr	r2, [pc, #644]	@ (8005a48 <find_volume+0x2ac>)
 80057c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80057cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <find_volume+0x3a>
 80057d2:	230c      	movs	r3, #12
 80057d4:	e223      	b.n	8005c1e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80057e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01a      	beq.n	8005822 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80057ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe fd19 	bl	8004228 <disk_status>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80057fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10c      	bne.n	8005822 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005808:	79fb      	ldrb	r3, [r7, #7]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <find_volume+0x82>
 800580e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800581a:	230a      	movs	r3, #10
 800581c:	e1ff      	b.n	8005c1e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800581e:	2300      	movs	r3, #0
 8005820:	e1fd      	b.n	8005c1e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582a:	b2da      	uxtb	r2, r3
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fd11 	bl	800425c <disk_initialize>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005840:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800584c:	2303      	movs	r3, #3
 800584e:	e1e6      	b.n	8005c1e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <find_volume+0xca>
 8005856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005862:	230a      	movs	r3, #10
 8005864:	e1db      	b.n	8005c1e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800586a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800586c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800586e:	f7ff ff3f 	bl	80056f0 <check_fs>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005878:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800587c:	2b02      	cmp	r3, #2
 800587e:	d149      	bne.n	8005914 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005880:	2300      	movs	r3, #0
 8005882:	643b      	str	r3, [r7, #64]	@ 0x40
 8005884:	e01e      	b.n	80058c4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005888:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800588c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005894:	4413      	add	r3, r2
 8005896:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589a:	3304      	adds	r3, #4
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d006      	beq.n	80058b0 <find_volume+0x114>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	3308      	adds	r3, #8
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fd76 	bl	8004398 <ld_dword>
 80058ac:	4602      	mov	r2, r0
 80058ae:	e000      	b.n	80058b2 <find_volume+0x116>
 80058b0:	2200      	movs	r2, #0
 80058b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	3358      	adds	r3, #88	@ 0x58
 80058b8:	443b      	add	r3, r7
 80058ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80058be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c0:	3301      	adds	r3, #1
 80058c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80058c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d9dd      	bls.n	8005886 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80058ca:	2300      	movs	r3, #0
 80058cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80058ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <find_volume+0x13e>
 80058d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058d6:	3b01      	subs	r3, #1
 80058d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80058da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	3358      	adds	r3, #88	@ 0x58
 80058e0:	443b      	add	r3, r7
 80058e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80058e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80058e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d005      	beq.n	80058fa <find_volume+0x15e>
 80058ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058f2:	f7ff fefd 	bl	80056f0 <check_fs>
 80058f6:	4603      	mov	r3, r0
 80058f8:	e000      	b.n	80058fc <find_volume+0x160>
 80058fa:	2303      	movs	r3, #3
 80058fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005900:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005904:	2b01      	cmp	r3, #1
 8005906:	d905      	bls.n	8005914 <find_volume+0x178>
 8005908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590a:	3301      	adds	r3, #1
 800590c:	643b      	str	r3, [r7, #64]	@ 0x40
 800590e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005910:	2b03      	cmp	r3, #3
 8005912:	d9e2      	bls.n	80058da <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005914:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005918:	2b04      	cmp	r3, #4
 800591a:	d101      	bne.n	8005920 <find_volume+0x184>
 800591c:	2301      	movs	r3, #1
 800591e:	e17e      	b.n	8005c1e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005920:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005924:	2b01      	cmp	r3, #1
 8005926:	d901      	bls.n	800592c <find_volume+0x190>
 8005928:	230d      	movs	r3, #13
 800592a:	e178      	b.n	8005c1e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800592c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592e:	3330      	adds	r3, #48	@ 0x30
 8005930:	330b      	adds	r3, #11
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fd18 	bl	8004368 <ld_word>
 8005938:	4603      	mov	r3, r0
 800593a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800593e:	d001      	beq.n	8005944 <find_volume+0x1a8>
 8005940:	230d      	movs	r3, #13
 8005942:	e16c      	b.n	8005c1e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	3330      	adds	r3, #48	@ 0x30
 8005948:	3316      	adds	r3, #22
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe fd0c 	bl	8004368 <ld_word>
 8005950:	4603      	mov	r3, r0
 8005952:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <find_volume+0x1cc>
 800595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595c:	3330      	adds	r3, #48	@ 0x30
 800595e:	3324      	adds	r3, #36	@ 0x24
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fd19 	bl	8004398 <ld_dword>
 8005966:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800596c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005976:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597a:	789b      	ldrb	r3, [r3, #2]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d005      	beq.n	800598c <find_volume+0x1f0>
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	789b      	ldrb	r3, [r3, #2]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d001      	beq.n	800598c <find_volume+0x1f0>
 8005988:	230d      	movs	r3, #13
 800598a:	e148      	b.n	8005c1e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	789b      	ldrb	r3, [r3, #2]
 8005990:	461a      	mov	r2, r3
 8005992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005994:	fb02 f303 	mul.w	r3, r2, r3
 8005998:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800599a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a0:	461a      	mov	r2, r3
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80059a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a8:	895b      	ldrh	r3, [r3, #10]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d008      	beq.n	80059c0 <find_volume+0x224>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b0:	895b      	ldrh	r3, [r3, #10]
 80059b2:	461a      	mov	r2, r3
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	895b      	ldrh	r3, [r3, #10]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <find_volume+0x228>
 80059c0:	230d      	movs	r3, #13
 80059c2:	e12c      	b.n	8005c1e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	3330      	adds	r3, #48	@ 0x30
 80059c8:	3311      	adds	r3, #17
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fccc 	bl	8004368 <ld_word>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80059d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059da:	891b      	ldrh	r3, [r3, #8]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <find_volume+0x24e>
 80059e6:	230d      	movs	r3, #13
 80059e8:	e119      	b.n	8005c1e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	3330      	adds	r3, #48	@ 0x30
 80059ee:	3313      	adds	r3, #19
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fe fcb9 	bl	8004368 <ld_word>
 80059f6:	4603      	mov	r3, r0
 80059f8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80059fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d106      	bne.n	8005a0e <find_volume+0x272>
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	3330      	adds	r3, #48	@ 0x30
 8005a04:	3320      	adds	r3, #32
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7fe fcc6 	bl	8004398 <ld_dword>
 8005a0c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a10:	3330      	adds	r3, #48	@ 0x30
 8005a12:	330e      	adds	r3, #14
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe fca7 	bl	8004368 <ld_word>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005a1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <find_volume+0x28c>
 8005a24:	230d      	movs	r3, #13
 8005a26:	e0fa      	b.n	8005c1e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005a28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a2c:	4413      	add	r3, r2
 8005a2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a30:	8912      	ldrh	r2, [r2, #8]
 8005a32:	0912      	lsrs	r2, r2, #4
 8005a34:	b292      	uxth	r2, r2
 8005a36:	4413      	add	r3, r2
 8005a38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d204      	bcs.n	8005a4c <find_volume+0x2b0>
 8005a42:	230d      	movs	r3, #13
 8005a44:	e0eb      	b.n	8005c1e <find_volume+0x482>
 8005a46:	bf00      	nop
 8005a48:	20000250 	.word	0x20000250
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a54:	8952      	ldrh	r2, [r2, #10]
 8005a56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a5a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <find_volume+0x2ca>
 8005a62:	230d      	movs	r3, #13
 8005a64:	e0db      	b.n	8005c1e <find_volume+0x482>
		fmt = FS_FAT32;
 8005a66:	2303      	movs	r3, #3
 8005a68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d802      	bhi.n	8005a7c <find_volume+0x2e0>
 8005a76:	2302      	movs	r3, #2
 8005a78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d802      	bhi.n	8005a8c <find_volume+0x2f0>
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	1c9a      	adds	r2, r3, #2
 8005a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a92:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005a98:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005a9a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a9e:	441a      	add	r2, r3
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005aa4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa8:	441a      	add	r2, r3
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aac:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005aae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d11e      	bne.n	8005af4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab8:	3330      	adds	r3, #48	@ 0x30
 8005aba:	332a      	adds	r3, #42	@ 0x2a
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe fc53 	bl	8004368 <ld_word>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <find_volume+0x330>
 8005ac8:	230d      	movs	r3, #13
 8005aca:	e0a8      	b.n	8005c1e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ace:	891b      	ldrh	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <find_volume+0x33c>
 8005ad4:	230d      	movs	r3, #13
 8005ad6:	e0a2      	b.n	8005c1e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	3330      	adds	r3, #48	@ 0x30
 8005adc:	332c      	adds	r3, #44	@ 0x2c
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fc5a 	bl	8004398 <ld_dword>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af2:	e01f      	b.n	8005b34 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af6:	891b      	ldrh	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <find_volume+0x364>
 8005afc:	230d      	movs	r3, #13
 8005afe:	e08e      	b.n	8005c1e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	6a1a      	ldr	r2, [r3, #32]
 8005b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b06:	441a      	add	r2, r3
 8005b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d103      	bne.n	8005b1c <find_volume+0x380>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	e00a      	b.n	8005b32 <find_volume+0x396>
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	085a      	lsrs	r2, r3, #1
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005b32:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b3a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005b3e:	0a5b      	lsrs	r3, r3, #9
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d201      	bcs.n	8005b48 <find_volume+0x3ac>
 8005b44:	230d      	movs	r3, #13
 8005b46:	e06a      	b.n	8005c1e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b4e:	611a      	str	r2, [r3, #16]
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	2280      	movs	r2, #128	@ 0x80
 8005b5c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005b5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d149      	bne.n	8005bfa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	3330      	adds	r3, #48	@ 0x30
 8005b6a:	3330      	adds	r3, #48	@ 0x30
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fe fbfb 	bl	8004368 <ld_word>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d140      	bne.n	8005bfa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b80:	f7fe fea2 	bl	80048c8 <move_window>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d137      	bne.n	8005bfa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	3330      	adds	r3, #48	@ 0x30
 8005b94:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fbe5 	bl	8004368 <ld_word>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d127      	bne.n	8005bfa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bac:	3330      	adds	r3, #48	@ 0x30
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe fbf2 	bl	8004398 <ld_dword>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8005c28 <find_volume+0x48c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d11e      	bne.n	8005bfa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	3330      	adds	r3, #48	@ 0x30
 8005bc0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe fbe7 	bl	8004398 <ld_dword>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4a17      	ldr	r2, [pc, #92]	@ (8005c2c <find_volume+0x490>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d113      	bne.n	8005bfa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd4:	3330      	adds	r3, #48	@ 0x30
 8005bd6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe fbdc 	bl	8004398 <ld_dword>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be8:	3330      	adds	r3, #48	@ 0x30
 8005bea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe fbd2 	bl	8004398 <ld_dword>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bfc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005c00:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005c02:	4b0b      	ldr	r3, [pc, #44]	@ (8005c30 <find_volume+0x494>)
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	4b09      	ldr	r3, [pc, #36]	@ (8005c30 <find_volume+0x494>)
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	4b08      	ldr	r3, [pc, #32]	@ (8005c30 <find_volume+0x494>)
 8005c10:	881a      	ldrh	r2, [r3, #0]
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005c16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c18:	f7fe fdee 	bl	80047f8 <clear_lock>
#endif
	return FR_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3758      	adds	r7, #88	@ 0x58
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	41615252 	.word	0x41615252
 8005c2c:	61417272 	.word	0x61417272
 8005c30:	20000254 	.word	0x20000254

08005c34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005c3e:	2309      	movs	r3, #9
 8005c40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01c      	beq.n	8005c82 <validate+0x4e>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d018      	beq.n	8005c82 <validate+0x4e>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d013      	beq.n	8005c82 <validate+0x4e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	889a      	ldrh	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	88db      	ldrh	r3, [r3, #6]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d10c      	bne.n	8005c82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fada 	bl	8004228 <disk_status>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <validate+0x4e>
			res = FR_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <validate+0x5a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	e000      	b.n	8005c90 <validate+0x5c>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	6013      	str	r3, [r2, #0]
	return res;
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4613      	mov	r3, r2
 8005cac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005cb2:	f107 0310 	add.w	r3, r7, #16
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff fcd5 	bl	8005666 <get_ldnumber>
 8005cbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	da01      	bge.n	8005cc8 <f_mount+0x28>
 8005cc4:	230b      	movs	r3, #11
 8005cc6:	e02b      	b.n	8005d20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005cc8:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <f_mount+0x88>)
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005cd8:	69b8      	ldr	r0, [r7, #24]
 8005cda:	f7fe fd8d 	bl	80047f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	490d      	ldr	r1, [pc, #52]	@ (8005d28 <f_mount+0x88>)
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <f_mount+0x66>
 8005d00:	79fb      	ldrb	r3, [r7, #7]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <f_mount+0x6a>
 8005d06:	2300      	movs	r3, #0
 8005d08:	e00a      	b.n	8005d20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005d0a:	f107 010c 	add.w	r1, r7, #12
 8005d0e:	f107 0308 	add.w	r3, r7, #8
 8005d12:	2200      	movs	r2, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fd41 	bl	800579c <find_volume>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3720      	adds	r7, #32
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20000250 	.word	0x20000250

08005d2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b098      	sub	sp, #96	@ 0x60
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	4613      	mov	r3, r2
 8005d38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <f_open+0x18>
 8005d40:	2309      	movs	r3, #9
 8005d42:	e1a9      	b.n	8006098 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005d4c:	79fa      	ldrb	r2, [r7, #7]
 8005d4e:	f107 0110 	add.w	r1, r7, #16
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fd20 	bl	800579c <find_volume>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005d62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f040 818d 	bne.w	8006086 <f_open+0x35a>
		dj.obj.fs = fs;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	f107 0314 	add.w	r3, r7, #20
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fc03 	bl	8005584 <follow_path>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005d84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d118      	bne.n	8005dbe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da03      	bge.n	8005d9e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005d96:	2306      	movs	r3, #6
 8005d98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005d9c:	e00f      	b.n	8005dbe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	bf8c      	ite	hi
 8005da4:	2301      	movhi	r3, #1
 8005da6:	2300      	movls	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	f107 0314 	add.w	r3, r7, #20
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fbd8 	bl	8004568 <chk_lock>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	f003 031c 	and.w	r3, r3, #28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d07f      	beq.n	8005ec8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d017      	beq.n	8005e00 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d10e      	bne.n	8005df6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005dd8:	f7fe fc22 	bl	8004620 <enq_lock>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d006      	beq.n	8005df0 <f_open+0xc4>
 8005de2:	f107 0314 	add.w	r3, r7, #20
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fb06 	bl	80053f8 <dir_register>
 8005dec:	4603      	mov	r3, r0
 8005dee:	e000      	b.n	8005df2 <f_open+0xc6>
 8005df0:	2312      	movs	r3, #18
 8005df2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	f043 0308 	orr.w	r3, r3, #8
 8005dfc:	71fb      	strb	r3, [r7, #7]
 8005dfe:	e010      	b.n	8005e22 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005e00:	7ebb      	ldrb	r3, [r7, #26]
 8005e02:	f003 0311 	and.w	r3, r3, #17
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <f_open+0xe6>
					res = FR_DENIED;
 8005e0a:	2307      	movs	r3, #7
 8005e0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005e10:	e007      	b.n	8005e22 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005e12:	79fb      	ldrb	r3, [r7, #7]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <f_open+0xf6>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005e22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d168      	bne.n	8005efc <f_open+0x1d0>
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d063      	beq.n	8005efc <f_open+0x1d0>
				dw = GET_FATTIME();
 8005e34:	f7fd fcc0 	bl	80037b8 <get_fattime>
 8005e38:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3c:	330e      	adds	r3, #14
 8005e3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fae7 	bl	8004414 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e48:	3316      	adds	r3, #22
 8005e4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe fae1 	bl	8004414 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	330b      	adds	r3, #11
 8005e56:	2220      	movs	r2, #32
 8005e58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fa35 	bl	80052d0 <ld_clust>
 8005e66:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff fa4d 	bl	800530e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e76:	331c      	adds	r3, #28
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe faca 	bl	8004414 <st_dword>
					fs->wflag = 1;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2201      	movs	r2, #1
 8005e84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d037      	beq.n	8005efc <f_open+0x1d0>
						dw = fs->winsect;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	2200      	movs	r2, #0
 8005e98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fe ff60 	bl	8004d60 <remove_chain>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d126      	bne.n	8005efc <f_open+0x1d0>
							res = move_window(fs, dw);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fd08 	bl	80048c8 <move_window>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ec2:	3a01      	subs	r2, #1
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	e019      	b.n	8005efc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005ec8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d115      	bne.n	8005efc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005ed0:	7ebb      	ldrb	r3, [r7, #26]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005eda:	2304      	movs	r3, #4
 8005edc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005ee0:	e00c      	b.n	8005efc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <f_open+0x1d0>
 8005eec:	7ebb      	ldrb	r3, [r7, #26]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <f_open+0x1d0>
						res = FR_DENIED;
 8005ef6:	2307      	movs	r3, #7
 8005ef8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005efc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d126      	bne.n	8005f52 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005f04:	79fb      	ldrb	r3, [r7, #7]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	bf8c      	ite	hi
 8005f2a:	2301      	movhi	r3, #1
 8005f2c:	2300      	movls	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	f107 0314 	add.w	r3, r7, #20
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fe fb93 	bl	8004664 <inc_lock>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d102      	bne.n	8005f52 <f_open+0x226>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005f52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f040 8095 	bne.w	8006086 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff f9b4 	bl	80052d0 <ld_clust>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f70:	331c      	adds	r3, #28
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fe fa10 	bl	8004398 <ld_dword>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	88da      	ldrh	r2, [r3, #6]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	79fa      	ldrb	r2, [r7, #7]
 8005f96:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3330      	adds	r3, #48	@ 0x30
 8005fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fe fa7a 	bl	80044ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d060      	beq.n	8006086 <f_open+0x35a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d05c      	beq.n	8006086 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	895b      	ldrh	r3, [r3, #10]
 8005fd8:	025b      	lsls	r3, r3, #9
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fe8:	e016      	b.n	8006018 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fd25 	bl	8004a3e <get_fat>
 8005ff4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005ff6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d802      	bhi.n	8006002 <f_open+0x2d6>
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006002:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006008:	d102      	bne.n	8006010 <f_open+0x2e4>
 800600a:	2301      	movs	r3, #1
 800600c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006010:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	657b      	str	r3, [r7, #84]	@ 0x54
 8006018:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800601c:	2b00      	cmp	r3, #0
 800601e:	d103      	bne.n	8006028 <f_open+0x2fc>
 8006020:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006024:	429a      	cmp	r2, r3
 8006026:	d8e0      	bhi.n	8005fea <f_open+0x2be>
				}
				fp->clust = clst;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800602c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800602e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006032:	2b00      	cmp	r3, #0
 8006034:	d127      	bne.n	8006086 <f_open+0x35a>
 8006036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603c:	2b00      	cmp	r3, #0
 800603e:	d022      	beq.n	8006086 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006044:	4618      	mov	r0, r3
 8006046:	f7fe fcdb 	bl	8004a00 <clust2sect>
 800604a:	6478      	str	r0, [r7, #68]	@ 0x44
 800604c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800604e:	2b00      	cmp	r3, #0
 8006050:	d103      	bne.n	800605a <f_open+0x32e>
						res = FR_INT_ERR;
 8006052:	2302      	movs	r3, #2
 8006054:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006058:	e015      	b.n	8006086 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800605a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800605c:	0a5a      	lsrs	r2, r3, #9
 800605e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006060:	441a      	add	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	7858      	ldrb	r0, [r3, #1]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1a      	ldr	r2, [r3, #32]
 8006074:	2301      	movs	r3, #1
 8006076:	f7fe f919 	bl	80042ac <disk_read>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <f_open+0x35a>
 8006080:	2301      	movs	r3, #1
 8006082:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006086:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <f_open+0x368>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006094:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006098:	4618      	mov	r0, r3
 800609a:	3760      	adds	r7, #96	@ 0x60
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08e      	sub	sp, #56	@ 0x38
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f107 0214 	add.w	r2, r7, #20
 80060be:	4611      	mov	r1, r2
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fdb7 	bl	8005c34 <validate>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80060cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d107      	bne.n	80060e4 <f_read+0x44>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	7d5b      	ldrb	r3, [r3, #21]
 80060d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80060dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <f_read+0x4a>
 80060e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80060e8:	e115      	b.n	8006316 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	7d1b      	ldrb	r3, [r3, #20]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <f_read+0x5a>
 80060f6:	2307      	movs	r3, #7
 80060f8:	e10d      	b.n	8006316 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	429a      	cmp	r2, r3
 800610c:	f240 80fe 	bls.w	800630c <f_read+0x26c>
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006114:	e0fa      	b.n	800630c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 80c6 	bne.w	80062b0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	0a5b      	lsrs	r3, r3, #9
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	8952      	ldrh	r2, [r2, #10]
 800612e:	3a01      	subs	r2, #1
 8006130:	4013      	ands	r3, r2
 8006132:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d12f      	bne.n	800619a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d103      	bne.n	800614a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	633b      	str	r3, [r7, #48]	@ 0x30
 8006148:	e013      	b.n	8006172 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	4619      	mov	r1, r3
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7fe fefe 	bl	8004f5a <clmt_clust>
 800615e:	6338      	str	r0, [r7, #48]	@ 0x30
 8006160:	e007      	b.n	8006172 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fc67 	bl	8004a3e <get_fat>
 8006170:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	2b01      	cmp	r3, #1
 8006176:	d804      	bhi.n	8006182 <f_read+0xe2>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2202      	movs	r2, #2
 800617c:	755a      	strb	r2, [r3, #21]
 800617e:	2302      	movs	r3, #2
 8006180:	e0c9      	b.n	8006316 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006188:	d104      	bne.n	8006194 <f_read+0xf4>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	755a      	strb	r2, [r3, #21]
 8006190:	2301      	movs	r3, #1
 8006192:	e0c0      	b.n	8006316 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006198:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fe fc2c 	bl	8004a00 <clust2sect>
 80061a8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <f_read+0x11a>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2202      	movs	r2, #2
 80061b4:	755a      	strb	r2, [r3, #21]
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0ad      	b.n	8006316 <f_read+0x276>
			sect += csect;
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	4413      	add	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0a5b      	lsrs	r3, r3, #9
 80061c6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d039      	beq.n	8006242 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d2:	4413      	add	r3, r2
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	8952      	ldrh	r2, [r2, #10]
 80061d8:	4293      	cmp	r3, r2
 80061da:	d905      	bls.n	80061e8 <f_read+0x148>
					cc = fs->csize - csect;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	895b      	ldrh	r3, [r3, #10]
 80061e0:	461a      	mov	r2, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	7858      	ldrb	r0, [r3, #1]
 80061ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061f2:	f7fe f85b 	bl	80042ac <disk_read>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <f_read+0x166>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	755a      	strb	r2, [r3, #21]
 8006202:	2301      	movs	r3, #1
 8006204:	e087      	b.n	8006316 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	7d1b      	ldrb	r3, [r3, #20]
 800620a:	b25b      	sxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	da14      	bge.n	800623a <f_read+0x19a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621a:	429a      	cmp	r2, r3
 800621c:	d90d      	bls.n	800623a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1a      	ldr	r2, [r3, #32]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	025b      	lsls	r3, r3, #9
 8006228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622a:	18d0      	adds	r0, r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3330      	adds	r3, #48	@ 0x30
 8006230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006234:	4619      	mov	r1, r3
 8006236:	f7fe f919 	bl	800446c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	025b      	lsls	r3, r3, #9
 800623e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006240:	e050      	b.n	80062e4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	429a      	cmp	r2, r3
 800624a:	d02e      	beq.n	80062aa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	7d1b      	ldrb	r3, [r3, #20]
 8006250:	b25b      	sxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	da18      	bge.n	8006288 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	7858      	ldrb	r0, [r3, #1]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	2301      	movs	r3, #1
 8006266:	f7fe f841 	bl	80042ec <disk_write>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <f_read+0x1da>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2201      	movs	r2, #1
 8006274:	755a      	strb	r2, [r3, #21]
 8006276:	2301      	movs	r3, #1
 8006278:	e04d      	b.n	8006316 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	7d1b      	ldrb	r3, [r3, #20]
 800627e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006282:	b2da      	uxtb	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	7858      	ldrb	r0, [r3, #1]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006292:	2301      	movs	r3, #1
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	f7fe f809 	bl	80042ac <disk_read>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <f_read+0x20a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	755a      	strb	r2, [r3, #21]
 80062a6:	2301      	movs	r3, #1
 80062a8:	e035      	b.n	8006316 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80062bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80062be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d901      	bls.n	80062ca <f_read+0x22a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d8:	4413      	add	r3, r2
 80062da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062dc:	4619      	mov	r1, r3
 80062de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062e0:	f7fe f8c4 	bl	800446c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80062e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e8:	4413      	add	r3, r2
 80062ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f2:	441a      	add	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	619a      	str	r2, [r3, #24]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fe:	441a      	add	r2, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f47f af01 	bne.w	8006116 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3738      	adds	r7, #56	@ 0x38
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b08c      	sub	sp, #48	@ 0x30
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f107 0210 	add.w	r2, r7, #16
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7ff fc78 	bl	8005c34 <validate>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800634a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <f_write+0x44>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	7d5b      	ldrb	r3, [r3, #21]
 8006356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800635a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <f_write+0x4a>
 8006362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006366:	e14b      	b.n	8006600 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	7d1b      	ldrb	r3, [r3, #20]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <f_write+0x5a>
 8006374:	2307      	movs	r3, #7
 8006376:	e143      	b.n	8006600 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	441a      	add	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	429a      	cmp	r2, r3
 8006386:	f080 812d 	bcs.w	80065e4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	43db      	mvns	r3, r3
 8006390:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006392:	e127      	b.n	80065e4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639c:	2b00      	cmp	r3, #0
 800639e:	f040 80e3 	bne.w	8006568 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	0a5b      	lsrs	r3, r3, #9
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	8952      	ldrh	r2, [r2, #10]
 80063ac:	3a01      	subs	r2, #1
 80063ae:	4013      	ands	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d143      	bne.n	8006440 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10c      	bne.n	80063da <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d11a      	bne.n	8006402 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fd2a 	bl	8004e2a <create_chain>
 80063d6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80063d8:	e013      	b.n	8006402 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d007      	beq.n	80063f2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7fe fdb6 	bl	8004f5a <clmt_clust>
 80063ee:	62b8      	str	r0, [r7, #40]	@ 0x28
 80063f0:	e007      	b.n	8006402 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fe fd15 	bl	8004e2a <create_chain>
 8006400:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80f2 	beq.w	80065ee <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800640a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640c:	2b01      	cmp	r3, #1
 800640e:	d104      	bne.n	800641a <f_write+0xfc>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2202      	movs	r2, #2
 8006414:	755a      	strb	r2, [r3, #21]
 8006416:	2302      	movs	r3, #2
 8006418:	e0f2      	b.n	8006600 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800641a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006420:	d104      	bne.n	800642c <f_write+0x10e>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2201      	movs	r2, #1
 8006426:	755a      	strb	r2, [r3, #21]
 8006428:	2301      	movs	r3, #1
 800642a:	e0e9      	b.n	8006600 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006430:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <f_write+0x122>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800643e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	7d1b      	ldrb	r3, [r3, #20]
 8006444:	b25b      	sxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	da18      	bge.n	800647c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	7858      	ldrb	r0, [r3, #1]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	2301      	movs	r3, #1
 800645a:	f7fd ff47 	bl	80042ec <disk_write>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d004      	beq.n	800646e <f_write+0x150>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	755a      	strb	r2, [r3, #21]
 800646a:	2301      	movs	r3, #1
 800646c:	e0c8      	b.n	8006600 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	7d1b      	ldrb	r3, [r3, #20]
 8006472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006476:	b2da      	uxtb	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	4619      	mov	r1, r3
 8006484:	4610      	mov	r0, r2
 8006486:	f7fe fabb 	bl	8004a00 <clust2sect>
 800648a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d104      	bne.n	800649c <f_write+0x17e>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2202      	movs	r2, #2
 8006496:	755a      	strb	r2, [r3, #21]
 8006498:	2302      	movs	r3, #2
 800649a:	e0b1      	b.n	8006600 <f_write+0x2e2>
			sect += csect;
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4413      	add	r3, r2
 80064a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0a5b      	lsrs	r3, r3, #9
 80064a8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d03c      	beq.n	800652a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	4413      	add	r3, r2
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	8952      	ldrh	r2, [r2, #10]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d905      	bls.n	80064ca <f_write+0x1ac>
					cc = fs->csize - csect;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	895b      	ldrh	r3, [r3, #10]
 80064c2:	461a      	mov	r2, r3
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	7858      	ldrb	r0, [r3, #1]
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	69f9      	ldr	r1, [r7, #28]
 80064d4:	f7fd ff0a 	bl	80042ec <disk_write>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <f_write+0x1ca>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	755a      	strb	r2, [r3, #21]
 80064e4:	2301      	movs	r3, #1
 80064e6:	e08b      	b.n	8006600 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	6a3a      	ldr	r2, [r7, #32]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d915      	bls.n	8006522 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	025b      	lsls	r3, r3, #9
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800650e:	4619      	mov	r1, r3
 8006510:	f7fd ffac 	bl	800446c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	7d1b      	ldrb	r3, [r3, #20]
 8006518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	025b      	lsls	r3, r3, #9
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006528:	e03f      	b.n	80065aa <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	429a      	cmp	r2, r3
 8006532:	d016      	beq.n	8006562 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	699a      	ldr	r2, [r3, #24]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800653c:	429a      	cmp	r2, r3
 800653e:	d210      	bcs.n	8006562 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	7858      	ldrb	r0, [r3, #1]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800654a:	2301      	movs	r3, #1
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	f7fd fead 	bl	80042ac <disk_read>
 8006552:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006554:	2b00      	cmp	r3, #0
 8006556:	d004      	beq.n	8006562 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2201      	movs	r2, #1
 800655c:	755a      	strb	r2, [r3, #21]
 800655e:	2301      	movs	r3, #1
 8006560:	e04e      	b.n	8006600 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006574:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d901      	bls.n	8006582 <f_write+0x264>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006590:	4413      	add	r3, r2
 8006592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006594:	69f9      	ldr	r1, [r7, #28]
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd ff68 	bl	800446c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	7d1b      	ldrb	r3, [r3, #20]
 80065a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	4413      	add	r3, r2
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	441a      	add	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	619a      	str	r2, [r3, #24]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bf38      	it	cc
 80065ca:	461a      	movcc	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	60da      	str	r2, [r3, #12]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	441a      	add	r2, r3
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f47f aed4 	bne.w	8006394 <f_write+0x76>
 80065ec:	e000      	b.n	80065f0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80065ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	7d1b      	ldrb	r3, [r3, #20]
 80065f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3730      	adds	r7, #48	@ 0x30
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f107 0208 	add.w	r2, r7, #8
 8006616:	4611      	mov	r1, r2
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff fb0b 	bl	8005c34 <validate>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d168      	bne.n	80066fa <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	7d1b      	ldrb	r3, [r3, #20]
 800662c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d062      	beq.n	80066fa <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	7d1b      	ldrb	r3, [r3, #20]
 8006638:	b25b      	sxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	da15      	bge.n	800666a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	7858      	ldrb	r0, [r3, #1]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1a      	ldr	r2, [r3, #32]
 800664c:	2301      	movs	r3, #1
 800664e:	f7fd fe4d 	bl	80042ec <disk_write>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <f_sync+0x54>
 8006658:	2301      	movs	r3, #1
 800665a:	e04f      	b.n	80066fc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7d1b      	ldrb	r3, [r3, #20]
 8006660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006664:	b2da      	uxtb	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800666a:	f7fd f8a5 	bl	80037b8 <get_fattime>
 800666e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fe f925 	bl	80048c8 <move_window>
 800667e:	4603      	mov	r3, r0
 8006680:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006682:	7dfb      	ldrb	r3, [r7, #23]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d138      	bne.n	80066fa <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	330b      	adds	r3, #11
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	330b      	adds	r3, #11
 8006698:	f042 0220 	orr.w	r2, r2, #32
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	461a      	mov	r2, r3
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	f7fe fe2f 	bl	800530e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f103 021c 	add.w	r2, r3, #28
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7fd fea9 	bl	8004414 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3316      	adds	r3, #22
 80066c6:	6939      	ldr	r1, [r7, #16]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fd fea3 	bl	8004414 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3312      	adds	r3, #18
 80066d2:	2100      	movs	r1, #0
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fd fe82 	bl	80043de <st_word>
					fs->wflag = 1;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2201      	movs	r2, #1
 80066de:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe f91e 	bl	8004924 <sync_fs>
 80066e8:	4603      	mov	r3, r0
 80066ea:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	7d1b      	ldrb	r3, [r3, #20]
 80066f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff ff7b 	bl	8006608 <f_sync>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d118      	bne.n	800674e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f107 0208 	add.w	r2, r7, #8
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fa85 	bl	8005c34 <validate>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10c      	bne.n	800674e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe f821 	bl	8004780 <dec_lock>
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006742:	7bfb      	ldrb	r3, [r7, #15]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b092      	sub	sp, #72	@ 0x48
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006764:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006768:	f107 030c 	add.w	r3, r7, #12
 800676c:	2200      	movs	r2, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff f814 	bl	800579c <find_volume>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800677a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800677e:	2b00      	cmp	r3, #0
 8006780:	f040 8099 	bne.w	80068b6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006784:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800678a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678c:	691a      	ldr	r2, [r3, #16]
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	3b02      	subs	r3, #2
 8006794:	429a      	cmp	r2, r3
 8006796:	d804      	bhi.n	80067a2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	e089      	b.n	80068b6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d128      	bne.n	8006800 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80067ae:	2302      	movs	r3, #2
 80067b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80067b6:	f107 0314 	add.w	r3, r7, #20
 80067ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe f93e 	bl	8004a3e <get_fat>
 80067c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80067c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067ca:	d103      	bne.n	80067d4 <f_getfree+0x7c>
 80067cc:	2301      	movs	r3, #1
 80067ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80067d2:	e063      	b.n	800689c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80067d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d103      	bne.n	80067e2 <f_getfree+0x8a>
 80067da:	2302      	movs	r3, #2
 80067dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80067e0:	e05c      	b.n	800689c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80067e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d102      	bne.n	80067ee <f_getfree+0x96>
 80067e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ea:	3301      	adds	r3, #1
 80067ec:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80067ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067f0:	3301      	adds	r3, #1
 80067f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d3db      	bcc.n	80067b6 <f_getfree+0x5e>
 80067fe:	e04d      	b.n	800689c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006810:	2300      	movs	r3, #0
 8006812:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8006814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006816:	2b00      	cmp	r3, #0
 8006818:	d113      	bne.n	8006842 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800681a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006822:	4619      	mov	r1, r3
 8006824:	f7fe f850 	bl	80048c8 <move_window>
 8006828:	4603      	mov	r3, r0
 800682a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800682e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006832:	2b00      	cmp	r3, #0
 8006834:	d131      	bne.n	800689a <f_getfree+0x142>
							p = fs->win;
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	3330      	adds	r3, #48	@ 0x30
 800683a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800683c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006840:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b02      	cmp	r3, #2
 8006848:	d10f      	bne.n	800686a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800684a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800684c:	f7fd fd8c 	bl	8004368 <ld_word>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <f_getfree+0x104>
 8006856:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006858:	3301      	adds	r3, #1
 800685a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	3302      	adds	r3, #2
 8006860:	633b      	str	r3, [r7, #48]	@ 0x30
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006864:	3b02      	subs	r3, #2
 8006866:	637b      	str	r3, [r7, #52]	@ 0x34
 8006868:	e010      	b.n	800688c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800686a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800686c:	f7fd fd94 	bl	8004398 <ld_dword>
 8006870:	4603      	mov	r3, r0
 8006872:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <f_getfree+0x128>
 800687a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800687c:	3301      	adds	r3, #1
 800687e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	3304      	adds	r3, #4
 8006884:	633b      	str	r3, [r7, #48]	@ 0x30
 8006886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006888:	3b04      	subs	r3, #4
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800688c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800688e:	3b01      	subs	r3, #1
 8006890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1bd      	bne.n	8006814 <f_getfree+0xbc>
 8006898:	e000      	b.n	800689c <f_getfree+0x144>
							if (res != FR_OK) break;
 800689a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068a0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068a6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80068a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068aa:	791a      	ldrb	r2, [r3, #4]
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80068b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3748      	adds	r7, #72	@ 0x48
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b088      	sub	sp, #32
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
	int n = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80068d6:	e01c      	b.n	8006912 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80068d8:	f107 0310 	add.w	r3, r7, #16
 80068dc:	f107 0114 	add.w	r1, r7, #20
 80068e0:	2201      	movs	r2, #1
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7ff fbdc 	bl	80060a0 <f_read>
		if (rc != 1) break;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d117      	bne.n	800691e <f_gets+0x5c>
		c = s[0];
 80068ee:	7d3b      	ldrb	r3, [r7, #20]
 80068f0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	2b0d      	cmp	r3, #13
 80068f6:	d00b      	beq.n	8006910 <f_gets+0x4e>
		*p++ = c;
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	61ba      	str	r2, [r7, #24]
 80068fe:	7dfa      	ldrb	r2, [r7, #23]
 8006900:	701a      	strb	r2, [r3, #0]
		n++;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	2b0a      	cmp	r3, #10
 800690c:	d009      	beq.n	8006922 <f_gets+0x60>
 800690e:	e000      	b.n	8006912 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006910:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3b01      	subs	r3, #1
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	429a      	cmp	r2, r3
 800691a:	dbdd      	blt.n	80068d8 <f_gets+0x16>
 800691c:	e002      	b.n	8006924 <f_gets+0x62>
		if (rc != 1) break;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006922:	bf00      	nop
	}
	*p = 0;
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <f_gets+0x72>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	e000      	b.n	8006936 <f_gets+0x74>
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800694e:	2301      	movs	r3, #1
 8006950:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006956:	4b1f      	ldr	r3, [pc, #124]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 8006958:	7a5b      	ldrb	r3, [r3, #9]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d131      	bne.n	80069c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006960:	4b1c      	ldr	r3, [pc, #112]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 8006962:	7a5b      	ldrb	r3, [r3, #9]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	4b1a      	ldr	r3, [pc, #104]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 800696a:	2100      	movs	r1, #0
 800696c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800696e:	4b19      	ldr	r3, [pc, #100]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 8006970:	7a5b      	ldrb	r3, [r3, #9]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	4a17      	ldr	r2, [pc, #92]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800697e:	4b15      	ldr	r3, [pc, #84]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 8006980:	7a5b      	ldrb	r3, [r3, #9]
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	4b13      	ldr	r3, [pc, #76]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 8006988:	4413      	add	r3, r2
 800698a:	79fa      	ldrb	r2, [r7, #7]
 800698c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800698e:	4b11      	ldr	r3, [pc, #68]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 8006990:	7a5b      	ldrb	r3, [r3, #9]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	b2d1      	uxtb	r1, r2
 8006998:	4a0e      	ldr	r2, [pc, #56]	@ (80069d4 <FATFS_LinkDriverEx+0x94>)
 800699a:	7251      	strb	r1, [r2, #9]
 800699c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800699e:	7dbb      	ldrb	r3, [r7, #22]
 80069a0:	3330      	adds	r3, #48	@ 0x30
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	3301      	adds	r3, #1
 80069ac:	223a      	movs	r2, #58	@ 0x3a
 80069ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	3302      	adds	r3, #2
 80069b4:	222f      	movs	r2, #47	@ 0x2f
 80069b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	3303      	adds	r3, #3
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	371c      	adds	r7, #28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000278 	.word	0x20000278

080069d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80069e2:	2200      	movs	r2, #0
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ffaa 	bl	8006940 <FATFS_LinkDriverEx>
 80069ec:	4603      	mov	r3, r0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <_vsniprintf_r>:
 80069f6:	b530      	push	{r4, r5, lr}
 80069f8:	4614      	mov	r4, r2
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	b09b      	sub	sp, #108	@ 0x6c
 80069fe:	4605      	mov	r5, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	da05      	bge.n	8006a10 <_vsniprintf_r+0x1a>
 8006a04:	238b      	movs	r3, #139	@ 0x8b
 8006a06:	6003      	str	r3, [r0, #0]
 8006a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a0c:	b01b      	add	sp, #108	@ 0x6c
 8006a0e:	bd30      	pop	{r4, r5, pc}
 8006a10:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a14:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006a18:	bf14      	ite	ne
 8006a1a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006a1e:	4623      	moveq	r3, r4
 8006a20:	9302      	str	r3, [sp, #8]
 8006a22:	9305      	str	r3, [sp, #20]
 8006a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a28:	9100      	str	r1, [sp, #0]
 8006a2a:	9104      	str	r1, [sp, #16]
 8006a2c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006a30:	4669      	mov	r1, sp
 8006a32:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006a34:	f000 f9a0 	bl	8006d78 <_svfiprintf_r>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	bfbc      	itt	lt
 8006a3c:	238b      	movlt	r3, #139	@ 0x8b
 8006a3e:	602b      	strlt	r3, [r5, #0]
 8006a40:	2c00      	cmp	r4, #0
 8006a42:	d0e3      	beq.n	8006a0c <_vsniprintf_r+0x16>
 8006a44:	9b00      	ldr	r3, [sp, #0]
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e7df      	b.n	8006a0c <_vsniprintf_r+0x16>

08006a4c <vsniprintf>:
 8006a4c:	b507      	push	{r0, r1, r2, lr}
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	460a      	mov	r2, r1
 8006a54:	4601      	mov	r1, r0
 8006a56:	4803      	ldr	r0, [pc, #12]	@ (8006a64 <vsniprintf+0x18>)
 8006a58:	6800      	ldr	r0, [r0, #0]
 8006a5a:	f7ff ffcc 	bl	80069f6 <_vsniprintf_r>
 8006a5e:	b003      	add	sp, #12
 8006a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a64:	20000024 	.word	0x20000024

08006a68 <memset>:
 8006a68:	4402      	add	r2, r0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d100      	bne.n	8006a72 <memset+0xa>
 8006a70:	4770      	bx	lr
 8006a72:	f803 1b01 	strb.w	r1, [r3], #1
 8006a76:	e7f9      	b.n	8006a6c <memset+0x4>

08006a78 <__errno>:
 8006a78:	4b01      	ldr	r3, [pc, #4]	@ (8006a80 <__errno+0x8>)
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	20000024 	.word	0x20000024

08006a84 <__libc_init_array>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4d0d      	ldr	r5, [pc, #52]	@ (8006abc <__libc_init_array+0x38>)
 8006a88:	4c0d      	ldr	r4, [pc, #52]	@ (8006ac0 <__libc_init_array+0x3c>)
 8006a8a:	1b64      	subs	r4, r4, r5
 8006a8c:	10a4      	asrs	r4, r4, #2
 8006a8e:	2600      	movs	r6, #0
 8006a90:	42a6      	cmp	r6, r4
 8006a92:	d109      	bne.n	8006aa8 <__libc_init_array+0x24>
 8006a94:	4d0b      	ldr	r5, [pc, #44]	@ (8006ac4 <__libc_init_array+0x40>)
 8006a96:	4c0c      	ldr	r4, [pc, #48]	@ (8006ac8 <__libc_init_array+0x44>)
 8006a98:	f000 fc66 	bl	8007368 <_init>
 8006a9c:	1b64      	subs	r4, r4, r5
 8006a9e:	10a4      	asrs	r4, r4, #2
 8006aa0:	2600      	movs	r6, #0
 8006aa2:	42a6      	cmp	r6, r4
 8006aa4:	d105      	bne.n	8006ab2 <__libc_init_array+0x2e>
 8006aa6:	bd70      	pop	{r4, r5, r6, pc}
 8006aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aac:	4798      	blx	r3
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7ee      	b.n	8006a90 <__libc_init_array+0xc>
 8006ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab6:	4798      	blx	r3
 8006ab8:	3601      	adds	r6, #1
 8006aba:	e7f2      	b.n	8006aa2 <__libc_init_array+0x1e>
 8006abc:	08007654 	.word	0x08007654
 8006ac0:	08007654 	.word	0x08007654
 8006ac4:	08007654 	.word	0x08007654
 8006ac8:	08007658 	.word	0x08007658

08006acc <__retarget_lock_acquire_recursive>:
 8006acc:	4770      	bx	lr

08006ace <__retarget_lock_release_recursive>:
 8006ace:	4770      	bx	lr

08006ad0 <_free_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4605      	mov	r5, r0
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	d041      	beq.n	8006b5c <_free_r+0x8c>
 8006ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006adc:	1f0c      	subs	r4, r1, #4
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bfb8      	it	lt
 8006ae2:	18e4      	addlt	r4, r4, r3
 8006ae4:	f000 f8e0 	bl	8006ca8 <__malloc_lock>
 8006ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8006b60 <_free_r+0x90>)
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	b933      	cbnz	r3, 8006afc <_free_r+0x2c>
 8006aee:	6063      	str	r3, [r4, #4]
 8006af0:	6014      	str	r4, [r2, #0]
 8006af2:	4628      	mov	r0, r5
 8006af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006af8:	f000 b8dc 	b.w	8006cb4 <__malloc_unlock>
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d908      	bls.n	8006b12 <_free_r+0x42>
 8006b00:	6820      	ldr	r0, [r4, #0]
 8006b02:	1821      	adds	r1, r4, r0
 8006b04:	428b      	cmp	r3, r1
 8006b06:	bf01      	itttt	eq
 8006b08:	6819      	ldreq	r1, [r3, #0]
 8006b0a:	685b      	ldreq	r3, [r3, #4]
 8006b0c:	1809      	addeq	r1, r1, r0
 8006b0e:	6021      	streq	r1, [r4, #0]
 8006b10:	e7ed      	b.n	8006aee <_free_r+0x1e>
 8006b12:	461a      	mov	r2, r3
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	b10b      	cbz	r3, 8006b1c <_free_r+0x4c>
 8006b18:	42a3      	cmp	r3, r4
 8006b1a:	d9fa      	bls.n	8006b12 <_free_r+0x42>
 8006b1c:	6811      	ldr	r1, [r2, #0]
 8006b1e:	1850      	adds	r0, r2, r1
 8006b20:	42a0      	cmp	r0, r4
 8006b22:	d10b      	bne.n	8006b3c <_free_r+0x6c>
 8006b24:	6820      	ldr	r0, [r4, #0]
 8006b26:	4401      	add	r1, r0
 8006b28:	1850      	adds	r0, r2, r1
 8006b2a:	4283      	cmp	r3, r0
 8006b2c:	6011      	str	r1, [r2, #0]
 8006b2e:	d1e0      	bne.n	8006af2 <_free_r+0x22>
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	6053      	str	r3, [r2, #4]
 8006b36:	4408      	add	r0, r1
 8006b38:	6010      	str	r0, [r2, #0]
 8006b3a:	e7da      	b.n	8006af2 <_free_r+0x22>
 8006b3c:	d902      	bls.n	8006b44 <_free_r+0x74>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	e7d6      	b.n	8006af2 <_free_r+0x22>
 8006b44:	6820      	ldr	r0, [r4, #0]
 8006b46:	1821      	adds	r1, r4, r0
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	bf04      	itt	eq
 8006b4c:	6819      	ldreq	r1, [r3, #0]
 8006b4e:	685b      	ldreq	r3, [r3, #4]
 8006b50:	6063      	str	r3, [r4, #4]
 8006b52:	bf04      	itt	eq
 8006b54:	1809      	addeq	r1, r1, r0
 8006b56:	6021      	streq	r1, [r4, #0]
 8006b58:	6054      	str	r4, [r2, #4]
 8006b5a:	e7ca      	b.n	8006af2 <_free_r+0x22>
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	bf00      	nop
 8006b60:	200003c8 	.word	0x200003c8

08006b64 <sbrk_aligned>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4e0f      	ldr	r6, [pc, #60]	@ (8006ba4 <sbrk_aligned+0x40>)
 8006b68:	460c      	mov	r4, r1
 8006b6a:	6831      	ldr	r1, [r6, #0]
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	b911      	cbnz	r1, 8006b76 <sbrk_aligned+0x12>
 8006b70:	f000 fba6 	bl	80072c0 <_sbrk_r>
 8006b74:	6030      	str	r0, [r6, #0]
 8006b76:	4621      	mov	r1, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	f000 fba1 	bl	80072c0 <_sbrk_r>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d103      	bne.n	8006b8a <sbrk_aligned+0x26>
 8006b82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006b86:	4620      	mov	r0, r4
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	1cc4      	adds	r4, r0, #3
 8006b8c:	f024 0403 	bic.w	r4, r4, #3
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d0f8      	beq.n	8006b86 <sbrk_aligned+0x22>
 8006b94:	1a21      	subs	r1, r4, r0
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 fb92 	bl	80072c0 <_sbrk_r>
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d1f2      	bne.n	8006b86 <sbrk_aligned+0x22>
 8006ba0:	e7ef      	b.n	8006b82 <sbrk_aligned+0x1e>
 8006ba2:	bf00      	nop
 8006ba4:	200003c4 	.word	0x200003c4

08006ba8 <_malloc_r>:
 8006ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bac:	1ccd      	adds	r5, r1, #3
 8006bae:	f025 0503 	bic.w	r5, r5, #3
 8006bb2:	3508      	adds	r5, #8
 8006bb4:	2d0c      	cmp	r5, #12
 8006bb6:	bf38      	it	cc
 8006bb8:	250c      	movcc	r5, #12
 8006bba:	2d00      	cmp	r5, #0
 8006bbc:	4606      	mov	r6, r0
 8006bbe:	db01      	blt.n	8006bc4 <_malloc_r+0x1c>
 8006bc0:	42a9      	cmp	r1, r5
 8006bc2:	d904      	bls.n	8006bce <_malloc_r+0x26>
 8006bc4:	230c      	movs	r3, #12
 8006bc6:	6033      	str	r3, [r6, #0]
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ca4 <_malloc_r+0xfc>
 8006bd2:	f000 f869 	bl	8006ca8 <__malloc_lock>
 8006bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bda:	461c      	mov	r4, r3
 8006bdc:	bb44      	cbnz	r4, 8006c30 <_malloc_r+0x88>
 8006bde:	4629      	mov	r1, r5
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff ffbf 	bl	8006b64 <sbrk_aligned>
 8006be6:	1c43      	adds	r3, r0, #1
 8006be8:	4604      	mov	r4, r0
 8006bea:	d158      	bne.n	8006c9e <_malloc_r+0xf6>
 8006bec:	f8d8 4000 	ldr.w	r4, [r8]
 8006bf0:	4627      	mov	r7, r4
 8006bf2:	2f00      	cmp	r7, #0
 8006bf4:	d143      	bne.n	8006c7e <_malloc_r+0xd6>
 8006bf6:	2c00      	cmp	r4, #0
 8006bf8:	d04b      	beq.n	8006c92 <_malloc_r+0xea>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	4639      	mov	r1, r7
 8006bfe:	4630      	mov	r0, r6
 8006c00:	eb04 0903 	add.w	r9, r4, r3
 8006c04:	f000 fb5c 	bl	80072c0 <_sbrk_r>
 8006c08:	4581      	cmp	r9, r0
 8006c0a:	d142      	bne.n	8006c92 <_malloc_r+0xea>
 8006c0c:	6821      	ldr	r1, [r4, #0]
 8006c0e:	1a6d      	subs	r5, r5, r1
 8006c10:	4629      	mov	r1, r5
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ffa6 	bl	8006b64 <sbrk_aligned>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d03a      	beq.n	8006c92 <_malloc_r+0xea>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	442b      	add	r3, r5
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	f8d8 3000 	ldr.w	r3, [r8]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	bb62      	cbnz	r2, 8006c84 <_malloc_r+0xdc>
 8006c2a:	f8c8 7000 	str.w	r7, [r8]
 8006c2e:	e00f      	b.n	8006c50 <_malloc_r+0xa8>
 8006c30:	6822      	ldr	r2, [r4, #0]
 8006c32:	1b52      	subs	r2, r2, r5
 8006c34:	d420      	bmi.n	8006c78 <_malloc_r+0xd0>
 8006c36:	2a0b      	cmp	r2, #11
 8006c38:	d917      	bls.n	8006c6a <_malloc_r+0xc2>
 8006c3a:	1961      	adds	r1, r4, r5
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	6025      	str	r5, [r4, #0]
 8006c40:	bf18      	it	ne
 8006c42:	6059      	strne	r1, [r3, #4]
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	bf08      	it	eq
 8006c48:	f8c8 1000 	streq.w	r1, [r8]
 8006c4c:	5162      	str	r2, [r4, r5]
 8006c4e:	604b      	str	r3, [r1, #4]
 8006c50:	4630      	mov	r0, r6
 8006c52:	f000 f82f 	bl	8006cb4 <__malloc_unlock>
 8006c56:	f104 000b 	add.w	r0, r4, #11
 8006c5a:	1d23      	adds	r3, r4, #4
 8006c5c:	f020 0007 	bic.w	r0, r0, #7
 8006c60:	1ac2      	subs	r2, r0, r3
 8006c62:	bf1c      	itt	ne
 8006c64:	1a1b      	subne	r3, r3, r0
 8006c66:	50a3      	strne	r3, [r4, r2]
 8006c68:	e7af      	b.n	8006bca <_malloc_r+0x22>
 8006c6a:	6862      	ldr	r2, [r4, #4]
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	bf0c      	ite	eq
 8006c70:	f8c8 2000 	streq.w	r2, [r8]
 8006c74:	605a      	strne	r2, [r3, #4]
 8006c76:	e7eb      	b.n	8006c50 <_malloc_r+0xa8>
 8006c78:	4623      	mov	r3, r4
 8006c7a:	6864      	ldr	r4, [r4, #4]
 8006c7c:	e7ae      	b.n	8006bdc <_malloc_r+0x34>
 8006c7e:	463c      	mov	r4, r7
 8006c80:	687f      	ldr	r7, [r7, #4]
 8006c82:	e7b6      	b.n	8006bf2 <_malloc_r+0x4a>
 8006c84:	461a      	mov	r2, r3
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	d1fb      	bne.n	8006c84 <_malloc_r+0xdc>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	6053      	str	r3, [r2, #4]
 8006c90:	e7de      	b.n	8006c50 <_malloc_r+0xa8>
 8006c92:	230c      	movs	r3, #12
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f80c 	bl	8006cb4 <__malloc_unlock>
 8006c9c:	e794      	b.n	8006bc8 <_malloc_r+0x20>
 8006c9e:	6005      	str	r5, [r0, #0]
 8006ca0:	e7d6      	b.n	8006c50 <_malloc_r+0xa8>
 8006ca2:	bf00      	nop
 8006ca4:	200003c8 	.word	0x200003c8

08006ca8 <__malloc_lock>:
 8006ca8:	4801      	ldr	r0, [pc, #4]	@ (8006cb0 <__malloc_lock+0x8>)
 8006caa:	f7ff bf0f 	b.w	8006acc <__retarget_lock_acquire_recursive>
 8006cae:	bf00      	nop
 8006cb0:	200003c0 	.word	0x200003c0

08006cb4 <__malloc_unlock>:
 8006cb4:	4801      	ldr	r0, [pc, #4]	@ (8006cbc <__malloc_unlock+0x8>)
 8006cb6:	f7ff bf0a 	b.w	8006ace <__retarget_lock_release_recursive>
 8006cba:	bf00      	nop
 8006cbc:	200003c0 	.word	0x200003c0

08006cc0 <__ssputs_r>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	688e      	ldr	r6, [r1, #8]
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	42be      	cmp	r6, r7
 8006cca:	680b      	ldr	r3, [r1, #0]
 8006ccc:	4682      	mov	sl, r0
 8006cce:	460c      	mov	r4, r1
 8006cd0:	4690      	mov	r8, r2
 8006cd2:	d82d      	bhi.n	8006d30 <__ssputs_r+0x70>
 8006cd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006cd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006cdc:	d026      	beq.n	8006d2c <__ssputs_r+0x6c>
 8006cde:	6965      	ldr	r5, [r4, #20]
 8006ce0:	6909      	ldr	r1, [r1, #16]
 8006ce2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ce6:	eba3 0901 	sub.w	r9, r3, r1
 8006cea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cee:	1c7b      	adds	r3, r7, #1
 8006cf0:	444b      	add	r3, r9
 8006cf2:	106d      	asrs	r5, r5, #1
 8006cf4:	429d      	cmp	r5, r3
 8006cf6:	bf38      	it	cc
 8006cf8:	461d      	movcc	r5, r3
 8006cfa:	0553      	lsls	r3, r2, #21
 8006cfc:	d527      	bpl.n	8006d4e <__ssputs_r+0x8e>
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f7ff ff52 	bl	8006ba8 <_malloc_r>
 8006d04:	4606      	mov	r6, r0
 8006d06:	b360      	cbz	r0, 8006d62 <__ssputs_r+0xa2>
 8006d08:	6921      	ldr	r1, [r4, #16]
 8006d0a:	464a      	mov	r2, r9
 8006d0c:	f000 fae8 	bl	80072e0 <memcpy>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d1a:	81a3      	strh	r3, [r4, #12]
 8006d1c:	6126      	str	r6, [r4, #16]
 8006d1e:	6165      	str	r5, [r4, #20]
 8006d20:	444e      	add	r6, r9
 8006d22:	eba5 0509 	sub.w	r5, r5, r9
 8006d26:	6026      	str	r6, [r4, #0]
 8006d28:	60a5      	str	r5, [r4, #8]
 8006d2a:	463e      	mov	r6, r7
 8006d2c:	42be      	cmp	r6, r7
 8006d2e:	d900      	bls.n	8006d32 <__ssputs_r+0x72>
 8006d30:	463e      	mov	r6, r7
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	4632      	mov	r2, r6
 8006d36:	4641      	mov	r1, r8
 8006d38:	f000 faa8 	bl	800728c <memmove>
 8006d3c:	68a3      	ldr	r3, [r4, #8]
 8006d3e:	1b9b      	subs	r3, r3, r6
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	4433      	add	r3, r6
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4e:	462a      	mov	r2, r5
 8006d50:	f000 fad4 	bl	80072fc <_realloc_r>
 8006d54:	4606      	mov	r6, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1e0      	bne.n	8006d1c <__ssputs_r+0x5c>
 8006d5a:	6921      	ldr	r1, [r4, #16]
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	f7ff feb7 	bl	8006ad0 <_free_r>
 8006d62:	230c      	movs	r3, #12
 8006d64:	f8ca 3000 	str.w	r3, [sl]
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d74:	e7e9      	b.n	8006d4a <__ssputs_r+0x8a>
	...

08006d78 <_svfiprintf_r>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	4698      	mov	r8, r3
 8006d7e:	898b      	ldrh	r3, [r1, #12]
 8006d80:	061b      	lsls	r3, r3, #24
 8006d82:	b09d      	sub	sp, #116	@ 0x74
 8006d84:	4607      	mov	r7, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	4614      	mov	r4, r2
 8006d8a:	d510      	bpl.n	8006dae <_svfiprintf_r+0x36>
 8006d8c:	690b      	ldr	r3, [r1, #16]
 8006d8e:	b973      	cbnz	r3, 8006dae <_svfiprintf_r+0x36>
 8006d90:	2140      	movs	r1, #64	@ 0x40
 8006d92:	f7ff ff09 	bl	8006ba8 <_malloc_r>
 8006d96:	6028      	str	r0, [r5, #0]
 8006d98:	6128      	str	r0, [r5, #16]
 8006d9a:	b930      	cbnz	r0, 8006daa <_svfiprintf_r+0x32>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006da4:	b01d      	add	sp, #116	@ 0x74
 8006da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006daa:	2340      	movs	r3, #64	@ 0x40
 8006dac:	616b      	str	r3, [r5, #20]
 8006dae:	2300      	movs	r3, #0
 8006db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006db2:	2320      	movs	r3, #32
 8006db4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006db8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dbc:	2330      	movs	r3, #48	@ 0x30
 8006dbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f5c <_svfiprintf_r+0x1e4>
 8006dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006dc6:	f04f 0901 	mov.w	r9, #1
 8006dca:	4623      	mov	r3, r4
 8006dcc:	469a      	mov	sl, r3
 8006dce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dd2:	b10a      	cbz	r2, 8006dd8 <_svfiprintf_r+0x60>
 8006dd4:	2a25      	cmp	r2, #37	@ 0x25
 8006dd6:	d1f9      	bne.n	8006dcc <_svfiprintf_r+0x54>
 8006dd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ddc:	d00b      	beq.n	8006df6 <_svfiprintf_r+0x7e>
 8006dde:	465b      	mov	r3, fp
 8006de0:	4622      	mov	r2, r4
 8006de2:	4629      	mov	r1, r5
 8006de4:	4638      	mov	r0, r7
 8006de6:	f7ff ff6b 	bl	8006cc0 <__ssputs_r>
 8006dea:	3001      	adds	r0, #1
 8006dec:	f000 80a7 	beq.w	8006f3e <_svfiprintf_r+0x1c6>
 8006df0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df2:	445a      	add	r2, fp
 8006df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 809f 	beq.w	8006f3e <_svfiprintf_r+0x1c6>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e0a:	f10a 0a01 	add.w	sl, sl, #1
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	9307      	str	r3, [sp, #28]
 8006e12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e16:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e18:	4654      	mov	r4, sl
 8006e1a:	2205      	movs	r2, #5
 8006e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e20:	484e      	ldr	r0, [pc, #312]	@ (8006f5c <_svfiprintf_r+0x1e4>)
 8006e22:	f7f9 f9e5 	bl	80001f0 <memchr>
 8006e26:	9a04      	ldr	r2, [sp, #16]
 8006e28:	b9d8      	cbnz	r0, 8006e62 <_svfiprintf_r+0xea>
 8006e2a:	06d0      	lsls	r0, r2, #27
 8006e2c:	bf44      	itt	mi
 8006e2e:	2320      	movmi	r3, #32
 8006e30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e34:	0711      	lsls	r1, r2, #28
 8006e36:	bf44      	itt	mi
 8006e38:	232b      	movmi	r3, #43	@ 0x2b
 8006e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e44:	d015      	beq.n	8006e72 <_svfiprintf_r+0xfa>
 8006e46:	9a07      	ldr	r2, [sp, #28]
 8006e48:	4654      	mov	r4, sl
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	4621      	mov	r1, r4
 8006e52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e56:	3b30      	subs	r3, #48	@ 0x30
 8006e58:	2b09      	cmp	r3, #9
 8006e5a:	d94b      	bls.n	8006ef4 <_svfiprintf_r+0x17c>
 8006e5c:	b1b0      	cbz	r0, 8006e8c <_svfiprintf_r+0x114>
 8006e5e:	9207      	str	r2, [sp, #28]
 8006e60:	e014      	b.n	8006e8c <_svfiprintf_r+0x114>
 8006e62:	eba0 0308 	sub.w	r3, r0, r8
 8006e66:	fa09 f303 	lsl.w	r3, r9, r3
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	46a2      	mov	sl, r4
 8006e70:	e7d2      	b.n	8006e18 <_svfiprintf_r+0xa0>
 8006e72:	9b03      	ldr	r3, [sp, #12]
 8006e74:	1d19      	adds	r1, r3, #4
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	9103      	str	r1, [sp, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bfbb      	ittet	lt
 8006e7e:	425b      	neglt	r3, r3
 8006e80:	f042 0202 	orrlt.w	r2, r2, #2
 8006e84:	9307      	strge	r3, [sp, #28]
 8006e86:	9307      	strlt	r3, [sp, #28]
 8006e88:	bfb8      	it	lt
 8006e8a:	9204      	strlt	r2, [sp, #16]
 8006e8c:	7823      	ldrb	r3, [r4, #0]
 8006e8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e90:	d10a      	bne.n	8006ea8 <_svfiprintf_r+0x130>
 8006e92:	7863      	ldrb	r3, [r4, #1]
 8006e94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e96:	d132      	bne.n	8006efe <_svfiprintf_r+0x186>
 8006e98:	9b03      	ldr	r3, [sp, #12]
 8006e9a:	1d1a      	adds	r2, r3, #4
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	9203      	str	r2, [sp, #12]
 8006ea0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ea4:	3402      	adds	r4, #2
 8006ea6:	9305      	str	r3, [sp, #20]
 8006ea8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f6c <_svfiprintf_r+0x1f4>
 8006eac:	7821      	ldrb	r1, [r4, #0]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	f7f9 f99d 	bl	80001f0 <memchr>
 8006eb6:	b138      	cbz	r0, 8006ec8 <_svfiprintf_r+0x150>
 8006eb8:	9b04      	ldr	r3, [sp, #16]
 8006eba:	eba0 000a 	sub.w	r0, r0, sl
 8006ebe:	2240      	movs	r2, #64	@ 0x40
 8006ec0:	4082      	lsls	r2, r0
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	3401      	adds	r4, #1
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ecc:	4824      	ldr	r0, [pc, #144]	@ (8006f60 <_svfiprintf_r+0x1e8>)
 8006ece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ed2:	2206      	movs	r2, #6
 8006ed4:	f7f9 f98c 	bl	80001f0 <memchr>
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d036      	beq.n	8006f4a <_svfiprintf_r+0x1d2>
 8006edc:	4b21      	ldr	r3, [pc, #132]	@ (8006f64 <_svfiprintf_r+0x1ec>)
 8006ede:	bb1b      	cbnz	r3, 8006f28 <_svfiprintf_r+0x1b0>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	3307      	adds	r3, #7
 8006ee4:	f023 0307 	bic.w	r3, r3, #7
 8006ee8:	3308      	adds	r3, #8
 8006eea:	9303      	str	r3, [sp, #12]
 8006eec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eee:	4433      	add	r3, r6
 8006ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ef2:	e76a      	b.n	8006dca <_svfiprintf_r+0x52>
 8006ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef8:	460c      	mov	r4, r1
 8006efa:	2001      	movs	r0, #1
 8006efc:	e7a8      	b.n	8006e50 <_svfiprintf_r+0xd8>
 8006efe:	2300      	movs	r3, #0
 8006f00:	3401      	adds	r4, #1
 8006f02:	9305      	str	r3, [sp, #20]
 8006f04:	4619      	mov	r1, r3
 8006f06:	f04f 0c0a 	mov.w	ip, #10
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f10:	3a30      	subs	r2, #48	@ 0x30
 8006f12:	2a09      	cmp	r2, #9
 8006f14:	d903      	bls.n	8006f1e <_svfiprintf_r+0x1a6>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0c6      	beq.n	8006ea8 <_svfiprintf_r+0x130>
 8006f1a:	9105      	str	r1, [sp, #20]
 8006f1c:	e7c4      	b.n	8006ea8 <_svfiprintf_r+0x130>
 8006f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f22:	4604      	mov	r4, r0
 8006f24:	2301      	movs	r3, #1
 8006f26:	e7f0      	b.n	8006f0a <_svfiprintf_r+0x192>
 8006f28:	ab03      	add	r3, sp, #12
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	462a      	mov	r2, r5
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f68 <_svfiprintf_r+0x1f0>)
 8006f30:	a904      	add	r1, sp, #16
 8006f32:	4638      	mov	r0, r7
 8006f34:	f3af 8000 	nop.w
 8006f38:	1c42      	adds	r2, r0, #1
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	d1d6      	bne.n	8006eec <_svfiprintf_r+0x174>
 8006f3e:	89ab      	ldrh	r3, [r5, #12]
 8006f40:	065b      	lsls	r3, r3, #25
 8006f42:	f53f af2d 	bmi.w	8006da0 <_svfiprintf_r+0x28>
 8006f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f48:	e72c      	b.n	8006da4 <_svfiprintf_r+0x2c>
 8006f4a:	ab03      	add	r3, sp, #12
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4b05      	ldr	r3, [pc, #20]	@ (8006f68 <_svfiprintf_r+0x1f0>)
 8006f52:	a904      	add	r1, sp, #16
 8006f54:	4638      	mov	r0, r7
 8006f56:	f000 f879 	bl	800704c <_printf_i>
 8006f5a:	e7ed      	b.n	8006f38 <_svfiprintf_r+0x1c0>
 8006f5c:	08007618 	.word	0x08007618
 8006f60:	08007622 	.word	0x08007622
 8006f64:	00000000 	.word	0x00000000
 8006f68:	08006cc1 	.word	0x08006cc1
 8006f6c:	0800761e 	.word	0x0800761e

08006f70 <_printf_common>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	4616      	mov	r6, r2
 8006f76:	4698      	mov	r8, r3
 8006f78:	688a      	ldr	r2, [r1, #8]
 8006f7a:	690b      	ldr	r3, [r1, #16]
 8006f7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	bfb8      	it	lt
 8006f84:	4613      	movlt	r3, r2
 8006f86:	6033      	str	r3, [r6, #0]
 8006f88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	b10a      	cbz	r2, 8006f96 <_printf_common+0x26>
 8006f92:	3301      	adds	r3, #1
 8006f94:	6033      	str	r3, [r6, #0]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	0699      	lsls	r1, r3, #26
 8006f9a:	bf42      	ittt	mi
 8006f9c:	6833      	ldrmi	r3, [r6, #0]
 8006f9e:	3302      	addmi	r3, #2
 8006fa0:	6033      	strmi	r3, [r6, #0]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	f015 0506 	ands.w	r5, r5, #6
 8006fa8:	d106      	bne.n	8006fb8 <_printf_common+0x48>
 8006faa:	f104 0a19 	add.w	sl, r4, #25
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	6832      	ldr	r2, [r6, #0]
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dc26      	bgt.n	8007006 <_printf_common+0x96>
 8006fb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	3b00      	subs	r3, #0
 8006fc0:	bf18      	it	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	0692      	lsls	r2, r2, #26
 8006fc6:	d42b      	bmi.n	8007020 <_printf_common+0xb0>
 8006fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fcc:	4641      	mov	r1, r8
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c8      	blx	r9
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d01e      	beq.n	8007014 <_printf_common+0xa4>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	6922      	ldr	r2, [r4, #16]
 8006fda:	f003 0306 	and.w	r3, r3, #6
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	bf02      	ittt	eq
 8006fe2:	68e5      	ldreq	r5, [r4, #12]
 8006fe4:	6833      	ldreq	r3, [r6, #0]
 8006fe6:	1aed      	subeq	r5, r5, r3
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	bf0c      	ite	eq
 8006fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff0:	2500      	movne	r5, #0
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	bfc4      	itt	gt
 8006ff6:	1a9b      	subgt	r3, r3, r2
 8006ff8:	18ed      	addgt	r5, r5, r3
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	341a      	adds	r4, #26
 8006ffe:	42b5      	cmp	r5, r6
 8007000:	d11a      	bne.n	8007038 <_printf_common+0xc8>
 8007002:	2000      	movs	r0, #0
 8007004:	e008      	b.n	8007018 <_printf_common+0xa8>
 8007006:	2301      	movs	r3, #1
 8007008:	4652      	mov	r2, sl
 800700a:	4641      	mov	r1, r8
 800700c:	4638      	mov	r0, r7
 800700e:	47c8      	blx	r9
 8007010:	3001      	adds	r0, #1
 8007012:	d103      	bne.n	800701c <_printf_common+0xac>
 8007014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701c:	3501      	adds	r5, #1
 800701e:	e7c6      	b.n	8006fae <_printf_common+0x3e>
 8007020:	18e1      	adds	r1, r4, r3
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	2030      	movs	r0, #48	@ 0x30
 8007026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800702a:	4422      	add	r2, r4
 800702c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007034:	3302      	adds	r3, #2
 8007036:	e7c7      	b.n	8006fc8 <_printf_common+0x58>
 8007038:	2301      	movs	r3, #1
 800703a:	4622      	mov	r2, r4
 800703c:	4641      	mov	r1, r8
 800703e:	4638      	mov	r0, r7
 8007040:	47c8      	blx	r9
 8007042:	3001      	adds	r0, #1
 8007044:	d0e6      	beq.n	8007014 <_printf_common+0xa4>
 8007046:	3601      	adds	r6, #1
 8007048:	e7d9      	b.n	8006ffe <_printf_common+0x8e>
	...

0800704c <_printf_i>:
 800704c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	7e0f      	ldrb	r7, [r1, #24]
 8007052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007054:	2f78      	cmp	r7, #120	@ 0x78
 8007056:	4691      	mov	r9, r2
 8007058:	4680      	mov	r8, r0
 800705a:	460c      	mov	r4, r1
 800705c:	469a      	mov	sl, r3
 800705e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007062:	d807      	bhi.n	8007074 <_printf_i+0x28>
 8007064:	2f62      	cmp	r7, #98	@ 0x62
 8007066:	d80a      	bhi.n	800707e <_printf_i+0x32>
 8007068:	2f00      	cmp	r7, #0
 800706a:	f000 80d2 	beq.w	8007212 <_printf_i+0x1c6>
 800706e:	2f58      	cmp	r7, #88	@ 0x58
 8007070:	f000 80b9 	beq.w	80071e6 <_printf_i+0x19a>
 8007074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800707c:	e03a      	b.n	80070f4 <_printf_i+0xa8>
 800707e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007082:	2b15      	cmp	r3, #21
 8007084:	d8f6      	bhi.n	8007074 <_printf_i+0x28>
 8007086:	a101      	add	r1, pc, #4	@ (adr r1, 800708c <_printf_i+0x40>)
 8007088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070f9 	.word	0x080070f9
 8007094:	08007075 	.word	0x08007075
 8007098:	08007075 	.word	0x08007075
 800709c:	08007075 	.word	0x08007075
 80070a0:	08007075 	.word	0x08007075
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007075 	.word	0x08007075
 80070ac:	08007075 	.word	0x08007075
 80070b0:	08007075 	.word	0x08007075
 80070b4:	08007075 	.word	0x08007075
 80070b8:	080071f9 	.word	0x080071f9
 80070bc:	08007123 	.word	0x08007123
 80070c0:	080071b3 	.word	0x080071b3
 80070c4:	08007075 	.word	0x08007075
 80070c8:	08007075 	.word	0x08007075
 80070cc:	0800721b 	.word	0x0800721b
 80070d0:	08007075 	.word	0x08007075
 80070d4:	08007123 	.word	0x08007123
 80070d8:	08007075 	.word	0x08007075
 80070dc:	08007075 	.word	0x08007075
 80070e0:	080071bb 	.word	0x080071bb
 80070e4:	6833      	ldr	r3, [r6, #0]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6032      	str	r2, [r6, #0]
 80070ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070f4:	2301      	movs	r3, #1
 80070f6:	e09d      	b.n	8007234 <_printf_i+0x1e8>
 80070f8:	6833      	ldr	r3, [r6, #0]
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	1d19      	adds	r1, r3, #4
 80070fe:	6031      	str	r1, [r6, #0]
 8007100:	0606      	lsls	r6, r0, #24
 8007102:	d501      	bpl.n	8007108 <_printf_i+0xbc>
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	e003      	b.n	8007110 <_printf_i+0xc4>
 8007108:	0645      	lsls	r5, r0, #25
 800710a:	d5fb      	bpl.n	8007104 <_printf_i+0xb8>
 800710c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007110:	2d00      	cmp	r5, #0
 8007112:	da03      	bge.n	800711c <_printf_i+0xd0>
 8007114:	232d      	movs	r3, #45	@ 0x2d
 8007116:	426d      	negs	r5, r5
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711c:	4859      	ldr	r0, [pc, #356]	@ (8007284 <_printf_i+0x238>)
 800711e:	230a      	movs	r3, #10
 8007120:	e011      	b.n	8007146 <_printf_i+0xfa>
 8007122:	6821      	ldr	r1, [r4, #0]
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	0608      	lsls	r0, r1, #24
 8007128:	f853 5b04 	ldr.w	r5, [r3], #4
 800712c:	d402      	bmi.n	8007134 <_printf_i+0xe8>
 800712e:	0649      	lsls	r1, r1, #25
 8007130:	bf48      	it	mi
 8007132:	b2ad      	uxthmi	r5, r5
 8007134:	2f6f      	cmp	r7, #111	@ 0x6f
 8007136:	4853      	ldr	r0, [pc, #332]	@ (8007284 <_printf_i+0x238>)
 8007138:	6033      	str	r3, [r6, #0]
 800713a:	bf14      	ite	ne
 800713c:	230a      	movne	r3, #10
 800713e:	2308      	moveq	r3, #8
 8007140:	2100      	movs	r1, #0
 8007142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007146:	6866      	ldr	r6, [r4, #4]
 8007148:	60a6      	str	r6, [r4, #8]
 800714a:	2e00      	cmp	r6, #0
 800714c:	bfa2      	ittt	ge
 800714e:	6821      	ldrge	r1, [r4, #0]
 8007150:	f021 0104 	bicge.w	r1, r1, #4
 8007154:	6021      	strge	r1, [r4, #0]
 8007156:	b90d      	cbnz	r5, 800715c <_printf_i+0x110>
 8007158:	2e00      	cmp	r6, #0
 800715a:	d04b      	beq.n	80071f4 <_printf_i+0x1a8>
 800715c:	4616      	mov	r6, r2
 800715e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007162:	fb03 5711 	mls	r7, r3, r1, r5
 8007166:	5dc7      	ldrb	r7, [r0, r7]
 8007168:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800716c:	462f      	mov	r7, r5
 800716e:	42bb      	cmp	r3, r7
 8007170:	460d      	mov	r5, r1
 8007172:	d9f4      	bls.n	800715e <_printf_i+0x112>
 8007174:	2b08      	cmp	r3, #8
 8007176:	d10b      	bne.n	8007190 <_printf_i+0x144>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	07df      	lsls	r7, r3, #31
 800717c:	d508      	bpl.n	8007190 <_printf_i+0x144>
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	6861      	ldr	r1, [r4, #4]
 8007182:	4299      	cmp	r1, r3
 8007184:	bfde      	ittt	le
 8007186:	2330      	movle	r3, #48	@ 0x30
 8007188:	f806 3c01 	strble.w	r3, [r6, #-1]
 800718c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007190:	1b92      	subs	r2, r2, r6
 8007192:	6122      	str	r2, [r4, #16]
 8007194:	f8cd a000 	str.w	sl, [sp]
 8007198:	464b      	mov	r3, r9
 800719a:	aa03      	add	r2, sp, #12
 800719c:	4621      	mov	r1, r4
 800719e:	4640      	mov	r0, r8
 80071a0:	f7ff fee6 	bl	8006f70 <_printf_common>
 80071a4:	3001      	adds	r0, #1
 80071a6:	d14a      	bne.n	800723e <_printf_i+0x1f2>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071ac:	b004      	add	sp, #16
 80071ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b2:	6823      	ldr	r3, [r4, #0]
 80071b4:	f043 0320 	orr.w	r3, r3, #32
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	4833      	ldr	r0, [pc, #204]	@ (8007288 <_printf_i+0x23c>)
 80071bc:	2778      	movs	r7, #120	@ 0x78
 80071be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	6831      	ldr	r1, [r6, #0]
 80071c6:	061f      	lsls	r7, r3, #24
 80071c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80071cc:	d402      	bmi.n	80071d4 <_printf_i+0x188>
 80071ce:	065f      	lsls	r7, r3, #25
 80071d0:	bf48      	it	mi
 80071d2:	b2ad      	uxthmi	r5, r5
 80071d4:	6031      	str	r1, [r6, #0]
 80071d6:	07d9      	lsls	r1, r3, #31
 80071d8:	bf44      	itt	mi
 80071da:	f043 0320 	orrmi.w	r3, r3, #32
 80071de:	6023      	strmi	r3, [r4, #0]
 80071e0:	b11d      	cbz	r5, 80071ea <_printf_i+0x19e>
 80071e2:	2310      	movs	r3, #16
 80071e4:	e7ac      	b.n	8007140 <_printf_i+0xf4>
 80071e6:	4827      	ldr	r0, [pc, #156]	@ (8007284 <_printf_i+0x238>)
 80071e8:	e7e9      	b.n	80071be <_printf_i+0x172>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	f023 0320 	bic.w	r3, r3, #32
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	e7f6      	b.n	80071e2 <_printf_i+0x196>
 80071f4:	4616      	mov	r6, r2
 80071f6:	e7bd      	b.n	8007174 <_printf_i+0x128>
 80071f8:	6833      	ldr	r3, [r6, #0]
 80071fa:	6825      	ldr	r5, [r4, #0]
 80071fc:	6961      	ldr	r1, [r4, #20]
 80071fe:	1d18      	adds	r0, r3, #4
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	062e      	lsls	r6, r5, #24
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	d501      	bpl.n	800720c <_printf_i+0x1c0>
 8007208:	6019      	str	r1, [r3, #0]
 800720a:	e002      	b.n	8007212 <_printf_i+0x1c6>
 800720c:	0668      	lsls	r0, r5, #25
 800720e:	d5fb      	bpl.n	8007208 <_printf_i+0x1bc>
 8007210:	8019      	strh	r1, [r3, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	4616      	mov	r6, r2
 8007218:	e7bc      	b.n	8007194 <_printf_i+0x148>
 800721a:	6833      	ldr	r3, [r6, #0]
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	6032      	str	r2, [r6, #0]
 8007220:	681e      	ldr	r6, [r3, #0]
 8007222:	6862      	ldr	r2, [r4, #4]
 8007224:	2100      	movs	r1, #0
 8007226:	4630      	mov	r0, r6
 8007228:	f7f8 ffe2 	bl	80001f0 <memchr>
 800722c:	b108      	cbz	r0, 8007232 <_printf_i+0x1e6>
 800722e:	1b80      	subs	r0, r0, r6
 8007230:	6060      	str	r0, [r4, #4]
 8007232:	6863      	ldr	r3, [r4, #4]
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	2300      	movs	r3, #0
 8007238:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800723c:	e7aa      	b.n	8007194 <_printf_i+0x148>
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d0ad      	beq.n	80071a8 <_printf_i+0x15c>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	079b      	lsls	r3, r3, #30
 8007250:	d413      	bmi.n	800727a <_printf_i+0x22e>
 8007252:	68e0      	ldr	r0, [r4, #12]
 8007254:	9b03      	ldr	r3, [sp, #12]
 8007256:	4298      	cmp	r0, r3
 8007258:	bfb8      	it	lt
 800725a:	4618      	movlt	r0, r3
 800725c:	e7a6      	b.n	80071ac <_printf_i+0x160>
 800725e:	2301      	movs	r3, #1
 8007260:	4632      	mov	r2, r6
 8007262:	4649      	mov	r1, r9
 8007264:	4640      	mov	r0, r8
 8007266:	47d0      	blx	sl
 8007268:	3001      	adds	r0, #1
 800726a:	d09d      	beq.n	80071a8 <_printf_i+0x15c>
 800726c:	3501      	adds	r5, #1
 800726e:	68e3      	ldr	r3, [r4, #12]
 8007270:	9903      	ldr	r1, [sp, #12]
 8007272:	1a5b      	subs	r3, r3, r1
 8007274:	42ab      	cmp	r3, r5
 8007276:	dcf2      	bgt.n	800725e <_printf_i+0x212>
 8007278:	e7eb      	b.n	8007252 <_printf_i+0x206>
 800727a:	2500      	movs	r5, #0
 800727c:	f104 0619 	add.w	r6, r4, #25
 8007280:	e7f5      	b.n	800726e <_printf_i+0x222>
 8007282:	bf00      	nop
 8007284:	08007629 	.word	0x08007629
 8007288:	0800763a 	.word	0x0800763a

0800728c <memmove>:
 800728c:	4288      	cmp	r0, r1
 800728e:	b510      	push	{r4, lr}
 8007290:	eb01 0402 	add.w	r4, r1, r2
 8007294:	d902      	bls.n	800729c <memmove+0x10>
 8007296:	4284      	cmp	r4, r0
 8007298:	4623      	mov	r3, r4
 800729a:	d807      	bhi.n	80072ac <memmove+0x20>
 800729c:	1e43      	subs	r3, r0, #1
 800729e:	42a1      	cmp	r1, r4
 80072a0:	d008      	beq.n	80072b4 <memmove+0x28>
 80072a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072aa:	e7f8      	b.n	800729e <memmove+0x12>
 80072ac:	4402      	add	r2, r0
 80072ae:	4601      	mov	r1, r0
 80072b0:	428a      	cmp	r2, r1
 80072b2:	d100      	bne.n	80072b6 <memmove+0x2a>
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072be:	e7f7      	b.n	80072b0 <memmove+0x24>

080072c0 <_sbrk_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d06      	ldr	r5, [pc, #24]	@ (80072dc <_sbrk_r+0x1c>)
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7f9 fd00 	bl	8000cd0 <_sbrk>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_sbrk_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_sbrk_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	200003bc 	.word	0x200003bc

080072e0 <memcpy>:
 80072e0:	440a      	add	r2, r1
 80072e2:	4291      	cmp	r1, r2
 80072e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80072e8:	d100      	bne.n	80072ec <memcpy+0xc>
 80072ea:	4770      	bx	lr
 80072ec:	b510      	push	{r4, lr}
 80072ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072f6:	4291      	cmp	r1, r2
 80072f8:	d1f9      	bne.n	80072ee <memcpy+0xe>
 80072fa:	bd10      	pop	{r4, pc}

080072fc <_realloc_r>:
 80072fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007300:	4680      	mov	r8, r0
 8007302:	4615      	mov	r5, r2
 8007304:	460c      	mov	r4, r1
 8007306:	b921      	cbnz	r1, 8007312 <_realloc_r+0x16>
 8007308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800730c:	4611      	mov	r1, r2
 800730e:	f7ff bc4b 	b.w	8006ba8 <_malloc_r>
 8007312:	b92a      	cbnz	r2, 8007320 <_realloc_r+0x24>
 8007314:	f7ff fbdc 	bl	8006ad0 <_free_r>
 8007318:	2400      	movs	r4, #0
 800731a:	4620      	mov	r0, r4
 800731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007320:	f000 f81a 	bl	8007358 <_malloc_usable_size_r>
 8007324:	4285      	cmp	r5, r0
 8007326:	4606      	mov	r6, r0
 8007328:	d802      	bhi.n	8007330 <_realloc_r+0x34>
 800732a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800732e:	d8f4      	bhi.n	800731a <_realloc_r+0x1e>
 8007330:	4629      	mov	r1, r5
 8007332:	4640      	mov	r0, r8
 8007334:	f7ff fc38 	bl	8006ba8 <_malloc_r>
 8007338:	4607      	mov	r7, r0
 800733a:	2800      	cmp	r0, #0
 800733c:	d0ec      	beq.n	8007318 <_realloc_r+0x1c>
 800733e:	42b5      	cmp	r5, r6
 8007340:	462a      	mov	r2, r5
 8007342:	4621      	mov	r1, r4
 8007344:	bf28      	it	cs
 8007346:	4632      	movcs	r2, r6
 8007348:	f7ff ffca 	bl	80072e0 <memcpy>
 800734c:	4621      	mov	r1, r4
 800734e:	4640      	mov	r0, r8
 8007350:	f7ff fbbe 	bl	8006ad0 <_free_r>
 8007354:	463c      	mov	r4, r7
 8007356:	e7e0      	b.n	800731a <_realloc_r+0x1e>

08007358 <_malloc_usable_size_r>:
 8007358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800735c:	1f18      	subs	r0, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	bfbc      	itt	lt
 8007362:	580b      	ldrlt	r3, [r1, r0]
 8007364:	18c0      	addlt	r0, r0, r3
 8007366:	4770      	bx	lr

08007368 <_init>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	bf00      	nop
 800736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736e:	bc08      	pop	{r3}
 8007370:	469e      	mov	lr, r3
 8007372:	4770      	bx	lr

08007374 <_fini>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr
