ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB142:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "fatfs.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include <stdio.h>
  27:Core/Src/main.c **** #include <string.h>
  28:Core/Src/main.c **** #include <stdarg.h> //for va_list var arg functions
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** UART_HandleTypeDef huart2;
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PV */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  55:Core/Src/main.c **** void SystemClock_Config(void);
  56:Core/Src/main.c **** static void MX_GPIO_Init(void);
  57:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  58:Core/Src/main.c **** static void MX_SPI2_Init(void);
  59:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  60:Core/Src/main.c **** void myprintf(const char *fmt, ...);
  61:Core/Src/main.c **** /* USER CODE END PFP */
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  64:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  65:Core/Src/main.c **** void myprintf(const char *fmt, ...) {
  66:Core/Src/main.c ****   static char buffer[256];
  67:Core/Src/main.c ****   va_list args;
  68:Core/Src/main.c ****   va_start(args, fmt);
  69:Core/Src/main.c ****   vsnprintf(buffer, sizeof(buffer), fmt, args);
  70:Core/Src/main.c ****   va_end(args);
  71:Core/Src/main.c **** 
  72:Core/Src/main.c ****   int len = strlen(buffer);
  73:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** }
  76:Core/Src/main.c **** /* USER CODE END 0 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /**
  79:Core/Src/main.c ****   * @brief  The application entry point.
  80:Core/Src/main.c ****   * @retval int
  81:Core/Src/main.c ****   */
  82:Core/Src/main.c **** int main(void)
  83:Core/Src/main.c **** {
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END 1 */
  88:Core/Src/main.c **** 
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 3


  89:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  92:Core/Src/main.c ****   HAL_Init();
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c ****   /* USER CODE END Init */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Configure the system clock */
  99:Core/Src/main.c ****   SystemClock_Config();
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE END SysInit */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* Initialize all configured peripherals */
 106:Core/Src/main.c ****   MX_GPIO_Init();
 107:Core/Src/main.c ****   MX_USART2_UART_Init();
 108:Core/Src/main.c ****   MX_FATFS_Init();
 109:Core/Src/main.c ****   MX_SPI2_Init();
 110:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 111:Core/Src/main.c ****     // HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 112:Core/Src/main.c ****     myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****     HAL_Delay(1000); //a short delay is important to let the SD card settle
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****     //some variables for FatFs
 117:Core/Src/main.c ****     FATFS FatFs; 	//Fatfs handle
 118:Core/Src/main.c ****     FIL fil; 		//File handle
 119:Core/Src/main.c ****     FRESULT fres; //Result after operations
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****     //Open the file system
 122:Core/Src/main.c ****     fres = f_mount(&FatFs, "", 1); //1=mount now
 123:Core/Src/main.c ****     if (fres != FR_OK) {
 124:Core/Src/main.c ****   	myprintf("f_mount error (%i)\r\n", fres);
 125:Core/Src/main.c ****   	while(1);
 126:Core/Src/main.c ****     }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****     //Let's get some statistics from the SD card
 129:Core/Src/main.c ****     DWORD free_clusters, free_sectors, total_sectors;
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****     FATFS* getFreeFs;
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****     fres = f_getfree("", &free_clusters, &getFreeFs);
 134:Core/Src/main.c ****     if (fres != FR_OK) {
 135:Core/Src/main.c ****   	myprintf("f_getfree error (%i)\r\n", fres);
 136:Core/Src/main.c ****   	while(1);
 137:Core/Src/main.c ****     }
 138:Core/Src/main.c **** 
 139:Core/Src/main.c ****     //Formula comes from ChaN's documentation
 140:Core/Src/main.c ****     total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 141:Core/Src/main.c ****     free_sectors = free_clusters * getFreeFs->csize;
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****     myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_se
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****     //Now let's try to open file "test.txt"
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 4


 146:Core/Src/main.c ****     fres = f_open(&fil, "test.txt", FA_READ);
 147:Core/Src/main.c ****     if (fres != FR_OK) {
 148:Core/Src/main.c ****   	myprintf("f_open error (%i)\r\n", fres);
 149:Core/Src/main.c ****   	while(1);
 150:Core/Src/main.c ****     }
 151:Core/Src/main.c ****     myprintf("I was able to open 'test.txt' for reading!\r\n");
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****     //Read 30 bytes from "test.txt" on the SD card
 154:Core/Src/main.c ****     BYTE readBuf[30];
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****     //We can either use f_read OR f_gets to get data out of files
 157:Core/Src/main.c ****     //f_gets is a wrapper on f_read that does some string formatting for us
 158:Core/Src/main.c ****     TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 159:Core/Src/main.c ****     if(rres != 0) {
 160:Core/Src/main.c ****   	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 161:Core/Src/main.c ****     } else {
 162:Core/Src/main.c ****   	myprintf("f_gets error (%i)\r\n", fres);
 163:Core/Src/main.c ****     }
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****     //Be a tidy kiwi - don't forget to close your file!
 166:Core/Src/main.c ****     f_close(&fil);
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****     //Now let's try and write a file "write.txt"
 169:Core/Src/main.c ****     fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 170:Core/Src/main.c ****     if(fres == FR_OK) {
 171:Core/Src/main.c ****   	myprintf("I was able to open 'write.txt' for writing\r\n");
 172:Core/Src/main.c ****     } else {
 173:Core/Src/main.c ****   	myprintf("f_open error (%i)\r\n", fres);
 174:Core/Src/main.c ****     }
 175:Core/Src/main.c **** 
 176:Core/Src/main.c ****     //Copy in a string
 177:Core/Src/main.c ****     strncpy((char*)readBuf, "a new file is made!", 19);
 178:Core/Src/main.c ****     UINT bytesWrote;
 179:Core/Src/main.c ****     fres = f_write(&fil, readBuf, 19, &bytesWrote);
 180:Core/Src/main.c ****     if(fres == FR_OK) {
 181:Core/Src/main.c ****   	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 182:Core/Src/main.c ****     } else {
 183:Core/Src/main.c ****   	myprintf("f_write error (%i)\r\n", fres);
 184:Core/Src/main.c ****     }
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****     //Be a tidy kiwi - don't forget to close your file!
 187:Core/Src/main.c ****     f_close(&fil);
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****     //We're done, so de-mount the drive
 190:Core/Src/main.c ****     f_mount(NULL, "", 0);
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE END 2 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* Infinite loop */
 195:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 196:Core/Src/main.c ****     while (1)
 197:Core/Src/main.c ****     {
 198:Core/Src/main.c ****     /* USER CODE END WHILE */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 201:Core/Src/main.c ****         //Blink the LED every second
 202:Core/Src/main.c ****   	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 5


 203:Core/Src/main.c ****   	  HAL_Delay(1000);
 204:Core/Src/main.c ****     }
 205:Core/Src/main.c ****   /* USER CODE END 3 */
 206:Core/Src/main.c **** }
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** /**
 209:Core/Src/main.c ****   * @brief System Clock Configuration
 210:Core/Src/main.c ****   * @retval None
 211:Core/Src/main.c ****   */
 212:Core/Src/main.c **** void SystemClock_Config(void)
 213:Core/Src/main.c **** {
 214:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 215:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 218:Core/Src/main.c ****   */
 219:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 220:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 223:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 226:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 227:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 233:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 234:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 235:Core/Src/main.c ****   {
 236:Core/Src/main.c ****     Error_Handler();
 237:Core/Src/main.c ****   }
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 240:Core/Src/main.c ****   */
 241:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 242:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 243:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 244:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 246:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 249:Core/Src/main.c ****   {
 250:Core/Src/main.c ****     Error_Handler();
 251:Core/Src/main.c ****   }
 252:Core/Src/main.c **** }
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** /**
 255:Core/Src/main.c ****   * @brief SPI2 Initialization Function
 256:Core/Src/main.c ****   * @param None
 257:Core/Src/main.c ****   * @retval None
 258:Core/Src/main.c ****   */
 259:Core/Src/main.c **** static void MX_SPI2_Init(void)
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 6


 260:Core/Src/main.c **** {
 261:Core/Src/main.c **** 
 262:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
 265:Core/Src/main.c **** 
 266:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
 269:Core/Src/main.c ****   /* SPI2 parameter configuration*/
 270:Core/Src/main.c ****   hspi2.Instance = SPI2;
 271:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 272:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 273:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 274:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 275:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 276:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 277:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 278:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 279:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 280:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 281:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 282:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 283:Core/Src/main.c ****   {
 284:Core/Src/main.c ****     Error_Handler();
 285:Core/Src/main.c ****   }
 286:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
 289:Core/Src/main.c **** 
 290:Core/Src/main.c **** }
 291:Core/Src/main.c **** 
 292:Core/Src/main.c **** /**
 293:Core/Src/main.c ****   * @brief USART2 Initialization Function
 294:Core/Src/main.c ****   * @param None
 295:Core/Src/main.c ****   * @retval None
 296:Core/Src/main.c ****   */
 297:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 298:Core/Src/main.c **** {
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 307:Core/Src/main.c ****   huart2.Instance = USART2;
 308:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 309:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 310:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 311:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 312:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 313:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 314:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 315:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 316:Core/Src/main.c ****   {
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 7


 317:Core/Src/main.c ****     Error_Handler();
 318:Core/Src/main.c ****   }
 319:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c **** }
 324:Core/Src/main.c **** 
 325:Core/Src/main.c **** /**
 326:Core/Src/main.c ****   * @brief GPIO Initialization Function
 327:Core/Src/main.c ****   * @param None
 328:Core/Src/main.c ****   * @retval None
 329:Core/Src/main.c ****   */
 330:Core/Src/main.c **** static void MX_GPIO_Init(void)
 331:Core/Src/main.c **** {
  28              		.loc 1 331 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 8BB0     		sub	sp, sp, #44
  40              		.cfi_def_cfa_offset 64
 332:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 332 3 view .LVU1
  42              		.loc 1 332 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 333:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 334:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 337:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 337 3 is_stmt 1 view .LVU3
  50              	.LBB2:
  51              		.loc 1 337 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 337 3 view .LVU5
  54 0012 2A4B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 337 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 337 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 8


  64              	.LBE2:
  65              		.loc 1 337 3 view .LVU8
 338:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 338 3 view .LVU9
  67              	.LBB3:
  68              		.loc 1 338 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 338 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 338 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 338 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE3:
  81              		.loc 1 338 3 view .LVU14
 339:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 339 3 view .LVU15
  83              	.LBB4:
  84              		.loc 1 339 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 339 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 339 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 339 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE4:
  97              		.loc 1 339 3 view .LVU20
 340:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 340 3 view .LVU21
  99              	.LBB5:
 100              		.loc 1 340 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 340 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 340 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 340 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE5:
 113              		.loc 1 340 3 view .LVU26
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 343:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 343 3 view .LVU27
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 9


 115 0062 174F     		ldr	r7, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
 118 0068 3846     		mov	r0, r7
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 346:Core/Src/main.c ****   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 121              		.loc 1 346 3 view .LVU28
 122 006e 154D     		ldr	r5, .L3+8
 123 0070 2246     		mov	r2, r4
 124 0072 0221     		movs	r1, #2
 125 0074 2846     		mov	r0, r5
 126 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 127              	.LVL1:
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 349:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 128              		.loc 1 349 3 view .LVU29
 129              		.loc 1 349 23 is_stmt 0 view .LVU30
 130 007a 4FF40053 		mov	r3, #8192
 131 007e 0593     		str	r3, [sp, #20]
 350:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 132              		.loc 1 350 3 is_stmt 1 view .LVU31
 133              		.loc 1 350 24 is_stmt 0 view .LVU32
 134 0080 4FF40413 		mov	r3, #2162688
 135 0084 0693     		str	r3, [sp, #24]
 351:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 351 3 is_stmt 1 view .LVU33
 137              		.loc 1 351 24 is_stmt 0 view .LVU34
 138 0086 0794     		str	r4, [sp, #28]
 352:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 139              		.loc 1 352 3 is_stmt 1 view .LVU35
 140 0088 05A9     		add	r1, sp, #20
 141 008a 0F48     		ldr	r0, .L3+12
 142 008c FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL2:
 353:Core/Src/main.c **** 
 354:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 355:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 144              		.loc 1 355 3 view .LVU36
 145              		.loc 1 355 23 is_stmt 0 view .LVU37
 146 0090 2023     		movs	r3, #32
 147 0092 0593     		str	r3, [sp, #20]
 356:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 148              		.loc 1 356 3 is_stmt 1 view .LVU38
 149              		.loc 1 356 24 is_stmt 0 view .LVU39
 150 0094 0126     		movs	r6, #1
 151 0096 0696     		str	r6, [sp, #24]
 357:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 357 3 is_stmt 1 view .LVU40
 153              		.loc 1 357 24 is_stmt 0 view .LVU41
 154 0098 0794     		str	r4, [sp, #28]
 358:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 155              		.loc 1 358 3 is_stmt 1 view .LVU42
 156              		.loc 1 358 25 is_stmt 0 view .LVU43
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 10


 157 009a 0894     		str	r4, [sp, #32]
 359:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 158              		.loc 1 359 3 is_stmt 1 view .LVU44
 159 009c 05A9     		add	r1, sp, #20
 160 009e 3846     		mov	r0, r7
 161 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 162              	.LVL3:
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /*Configure GPIO pin : SD_CS_Pin */
 362:Core/Src/main.c ****   GPIO_InitStruct.Pin = SD_CS_Pin;
 163              		.loc 1 362 3 view .LVU45
 164              		.loc 1 362 23 is_stmt 0 view .LVU46
 165 00a4 0223     		movs	r3, #2
 166 00a6 0593     		str	r3, [sp, #20]
 363:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 167              		.loc 1 363 3 is_stmt 1 view .LVU47
 168              		.loc 1 363 24 is_stmt 0 view .LVU48
 169 00a8 0696     		str	r6, [sp, #24]
 364:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 170              		.loc 1 364 3 is_stmt 1 view .LVU49
 171              		.loc 1 364 24 is_stmt 0 view .LVU50
 172 00aa 0794     		str	r4, [sp, #28]
 365:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 173              		.loc 1 365 3 is_stmt 1 view .LVU51
 174              		.loc 1 365 25 is_stmt 0 view .LVU52
 175 00ac 0894     		str	r4, [sp, #32]
 366:Core/Src/main.c ****   HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 176              		.loc 1 366 3 is_stmt 1 view .LVU53
 177 00ae 05A9     		add	r1, sp, #20
 178 00b0 2846     		mov	r0, r5
 179 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL4:
 367:Core/Src/main.c **** 
 368:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 369:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 370:Core/Src/main.c **** }
 181              		.loc 1 370 1 is_stmt 0 view .LVU54
 182 00b6 0BB0     		add	sp, sp, #44
 183              		.cfi_def_cfa_offset 20
 184              		@ sp needed
 185 00b8 F0BD     		pop	{r4, r5, r6, r7, pc}
 186              	.L4:
 187 00ba 00BF     		.align	2
 188              	.L3:
 189 00bc 00380240 		.word	1073887232
 190 00c0 00000240 		.word	1073872896
 191 00c4 00040240 		.word	1073873920
 192 00c8 00080240 		.word	1073874944
 193              		.cfi_endproc
 194              	.LFE142:
 196              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 202              	MX_USART2_UART_Init:
 203              	.LFB141:
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 11


 298:Core/Src/main.c **** 
 204              		.loc 1 298 1 is_stmt 1 view -0
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 0, uses_anonymous_args = 0
 208 0000 08B5     		push	{r3, lr}
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 3, -8
 211              		.cfi_offset 14, -4
 307:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 212              		.loc 1 307 3 view .LVU56
 307:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 213              		.loc 1 307 19 is_stmt 0 view .LVU57
 214 0002 0848     		ldr	r0, .L7
 215 0004 084B     		ldr	r3, .L7+4
 216 0006 0360     		str	r3, [r0]
 308:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 217              		.loc 1 308 3 is_stmt 1 view .LVU58
 308:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 218              		.loc 1 308 24 is_stmt 0 view .LVU59
 219 0008 4FF4E133 		mov	r3, #115200
 220 000c 4360     		str	r3, [r0, #4]
 309:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 221              		.loc 1 309 3 is_stmt 1 view .LVU60
 309:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 222              		.loc 1 309 26 is_stmt 0 view .LVU61
 223 000e 0023     		movs	r3, #0
 224 0010 8360     		str	r3, [r0, #8]
 310:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 225              		.loc 1 310 3 is_stmt 1 view .LVU62
 310:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 226              		.loc 1 310 24 is_stmt 0 view .LVU63
 227 0012 C360     		str	r3, [r0, #12]
 311:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 228              		.loc 1 311 3 is_stmt 1 view .LVU64
 311:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 229              		.loc 1 311 22 is_stmt 0 view .LVU65
 230 0014 0361     		str	r3, [r0, #16]
 312:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 231              		.loc 1 312 3 is_stmt 1 view .LVU66
 312:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 232              		.loc 1 312 20 is_stmt 0 view .LVU67
 233 0016 0C22     		movs	r2, #12
 234 0018 4261     		str	r2, [r0, #20]
 313:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 235              		.loc 1 313 3 is_stmt 1 view .LVU68
 313:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 236              		.loc 1 313 25 is_stmt 0 view .LVU69
 237 001a 8361     		str	r3, [r0, #24]
 314:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 238              		.loc 1 314 3 is_stmt 1 view .LVU70
 314:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 239              		.loc 1 314 28 is_stmt 0 view .LVU71
 240 001c C361     		str	r3, [r0, #28]
 315:Core/Src/main.c ****   {
 241              		.loc 1 315 3 is_stmt 1 view .LVU72
 315:Core/Src/main.c ****   {
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 12


 242              		.loc 1 315 7 is_stmt 0 view .LVU73
 243 001e FFF7FEFF 		bl	HAL_UART_Init
 244              	.LVL5:
 317:Core/Src/main.c ****   }
 245              		.loc 1 317 5 is_stmt 1 view .LVU74
 323:Core/Src/main.c **** 
 246              		.loc 1 323 1 is_stmt 0 view .LVU75
 247 0022 08BD     		pop	{r3, pc}
 248              	.L8:
 249              		.align	2
 250              	.L7:
 251 0024 00000000 		.word	huart2
 252 0028 00440040 		.word	1073759232
 253              		.cfi_endproc
 254              	.LFE141:
 256              		.section	.text.MX_SPI2_Init,"ax",%progbits
 257              		.align	1
 258              		.syntax unified
 259              		.thumb
 260              		.thumb_func
 262              	MX_SPI2_Init:
 263              	.LFB140:
 260:Core/Src/main.c **** 
 264              		.loc 1 260 1 is_stmt 1 view -0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268 0000 08B5     		push	{r3, lr}
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 3, -8
 271              		.cfi_offset 14, -4
 270:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 272              		.loc 1 270 3 view .LVU77
 270:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 273              		.loc 1 270 18 is_stmt 0 view .LVU78
 274 0002 0C48     		ldr	r0, .L11
 275 0004 0C4B     		ldr	r3, .L11+4
 276 0006 0360     		str	r3, [r0]
 271:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 277              		.loc 1 271 3 is_stmt 1 view .LVU79
 271:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 278              		.loc 1 271 19 is_stmt 0 view .LVU80
 279 0008 4FF48273 		mov	r3, #260
 280 000c 4360     		str	r3, [r0, #4]
 272:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 281              		.loc 1 272 3 is_stmt 1 view .LVU81
 272:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 282              		.loc 1 272 24 is_stmt 0 view .LVU82
 283 000e 0023     		movs	r3, #0
 284 0010 8360     		str	r3, [r0, #8]
 273:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 285              		.loc 1 273 3 is_stmt 1 view .LVU83
 273:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 286              		.loc 1 273 23 is_stmt 0 view .LVU84
 287 0012 C360     		str	r3, [r0, #12]
 274:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 288              		.loc 1 274 3 is_stmt 1 view .LVU85
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 13


 274:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 289              		.loc 1 274 26 is_stmt 0 view .LVU86
 290 0014 0361     		str	r3, [r0, #16]
 275:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 291              		.loc 1 275 3 is_stmt 1 view .LVU87
 275:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 292              		.loc 1 275 23 is_stmt 0 view .LVU88
 293 0016 4361     		str	r3, [r0, #20]
 276:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 294              		.loc 1 276 3 is_stmt 1 view .LVU89
 276:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 295              		.loc 1 276 18 is_stmt 0 view .LVU90
 296 0018 4FF40072 		mov	r2, #512
 297 001c 8261     		str	r2, [r0, #24]
 277:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 298              		.loc 1 277 3 is_stmt 1 view .LVU91
 277:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 299              		.loc 1 277 32 is_stmt 0 view .LVU92
 300 001e 3022     		movs	r2, #48
 301 0020 C261     		str	r2, [r0, #28]
 278:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 302              		.loc 1 278 3 is_stmt 1 view .LVU93
 278:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 303              		.loc 1 278 23 is_stmt 0 view .LVU94
 304 0022 0362     		str	r3, [r0, #32]
 279:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 305              		.loc 1 279 3 is_stmt 1 view .LVU95
 279:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 306              		.loc 1 279 21 is_stmt 0 view .LVU96
 307 0024 4362     		str	r3, [r0, #36]
 280:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 308              		.loc 1 280 3 is_stmt 1 view .LVU97
 280:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 309              		.loc 1 280 29 is_stmt 0 view .LVU98
 310 0026 8362     		str	r3, [r0, #40]
 281:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 311              		.loc 1 281 3 is_stmt 1 view .LVU99
 281:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
 312              		.loc 1 281 28 is_stmt 0 view .LVU100
 313 0028 0A23     		movs	r3, #10
 314 002a C362     		str	r3, [r0, #44]
 282:Core/Src/main.c ****   {
 315              		.loc 1 282 3 is_stmt 1 view .LVU101
 282:Core/Src/main.c ****   {
 316              		.loc 1 282 7 is_stmt 0 view .LVU102
 317 002c FFF7FEFF 		bl	HAL_SPI_Init
 318              	.LVL6:
 284:Core/Src/main.c ****   }
 319              		.loc 1 284 5 is_stmt 1 view .LVU103
 290:Core/Src/main.c **** 
 320              		.loc 1 290 1 is_stmt 0 view .LVU104
 321 0030 08BD     		pop	{r3, pc}
 322              	.L12:
 323 0032 00BF     		.align	2
 324              	.L11:
 325 0034 00000000 		.word	hspi2
 326 0038 00380040 		.word	1073756160
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 14


 327              		.cfi_endproc
 328              	.LFE140:
 330              		.section	.text.myprintf,"ax",%progbits
 331              		.align	1
 332              		.global	myprintf
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 337              	myprintf:
 338              	.LVL7:
 339              	.LFB137:
  65:Core/Src/main.c ****   static char buffer[256];
 340              		.loc 1 65 37 is_stmt 1 view -0
 341              		.cfi_startproc
 342              		@ args = 4, pretend = 16, frame = 8
 343              		@ frame_needed = 0, uses_anonymous_args = 1
  65:Core/Src/main.c ****   static char buffer[256];
 344              		.loc 1 65 37 is_stmt 0 view .LVU106
 345 0000 0FB4     		push	{r0, r1, r2, r3}
 346              		.cfi_def_cfa_offset 16
 347              		.cfi_offset 0, -16
 348              		.cfi_offset 1, -12
 349              		.cfi_offset 2, -8
 350              		.cfi_offset 3, -4
 351 0002 10B5     		push	{r4, lr}
 352              		.cfi_def_cfa_offset 24
 353              		.cfi_offset 4, -24
 354              		.cfi_offset 14, -20
 355 0004 82B0     		sub	sp, sp, #8
 356              		.cfi_def_cfa_offset 32
 357 0006 04AB     		add	r3, sp, #16
 358 0008 53F8042B 		ldr	r2, [r3], #4
  66:Core/Src/main.c ****   va_list args;
 359              		.loc 1 66 3 is_stmt 1 view .LVU107
  67:Core/Src/main.c ****   va_start(args, fmt);
 360              		.loc 1 67 3 view .LVU108
  68:Core/Src/main.c ****   vsnprintf(buffer, sizeof(buffer), fmt, args);
 361              		.loc 1 68 3 view .LVU109
 362 000c 0193     		str	r3, [sp, #4]
  69:Core/Src/main.c ****   va_end(args);
 363              		.loc 1 69 3 view .LVU110
 364 000e 0A4C     		ldr	r4, .L15
 365 0010 4FF48071 		mov	r1, #256
 366 0014 2046     		mov	r0, r4
 367 0016 FFF7FEFF 		bl	vsnprintf
 368              	.LVL8:
  70:Core/Src/main.c **** 
 369              		.loc 1 70 3 view .LVU111
  72:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 370              		.loc 1 72 3 view .LVU112
  72:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 371              		.loc 1 72 13 is_stmt 0 view .LVU113
 372 001a 2046     		mov	r0, r4
 373 001c FFF7FEFF 		bl	strlen
 374              	.LVL9:
  73:Core/Src/main.c **** 
 375              		.loc 1 73 3 is_stmt 1 view .LVU114
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 15


 376 0020 4FF0FF33 		mov	r3, #-1
 377 0024 82B2     		uxth	r2, r0
 378 0026 2146     		mov	r1, r4
 379 0028 0448     		ldr	r0, .L15+4
 380              	.LVL10:
  73:Core/Src/main.c **** 
 381              		.loc 1 73 3 is_stmt 0 view .LVU115
 382 002a FFF7FEFF 		bl	HAL_UART_Transmit
 383              	.LVL11:
  75:Core/Src/main.c **** /* USER CODE END 0 */
 384              		.loc 1 75 1 view .LVU116
 385 002e 02B0     		add	sp, sp, #8
 386              		.cfi_def_cfa_offset 24
 387              		@ sp needed
 388 0030 BDE81040 		pop	{r4, lr}
 389              		.cfi_restore 14
 390              		.cfi_restore 4
 391              		.cfi_def_cfa_offset 16
 392 0034 04B0     		add	sp, sp, #16
 393              		.cfi_restore 3
 394              		.cfi_restore 2
 395              		.cfi_restore 1
 396              		.cfi_restore 0
 397              		.cfi_def_cfa_offset 0
 398 0036 7047     		bx	lr
 399              	.L16:
 400              		.align	2
 401              	.L15:
 402 0038 00000000 		.word	buffer.0
 403 003c 00000000 		.word	huart2
 404              		.cfi_endproc
 405              	.LFE137:
 407              		.section	.text.SystemClock_Config,"ax",%progbits
 408              		.align	1
 409              		.global	SystemClock_Config
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 414              	SystemClock_Config:
 415              	.LFB139:
 213:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 416              		.loc 1 213 1 is_stmt 1 view -0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 80
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420 0000 30B5     		push	{r4, r5, lr}
 421              		.cfi_def_cfa_offset 12
 422              		.cfi_offset 4, -12
 423              		.cfi_offset 5, -8
 424              		.cfi_offset 14, -4
 425 0002 95B0     		sub	sp, sp, #84
 426              		.cfi_def_cfa_offset 96
 214:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 427              		.loc 1 214 3 view .LVU118
 214:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 428              		.loc 1 214 22 is_stmt 0 view .LVU119
 429 0004 3022     		movs	r2, #48
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 16


 430 0006 0021     		movs	r1, #0
 431 0008 08A8     		add	r0, sp, #32
 432 000a FFF7FEFF 		bl	memset
 433              	.LVL12:
 215:Core/Src/main.c **** 
 434              		.loc 1 215 3 is_stmt 1 view .LVU120
 215:Core/Src/main.c **** 
 435              		.loc 1 215 22 is_stmt 0 view .LVU121
 436 000e 0024     		movs	r4, #0
 437 0010 0394     		str	r4, [sp, #12]
 438 0012 0494     		str	r4, [sp, #16]
 439 0014 0594     		str	r4, [sp, #20]
 440 0016 0694     		str	r4, [sp, #24]
 441 0018 0794     		str	r4, [sp, #28]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 442              		.loc 1 219 3 is_stmt 1 view .LVU122
 443              	.LBB6:
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 444              		.loc 1 219 3 view .LVU123
 445 001a 0194     		str	r4, [sp, #4]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 446              		.loc 1 219 3 view .LVU124
 447 001c 1B4B     		ldr	r3, .L19
 448 001e 1A6C     		ldr	r2, [r3, #64]
 449 0020 42F08052 		orr	r2, r2, #268435456
 450 0024 1A64     		str	r2, [r3, #64]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 451              		.loc 1 219 3 view .LVU125
 452 0026 1B6C     		ldr	r3, [r3, #64]
 453 0028 03F08053 		and	r3, r3, #268435456
 454 002c 0193     		str	r3, [sp, #4]
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 455              		.loc 1 219 3 view .LVU126
 456 002e 019B     		ldr	r3, [sp, #4]
 457              	.LBE6:
 219:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 458              		.loc 1 219 3 view .LVU127
 220:Core/Src/main.c **** 
 459              		.loc 1 220 3 view .LVU128
 460              	.LBB7:
 220:Core/Src/main.c **** 
 461              		.loc 1 220 3 view .LVU129
 462 0030 0294     		str	r4, [sp, #8]
 220:Core/Src/main.c **** 
 463              		.loc 1 220 3 view .LVU130
 464 0032 174A     		ldr	r2, .L19+4
 465 0034 1368     		ldr	r3, [r2]
 466 0036 23F44043 		bic	r3, r3, #49152
 467 003a 43F40043 		orr	r3, r3, #32768
 468 003e 1360     		str	r3, [r2]
 220:Core/Src/main.c **** 
 469              		.loc 1 220 3 view .LVU131
 470 0040 1368     		ldr	r3, [r2]
 471 0042 03F44043 		and	r3, r3, #49152
 472 0046 0293     		str	r3, [sp, #8]
 220:Core/Src/main.c **** 
 473              		.loc 1 220 3 view .LVU132
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 17


 474 0048 029B     		ldr	r3, [sp, #8]
 475              	.LBE7:
 220:Core/Src/main.c **** 
 476              		.loc 1 220 3 view .LVU133
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 477              		.loc 1 225 3 view .LVU134
 225:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 478              		.loc 1 225 36 is_stmt 0 view .LVU135
 479 004a 0225     		movs	r5, #2
 480 004c 0895     		str	r5, [sp, #32]
 226:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 481              		.loc 1 226 3 is_stmt 1 view .LVU136
 226:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 482              		.loc 1 226 30 is_stmt 0 view .LVU137
 483 004e 0123     		movs	r3, #1
 484 0050 0B93     		str	r3, [sp, #44]
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 485              		.loc 1 227 3 is_stmt 1 view .LVU138
 227:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 486              		.loc 1 227 41 is_stmt 0 view .LVU139
 487 0052 1023     		movs	r3, #16
 488 0054 0C93     		str	r3, [sp, #48]
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 489              		.loc 1 228 3 is_stmt 1 view .LVU140
 228:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 490              		.loc 1 228 34 is_stmt 0 view .LVU141
 491 0056 0E95     		str	r5, [sp, #56]
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 492              		.loc 1 229 3 is_stmt 1 view .LVU142
 229:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 493              		.loc 1 229 35 is_stmt 0 view .LVU143
 494 0058 0F94     		str	r4, [sp, #60]
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 495              		.loc 1 230 3 is_stmt 1 view .LVU144
 230:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 496              		.loc 1 230 30 is_stmt 0 view .LVU145
 497 005a 1093     		str	r3, [sp, #64]
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 498              		.loc 1 231 3 is_stmt 1 view .LVU146
 231:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 499              		.loc 1 231 30 is_stmt 0 view .LVU147
 500 005c 4FF4A873 		mov	r3, #336
 501 0060 1193     		str	r3, [sp, #68]
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 502              		.loc 1 232 3 is_stmt 1 view .LVU148
 232:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 7;
 503              		.loc 1 232 30 is_stmt 0 view .LVU149
 504 0062 0423     		movs	r3, #4
 505 0064 1293     		str	r3, [sp, #72]
 233:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 506              		.loc 1 233 3 is_stmt 1 view .LVU150
 233:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 507              		.loc 1 233 30 is_stmt 0 view .LVU151
 508 0066 0723     		movs	r3, #7
 509 0068 1393     		str	r3, [sp, #76]
 234:Core/Src/main.c ****   {
 510              		.loc 1 234 3 is_stmt 1 view .LVU152
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 18


 234:Core/Src/main.c ****   {
 511              		.loc 1 234 7 is_stmt 0 view .LVU153
 512 006a 08A8     		add	r0, sp, #32
 513 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 514              	.LVL13:
 236:Core/Src/main.c ****   }
 515              		.loc 1 236 5 is_stmt 1 view .LVU154
 241:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 516              		.loc 1 241 3 view .LVU155
 241:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 517              		.loc 1 241 31 is_stmt 0 view .LVU156
 518 0070 0F23     		movs	r3, #15
 519 0072 0393     		str	r3, [sp, #12]
 243:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 520              		.loc 1 243 3 is_stmt 1 view .LVU157
 243:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 521              		.loc 1 243 34 is_stmt 0 view .LVU158
 522 0074 0495     		str	r5, [sp, #16]
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 523              		.loc 1 244 3 is_stmt 1 view .LVU159
 244:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 524              		.loc 1 244 35 is_stmt 0 view .LVU160
 525 0076 0594     		str	r4, [sp, #20]
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 526              		.loc 1 245 3 is_stmt 1 view .LVU161
 245:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 527              		.loc 1 245 36 is_stmt 0 view .LVU162
 528 0078 4FF48053 		mov	r3, #4096
 529 007c 0693     		str	r3, [sp, #24]
 246:Core/Src/main.c **** 
 530              		.loc 1 246 3 is_stmt 1 view .LVU163
 246:Core/Src/main.c **** 
 531              		.loc 1 246 36 is_stmt 0 view .LVU164
 532 007e 0794     		str	r4, [sp, #28]
 248:Core/Src/main.c ****   {
 533              		.loc 1 248 3 is_stmt 1 view .LVU165
 248:Core/Src/main.c ****   {
 534              		.loc 1 248 7 is_stmt 0 view .LVU166
 535 0080 2946     		mov	r1, r5
 536 0082 03A8     		add	r0, sp, #12
 537 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 538              	.LVL14:
 250:Core/Src/main.c ****   }
 539              		.loc 1 250 5 is_stmt 1 view .LVU167
 252:Core/Src/main.c **** 
 540              		.loc 1 252 1 is_stmt 0 view .LVU168
 541 0088 15B0     		add	sp, sp, #84
 542              		.cfi_def_cfa_offset 12
 543              		@ sp needed
 544 008a 30BD     		pop	{r4, r5, pc}
 545              	.L20:
 546              		.align	2
 547              	.L19:
 548 008c 00380240 		.word	1073887232
 549 0090 00700040 		.word	1073770496
 550              		.cfi_endproc
 551              	.LFE139:
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 19


 553              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 554              		.align	2
 555              	.LC0:
 556 0000 0D0A7E20 		.ascii	"\015\012~ SD card demo by kiwih ~\015\012\015\012\000"
 556      53442063 
 556      61726420 
 556      64656D6F 
 556      20627920 
 557              		.align	2
 558              	.LC1:
 559 0020 00       		.ascii	"\000"
 560 0021 000000   		.align	2
 561              	.LC2:
 562 0024 665F6D6F 		.ascii	"f_mount error (%i)\015\012\000"
 562      756E7420 
 562      6572726F 
 562      72202825 
 562      69290D0A 
 563 0039 000000   		.align	2
 564              	.LC3:
 565 003c 665F6765 		.ascii	"f_getfree error (%i)\015\012\000"
 565      74667265 
 565      65206572 
 565      726F7220 
 565      28256929 
 566 0053 00       		.align	2
 567              	.LC4:
 568 0054 53442063 		.ascii	"SD card stats:\015\012%10lu KiB total drive space.\015"
 568      61726420 
 568      73746174 
 568      733A0D0A 
 568      2531306C 
 569 0081 0A253130 		.ascii	"\012%10lu KiB available.\015\012\000"
 569      6C75204B 
 569      69422061 
 569      7661696C 
 569      61626C65 
 570 0099 000000   		.align	2
 571              	.LC5:
 572 009c 74657374 		.ascii	"test.txt\000"
 572      2E747874 
 572      00
 573 00a5 000000   		.align	2
 574              	.LC6:
 575 00a8 665F6F70 		.ascii	"f_open error (%i)\015\012\000"
 575      656E2065 
 575      72726F72 
 575      20282569 
 575      290D0A00 
 576              		.align	2
 577              	.LC7:
 578 00bc 49207761 		.ascii	"I was able to open 'test.txt' for reading!\015\012\000"
 578      73206162 
 578      6C652074 
 578      6F206F70 
 578      656E2027 
 579 00e9 000000   		.align	2
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 20


 580              	.LC8:
 581 00ec 52656164 		.ascii	"Read string from 'test.txt' contents: %s\015\012\000"
 581      20737472 
 581      696E6720 
 581      66726F6D 
 581      20277465 
 582 0117 00       		.align	2
 583              	.LC9:
 584 0118 665F6765 		.ascii	"f_gets error (%i)\015\012\000"
 584      74732065 
 584      72726F72 
 584      20282569 
 584      290D0A00 
 585              		.align	2
 586              	.LC10:
 587 012c 77726974 		.ascii	"write.txt\000"
 587      652E7478 
 587      7400
 588 0136 0000     		.align	2
 589              	.LC11:
 590 0138 49207761 		.ascii	"I was able to open 'write.txt' for writing\015\012\000"
 590      73206162 
 590      6C652074 
 590      6F206F70 
 590      656E2027 
 591 0165 000000   		.align	2
 592              	.LC12:
 593 0168 61206E65 		.ascii	"a new file is made!\000"
 593      77206669 
 593      6C652069 
 593      73206D61 
 593      64652100 
 594              		.align	2
 595              	.LC13:
 596 017c 57726F74 		.ascii	"Wrote %i bytes to 'write.txt'!\015\012\000"
 596      65202569 
 596      20627974 
 596      65732074 
 596      6F202777 
 597 019d 000000   		.align	2
 598              	.LC14:
 599 01a0 665F7772 		.ascii	"f_write error (%i)\015\012\000"
 599      69746520 
 599      6572726F 
 599      72202825 
 599      69290D0A 
 600              		.section	.text.main,"ax",%progbits
 601              		.align	1
 602              		.global	main
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 607              	main:
 608              	.LFB138:
  83:Core/Src/main.c **** 
 609              		.loc 1 83 1 is_stmt 1 view -0
 610              		.cfi_startproc
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 21


 611              		@ args = 0, pretend = 0, frame = 1168
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613 0000 10B5     		push	{r4, lr}
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 4, -8
 616              		.cfi_offset 14, -4
 617 0002 ADF5926D 		sub	sp, sp, #1168
 618              		.cfi_def_cfa_offset 1176
  92:Core/Src/main.c **** 
 619              		.loc 1 92 3 view .LVU170
 620 0006 FFF7FEFF 		bl	HAL_Init
 621              	.LVL15:
  99:Core/Src/main.c **** 
 622              		.loc 1 99 3 view .LVU171
 623 000a FFF7FEFF 		bl	SystemClock_Config
 624              	.LVL16:
 106:Core/Src/main.c ****   MX_USART2_UART_Init();
 625              		.loc 1 106 3 view .LVU172
 626 000e FFF7FEFF 		bl	MX_GPIO_Init
 627              	.LVL17:
 107:Core/Src/main.c ****   MX_FATFS_Init();
 628              		.loc 1 107 3 view .LVU173
 629 0012 FFF7FEFF 		bl	MX_USART2_UART_Init
 630              	.LVL18:
 108:Core/Src/main.c ****   MX_SPI2_Init();
 631              		.loc 1 108 3 view .LVU174
 632 0016 FFF7FEFF 		bl	MX_FATFS_Init
 633              	.LVL19:
 109:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 634              		.loc 1 109 3 view .LVU175
 635 001a FFF7FEFF 		bl	MX_SPI2_Init
 636              	.LVL20:
 112:Core/Src/main.c **** 
 637              		.loc 1 112 5 view .LVU176
 638 001e 4448     		ldr	r0, .L36
 639 0020 FFF7FEFF 		bl	myprintf
 640              	.LVL21:
 114:Core/Src/main.c **** 
 641              		.loc 1 114 5 view .LVU177
 642 0024 4FF47A70 		mov	r0, #1000
 643 0028 FFF7FEFF 		bl	HAL_Delay
 644              	.LVL22:
 117:Core/Src/main.c ****     FIL fil; 		//File handle
 645              		.loc 1 117 5 view .LVU178
 118:Core/Src/main.c ****     FRESULT fres; //Result after operations
 646              		.loc 1 118 5 view .LVU179
 119:Core/Src/main.c **** 
 647              		.loc 1 119 5 view .LVU180
 122:Core/Src/main.c ****     if (fres != FR_OK) {
 648              		.loc 1 122 5 view .LVU181
 122:Core/Src/main.c ****     if (fres != FR_OK) {
 649              		.loc 1 122 12 is_stmt 0 view .LVU182
 650 002c 0122     		movs	r2, #1
 651 002e 4149     		ldr	r1, .L36+4
 652 0030 98A8     		add	r0, sp, #608
 653 0032 FFF7FEFF 		bl	f_mount
 654              	.LVL23:
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 22


 123:Core/Src/main.c ****   	myprintf("f_mount error (%i)\r\n", fres);
 655              		.loc 1 123 5 is_stmt 1 view .LVU183
 123:Core/Src/main.c ****   	myprintf("f_mount error (%i)\r\n", fres);
 656              		.loc 1 123 8 is_stmt 0 view .LVU184
 657 0036 20B1     		cbz	r0, .L22
 658 0038 0146     		mov	r1, r0
 124:Core/Src/main.c ****   	while(1);
 659              		.loc 1 124 4 is_stmt 1 view .LVU185
 660 003a 3F48     		ldr	r0, .L36+8
 661              	.LVL24:
 124:Core/Src/main.c ****   	while(1);
 662              		.loc 1 124 4 is_stmt 0 view .LVU186
 663 003c FFF7FEFF 		bl	myprintf
 664              	.LVL25:
 665              	.L23:
 125:Core/Src/main.c ****     }
 666              		.loc 1 125 4 is_stmt 1 view .LVU187
 125:Core/Src/main.c ****     }
 667              		.loc 1 125 9 view .LVU188
 668 0040 FEE7     		b	.L23
 669              	.LVL26:
 670              	.L22:
 129:Core/Src/main.c **** 
 671              		.loc 1 129 5 view .LVU189
 131:Core/Src/main.c **** 
 672              		.loc 1 131 5 view .LVU190
 133:Core/Src/main.c ****     if (fres != FR_OK) {
 673              		.loc 1 133 5 view .LVU191
 133:Core/Src/main.c ****     if (fres != FR_OK) {
 674              		.loc 1 133 12 is_stmt 0 view .LVU192
 675 0042 0AAA     		add	r2, sp, #40
 676 0044 0BA9     		add	r1, sp, #44
 677 0046 3B48     		ldr	r0, .L36+4
 678              	.LVL27:
 133:Core/Src/main.c ****     if (fres != FR_OK) {
 679              		.loc 1 133 12 view .LVU193
 680 0048 FFF7FEFF 		bl	f_getfree
 681              	.LVL28:
 134:Core/Src/main.c ****   	myprintf("f_getfree error (%i)\r\n", fres);
 682              		.loc 1 134 5 is_stmt 1 view .LVU194
 134:Core/Src/main.c ****   	myprintf("f_getfree error (%i)\r\n", fres);
 683              		.loc 1 134 8 is_stmt 0 view .LVU195
 684 004c 0146     		mov	r1, r0
 685 004e 18B1     		cbz	r0, .L24
 135:Core/Src/main.c ****   	while(1);
 686              		.loc 1 135 4 is_stmt 1 view .LVU196
 687 0050 3A48     		ldr	r0, .L36+12
 688              	.LVL29:
 135:Core/Src/main.c ****   	while(1);
 689              		.loc 1 135 4 is_stmt 0 view .LVU197
 690 0052 FFF7FEFF 		bl	myprintf
 691              	.LVL30:
 692              	.L25:
 136:Core/Src/main.c ****     }
 693              		.loc 1 136 4 is_stmt 1 view .LVU198
 136:Core/Src/main.c ****     }
 694              		.loc 1 136 9 view .LVU199
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 23


 695 0056 FEE7     		b	.L25
 696              	.LVL31:
 697              	.L24:
 140:Core/Src/main.c ****     free_sectors = free_clusters * getFreeFs->csize;
 698              		.loc 1 140 5 view .LVU200
 140:Core/Src/main.c ****     free_sectors = free_clusters * getFreeFs->csize;
 699              		.loc 1 140 31 is_stmt 0 view .LVU201
 700 0058 0A9A     		ldr	r2, [sp, #40]
 701 005a 5369     		ldr	r3, [r2, #20]
 140:Core/Src/main.c ****     free_sectors = free_clusters * getFreeFs->csize;
 702              		.loc 1 140 42 view .LVU202
 703 005c 023B     		subs	r3, r3, #2
 140:Core/Src/main.c ****     free_sectors = free_clusters * getFreeFs->csize;
 704              		.loc 1 140 58 view .LVU203
 705 005e 5289     		ldrh	r2, [r2, #10]
 140:Core/Src/main.c ****     free_sectors = free_clusters * getFreeFs->csize;
 706              		.loc 1 140 19 view .LVU204
 707 0060 02FB03F1 		mul	r1, r2, r3
 708              	.LVL32:
 141:Core/Src/main.c **** 
 709              		.loc 1 141 5 is_stmt 1 view .LVU205
 141:Core/Src/main.c **** 
 710              		.loc 1 141 34 is_stmt 0 view .LVU206
 711 0064 0B9B     		ldr	r3, [sp, #44]
 141:Core/Src/main.c **** 
 712              		.loc 1 141 18 view .LVU207
 713 0066 03FB02F2 		mul	r2, r3, r2
 714              	.LVL33:
 143:Core/Src/main.c **** 
 715              		.loc 1 143 5 is_stmt 1 view .LVU208
 716 006a 5208     		lsrs	r2, r2, #1
 717              	.LVL34:
 143:Core/Src/main.c **** 
 718              		.loc 1 143 5 is_stmt 0 view .LVU209
 719 006c 4908     		lsrs	r1, r1, #1
 720              	.LVL35:
 143:Core/Src/main.c **** 
 721              		.loc 1 143 5 view .LVU210
 722 006e 3448     		ldr	r0, .L36+16
 723              	.LVL36:
 143:Core/Src/main.c **** 
 724              		.loc 1 143 5 view .LVU211
 725 0070 FFF7FEFF 		bl	myprintf
 726              	.LVL37:
 146:Core/Src/main.c ****     if (fres != FR_OK) {
 727              		.loc 1 146 5 is_stmt 1 view .LVU212
 146:Core/Src/main.c ****     if (fres != FR_OK) {
 728              		.loc 1 146 12 is_stmt 0 view .LVU213
 729 0074 0122     		movs	r2, #1
 730 0076 3349     		ldr	r1, .L36+20
 731 0078 0CA8     		add	r0, sp, #48
 732 007a FFF7FEFF 		bl	f_open
 733              	.LVL38:
 147:Core/Src/main.c ****   	myprintf("f_open error (%i)\r\n", fres);
 734              		.loc 1 147 5 is_stmt 1 view .LVU214
 147:Core/Src/main.c ****   	myprintf("f_open error (%i)\r\n", fres);
 735              		.loc 1 147 8 is_stmt 0 view .LVU215
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 24


 736 007e 0446     		mov	r4, r0
 737 0080 20B1     		cbz	r0, .L26
 148:Core/Src/main.c ****   	while(1);
 738              		.loc 1 148 4 is_stmt 1 view .LVU216
 739 0082 0146     		mov	r1, r0
 740 0084 3048     		ldr	r0, .L36+24
 741              	.LVL39:
 148:Core/Src/main.c ****   	while(1);
 742              		.loc 1 148 4 is_stmt 0 view .LVU217
 743 0086 FFF7FEFF 		bl	myprintf
 744              	.LVL40:
 745              	.L27:
 149:Core/Src/main.c ****     }
 746              		.loc 1 149 4 is_stmt 1 view .LVU218
 149:Core/Src/main.c ****     }
 747              		.loc 1 149 9 view .LVU219
 748 008a FEE7     		b	.L27
 749              	.LVL41:
 750              	.L26:
 151:Core/Src/main.c **** 
 751              		.loc 1 151 5 view .LVU220
 752 008c 2F48     		ldr	r0, .L36+28
 753              	.LVL42:
 151:Core/Src/main.c **** 
 754              		.loc 1 151 5 is_stmt 0 view .LVU221
 755 008e FFF7FEFF 		bl	myprintf
 756              	.LVL43:
 154:Core/Src/main.c **** 
 757              		.loc 1 154 5 is_stmt 1 view .LVU222
 158:Core/Src/main.c ****     if(rres != 0) {
 758              		.loc 1 158 5 view .LVU223
 158:Core/Src/main.c ****     if(rres != 0) {
 759              		.loc 1 158 19 is_stmt 0 view .LVU224
 760 0092 0CAA     		add	r2, sp, #48
 761 0094 1E21     		movs	r1, #30
 762 0096 02A8     		add	r0, sp, #8
 763 0098 FFF7FEFF 		bl	f_gets
 764              	.LVL44:
 159:Core/Src/main.c ****   	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 765              		.loc 1 159 5 is_stmt 1 view .LVU225
 159:Core/Src/main.c ****   	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 766              		.loc 1 159 7 is_stmt 0 view .LVU226
 767 009c 0028     		cmp	r0, #0
 768 009e 39D0     		beq	.L28
 160:Core/Src/main.c ****     } else {
 769              		.loc 1 160 4 is_stmt 1 view .LVU227
 770 00a0 02A9     		add	r1, sp, #8
 771 00a2 2B48     		ldr	r0, .L36+32
 772              	.LVL45:
 160:Core/Src/main.c ****     } else {
 773              		.loc 1 160 4 is_stmt 0 view .LVU228
 774 00a4 FFF7FEFF 		bl	myprintf
 775              	.LVL46:
 776              	.L29:
 166:Core/Src/main.c **** 
 777              		.loc 1 166 5 is_stmt 1 view .LVU229
 778 00a8 0CA8     		add	r0, sp, #48
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 25


 779 00aa FFF7FEFF 		bl	f_close
 780              	.LVL47:
 169:Core/Src/main.c ****     if(fres == FR_OK) {
 781              		.loc 1 169 5 view .LVU230
 169:Core/Src/main.c ****     if(fres == FR_OK) {
 782              		.loc 1 169 12 is_stmt 0 view .LVU231
 783 00ae 1A22     		movs	r2, #26
 784 00b0 2849     		ldr	r1, .L36+36
 785 00b2 0CA8     		add	r0, sp, #48
 786 00b4 FFF7FEFF 		bl	f_open
 787              	.LVL48:
 170:Core/Src/main.c ****   	myprintf("I was able to open 'write.txt' for writing\r\n");
 788              		.loc 1 170 5 is_stmt 1 view .LVU232
 170:Core/Src/main.c ****   	myprintf("I was able to open 'write.txt' for writing\r\n");
 789              		.loc 1 170 7 is_stmt 0 view .LVU233
 790 00b8 0146     		mov	r1, r0
 791 00ba 80BB     		cbnz	r0, .L30
 171:Core/Src/main.c ****     } else {
 792              		.loc 1 171 4 is_stmt 1 view .LVU234
 793 00bc 2648     		ldr	r0, .L36+40
 794              	.LVL49:
 171:Core/Src/main.c ****     } else {
 795              		.loc 1 171 4 is_stmt 0 view .LVU235
 796 00be FFF7FEFF 		bl	myprintf
 797              	.LVL50:
 798              	.L31:
 177:Core/Src/main.c ****     UINT bytesWrote;
 799              		.loc 1 177 5 is_stmt 1 view .LVU236
 800 00c2 0DF1080C 		add	ip, sp, #8
 801 00c6 254C     		ldr	r4, .L36+44
 802 00c8 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 803 00ca ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 804 00ce 2368     		ldr	r3, [r4]
 805 00d0 2CF8023B 		strh	r3, [ip], #2	@ movhi
 806 00d4 1B0C     		lsrs	r3, r3, #16
 807 00d6 8CF80030 		strb	r3, [ip]
 178:Core/Src/main.c ****     fres = f_write(&fil, readBuf, 19, &bytesWrote);
 808              		.loc 1 178 5 view .LVU237
 179:Core/Src/main.c ****     if(fres == FR_OK) {
 809              		.loc 1 179 5 view .LVU238
 179:Core/Src/main.c ****     if(fres == FR_OK) {
 810              		.loc 1 179 12 is_stmt 0 view .LVU239
 811 00da 01AB     		add	r3, sp, #4
 812 00dc 1322     		movs	r2, #19
 813 00de 02A9     		add	r1, sp, #8
 814 00e0 0CA8     		add	r0, sp, #48
 815 00e2 FFF7FEFF 		bl	f_write
 816              	.LVL51:
 180:Core/Src/main.c ****   	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 817              		.loc 1 180 5 is_stmt 1 view .LVU240
 180:Core/Src/main.c ****   	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 818              		.loc 1 180 7 is_stmt 0 view .LVU241
 819 00e6 0146     		mov	r1, r0
 820 00e8 E8B9     		cbnz	r0, .L32
 181:Core/Src/main.c ****     } else {
 821              		.loc 1 181 4 is_stmt 1 view .LVU242
 822 00ea 0199     		ldr	r1, [sp, #4]
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 26


 823 00ec 1C48     		ldr	r0, .L36+48
 824              	.LVL52:
 181:Core/Src/main.c ****     } else {
 825              		.loc 1 181 4 is_stmt 0 view .LVU243
 826 00ee FFF7FEFF 		bl	myprintf
 827              	.LVL53:
 828              	.L33:
 187:Core/Src/main.c **** 
 829              		.loc 1 187 5 is_stmt 1 view .LVU244
 830 00f2 0CA8     		add	r0, sp, #48
 831 00f4 FFF7FEFF 		bl	f_close
 832              	.LVL54:
 190:Core/Src/main.c **** 
 833              		.loc 1 190 5 view .LVU245
 834 00f8 0022     		movs	r2, #0
 835 00fa 0E49     		ldr	r1, .L36+4
 836 00fc 1046     		mov	r0, r2
 837 00fe FFF7FEFF 		bl	f_mount
 838              	.LVL55:
 839              	.L34:
 196:Core/Src/main.c ****     {
 840              		.loc 1 196 5 view .LVU246
 202:Core/Src/main.c ****   	  HAL_Delay(1000);
 841              		.loc 1 202 6 view .LVU247
 842 0102 2021     		movs	r1, #32
 843 0104 1748     		ldr	r0, .L36+52
 844 0106 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 845              	.LVL56:
 203:Core/Src/main.c ****     }
 846              		.loc 1 203 6 discriminator 1 view .LVU248
 847 010a 4FF47A70 		mov	r0, #1000
 848 010e FFF7FEFF 		bl	HAL_Delay
 849              	.LVL57:
 196:Core/Src/main.c ****     {
 850              		.loc 1 196 11 view .LVU249
 851 0112 F6E7     		b	.L34
 852              	.LVL58:
 853              	.L28:
 162:Core/Src/main.c ****     }
 854              		.loc 1 162 4 view .LVU250
 855 0114 2146     		mov	r1, r4
 856 0116 1448     		ldr	r0, .L36+56
 857              	.LVL59:
 162:Core/Src/main.c ****     }
 858              		.loc 1 162 4 is_stmt 0 view .LVU251
 859 0118 FFF7FEFF 		bl	myprintf
 860              	.LVL60:
 861 011c C4E7     		b	.L29
 862              	.LVL61:
 863              	.L30:
 173:Core/Src/main.c ****     }
 864              		.loc 1 173 4 is_stmt 1 view .LVU252
 865 011e 0A48     		ldr	r0, .L36+24
 866              	.LVL62:
 173:Core/Src/main.c ****     }
 867              		.loc 1 173 4 is_stmt 0 view .LVU253
 868 0120 FFF7FEFF 		bl	myprintf
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 27


 869              	.LVL63:
 173:Core/Src/main.c ****     }
 870              		.loc 1 173 4 view .LVU254
 871 0124 CDE7     		b	.L31
 872              	.LVL64:
 873              	.L32:
 183:Core/Src/main.c ****     }
 874              		.loc 1 183 4 is_stmt 1 view .LVU255
 875 0126 1148     		ldr	r0, .L36+60
 876              	.LVL65:
 183:Core/Src/main.c ****     }
 877              		.loc 1 183 4 is_stmt 0 view .LVU256
 878 0128 FFF7FEFF 		bl	myprintf
 879              	.LVL66:
 183:Core/Src/main.c ****     }
 880              		.loc 1 183 4 view .LVU257
 881 012c E1E7     		b	.L33
 882              	.L37:
 883 012e 00BF     		.align	2
 884              	.L36:
 885 0130 00000000 		.word	.LC0
 886 0134 20000000 		.word	.LC1
 887 0138 24000000 		.word	.LC2
 888 013c 3C000000 		.word	.LC3
 889 0140 54000000 		.word	.LC4
 890 0144 9C000000 		.word	.LC5
 891 0148 A8000000 		.word	.LC6
 892 014c BC000000 		.word	.LC7
 893 0150 EC000000 		.word	.LC8
 894 0154 2C010000 		.word	.LC10
 895 0158 38010000 		.word	.LC11
 896 015c 68010000 		.word	.LC12
 897 0160 7C010000 		.word	.LC13
 898 0164 00000240 		.word	1073872896
 899 0168 18010000 		.word	.LC9
 900 016c A0010000 		.word	.LC14
 901              		.cfi_endproc
 902              	.LFE138:
 904              		.section	.text.Error_Handler,"ax",%progbits
 905              		.align	1
 906              		.global	Error_Handler
 907              		.syntax unified
 908              		.thumb
 909              		.thumb_func
 911              	Error_Handler:
 912              	.LFB143:
 371:Core/Src/main.c **** 
 372:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 373:Core/Src/main.c **** 
 374:Core/Src/main.c **** /* USER CODE END 4 */
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** /**
 377:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 378:Core/Src/main.c ****   * @retval None
 379:Core/Src/main.c ****   */
 380:Core/Src/main.c **** void Error_Handler(void)
 381:Core/Src/main.c **** {
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 28


 913              		.loc 1 381 1 is_stmt 1 view -0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 917              		@ link register save eliminated.
 382:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 383:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****   /* USER CODE END Error_Handler_Debug */
 386:Core/Src/main.c **** }
 918              		.loc 1 386 1 view .LVU259
 919 0000 7047     		bx	lr
 920              		.cfi_endproc
 921              	.LFE143:
 923              		.section	.bss.buffer.0,"aw",%nobits
 924              		.align	2
 927              	buffer.0:
 928 0000 00000000 		.space	256
 928      00000000 
 928      00000000 
 928      00000000 
 928      00000000 
 929              		.global	huart2
 930              		.section	.bss.huart2,"aw",%nobits
 931              		.align	2
 934              	huart2:
 935 0000 00000000 		.space	72
 935      00000000 
 935      00000000 
 935      00000000 
 935      00000000 
 936              		.global	hspi2
 937              		.section	.bss.hspi2,"aw",%nobits
 938              		.align	2
 941              	hspi2:
 942 0000 00000000 		.space	88
 942      00000000 
 942      00000000 
 942      00000000 
 942      00000000 
 943              		.text
 944              	.Letext0:
 945              		.file 2 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-de
 946              		.file 3 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-de
 947              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 948              		.file 5 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-de
 949              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 950              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 951              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 952              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 953              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 954              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 955              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 956              		.file 13 "Middlewares/Third_Party/FatFs/src/integer.h"
 957              		.file 14 "Middlewares/Third_Party/FatFs/src/ff.h"
 958              		.file 15 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-d
 959              		.file 16 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-d
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 29


 960              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 961              		.file 18 "C:/Users/jonas/AppData/Roaming/VSCodium/User/globalStorage/bmd.stm32-for-vscode/@xpack-d
 962              		.file 19 "<built-in>"
 963              		.file 20 "FATFS/App/fatfs.h"
ARM GAS  C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:189    .text.MX_GPIO_Init:000000bc $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:197    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:202    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:251    .text.MX_USART2_UART_Init:00000024 $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:934    .bss.huart2:00000000 huart2
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:257    .text.MX_SPI2_Init:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:262    .text.MX_SPI2_Init:00000000 MX_SPI2_Init
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:325    .text.MX_SPI2_Init:00000034 $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:941    .bss.hspi2:00000000 hspi2
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:331    .text.myprintf:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:337    .text.myprintf:00000000 myprintf
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:402    .text.myprintf:00000038 $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:927    .bss.buffer.0:00000000 buffer.0
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:408    .text.SystemClock_Config:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:414    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:548    .text.SystemClock_Config:0000008c $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:554    .rodata.main.str1.4:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:601    .text.main:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:607    .text.main:00000000 main
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:885    .text.main:00000130 $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:905    .text.Error_Handler:00000000 $t
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:911    .text.Error_Handler:00000000 Error_Handler
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:924    .bss.buffer.0:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:931    .bss.huart2:00000000 $d
C:\Users\jonas\AppData\Local\Temp\cc35Hnyw.s:938    .bss.hspi2:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_SPI_Init
vsnprintf
strlen
HAL_UART_Transmit
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_FATFS_Init
HAL_Delay
f_mount
f_getfree
f_open
f_gets
f_close
f_write
HAL_GPIO_TogglePin
