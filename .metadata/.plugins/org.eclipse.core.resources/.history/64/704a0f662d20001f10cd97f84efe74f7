#include "display.h" 

// Definition der Dimensionen für Display-Bereiche
#define DISPLAY_WIDTH           128
#define DISPLAY_HEIGHT          128
#define LIST_SECTION_HEIGHT     100 // Erhöhte Höhe für mehr Zeilen
#define SELECTED_FILE_HEIGHT    20  // Erhöhte Höhe für bessere Lesbarkeit
#define BORDER_WIDTH            1
#define LINE_HEIGHT             10
#define CURSOR                  '>'
#define WAVEFORM_TOP            0
#define WAVEFORM_BOTTOM         (LIST_SECTION_HEIGHT - BORDER_WIDTH)
#define SAMPLE_SKIP             2

// Globale Variablen zur Verfolgung des sichtbaren Teils der Liste
static uint8_t first_visible_index = 0;
static uint8_t num_visible_lines = LIST_SECTION_HEIGHT / LINE_HEIGHT;

void displayStrings(I2C_HandleTypeDef *hi2c1, char** strings, uint8_t numStrings, uint8_t cursor_index) {
    // Bildschirm löschen
    ssd1306_Fill(Black);

    // Berechnung des letzten sichtbaren Index basierend auf dem ersten sichtbaren Index und der Anzahl der sichtbaren Zeilen
    uint8_t last_visible_index = first_visible_index + num_visible_lines - 1;

    // Sicherstellen, dass der Cursor im sichtbaren Bereich liegt
    if (cursor_index < first_visible_index) {
        first_visible_index = cursor_index;
    } else if (cursor_index > last_visible_index) {
        first_visible_index = cursor_index - num_visible_lines + 1;
    }

    // Daten in den Listenabschnitt des Bildschirms schreiben
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
        ssd1306_SetCursor(0, (k - first_visible_index) * LINE_HEIGHT + BORDER_WIDTH); // Cursor-Position weiter links setzen
        if (k == cursor_index) {
            // Zeile mit Cursor schreiben
            char line_with_cursor[DISPLAY_WIDTH - BORDER_WIDTH];
            snprintf(line_with_cursor, sizeof(line_with_cursor), "%c %s", CURSOR, strings[k]);
            ssd1306_WriteString(line_with_cursor, Font_7x10, White);
        } else {
            ssd1306_WriteString(strings[k], Font_7x10, White);
        }
    }

    // Rahmen um den Listenabschnitt zeichnen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
            if (j < BORDER_WIDTH || j >= LIST_SECTION_HEIGHT - BORDER_WIDTH || i < BORDER_WIDTH || i >= DISPLAY_WIDTH - BORDER_WIDTH) {
                ssd1306_DrawPixel(i, j, White);
            }
        }
    }
}

// Liste um eine Zeile nach oben scrollen
void scrollUp() {
    if (first_visible_index > 0) {
        first_visible_index--;
    }
}

// Liste um eine Zeile nach unten scrollen
void scrollDown(uint8_t numStrings) {
    if (first_visible_index + num_visible_lines < numStrings) {
        first_visible_index++;
    }
}

void renderSelectedFile(I2C_HandleTypeDef *hi2c1, const char *filename) {
    // Den ausgewählten Dateibereich des Bildschirms löschen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
            ssd1306_DrawPixel(i, j, Black);
        }
    }

    // Den Namen der ausgewählten Datei im ausgewählten Dateibereich schreiben
    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + 2); // Y-Position für Textausrichtung anpassen
    ssd1306_WriteString(filename, Font_7x10, White);
}

void drawWaveform(I2C_HandleTypeDef *hi2c1, int16_t *samples, uint32_t numSamples) {
    // Den Wellenformbereich löschen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
        for (uint8_t j = WAVEFORM_TOP; j < WAVEFORM_BOTTOM; j++) {
            ssd1306_DrawPixel(i, j, Black);
        }
    }

    // Wellenform zeichnen
    uint8_t x_step = numSamples / DISPLAY_WIDTH;

    for (uint32_t i = 0; i < DISPLAY_WIDTH; i++) {
        int8_t x1 = i;
        int8_t y1 = (samples[i * x_step] * (WAVEFORM_BOTTOM - WAVEFORM_TOP)) / 65536 + (WAVEFORM_BOTTOM - WAVEFORM_TOP) / 2;
        ssd1306_DrawPixel(x1, y1, White);
    }

    // Rahmen um den Wellenformbereich zeichnen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
        for (uint8_t j = WAVEFORM_TOP; j < WAVEFORM_BOTTOM; j++) {
            if (j == WAVEFORM_TOP || j == WAVEFORM_BOTTOM - 1 || i == 0 || i == DISPLAY_WIDTH - 1) {
                ssd1306_DrawPixel(i, j, White);
            }
        }
    }

    // Display aktualisieren
    ssd1306_UpdateScreen(hi2c1);
}

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
    int16_t dx = abs(x1 - x0);
    int16_t sx = x0 < x1 ? 1 : -1;
    int16_t dy = -abs(y1 - y0);
    int16_t sy = y0 < y1 ? 1 : -1;
    int16_t err = dx + dy;
    int16_t e2;

    while (1) {
        ssd1306_DrawPixel(x0, y0, color);
        if (x0 == x1 && y0 == y1) break;
        e2 = 2 * err;
        if (e2 >= dy) {
            err += dy;
            x0 += sx;
        }
        if (e2 <= dx) {
            err += dx;
            y0 += sy;
        }
    }
}
