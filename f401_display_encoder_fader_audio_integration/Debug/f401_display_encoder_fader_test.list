
f401_display_encoder_fader_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fac  0800e114  0800e114  0000f114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0c0  0800f0c0  00011074  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0c0  0800f0c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0c8  0800f0c8  00011074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0c8  0800f0c8  000100c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f0cc  0800f0cc  000100cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800f0d0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000468c  20000074  0800f144  00011074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004700  0800f144  00011700  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d87e  00000000  00000000  000110a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040a5  00000000  00000000  0002e922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  000329c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143a  00000000  00000000  000343c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b994  00000000  00000000  00035802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002374e  00000000  00000000  00051196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6282  00000000  00000000  000748e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ab66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077ac  00000000  00000000  0011abac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00122358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e0fc 	.word	0x0800e0fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800e0fc 	.word	0x0800e0fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <displayStrings>:

// Global variables to keep track of the visible portion of the list
static uint8_t first_visible_index = 0;
static uint8_t num_visible_lines = LIST_SECTION_HEIGHT / LINE_HEIGHT;

void displayStrings(I2C_HandleTypeDef *hi2c1, char** strings, uint8_t numStrings, uint8_t cursor_index) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0a8      	sub	sp, #160	@ 0xa0
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	4611      	mov	r1, r2
 80005ac:	461a      	mov	r2, r3
 80005ae:	460b      	mov	r3, r1
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	4613      	mov	r3, r2
 80005b4:	71bb      	strb	r3, [r7, #6]
    // Clear screen
    ssd1306_Fill(Black);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f001 fbb8 	bl	8001d2c <ssd1306_Fill>

    // Calculate the last visible index based on the first visible index and the number of visible lines
    uint8_t last_visible_index = first_visible_index + num_visible_lines - 1;
 80005bc:	4b53      	ldr	r3, [pc, #332]	@ (800070c <displayStrings+0x16c>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	4b53      	ldr	r3, [pc, #332]	@ (8000710 <displayStrings+0x170>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	3b01      	subs	r3, #1
 80005ca:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94

    // Ensure cursor is within the visible range
    if (cursor_index < first_visible_index) {
 80005ce:	4b4f      	ldr	r3, [pc, #316]	@ (800070c <displayStrings+0x16c>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	79ba      	ldrb	r2, [r7, #6]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d203      	bcs.n	80005e0 <displayStrings+0x40>
        first_visible_index = cursor_index;
 80005d8:	4a4c      	ldr	r2, [pc, #304]	@ (800070c <displayStrings+0x16c>)
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	7013      	strb	r3, [r2, #0]
 80005de:	e00d      	b.n	80005fc <displayStrings+0x5c>
    } else if (cursor_index > last_visible_index) {
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d908      	bls.n	80005fc <displayStrings+0x5c>
        first_visible_index = cursor_index - num_visible_lines + 1;
 80005ea:	4b49      	ldr	r3, [pc, #292]	@ (8000710 <displayStrings+0x170>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	79ba      	ldrb	r2, [r7, #6]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b44      	ldr	r3, [pc, #272]	@ (800070c <displayStrings+0x16c>)
 80005fa:	701a      	strb	r2, [r3, #0]
    }

    // Write data to list section of the screen
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 80005fc:	4b43      	ldr	r3, [pc, #268]	@ (800070c <displayStrings+0x16c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000604:	e03b      	b.n	800067e <displayStrings+0xde>
        ssd1306_SetCursor(BORDER_WIDTH, (k - first_visible_index) * LINE_HEIGHT + BORDER_WIDTH); // Adjust cursor_index position based on line height
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <displayStrings+0x16c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	4413      	add	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	3301      	adds	r3, #1
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	f001 fce0 	bl	8001fe8 <ssd1306_SetCursor>
        if (k == cursor_index) {
 8000628:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	429a      	cmp	r2, r3
 8000630:	d115      	bne.n	800065e <displayStrings+0xbe>
            // Write the line with cursor_index
            char line_with_cursor[DISPLAY_WIDTH - BORDER_WIDTH];
            snprintf(line_with_cursor, sizeof(line_with_cursor), "%c %s", CURSOR, strings[k]);
 8000632:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	68ba      	ldr	r2, [r7, #8]
 800063a:	4413      	add	r3, r2
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f107 0014 	add.w	r0, r7, #20
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	233e      	movs	r3, #62	@ 0x3e
 8000646:	4a33      	ldr	r2, [pc, #204]	@ (8000714 <displayStrings+0x174>)
 8000648:	217f      	movs	r1, #127	@ 0x7f
 800064a:	f00c fcbf 	bl	800cfcc <sniprintf>
            ssd1306_WriteString(line_with_cursor, Font_7x10, White);
 800064e:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <displayStrings+0x178>)
 8000650:	f107 0014 	add.w	r0, r7, #20
 8000654:	2301      	movs	r3, #1
 8000656:	ca06      	ldmia	r2, {r1, r2}
 8000658:	f001 fca0 	bl	8001f9c <ssd1306_WriteString>
 800065c:	e00a      	b.n	8000674 <displayStrings+0xd4>
        } else {
            ssd1306_WriteString(strings[k], Font_7x10, White);
 800065e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	68ba      	ldr	r2, [r7, #8]
 8000666:	4413      	add	r3, r2
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	4a2b      	ldr	r2, [pc, #172]	@ (8000718 <displayStrings+0x178>)
 800066c:	2301      	movs	r3, #1
 800066e:	ca06      	ldmia	r2, {r1, r2}
 8000670:	f001 fc94 	bl	8001f9c <ssd1306_WriteString>
    for (uint8_t k = first_visible_index; k < numStrings && k < first_visible_index + num_visible_lines; k++) {
 8000674:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000678:	3301      	adds	r3, #1
 800067a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800067e:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	429a      	cmp	r2, r3
 8000686:	d209      	bcs.n	800069c <displayStrings+0xfc>
 8000688:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800068c:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <displayStrings+0x16c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <displayStrings+0x170>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	440b      	add	r3, r1
 8000698:	429a      	cmp	r2, r3
 800069a:	dbb4      	blt.n	8000606 <displayStrings+0x66>
        }
    }

    // Draw border around the list section
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80006a2:	e029      	b.n	80006f8 <displayStrings+0x158>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 80006a4:	2300      	movs	r3, #0
 80006a6:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80006aa:	e01c      	b.n	80006e6 <displayStrings+0x146>
            if (j < BORDER_WIDTH || j >= LIST_SECTION_HEIGHT - BORDER_WIDTH || i < BORDER_WIDTH || i >= DISPLAY_WIDTH - BORDER_WIDTH) {
 80006ac:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00b      	beq.n	80006cc <displayStrings+0x12c>
 80006b4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80006ba:	d807      	bhi.n	80006cc <displayStrings+0x12c>
 80006bc:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <displayStrings+0x12c>
 80006c4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80006ca:	d907      	bls.n	80006dc <displayStrings+0x13c>
                ssd1306_DrawPixel(i, j, White);
 80006cc:	f897 1095 	ldrb.w	r1, [r7, #149]	@ 0x95
 80006d0:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006d4:	2201      	movs	r2, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fb7e 	bl	8001dd8 <ssd1306_DrawPixel>
        for (uint8_t j = 0; j < LIST_SECTION_HEIGHT; j++) {
 80006dc:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006e0:	3301      	adds	r3, #1
 80006e2:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
 80006e6:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80006ea:	2b50      	cmp	r3, #80	@ 0x50
 80006ec:	d9de      	bls.n	80006ac <displayStrings+0x10c>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80006ee:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80006f2:	3301      	adds	r3, #1
 80006f4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 80006f8:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	dad1      	bge.n	80006a4 <displayStrings+0x104>
            }
        }
    }
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3798      	adds	r7, #152	@ 0x98
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000090 	.word	0x20000090
 8000710:	20000000 	.word	0x20000000
 8000714:	0800e114 	.word	0x0800e114
 8000718:	20000004 	.word	0x20000004

0800071c <renderSelectedFile>:
    if (first_visible_index + num_visible_lines < numStrings) {
        first_visible_index++;
    }
}

void renderSelectedFile(I2C_HandleTypeDef *hi2c1, const char *filename) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
    // Clear the selected file section of the screen
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 8000726:	2300      	movs	r3, #0
 8000728:	73fb      	strb	r3, [r7, #15]
 800072a:	e012      	b.n	8000752 <renderSelectedFile+0x36>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 800072c:	2351      	movs	r3, #81	@ 0x51
 800072e:	73bb      	strb	r3, [r7, #14]
 8000730:	e008      	b.n	8000744 <renderSelectedFile+0x28>
            ssd1306_DrawPixel(i, j, Black);
 8000732:	7bb9      	ldrb	r1, [r7, #14]
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2200      	movs	r2, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fb4d 	bl	8001dd8 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT; j < DISPLAY_HEIGHT; j++) {
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	3301      	adds	r3, #1
 8000742:	73bb      	strb	r3, [r7, #14]
 8000744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000748:	2b00      	cmp	r3, #0
 800074a:	daf2      	bge.n	8000732 <renderSelectedFile+0x16>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 800074c:	7bfb      	ldrb	r3, [r7, #15]
 800074e:	3301      	adds	r3, #1
 8000750:	73fb      	strb	r3, [r7, #15]
 8000752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dae8      	bge.n	800072c <renderSelectedFile+0x10>
        }
    }

    // Write the selected file name in the selected file section
    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + 2); // Adjust Y position for text alignment
 800075a:	2153      	movs	r1, #83	@ 0x53
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fc43 	bl	8001fe8 <ssd1306_SetCursor>
    ssd1306_WriteString(filename, Font_7x10, White);
 8000762:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <renderSelectedFile+0x5c>)
 8000764:	2301      	movs	r3, #1
 8000766:	ca06      	ldmia	r2, {r1, r2}
 8000768:	6838      	ldr	r0, [r7, #0]
 800076a:	f001 fc17 	bl	8001f9c <ssd1306_WriteString>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000004 	.word	0x20000004

0800077c <drawFaderProzent>:
            y0 += sy;
        }
    }
}

void drawFaderProzent(I2C_HandleTypeDef *hi2c1, const char *prozent, int multiplikator){
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 8000788:	2300      	movs	r3, #0
 800078a:	75fb      	strb	r3, [r7, #23]
 800078c:	e019      	b.n	80007c2 <drawFaderProzent+0x46>
        for (uint8_t j = LIST_SECTION_HEIGHT + (18 * multiplikator); j < DISPLAY_HEIGHT; j++) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	00d2      	lsls	r2, r2, #3
 8000796:	4413      	add	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	b2db      	uxtb	r3, r3
 800079c:	3351      	adds	r3, #81	@ 0x51
 800079e:	75bb      	strb	r3, [r7, #22]
 80007a0:	e008      	b.n	80007b4 <drawFaderProzent+0x38>
            ssd1306_DrawPixel(i, j, Black);
 80007a2:	7db9      	ldrb	r1, [r7, #22]
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	2200      	movs	r2, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fb15 	bl	8001dd8 <ssd1306_DrawPixel>
        for (uint8_t j = LIST_SECTION_HEIGHT + (18 * multiplikator); j < DISPLAY_HEIGHT; j++) {
 80007ae:	7dbb      	ldrb	r3, [r7, #22]
 80007b0:	3301      	adds	r3, #1
 80007b2:	75bb      	strb	r3, [r7, #22]
 80007b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	daf2      	bge.n	80007a2 <drawFaderProzent+0x26>
    for (uint8_t i = 0; i < DISPLAY_WIDTH; i++) {
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	3301      	adds	r3, #1
 80007c0:	75fb      	strb	r3, [r7, #23]
 80007c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	dae1      	bge.n	800078e <drawFaderProzent+0x12>
        }
    }

    ssd1306_SetCursor(0, LIST_SECTION_HEIGHT + (18 * multiplikator)); // Adjust Y position for text alignment
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	461a      	mov	r2, r3
 80007d0:	00d2      	lsls	r2, r2, #3
 80007d2:	4413      	add	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3351      	adds	r3, #81	@ 0x51
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4619      	mov	r1, r3
 80007de:	2000      	movs	r0, #0
 80007e0:	f001 fc02 	bl	8001fe8 <ssd1306_SetCursor>
    ssd1306_WriteString(prozent, Font_7x10, White);
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <drawFaderProzent+0x7c>)
 80007e6:	2301      	movs	r3, #1
 80007e8:	ca06      	ldmia	r2, {r1, r2}
 80007ea:	68b8      	ldr	r0, [r7, #8]
 80007ec:	f001 fbd6 	bl	8001f9c <ssd1306_WriteString>
}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000004 	.word	0x20000004

080007fc <addFile>:
    fm->num_matched_files = 0;
    fm->current_file_index = -1;
    fm->cursor_index = -1;
}

void addFile(FileManager *fm, const char *filename, const float *classes){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
    if (fm->num_files < MAX_FILES) {
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f8d3 3fbc 	ldr.w	r3, [r3, #4028]	@ 0xfbc
 800080e:	2b31      	cmp	r3, #49	@ 0x31
 8000810:	dc38      	bgt.n	8000884 <addFile+0x88>
        strcpy(fm->files[fm->num_files].filename, filename);
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	f8d3 2fbc 	ldr.w	r2, [r3, #4028]	@ 0xfbc
 8000818:	4613      	mov	r3, r2
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	4413      	add	r3, r2
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	4618      	mov	r0, r3
 8000828:	f00c fda1 	bl	800d36e <strcpy>
        for(int i = 0; i < MAX_CLASSES; i++){
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e015      	b.n	800085e <addFile+0x62>
            fm->files[fm->num_files].classes[i] = classes[i];        }
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	4413      	add	r3, r2
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	f8d2 2fbc 	ldr.w	r2, [r2, #4028]	@ 0xfbc
 8000840:	6819      	ldr	r1, [r3, #0]
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	4413      	add	r3, r2
 8000850:	3308      	adds	r3, #8
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4403      	add	r3, r0
 8000856:	6019      	str	r1, [r3, #0]
        for(int i = 0; i < MAX_CLASSES; i++){
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	2b01      	cmp	r3, #1
 8000862:	dde6      	ble.n	8000832 <addFile+0x36>
        fm->num_files++;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f8d3 3fbc 	ldr.w	r3, [r3, #4028]	@ 0xfbc
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f8c3 2fbc 	str.w	r2, [r3, #4028]	@ 0xfbc
        if(fm->num_files == 1)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f8d3 3fbc 	ldr.w	r3, [r3, #4028]	@ 0xfbc
 8000878:	2b01      	cmp	r3, #1
 800087a:	d103      	bne.n	8000884 <addFile+0x88>
            fm->cursor_index = 0;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2200      	movs	r2, #0
 8000880:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
    }
}
 8000884:	bf00      	nop
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <cursorUp>:

void cursorUp(FileManager *fm){
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index > 0) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	@ 0xfc4
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd07      	ble.n	80008ae <cursorUp+0x22>
        fm->cursor_index--;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	@ 0xfc4
 80008a4:	1e5a      	subs	r2, r3, #1
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
    } else {
        fm->cursor_index = fm->num_matched_files - 1 ;
    }
}
 80008ac:	e006      	b.n	80008bc <cursorUp+0x30>
        fm->cursor_index = fm->num_matched_files - 1 ;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 80008b4:	1e5a      	subs	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <cursorDown>:

void cursorDown(FileManager *fm){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    if (fm->cursor_index < fm->num_matched_files - 1) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f8d3 2fc4 	ldr.w	r2, [r3, #4036]	@ 0xfc4
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 80008dc:	3b01      	subs	r3, #1
 80008de:	429a      	cmp	r2, r3
 80008e0:	da07      	bge.n	80008f2 <cursorDown+0x2a>
        fm->cursor_index++;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	@ 0xfc4
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
    } else {
        fm->cursor_index = 0;
    }
}
 80008f0:	e003      	b.n	80008fa <cursorDown+0x32>
        fm->cursor_index = 0;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <safeCurrentFileName>:

void safeCurrentFileName(FileManager *fm){
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
	strcpy(fm->current_cursor_filename, fm->shownFiles[fm->cursor_index].filename);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f503 607a 	add.w	r0, r3, #4000	@ 0xfa0
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f8d3 2fc4 	ldr.w	r2, [r3, #4036]	@ 0xfc4
 800091a:	4613      	mov	r3, r2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	4619      	mov	r1, r3
 800092c:	f00c fd1f 	bl	800d36e <strcpy>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <setCursor>:

void setCursor(FileManager *fm){
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	int res = NOT_EXISTS;
 8000940:	f04f 33ff 	mov.w	r3, #4294967295
 8000944:	60bb      	str	r3, [r7, #8]

	if( fm->num_matched_files == 0){
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <setCursor+0x22>
		fm->cursor_index = 0;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
		return;
 8000958:	e048      	b.n	80009ec <setCursor+0xb4>
	}
	for(int i = 0; i < fm->num_matched_files; i++){
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e01e      	b.n	800099e <setCursor+0x66>
		res = strcmp(fm->current_cursor_filename, fm->shownFiles[i].filename);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f503 607a 	add.w	r0, r3, #4000	@ 0xfa0
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	4613      	mov	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	4619      	mov	r1, r3
 800097a:	f7ff fc31 	bl	80001e0 <strcmp>
 800097e:	60b8      	str	r0, [r7, #8]
		if(res == EXISTS){
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d108      	bne.n	8000998 <setCursor+0x60>
			fm->cursor_index = i;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
			fm->current_file_index = i;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	f8c3 2fc8 	str.w	r2, [r3, #4040]	@ 0xfc8
			return;
 8000996:	e029      	b.n	80009ec <setCursor+0xb4>
	for(int i = 0; i < fm->num_matched_files; i++){
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbda      	blt.n	8000960 <setCursor+0x28>
		}
	}
	if (fm->num_matched_files >= fm->cursor_index){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8d3 2fc0 	ldr.w	r2, [r3, #4032]	@ 0xfc0
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	@ 0xfc4
 80009b6:	429a      	cmp	r2, r3
 80009b8:	db11      	blt.n	80009de <setCursor+0xa6>
		strcpy(fm->current_cursor_filename, fm->shownFiles[fm->current_file_index].filename);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f503 607a 	add.w	r0, r3, #4000	@ 0xfa0
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4619      	mov	r1, r3
 80009d8:	f00c fcc9 	bl	800d36e <strcpy>
 80009dc:	e006      	b.n	80009ec <setCursor+0xb4>
	}
	else {
		fm->cursor_index = fm->num_matched_files - 1;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 80009e4:	1e5a      	subs	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f8c3 2fc4 	str.w	r2, [r3, #4036]	@ 0xfc4
	}
}
 80009ec:	3710      	adds	r7, #16
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <selectFile>:

void selectFile(FileManager *fm) {
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
	fm->current_file_index = fm->cursor_index;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f8d3 2fc4 	ldr.w	r2, [r3, #4036]	@ 0xfc4
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f8c3 2fc8 	str.w	r2, [r3, #4040]	@ 0xfc8
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
	...

08000a14 <HAL_GPIO_EXTI_Callback>:
uint8_t currentClassPercentADC[NUM_CHANNELS] = {0};
uint16_t endValues[NUM_CHANNELS] = {0};
char faderProzent[2][50];


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]

    // werte Encoder aus Rotor DC Motor aus
    if (GPIO_Pin == enc_a_clk_in1_Pin && !debounce) {
 8000a1e:	88fb      	ldrh	r3, [r7, #6]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d129      	bne.n	8000a78 <HAL_GPIO_EXTI_Callback+0x64>
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	f083 0301 	eor.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d022      	beq.n	8000a78 <HAL_GPIO_EXTI_Callback+0x64>
          __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000a32:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f06f 0201 	mvn.w	r2, #1
 8000a3a:	611a      	str	r2, [r3, #16]
          HAL_TIM_Base_Start_IT(&htim5);
 8000a3c:	4820      	ldr	r0, [pc, #128]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a3e:	f006 fb7d 	bl	800713c <HAL_TIM_Base_Start_IT>
          debounce = true;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
       //wenn A High und B High, increment Encoder Count
        if (HAL_GPIO_ReadPin(enc_b_dt_in2_GPIO_Port, enc_b_dt_in2_Pin)) {
 8000a48:	2102      	movs	r1, #2
 8000a4a:	481e      	ldr	r0, [pc, #120]	@ (8000ac4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000a4c:	f003 fd50 	bl	80044f0 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d008      	beq.n	8000a68 <HAL_GPIO_EXTI_Callback+0x54>
          rotary_enc_count--;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a5e:	6013      	str	r3, [r2, #0]
          cursorDown(&fm);
 8000a60:	481a      	ldr	r0, [pc, #104]	@ (8000acc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a62:	f7ff ff31 	bl	80008c8 <cursorDown>
 8000a66:	e007      	b.n	8000a78 <HAL_GPIO_EXTI_Callback+0x64>
        } else {
          // wenn A High und B Low, decrement Encoder Count
            rotary_enc_count++;
 8000a68:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a16      	ldr	r2, [pc, #88]	@ (8000ac8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a70:	6013      	str	r3, [r2, #0]
            cursorUp(&fm);
 8000a72:	4816      	ldr	r0, [pc, #88]	@ (8000acc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000a74:	f7ff ff0a 	bl	800088c <cursorUp>
        }
    }

    if(GPIO_Pin == enc_switch_in3_Pin && !debounce){
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d11a      	bne.n	8000ab4 <HAL_GPIO_EXTI_Callback+0xa0>
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f083 0301 	eor.w	r3, r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d013      	beq.n	8000ab4 <HAL_GPIO_EXTI_Callback+0xa0>
      __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f06f 0201 	mvn.w	r2, #1
 8000a94:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Start_IT(&htim5);
 8000a96:	480a      	ldr	r0, [pc, #40]	@ (8000ac0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a98:	f006 fb50 	bl	800713c <HAL_TIM_Base_Start_IT>
      debounce = true;
 8000a9c:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
      switch_push_button =true;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	701a      	strb	r2, [r3, #0]
      selectFile(&fm);
 8000aa8:	4808      	ldr	r0, [pc, #32]	@ (8000acc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000aaa:	f7ff ffa2 	bl	80009f2 <selectFile>
      init = false;
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
    }
}
 8000ab4:	bf00      	nop
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000099 	.word	0x20000099
 8000ac0:	200003b0 	.word	0x200003b0
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	20000094 	.word	0x20000094
 8000acc:	20000440 	.word	0x20000440
 8000ad0:	20000098 	.word	0x20000098
 8000ad4:	2000009a 	.word	0x2000009a

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
    // reset debounce flag nach Timer5 elapsed
    if (htim == &htim5) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a11      	ldr	r2, [pc, #68]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d105      	bne.n	8000af4 <HAL_TIM_PeriodElapsedCallback+0x1c>
        HAL_TIM_Base_Stop_IT(&htim5);
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000aea:	f006 fb89 	bl	8007200 <HAL_TIM_Base_Stop_IT>
        debounce = false;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
    }
    if (htim == &htim3){
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d110      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x46>
        HAL_TIM_Base_Stop_IT(&htim3);
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000afe:	f006 fb7f 	bl	8007200 <HAL_TIM_Base_Stop_IT>
    	updateScreenFlag = true;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
    	adcDmaFlag = true;
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f06f 0201 	mvn.w	r2, #1
 8000b16:	611a      	str	r2, [r3, #16]
        HAL_TIM_Base_Start_IT(&htim3);
 8000b18:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000b1a:	f006 fb0f 	bl	800713c <HAL_TIM_Base_Start_IT>
    }
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200003b0 	.word	0x200003b0
 8000b2c:	20000099 	.word	0x20000099
 8000b30:	20000368 	.word	0x20000368
 8000b34:	20003b51 	.word	0x20003b51
 8000b38:	20003b50 	.word	0x20003b50

08000b3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a3a      	ldr	r2, [pc, #232]	@ (8000c34 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d16e      	bne.n	8000c2c <HAL_ADC_ConvCpltCallback+0xf0>
		cnt++;
 8000b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b38      	ldr	r3, [pc, #224]	@ (8000c38 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000b58:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < NUM_CHANNELS; i++){
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e00f      	b.n	8000b80 <HAL_ADC_ConvCpltCallback+0x44>
			smoothValue[i]+=adcBuffer[i];
 8000b60:	4a36      	ldr	r2, [pc, #216]	@ (8000c3c <HAL_ADC_ConvCpltCallback+0x100>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b68:	4935      	ldr	r1, [pc, #212]	@ (8000c40 <HAL_ADC_ConvCpltCallback+0x104>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b70:	441a      	add	r2, r3
 8000b72:	4932      	ldr	r1, [pc, #200]	@ (8000c3c <HAL_ADC_ConvCpltCallback+0x100>)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < NUM_CHANNELS; i++){
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	ddec      	ble.n	8000b60 <HAL_ADC_ConvCpltCallback+0x24>
		}
		if(cnt >= SMOOTHING_HEIGHT){
 8000b86:	4b2c      	ldr	r3, [pc, #176]	@ (8000c38 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d94c      	bls.n	8000c2c <HAL_ADC_ConvCpltCallback+0xf0>
			HAL_ADC_Stop_DMA(&hadc1);
 8000b92:	482c      	ldr	r0, [pc, #176]	@ (8000c44 <HAL_ADC_ConvCpltCallback+0x108>)
 8000b94:	f002 f95c 	bl	8002e50 <HAL_ADC_Stop_DMA>
			for(int j = 0; j < NUM_CHANNELS; j++){
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	e02e      	b.n	8000bfc <HAL_ADC_ConvCpltCallback+0xc0>
				currentClassPercentADC[j]=(smoothValue[j]/SMOOTHING_HEIGHT)/41;
 8000b9e:	4a27      	ldr	r2, [pc, #156]	@ (8000c3c <HAL_ADC_ConvCpltCallback+0x100>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <HAL_ADC_ConvCpltCallback+0x10c>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	0c5b      	lsrs	r3, r3, #17
 8000bae:	b2d9      	uxtb	r1, r3
 8000bb0:	4a26      	ldr	r2, [pc, #152]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x110>)
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	460a      	mov	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
				fm.fader_Class[j] = ((smoothValue[j]/SMOOTHING_HEIGHT)/4096.0f);
 8000bba:	4a20      	ldr	r2, [pc, #128]	@ (8000c3c <HAL_ADC_ConvCpltCallback+0x100>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc2:	4a23      	ldr	r2, [pc, #140]	@ (8000c50 <HAL_ADC_ConvCpltCallback+0x114>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	0b5b      	lsrs	r3, r3, #13
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bd2:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000c54 <HAL_ADC_ConvCpltCallback+0x118>
 8000bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bda:	4a1f      	ldr	r2, [pc, #124]	@ (8000c58 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f203 33f2 	addw	r3, r3, #1010	@ 0x3f2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	4413      	add	r3, r2
 8000be6:	3304      	adds	r3, #4
 8000be8:	edc3 7a00 	vstr	s15, [r3]
				smoothValue[j]=0;
 8000bec:	4a13      	ldr	r2, [pc, #76]	@ (8000c3c <HAL_ADC_ConvCpltCallback+0x100>)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 0; j < NUM_CHANNELS; j++){
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	ddcd      	ble.n	8000b9e <HAL_ADC_ConvCpltCallback+0x62>
			}
			cnt=0;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <HAL_ADC_ConvCpltCallback+0xfc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	801a      	strh	r2, [r3, #0]

			sprintf(faderProzent[0], "F1: %u F2: %u",currentClassPercentADC[0], currentClassPercentADC[1]);
 8000c08:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x110>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x110>)
 8000c10:	785b      	ldrb	r3, [r3, #1]
 8000c12:	4912      	ldr	r1, [pc, #72]	@ (8000c5c <HAL_ADC_ConvCpltCallback+0x120>)
 8000c14:	4812      	ldr	r0, [pc, #72]	@ (8000c60 <HAL_ADC_ConvCpltCallback+0x124>)
 8000c16:	f00c fa0d 	bl	800d034 <siprintf>
			sprintf(faderProzent[1], "F3: %u F4: %u",currentClassPercentADC[2], currentClassPercentADC[3]);
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x110>)
 8000c1c:	789b      	ldrb	r3, [r3, #2]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_ADC_ConvCpltCallback+0x110>)
 8000c22:	78db      	ldrb	r3, [r3, #3]
 8000c24:	490f      	ldr	r1, [pc, #60]	@ (8000c64 <HAL_ADC_ConvCpltCallback+0x128>)
 8000c26:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000c28:	f00c fa04 	bl	800d034 <siprintf>
		}
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40012000 	.word	0x40012000
 8000c38:	2000009c 	.word	0x2000009c
 8000c3c:	200000a0 	.word	0x200000a0
 8000c40:	20003b54 	.word	0x20003b54
 8000c44:	20000128 	.word	0x20000128
 8000c48:	1b47afc9 	.word	0x1b47afc9
 8000c4c:	200000bc 	.word	0x200000bc
 8000c50:	45e7b273 	.word	0x45e7b273
 8000c54:	45800000 	.word	0x45800000
 8000c58:	20000440 	.word	0x20000440
 8000c5c:	0800e11c 	.word	0x0800e11c
 8000c60:	200000c4 	.word	0x200000c4
 8000c64:	0800e12c 	.word	0x0800e12c
 8000c68:	200000f6 	.word	0x200000f6

08000c6c <screenInit>:
void screenInit(char (*fileNames)[MAX_FILENAME_LENGTH]){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b0e8      	sub	sp, #416	@ 0x1a0
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000c76:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000c7a:	6018      	str	r0, [r3, #0]
  if (ssd1306_Init(&hi2c1) != 0) {
 8000c7c:	4828      	ldr	r0, [pc, #160]	@ (8000d20 <screenInit+0xb4>)
 8000c7e:	f000 ff3d 	bl	8001afc <ssd1306_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <screenInit+0x20>
  	Error_Handler();
 8000c88:	f000 ff1a 	bl	8001ac0 <Error_Handler>
  }
  HAL_Delay(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c90:	f001 fe76 	bl	8002980 <HAL_Delay>

  ssd1306_Fill(Black);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f001 f849 	bl	8001d2c <ssd1306_Fill>
  ssd1306_UpdateScreen(&hi2c1);
 8000c9a:	4821      	ldr	r0, [pc, #132]	@ (8000d20 <screenInit+0xb4>)
 8000c9c:	f001 f86a 	bl	8001d74 <ssd1306_UpdateScreen>

  HAL_Delay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca4:	f001 fe6c 	bl	8002980 <HAL_Delay>

  init = true;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <screenInit+0xb8>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	701a      	strb	r2, [r3, #0]

  float fileClasses[MAX_FILES][MAX_CLASSES] = {
 8000cae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000cb2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d28 <screenInit+0xbc>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	4611      	mov	r1, r2
 8000cbc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f00c fb5c 	bl	800d37e <memcpy>
      "blizzard.wav", "mountain.wav", "valley.wav", "river.wav", "lake.wav",
      "oasis.wav", "desert.wav", "jungle.wav", "savanna.wav", "grassland.wav",
      "field.wav", "meadow.wav", "flower.wav", "tree.wav", "bush.wav",
      "rock.wav", "cave.wav", "volcano.wav", "earthquake.wav", "tsunami.wav"
  };*/
  for (int i = 1; i < 11; i++) {
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ccc:	e01b      	b.n	8000d06 <screenInit+0x9a>
      addFile(&fm, fileNames[i], fileClasses[i]);
 8000cce:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000ce0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	1899      	adds	r1, r3, r2
 8000ce8:	f107 020c 	add.w	r2, r7, #12
 8000cec:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	4413      	add	r3, r2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <screenInit+0xc0>)
 8000cf8:	f7ff fd80 	bl	80007fc <addFile>
  for (int i = 1; i < 11; i++) {
 8000cfc:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000d00:	3301      	adds	r3, #1
 8000d02:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000d06:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8000d0a:	2b0a      	cmp	r3, #10
 8000d0c:	dddf      	ble.n	8000cce <screenInit+0x62>
  }
  sortFiles();
 8000d0e:	f000 f80f 	bl	8000d30 <sortFiles>
  updateScreen();
 8000d12:	f000 f8bd 	bl	8000e90 <updateScreen>
}
 8000d16:	bf00      	nop
 8000d18:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001d0 	.word	0x200001d0
 8000d24:	2000009a 	.word	0x2000009a
 8000d28:	0800e13c 	.word	0x0800e13c
 8000d2c:	20000440 	.word	0x20000440

08000d30 <sortFiles>:

void sortFiles(void){
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
	float classForWav, classFromFader;
	char* compareFile;
	char* shownFile;
	int res;

	for(int i = 0; i < MAX_FILES; i++){
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	e098      	b.n	8000e6e <sortFiles+0x13e>
		classFulfilled = true;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		fileExists = true;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		for(int j = 0; j < MAX_CLASSES; j++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
 8000d4c:	e02b      	b.n	8000da6 <sortFiles+0x76>
			classForWav = fm.files[i].classes[j];
 8000d4e:	494d      	ldr	r1, [pc, #308]	@ (8000e84 <sortFiles+0x154>)
 8000d50:	6a3a      	ldr	r2, [r7, #32]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3308      	adds	r3, #8
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	617b      	str	r3, [r7, #20]
			classFromFader = fm.fader_Class[j];
 8000d68:	4a46      	ldr	r2, [pc, #280]	@ (8000e84 <sortFiles+0x154>)
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f203 33f2 	addw	r3, r3, #1010	@ 0x3f2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	3304      	adds	r3, #4
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	613b      	str	r3, [r7, #16]
			if(fabsf(classForWav-classFromFader) > THREASHOLD){
 8000d7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d86:	eef0 7ae7 	vabs.f32	s15, s15
 8000d8a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000e88 <sortFiles+0x158>
 8000d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d96:	dd03      	ble.n	8000da0 <sortFiles+0x70>
				classFulfilled = false;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				break;
 8000d9e:	e005      	b.n	8000dac <sortFiles+0x7c>
		for(int j = 0; j < MAX_CLASSES; j++){
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	3301      	adds	r3, #1
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	ddd0      	ble.n	8000d4e <sortFiles+0x1e>
			}
		}
		if(classFulfilled){
 8000dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d02f      	beq.n	8000e14 <sortFiles+0xe4>
			fileExists = false;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			compareFile = fm.files[i].filename;
 8000dba:	6a3a      	ldr	r2, [r7, #32]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <sortFiles+0x154>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
			for(int k = 0; k<fm.num_matched_files; k++){
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	e01b      	b.n	8000e08 <sortFiles+0xd8>
				shownFile = fm.shownFiles[k].filename;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000dde:	4a29      	ldr	r2, [pc, #164]	@ (8000e84 <sortFiles+0x154>)
 8000de0:	4413      	add	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
				res = strcmp(compareFile, shownFile);
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	f7ff f9fa 	bl	80001e0 <strcmp>
 8000dec:	6078      	str	r0, [r7, #4]
				if(res == EXISTS){
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d106      	bne.n	8000e02 <sortFiles+0xd2>
					fileExists = true;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					res = -1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	607b      	str	r3, [r7, #4]
					break;
 8000e00:	e008      	b.n	8000e14 <sortFiles+0xe4>
			for(int k = 0; k<fm.num_matched_files; k++){
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	3301      	adds	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <sortFiles+0x154>)
 8000e0a:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbdd      	blt.n	8000dd0 <sortFiles+0xa0>
				}
			}
		}
		if(!fileExists){
 8000e14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e18:	f083 0301 	eor.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d022      	beq.n	8000e68 <sortFiles+0x138>
			fm.shownFiles[fm.num_matched_files] = fm.files[i];
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <sortFiles+0x154>)
 8000e24:	f8d3 2fc0 	ldr.w	r2, [r3, #4032]	@ 0xfc0
 8000e28:	4916      	ldr	r1, [pc, #88]	@ (8000e84 <sortFiles+0x154>)
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4413      	add	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	440b      	add	r3, r1
 8000e34:	f503 60fa 	add.w	r0, r3, #2000	@ 0x7d0
 8000e38:	4912      	ldr	r1, [pc, #72]	@ (8000e84 <sortFiles+0x154>)
 8000e3a:	6a3a      	ldr	r2, [r7, #32]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	4604      	mov	r4, r0
 8000e48:	461d      	mov	r5, r3
 8000e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e56:	e884 0003 	stmia.w	r4, {r0, r1}
			fm.num_matched_files++;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <sortFiles+0x154>)
 8000e5c:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <sortFiles+0x154>)
 8000e64:	f8c2 3fc0 	str.w	r3, [r2, #4032]	@ 0xfc0
	for(int i = 0; i < MAX_FILES; i++){
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	2b31      	cmp	r3, #49	@ 0x31
 8000e72:	f77f af63 	ble.w	8000d3c <sortFiles+0xc>
		}
	}
	sortFilesFlag = false;
 8000e76:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <sortFiles+0x15c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	@ 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bdb0      	pop	{r4, r5, r7, pc}
 8000e84:	20000440 	.word	0x20000440
 8000e88:	3dcccccd 	.word	0x3dcccccd
 8000e8c:	2000009b 	.word	0x2000009b

08000e90 <updateScreen>:

void updateScreen(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0b4      	sub	sp, #208	@ 0xd0
 8000e94:	af00      	add	r7, sp, #0
	char *filenames[MAX_FILES];
	char *currentFileName;
	for (int i = 0; i < fm.num_files; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000e9c:	e015      	b.n	8000eca <updateScreen+0x3a>
		filenames[i] = fm.shownFiles[i].filename; // Extracting filenames from File structures
 8000e9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000eae:	4a26      	ldr	r2, [pc, #152]	@ (8000f48 <updateScreen+0xb8>)
 8000eb0:	441a      	add	r2, r3
 8000eb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	33d0      	adds	r3, #208	@ 0xd0
 8000eba:	443b      	add	r3, r7
 8000ebc:	f843 2cd0 	str.w	r2, [r3, #-208]
	for (int i = 0; i < fm.num_files; i++) {
 8000ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000eca:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <updateScreen+0xb8>)
 8000ecc:	f8d3 3fbc 	ldr.w	r3, [r3, #4028]	@ 0xfbc
 8000ed0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbe2      	blt.n	8000e9e <updateScreen+0xe>
	}
	if(init){
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <updateScreen+0xbc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <updateScreen+0x58>
		currentFileName = "";
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <updateScreen+0xc0>)
 8000ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000ee6:	e00c      	b.n	8000f02 <updateScreen+0x72>
	}
	else{
	currentFileName = fm.shownFiles[fm.current_file_index].filename;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	@ (8000f48 <updateScreen+0xb8>)
 8000eea:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <updateScreen+0xb8>)
 8000efc:	4413      	add	r3, r2
 8000efe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	}
	displayStrings(&hi2c1, filenames, fm.num_matched_files, fm.cursor_index);
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <updateScreen+0xb8>)
 8000f04:	f8d3 3fc0 	ldr.w	r3, [r3, #4032]	@ 0xfc0
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <updateScreen+0xb8>)
 8000f0c:	f8d3 3fc4 	ldr.w	r3, [r3, #4036]	@ 0xfc4
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4639      	mov	r1, r7
 8000f14:	480f      	ldr	r0, [pc, #60]	@ (8000f54 <updateScreen+0xc4>)
 8000f16:	f7ff fb43 	bl	80005a0 <displayStrings>
	renderSelectedFile(&hi2c1, currentFileName);
 8000f1a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8000f1e:	480d      	ldr	r0, [pc, #52]	@ (8000f54 <updateScreen+0xc4>)
 8000f20:	f7ff fbfc 	bl	800071c <renderSelectedFile>
	drawFaderProzent(&hi2c1, faderProzent[0], 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <updateScreen+0xc8>)
 8000f28:	480a      	ldr	r0, [pc, #40]	@ (8000f54 <updateScreen+0xc4>)
 8000f2a:	f7ff fc27 	bl	800077c <drawFaderProzent>
	drawFaderProzent(&hi2c1, faderProzent[1], 2);
 8000f2e:	2202      	movs	r2, #2
 8000f30:	490a      	ldr	r1, [pc, #40]	@ (8000f5c <updateScreen+0xcc>)
 8000f32:	4808      	ldr	r0, [pc, #32]	@ (8000f54 <updateScreen+0xc4>)
 8000f34:	f7ff fc22 	bl	800077c <drawFaderProzent>


	// Update display
	ssd1306_UpdateScreen(&hi2c1);
 8000f38:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <updateScreen+0xc4>)
 8000f3a:	f000 ff1b 	bl	8001d74 <ssd1306_UpdateScreen>
}
 8000f3e:	bf00      	nop
 8000f40:	37d0      	adds	r7, #208	@ 0xd0
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000440 	.word	0x20000440
 8000f4c:	2000009a 	.word	0x2000009a
 8000f50:	0800e2cc 	.word	0x0800e2cc
 8000f54:	200001d0 	.word	0x200001d0
 8000f58:	200000c4 	.word	0x200000c4
 8000f5c:	200000f6 	.word	0x200000f6

08000f60 <compareADCValues>:

void compareADCValues(void){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	bool faderSettingsChanged= false;
 8000f66:	2300      	movs	r3, #0
 8000f68:	71fb      	strb	r3, [r7, #7]

	for(int i = 0; i < NUM_CHANNELS; i++){
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	e01a      	b.n	8000fa6 <compareADCValues+0x46>
		if(pastClassPercentADC[i] != currentClassPercentADC[i]){
 8000f70:	4a15      	ldr	r2, [pc, #84]	@ (8000fc8 <compareADCValues+0x68>)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	4914      	ldr	r1, [pc, #80]	@ (8000fcc <compareADCValues+0x6c>)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	440b      	add	r3, r1
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d00d      	beq.n	8000fa0 <compareADCValues+0x40>
			pastClassPercentADC[i] = currentClassPercentADC[i];
 8000f84:	4a11      	ldr	r2, [pc, #68]	@ (8000fcc <compareADCValues+0x6c>)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	7819      	ldrb	r1, [r3, #0]
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000fc8 <compareADCValues+0x68>)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
			faderSettingsChanged = true;
 8000f96:	2301      	movs	r3, #1
 8000f98:	71fb      	strb	r3, [r7, #7]
			sortFilesFlag = true;
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <compareADCValues+0x70>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_CHANNELS; i++){
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	dde1      	ble.n	8000f70 <compareADCValues+0x10>
		}
	}
	if(faderSettingsChanged){
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <compareADCValues+0x60>
		safeCurrentFileName(&fm);
 8000fb2:	4808      	ldr	r0, [pc, #32]	@ (8000fd4 <compareADCValues+0x74>)
 8000fb4:	f7ff fca7 	bl	8000906 <safeCurrentFileName>
		resetShownFiles();
 8000fb8:	f000 f80e 	bl	8000fd8 <resetShownFiles>
		faderSettingsChanged = false;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	71fb      	strb	r3, [r7, #7]
	}
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200000b4 	.word	0x200000b4
 8000fcc:	200000bc 	.word	0x200000bc
 8000fd0:	2000009b 	.word	0x2000009b
 8000fd4:	20000440 	.word	0x20000440

08000fd8 <resetShownFiles>:
void resetShownFiles(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    memset(fm.shownFiles, 0, sizeof(fm.shownFiles)); // Setzt den gesamten Speicherbereich auf 0
 8000fdc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <resetShownFiles+0x1c>)
 8000fe4:	f00c f91e 	bl	800d224 <memset>
    fm.num_matched_files = 0;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <resetShownFiles+0x20>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	f8c3 2fc0 	str.w	r2, [r3, #4032]	@ 0xfc0
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000c10 	.word	0x20000c10
 8000ff8:	20000440 	.word	0x20000440

08000ffc <listFiles>:

void listFiles(const char *path)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    // Öffnen des Verzeichnisses
    fres = f_opendir(&dir, "/SamplePool");
 8001004:	492a      	ldr	r1, [pc, #168]	@ (80010b0 <listFiles+0xb4>)
 8001006:	482b      	ldr	r0, [pc, #172]	@ (80010b4 <listFiles+0xb8>)
 8001008:	f00b fcb5 	bl	800c976 <f_opendir>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b29      	ldr	r3, [pc, #164]	@ (80010b8 <listFiles+0xbc>)
 8001012:	701a      	strb	r2, [r3, #0]
    if (fres == FR_OK)
 8001014:	4b28      	ldr	r3, [pc, #160]	@ (80010b8 <listFiles+0xbc>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d144      	bne.n	80010a6 <listFiles+0xaa>
    {
        while (fileCount < MAX_FILES)
 800101c:	e03c      	b.n	8001098 <listFiles+0x9c>
        {
            // Lesen eines Eintrags
            fres = f_readdir(&dir, &fno);
 800101e:	4927      	ldr	r1, [pc, #156]	@ (80010bc <listFiles+0xc0>)
 8001020:	4824      	ldr	r0, [pc, #144]	@ (80010b4 <listFiles+0xb8>)
 8001022:	f00b fd41 	bl	800caa8 <f_readdir>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <listFiles+0xbc>)
 800102c:	701a      	strb	r2, [r3, #0]
            if (fres != FR_OK || fno.fname[0] == 0) break;
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <listFiles+0xbc>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d134      	bne.n	80010a0 <listFiles+0xa4>
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <listFiles+0xc0>)
 8001038:	7d9b      	ldrb	r3, [r3, #22]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d030      	beq.n	80010a0 <listFiles+0xa4>

            // Überprüfen, ob es sich um eine Datei handelt
            if (!(fno.fattrib & AM_DIR))
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <listFiles+0xc0>)
 8001040:	7a1b      	ldrb	r3, [r3, #8]
 8001042:	f003 0310 	and.w	r3, r3, #16
 8001046:	2b00      	cmp	r3, #0
 8001048:	d126      	bne.n	8001098 <listFiles+0x9c>
            {
                // Es ist eine Datei
                char *fileName = fno.fname;
 800104a:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <listFiles+0xc4>)
 800104c:	60fb      	str	r3, [r7, #12]

                // Überprüfen, ob die Datei die Erweiterung .wav hat
                if (strstr(fileName, ".wav") != NULL)
 800104e:	491d      	ldr	r1, [pc, #116]	@ (80010c4 <listFiles+0xc8>)
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f00c f902 	bl	800d25a <strstr>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d01d      	beq.n	8001098 <listFiles+0x9c>
                {
                    // Datei mit .wav Erweiterung, speichern im Array
                    strncpy(fileNamesSDCard[fileCount + 1], fileName, MAX_FILENAME_LENGTH - 1);
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <listFiles+0xcc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	4613      	mov	r3, r2
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	1a9b      	subs	r3, r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4a18      	ldr	r2, [pc, #96]	@ (80010cc <listFiles+0xd0>)
 800106c:	4413      	add	r3, r2
 800106e:	221d      	movs	r2, #29
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	f00c f8de 	bl	800d234 <strncpy>
                    fileNamesSDCard[fileCount][MAX_FILENAME_LENGTH - 1] = '\0'; // Null-terminieren
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <listFiles+0xcc>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4913      	ldr	r1, [pc, #76]	@ (80010cc <listFiles+0xd0>)
 800107e:	4613      	mov	r3, r2
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	1a9b      	subs	r3, r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	440b      	add	r3, r1
 8001088:	331d      	adds	r3, #29
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
                    fileCount++;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <listFiles+0xcc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <listFiles+0xcc>)
 8001096:	6013      	str	r3, [r2, #0]
        while (fileCount < MAX_FILES)
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <listFiles+0xcc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b31      	cmp	r3, #49	@ 0x31
 800109e:	ddbe      	ble.n	800101e <listFiles+0x22>
                }
            }
        }
        f_closedir(&dir);
 80010a0:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <listFiles+0xb8>)
 80010a2:	f00b fcdb 	bl	800ca5c <f_closedir>
    }
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800e2d0 	.word	0x0800e2d0
 80010b4:	2000353c 	.word	0x2000353c
 80010b8:	20003538 	.word	0x20003538
 80010bc:	200023e8 	.word	0x200023e8
 80010c0:	200023fe 	.word	0x200023fe
 80010c4:	0800e2dc 	.word	0x0800e2dc
 80010c8:	20003b4c 	.word	0x20003b4c
 80010cc:	20003570 	.word	0x20003570

080010d0 <writeFileManagerOnSD>:


void writeFileManagerOnSD(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
    FIL file;
    FRESULT fres;
    UINT bytesWritten;

    // Öffnen der Datei im Schreibmodus, nur erstellen, wenn sie nicht existiert
    fres = f_open(&file, "/filemanager_data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80010da:	f107 0318 	add.w	r3, r7, #24
 80010de:	3b14      	subs	r3, #20
 80010e0:	220a      	movs	r2, #10
 80010e2:	4928      	ldr	r1, [pc, #160]	@ (8001184 <writeFileManagerOnSD+0xb4>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00a fee3 	bl	800beb0 <f_open>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80010f0:	f102 0217 	add.w	r2, r2, #23
 80010f4:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80010f6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80010fa:	f103 0317 	add.w	r3, r3, #23
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d009      	beq.n	8001118 <writeFileManagerOnSD+0x48>
    {
        // Fehler beim Öffnen/Erstellen der Datei
        printf("Fehler beim Öffnen/Erstellen der Datei: %d\n", fres);
 8001104:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001108:	f103 0317 	add.w	r3, r3, #23
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	4619      	mov	r1, r3
 8001110:	481d      	ldr	r0, [pc, #116]	@ (8001188 <writeFileManagerOnSD+0xb8>)
 8001112:	f00b feeb 	bl	800ceec <iprintf>
        return;
 8001116:	e02f      	b.n	8001178 <writeFileManagerOnSD+0xa8>
    }

    // Schreiben der Daten in die Datei
    fres = f_write(&file, &fm, sizeof(FileManager), &bytesWritten);
 8001118:	f107 0318 	add.w	r3, r7, #24
 800111c:	3b18      	subs	r3, #24
 800111e:	f107 0018 	add.w	r0, r7, #24
 8001122:	3814      	subs	r0, #20
 8001124:	f640 72d4 	movw	r2, #4052	@ 0xfd4
 8001128:	4918      	ldr	r1, [pc, #96]	@ (800118c <writeFileManagerOnSD+0xbc>)
 800112a:	f00b f9e8 	bl	800c4fe <f_write>
 800112e:	4603      	mov	r3, r0
 8001130:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001134:	f102 0217 	add.w	r2, r2, #23
 8001138:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytesWritten != sizeof(FileManager))
 800113a:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800113e:	f103 0317 	add.w	r3, r3, #23
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d107      	bne.n	8001158 <writeFileManagerOnSD+0x88>
 8001148:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800114c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001150:	f640 72d4 	movw	r2, #4052	@ 0xfd4
 8001154:	4293      	cmp	r3, r2
 8001156:	d009      	beq.n	800116c <writeFileManagerOnSD+0x9c>
    {
        // Fehler beim Schreiben der Daten
        printf("Fehler beim Schreiben der Daten\n");
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <writeFileManagerOnSD+0xc0>)
 800115a:	f00b ff2f 	bl	800cfbc <puts>
        f_close(&file);
 800115e:	f107 0318 	add.w	r3, r7, #24
 8001162:	3b14      	subs	r3, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f00b fbdc 	bl	800c922 <f_close>
        return;
 800116a:	e005      	b.n	8001178 <writeFileManagerOnSD+0xa8>
    }

    // Datei schließen
    f_close(&file);
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	3b14      	subs	r3, #20
 8001172:	4618      	mov	r0, r3
 8001174:	f00b fbd5 	bl	800c922 <f_close>
}
 8001178:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800e2e4 	.word	0x0800e2e4
 8001188:	0800e2fc 	.word	0x0800e2fc
 800118c:	20000440 	.word	0x20000440
 8001190:	0800e32c 	.word	0x0800e32c

08001194 <readFileManagerFromSD>:

void readFileManagerFromSD(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
    FIL file;
    FRESULT fres;
    UINT bytesRead;

    // Öffnen der Datei im Lese-Modus
    fres = f_open(&file, "/filemanager_data.bin", FA_READ);
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	3b14      	subs	r3, #20
 80011a4:	2201      	movs	r2, #1
 80011a6:	4928      	ldr	r1, [pc, #160]	@ (8001248 <readFileManagerFromSD+0xb4>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00a fe81 	bl	800beb0 <f_open>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80011b4:	f102 0217 	add.w	r2, r2, #23
 80011b8:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 80011ba:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80011be:	f103 0317 	add.w	r3, r3, #23
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <readFileManagerFromSD+0x48>
    {
        // Fehler beim Öffnen der Datei
        printf("Fehler beim Öffnen der Datei: %d\n", fres);
 80011c8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80011cc:	f103 0317 	add.w	r3, r3, #23
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	481d      	ldr	r0, [pc, #116]	@ (800124c <readFileManagerFromSD+0xb8>)
 80011d6:	f00b fe89 	bl	800ceec <iprintf>
        return;
 80011da:	e02f      	b.n	800123c <readFileManagerFromSD+0xa8>
    }

    // Lesen der Daten aus der Datei
    fres = f_read(&file, &fmCopy, sizeof(FileManager), &bytesRead);
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	3b18      	subs	r3, #24
 80011e2:	f107 0018 	add.w	r0, r7, #24
 80011e6:	3814      	subs	r0, #20
 80011e8:	f640 72d4 	movw	r2, #4052	@ 0xfd4
 80011ec:	4918      	ldr	r1, [pc, #96]	@ (8001250 <readFileManagerFromSD+0xbc>)
 80011ee:	f00b f827 	bl	800c240 <f_read>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80011f8:	f102 0217 	add.w	r2, r2, #23
 80011fc:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK || bytesRead != sizeof(FileManager))
 80011fe:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001202:	f103 0317 	add.w	r3, r3, #23
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d107      	bne.n	800121c <readFileManagerFromSD+0x88>
 800120c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001210:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001214:	f640 72d4 	movw	r2, #4052	@ 0xfd4
 8001218:	4293      	cmp	r3, r2
 800121a:	d009      	beq.n	8001230 <readFileManagerFromSD+0x9c>
    {
        // Fehler beim Lesen der Daten
        printf("Fehler beim Lesen der Daten\n");
 800121c:	480d      	ldr	r0, [pc, #52]	@ (8001254 <readFileManagerFromSD+0xc0>)
 800121e:	f00b fecd 	bl	800cfbc <puts>
        f_close(&file);
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	3b14      	subs	r3, #20
 8001228:	4618      	mov	r0, r3
 800122a:	f00b fb7a 	bl	800c922 <f_close>
        return;
 800122e:	e005      	b.n	800123c <readFileManagerFromSD+0xa8>
    }

    // Datei schließen
    f_close(&file);
 8001230:	f107 0318 	add.w	r3, r7, #24
 8001234:	3b14      	subs	r3, #20
 8001236:	4618      	mov	r0, r3
 8001238:	f00b fb73 	bl	800c922 <f_close>
}
 800123c:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	0800e34c 	.word	0x0800e34c
 800124c:	0800e364 	.word	0x0800e364
 8001250:	20001414 	.word	0x20001414
 8001254:	0800e388 	.word	0x0800e388

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125c:	f001 fb1e 	bl	800289c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001260:	f000 f87c 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001264:	f000 fb00 	bl	8001868 <MX_GPIO_Init>
  MX_DMA_Init();
 8001268:	f000 face 	bl	8001808 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800126c:	f000 faa2 	bl	80017b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001270:	f000 f994 	bl	800159c <MX_I2C1_Init>
  MX_TIM5_Init();
 8001274:	f000 fa48 	bl	8001708 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001278:	f000 f8dc 	bl	8001434 <MX_ADC1_Init>
  MX_TIM3_Init();
 800127c:	f000 f9ec 	bl	8001658 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 8001280:	f000 f9ba 	bl	80015f8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001284:	f008 f85e 	bl	8009344 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  //Start DMA for Read Faders
  HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
 8001288:	2205      	movs	r2, #5
 800128a:	4926      	ldr	r1, [pc, #152]	@ (8001324 <main+0xcc>)
 800128c:	4826      	ldr	r0, [pc, #152]	@ (8001328 <main+0xd0>)
 800128e:	f001 fcef 	bl	8002c70 <HAL_ADC_Start_DMA>


  //Open the file system
  fres = f_mount(&FatFs, SDPath, 1); //1=mount now
 8001292:	2201      	movs	r2, #1
 8001294:	4925      	ldr	r1, [pc, #148]	@ (800132c <main+0xd4>)
 8001296:	4826      	ldr	r0, [pc, #152]	@ (8001330 <main+0xd8>)
 8001298:	f00a fdc4 	bl	800be24 <f_mount>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <main+0xdc>)
 80012a2:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 80012a4:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <main+0xdc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <main+0x58>
      //uart_printf("f_mount error (%i)\r\n", fres);
      while(1);
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <main+0x54>
  }
  //creatFileManagerFile();

  listFiles("/");
 80012b0:	4821      	ldr	r0, [pc, #132]	@ (8001338 <main+0xe0>)
 80012b2:	f7ff fea3 	bl	8000ffc <listFiles>
  writeStringToFile("/test.txt", "hallo hallo");
 80012b6:	4921      	ldr	r1, [pc, #132]	@ (800133c <main+0xe4>)
 80012b8:	4821      	ldr	r0, [pc, #132]	@ (8001340 <main+0xe8>)
 80012ba:	f000 fb83 	bl	80019c4 <writeStringToFile>
  if (fres != FR_OK) {
      //uart_printf("f_mount error (%i)\r\n", fres);
      while(1);
  }*/
  // Init lcd using one of the stm32HAL i2c typedefs
  screenInit(fileNamesSDCard);
 80012be:	4821      	ldr	r0, [pc, #132]	@ (8001344 <main+0xec>)
 80012c0:	f7ff fcd4 	bl	8000c6c <screenInit>

  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80012c4:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <main+0xf0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f06f 0201 	mvn.w	r2, #1
 80012cc:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim3);
 80012ce:	481e      	ldr	r0, [pc, #120]	@ (8001348 <main+0xf0>)
 80012d0:	f005 ff34 	bl	800713c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { 
    // Displaying the files
	if(updateScreenFlag){
 80012d4:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <main+0xf4>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0fb      	beq.n	80012d4 <main+0x7c>
		compareADCValues();
 80012dc:	f7ff fe40 	bl	8000f60 <compareADCValues>
		updateScreenFlag = false;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <main+0xf4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
		if(sortFilesFlag == true){
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <main+0xf8>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <main+0xa6>
		sortFiles();
 80012ee:	f7ff fd1f 	bl	8000d30 <sortFiles>
		setCursor(&fm);
 80012f2:	4818      	ldr	r0, [pc, #96]	@ (8001354 <main+0xfc>)
 80012f4:	f7ff fb20 	bl	8000938 <setCursor>
		sortFilesFlag = false;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <main+0xf8>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
		}
		updateScreen();
 80012fe:	f7ff fdc7 	bl	8000e90 <updateScreen>
		writeFileManagerOnSD();
 8001302:	f7ff fee5 	bl	80010d0 <writeFileManagerOnSD>
		readFileManagerFromSD();
 8001306:	f7ff ff45 	bl	8001194 <readFileManagerFromSD>
		if(adcDmaFlag){
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <main+0x100>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0e0      	beq.n	80012d4 <main+0x7c>
	    HAL_ADC_Start_DMA(&hadc1, adcBuffer, NUM_CHANNELS);
 8001312:	2205      	movs	r2, #5
 8001314:	4903      	ldr	r1, [pc, #12]	@ (8001324 <main+0xcc>)
 8001316:	4804      	ldr	r0, [pc, #16]	@ (8001328 <main+0xd0>)
 8001318:	f001 fcaa 	bl	8002c70 <HAL_ADC_Start_DMA>
	    adcDmaFlag = false;
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <main+0x100>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
	if(updateScreenFlag){
 8001322:	e7d7      	b.n	80012d4 <main+0x7c>
 8001324:	20003b54 	.word	0x20003b54
 8001328:	20000128 	.word	0x20000128
 800132c:	2000437c 	.word	0x2000437c
 8001330:	20002500 	.word	0x20002500
 8001334:	20003538 	.word	0x20003538
 8001338:	0800e3a4 	.word	0x0800e3a4
 800133c:	0800e3a8 	.word	0x0800e3a8
 8001340:	0800e3b4 	.word	0x0800e3b4
 8001344:	20003570 	.word	0x20003570
 8001348:	20000368 	.word	0x20000368
 800134c:	20003b51 	.word	0x20003b51
 8001350:	2000009b 	.word	0x2000009b
 8001354:	20000440 	.word	0x20000440
 8001358:	20003b50 	.word	0x20003b50

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	@ 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	@ 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00b ff5a 	bl	800d224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <SystemClock_Config+0xd0>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	4a28      	ldr	r2, [pc, #160]	@ (800142c <SystemClock_Config+0xd0>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001390:	4b26      	ldr	r3, [pc, #152]	@ (800142c <SystemClock_Config+0xd0>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <SystemClock_Config+0xd4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013a8:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <SystemClock_Config+0xd4>)
 80013aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <SystemClock_Config+0xd4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c4:	2310      	movs	r3, #16
 80013c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013d0:	2310      	movs	r3, #16
 80013d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013da:	2304      	movs	r3, #4
 80013dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013de:	2307      	movs	r3, #7
 80013e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e2:	f107 0320 	add.w	r3, r7, #32
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fd7a 	bl	8004ee0 <HAL_RCC_OscConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013f2:	f000 fb65 	bl	8001ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f6:	230f      	movs	r3, #15
 80013f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fa:	2302      	movs	r3, #2
 80013fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001406:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2102      	movs	r1, #2
 8001412:	4618      	mov	r0, r3
 8001414:	f003 ffdc 	bl	80053d0 <HAL_RCC_ClockConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800141e:	f000 fb4f 	bl	8001ac0 <Error_Handler>
  }
}
 8001422:	bf00      	nop
 8001424:	3750      	adds	r7, #80	@ 0x50
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40007000 	.word	0x40007000

08001434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	@ 0x30
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001448:	463b      	mov	r3, r7
 800144a:	2220      	movs	r2, #32
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00b fee8 	bl	800d224 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001454:	4b4d      	ldr	r3, [pc, #308]	@ (800158c <MX_ADC1_Init+0x158>)
 8001456:	4a4e      	ldr	r2, [pc, #312]	@ (8001590 <MX_ADC1_Init+0x15c>)
 8001458:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800145a:	4b4c      	ldr	r3, [pc, #304]	@ (800158c <MX_ADC1_Init+0x158>)
 800145c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001460:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001462:	4b4a      	ldr	r3, [pc, #296]	@ (800158c <MX_ADC1_Init+0x158>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001468:	4b48      	ldr	r3, [pc, #288]	@ (800158c <MX_ADC1_Init+0x158>)
 800146a:	2201      	movs	r2, #1
 800146c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800146e:	4b47      	ldr	r3, [pc, #284]	@ (800158c <MX_ADC1_Init+0x158>)
 8001470:	2201      	movs	r2, #1
 8001472:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001474:	4b45      	ldr	r3, [pc, #276]	@ (800158c <MX_ADC1_Init+0x158>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800147c:	4b43      	ldr	r3, [pc, #268]	@ (800158c <MX_ADC1_Init+0x158>)
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001482:	4b42      	ldr	r3, [pc, #264]	@ (800158c <MX_ADC1_Init+0x158>)
 8001484:	4a43      	ldr	r2, [pc, #268]	@ (8001594 <MX_ADC1_Init+0x160>)
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001488:	4b40      	ldr	r3, [pc, #256]	@ (800158c <MX_ADC1_Init+0x158>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800148e:	4b3f      	ldr	r3, [pc, #252]	@ (800158c <MX_ADC1_Init+0x158>)
 8001490:	2205      	movs	r2, #5
 8001492:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001494:	4b3d      	ldr	r3, [pc, #244]	@ (800158c <MX_ADC1_Init+0x158>)
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800149c:	4b3b      	ldr	r3, [pc, #236]	@ (800158c <MX_ADC1_Init+0x158>)
 800149e:	2201      	movs	r2, #1
 80014a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a2:	483a      	ldr	r0, [pc, #232]	@ (800158c <MX_ADC1_Init+0x158>)
 80014a4:	f001 fa90 	bl	80029c8 <HAL_ADC_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80014ae:	f000 fb07 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014b2:	2306      	movs	r3, #6
 80014b4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80014b6:	2301      	movs	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	4619      	mov	r1, r3
 80014c4:	4831      	ldr	r0, [pc, #196]	@ (800158c <MX_ADC1_Init+0x158>)
 80014c6:	f001 fd3b 	bl	8002f40 <HAL_ADC_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80014d0:	f000 faf6 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80014d4:	2307      	movs	r3, #7
 80014d6:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80014d8:	2302      	movs	r3, #2
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4619      	mov	r1, r3
 80014e2:	482a      	ldr	r0, [pc, #168]	@ (800158c <MX_ADC1_Init+0x158>)
 80014e4:	f001 fd2c 	bl	8002f40 <HAL_ADC_ConfigChannel>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80014ee:	f000 fae7 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014f2:	2308      	movs	r3, #8
 80014f4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80014f6:	2303      	movs	r3, #3
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	4619      	mov	r1, r3
 8001500:	4822      	ldr	r0, [pc, #136]	@ (800158c <MX_ADC1_Init+0x158>)
 8001502:	f001 fd1d 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800150c:	f000 fad8 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001510:	2309      	movs	r3, #9
 8001512:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 8001514:	2304      	movs	r3, #4
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4619      	mov	r1, r3
 800151e:	481b      	ldr	r0, [pc, #108]	@ (800158c <MX_ADC1_Init+0x158>)
 8001520:	f001 fd0e 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800152a:	f000 fac9 	bl	8001ac0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800152e:	230a      	movs	r3, #10
 8001530:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 8001532:	2305      	movs	r3, #5
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4619      	mov	r1, r3
 800153c:	4813      	ldr	r0, [pc, #76]	@ (800158c <MX_ADC1_Init+0x158>)
 800153e:	f001 fcff 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001548:	f000 faba 	bl	8001ac0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800154c:	2306      	movs	r3, #6
 800154e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8001550:	2301      	movs	r3, #1
 8001552:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <MX_ADC1_Init+0x164>)
 8001562:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_ADC1_Init+0x158>)
 8001576:	f001 ff8d 	bl	8003494 <HAL_ADCEx_InjectedConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001580:	f000 fa9e 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3730      	adds	r7, #48	@ 0x30
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000128 	.word	0x20000128
 8001590:	40012000 	.word	0x40012000
 8001594:	0f000001 	.word	0x0f000001
 8001598:	000f0001 	.word	0x000f0001

0800159c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015a2:	4a13      	ldr	r2, [pc, #76]	@ (80015f0 <MX_I2C1_Init+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015a8:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <MX_I2C1_Init+0x58>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015cc:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d8:	4804      	ldr	r0, [pc, #16]	@ (80015ec <MX_I2C1_Init+0x50>)
 80015da:	f002 ffd3 	bl	8004584 <HAL_I2C_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015e4:	f000 fa6c 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200001d0 	.word	0x200001d0
 80015f0:	40005400 	.word	0x40005400
 80015f4:	000186a0 	.word	0x000186a0

080015f8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 80015fe:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <MX_SDIO_SD_Init+0x5c>)
 8001600:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001614:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800161a:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001620:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8001626:	480a      	ldr	r0, [pc, #40]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 8001628:	f004 f8f2 	bl	8005810 <HAL_SD_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8001632:	f000 fa45 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8001636:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_SDIO_SD_Init+0x58>)
 800163c:	f005 f86c 	bl	8006718 <HAL_SD_ConfigWideBusOperation>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 fa3b 	bl	8001ac0 <Error_Handler>
  }

  /* USER CODE END SDIO_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000224 	.word	0x20000224
 8001654:	40012c00 	.word	0x40012c00

08001658 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <MX_TIM3_Init+0xa8>)
 8001676:	4a23      	ldr	r2, [pc, #140]	@ (8001704 <MX_TIM3_Init+0xac>)
 8001678:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680;
 800167a:	4b21      	ldr	r3, [pc, #132]	@ (8001700 <MX_TIM3_Init+0xa8>)
 800167c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8001680:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <MX_TIM3_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001688:	4b1d      	ldr	r3, [pc, #116]	@ (8001700 <MX_TIM3_Init+0xa8>)
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <MX_TIM3_Init+0xa8>)
 8001692:	2200      	movs	r2, #0
 8001694:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <MX_TIM3_Init+0xa8>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800169c:	4818      	ldr	r0, [pc, #96]	@ (8001700 <MX_TIM3_Init+0xa8>)
 800169e:	f005 fcfd 	bl	800709c <HAL_TIM_Base_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016a8:	f000 fa0a 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	4619      	mov	r1, r3
 80016b8:	4811      	ldr	r0, [pc, #68]	@ (8001700 <MX_TIM3_Init+0xa8>)
 80016ba:	f005 ff1a 	bl	80074f2 <HAL_TIM_ConfigClockSource>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016c4:	f000 f9fc 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80016c8:	2108      	movs	r1, #8
 80016ca:	480d      	ldr	r0, [pc, #52]	@ (8001700 <MX_TIM3_Init+0xa8>)
 80016cc:	f005 fdc7 	bl	800725e <HAL_TIM_OnePulse_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016d6:	f000 f9f3 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e2:	463b      	mov	r3, r7
 80016e4:	4619      	mov	r1, r3
 80016e6:	4806      	ldr	r0, [pc, #24]	@ (8001700 <MX_TIM3_Init+0xa8>)
 80016e8:	f006 f918 	bl	800791c <HAL_TIMEx_MasterConfigSynchronization>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80016f2:	f000 f9e5 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000368 	.word	0x20000368
 8001704:	40000400 	.word	0x40000400

08001708 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001724:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_TIM5_Init+0xa4>)
 8001726:	4a22      	ldr	r2, [pc, #136]	@ (80017b0 <MX_TIM5_Init+0xa8>)
 8001728:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 100;
 800172a:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <MX_TIM5_Init+0xa4>)
 800172c:	2264      	movs	r2, #100	@ 0x64
 800172e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <MX_TIM5_Init+0xa4>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 8400;
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_TIM5_Init+0xa4>)
 8001738:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 800173c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_TIM5_Init+0xa4>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_TIM5_Init+0xa4>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800174a:	4818      	ldr	r0, [pc, #96]	@ (80017ac <MX_TIM5_Init+0xa4>)
 800174c:	f005 fca6 	bl	800709c <HAL_TIM_Base_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001756:	f000 f9b3 	bl	8001ac0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800175e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	4619      	mov	r1, r3
 8001766:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_TIM5_Init+0xa4>)
 8001768:	f005 fec3 	bl	80074f2 <HAL_TIM_ConfigClockSource>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001772:	f000 f9a5 	bl	8001ac0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8001776:	2108      	movs	r1, #8
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <MX_TIM5_Init+0xa4>)
 800177a:	f005 fd70 	bl	800725e <HAL_TIM_OnePulse_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001784:	f000 f99c 	bl	8001ac0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_TIM5_Init+0xa4>)
 8001796:	f006 f8c1 	bl	800791c <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80017a0:	f000 f98e 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200003b0 	.word	0x200003b0
 80017b0:	40000c00 	.word	0x40000c00

080017b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <MX_USART2_UART_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_USART2_UART_Init+0x4c>)
 80017ec:	f006 f918 	bl	8007a20 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017f6:	f000 f963 	bl	8001ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200003f8 	.word	0x200003f8
 8001804:	40004400 	.word	0x40004400

08001808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_DMA_Init+0x5c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <MX_DMA_Init+0x5c>)
 8001818:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_DMA_Init+0x5c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2038      	movs	r0, #56	@ 0x38
 8001830:	f002 f8a1 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001834:	2038      	movs	r0, #56	@ 0x38
 8001836:	f002 f8ba 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800183a:	2200      	movs	r2, #0
 800183c:	2100      	movs	r1, #0
 800183e:	203b      	movs	r0, #59	@ 0x3b
 8001840:	f002 f899 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001844:	203b      	movs	r0, #59	@ 0x3b
 8001846:	f002 f8b2 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2100      	movs	r1, #0
 800184e:	2045      	movs	r0, #69	@ 0x45
 8001850:	f002 f891 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001854:	2045      	movs	r0, #69	@ 0x45
 8001856:	f002 f8aa 	bl	80039ae <HAL_NVIC_EnableIRQ>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800

08001868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	@ 0x28
 800186c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b4d      	ldr	r3, [pc, #308]	@ (80019b8 <MX_GPIO_Init+0x150>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a4c      	ldr	r2, [pc, #304]	@ (80019b8 <MX_GPIO_Init+0x150>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <MX_GPIO_Init+0x150>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a45      	ldr	r2, [pc, #276]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	4b3f      	ldr	r3, [pc, #252]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a3e      	ldr	r2, [pc, #248]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b3c      	ldr	r3, [pc, #240]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a37      	ldr	r2, [pc, #220]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b35      	ldr	r3, [pc, #212]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	4a30      	ldr	r2, [pc, #192]	@ (80019b8 <MX_GPIO_Init+0x150>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fe:	4b2e      	ldr	r3, [pc, #184]	@ (80019b8 <MX_GPIO_Init+0x150>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2120      	movs	r1, #32
 800190e:	482b      	ldr	r0, [pc, #172]	@ (80019bc <MX_GPIO_Init+0x154>)
 8001910:	f002 fe06 	bl	8004520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800191a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800191e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	4825      	ldr	r0, [pc, #148]	@ (80019c0 <MX_GPIO_Init+0x158>)
 800192c:	f002 fc5c 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : enc_a_clk_in1_Pin enc_switch_in3_Pin */
  GPIO_InitStruct.Pin = enc_a_clk_in1_Pin|enc_switch_in3_Pin;
 8001930:	2311      	movs	r3, #17
 8001932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001934:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193a:	2301      	movs	r3, #1
 800193c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	481d      	ldr	r0, [pc, #116]	@ (80019bc <MX_GPIO_Init+0x154>)
 8001946:	f002 fc4f 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : enc_b_dt_in2_Pin */
  GPIO_InitStruct.Pin = enc_b_dt_in2_Pin;
 800194a:	2302      	movs	r3, #2
 800194c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(enc_b_dt_in2_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	4817      	ldr	r0, [pc, #92]	@ (80019bc <MX_GPIO_Init+0x154>)
 800195e:	f002 fc43 	bl	80041e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001962:	2320      	movs	r3, #32
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4810      	ldr	r0, [pc, #64]	@ (80019bc <MX_GPIO_Init+0x154>)
 800197a:	f002 fc35 	bl	80041e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2006      	movs	r0, #6
 8001984:	f001 fff7 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001988:	2006      	movs	r0, #6
 800198a:	f002 f810 	bl	80039ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	200a      	movs	r0, #10
 8001994:	f001 ffef 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001998:	200a      	movs	r0, #10
 800199a:	f002 f808 	bl	80039ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2028      	movs	r0, #40	@ 0x28
 80019a4:	f001 ffe7 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019a8:	2028      	movs	r0, #40	@ 0x28
 80019aa:	f002 f800 	bl	80039ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	40020800 	.word	0x40020800

080019c4 <writeStringToFile>:

/* USER CODE BEGIN 4 */
void writeStringToFile(const char *filename, const char *str)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019d0:	f843 0c3c 	str.w	r0, [r3, #-60]
 80019d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019d8:	f843 1c40 	str.w	r1, [r3, #-64]
	FIL file;        // FatFs File-Objekt
	FRESULT res;     // FatFs Ergebniscode
	UINT bytesWritten; // Anzahl der geschriebenen Bytes

    // Datei im Schreibmodus öffnen oder erstellen
    res = f_open(&file, "test.txt", FA_WRITE | FA_CREATE_ALWAYS);
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	3b14      	subs	r3, #20
 80019e2:	220a      	movs	r2, #10
 80019e4:	4931      	ldr	r1, [pc, #196]	@ (8001aac <writeStringToFile+0xe8>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00a fa62 	bl	800beb0 <f_open>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80019f2:	f102 021f 	add.w	r2, r2, #31
 80019f6:	7013      	strb	r3, [r2, #0]
    if (res != FR_OK)
 80019f8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80019fc:	f103 031f 	add.w	r3, r3, #31
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00e      	beq.n	8001a24 <writeStringToFile+0x60>
    {
        printf("Fehler beim Öffnen/Erstellen der Datei %s: %d\n", filename, res);
 8001a06:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a0a:	f103 031f 	add.w	r3, r3, #31
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a14:	4611      	mov	r1, r2
 8001a16:	461a      	mov	r2, r3
 8001a18:	f851 1c3c 	ldr.w	r1, [r1, #-60]
 8001a1c:	4824      	ldr	r0, [pc, #144]	@ (8001ab0 <writeStringToFile+0xec>)
 8001a1e:	f00b fa65 	bl	800ceec <iprintf>
        return;
 8001a22:	e03e      	b.n	8001aa2 <writeStringToFile+0xde>
    }

    // String in die Datei schreiben
    res = f_write(&file, "Das", 4, &bytesWritten);
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	3b18      	subs	r3, #24
 8001a2a:	f107 0020 	add.w	r0, r7, #32
 8001a2e:	3814      	subs	r0, #20
 8001a30:	2204      	movs	r2, #4
 8001a32:	4920      	ldr	r1, [pc, #128]	@ (8001ab4 <writeStringToFile+0xf0>)
 8001a34:	f00a fd63 	bl	800c4fe <f_write>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001a3e:	f102 021f 	add.w	r2, r2, #31
 8001a42:	7013      	strb	r3, [r2, #0]

 if (res != FR_OK || bytesWritten != strlen(str))
 8001a44:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a48:	f103 031f 	add.w	r3, r3, #31
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <writeStringToFile+0xa8>
 8001a52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a56:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001a5a:	f7fe fbcb 	bl	80001f4 <strlen>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a64:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d00d      	beq.n	8001a88 <writeStringToFile+0xc4>
    {
        printf("Fehler beim Schreiben der Daten in die Datei %s\n", filename);
 8001a6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a70:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8001a74:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <writeStringToFile+0xf4>)
 8001a76:	f00b fa39 	bl	800ceec <iprintf>
        f_close(&file);
 8001a7a:	f107 0320 	add.w	r3, r7, #32
 8001a7e:	3b14      	subs	r3, #20
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00a ff4e 	bl	800c922 <f_close>
        return;
 8001a86:	e00c      	b.n	8001aa2 <writeStringToFile+0xde>
    }

    // Datei schließen
    f_close(&file);
 8001a88:	f107 0320 	add.w	r3, r7, #32
 8001a8c:	3b14      	subs	r3, #20
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00a ff47 	bl	800c922 <f_close>

    printf("String erfolgreich in Datei '%s' geschrieben.\n", filename);
 8001a94:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a98:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8001a9c:	4807      	ldr	r0, [pc, #28]	@ (8001abc <writeStringToFile+0xf8>)
 8001a9e:	f00b fa25 	bl	800ceec <iprintf>
}
 8001aa2:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	0800e3c0 	.word	0x0800e3c0
 8001ab0:	0800e3cc 	.word	0x0800e3cc
 8001ab4:	0800e3fc 	.word	0x0800e3fc
 8001ab8:	0800e400 	.word	0x0800e400
 8001abc:	0800e434 	.word	0x0800e434

08001ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac4:	b672      	cpsid	i
}
 8001ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <Error_Handler+0x8>

08001acc <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static uint8_t ssd1306_WriteCommand(I2C_HandleTypeDef *hi2c, uint8_t command)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af04      	add	r7, sp, #16
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]
    return HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001ad8:	230a      	movs	r3, #10
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	2301      	movs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	1cfb      	adds	r3, r7, #3
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2178      	movs	r1, #120	@ 0x78
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f002 fe8e 	bl	800480c <HAL_I2C_Mem_Write>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <ssd1306_Init>:

//
//  Initialize the oled screen
//
uint8_t ssd1306_Init(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    // Wait for the screen to boot
    HAL_Delay(100);
 8001b04:	2064      	movs	r0, #100	@ 0x64
 8001b06:	f000 ff3b 	bl	8002980 <HAL_Delay>
    int status = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]

    // Init LCD

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYOFF);               // 0xAE
 8001b0e:	21ae      	movs	r1, #174	@ 0xae
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffdb 	bl	8001acc <ssd1306_WriteCommand>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYCLOCKDIV);
 8001b20:	21d5      	movs	r1, #213	@ 0xd5
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffd2 	bl	8001acc <ssd1306_WriteCommand>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4413      	add	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x51); // 0xd5, 0x51,
 8001b32:	2151      	movs	r1, #81	@ 0x51
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ffc9 	bl	8001acc <ssd1306_WriteCommand>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_MEMORYMODE);
 8001b44:	2120      	movs	r1, #32
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffc0 	bl	8001acc <ssd1306_WriteCommand>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
status += ssd1306_WriteCommand(hi2c, 0x00); // 0x00 for Horizontal addressing mode
 8001b56:	2100      	movs	r1, #0
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ffb7 	bl	8001acc <ssd1306_WriteCommand>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4413      	add	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETCONTRAST); 
 8001b68:	2181      	movs	r1, #129	@ 0x81
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffae 	bl	8001acc <ssd1306_WriteCommand>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4413      	add	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x4F);       // 0x81, 0x4F
 8001b7a:	214f      	movs	r1, #79	@ 0x4f
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ffa5 	bl	8001acc <ssd1306_WriteCommand>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DCDC) ;
 8001b8c:	21ad      	movs	r1, #173	@ 0xad
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff9c 	bl	8001acc <ssd1306_WriteCommand>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x8A);               // 0xAD, 0x8A
 8001b9e:	218a      	movs	r1, #138	@ 0x8a
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff93 	bl	8001acc <ssd1306_WriteCommand>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	461a      	mov	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SEGREMAP);                 // 0xA0
 8001bb0:	21a0      	movs	r1, #160	@ 0xa0
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff8a 	bl	8001acc <ssd1306_WriteCommand>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_COMSCANINC);               // 0xC0
 8001bc2:	21c0      	movs	r1, #192	@ 0xc0
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff81 	bl	8001acc <ssd1306_WriteCommand>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPSTARTLINE);
 8001bd4:	21dc      	movs	r1, #220	@ 0xdc
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff78 	bl	8001acc <ssd1306_WriteCommand>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x0);    // 0xDC 0x00
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff6f 	bl	8001acc <ssd1306_WriteCommand>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 8001bf8:	21d3      	movs	r1, #211	@ 0xd3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff66 	bl	8001acc <ssd1306_WriteCommand>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x60);   // 0xd3, 0x60,
 8001c0a:	2160      	movs	r1, #96	@ 0x60
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff5d 	bl	8001acc <ssd1306_WriteCommand>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4413      	add	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPRECHARGE); 
 8001c1c:	21d9      	movs	r1, #217	@ 0xd9
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff54 	bl	8001acc <ssd1306_WriteCommand>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x22);       // 0xd9, 0x22,
 8001c2e:	2122      	movs	r1, #34	@ 0x22
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff4b 	bl	8001acc <ssd1306_WriteCommand>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETVCOMDETECT); 
 8001c40:	21db      	movs	r1, #219	@ 0xdb
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ff42 	bl	8001acc <ssd1306_WriteCommand>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x35);      // 0xdb, 0x35,
 8001c52:	2135      	movs	r1, #53	@ 0x35
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff39 	bl	8001acc <ssd1306_WriteCommand>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETPAGEADDR);                  // 0xb0
 8001c64:	21b0      	movs	r1, #176	@ 0xb0
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ff30 	bl	8001acc <ssd1306_WriteCommand>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

    // status += ssd1306_WriteCommand(hi2c, H110X_SETCOMPINS);
    // status += ssd1306_WriteCommand(hi2c,  0x12);             // 0xda, 0x12,
    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYALLON_RESUME); // 0xa4
 8001c76:	21a4      	movs	r1, #164	@ 0xa4
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff27 	bl	8001acc <ssd1306_WriteCommand>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4413      	add	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_NORMALDISPLAY);       // 0xa6
 8001c88:	21a6      	movs	r1, #166	@ 0xa6
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ff1e 	bl	8001acc <ssd1306_WriteCommand>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETDISPLAYOFFSET); 
 8001c9a:	21d3      	movs	r1, #211	@ 0xd3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff15 	bl	8001acc <ssd1306_WriteCommand>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x00);
 8001cac:	2100      	movs	r1, #0
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ff0c 	bl	8001acc <ssd1306_WriteCommand>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4413      	add	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_SETMULTIPLEX);
 8001cbe:	21a8      	movs	r1, #168	@ 0xa8
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff03 	bl	8001acc <ssd1306_WriteCommand>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4413      	add	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
    status += ssd1306_WriteCommand(hi2c, 0x7F);
 8001cd0:	217f      	movs	r1, #127	@ 0x7f
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fefa 	bl	8001acc <ssd1306_WriteCommand>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

    status += ssd1306_WriteCommand(hi2c, SH110X_DISPLAYON);
 8001ce2:	21af      	movs	r1, #175	@ 0xaf
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fef1 	bl	8001acc <ssd1306_WriteCommand>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

    if (status != 0) {
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <ssd1306_Init+0x202>
        return 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <ssd1306_Init+0x222>
    }

    // Clear screen
    ssd1306_Fill(Black);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f000 f814 	bl	8001d2c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen(hi2c);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f835 	bl	8001d74 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <ssd1306_Init+0x22c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <ssd1306_Init+0x22c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001d16:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <ssd1306_Init+0x22c>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	715a      	strb	r2, [r3, #5]

    return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20004368 	.word	0x20004368

08001d2c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
    // Fill screenbuffer with a constant value (color)
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e00d      	b.n	8001d58 <ssd1306_Fill+0x2c>
    {
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <ssd1306_Fill+0x1a>
 8001d42:	2100      	movs	r1, #0
 8001d44:	e000      	b.n	8001d48 <ssd1306_Fill+0x1c>
 8001d46:	21ff      	movs	r1, #255	@ 0xff
 8001d48:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <ssd1306_Fill+0x44>)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	460a      	mov	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3301      	adds	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d5e:	d3ed      	bcc.n	8001d3c <ssd1306_Fill+0x10>
    }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20003b68 	.word	0x20003b68

08001d74 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(I2C_HandleTypeDef *hi2c)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af04      	add	r7, sp, #16
 8001d7a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for (i = 0; i < 16; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e020      	b.n	8001dc4 <ssd1306_UpdateScreen+0x50>
        ssd1306_WriteCommand(hi2c, 0xB0 + i);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	3b50      	subs	r3, #80	@ 0x50
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fe9e 	bl	8001acc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x00);
 8001d90:	2100      	movs	r1, #0
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fe9a 	bl	8001acc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(hi2c, 0x10);
 8001d98:	2110      	movs	r1, #16
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fe96 	bl	8001acc <ssd1306_WriteCommand>

        HAL_I2C_Mem_Write(hi2c, SSD1306_I2C_ADDR, 0x40, 1, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100);
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	01db      	lsls	r3, r3, #7
 8001da4:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <ssd1306_UpdateScreen+0x60>)
 8001da6:	4413      	add	r3, r2
 8001da8:	2264      	movs	r2, #100	@ 0x64
 8001daa:	9202      	str	r2, [sp, #8]
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	9201      	str	r2, [sp, #4]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2301      	movs	r3, #1
 8001db4:	2240      	movs	r2, #64	@ 0x40
 8001db6:	2178      	movs	r1, #120	@ 0x78
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f002 fd27 	bl	800480c <HAL_I2C_Mem_Write>
    for (i = 0; i < 16; i++) {
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	d9db      	bls.n	8001d82 <ssd1306_UpdateScreen+0xe>
    }
}
 8001dca:	bf00      	nop
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20003b68 	.word	0x20003b68

08001dd8 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db49      	blt.n	8001e86 <ssd1306_DrawPixel+0xae>
 8001df2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db45      	blt.n	8001e86 <ssd1306_DrawPixel+0xae>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if (SSD1306.Inverted)
 8001dfa:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <ssd1306_DrawPixel+0xbc>)
 8001dfc:	791b      	ldrb	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <ssd1306_DrawPixel+0x38>
    {
        color = (SSD1306_COLOR)!color;
 8001e02:	797b      	ldrb	r3, [r7, #5]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the correct color
    if (color == White)
 8001e10:	797b      	ldrb	r3, [r7, #5]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d11a      	bne.n	8001e4c <ssd1306_DrawPixel+0x74>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	08db      	lsrs	r3, r3, #3
 8001e1c:	b2d8      	uxtb	r0, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	01db      	lsls	r3, r3, #7
 8001e22:	4413      	add	r3, r2
 8001e24:	4a1c      	ldr	r2, [pc, #112]	@ (8001e98 <ssd1306_DrawPixel+0xc0>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	b25a      	sxtb	r2, r3
 8001e2a:	79bb      	ldrb	r3, [r7, #6]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	2101      	movs	r1, #1
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	b259      	sxtb	r1, r3
 8001e3c:	79fa      	ldrb	r2, [r7, #7]
 8001e3e:	4603      	mov	r3, r0
 8001e40:	01db      	lsls	r3, r3, #7
 8001e42:	4413      	add	r3, r2
 8001e44:	b2c9      	uxtb	r1, r1
 8001e46:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <ssd1306_DrawPixel+0xc0>)
 8001e48:	54d1      	strb	r1, [r2, r3]
 8001e4a:	e01d      	b.n	8001e88 <ssd1306_DrawPixel+0xb0>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e4c:	79fa      	ldrb	r2, [r7, #7]
 8001e4e:	79bb      	ldrb	r3, [r7, #6]
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	b2d8      	uxtb	r0, r3
 8001e54:	4603      	mov	r3, r0
 8001e56:	01db      	lsls	r3, r3, #7
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <ssd1306_DrawPixel+0xc0>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	b25a      	sxtb	r2, r3
 8001e60:	79bb      	ldrb	r3, [r7, #6]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	2101      	movs	r1, #1
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	b25b      	sxtb	r3, r3
 8001e72:	4013      	ands	r3, r2
 8001e74:	b259      	sxtb	r1, r3
 8001e76:	79fa      	ldrb	r2, [r7, #7]
 8001e78:	4603      	mov	r3, r0
 8001e7a:	01db      	lsls	r3, r3, #7
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b2c9      	uxtb	r1, r1
 8001e80:	4a05      	ldr	r2, [pc, #20]	@ (8001e98 <ssd1306_DrawPixel+0xc0>)
 8001e82:	54d1      	strb	r1, [r2, r3]
 8001e84:	e000      	b.n	8001e88 <ssd1306_DrawPixel+0xb0>
        return;
 8001e86:	bf00      	nop
    }
}
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20004368 	.word	0x20004368
 8001e98:	20003b68 	.word	0x20003b68

08001e9c <ssd1306_WriteChar>:
//  ch      => Character to write
//  Font    => Font to use
//  color   => Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4604      	mov	r4, r0
 8001ea4:	1d38      	adds	r0, r7, #4
 8001ea6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4623      	mov	r3, r4
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check remaining space on current line
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001eb4:	4b38      	ldr	r3, [pc, #224]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	793b      	ldrb	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ec0:	dc06      	bgt.n	8001ed0 <ssd1306_WriteChar+0x34>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001ec2:	4b35      	ldr	r3, [pc, #212]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001ec4:	885b      	ldrh	r3, [r3, #2]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	797b      	ldrb	r3, [r7, #5]
 8001eca:	4413      	add	r3, r2
    if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001ecc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ece:	dd01      	ble.n	8001ed4 <ssd1306_WriteChar+0x38>
    {
        // Not enough space on current line
        return 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e05c      	b.n	8001f8e <ssd1306_WriteChar+0xf2>
    }

    // Translate font to screenbuffer
    for (i = 0; i < Font.FontHeight; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	e04c      	b.n	8001f74 <ssd1306_WriteChar+0xd8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	3b20      	subs	r3, #32
 8001ee0:	7979      	ldrb	r1, [r7, #5]
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	440b      	add	r3, r1
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	617b      	str	r3, [r7, #20]
        for (j = 0; j < Font.FontWidth; j++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	e034      	b.n	8001f64 <ssd1306_WriteChar+0xc8>
        {
            if ((b << j) & 0x8000)
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d012      	beq.n	8001f30 <ssd1306_WriteChar+0x94>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f0a:	4b23      	ldr	r3, [pc, #140]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	b2d8      	uxtb	r0, r3
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	7bba      	ldrb	r2, [r7, #14]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7ff ff55 	bl	8001dd8 <ssd1306_DrawPixel>
 8001f2e:	e016      	b.n	8001f5e <ssd1306_WriteChar+0xc2>
            }
            else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f30:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2d8      	uxtb	r0, r3
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001f40:	885b      	ldrh	r3, [r3, #2]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	b2d9      	uxtb	r1, r3
 8001f4c:	7bbb      	ldrb	r3, [r7, #14]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f7ff ff3d 	bl	8001dd8 <ssd1306_DrawPixel>
        for (j = 0; j < Font.FontWidth; j++)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	3301      	adds	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	793b      	ldrb	r3, [r7, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d3c5      	bcc.n	8001efa <ssd1306_WriteChar+0x5e>
    for (i = 0; i < Font.FontHeight; i++)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3301      	adds	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	797b      	ldrb	r3, [r7, #5]
 8001f76:	461a      	mov	r2, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d3ad      	bcc.n	8001eda <ssd1306_WriteChar+0x3e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	793a      	ldrb	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <ssd1306_WriteChar+0xfc>)
 8001f8a:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3724      	adds	r7, #36	@ 0x24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20004368 	.word	0x20004368

08001f9c <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	1d38      	adds	r0, r7, #4
 8001fa6:	e880 0006 	stmia.w	r0, {r1, r2}
 8001faa:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8001fac:	e012      	b.n	8001fd4 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	7818      	ldrb	r0, [r3, #0]
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	1d3a      	adds	r2, r7, #4
 8001fb6:	ca06      	ldmia	r2, {r1, r2}
 8001fb8:	f7ff ff70 	bl	8001e9c <ssd1306_WriteChar>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d002      	beq.n	8001fce <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	e008      	b.n	8001fe0 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
    while (*str)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1e8      	bne.n	8001fae <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	781b      	ldrb	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <ssd1306_SetCursor>:

//
//  Set cursor_index position
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460a      	mov	r2, r1
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <ssd1306_SetCursor+0x2c>)
 8001ffe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b03      	ldr	r3, [pc, #12]	@ (8002014 <ssd1306_SetCursor+0x2c>)
 8002006:	805a      	strh	r2, [r3, #2]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	20004368 	.word	0x20004368

08002018 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <HAL_MspInit+0x5c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	4a13      	ldr	r2, [pc, #76]	@ (8002074 <HAL_MspInit+0x5c>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800202c:	6453      	str	r3, [r2, #68]	@ 0x44
 800202e:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <HAL_MspInit+0x5c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <HAL_MspInit+0x5c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	4a0c      	ldr	r2, [pc, #48]	@ (8002074 <HAL_MspInit+0x5c>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	@ 0x40
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_MspInit+0x5c>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002056:	2007      	movs	r0, #7
 8002058:	f001 fc82 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2051      	movs	r0, #81	@ 0x51
 8002062:	f001 fc88 	bl	8003976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002066:	2051      	movs	r0, #81	@ 0x51
 8002068:	f001 fca1 	bl	80039ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	@ 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a4d      	ldr	r2, [pc, #308]	@ (80021cc <HAL_ADC_MspInit+0x154>)
 8002096:	4293      	cmp	r3, r2
 8002098:	f040 8094 	bne.w	80021c4 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	4b4b      	ldr	r3, [pc, #300]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a4:	4a4a      	ldr	r2, [pc, #296]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ac:	4b48      	ldr	r3, [pc, #288]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	4b44      	ldr	r3, [pc, #272]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	4a43      	ldr	r2, [pc, #268]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c8:	4b41      	ldr	r3, [pc, #260]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	4a3c      	ldr	r2, [pc, #240]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e4:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b36      	ldr	r3, [pc, #216]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f8:	4a35      	ldr	r2, [pc, #212]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002100:	4b33      	ldr	r3, [pc, #204]	@ (80021d0 <HAL_ADC_MspInit+0x158>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800210c:	2301      	movs	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002110:	2303      	movs	r3, #3
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4619      	mov	r1, r3
 800211e:	482d      	ldr	r0, [pc, #180]	@ (80021d4 <HAL_ADC_MspInit+0x15c>)
 8002120:	f002 f862 	bl	80041e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FADER_IN1_Pin|FADER_IN2_Pin;
 8002124:	23c0      	movs	r3, #192	@ 0xc0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002128:	2303      	movs	r3, #3
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4828      	ldr	r0, [pc, #160]	@ (80021d8 <HAL_ADC_MspInit+0x160>)
 8002138:	f002 f856 	bl	80041e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800213c:	2303      	movs	r3, #3
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002140:	2303      	movs	r3, #3
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 031c 	add.w	r3, r7, #28
 800214c:	4619      	mov	r1, r3
 800214e:	4823      	ldr	r0, [pc, #140]	@ (80021dc <HAL_ADC_MspInit+0x164>)
 8002150:	f002 f84a 	bl	80041e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002154:	4b22      	ldr	r3, [pc, #136]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 8002156:	4a23      	ldr	r2, [pc, #140]	@ (80021e4 <HAL_ADC_MspInit+0x16c>)
 8002158:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800215a:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 800215c:	2200      	movs	r2, #0
 800215e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002160:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002166:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 8002168:	2200      	movs	r2, #0
 800216a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800216c:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 800216e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002172:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 8002176:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800217a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800217c:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 800217e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002182:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 8002186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800218a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002192:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002198:	4811      	ldr	r0, [pc, #68]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 800219a:	f001 fc23 	bl	80039e4 <HAL_DMA_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80021a4:	f7ff fc8c 	bl	8001ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 80021ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80021ae:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <HAL_ADC_MspInit+0x168>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2012      	movs	r0, #18
 80021ba:	f001 fbdc 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80021be:	2012      	movs	r0, #18
 80021c0:	f001 fbf5 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3730      	adds	r7, #48	@ 0x30
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40012000 	.word	0x40012000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	40020400 	.word	0x40020400
 80021e0:	20000170 	.word	0x20000170
 80021e4:	40026410 	.word	0x40026410

080021e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	@ 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a19      	ldr	r2, [pc, #100]	@ (800226c <HAL_I2C_MspInit+0x84>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12b      	bne.n	8002262 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_I2C_MspInit+0x88>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_I2C_MspInit+0x88>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6313      	str	r3, [r2, #48]	@ 0x30
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_I2C_MspInit+0x88>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002226:	23c0      	movs	r3, #192	@ 0xc0
 8002228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800222e:	2301      	movs	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002236:	2304      	movs	r3, #4
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	480c      	ldr	r0, [pc, #48]	@ (8002274 <HAL_I2C_MspInit+0x8c>)
 8002242:	f001 ffd1 	bl	80041e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_I2C_MspInit+0x88>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <HAL_I2C_MspInit+0x88>)
 8002250:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002254:	6413      	str	r3, [r2, #64]	@ 0x40
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <HAL_I2C_MspInit+0x88>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002262:	bf00      	nop
 8002264:	3728      	adds	r7, #40	@ 0x28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40005400 	.word	0x40005400
 8002270:	40023800 	.word	0x40023800
 8002274:	40020400 	.word	0x40020400

08002278 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a70      	ldr	r2, [pc, #448]	@ (8002458 <HAL_SD_MspInit+0x1e0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	f040 80da 	bne.w	8002450 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	4b6e      	ldr	r3, [pc, #440]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a4:	4a6d      	ldr	r2, [pc, #436]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ac:	4b6b      	ldr	r3, [pc, #428]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	4b67      	ldr	r3, [pc, #412]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c0:	4a66      	ldr	r2, [pc, #408]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c8:	4b64      	ldr	r3, [pc, #400]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	4b60      	ldr	r3, [pc, #384]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	4a5f      	ldr	r2, [pc, #380]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e4:	4b5d      	ldr	r3, [pc, #372]	@ (800245c <HAL_SD_MspInit+0x1e4>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002302:	230c      	movs	r3, #12
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4854      	ldr	r0, [pc, #336]	@ (8002460 <HAL_SD_MspInit+0x1e8>)
 800230e:	f001 ff6b 	bl	80041e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002312:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002324:	230c      	movs	r3, #12
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	484c      	ldr	r0, [pc, #304]	@ (8002460 <HAL_SD_MspInit+0x1e8>)
 8002330:	f001 ff5a 	bl	80041e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002334:	2304      	movs	r3, #4
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002344:	230c      	movs	r3, #12
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4845      	ldr	r0, [pc, #276]	@ (8002464 <HAL_SD_MspInit+0x1ec>)
 8002350:	f001 ff4a 	bl	80041e8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002354:	4b44      	ldr	r3, [pc, #272]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 8002356:	4a45      	ldr	r2, [pc, #276]	@ (800246c <HAL_SD_MspInit+0x1f4>)
 8002358:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800235a:	4b43      	ldr	r3, [pc, #268]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 800235c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002360:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002362:	4b41      	ldr	r3, [pc, #260]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002368:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800236e:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 8002370:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002374:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002376:	4b3c      	ldr	r3, [pc, #240]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 8002378:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800237c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800237e:	4b3a      	ldr	r3, [pc, #232]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 8002380:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002384:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002386:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 8002388:	2220      	movs	r2, #32
 800238a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800238c:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002392:	4b35      	ldr	r3, [pc, #212]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 8002394:	2204      	movs	r2, #4
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002398:	4b33      	ldr	r3, [pc, #204]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 800239a:	2203      	movs	r2, #3
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800239e:	4b32      	ldr	r3, [pc, #200]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 80023a0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80023a6:	4b30      	ldr	r3, [pc, #192]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 80023a8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80023ac:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80023ae:	482e      	ldr	r0, [pc, #184]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 80023b0:	f001 fb18 	bl	80039e4 <HAL_DMA_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80023ba:	f7ff fb81 	bl	8001ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a29      	ldr	r2, [pc, #164]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 80023c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80023c4:	4a28      	ldr	r2, [pc, #160]	@ (8002468 <HAL_SD_MspInit+0x1f0>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80023ca:	4b29      	ldr	r3, [pc, #164]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023cc:	4a29      	ldr	r2, [pc, #164]	@ (8002474 <HAL_SD_MspInit+0x1fc>)
 80023ce:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80023d0:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023d6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023d8:	4b25      	ldr	r3, [pc, #148]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023da:	2240      	movs	r2, #64	@ 0x40
 80023dc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	4b22      	ldr	r3, [pc, #136]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ea:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023ec:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023fa:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80023fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 80023fe:	2220      	movs	r2, #32
 8002400:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002402:	4b1b      	ldr	r3, [pc, #108]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002408:	4b19      	ldr	r3, [pc, #100]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 800240a:	2204      	movs	r2, #4
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800240e:	4b18      	ldr	r3, [pc, #96]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 8002410:	2203      	movs	r2, #3
 8002412:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 8002416:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800241c:	4b14      	ldr	r3, [pc, #80]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 800241e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002422:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002424:	4812      	ldr	r0, [pc, #72]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 8002426:	f001 fadd 	bl	80039e4 <HAL_DMA_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002430:	f7ff fb46 	bl	8001ac0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a0e      	ldr	r2, [pc, #56]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 8002438:	63da      	str	r2, [r3, #60]	@ 0x3c
 800243a:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_SD_MspInit+0x1f8>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2031      	movs	r0, #49	@ 0x31
 8002446:	f001 fa96 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800244a:	2031      	movs	r0, #49	@ 0x31
 800244c:	f001 faaf 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002450:	bf00      	nop
 8002452:	3728      	adds	r7, #40	@ 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40023800 	.word	0x40023800
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	200002a8 	.word	0x200002a8
 800246c:	40026458 	.word	0x40026458
 8002470:	20000308 	.word	0x20000308
 8002474:	400264a0 	.word	0x400264a0

08002478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1c      	ldr	r2, [pc, #112]	@ (80024f8 <HAL_TIM_Base_MspInit+0x80>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d116      	bne.n	80024b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <HAL_TIM_Base_MspInit+0x84>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a1a      	ldr	r2, [pc, #104]	@ (80024fc <HAL_TIM_Base_MspInit+0x84>)
 8002494:	f043 0302 	orr.w	r3, r3, #2
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b18      	ldr	r3, [pc, #96]	@ (80024fc <HAL_TIM_Base_MspInit+0x84>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	201d      	movs	r0, #29
 80024ac:	f001 fa63 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024b0:	201d      	movs	r0, #29
 80024b2:	f001 fa7c 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80024b6:	e01a      	b.n	80024ee <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a10      	ldr	r2, [pc, #64]	@ (8002500 <HAL_TIM_Base_MspInit+0x88>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d115      	bne.n	80024ee <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	4b0d      	ldr	r3, [pc, #52]	@ (80024fc <HAL_TIM_Base_MspInit+0x84>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	4a0c      	ldr	r2, [pc, #48]	@ (80024fc <HAL_TIM_Base_MspInit+0x84>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_TIM_Base_MspInit+0x84>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2032      	movs	r0, #50	@ 0x32
 80024e4:	f001 fa47 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024e8:	2032      	movs	r0, #50	@ 0x32
 80024ea:	f001 fa60 	bl	80039ae <HAL_NVIC_EnableIRQ>
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40023800 	.word	0x40023800
 8002500:	40000c00 	.word	0x40000c00

08002504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <HAL_UART_MspInit+0x94>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d133      	bne.n	800258e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <HAL_UART_MspInit+0x98>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4a14      	ldr	r2, [pc, #80]	@ (800259c <HAL_UART_MspInit+0x98>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800255e:	230c      	movs	r3, #12
 8002560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256e:	2307      	movs	r3, #7
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <HAL_UART_MspInit+0x9c>)
 800257a:	f001 fe35 	bl	80041e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	2026      	movs	r0, #38	@ 0x26
 8002584:	f001 f9f7 	bl	8003976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002588:	2026      	movs	r0, #38	@ 0x26
 800258a:	f001 fa10 	bl	80039ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	@ 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40004400 	.word	0x40004400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000

080025a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <NMI_Handler+0x4>

080025ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <HardFault_Handler+0x4>

080025b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <MemManage_Handler+0x4>

080025bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <BusFault_Handler+0x4>

080025c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <UsageFault_Handler+0x4>

080025cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025fa:	f000 f9a1 	bl	8002940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}

08002602 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_a_clk_in1_Pin);
 8002606:	2001      	movs	r0, #1
 8002608:	f001 ffa4 	bl	8004554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enc_switch_in3_Pin);
 8002614:	2010      	movs	r0, #16
 8002616:	f001 ff9d 	bl	8004554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002624:	4802      	ldr	r0, [pc, #8]	@ (8002630 <ADC_IRQHandler+0x10>)
 8002626:	f000 fa12 	bl	8002a4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000128 	.word	0x20000128

08002634 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002638:	4802      	ldr	r0, [pc, #8]	@ (8002644 <TIM3_IRQHandler+0x10>)
 800263a:	f004 fe6a 	bl	8007312 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000368 	.word	0x20000368

08002648 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <USART2_IRQHandler+0x10>)
 800264e:	f005 fa37 	bl	8007ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200003f8 	.word	0x200003f8

0800265c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002660:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002664:	f001 ff76 	bl	8004554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002670:	4802      	ldr	r0, [pc, #8]	@ (800267c <SDIO_IRQHandler+0x10>)
 8002672:	f003 fcf1 	bl	8006058 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000224 	.word	0x20000224

08002680 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <TIM5_IRQHandler+0x10>)
 8002686:	f004 fe44 	bl	8007312 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	200003b0 	.word	0x200003b0

08002694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002698:	4802      	ldr	r0, [pc, #8]	@ (80026a4 <DMA2_Stream0_IRQHandler+0x10>)
 800269a:	f001 fb3b 	bl	8003d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000170 	.word	0x20000170

080026a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <DMA2_Stream3_IRQHandler+0x10>)
 80026ae:	f001 fb31 	bl	8003d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200002a8 	.word	0x200002a8

080026bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80026c0:	4802      	ldr	r0, [pc, #8]	@ (80026cc <DMA2_Stream6_IRQHandler+0x10>)
 80026c2:	f001 fb27 	bl	8003d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000308 	.word	0x20000308

080026d0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e00a      	b.n	8002706 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026f0:	f3af 8000 	nop.w
 80026f4:	4601      	mov	r1, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	60ba      	str	r2, [r7, #8]
 80026fc:	b2ca      	uxtb	r2, r1
 80026fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3301      	adds	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	dbf0      	blt.n	80026f0 <_read+0x12>
  }

  return len;
 800270e:	687b      	ldr	r3, [r7, #4]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e009      	b.n	800273e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	60ba      	str	r2, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	3301      	adds	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	429a      	cmp	r2, r3
 8002744:	dbf1      	blt.n	800272a <_write+0x12>
  }
  return len;
 8002746:	687b      	ldr	r3, [r7, #4]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <_close>:

int _close(int file)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002778:	605a      	str	r2, [r3, #4]
  return 0;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_isatty>:

int _isatty(int file)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c0:	4a14      	ldr	r2, [pc, #80]	@ (8002814 <_sbrk+0x5c>)
 80027c2:	4b15      	ldr	r3, [pc, #84]	@ (8002818 <_sbrk+0x60>)
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027cc:	4b13      	ldr	r3, [pc, #76]	@ (800281c <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d4:	4b11      	ldr	r3, [pc, #68]	@ (800281c <_sbrk+0x64>)
 80027d6:	4a12      	ldr	r2, [pc, #72]	@ (8002820 <_sbrk+0x68>)
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027da:	4b10      	ldr	r3, [pc, #64]	@ (800281c <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d207      	bcs.n	80027f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e8:	f00a fd94 	bl	800d314 <__errno>
 80027ec:	4603      	mov	r3, r0
 80027ee:	220c      	movs	r2, #12
 80027f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e009      	b.n	800280c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f8:	4b08      	ldr	r3, [pc, #32]	@ (800281c <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	4a05      	ldr	r2, [pc, #20]	@ (800281c <_sbrk+0x64>)
 8002808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20018000 	.word	0x20018000
 8002818:	00000400 	.word	0x00000400
 800281c:	20004370 	.word	0x20004370
 8002820:	20004700 	.word	0x20004700

08002824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <SystemInit+0x20>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	4a05      	ldr	r2, [pc, #20]	@ (8002844 <SystemInit+0x20>)
 8002830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002880 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800284c:	f7ff ffea 	bl	8002824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002850:	480c      	ldr	r0, [pc, #48]	@ (8002884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002868:	4c0a      	ldr	r4, [pc, #40]	@ (8002894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002876:	f00a fd53 	bl	800d320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287a:	f7fe fced 	bl	8001258 <main>
  bx  lr    
 800287e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002880:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002888:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800288c:	0800f0d0 	.word	0x0800f0d0
  ldr r2, =_sbss
 8002890:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002894:	20004700 	.word	0x20004700

08002898 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002898:	e7fe      	b.n	8002898 <DMA1_Stream0_IRQHandler>
	...

0800289c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a0:	4b0e      	ldr	r3, [pc, #56]	@ (80028dc <HAL_Init+0x40>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0d      	ldr	r2, [pc, #52]	@ (80028dc <HAL_Init+0x40>)
 80028a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028ac:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <HAL_Init+0x40>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <HAL_Init+0x40>)
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b8:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <HAL_Init+0x40>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a07      	ldr	r2, [pc, #28]	@ (80028dc <HAL_Init+0x40>)
 80028be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c4:	2003      	movs	r0, #3
 80028c6:	f001 f84b 	bl	8003960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f000 f808 	bl	80028e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d0:	f7ff fba2 	bl	8002018 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023c00 	.word	0x40023c00

080028e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028e8:	4b12      	ldr	r3, [pc, #72]	@ (8002934 <HAL_InitTick+0x54>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_InitTick+0x58>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4619      	mov	r1, r3
 80028f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f863 	bl	80039ca <HAL_SYSTICK_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e00e      	b.n	800292c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b0f      	cmp	r3, #15
 8002912:	d80a      	bhi.n	800292a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002914:	2200      	movs	r2, #0
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	f04f 30ff 	mov.w	r0, #4294967295
 800291c:	f001 f82b 	bl	8003976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002920:	4a06      	ldr	r2, [pc, #24]	@ (800293c <HAL_InitTick+0x5c>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	e000      	b.n	800292c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	2000000c 	.word	0x2000000c
 8002938:	20000014 	.word	0x20000014
 800293c:	20000010 	.word	0x20000010

08002940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002944:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <HAL_IncTick+0x20>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_IncTick+0x24>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4413      	add	r3, r2
 8002950:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <HAL_IncTick+0x24>)
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000014 	.word	0x20000014
 8002964:	20004374 	.word	0x20004374

08002968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return uwTick;
 800296c:	4b03      	ldr	r3, [pc, #12]	@ (800297c <HAL_GetTick+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	20004374 	.word	0x20004374

08002980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff ffee 	bl	8002968 <HAL_GetTick>
 800298c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d005      	beq.n	80029a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800299a:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <HAL_Delay+0x44>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4413      	add	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029a6:	bf00      	nop
 80029a8:	f7ff ffde 	bl	8002968 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d8f7      	bhi.n	80029a8 <HAL_Delay+0x28>
  {
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000014 	.word	0x20000014

080029c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e033      	b.n	8002a46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fb46 	bl	8002078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a0e:	f023 0302 	bic.w	r3, r3, #2
 8002a12:	f043 0202 	orr.w	r2, r3, #2
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fbb2 	bl	8003184 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	f023 0303 	bic.w	r3, r3, #3
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a36:	e001      	b.n	8002a3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d049      	beq.n	8002b18 <HAL_ADC_IRQHandler+0xca>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d046      	beq.n	8002b18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d12b      	bne.n	8002b08 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d127      	bne.n	8002b08 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d006      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d119      	bne.n	8002b08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0220 	bic.w	r2, r2, #32
 8002ae2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d105      	bne.n	8002b08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe f817 	bl	8000b3c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f06f 0212 	mvn.w	r2, #18
 8002b16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d057      	beq.n	8002bde <HAL_ADC_IRQHandler+0x190>
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d054      	beq.n	8002bde <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d139      	bne.n	8002bce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d006      	beq.n	8002b76 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d12b      	bne.n	8002bce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d124      	bne.n	8002bce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11d      	bne.n	8002bce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d119      	bne.n	8002bce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ba8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fc56 	bl	8003480 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 020c 	mvn.w	r2, #12
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x1d6>
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d014      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10d      	bne.n	8002c24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f97f 	bl	8002f18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f06f 0201 	mvn.w	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <HAL_ADC_IRQHandler+0x218>
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d012      	beq.n	8002c66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c44:	f043 0202 	orr.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0220 	mvn.w	r2, #32
 8002c54:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f968 	bl	8002f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0220 	mvn.w	r2, #32
 8002c64:	601a      	str	r2, [r3, #0]
  }
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_Start_DMA+0x1e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0ce      	b.n	8002e2c <HAL_ADC_Start_DMA+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d018      	beq.n	8002cd6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cb4:	4b5f      	ldr	r3, [pc, #380]	@ (8002e34 <HAL_ADC_Start_DMA+0x1c4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8002e38 <HAL_ADC_Start_DMA+0x1c8>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	0c9a      	lsrs	r2, r3, #18
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002cc8:	e002      	b.n	8002cd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f9      	bne.n	8002cca <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ce4:	d107      	bne.n	8002cf6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cf4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	f040 8086 	bne.w	8002e12 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d0e:	f023 0301 	bic.w	r3, r3, #1
 8002d12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d44:	d106      	bne.n	8002d54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f023 0206 	bic.w	r2, r3, #6
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d52:	e002      	b.n	8002d5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d62:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <HAL_ADC_Start_DMA+0x1cc>)
 8002d64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6a:	4a35      	ldr	r2, [pc, #212]	@ (8002e40 <HAL_ADC_Start_DMA+0x1d0>)
 8002d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d72:	4a34      	ldr	r2, [pc, #208]	@ (8002e44 <HAL_ADC_Start_DMA+0x1d4>)
 8002d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	4a33      	ldr	r2, [pc, #204]	@ (8002e48 <HAL_ADC_Start_DMA+0x1d8>)
 8002d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d96:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	334c      	adds	r3, #76	@ 0x4c
 8002db2:	4619      	mov	r1, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f000 fec2 	bl	8003b40 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10f      	bne.n	8002de8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d129      	bne.n	8002e2a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002de4:	609a      	str	r2, [r3, #8]
 8002de6:	e020      	b.n	8002e2a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <HAL_ADC_Start_DMA+0x1dc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d11b      	bne.n	8002e2a <HAL_ADC_Start_DMA+0x1ba>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d114      	bne.n	8002e2a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	e00b      	b.n	8002e2a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	431bde83 	.word	0x431bde83
 8002e3c:	40012300 	.word	0x40012300
 8002e40:	0800337d 	.word	0x0800337d
 8002e44:	08003437 	.word	0x08003437
 8002e48:	08003453 	.word	0x08003453
 8002e4c:	40012000 	.word	0x40012000

08002e50 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_Stop_DMA+0x1a>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e048      	b.n	8002efc <HAL_ADC_Stop_DMA+0xac>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d130      	bne.n	8002ef2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e9e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d10f      	bne.n	8002ece <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fe9c 	bl	8003bf0 <HAL_DMA_Abort>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002edc:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ee6:	f023 0301 	bic.w	r3, r3, #1
 8002eea:	f043 0201 	orr.w	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1c>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e105      	b.n	8003168 <HAL_ADC_ConfigChannel+0x228>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d925      	bls.n	8002fb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68d9      	ldr	r1, [r3, #12]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b1e      	subs	r3, #30
 8002f82:	2207      	movs	r2, #7
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68d9      	ldr	r1, [r3, #12]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4403      	add	r3, r0
 8002faa:	3b1e      	subs	r3, #30
 8002fac:	409a      	lsls	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e022      	b.n	8002ffe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	2207      	movs	r2, #7
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	400a      	ands	r2, r1
 8002fda:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6919      	ldr	r1, [r3, #16]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4403      	add	r3, r0
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b06      	cmp	r3, #6
 8003004:	d824      	bhi.n	8003050 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b05      	subs	r3, #5
 8003018:	221f      	movs	r2, #31
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	400a      	ands	r2, r1
 8003026:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	4618      	mov	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	3b05      	subs	r3, #5
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	635a      	str	r2, [r3, #52]	@ 0x34
 800304e:	e04c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d824      	bhi.n	80030a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	3b23      	subs	r3, #35	@ 0x23
 800306a:	221f      	movs	r2, #31
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43da      	mvns	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	400a      	ands	r2, r1
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	3b23      	subs	r3, #35	@ 0x23
 8003094:	fa00 f203 	lsl.w	r2, r0, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
 80030a0:	e023      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	3b41      	subs	r3, #65	@ 0x41
 80030b4:	221f      	movs	r2, #31
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	400a      	ands	r2, r1
 80030c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	4618      	mov	r0, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b41      	subs	r3, #65	@ 0x41
 80030de:	fa00 f203 	lsl.w	r2, r0, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030ea:	4b22      	ldr	r3, [pc, #136]	@ (8003174 <HAL_ADC_ConfigChannel+0x234>)
 80030ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a21      	ldr	r2, [pc, #132]	@ (8003178 <HAL_ADC_ConfigChannel+0x238>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d109      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1cc>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b12      	cmp	r3, #18
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a19      	ldr	r2, [pc, #100]	@ (8003178 <HAL_ADC_ConfigChannel+0x238>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d123      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b10      	cmp	r3, #16
 800311c:	d003      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x1e6>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b11      	cmp	r3, #17
 8003124:	d11b      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b10      	cmp	r3, #16
 8003138:	d111      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_ADC_ConfigChannel+0x23c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a10      	ldr	r2, [pc, #64]	@ (8003180 <HAL_ADC_ConfigChannel+0x240>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	0c9a      	lsrs	r2, r3, #18
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003150:	e002      	b.n	8003158 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3b01      	subs	r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f9      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40012300 	.word	0x40012300
 8003178:	40012000 	.word	0x40012000
 800317c:	2000000c 	.word	0x2000000c
 8003180:	431bde83 	.word	0x431bde83

08003184 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800318c:	4b79      	ldr	r3, [pc, #484]	@ (8003374 <ADC_Init+0x1f0>)
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	4a58      	ldr	r2, [pc, #352]	@ (8003378 <ADC_Init+0x1f4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d022      	beq.n	8003262 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800322a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6899      	ldr	r1, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800324c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e00f      	b.n	8003282 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003280:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0202 	bic.w	r2, r2, #2
 8003290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
 800329c:	005a      	lsls	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	3b01      	subs	r3, #1
 80032dc:	035a      	lsls	r2, r3, #13
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	e007      	b.n	80032f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003306:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	3b01      	subs	r3, #1
 8003314:	051a      	lsls	r2, r3, #20
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800332c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6899      	ldr	r1, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800333a:	025a      	lsls	r2, r3, #9
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6899      	ldr	r1, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	029a      	lsls	r2, r3, #10
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40012300 	.word	0x40012300
 8003378:	0f000001 	.word	0x0f000001

0800337c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003392:	2b00      	cmp	r3, #0
 8003394:	d13c      	bne.n	8003410 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d12b      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d127      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d119      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0220 	bic.w	r2, r2, #32
 80033e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7fd fb97 	bl	8000b3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800340e:	e00e      	b.n	800342e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f7ff fd85 	bl	8002f2c <HAL_ADC_ErrorCallback>
}
 8003422:	e004      	b.n	800342e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003442:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff fd5d 	bl	8002f04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800344a:	bf00      	nop
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2240      	movs	r2, #64	@ 0x40
 8003464:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	f043 0204 	orr.w	r2, r3, #4
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f7ff fd5a 	bl	8002f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_ADCEx_InjectedConfigChannel+0x18>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e17d      	b.n	80037a8 <HAL_ADCEx_InjectedConfigChannel+0x314>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d925      	bls.n	8003508 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68d9      	ldr	r1, [r3, #12]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	4613      	mov	r3, r2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	3b1e      	subs	r3, #30
 80034d2:	2207      	movs	r2, #7
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43da      	mvns	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	400a      	ands	r2, r1
 80034e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68d9      	ldr	r1, [r3, #12]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	4618      	mov	r0, r3
 80034f4:	4603      	mov	r3, r0
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4403      	add	r3, r0
 80034fa:	3b1e      	subs	r3, #30
 80034fc:	409a      	lsls	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	e022      	b.n	800354e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6919      	ldr	r1, [r3, #16]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	2207      	movs	r2, #7
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	400a      	ands	r2, r1
 800352a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6919      	ldr	r1, [r3, #16]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	4603      	mov	r3, r0
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4403      	add	r3, r0
 8003544:	409a      	lsls	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800355c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	3b01      	subs	r3, #1
 800356a:	051a      	lsls	r2, r3, #20
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	b2da      	uxtb	r2, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3303      	adds	r3, #3
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	221f      	movs	r2, #31
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43da      	mvns	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	400a      	ands	r2, r1
 80035a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3303      	adds	r3, #3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	fa00 f203 	lsl.w	r2, r0, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a74      	ldr	r2, [pc, #464]	@ (80037b4 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d022      	beq.n	800362c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 80035f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003616:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	e00f      	b.n	800364c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 800363a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800364a:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	7d5b      	ldrb	r3, [r3, #21]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	e007      	b.n	8003676 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003674:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	7d1b      	ldrb	r3, [r3, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	e007      	b.n	80036a0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800369e:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d02e      	beq.n	8003706 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d840      	bhi.n	800372e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d002      	beq.n	80036b6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d014      	beq.n	80036de <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80036b4:	e03b      	b.n	800372e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80036c4:	f023 030f 	bic.w	r3, r3, #15
 80036c8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6959      	ldr	r1, [r3, #20]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	615a      	str	r2, [r3, #20]
      break;
 80036dc:	e03b      	b.n	8003756 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80036ec:	f023 030f 	bic.w	r3, r3, #15
 80036f0:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6999      	ldr	r1, [r3, #24]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	619a      	str	r2, [r3, #24]
      break;
 8003704:	e027      	b.n	8003756 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8003714:	f023 030f 	bic.w	r3, r3, #15
 8003718:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
      break;
 800372c:	e013      	b.n	8003756 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800373c:	f023 030f 	bic.w	r3, r3, #15
 8003740:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a19      	ldr	r1, [r3, #32]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	621a      	str	r2, [r3, #32]
      break;
 8003754:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003756:	4b18      	ldr	r3, [pc, #96]	@ (80037b8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8003758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a17      	ldr	r2, [pc, #92]	@ (80037bc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d109      	bne.n	8003778 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b12      	cmp	r3, #18
 800376a:	d105      	bne.n	8003778 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0f      	ldr	r2, [pc, #60]	@ (80037bc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10d      	bne.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b10      	cmp	r3, #16
 8003788:	d003      	beq.n	8003792 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b11      	cmp	r3, #17
 8003790:	d105      	bne.n	800379e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	000f0001 	.word	0x000f0001
 80037b8:	40012300 	.word	0x40012300
 80037bc:	40012000 	.word	0x40012000

080037c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f2:	4a04      	ldr	r2, [pc, #16]	@ (8003804 <__NVIC_SetPriorityGrouping+0x44>)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	60d3      	str	r3, [r2, #12]
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000ed00 	.word	0xe000ed00

08003808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800380c:	4b04      	ldr	r3, [pc, #16]	@ (8003820 <__NVIC_GetPriorityGrouping+0x18>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 0307 	and.w	r3, r3, #7
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db0b      	blt.n	800384e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4907      	ldr	r1, [pc, #28]	@ (800385c <__NVIC_EnableIRQ+0x38>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2001      	movs	r0, #1
 8003846:	fa00 f202 	lsl.w	r2, r0, r2
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e100 	.word	0xe000e100

08003860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db0a      	blt.n	800388a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	b2da      	uxtb	r2, r3
 8003878:	490c      	ldr	r1, [pc, #48]	@ (80038ac <__NVIC_SetPriority+0x4c>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	0112      	lsls	r2, r2, #4
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	440b      	add	r3, r1
 8003884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003888:	e00a      	b.n	80038a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4908      	ldr	r1, [pc, #32]	@ (80038b0 <__NVIC_SetPriority+0x50>)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	3b04      	subs	r3, #4
 8003898:	0112      	lsls	r2, r2, #4
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	440b      	add	r3, r1
 800389e:	761a      	strb	r2, [r3, #24]
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000e100 	.word	0xe000e100
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b089      	sub	sp, #36	@ 0x24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	f1c3 0307 	rsb	r3, r3, #7
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	bf28      	it	cs
 80038d2:	2304      	movcs	r3, #4
 80038d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3304      	adds	r3, #4
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d902      	bls.n	80038e4 <NVIC_EncodePriority+0x30>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3b03      	subs	r3, #3
 80038e2:	e000      	b.n	80038e6 <NVIC_EncodePriority+0x32>
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	401a      	ands	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
 8003906:	43d9      	mvns	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	4313      	orrs	r3, r2
         );
}
 800390e:	4618      	mov	r0, r3
 8003910:	3724      	adds	r7, #36	@ 0x24
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800392c:	d301      	bcc.n	8003932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2301      	movs	r3, #1
 8003930:	e00f      	b.n	8003952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003932:	4a0a      	ldr	r2, [pc, #40]	@ (800395c <SysTick_Config+0x40>)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393a:	210f      	movs	r1, #15
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f7ff ff8e 	bl	8003860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003944:	4b05      	ldr	r3, [pc, #20]	@ (800395c <SysTick_Config+0x40>)
 8003946:	2200      	movs	r2, #0
 8003948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	4b04      	ldr	r3, [pc, #16]	@ (800395c <SysTick_Config+0x40>)
 800394c:	2207      	movs	r2, #7
 800394e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000e010 	.word	0xe000e010

08003960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff ff29 	bl	80037c0 <__NVIC_SetPriorityGrouping>
}
 800396e:	bf00      	nop
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003988:	f7ff ff3e 	bl	8003808 <__NVIC_GetPriorityGrouping>
 800398c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	6978      	ldr	r0, [r7, #20]
 8003994:	f7ff ff8e 	bl	80038b4 <NVIC_EncodePriority>
 8003998:	4602      	mov	r2, r0
 800399a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff5d 	bl	8003860 <__NVIC_SetPriority>
}
 80039a6:	bf00      	nop
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff ff31 	bl	8003824 <__NVIC_EnableIRQ>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ffa2 	bl	800391c <SysTick_Config>
 80039d8:	4603      	mov	r3, r0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f0:	f7fe ffba 	bl	8002968 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e099      	b.n	8003b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0201 	bic.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a20:	e00f      	b.n	8003a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a22:	f7fe ffa1 	bl	8002968 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d908      	bls.n	8003a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2220      	movs	r2, #32
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e078      	b.n	8003b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e8      	bne.n	8003a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4b38      	ldr	r3, [pc, #224]	@ (8003b3c <HAL_DMA_Init+0x158>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d107      	bne.n	8003aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f023 0307 	bic.w	r3, r3, #7
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d117      	bne.n	8003b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00e      	beq.n	8003b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fb01 	bl	80040f0 <DMA_CheckFifoParam>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2240      	movs	r2, #64	@ 0x40
 8003af8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b02:	2301      	movs	r3, #1
 8003b04:	e016      	b.n	8003b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fab8 	bl	8004084 <DMA_CalcBaseAndBitshift>
 8003b14:	4603      	mov	r3, r0
 8003b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	223f      	movs	r2, #63	@ 0x3f
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	f010803f 	.word	0xf010803f

08003b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_DMA_Start_IT+0x26>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e040      	b.n	8003be8 <HAL_DMA_Start_IT+0xa8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d12f      	bne.n	8003bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa4a 	bl	8004028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	223f      	movs	r2, #63	@ 0x3f
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0216 	orr.w	r2, r2, #22
 8003bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0208 	orr.w	r2, r2, #8
 8003bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e005      	b.n	8003be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
 8003be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bfe:	f7fe feb3 	bl	8002968 <HAL_GetTick>
 8003c02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d008      	beq.n	8003c22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e052      	b.n	8003cc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0216 	bic.w	r2, r2, #22
 8003c30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d103      	bne.n	8003c52 <HAL_DMA_Abort+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c72:	e013      	b.n	8003c9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c74:	f7fe fe78 	bl	8002968 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d90c      	bls.n	8003c9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e015      	b.n	8003cc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e4      	bne.n	8003c74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cae:	223f      	movs	r2, #63	@ 0x3f
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d004      	beq.n	8003cee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2280      	movs	r2, #128	@ 0x80
 8003ce8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e00c      	b.n	8003d08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d20:	4b8e      	ldr	r3, [pc, #568]	@ (8003f5c <HAL_DMA_IRQHandler+0x248>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a8e      	ldr	r2, [pc, #568]	@ (8003f60 <HAL_DMA_IRQHandler+0x24c>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	0a9b      	lsrs	r3, r3, #10
 8003d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3e:	2208      	movs	r2, #8
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01a      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d013      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dae:	f043 0202 	orr.w	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dba:	2204      	movs	r2, #4
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00b      	beq.n	8003dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd8:	2204      	movs	r2, #4
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df0:	2210      	movs	r2, #16
 8003df2:	409a      	lsls	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d043      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d03c      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0e:	2210      	movs	r2, #16
 8003e10:	409a      	lsls	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d024      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
 8003e42:	e01f      	b.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01b      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
 8003e54:	e016      	b.n	8003e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d107      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0208 	bic.w	r2, r2, #8
 8003e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e88:	2220      	movs	r2, #32
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 808f 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8087 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eaa:	2220      	movs	r2, #32
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d136      	bne.n	8003f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 0216 	bic.w	r2, r2, #22
 8003ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <HAL_DMA_IRQHandler+0x1da>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0208 	bic.w	r2, r2, #8
 8003efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f02:	223f      	movs	r2, #63	@ 0x3f
 8003f04:	409a      	lsls	r2, r3
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d07e      	beq.n	8004020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
        }
        return;
 8003f2a:	e079      	b.n	8004020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d031      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
 8003f58:	e02c      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
 8003f5a:	bf00      	nop
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d023      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
 8003f74:	e01e      	b.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0210 	bic.w	r2, r2, #16
 8003f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d032      	beq.n	8004022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2205      	movs	r2, #5
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d307      	bcc.n	8003ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f2      	bne.n	8003fe0 <HAL_DMA_IRQHandler+0x2cc>
 8003ffa:	e000      	b.n	8003ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
 800401e:	e000      	b.n	8004022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004020:	bf00      	nop
    }
  }
}
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d108      	bne.n	8004068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004066:	e007      	b.n	8004078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	60da      	str	r2, [r3, #12]
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3b10      	subs	r3, #16
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <DMA_CalcBaseAndBitshift+0x64>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800409e:	4a13      	ldr	r2, [pc, #76]	@ (80040ec <DMA_CalcBaseAndBitshift+0x68>)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d909      	bls.n	80040c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80040c4:	e007      	b.n	80040d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	aaaaaaab 	.word	0xaaaaaaab
 80040ec:	0800ec30 	.word	0x0800ec30

080040f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11f      	bne.n	800414a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d856      	bhi.n	80041be <DMA_CheckFifoParam+0xce>
 8004110:	a201      	add	r2, pc, #4	@ (adr r2, 8004118 <DMA_CheckFifoParam+0x28>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	08004129 	.word	0x08004129
 800411c:	0800413b 	.word	0x0800413b
 8004120:	08004129 	.word	0x08004129
 8004124:	080041bf 	.word	0x080041bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d046      	beq.n	80041c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004138:	e043      	b.n	80041c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004142:	d140      	bne.n	80041c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004148:	e03d      	b.n	80041c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004152:	d121      	bne.n	8004198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d837      	bhi.n	80041ca <DMA_CheckFifoParam+0xda>
 800415a:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <DMA_CheckFifoParam+0x70>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004171 	.word	0x08004171
 8004164:	08004177 	.word	0x08004177
 8004168:	08004171 	.word	0x08004171
 800416c:	08004189 	.word	0x08004189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e030      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d025      	beq.n	80041ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004186:	e022      	b.n	80041ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004190:	d11f      	bne.n	80041d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004196:	e01c      	b.n	80041d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d903      	bls.n	80041a6 <DMA_CheckFifoParam+0xb6>
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d003      	beq.n	80041ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041a4:	e018      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      break;
 80041aa:	e015      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	73fb      	strb	r3, [r7, #15]
      break;
 80041bc:	e00b      	b.n	80041d6 <DMA_CheckFifoParam+0xe6>
      break;
 80041be:	bf00      	nop
 80041c0:	e00a      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041c2:	bf00      	nop
 80041c4:	e008      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041c6:	bf00      	nop
 80041c8:	e006      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ca:	bf00      	nop
 80041cc:	e004      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
    }
  } 
  
  return status; 
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop

080041e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	@ 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	e159      	b.n	80044b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004204:	2201      	movs	r2, #1
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	f040 8148 	bne.w	80044b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d005      	beq.n	800423a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004236:	2b02      	cmp	r3, #2
 8004238:	d130      	bne.n	800429c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2203      	movs	r2, #3
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4013      	ands	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4313      	orrs	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004270:	2201      	movs	r2, #1
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43db      	mvns	r3, r3
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4013      	ands	r3, r2
 800427e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 0201 	and.w	r2, r3, #1
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4313      	orrs	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d017      	beq.n	80042d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 0303 	and.w	r3, r3, #3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d123      	bne.n	800432c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	08da      	lsrs	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3208      	adds	r2, #8
 80042ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	220f      	movs	r2, #15
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	08da      	lsrs	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3208      	adds	r2, #8
 8004326:	69b9      	ldr	r1, [r7, #24]
 8004328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	2203      	movs	r2, #3
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0203 	and.w	r2, r3, #3
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a2 	beq.w	80044b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	4b57      	ldr	r3, [pc, #348]	@ (80044d0 <HAL_GPIO_Init+0x2e8>)
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	4a56      	ldr	r2, [pc, #344]	@ (80044d0 <HAL_GPIO_Init+0x2e8>)
 8004378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800437c:	6453      	str	r3, [r2, #68]	@ 0x44
 800437e:	4b54      	ldr	r3, [pc, #336]	@ (80044d0 <HAL_GPIO_Init+0x2e8>)
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800438a:	4a52      	ldr	r2, [pc, #328]	@ (80044d4 <HAL_GPIO_Init+0x2ec>)
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	3302      	adds	r3, #2
 8004392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a49      	ldr	r2, [pc, #292]	@ (80044d8 <HAL_GPIO_Init+0x2f0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d019      	beq.n	80043ea <HAL_GPIO_Init+0x202>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a48      	ldr	r2, [pc, #288]	@ (80044dc <HAL_GPIO_Init+0x2f4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d013      	beq.n	80043e6 <HAL_GPIO_Init+0x1fe>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a47      	ldr	r2, [pc, #284]	@ (80044e0 <HAL_GPIO_Init+0x2f8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <HAL_GPIO_Init+0x1fa>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a46      	ldr	r2, [pc, #280]	@ (80044e4 <HAL_GPIO_Init+0x2fc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d007      	beq.n	80043de <HAL_GPIO_Init+0x1f6>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a45      	ldr	r2, [pc, #276]	@ (80044e8 <HAL_GPIO_Init+0x300>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_GPIO_Init+0x1f2>
 80043d6:	2304      	movs	r3, #4
 80043d8:	e008      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043da:	2307      	movs	r3, #7
 80043dc:	e006      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043de:	2303      	movs	r3, #3
 80043e0:	e004      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e002      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_GPIO_Init+0x204>
 80043ea:	2300      	movs	r3, #0
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f002 0203 	and.w	r2, r2, #3
 80043f2:	0092      	lsls	r2, r2, #2
 80043f4:	4093      	lsls	r3, r2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043fc:	4935      	ldr	r1, [pc, #212]	@ (80044d4 <HAL_GPIO_Init+0x2ec>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	3302      	adds	r3, #2
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800440a:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <HAL_GPIO_Init+0x304>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800442e:	4a2f      	ldr	r2, [pc, #188]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004434:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	43db      	mvns	r3, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4013      	ands	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004458:	4a24      	ldr	r2, [pc, #144]	@ (80044ec <HAL_GPIO_Init+0x304>)
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800445e:	4b23      	ldr	r3, [pc, #140]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004482:	4a1a      	ldr	r2, [pc, #104]	@ (80044ec <HAL_GPIO_Init+0x304>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <HAL_GPIO_Init+0x304>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80044ac:	4a0f      	ldr	r2, [pc, #60]	@ (80044ec <HAL_GPIO_Init+0x304>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b0f      	cmp	r3, #15
 80044bc:	f67f aea2 	bls.w	8004204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3724      	adds	r7, #36	@ 0x24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800
 80044d4:	40013800 	.word	0x40013800
 80044d8:	40020000 	.word	0x40020000
 80044dc:	40020400 	.word	0x40020400
 80044e0:	40020800 	.word	0x40020800
 80044e4:	40020c00 	.word	0x40020c00
 80044e8:	40021000 	.word	0x40021000
 80044ec:	40013c00 	.word	0x40013c00

080044f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	887b      	ldrh	r3, [r7, #2]
 8004502:	4013      	ands	r3, r2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004508:	2301      	movs	r3, #1
 800450a:	73fb      	strb	r3, [r7, #15]
 800450c:	e001      	b.n	8004512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
 800452c:	4613      	mov	r3, r2
 800452e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004530:	787b      	ldrb	r3, [r7, #1]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800453c:	e003      	b.n	8004546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800453e:	887b      	ldrh	r3, [r7, #2]
 8004540:	041a      	lsls	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	619a      	str	r2, [r3, #24]
}
 8004546:	bf00      	nop
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800455e:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	4013      	ands	r3, r2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d006      	beq.n	8004578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800456a:	4a05      	ldr	r2, [pc, #20]	@ (8004580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fc fa4e 	bl	8000a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40013c00 	.word	0x40013c00

08004584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e12b      	b.n	80047ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fe1c 	bl	80021e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	@ 0x24
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045e8:	f001 f8ea 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 80045ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4a81      	ldr	r2, [pc, #516]	@ (80047f8 <HAL_I2C_Init+0x274>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d807      	bhi.n	8004608 <HAL_I2C_Init+0x84>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4a80      	ldr	r2, [pc, #512]	@ (80047fc <HAL_I2C_Init+0x278>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bf94      	ite	ls
 8004600:	2301      	movls	r3, #1
 8004602:	2300      	movhi	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e006      	b.n	8004616 <HAL_I2C_Init+0x92>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a7d      	ldr	r2, [pc, #500]	@ (8004800 <HAL_I2C_Init+0x27c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	bf94      	ite	ls
 8004610:	2301      	movls	r3, #1
 8004612:	2300      	movhi	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0e7      	b.n	80047ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a78      	ldr	r2, [pc, #480]	@ (8004804 <HAL_I2C_Init+0x280>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	0c9b      	lsrs	r3, r3, #18
 8004628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	4a6a      	ldr	r2, [pc, #424]	@ (80047f8 <HAL_I2C_Init+0x274>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d802      	bhi.n	8004658 <HAL_I2C_Init+0xd4>
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	3301      	adds	r3, #1
 8004656:	e009      	b.n	800466c <HAL_I2C_Init+0xe8>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	4a69      	ldr	r2, [pc, #420]	@ (8004808 <HAL_I2C_Init+0x284>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	3301      	adds	r3, #1
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	430b      	orrs	r3, r1
 8004672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800467e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	495c      	ldr	r1, [pc, #368]	@ (80047f8 <HAL_I2C_Init+0x274>)
 8004688:	428b      	cmp	r3, r1
 800468a:	d819      	bhi.n	80046c0 <HAL_I2C_Init+0x13c>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1e59      	subs	r1, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	fbb1 f3f3 	udiv	r3, r1, r3
 800469a:	1c59      	adds	r1, r3, #1
 800469c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046a0:	400b      	ands	r3, r1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <HAL_I2C_Init+0x138>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1e59      	subs	r1, r3, #1
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ba:	e051      	b.n	8004760 <HAL_I2C_Init+0x1dc>
 80046bc:	2304      	movs	r3, #4
 80046be:	e04f      	b.n	8004760 <HAL_I2C_Init+0x1dc>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d111      	bne.n	80046ec <HAL_I2C_Init+0x168>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1e58      	subs	r0, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6859      	ldr	r1, [r3, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	440b      	add	r3, r1
 80046d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046da:	3301      	adds	r3, #1
 80046dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	bf0c      	ite	eq
 80046e4:	2301      	moveq	r3, #1
 80046e6:	2300      	movne	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e012      	b.n	8004712 <HAL_I2C_Init+0x18e>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e58      	subs	r0, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	0099      	lsls	r1, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Init+0x196>
 8004716:	2301      	movs	r3, #1
 8004718:	e022      	b.n	8004760 <HAL_I2C_Init+0x1dc>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10e      	bne.n	8004740 <HAL_I2C_Init+0x1bc>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1e58      	subs	r0, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6859      	ldr	r1, [r3, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	440b      	add	r3, r1
 8004730:	fbb0 f3f3 	udiv	r3, r0, r3
 8004734:	3301      	adds	r3, #1
 8004736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800473e:	e00f      	b.n	8004760 <HAL_I2C_Init+0x1dc>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1e58      	subs	r0, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	0099      	lsls	r1, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	fbb0 f3f3 	udiv	r3, r0, r3
 8004756:	3301      	adds	r3, #1
 8004758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	6809      	ldr	r1, [r1, #0]
 8004764:	4313      	orrs	r3, r2
 8004766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800478e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6911      	ldr	r1, [r2, #16]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	68d2      	ldr	r2, [r2, #12]
 800479a:	4311      	orrs	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6812      	ldr	r2, [r2, #0]
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	000186a0 	.word	0x000186a0
 80047fc:	001e847f 	.word	0x001e847f
 8004800:	003d08ff 	.word	0x003d08ff
 8004804:	431bde83 	.word	0x431bde83
 8004808:	10624dd3 	.word	0x10624dd3

0800480c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	4603      	mov	r3, r0
 800481c:	817b      	strh	r3, [r7, #10]
 800481e:	460b      	mov	r3, r1
 8004820:	813b      	strh	r3, [r7, #8]
 8004822:	4613      	mov	r3, r2
 8004824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004826:	f7fe f89f 	bl	8002968 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b20      	cmp	r3, #32
 8004836:	f040 80d9 	bne.w	80049ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	2319      	movs	r3, #25
 8004840:	2201      	movs	r2, #1
 8004842:	496d      	ldr	r1, [pc, #436]	@ (80049f8 <HAL_I2C_Mem_Write+0x1ec>)
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f000 f971 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
 8004852:	e0cc      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_I2C_Mem_Write+0x56>
 800485e:	2302      	movs	r3, #2
 8004860:	e0c5      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d007      	beq.n	8004888 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	@ 0x21
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2240      	movs	r2, #64	@ 0x40
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a3a      	ldr	r2, [r7, #32]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80048b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a4d      	ldr	r2, [pc, #308]	@ (80049fc <HAL_I2C_Mem_Write+0x1f0>)
 80048c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048ca:	88f8      	ldrh	r0, [r7, #6]
 80048cc:	893a      	ldrh	r2, [r7, #8]
 80048ce:	8979      	ldrh	r1, [r7, #10]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4603      	mov	r3, r0
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f890 	bl	8004a00 <I2C_RequestMemoryWrite>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d052      	beq.n	800498c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e081      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fa36 	bl	8004d60 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06b      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b04      	cmp	r3, #4
 8004952:	d11b      	bne.n	800498c <HAL_I2C_Mem_Write+0x180>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d017      	beq.n	800498c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	781a      	ldrb	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1aa      	bne.n	80048ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fa29 	bl	8004df0 <I2C_WaitOnBTFFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d107      	bne.n	80049bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e016      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	00100002 	.word	0x00100002
 80049fc:	ffff0000 	.word	0xffff0000

08004a00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	817b      	strh	r3, [r7, #10]
 8004a12:	460b      	mov	r3, r1
 8004a14:	813b      	strh	r3, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f878 	bl	8004b2c <I2C_WaitOnFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a50:	d103      	bne.n	8004a5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e05f      	b.n	8004b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a5e:	897b      	ldrh	r3, [r7, #10]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	461a      	mov	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	6a3a      	ldr	r2, [r7, #32]
 8004a72:	492d      	ldr	r1, [pc, #180]	@ (8004b28 <I2C_RequestMemoryWrite+0x128>)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 f8d3 	bl	8004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e04c      	b.n	8004b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a9c:	6a39      	ldr	r1, [r7, #32]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f95e 	bl	8004d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d107      	bne.n	8004ac2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e02b      	b.n	8004b1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d105      	bne.n	8004ad8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004acc:	893b      	ldrh	r3, [r7, #8]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	611a      	str	r2, [r3, #16]
 8004ad6:	e021      	b.n	8004b1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ad8:	893b      	ldrh	r3, [r7, #8]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	6a39      	ldr	r1, [r7, #32]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f938 	bl	8004d60 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00d      	beq.n	8004b12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d107      	bne.n	8004b0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e005      	b.n	8004b1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b12:	893b      	ldrh	r3, [r7, #8]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	00010002 	.word	0x00010002

08004b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b3c:	e048      	b.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d044      	beq.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fd ff0f 	bl	8002968 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d139      	bne.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10d      	bne.n	8004b82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	e00c      	b.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	43da      	mvns	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d116      	bne.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e023      	b.n	8004c18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10d      	bne.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	e00c      	b.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d093      	beq.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c2e:	e071      	b.n	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c3e:	d123      	bne.n	8004c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c74:	f043 0204 	orr.w	r2, r3, #4
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e067      	b.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d041      	beq.n	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c90:	f7fd fe6a 	bl	8002968 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d136      	bne.n	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10c      	bne.n	8004cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf14      	ite	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	2300      	moveq	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	e00b      	b.n	8004ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	43da      	mvns	r2, r3
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e021      	b.n	8004d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d10c      	bne.n	8004d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	e00b      	b.n	8004d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	bf14      	ite	ne
 8004d4a:	2301      	movne	r3, #1
 8004d4c:	2300      	moveq	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f47f af6d 	bne.w	8004c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d6c:	e034      	b.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f886 	bl	8004e80 <I2C_IsAcknowledgeFailed>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e034      	b.n	8004de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d028      	beq.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fd fdef 	bl	8002968 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d11d      	bne.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da6:	2b80      	cmp	r3, #128	@ 0x80
 8004da8:	d016      	beq.n	8004dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e007      	b.n	8004de8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d1c3      	bne.n	8004d6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dfc:	e034      	b.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f83e 	bl	8004e80 <I2C_IsAcknowledgeFailed>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e034      	b.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d028      	beq.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e16:	f7fd fda7 	bl	8002968 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d302      	bcc.n	8004e2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11d      	bne.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d016      	beq.n	8004e68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e007      	b.n	8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d1c3      	bne.n	8004dfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e96:	d11b      	bne.n	8004ed0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ea0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	f043 0204 	orr.w	r2, r3, #4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
	...

08004ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e267      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d075      	beq.n	8004fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004efe:	4b88      	ldr	r3, [pc, #544]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d00c      	beq.n	8004f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f0a:	4b85      	ldr	r3, [pc, #532]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d112      	bne.n	8004f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f16:	4b82      	ldr	r3, [pc, #520]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	4b7e      	ldr	r3, [pc, #504]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d05b      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x108>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d157      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e242      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f44:	d106      	bne.n	8004f54 <HAL_RCC_OscConfig+0x74>
 8004f46:	4b76      	ldr	r3, [pc, #472]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a75      	ldr	r2, [pc, #468]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e01d      	b.n	8004f90 <HAL_RCC_OscConfig+0xb0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x98>
 8004f5e:	4b70      	ldr	r3, [pc, #448]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a6f      	ldr	r2, [pc, #444]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a6c      	ldr	r2, [pc, #432]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
 8004f76:	e00b      	b.n	8004f90 <HAL_RCC_OscConfig+0xb0>
 8004f78:	4b69      	ldr	r3, [pc, #420]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a68      	ldr	r2, [pc, #416]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	4b66      	ldr	r3, [pc, #408]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a65      	ldr	r2, [pc, #404]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d013      	beq.n	8004fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fd fce6 	bl	8002968 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa0:	f7fd fce2 	bl	8002968 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b64      	cmp	r3, #100	@ 0x64
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e207      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	4b5b      	ldr	r3, [pc, #364]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0f0      	beq.n	8004fa0 <HAL_RCC_OscConfig+0xc0>
 8004fbe:	e014      	b.n	8004fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7fd fcd2 	bl	8002968 <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7fd fcce 	bl	8002968 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b64      	cmp	r3, #100	@ 0x64
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e1f3      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fda:	4b51      	ldr	r3, [pc, #324]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f0      	bne.n	8004fc8 <HAL_RCC_OscConfig+0xe8>
 8004fe6:	e000      	b.n	8004fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d063      	beq.n	80050be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005002:	4b47      	ldr	r3, [pc, #284]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800500a:	2b08      	cmp	r3, #8
 800500c:	d11c      	bne.n	8005048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800500e:	4b44      	ldr	r3, [pc, #272]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d116      	bne.n	8005048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800501a:	4b41      	ldr	r3, [pc, #260]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <HAL_RCC_OscConfig+0x152>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d001      	beq.n	8005032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e1c7      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005032:	4b3b      	ldr	r3, [pc, #236]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4937      	ldr	r1, [pc, #220]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005046:	e03a      	b.n	80050be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005050:	4b34      	ldr	r3, [pc, #208]	@ (8005124 <HAL_RCC_OscConfig+0x244>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fd fc87 	bl	8002968 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800505e:	f7fd fc83 	bl	8002968 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e1a8      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005070:	4b2b      	ldr	r3, [pc, #172]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507c:	4b28      	ldr	r3, [pc, #160]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4925      	ldr	r1, [pc, #148]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
 8005090:	e015      	b.n	80050be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005092:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <HAL_RCC_OscConfig+0x244>)
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fd fc66 	bl	8002968 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a0:	f7fd fc62 	bl	8002968 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e187      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d036      	beq.n	8005138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d016      	beq.n	8005100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050d2:	4b15      	ldr	r3, [pc, #84]	@ (8005128 <HAL_RCC_OscConfig+0x248>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fd fc46 	bl	8002968 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050e0:	f7fd fc42 	bl	8002968 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e167      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_RCC_OscConfig+0x240>)
 80050f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f0      	beq.n	80050e0 <HAL_RCC_OscConfig+0x200>
 80050fe:	e01b      	b.n	8005138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005100:	4b09      	ldr	r3, [pc, #36]	@ (8005128 <HAL_RCC_OscConfig+0x248>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005106:	f7fd fc2f 	bl	8002968 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800510c:	e00e      	b.n	800512c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800510e:	f7fd fc2b 	bl	8002968 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d907      	bls.n	800512c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e150      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
 8005120:	40023800 	.word	0x40023800
 8005124:	42470000 	.word	0x42470000
 8005128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800512c:	4b88      	ldr	r3, [pc, #544]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1ea      	bne.n	800510e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8097 	beq.w	8005274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005146:	2300      	movs	r3, #0
 8005148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800514a:	4b81      	ldr	r3, [pc, #516]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10f      	bne.n	8005176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	4b7d      	ldr	r3, [pc, #500]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	4a7c      	ldr	r2, [pc, #496]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 8005160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005164:	6413      	str	r3, [r2, #64]	@ 0x40
 8005166:	4b7a      	ldr	r3, [pc, #488]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516e:	60bb      	str	r3, [r7, #8]
 8005170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005176:	4b77      	ldr	r3, [pc, #476]	@ (8005354 <HAL_RCC_OscConfig+0x474>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800517e:	2b00      	cmp	r3, #0
 8005180:	d118      	bne.n	80051b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005182:	4b74      	ldr	r3, [pc, #464]	@ (8005354 <HAL_RCC_OscConfig+0x474>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a73      	ldr	r2, [pc, #460]	@ (8005354 <HAL_RCC_OscConfig+0x474>)
 8005188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800518c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800518e:	f7fd fbeb 	bl	8002968 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005194:	e008      	b.n	80051a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005196:	f7fd fbe7 	bl	8002968 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d901      	bls.n	80051a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e10c      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005354 <HAL_RCC_OscConfig+0x474>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0f0      	beq.n	8005196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x2ea>
 80051bc:	4b64      	ldr	r3, [pc, #400]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c0:	4a63      	ldr	r2, [pc, #396]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c8:	e01c      	b.n	8005204 <HAL_RCC_OscConfig+0x324>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0x30c>
 80051d2:	4b5f      	ldr	r3, [pc, #380]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051de:	4b5c      	ldr	r3, [pc, #368]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e2:	4a5b      	ldr	r2, [pc, #364]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ea:	e00b      	b.n	8005204 <HAL_RCC_OscConfig+0x324>
 80051ec:	4b58      	ldr	r3, [pc, #352]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a57      	ldr	r2, [pc, #348]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051f8:	4b55      	ldr	r3, [pc, #340]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fc:	4a54      	ldr	r2, [pc, #336]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80051fe:	f023 0304 	bic.w	r3, r3, #4
 8005202:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d015      	beq.n	8005238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fd fbac 	bl	8002968 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005212:	e00a      	b.n	800522a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005214:	f7fd fba8 	bl	8002968 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005222:	4293      	cmp	r3, r2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e0cb      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522a:	4b49      	ldr	r3, [pc, #292]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0ee      	beq.n	8005214 <HAL_RCC_OscConfig+0x334>
 8005236:	e014      	b.n	8005262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005238:	f7fd fb96 	bl	8002968 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523e:	e00a      	b.n	8005256 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005240:	f7fd fb92 	bl	8002968 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e0b5      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005256:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1ee      	bne.n	8005240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d105      	bne.n	8005274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005268:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	4a38      	ldr	r2, [pc, #224]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 800526e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005272:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80a1 	beq.w	80053c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800527e:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	2b08      	cmp	r3, #8
 8005288:	d05c      	beq.n	8005344 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d141      	bne.n	8005316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005292:	4b31      	ldr	r3, [pc, #196]	@ (8005358 <HAL_RCC_OscConfig+0x478>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fd fb66 	bl	8002968 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fd fb62 	bl	8002968 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e087      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b2:	4b27      	ldr	r3, [pc, #156]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	019b      	lsls	r3, r3, #6
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	085b      	lsrs	r3, r3, #1
 80052d6:	3b01      	subs	r3, #1
 80052d8:	041b      	lsls	r3, r3, #16
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	061b      	lsls	r3, r3, #24
 80052e2:	491b      	ldr	r1, [pc, #108]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005358 <HAL_RCC_OscConfig+0x478>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ee:	f7fd fb3b 	bl	8002968 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd fb37 	bl	8002968 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e05c      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005308:	4b11      	ldr	r3, [pc, #68]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCC_OscConfig+0x416>
 8005314:	e054      	b.n	80053c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005316:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <HAL_RCC_OscConfig+0x478>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fd fb24 	bl	8002968 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005324:	f7fd fb20 	bl	8002968 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e045      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005336:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <HAL_RCC_OscConfig+0x470>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x444>
 8005342:	e03d      	b.n	80053c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e038      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
 8005350:	40023800 	.word	0x40023800
 8005354:	40007000 	.word	0x40007000
 8005358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800535c:	4b1b      	ldr	r3, [pc, #108]	@ (80053cc <HAL_RCC_OscConfig+0x4ec>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d028      	beq.n	80053bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d121      	bne.n	80053bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005382:	429a      	cmp	r2, r3
 8005384:	d11a      	bne.n	80053bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005394:	4293      	cmp	r3, r2
 8005396:	d111      	bne.n	80053bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	3b01      	subs	r3, #1
 80053a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800

080053d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0cc      	b.n	800557e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053e4:	4b68      	ldr	r3, [pc, #416]	@ (8005588 <HAL_RCC_ClockConfig+0x1b8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d90c      	bls.n	800540c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b65      	ldr	r3, [pc, #404]	@ (8005588 <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053fa:	4b63      	ldr	r3, [pc, #396]	@ (8005588 <HAL_RCC_ClockConfig+0x1b8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d001      	beq.n	800540c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e0b8      	b.n	800557e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d020      	beq.n	800545a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005424:	4b59      	ldr	r3, [pc, #356]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	4a58      	ldr	r2, [pc, #352]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800542e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800543c:	4b53      	ldr	r3, [pc, #332]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a52      	ldr	r2, [pc, #328]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005448:	4b50      	ldr	r3, [pc, #320]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	494d      	ldr	r1, [pc, #308]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	4313      	orrs	r3, r2
 8005458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d044      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546e:	4b47      	ldr	r3, [pc, #284]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d119      	bne.n	80054ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e07f      	b.n	800557e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d003      	beq.n	800548e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800548a:	2b03      	cmp	r3, #3
 800548c:	d107      	bne.n	800549e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548e:	4b3f      	ldr	r3, [pc, #252]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e06f      	b.n	800557e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549e:	4b3b      	ldr	r3, [pc, #236]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e067      	b.n	800557e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ae:	4b37      	ldr	r3, [pc, #220]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f023 0203 	bic.w	r2, r3, #3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4934      	ldr	r1, [pc, #208]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054c0:	f7fd fa52 	bl	8002968 <HAL_GetTick>
 80054c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c6:	e00a      	b.n	80054de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c8:	f7fd fa4e 	bl	8002968 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e04f      	b.n	800557e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054de:	4b2b      	ldr	r3, [pc, #172]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 020c 	and.w	r2, r3, #12
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d1eb      	bne.n	80054c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054f0:	4b25      	ldr	r3, [pc, #148]	@ (8005588 <HAL_RCC_ClockConfig+0x1b8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d20c      	bcs.n	8005518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fe:	4b22      	ldr	r3, [pc, #136]	@ (8005588 <HAL_RCC_ClockConfig+0x1b8>)
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005506:	4b20      	ldr	r3, [pc, #128]	@ (8005588 <HAL_RCC_ClockConfig+0x1b8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e032      	b.n	800557e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005524:	4b19      	ldr	r3, [pc, #100]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4916      	ldr	r1, [pc, #88]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005542:	4b12      	ldr	r3, [pc, #72]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	490e      	ldr	r1, [pc, #56]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	4313      	orrs	r3, r2
 8005554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005556:	f000 f821 	bl	800559c <HAL_RCC_GetSysClockFreq>
 800555a:	4602      	mov	r2, r0
 800555c:	4b0b      	ldr	r3, [pc, #44]	@ (800558c <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	490a      	ldr	r1, [pc, #40]	@ (8005590 <HAL_RCC_ClockConfig+0x1c0>)
 8005568:	5ccb      	ldrb	r3, [r1, r3]
 800556a:	fa22 f303 	lsr.w	r3, r2, r3
 800556e:	4a09      	ldr	r2, [pc, #36]	@ (8005594 <HAL_RCC_ClockConfig+0x1c4>)
 8005570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005572:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <HAL_RCC_ClockConfig+0x1c8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7fd f9b2 	bl	80028e0 <HAL_InitTick>

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40023c00 	.word	0x40023c00
 800558c:	40023800 	.word	0x40023800
 8005590:	0800ec18 	.word	0x0800ec18
 8005594:	2000000c 	.word	0x2000000c
 8005598:	20000010 	.word	0x20000010

0800559c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800559c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a0:	b094      	sub	sp, #80	@ 0x50
 80055a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a8:	2300      	movs	r3, #0
 80055aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ac:	2300      	movs	r3, #0
 80055ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055b4:	4b79      	ldr	r3, [pc, #484]	@ (800579c <HAL_RCC_GetSysClockFreq+0x200>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d00d      	beq.n	80055dc <HAL_RCC_GetSysClockFreq+0x40>
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	f200 80e1 	bhi.w	8005788 <HAL_RCC_GetSysClockFreq+0x1ec>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_RCC_GetSysClockFreq+0x34>
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d003      	beq.n	80055d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80055ce:	e0db      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055d0:	4b73      	ldr	r3, [pc, #460]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80055d2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80055d4:	e0db      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055d6:	4b73      	ldr	r3, [pc, #460]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80055d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055da:	e0d8      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055dc:	4b6f      	ldr	r3, [pc, #444]	@ (800579c <HAL_RCC_GetSysClockFreq+0x200>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055e6:	4b6d      	ldr	r3, [pc, #436]	@ (800579c <HAL_RCC_GetSysClockFreq+0x200>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d063      	beq.n	80056ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f2:	4b6a      	ldr	r3, [pc, #424]	@ (800579c <HAL_RCC_GetSysClockFreq+0x200>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	099b      	lsrs	r3, r3, #6
 80055f8:	2200      	movs	r2, #0
 80055fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005604:	633b      	str	r3, [r7, #48]	@ 0x30
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
 800560a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800560e:	4622      	mov	r2, r4
 8005610:	462b      	mov	r3, r5
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	0159      	lsls	r1, r3, #5
 800561c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005620:	0150      	lsls	r0, r2, #5
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4621      	mov	r1, r4
 8005628:	1a51      	subs	r1, r2, r1
 800562a:	6139      	str	r1, [r7, #16]
 800562c:	4629      	mov	r1, r5
 800562e:	eb63 0301 	sbc.w	r3, r3, r1
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	f04f 0300 	mov.w	r3, #0
 800563c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005640:	4659      	mov	r1, fp
 8005642:	018b      	lsls	r3, r1, #6
 8005644:	4651      	mov	r1, sl
 8005646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800564a:	4651      	mov	r1, sl
 800564c:	018a      	lsls	r2, r1, #6
 800564e:	4651      	mov	r1, sl
 8005650:	ebb2 0801 	subs.w	r8, r2, r1
 8005654:	4659      	mov	r1, fp
 8005656:	eb63 0901 	sbc.w	r9, r3, r1
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800566a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800566e:	4690      	mov	r8, r2
 8005670:	4699      	mov	r9, r3
 8005672:	4623      	mov	r3, r4
 8005674:	eb18 0303 	adds.w	r3, r8, r3
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	462b      	mov	r3, r5
 800567c:	eb49 0303 	adc.w	r3, r9, r3
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	f04f 0200 	mov.w	r2, #0
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800568e:	4629      	mov	r1, r5
 8005690:	024b      	lsls	r3, r1, #9
 8005692:	4621      	mov	r1, r4
 8005694:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005698:	4621      	mov	r1, r4
 800569a:	024a      	lsls	r2, r1, #9
 800569c:	4610      	mov	r0, r2
 800569e:	4619      	mov	r1, r3
 80056a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a2:	2200      	movs	r2, #0
 80056a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056ac:	f7fa fe00 	bl	80002b0 <__aeabi_uldivmod>
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4613      	mov	r3, r2
 80056b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b8:	e058      	b.n	800576c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ba:	4b38      	ldr	r3, [pc, #224]	@ (800579c <HAL_RCC_GetSysClockFreq+0x200>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	099b      	lsrs	r3, r3, #6
 80056c0:	2200      	movs	r2, #0
 80056c2:	4618      	mov	r0, r3
 80056c4:	4611      	mov	r1, r2
 80056c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056ca:	623b      	str	r3, [r7, #32]
 80056cc:	2300      	movs	r3, #0
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	f04f 0000 	mov.w	r0, #0
 80056dc:	f04f 0100 	mov.w	r1, #0
 80056e0:	0159      	lsls	r1, r3, #5
 80056e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056e6:	0150      	lsls	r0, r2, #5
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4641      	mov	r1, r8
 80056ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80056f2:	4649      	mov	r1, r9
 80056f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005704:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005708:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800570c:	ebb2 040a 	subs.w	r4, r2, sl
 8005710:	eb63 050b 	sbc.w	r5, r3, fp
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	00eb      	lsls	r3, r5, #3
 800571e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005722:	00e2      	lsls	r2, r4, #3
 8005724:	4614      	mov	r4, r2
 8005726:	461d      	mov	r5, r3
 8005728:	4643      	mov	r3, r8
 800572a:	18e3      	adds	r3, r4, r3
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	464b      	mov	r3, r9
 8005730:	eb45 0303 	adc.w	r3, r5, r3
 8005734:	607b      	str	r3, [r7, #4]
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005742:	4629      	mov	r1, r5
 8005744:	028b      	lsls	r3, r1, #10
 8005746:	4621      	mov	r1, r4
 8005748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800574c:	4621      	mov	r1, r4
 800574e:	028a      	lsls	r2, r1, #10
 8005750:	4610      	mov	r0, r2
 8005752:	4619      	mov	r1, r3
 8005754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005756:	2200      	movs	r2, #0
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	61fa      	str	r2, [r7, #28]
 800575c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005760:	f7fa fda6 	bl	80002b0 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4613      	mov	r3, r2
 800576a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800576c:	4b0b      	ldr	r3, [pc, #44]	@ (800579c <HAL_RCC_GetSysClockFreq+0x200>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	3301      	adds	r3, #1
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800577c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800577e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005780:	fbb2 f3f3 	udiv	r3, r2, r3
 8005784:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005786:	e002      	b.n	800578e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005788:	4b05      	ldr	r3, [pc, #20]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800578a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800578c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005790:	4618      	mov	r0, r3
 8005792:	3750      	adds	r7, #80	@ 0x50
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	007a1200 	.word	0x007a1200

080057a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057ac:	4b03      	ldr	r3, [pc, #12]	@ (80057bc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	2000000c 	.word	0x2000000c

080057c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057c4:	f7ff fff0 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057c8:	4602      	mov	r2, r0
 80057ca:	4b05      	ldr	r3, [pc, #20]	@ (80057e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	0a9b      	lsrs	r3, r3, #10
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	4903      	ldr	r1, [pc, #12]	@ (80057e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057d6:	5ccb      	ldrb	r3, [r1, r3]
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40023800 	.word	0x40023800
 80057e4:	0800ec28 	.word	0x0800ec28

080057e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057ec:	f7ff ffdc 	bl	80057a8 <HAL_RCC_GetHCLKFreq>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	0b5b      	lsrs	r3, r3, #13
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	4903      	ldr	r1, [pc, #12]	@ (800580c <HAL_RCC_GetPCLK2Freq+0x24>)
 80057fe:	5ccb      	ldrb	r3, [r1, r3]
 8005800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005804:	4618      	mov	r0, r3
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40023800 	.word	0x40023800
 800580c:	0800ec28 	.word	0x0800ec28

08005810 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e022      	b.n	8005868 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fc fd1f 	bl	8002278 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2203      	movs	r2, #3
 800583e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f814 	bl	8005870 <HAL_SD_InitCard>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e00a      	b.n	8005868 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005870:	b5b0      	push	{r4, r5, r7, lr}
 8005872:	b08e      	sub	sp, #56	@ 0x38
 8005874:	af04      	add	r7, sp, #16
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005878:	2300      	movs	r3, #0
 800587a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800588c:	2376      	movs	r3, #118	@ 0x76
 800588e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681d      	ldr	r5, [r3, #0]
 8005894:	466c      	mov	r4, sp
 8005896:	f107 0314 	add.w	r3, r7, #20
 800589a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800589e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058a2:	f107 0308 	add.w	r3, r7, #8
 80058a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058a8:	4628      	mov	r0, r5
 80058aa:	f002 ffd7 	bl	800885c <SDIO_Init>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80058b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04f      	b.n	8005960 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80058c0:	4b29      	ldr	r3, [pc, #164]	@ (8005968 <HAL_SD_InitCard+0xf8>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f003 f80f 	bl	80088ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80058d0:	4b25      	ldr	r3, [pc, #148]	@ (8005968 <HAL_SD_InitCard+0xf8>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80058d6:	2002      	movs	r0, #2
 80058d8:	f7fd f852 	bl	8002980 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f001 f911 	bl	8006b04 <SD_PowerON>
 80058e2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e02e      	b.n	8005960 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f001 f830 	bl	8006968 <SD_InitCard>
 8005908:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e01b      	b.n	8005960 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005930:	4618      	mov	r0, r3
 8005932:	f003 f86e 	bl	8008a12 <SDMMC_CmdBlockLength>
 8005936:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00f      	beq.n	800595e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a0a      	ldr	r2, [pc, #40]	@ (800596c <HAL_SD_InitCard+0xfc>)
 8005944:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	431a      	orrs	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e000      	b.n	8005960 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3728      	adds	r7, #40	@ 0x28
 8005964:	46bd      	mov	sp, r7
 8005966:	bdb0      	pop	{r4, r5, r7, pc}
 8005968:	422580a0 	.word	0x422580a0
 800596c:	004005ff 	.word	0x004005ff

08005970 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b092      	sub	sp, #72	@ 0x48
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800597e:	f7fc fff3 	bl	8002968 <HAL_GetTick>
 8005982:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e1c5      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	f040 81b8 	bne.w	8005d20 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80059b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d907      	bls.n	80059d4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e1ac      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2203      	movs	r2, #3
 80059d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d002      	beq.n	80059f2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80059ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ee:	025b      	lsls	r3, r3, #9
 80059f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295
 80059f6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	025b      	lsls	r3, r3, #9
 80059fc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80059fe:	2390      	movs	r3, #144	@ 0x90
 8005a00:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005a02:	2302      	movs	r3, #2
 8005a04:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f107 0214 	add.w	r2, r7, #20
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f002 ffce 	bl	80089ba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d90a      	bls.n	8005a3a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2202      	movs	r2, #2
 8005a28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a30:	4618      	mov	r0, r3
 8005a32:	f003 f832 	bl	8008a9a <SDMMC_CmdReadMultiBlock>
 8005a36:	6478      	str	r0, [r7, #68]	@ 0x44
 8005a38:	e009      	b.n	8005a4e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a46:	4618      	mov	r0, r3
 8005a48:	f003 f805 	bl	8008a56 <SDMMC_CmdReadSingleBlock>
 8005a4c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d012      	beq.n	8005a7a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a7e      	ldr	r2, [pc, #504]	@ (8005c54 <HAL_SD_ReadBlocks+0x2e4>)
 8005a5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a62:	431a      	orrs	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e159      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a7e:	e061      	b.n	8005b44 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d03c      	beq.n	8005b08 <HAL_SD_ReadBlocks+0x198>
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d039      	beq.n	8005b08 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a98:	e033      	b.n	8005b02 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f002 ff07 	bl	80088b2 <SDIO_ReadFIFO>
 8005aa4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005acc:	3b01      	subs	r3, #1
 8005ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005adc:	3301      	adds	r3, #1
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae8:	0e1b      	lsrs	r3, r3, #24
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af2:	3301      	adds	r3, #1
 8005af4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af8:	3b01      	subs	r3, #1
 8005afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005afe:	3301      	adds	r3, #1
 8005b00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b04:	2b07      	cmp	r3, #7
 8005b06:	d9c8      	bls.n	8005a9a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b08:	f7fc ff2e 	bl	8002968 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <HAL_SD_ReadBlocks+0x1ae>
 8005b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d112      	bne.n	8005b44 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a4c      	ldr	r2, [pc, #304]	@ (8005c54 <HAL_SD_ReadBlocks+0x2e4>)
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e0f4      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b4a:	f240 332a 	movw	r3, #810	@ 0x32a
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d095      	beq.n	8005a80 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d022      	beq.n	8005ba8 <HAL_SD_ReadBlocks+0x238>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d91f      	bls.n	8005ba8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d01b      	beq.n	8005ba8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f002 fff7 	bl	8008b68 <SDMMC_CmdStopTransfer>
 8005b7a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d012      	beq.n	8005ba8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a33      	ldr	r2, [pc, #204]	@ (8005c54 <HAL_SD_ReadBlocks+0x2e4>)
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0c2      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_SD_ReadBlocks+0x254>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d012      	beq.n	8005bea <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a22      	ldr	r2, [pc, #136]	@ (8005c54 <HAL_SD_ReadBlocks+0x2e4>)
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	f043 0208 	orr.w	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0a1      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a15      	ldr	r2, [pc, #84]	@ (8005c54 <HAL_SD_ReadBlocks+0x2e4>)
 8005bfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	f043 0202 	orr.w	r2, r3, #2
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e087      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d064      	beq.n	8005cf6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a08      	ldr	r2, [pc, #32]	@ (8005c54 <HAL_SD_ReadBlocks+0x2e4>)
 8005c32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c38:	f043 0220 	orr.w	r2, r3, #32
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e06d      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
 8005c52:	bf00      	nop
 8005c54:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f002 fe28 	bl	80088b2 <SDIO_ReadFIFO>
 8005c62:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	3301      	adds	r3, #1
 8005c70:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	3b01      	subs	r3, #1
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7a:	0a1b      	lsrs	r3, r3, #8
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c80:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c84:	3301      	adds	r3, #1
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c96:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca6:	0e1b      	lsrs	r3, r3, #24
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cac:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005cb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005cba:	f7fc fe55 	bl	8002968 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d902      	bls.n	8005cd0 <HAL_SD_ReadBlocks+0x360>
 8005cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d112      	bne.n	8005cf6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <HAL_SD_ReadBlocks+0x3c8>)
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e01b      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_SD_ReadBlocks+0x39a>
 8005d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1a6      	bne.n	8005c58 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005d12:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e006      	b.n	8005d2e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3748      	adds	r7, #72	@ 0x48
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	004005ff 	.word	0x004005ff

08005d3c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b092      	sub	sp, #72	@ 0x48
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d4a:	f7fc fe0d 	bl	8002968 <HAL_GetTick>
 8005d4e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d62:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e16d      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f040 8160 	bne.w	800603c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	441a      	add	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d907      	bls.n	8005da0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e154      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2203      	movs	r2, #3
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d002      	beq.n	8005dbe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dba:	025b      	lsls	r3, r3, #9
 8005dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	025b      	lsls	r3, r3, #9
 8005dc8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005dca:	2390      	movs	r3, #144	@ 0x90
 8005dcc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f107 0218 	add.w	r2, r7, #24
 8005de2:	4611      	mov	r1, r2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f002 fde8 	bl	80089ba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d90a      	bls.n	8005e06 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 fe90 	bl	8008b22 <SDMMC_CmdWriteMultiBlock>
 8005e02:	6478      	str	r0, [r7, #68]	@ 0x44
 8005e04:	e009      	b.n	8005e1a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e12:	4618      	mov	r0, r3
 8005e14:	f002 fe63 	bl	8008ade <SDMMC_CmdWriteSingleBlock>
 8005e18:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d012      	beq.n	8005e46 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a8b      	ldr	r2, [pc, #556]	@ (8006054 <HAL_SD_WriteBlocks+0x318>)
 8005e26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e101      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005e4a:	e065      	b.n	8005f18 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d040      	beq.n	8005edc <HAL_SD_WriteBlocks+0x1a0>
 8005e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d03d      	beq.n	8005edc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005e60:	2300      	movs	r3, #0
 8005e62:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e64:	e037      	b.n	8005ed6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6e:	3301      	adds	r3, #1
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e74:	3b01      	subs	r3, #1
 8005e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	021a      	lsls	r2, r3, #8
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e86:	3301      	adds	r3, #1
 8005e88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	041a      	lsls	r2, r3, #16
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	061a      	lsls	r2, r3, #24
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f107 0214 	add.w	r2, r7, #20
 8005ec8:	4611      	mov	r1, r2
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f002 fcfe 	bl	80088cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ed8:	2b07      	cmp	r3, #7
 8005eda:	d9c4      	bls.n	8005e66 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005edc:	f7fc fd44 	bl	8002968 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d902      	bls.n	8005ef2 <HAL_SD_WriteBlocks+0x1b6>
 8005eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d112      	bne.n	8005f18 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a57      	ldr	r2, [pc, #348]	@ (8006054 <HAL_SD_WriteBlocks+0x318>)
 8005ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f00:	431a      	orrs	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e098      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f1e:	f240 331a 	movw	r3, #794	@ 0x31a
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d091      	beq.n	8005e4c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d022      	beq.n	8005f7c <HAL_SD_WriteBlocks+0x240>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d91f      	bls.n	8005f7c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d01b      	beq.n	8005f7c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f002 fe0d 	bl	8008b68 <SDMMC_CmdStopTransfer>
 8005f4e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d012      	beq.n	8005f7c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8006054 <HAL_SD_WriteBlocks+0x318>)
 8005f5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f64:	431a      	orrs	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e066      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_SD_WriteBlocks+0x25c>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d012      	beq.n	8005fbe <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006054 <HAL_SD_WriteBlocks+0x318>)
 8005f9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa4:	f043 0208 	orr.w	r2, r3, #8
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e045      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a20      	ldr	r2, [pc, #128]	@ (8006054 <HAL_SD_WriteBlocks+0x318>)
 8005fd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	f043 0202 	orr.w	r2, r3, #2
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02b      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a13      	ldr	r2, [pc, #76]	@ (8006054 <HAL_SD_WriteBlocks+0x318>)
 8006006:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	f043 0210 	orr.w	r2, r3, #16
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e011      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800602e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e006      	b.n	800604a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006040:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3748      	adds	r7, #72	@ 0x48
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	004005ff 	.word	0x004005ff

08006058 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006064:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_SD_IRQHandler+0x2e>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 ff66 	bl	8006f50 <SD_Read_IT>
 8006084:	e165      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800608c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 808f 	beq.w	80061b4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800609e:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80060ae:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80060b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0201 	bic.w	r2, r2, #1
 80060c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d039      	beq.n	8006142 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d104      	bne.n	80060e2 <HAL_SD_IRQHandler+0x8a>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f002 fd3e 	bl	8008b68 <SDMMC_CmdStopTransfer>
 80060ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d008      	beq.n	8006106 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f92f 	bl	8006364 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800610e:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <HAL_SD_IRQHandler+0xda>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f003 f9a6 	bl	8009484 <HAL_SD_RxCpltCallback>
 8006138:	e10b      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f003 f998 	bl	8009470 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006140:	e107      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 8102 	beq.w	8006352 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d011      	beq.n	800617c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4618      	mov	r0, r3
 800615e:	f002 fd03 	bl	8008b68 <SDMMC_CmdStopTransfer>
 8006162:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d008      	beq.n	800617c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8f4 	bl	8006364 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	f040 80e5 	bne.w	8006352 <HAL_SD_IRQHandler+0x2fa>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 80df 	bne.w	8006352 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0208 	bic.w	r2, r2, #8
 80061a2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f003 f95f 	bl	8009470 <HAL_SD_TxCpltCallback>
}
 80061b2:	e0ce      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d008      	beq.n	80061d4 <HAL_SD_IRQHandler+0x17c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0308 	and.w	r3, r3, #8
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 ff10 	bl	8006ff2 <SD_Write_IT>
 80061d2:	e0be      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061da:	f240 233a 	movw	r3, #570	@ 0x23a
 80061de:	4013      	ands	r3, r2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80b6 	beq.w	8006352 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f8:	f043 0202 	orr.w	r2, r3, #2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006206:	f003 0308 	and.w	r3, r3, #8
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	f043 0208 	orr.w	r2, r3, #8
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006220:	f003 0320 	and.w	r3, r3, #32
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	f043 0220 	orr.w	r2, r3, #32
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	f003 0310 	and.w	r3, r3, #16
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	f043 0210 	orr.w	r2, r3, #16
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006260:	f043 0208 	orr.w	r2, r3, #8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f240 723a 	movw	r2, #1850	@ 0x73a
 8006270:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8006280:	f023 0302 	bic.w	r3, r3, #2
 8006284:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f002 fc6c 	bl	8008b68 <SDMMC_CmdStopTransfer>
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f855 	bl	8006364 <HAL_SD_ErrorCallback>
}
 80062ba:	e04a      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d045      	beq.n	8006352 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d104      	bne.n	80062da <HAL_SD_IRQHandler+0x282>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d011      	beq.n	80062fe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062de:	4a1f      	ldr	r2, [pc, #124]	@ (800635c <HAL_SD_IRQHandler+0x304>)
 80062e0:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fd fcf2 	bl	8003cd0 <HAL_DMA_Abort_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d02f      	beq.n	8006352 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fac8 	bl	800688c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80062fc:	e029      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d104      	bne.n	8006312 <HAL_SD_IRQHandler+0x2ba>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d011      	beq.n	8006336 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	4a12      	ldr	r2, [pc, #72]	@ (8006360 <HAL_SD_IRQHandler+0x308>)
 8006318:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	4618      	mov	r0, r3
 8006320:	f7fd fcd6 	bl	8003cd0 <HAL_DMA_Abort_IT>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d013      	beq.n	8006352 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fae3 	bl	80068fa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006334:	e00d      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f003 f886 	bl	800945c <HAL_SD_AbortCallback>
}
 8006350:	e7ff      	b.n	8006352 <HAL_SD_IRQHandler+0x2fa>
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	0800688d 	.word	0x0800688d
 8006360:	080068fb 	.word	0x080068fb

08006364 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006386:	0f9b      	lsrs	r3, r3, #30
 8006388:	b2da      	uxtb	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006392:	0e9b      	lsrs	r3, r3, #26
 8006394:	b2db      	uxtb	r3, r3
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	b2da      	uxtb	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a4:	0e1b      	lsrs	r3, r3, #24
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063c2:	0a1b      	lsrs	r3, r3, #8
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063d8:	0d1b      	lsrs	r3, r3, #20
 80063da:	b29a      	uxth	r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063f6:	0bdb      	lsrs	r3, r3, #15
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006408:	0b9b      	lsrs	r3, r3, #14
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800641a:	0b5b      	lsrs	r3, r3, #13
 800641c:	b2db      	uxtb	r3, r3
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800642c:	0b1b      	lsrs	r3, r3, #12
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006444:	2b00      	cmp	r3, #0
 8006446:	d163      	bne.n	8006510 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800644c:	009a      	lsls	r2, r3, #2
 800644e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006452:	4013      	ands	r3, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006458:	0f92      	lsrs	r2, r2, #30
 800645a:	431a      	orrs	r2, r3
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006464:	0edb      	lsrs	r3, r3, #27
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	b2da      	uxtb	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006476:	0e1b      	lsrs	r3, r3, #24
 8006478:	b2db      	uxtb	r3, r3
 800647a:	f003 0307 	and.w	r3, r3, #7
 800647e:	b2da      	uxtb	r2, r3
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006488:	0d5b      	lsrs	r3, r3, #21
 800648a:	b2db      	uxtb	r3, r3
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800649a:	0c9b      	lsrs	r3, r3, #18
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064ac:	0bdb      	lsrs	r3, r3, #15
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	7e1b      	ldrb	r3, [r3, #24]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	f003 0307 	and.w	r3, r3, #7
 80064ce:	3302      	adds	r3, #2
 80064d0:	2201      	movs	r2, #1
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80064da:	fb03 f202 	mul.w	r2, r3, r2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	7a1b      	ldrb	r3, [r3, #8]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	2201      	movs	r2, #1
 80064ee:	409a      	lsls	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80064fc:	0a52      	lsrs	r2, r2, #9
 80064fe:	fb03 f202 	mul.w	r2, r3, r2
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800650c:	661a      	str	r2, [r3, #96]	@ 0x60
 800650e:	e031      	b.n	8006574 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006514:	2b01      	cmp	r3, #1
 8006516:	d11d      	bne.n	8006554 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006526:	0c1b      	lsrs	r3, r3, #16
 8006528:	431a      	orrs	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	3301      	adds	r3, #1
 8006534:	029a      	lsls	r2, r3, #10
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006548:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	661a      	str	r2, [r3, #96]	@ 0x60
 8006552:	e00f      	b.n	8006574 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a58      	ldr	r2, [pc, #352]	@ (80066bc <HAL_SD_GetCardCSD+0x344>)
 800655a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006560:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e09d      	b.n	80066b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006578:	0b9b      	lsrs	r3, r3, #14
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	b2da      	uxtb	r2, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800658a:	09db      	lsrs	r3, r3, #7
 800658c:	b2db      	uxtb	r3, r3
 800658e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006592:	b2da      	uxtb	r2, r3
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800659c:	b2db      	uxtb	r3, r3
 800659e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ac:	0fdb      	lsrs	r3, r3, #31
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b8:	0f5b      	lsrs	r3, r3, #29
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	f003 0303 	and.w	r3, r3, #3
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ca:	0e9b      	lsrs	r3, r3, #26
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065dc:	0d9b      	lsrs	r3, r3, #22
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ee:	0d5b      	lsrs	r3, r3, #21
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	b2da      	uxtb	r2, r3
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661e:	0bdb      	lsrs	r3, r3, #15
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	b2da      	uxtb	r2, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006632:	0b9b      	lsrs	r3, r3, #14
 8006634:	b2db      	uxtb	r3, r3
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	b2da      	uxtb	r2, r3
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006646:	0b5b      	lsrs	r3, r3, #13
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665a:	0b1b      	lsrs	r3, r3, #12
 800665c:	b2db      	uxtb	r3, r3
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	b2da      	uxtb	r2, r3
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666e:	0a9b      	lsrs	r3, r3, #10
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	b2da      	uxtb	r2, r3
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006682:	0a1b      	lsrs	r3, r3, #8
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	b2da      	uxtb	r2, r3
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr
 80066bc:	004005ff 	.word	0x004005ff

080066c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006718:	b5b0      	push	{r4, r5, r7, lr}
 800671a:	b08e      	sub	sp, #56	@ 0x38
 800671c:	af04      	add	r7, sp, #16
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2203      	movs	r2, #3
 800672c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006734:	2b03      	cmp	r3, #3
 8006736:	d02e      	beq.n	8006796 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673e:	d106      	bne.n	800674e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006744:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	@ 0x38
 800674c:	e029      	b.n	80067a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006754:	d10a      	bne.n	800676c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa8a 	bl	8006c70 <SD_WideBus_Enable>
 800675c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	639a      	str	r2, [r3, #56]	@ 0x38
 800676a:	e01a      	b.n	80067a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fac7 	bl	8006d06 <SD_WideBus_Disable>
 8006778:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	639a      	str	r2, [r3, #56]	@ 0x38
 8006786:	e00c      	b.n	80067a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	639a      	str	r2, [r3, #56]	@ 0x38
 8006794:	e005      	b.n	80067a2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00b      	beq.n	80067c2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a26      	ldr	r2, [pc, #152]	@ (8006848 <HAL_SD_ConfigWideBusOperation+0x130>)
 80067b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80067c0:	e01f      	b.n	8006802 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681d      	ldr	r5, [r3, #0]
 80067e8:	466c      	mov	r4, sp
 80067ea:	f107 0314 	add.w	r3, r7, #20
 80067ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80067f6:	f107 0308 	add.w	r3, r7, #8
 80067fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067fc:	4628      	mov	r0, r5
 80067fe:	f002 f82d 	bl	800885c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800680a:	4618      	mov	r0, r3
 800680c:	f002 f901 	bl	8008a12 <SDMMC_CmdBlockLength>
 8006810:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00c      	beq.n	8006832 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a0a      	ldr	r2, [pc, #40]	@ (8006848 <HAL_SD_ConfigWideBusOperation+0x130>)
 800681e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800683a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800683e:	4618      	mov	r0, r3
 8006840:	3728      	adds	r7, #40	@ 0x28
 8006842:	46bd      	mov	sp, r7
 8006844:	bdb0      	pop	{r4, r5, r7, pc}
 8006846:	bf00      	nop
 8006848:	004005ff 	.word	0x004005ff

0800684c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f9de 	bl	8006c20 <SD_SendStatus>
 8006864:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	0a5b      	lsrs	r3, r3, #9
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006882:	693b      	ldr	r3, [r7, #16]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006898:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f240 523a 	movw	r2, #1338	@ 0x53a
 80068a2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff ffd1 	bl	800684c <HAL_SD_GetCardState>
 80068aa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b06      	cmp	r3, #6
 80068be:	d002      	beq.n	80068c6 <SD_DMATxAbort+0x3a>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b05      	cmp	r3, #5
 80068c4:	d10a      	bne.n	80068dc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f002 f94c 	bl	8008b68 <SDMMC_CmdStopTransfer>
 80068d0:	4602      	mov	r2, r0
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	431a      	orrs	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f002 fdb9 	bl	800945c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80068ea:	e002      	b.n	80068f2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff fd39 	bl	8006364 <HAL_SD_ErrorCallback>
}
 80068f2:	bf00      	nop
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006906:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006910:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff ff9a 	bl	800684c <HAL_SD_GetCardState>
 8006918:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b06      	cmp	r3, #6
 800692c:	d002      	beq.n	8006934 <SD_DMARxAbort+0x3a>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b05      	cmp	r3, #5
 8006932:	d10a      	bne.n	800694a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4618      	mov	r0, r3
 800693a:	f002 f915 	bl	8008b68 <SDMMC_CmdStopTransfer>
 800693e:	4602      	mov	r2, r0
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d103      	bne.n	800695a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f002 fd82 	bl	800945c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006958:	e002      	b.n	8006960 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff fd02 	bl	8006364 <HAL_SD_ErrorCallback>
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006968:	b5b0      	push	{r4, r5, r7, lr}
 800696a:	b094      	sub	sp, #80	@ 0x50
 800696c:	af04      	add	r7, sp, #16
 800696e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006970:	2301      	movs	r3, #1
 8006972:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f001 ffc6 	bl	800890a <SDIO_GetPowerState>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d102      	bne.n	800698a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006984:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006988:	e0b8      	b.n	8006afc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698e:	2b03      	cmp	r3, #3
 8006990:	d02f      	beq.n	80069f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f002 f9f0 	bl	8008d7c <SDMMC_CmdSendCID>
 800699c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800699e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80069a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a6:	e0a9      	b.n	8006afc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 fff0 	bl	8008994 <SDIO_GetResponse>
 80069b4:	4602      	mov	r2, r0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2104      	movs	r1, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 ffe7 	bl	8008994 <SDIO_GetResponse>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2108      	movs	r1, #8
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 ffde 	bl	8008994 <SDIO_GetResponse>
 80069d8:	4602      	mov	r2, r0
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	210c      	movs	r1, #12
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 ffd5 	bl	8008994 <SDIO_GetResponse>
 80069ea:	4602      	mov	r2, r0
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d00d      	beq.n	8006a16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f107 020e 	add.w	r2, r7, #14
 8006a02:	4611      	mov	r1, r2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 f9f6 	bl	8008df6 <SDMMC_CmdSetRelAdd>
 8006a0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <SD_InitCard+0xae>
    {
      return errorstate;
 8006a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a14:	e072      	b.n	8006afc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d036      	beq.n	8006a8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006a1e:	89fb      	ldrh	r3, [r7, #14]
 8006a20:	461a      	mov	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a2e:	041b      	lsls	r3, r3, #16
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f002 f9c0 	bl	8008db8 <SDMMC_CmdSendCSD>
 8006a38:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a42:	e05b      	b.n	8006afc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 ffa2 	bl	8008994 <SDIO_GetResponse>
 8006a50:	4602      	mov	r2, r0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2104      	movs	r1, #4
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 ff99 	bl	8008994 <SDIO_GetResponse>
 8006a62:	4602      	mov	r2, r0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2108      	movs	r1, #8
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 ff90 	bl	8008994 <SDIO_GetResponse>
 8006a74:	4602      	mov	r2, r0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	210c      	movs	r1, #12
 8006a80:	4618      	mov	r0, r3
 8006a82:	f001 ff87 	bl	8008994 <SDIO_GetResponse>
 8006a86:	4602      	mov	r2, r0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2104      	movs	r1, #4
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 ff7e 	bl	8008994 <SDIO_GetResponse>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	0d1a      	lsrs	r2, r3, #20
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fc66 	bl	8006378 <HAL_SD_GetCardCSD>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ab2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006ab6:	e021      	b.n	8006afc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6819      	ldr	r1, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	461c      	mov	r4, r3
 8006ac6:	4615      	mov	r5, r2
 8006ac8:	4622      	mov	r2, r4
 8006aca:	462b      	mov	r3, r5
 8006acc:	4608      	mov	r0, r1
 8006ace:	f002 f86d 	bl	8008bac <SDMMC_CmdSelDesel>
 8006ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <SD_InitCard+0x176>
  {
    return errorstate;
 8006ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006adc:	e00e      	b.n	8006afc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681d      	ldr	r5, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	466c      	mov	r4, sp
 8006ae6:	f103 0210 	add.w	r2, r3, #16
 8006aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8006aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006af0:	3304      	adds	r3, #4
 8006af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006af4:	4628      	mov	r0, r5
 8006af6:	f001 feb1 	bl	800885c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3740      	adds	r7, #64	@ 0x40
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bdb0      	pop	{r4, r5, r7, pc}

08006b04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	2300      	movs	r3, #0
 8006b16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f002 f868 	bl	8008bf2 <SDMMC_CmdGoIdleState>
 8006b22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <SD_PowerON+0x2a>
  {
    return errorstate;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	e072      	b.n	8006c14 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f002 f87b 	bl	8008c2e <SDMMC_CmdOperCond>
 8006b38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00d      	beq.n	8006b5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f002 f851 	bl	8008bf2 <SDMMC_CmdGoIdleState>
 8006b50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	e05b      	b.n	8006c14 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d137      	bne.n	8006bda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f002 f87b 	bl	8008c6c <SDMMC_CmdAppCommand>
 8006b76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d02d      	beq.n	8006bda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b7e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006b82:	e047      	b.n	8006c14 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2100      	movs	r1, #0
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f002 f86e 	bl	8008c6c <SDMMC_CmdAppCommand>
 8006b90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <SD_PowerON+0x98>
    {
      return errorstate;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	e03b      	b.n	8006c14 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	491e      	ldr	r1, [pc, #120]	@ (8006c1c <SD_PowerON+0x118>)
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f002 f884 	bl	8008cb0 <SDMMC_CmdAppOperCommand>
 8006ba8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bb0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006bb4:	e02e      	b.n	8006c14 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fee9 	bl	8008994 <SDIO_GetResponse>
 8006bc2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	0fdb      	lsrs	r3, r3, #31
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <SD_PowerON+0xcc>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <SD_PowerON+0xce>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]

    count++;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d802      	bhi.n	8006bea <SD_PowerON+0xe6>
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d0cc      	beq.n	8006b84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d902      	bls.n	8006bfa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006bf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bf8:	e00c      	b.n	8006c14 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	645a      	str	r2, [r3, #68]	@ 0x44
 8006c0a:	e002      	b.n	8006c12 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	c1100000 	.word	0xc1100000

08006c20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c34:	e018      	b.n	8006c68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c3e:	041b      	lsls	r3, r3, #16
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f002 f8f8 	bl	8008e38 <SDMMC_CmdSendStatus>
 8006c48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	e009      	b.n	8006c68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f001 fe9a 	bl	8008994 <SDIO_GetResponse>
 8006c60:	4602      	mov	r2, r0
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006c78:	2300      	movs	r3, #0
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2100      	movs	r1, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 fe84 	bl	8008994 <SDIO_GetResponse>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c96:	d102      	bne.n	8006c9e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006c9c:	e02f      	b.n	8006cfe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006c9e:	f107 030c 	add.w	r3, r7, #12
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f879 	bl	8006d9c <SD_FindSCR>
 8006caa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	e023      	b.n	8006cfe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01c      	beq.n	8006cfa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc8:	041b      	lsls	r3, r3, #16
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4610      	mov	r0, r2
 8006cce:	f001 ffcd 	bl	8008c6c <SDMMC_CmdAppCommand>
 8006cd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	e00f      	b.n	8006cfe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f002 f806 	bl	8008cf6 <SDMMC_CmdBusWidth>
 8006cea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	e003      	b.n	8006cfe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e001      	b.n	8006cfe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006cfa:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b086      	sub	sp, #24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	2300      	movs	r3, #0
 8006d14:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f001 fe39 	bl	8008994 <SDIO_GetResponse>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d2c:	d102      	bne.n	8006d34 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006d32:	e02f      	b.n	8006d94 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d34:	f107 030c 	add.w	r3, r7, #12
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f82e 	bl	8006d9c <SD_FindSCR>
 8006d40:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	e023      	b.n	8006d94 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d01c      	beq.n	8006d90 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d5e:	041b      	lsls	r3, r3, #16
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f001 ff82 	bl	8008c6c <SDMMC_CmdAppCommand>
 8006d68:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	e00f      	b.n	8006d94 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 ffbb 	bl	8008cf6 <SDMMC_CmdBusWidth>
 8006d80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	e003      	b.n	8006d94 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	e001      	b.n	8006d94 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d90:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006d9c:	b590      	push	{r4, r7, lr}
 8006d9e:	b08f      	sub	sp, #60	@ 0x3c
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006da6:	f7fb fddf 	bl	8002968 <HAL_GetTick>
 8006daa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006db0:	2300      	movs	r3, #0
 8006db2:	60bb      	str	r3, [r7, #8]
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2108      	movs	r1, #8
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 fe25 	bl	8008a12 <SDMMC_CmdBlockLength>
 8006dc8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	e0b9      	b.n	8006f48 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ddc:	041b      	lsls	r3, r3, #16
 8006dde:	4619      	mov	r1, r3
 8006de0:	4610      	mov	r0, r2
 8006de2:	f001 ff43 	bl	8008c6c <SDMMC_CmdAppCommand>
 8006de6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	e0aa      	b.n	8006f48 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006df2:	f04f 33ff 	mov.w	r3, #4294967295
 8006df6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006df8:	2308      	movs	r3, #8
 8006dfa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006dfc:	2330      	movs	r3, #48	@ 0x30
 8006dfe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006e00:	2302      	movs	r3, #2
 8006e02:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f107 0210 	add.w	r2, r7, #16
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 fdcf 	bl	80089ba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 ff8a 	bl	8008d3a <SDMMC_CmdSendSCR>
 8006e26:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d02a      	beq.n	8006e84 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	e08a      	b.n	8006f48 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00f      	beq.n	8006e60 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	f107 0208 	add.w	r2, r7, #8
 8006e4c:	18d4      	adds	r4, r2, r3
 8006e4e:	4608      	mov	r0, r1
 8006e50:	f001 fd2f 	bl	80088b2 <SDIO_ReadFIFO>
 8006e54:	4603      	mov	r3, r0
 8006e56:	6023      	str	r3, [r4, #0]
      index++;
 8006e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5e:	e006      	b.n	8006e6e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d012      	beq.n	8006e94 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8006e6e:	f7fb fd7b 	bl	8002968 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d102      	bne.n	8006e84 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e7e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e82:	e061      	b.n	8006f48 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0cf      	beq.n	8006e32 <SD_FindSCR+0x96>
 8006e92:	e000      	b.n	8006e96 <SD_FindSCR+0xfa>
      break;
 8006e94:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e9c:	f003 0308 	and.w	r3, r3, #8
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d106      	bne.n	8006eb2 <SD_FindSCR+0x116>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eaa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d005      	beq.n	8006ebe <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006eba:	2308      	movs	r3, #8
 8006ebc:	e044      	b.n	8006f48 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e037      	b.n	8006f48 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2220      	movs	r2, #32
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006eee:	2320      	movs	r3, #32
 8006ef0:	e02a      	b.n	8006f48 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006efa:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	061a      	lsls	r2, r3, #24
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f08:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	0a1b      	lsrs	r3, r3, #8
 8006f0e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f12:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	0e1b      	lsrs	r3, r3, #24
 8006f18:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1c:	601a      	str	r2, [r3, #0]
    scr++;
 8006f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f20:	3304      	adds	r3, #4
 8006f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	061a      	lsls	r2, r3, #24
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	021b      	lsls	r3, r3, #8
 8006f2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f30:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	0a1b      	lsrs	r3, r3, #8
 8006f36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f3a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	0e1b      	lsrs	r3, r3, #24
 8006f40:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f44:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	373c      	adds	r7, #60	@ 0x3c
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd90      	pop	{r4, r7, pc}

08006f50 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d03f      	beq.n	8006fea <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e033      	b.n	8006fd8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fc9c 	bl	80088b2 <SDIO_ReadFIFO>
 8006f7a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	0c1b      	lsrs	r3, r3, #16
 8006faa:	b2da      	uxtb	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	0e1b      	lsrs	r3, r3, #24
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b07      	cmp	r3, #7
 8006fdc:	d9c8      	bls.n	8006f70 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8006fea:	bf00      	nop
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d043      	beq.n	8007094 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e037      	b.n	8007082 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	3b01      	subs	r3, #1
 8007022:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	021a      	lsls	r2, r3, #8
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4313      	orrs	r3, r2
 800702e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3301      	adds	r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	3b01      	subs	r3, #1
 800703a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	041a      	lsls	r2, r3, #16
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4313      	orrs	r3, r2
 8007046:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3b01      	subs	r3, #1
 8007052:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	061a      	lsls	r2, r3, #24
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4313      	orrs	r3, r2
 800705e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3b01      	subs	r3, #1
 800706a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f107 0208 	add.w	r2, r7, #8
 8007074:	4611      	mov	r1, r2
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fc28 	bl	80088cc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	3301      	adds	r3, #1
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b07      	cmp	r3, #7
 8007086:	d9c4      	bls.n	8007012 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8007094:	bf00      	nop
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e041      	b.n	8007132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fb f9d8 	bl	8002478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f000 faf8 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
	...

0800713c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800714a:	b2db      	uxtb	r3, r3
 800714c:	2b01      	cmp	r3, #1
 800714e:	d001      	beq.n	8007154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e044      	b.n	80071de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1e      	ldr	r2, [pc, #120]	@ (80071ec <HAL_TIM_Base_Start_IT+0xb0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d018      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800717e:	d013      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1a      	ldr	r2, [pc, #104]	@ (80071f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d00e      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x6c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a19      	ldr	r2, [pc, #100]	@ (80071f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d009      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a17      	ldr	r2, [pc, #92]	@ (80071f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d004      	beq.n	80071a8 <HAL_TIM_Base_Start_IT+0x6c>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a16      	ldr	r2, [pc, #88]	@ (80071fc <HAL_TIM_Base_Start_IT+0xc0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d111      	bne.n	80071cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b06      	cmp	r3, #6
 80071b8:	d010      	beq.n	80071dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0201 	orr.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ca:	e007      	b.n	80071dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40014000 	.word	0x40014000

08007200 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68da      	ldr	r2, [r3, #12]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0201 	bic.w	r2, r2, #1
 8007216:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007222:	4013      	ands	r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10f      	bne.n	8007248 <HAL_TIM_Base_Stop_IT+0x48>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6a1a      	ldr	r2, [r3, #32]
 800722e:	f240 4344 	movw	r3, #1092	@ 0x444
 8007232:	4013      	ands	r3, r2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d107      	bne.n	8007248 <HAL_TIM_Base_Stop_IT+0x48>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0201 	bic.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e041      	b.n	80072f6 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f839 	bl	80072fe <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f000 fa16 	bl	80076d0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0208 	bic.w	r2, r2, #8
 80072b2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d020      	beq.n	8007376 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01b      	beq.n	8007376 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f06f 0202 	mvn.w	r2, #2
 8007346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f999 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 8007362:	e005      	b.n	8007370 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f98b 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f99c 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d020      	beq.n	80073c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d01b      	beq.n	80073c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f06f 0204 	mvn.w	r2, #4
 8007392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d003      	beq.n	80073b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f973 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 80073ae:	e005      	b.n	80073bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f965 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f976 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d020      	beq.n	800740e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01b      	beq.n	800740e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f06f 0208 	mvn.w	r2, #8
 80073de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2204      	movs	r2, #4
 80073e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	f003 0303 	and.w	r3, r3, #3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f94d 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 80073fa:	e005      	b.n	8007408 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f93f 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f950 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	d020      	beq.n	800745a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f003 0310 	and.w	r3, r3, #16
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01b      	beq.n	800745a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f06f 0210 	mvn.w	r2, #16
 800742a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2208      	movs	r2, #8
 8007430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800743c:	2b00      	cmp	r3, #0
 800743e:	d003      	beq.n	8007448 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f927 	bl	8007694 <HAL_TIM_IC_CaptureCallback>
 8007446:	e005      	b.n	8007454 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f919 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f92a 	bl	80076a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f06f 0201 	mvn.w	r2, #1
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7f9 fb2d 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00c      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fab5 	bl	8007a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8fb 	bl	80076bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f06f 0220 	mvn.w	r2, #32
 80074e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa87 	bl	80079f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_TIM_ConfigClockSource+0x1c>
 800750a:	2302      	movs	r3, #2
 800750c:	e0b4      	b.n	8007678 <HAL_TIM_ConfigClockSource+0x186>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800752c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007534:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007546:	d03e      	beq.n	80075c6 <HAL_TIM_ConfigClockSource+0xd4>
 8007548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800754c:	f200 8087 	bhi.w	800765e <HAL_TIM_ConfigClockSource+0x16c>
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007554:	f000 8086 	beq.w	8007664 <HAL_TIM_ConfigClockSource+0x172>
 8007558:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800755c:	d87f      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
 800755e:	2b70      	cmp	r3, #112	@ 0x70
 8007560:	d01a      	beq.n	8007598 <HAL_TIM_ConfigClockSource+0xa6>
 8007562:	2b70      	cmp	r3, #112	@ 0x70
 8007564:	d87b      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
 8007566:	2b60      	cmp	r3, #96	@ 0x60
 8007568:	d050      	beq.n	800760c <HAL_TIM_ConfigClockSource+0x11a>
 800756a:	2b60      	cmp	r3, #96	@ 0x60
 800756c:	d877      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
 800756e:	2b50      	cmp	r3, #80	@ 0x50
 8007570:	d03c      	beq.n	80075ec <HAL_TIM_ConfigClockSource+0xfa>
 8007572:	2b50      	cmp	r3, #80	@ 0x50
 8007574:	d873      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d058      	beq.n	800762c <HAL_TIM_ConfigClockSource+0x13a>
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d86f      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
 800757e:	2b30      	cmp	r3, #48	@ 0x30
 8007580:	d064      	beq.n	800764c <HAL_TIM_ConfigClockSource+0x15a>
 8007582:	2b30      	cmp	r3, #48	@ 0x30
 8007584:	d86b      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d060      	beq.n	800764c <HAL_TIM_ConfigClockSource+0x15a>
 800758a:	2b20      	cmp	r3, #32
 800758c:	d867      	bhi.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d05c      	beq.n	800764c <HAL_TIM_ConfigClockSource+0x15a>
 8007592:	2b10      	cmp	r3, #16
 8007594:	d05a      	beq.n	800764c <HAL_TIM_ConfigClockSource+0x15a>
 8007596:	e062      	b.n	800765e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075a8:	f000 f998 	bl	80078dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	609a      	str	r2, [r3, #8]
      break;
 80075c4:	e04f      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075d6:	f000 f981 	bl	80078dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075e8:	609a      	str	r2, [r3, #8]
      break;
 80075ea:	e03c      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f8:	461a      	mov	r2, r3
 80075fa:	f000 f8f5 	bl	80077e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2150      	movs	r1, #80	@ 0x50
 8007604:	4618      	mov	r0, r3
 8007606:	f000 f94e 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 800760a:	e02c      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007618:	461a      	mov	r2, r3
 800761a:	f000 f914 	bl	8007846 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2160      	movs	r1, #96	@ 0x60
 8007624:	4618      	mov	r0, r3
 8007626:	f000 f93e 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 800762a:	e01c      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007638:	461a      	mov	r2, r3
 800763a:	f000 f8d5 	bl	80077e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2140      	movs	r1, #64	@ 0x40
 8007644:	4618      	mov	r0, r3
 8007646:	f000 f92e 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 800764a:	e00c      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f000 f925 	bl	80078a6 <TIM_ITRx_SetConfig>
      break;
 800765c:	e003      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	73fb      	strb	r3, [r7, #15]
      break;
 8007662:	e000      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a3a      	ldr	r2, [pc, #232]	@ (80077cc <TIM_Base_SetConfig+0xfc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0x38>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x38>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a37      	ldr	r2, [pc, #220]	@ (80077d0 <TIM_Base_SetConfig+0x100>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x38>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a36      	ldr	r2, [pc, #216]	@ (80077d4 <TIM_Base_SetConfig+0x104>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x38>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a35      	ldr	r2, [pc, #212]	@ (80077d8 <TIM_Base_SetConfig+0x108>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2b      	ldr	r2, [pc, #172]	@ (80077cc <TIM_Base_SetConfig+0xfc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01b      	beq.n	800775a <TIM_Base_SetConfig+0x8a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007728:	d017      	beq.n	800775a <TIM_Base_SetConfig+0x8a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a28      	ldr	r2, [pc, #160]	@ (80077d0 <TIM_Base_SetConfig+0x100>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d013      	beq.n	800775a <TIM_Base_SetConfig+0x8a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a27      	ldr	r2, [pc, #156]	@ (80077d4 <TIM_Base_SetConfig+0x104>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d00f      	beq.n	800775a <TIM_Base_SetConfig+0x8a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a26      	ldr	r2, [pc, #152]	@ (80077d8 <TIM_Base_SetConfig+0x108>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00b      	beq.n	800775a <TIM_Base_SetConfig+0x8a>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a25      	ldr	r2, [pc, #148]	@ (80077dc <TIM_Base_SetConfig+0x10c>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d007      	beq.n	800775a <TIM_Base_SetConfig+0x8a>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a24      	ldr	r2, [pc, #144]	@ (80077e0 <TIM_Base_SetConfig+0x110>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d003      	beq.n	800775a <TIM_Base_SetConfig+0x8a>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a23      	ldr	r2, [pc, #140]	@ (80077e4 <TIM_Base_SetConfig+0x114>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d108      	bne.n	800776c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a0e      	ldr	r2, [pc, #56]	@ (80077cc <TIM_Base_SetConfig+0xfc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d103      	bne.n	80077a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d105      	bne.n	80077be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f023 0201 	bic.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	611a      	str	r2, [r3, #16]
  }
}
 80077be:	bf00      	nop
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40010000 	.word	0x40010000
 80077d0:	40000400 	.word	0x40000400
 80077d4:	40000800 	.word	0x40000800
 80077d8:	40000c00 	.word	0x40000c00
 80077dc:	40014000 	.word	0x40014000
 80077e0:	40014400 	.word	0x40014400
 80077e4:	40014800 	.word	0x40014800

080077e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b087      	sub	sp, #28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f023 0201 	bic.w	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4313      	orrs	r3, r2
 800781c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f023 030a 	bic.w	r3, r3, #10
 8007824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	bf00      	nop
 800783c:	371c      	adds	r7, #28
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007846:	b480      	push	{r7}
 8007848:	b087      	sub	sp, #28
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f023 0210 	bic.w	r2, r3, #16
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007870:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	031b      	lsls	r3, r3, #12
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007882:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	697a      	ldr	r2, [r7, #20]
 800788a:	4313      	orrs	r3, r2
 800788c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	621a      	str	r2, [r3, #32]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f043 0307 	orr.w	r3, r3, #7
 80078c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	609a      	str	r2, [r3, #8]
}
 80078d0:	bf00      	nop
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	021a      	lsls	r2, r3, #8
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	431a      	orrs	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4313      	orrs	r3, r2
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	4313      	orrs	r3, r2
 8007908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	609a      	str	r2, [r3, #8]
}
 8007910:	bf00      	nop
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007930:	2302      	movs	r3, #2
 8007932:	e050      	b.n	80079d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800795a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1c      	ldr	r2, [pc, #112]	@ (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d018      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007980:	d013      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a18      	ldr	r2, [pc, #96]	@ (80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d00e      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a16      	ldr	r2, [pc, #88]	@ (80079ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a15      	ldr	r2, [pc, #84]	@ (80079f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a13      	ldr	r2, [pc, #76]	@ (80079f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d10c      	bne.n	80079c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40010000 	.word	0x40010000
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40000800 	.word	0x40000800
 80079f0:	40000c00 	.word	0x40000c00
 80079f4:	40014000 	.word	0x40014000

080079f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e042      	b.n	8007ab8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fa fd5c 	bl	8002504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2224      	movs	r2, #36	@ 0x24
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fc85 	bl	8008374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b0ba      	sub	sp, #232	@ 0xe8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10f      	bne.n	8007b26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <HAL_UART_IRQHandler+0x66>
 8007b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fb69 	bl	80081f6 <UART_Receive_IT>
      return;
 8007b24:	e25b      	b.n	8007fde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f000 80de 	beq.w	8007cec <HAL_UART_IRQHandler+0x22c>
 8007b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d106      	bne.n	8007b4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 80d1 	beq.w	8007cec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00b      	beq.n	8007b6e <HAL_UART_IRQHandler+0xae>
 8007b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b66:	f043 0201 	orr.w	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b72:	f003 0304 	and.w	r3, r3, #4
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <HAL_UART_IRQHandler+0xd2>
 8007b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8a:	f043 0202 	orr.w	r2, r3, #2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00b      	beq.n	8007bb6 <HAL_UART_IRQHandler+0xf6>
 8007b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bae:	f043 0204 	orr.w	r2, r3, #4
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d011      	beq.n	8007be6 <HAL_UART_IRQHandler+0x126>
 8007bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d105      	bne.n	8007bda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bde:	f043 0208 	orr.w	r2, r3, #8
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 81f2 	beq.w	8007fd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d008      	beq.n	8007c0e <HAL_UART_IRQHandler+0x14e>
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c00:	f003 0320 	and.w	r3, r3, #32
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 faf4 	bl	80081f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c18:	2b40      	cmp	r3, #64	@ 0x40
 8007c1a:	bf0c      	ite	eq
 8007c1c:	2301      	moveq	r3, #1
 8007c1e:	2300      	movne	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <HAL_UART_IRQHandler+0x17a>
 8007c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d04f      	beq.n	8007cda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f9fc 	bl	8008038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4a:	2b40      	cmp	r3, #64	@ 0x40
 8007c4c:	d141      	bne.n	8007cd2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3314      	adds	r3, #20
 8007c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3314      	adds	r3, #20
 8007c76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007c7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007c86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1d9      	bne.n	8007c4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ea0 <HAL_UART_IRQHandler+0x3e0>)
 8007ca8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fc f80e 	bl	8003cd0 <HAL_DMA_Abort_IT>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d016      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc8:	e00e      	b.n	8007ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f99e 	bl	800800c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd0:	e00a      	b.n	8007ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f99a 	bl	800800c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd8:	e006      	b.n	8007ce8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f996 	bl	800800c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007ce6:	e175      	b.n	8007fd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce8:	bf00      	nop
    return;
 8007cea:	e173      	b.n	8007fd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	f040 814f 	bne.w	8007f94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 8148 	beq.w	8007f94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8141 	beq.w	8007f94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d12:	2300      	movs	r3, #0
 8007d14:	60bb      	str	r3, [r7, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60bb      	str	r3, [r7, #8]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	60bb      	str	r3, [r7, #8]
 8007d26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d32:	2b40      	cmp	r3, #64	@ 0x40
 8007d34:	f040 80b6 	bne.w	8007ea4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8145 	beq.w	8007fd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d56:	429a      	cmp	r2, r3
 8007d58:	f080 813e 	bcs.w	8007fd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007d62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d6e:	f000 8088 	beq.w	8007e82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	330c      	adds	r3, #12
 8007d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007d9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007da2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1d9      	bne.n	8007d72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3314      	adds	r3, #20
 8007dc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007dc8:	e853 3f00 	ldrex	r3, [r3]
 8007dcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007dce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007dd0:	f023 0301 	bic.w	r3, r3, #1
 8007dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3314      	adds	r3, #20
 8007dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007de2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007de6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e1      	bne.n	8007dbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3314      	adds	r3, #20
 8007e00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e04:	e853 3f00 	ldrex	r3, [r3]
 8007e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	3314      	adds	r3, #20
 8007e1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e3      	bne.n	8007dfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	330c      	adds	r3, #12
 8007e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e52:	f023 0310 	bic.w	r3, r3, #16
 8007e56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007e64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007e66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007e6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e3      	bne.n	8007e40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fb feb7 	bl	8003bf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	4619      	mov	r1, r3
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f8c1 	bl	8008020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e9e:	e09b      	b.n	8007fd8 <HAL_UART_IRQHandler+0x518>
 8007ea0:	080080ff 	.word	0x080080ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 808e 	beq.w	8007fdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007ec0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8089 	beq.w	8007fdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	330c      	adds	r3, #12
 8007ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	330c      	adds	r3, #12
 8007eea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007eee:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ef0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e3      	bne.n	8007eca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3314      	adds	r3, #20
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	623b      	str	r3, [r7, #32]
   return(result);
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	f023 0301 	bic.w	r3, r3, #1
 8007f18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3314      	adds	r3, #20
 8007f22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f26:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e3      	bne.n	8007f02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 0310 	bic.w	r3, r3, #16
 8007f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007f6c:	61fa      	str	r2, [r7, #28]
 8007f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	69b9      	ldr	r1, [r7, #24]
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	617b      	str	r3, [r7, #20]
   return(result);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e3      	bne.n	8007f48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f847 	bl	8008020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f92:	e023      	b.n	8007fdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d009      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x4f4>
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f8ba 	bl	8008126 <UART_Transmit_IT>
    return;
 8007fb2:	e014      	b.n	8007fde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00e      	beq.n	8007fde <HAL_UART_IRQHandler+0x51e>
 8007fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d008      	beq.n	8007fde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f8fa 	bl	80081c6 <UART_EndTransmit_IT>
    return;
 8007fd2:	e004      	b.n	8007fde <HAL_UART_IRQHandler+0x51e>
    return;
 8007fd4:	bf00      	nop
 8007fd6:	e002      	b.n	8007fde <HAL_UART_IRQHandler+0x51e>
      return;
 8007fd8:	bf00      	nop
 8007fda:	e000      	b.n	8007fde <HAL_UART_IRQHandler+0x51e>
      return;
 8007fdc:	bf00      	nop
  }
}
 8007fde:	37e8      	adds	r7, #232	@ 0xe8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b095      	sub	sp, #84	@ 0x54
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	330c      	adds	r3, #12
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	330c      	adds	r3, #12
 800805e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008060:	643a      	str	r2, [r7, #64]	@ 0x40
 8008062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3314      	adds	r3, #20
 800807a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	61fb      	str	r3, [r7, #28]
   return(result);
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f023 0301 	bic.w	r3, r3, #1
 800808a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3314      	adds	r3, #20
 8008092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008094:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008096:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800809a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e5      	bne.n	8008074 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d119      	bne.n	80080e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	330c      	adds	r3, #12
 80080b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f023 0310 	bic.w	r3, r3, #16
 80080c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	330c      	adds	r3, #12
 80080ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80080d0:	61ba      	str	r2, [r7, #24]
 80080d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6979      	ldr	r1, [r7, #20]
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	613b      	str	r3, [r7, #16]
   return(result);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e5      	bne.n	80080b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80080f2:	bf00      	nop
 80080f4:	3754      	adds	r7, #84	@ 0x54
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff ff77 	bl	800800c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800811e:	bf00      	nop
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b21      	cmp	r3, #33	@ 0x21
 8008138:	d13e      	bne.n	80081b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008142:	d114      	bne.n	800816e <UART_Transmit_IT+0x48>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d110      	bne.n	800816e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008160:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	1c9a      	adds	r2, r3, #2
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	621a      	str	r2, [r3, #32]
 800816c:	e008      	b.n	8008180 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	1c59      	adds	r1, r3, #1
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	6211      	str	r1, [r2, #32]
 8008178:	781a      	ldrb	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008184:	b29b      	uxth	r3, r3
 8008186:	3b01      	subs	r3, #1
 8008188:	b29b      	uxth	r3, r3
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	4619      	mov	r1, r3
 800818e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10f      	bne.n	80081b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e000      	b.n	80081ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68da      	ldr	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff fefc 	bl	8007fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b08c      	sub	sp, #48	@ 0x30
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b22      	cmp	r3, #34	@ 0x22
 8008208:	f040 80ae 	bne.w	8008368 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008214:	d117      	bne.n	8008246 <UART_Receive_IT+0x50>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d113      	bne.n	8008246 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008226:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b29b      	uxth	r3, r3
 8008230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008234:	b29a      	uxth	r2, r3
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823e:	1c9a      	adds	r2, r3, #2
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	629a      	str	r2, [r3, #40]	@ 0x28
 8008244:	e026      	b.n	8008294 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800824c:	2300      	movs	r3, #0
 800824e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008258:	d007      	beq.n	800826a <UART_Receive_IT+0x74>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10a      	bne.n	8008278 <UART_Receive_IT+0x82>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	b2da      	uxtb	r2, r3
 8008272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008274:	701a      	strb	r2, [r3, #0]
 8008276:	e008      	b.n	800828a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008284:	b2da      	uxtb	r2, r3
 8008286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008288:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b01      	subs	r3, #1
 800829c:	b29b      	uxth	r3, r3
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	4619      	mov	r1, r3
 80082a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d15d      	bne.n	8008364 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0220 	bic.w	r2, r2, #32
 80082b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68da      	ldr	r2, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f022 0201 	bic.w	r2, r2, #1
 80082d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d135      	bne.n	800835a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	330c      	adds	r3, #12
 80082fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	e853 3f00 	ldrex	r3, [r3]
 8008302:	613b      	str	r3, [r7, #16]
   return(result);
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f023 0310 	bic.w	r3, r3, #16
 800830a:	627b      	str	r3, [r7, #36]	@ 0x24
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	330c      	adds	r3, #12
 8008312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008314:	623a      	str	r2, [r7, #32]
 8008316:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008318:	69f9      	ldr	r1, [r7, #28]
 800831a:	6a3a      	ldr	r2, [r7, #32]
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	61bb      	str	r3, [r7, #24]
   return(result);
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e5      	bne.n	80082f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0310 	and.w	r3, r3, #16
 8008332:	2b10      	cmp	r3, #16
 8008334:	d10a      	bne.n	800834c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff fe64 	bl	8008020 <HAL_UARTEx_RxEventCallback>
 8008358:	e002      	b.n	8008360 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff fe4c 	bl	8007ff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	e002      	b.n	800836a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	e000      	b.n	800836a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
  }
}
 800836a:	4618      	mov	r0, r3
 800836c:	3730      	adds	r7, #48	@ 0x30
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008378:	b0c0      	sub	sp, #256	@ 0x100
 800837a:	af00      	add	r7, sp, #0
 800837c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008390:	68d9      	ldr	r1, [r3, #12]
 8008392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	ea40 0301 	orr.w	r3, r0, r1
 800839c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800839e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a2:	689a      	ldr	r2, [r3, #8]
 80083a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80083cc:	f021 010c 	bic.w	r1, r1, #12
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80083da:	430b      	orrs	r3, r1
 80083dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80083ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ee:	6999      	ldr	r1, [r3, #24]
 80083f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	ea40 0301 	orr.w	r3, r0, r1
 80083fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	4b8f      	ldr	r3, [pc, #572]	@ (8008640 <UART_SetConfig+0x2cc>)
 8008404:	429a      	cmp	r2, r3
 8008406:	d005      	beq.n	8008414 <UART_SetConfig+0xa0>
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	4b8d      	ldr	r3, [pc, #564]	@ (8008644 <UART_SetConfig+0x2d0>)
 8008410:	429a      	cmp	r2, r3
 8008412:	d104      	bne.n	800841e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008414:	f7fd f9e8 	bl	80057e8 <HAL_RCC_GetPCLK2Freq>
 8008418:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800841c:	e003      	b.n	8008426 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800841e:	f7fd f9cf 	bl	80057c0 <HAL_RCC_GetPCLK1Freq>
 8008422:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008430:	f040 810c 	bne.w	800864c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008438:	2200      	movs	r2, #0
 800843a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800843e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008442:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008446:	4622      	mov	r2, r4
 8008448:	462b      	mov	r3, r5
 800844a:	1891      	adds	r1, r2, r2
 800844c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800844e:	415b      	adcs	r3, r3
 8008450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008452:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008456:	4621      	mov	r1, r4
 8008458:	eb12 0801 	adds.w	r8, r2, r1
 800845c:	4629      	mov	r1, r5
 800845e:	eb43 0901 	adc.w	r9, r3, r1
 8008462:	f04f 0200 	mov.w	r2, #0
 8008466:	f04f 0300 	mov.w	r3, #0
 800846a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800846e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008476:	4690      	mov	r8, r2
 8008478:	4699      	mov	r9, r3
 800847a:	4623      	mov	r3, r4
 800847c:	eb18 0303 	adds.w	r3, r8, r3
 8008480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008484:	462b      	mov	r3, r5
 8008486:	eb49 0303 	adc.w	r3, r9, r3
 800848a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800848e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800849a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800849e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084a2:	460b      	mov	r3, r1
 80084a4:	18db      	adds	r3, r3, r3
 80084a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80084a8:	4613      	mov	r3, r2
 80084aa:	eb42 0303 	adc.w	r3, r2, r3
 80084ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80084b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80084b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80084b8:	f7f7 fefa 	bl	80002b0 <__aeabi_uldivmod>
 80084bc:	4602      	mov	r2, r0
 80084be:	460b      	mov	r3, r1
 80084c0:	4b61      	ldr	r3, [pc, #388]	@ (8008648 <UART_SetConfig+0x2d4>)
 80084c2:	fba3 2302 	umull	r2, r3, r3, r2
 80084c6:	095b      	lsrs	r3, r3, #5
 80084c8:	011c      	lsls	r4, r3, #4
 80084ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80084d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80084dc:	4642      	mov	r2, r8
 80084de:	464b      	mov	r3, r9
 80084e0:	1891      	adds	r1, r2, r2
 80084e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80084e4:	415b      	adcs	r3, r3
 80084e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084ec:	4641      	mov	r1, r8
 80084ee:	eb12 0a01 	adds.w	sl, r2, r1
 80084f2:	4649      	mov	r1, r9
 80084f4:	eb43 0b01 	adc.w	fp, r3, r1
 80084f8:	f04f 0200 	mov.w	r2, #0
 80084fc:	f04f 0300 	mov.w	r3, #0
 8008500:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008504:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800850c:	4692      	mov	sl, r2
 800850e:	469b      	mov	fp, r3
 8008510:	4643      	mov	r3, r8
 8008512:	eb1a 0303 	adds.w	r3, sl, r3
 8008516:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800851a:	464b      	mov	r3, r9
 800851c:	eb4b 0303 	adc.w	r3, fp, r3
 8008520:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008530:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008534:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008538:	460b      	mov	r3, r1
 800853a:	18db      	adds	r3, r3, r3
 800853c:	643b      	str	r3, [r7, #64]	@ 0x40
 800853e:	4613      	mov	r3, r2
 8008540:	eb42 0303 	adc.w	r3, r2, r3
 8008544:	647b      	str	r3, [r7, #68]	@ 0x44
 8008546:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800854a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800854e:	f7f7 feaf 	bl	80002b0 <__aeabi_uldivmod>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	4611      	mov	r1, r2
 8008558:	4b3b      	ldr	r3, [pc, #236]	@ (8008648 <UART_SetConfig+0x2d4>)
 800855a:	fba3 2301 	umull	r2, r3, r3, r1
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	2264      	movs	r2, #100	@ 0x64
 8008562:	fb02 f303 	mul.w	r3, r2, r3
 8008566:	1acb      	subs	r3, r1, r3
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800856e:	4b36      	ldr	r3, [pc, #216]	@ (8008648 <UART_SetConfig+0x2d4>)
 8008570:	fba3 2302 	umull	r2, r3, r3, r2
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800857c:	441c      	add	r4, r3
 800857e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008582:	2200      	movs	r2, #0
 8008584:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008588:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800858c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008590:	4642      	mov	r2, r8
 8008592:	464b      	mov	r3, r9
 8008594:	1891      	adds	r1, r2, r2
 8008596:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008598:	415b      	adcs	r3, r3
 800859a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800859c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80085a0:	4641      	mov	r1, r8
 80085a2:	1851      	adds	r1, r2, r1
 80085a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80085a6:	4649      	mov	r1, r9
 80085a8:	414b      	adcs	r3, r1
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80085b8:	4659      	mov	r1, fp
 80085ba:	00cb      	lsls	r3, r1, #3
 80085bc:	4651      	mov	r1, sl
 80085be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085c2:	4651      	mov	r1, sl
 80085c4:	00ca      	lsls	r2, r1, #3
 80085c6:	4610      	mov	r0, r2
 80085c8:	4619      	mov	r1, r3
 80085ca:	4603      	mov	r3, r0
 80085cc:	4642      	mov	r2, r8
 80085ce:	189b      	adds	r3, r3, r2
 80085d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085d4:	464b      	mov	r3, r9
 80085d6:	460a      	mov	r2, r1
 80085d8:	eb42 0303 	adc.w	r3, r2, r3
 80085dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80085ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80085f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80085f4:	460b      	mov	r3, r1
 80085f6:	18db      	adds	r3, r3, r3
 80085f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085fa:	4613      	mov	r3, r2
 80085fc:	eb42 0303 	adc.w	r3, r2, r3
 8008600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008606:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800860a:	f7f7 fe51 	bl	80002b0 <__aeabi_uldivmod>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4b0d      	ldr	r3, [pc, #52]	@ (8008648 <UART_SetConfig+0x2d4>)
 8008614:	fba3 1302 	umull	r1, r3, r3, r2
 8008618:	095b      	lsrs	r3, r3, #5
 800861a:	2164      	movs	r1, #100	@ 0x64
 800861c:	fb01 f303 	mul.w	r3, r1, r3
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	3332      	adds	r3, #50	@ 0x32
 8008626:	4a08      	ldr	r2, [pc, #32]	@ (8008648 <UART_SetConfig+0x2d4>)
 8008628:	fba2 2303 	umull	r2, r3, r2, r3
 800862c:	095b      	lsrs	r3, r3, #5
 800862e:	f003 0207 	and.w	r2, r3, #7
 8008632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4422      	add	r2, r4
 800863a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800863c:	e106      	b.n	800884c <UART_SetConfig+0x4d8>
 800863e:	bf00      	nop
 8008640:	40011000 	.word	0x40011000
 8008644:	40011400 	.word	0x40011400
 8008648:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800864c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008650:	2200      	movs	r2, #0
 8008652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008656:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800865a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800865e:	4642      	mov	r2, r8
 8008660:	464b      	mov	r3, r9
 8008662:	1891      	adds	r1, r2, r2
 8008664:	6239      	str	r1, [r7, #32]
 8008666:	415b      	adcs	r3, r3
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24
 800866a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800866e:	4641      	mov	r1, r8
 8008670:	1854      	adds	r4, r2, r1
 8008672:	4649      	mov	r1, r9
 8008674:	eb43 0501 	adc.w	r5, r3, r1
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	f04f 0300 	mov.w	r3, #0
 8008680:	00eb      	lsls	r3, r5, #3
 8008682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008686:	00e2      	lsls	r2, r4, #3
 8008688:	4614      	mov	r4, r2
 800868a:	461d      	mov	r5, r3
 800868c:	4643      	mov	r3, r8
 800868e:	18e3      	adds	r3, r4, r3
 8008690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008694:	464b      	mov	r3, r9
 8008696:	eb45 0303 	adc.w	r3, r5, r3
 800869a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80086aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80086ba:	4629      	mov	r1, r5
 80086bc:	008b      	lsls	r3, r1, #2
 80086be:	4621      	mov	r1, r4
 80086c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086c4:	4621      	mov	r1, r4
 80086c6:	008a      	lsls	r2, r1, #2
 80086c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80086cc:	f7f7 fdf0 	bl	80002b0 <__aeabi_uldivmod>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4b60      	ldr	r3, [pc, #384]	@ (8008858 <UART_SetConfig+0x4e4>)
 80086d6:	fba3 2302 	umull	r2, r3, r3, r2
 80086da:	095b      	lsrs	r3, r3, #5
 80086dc:	011c      	lsls	r4, r3, #4
 80086de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80086e2:	2200      	movs	r2, #0
 80086e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80086e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80086ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	1891      	adds	r1, r2, r2
 80086f6:	61b9      	str	r1, [r7, #24]
 80086f8:	415b      	adcs	r3, r3
 80086fa:	61fb      	str	r3, [r7, #28]
 80086fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008700:	4641      	mov	r1, r8
 8008702:	1851      	adds	r1, r2, r1
 8008704:	6139      	str	r1, [r7, #16]
 8008706:	4649      	mov	r1, r9
 8008708:	414b      	adcs	r3, r1
 800870a:	617b      	str	r3, [r7, #20]
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008718:	4659      	mov	r1, fp
 800871a:	00cb      	lsls	r3, r1, #3
 800871c:	4651      	mov	r1, sl
 800871e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008722:	4651      	mov	r1, sl
 8008724:	00ca      	lsls	r2, r1, #3
 8008726:	4610      	mov	r0, r2
 8008728:	4619      	mov	r1, r3
 800872a:	4603      	mov	r3, r0
 800872c:	4642      	mov	r2, r8
 800872e:	189b      	adds	r3, r3, r2
 8008730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008734:	464b      	mov	r3, r9
 8008736:	460a      	mov	r2, r1
 8008738:	eb42 0303 	adc.w	r3, r2, r3
 800873c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	67bb      	str	r3, [r7, #120]	@ 0x78
 800874a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800874c:	f04f 0200 	mov.w	r2, #0
 8008750:	f04f 0300 	mov.w	r3, #0
 8008754:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008758:	4649      	mov	r1, r9
 800875a:	008b      	lsls	r3, r1, #2
 800875c:	4641      	mov	r1, r8
 800875e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008762:	4641      	mov	r1, r8
 8008764:	008a      	lsls	r2, r1, #2
 8008766:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800876a:	f7f7 fda1 	bl	80002b0 <__aeabi_uldivmod>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4611      	mov	r1, r2
 8008774:	4b38      	ldr	r3, [pc, #224]	@ (8008858 <UART_SetConfig+0x4e4>)
 8008776:	fba3 2301 	umull	r2, r3, r3, r1
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	2264      	movs	r2, #100	@ 0x64
 800877e:	fb02 f303 	mul.w	r3, r2, r3
 8008782:	1acb      	subs	r3, r1, r3
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	3332      	adds	r3, #50	@ 0x32
 8008788:	4a33      	ldr	r2, [pc, #204]	@ (8008858 <UART_SetConfig+0x4e4>)
 800878a:	fba2 2303 	umull	r2, r3, r2, r3
 800878e:	095b      	lsrs	r3, r3, #5
 8008790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008794:	441c      	add	r4, r3
 8008796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800879a:	2200      	movs	r2, #0
 800879c:	673b      	str	r3, [r7, #112]	@ 0x70
 800879e:	677a      	str	r2, [r7, #116]	@ 0x74
 80087a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80087a4:	4642      	mov	r2, r8
 80087a6:	464b      	mov	r3, r9
 80087a8:	1891      	adds	r1, r2, r2
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	415b      	adcs	r3, r3
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087b4:	4641      	mov	r1, r8
 80087b6:	1851      	adds	r1, r2, r1
 80087b8:	6039      	str	r1, [r7, #0]
 80087ba:	4649      	mov	r1, r9
 80087bc:	414b      	adcs	r3, r1
 80087be:	607b      	str	r3, [r7, #4]
 80087c0:	f04f 0200 	mov.w	r2, #0
 80087c4:	f04f 0300 	mov.w	r3, #0
 80087c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087cc:	4659      	mov	r1, fp
 80087ce:	00cb      	lsls	r3, r1, #3
 80087d0:	4651      	mov	r1, sl
 80087d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087d6:	4651      	mov	r1, sl
 80087d8:	00ca      	lsls	r2, r1, #3
 80087da:	4610      	mov	r0, r2
 80087dc:	4619      	mov	r1, r3
 80087de:	4603      	mov	r3, r0
 80087e0:	4642      	mov	r2, r8
 80087e2:	189b      	adds	r3, r3, r2
 80087e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087e6:	464b      	mov	r3, r9
 80087e8:	460a      	mov	r2, r1
 80087ea:	eb42 0303 	adc.w	r3, r2, r3
 80087ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80087f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80087fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008808:	4649      	mov	r1, r9
 800880a:	008b      	lsls	r3, r1, #2
 800880c:	4641      	mov	r1, r8
 800880e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008812:	4641      	mov	r1, r8
 8008814:	008a      	lsls	r2, r1, #2
 8008816:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800881a:	f7f7 fd49 	bl	80002b0 <__aeabi_uldivmod>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4b0d      	ldr	r3, [pc, #52]	@ (8008858 <UART_SetConfig+0x4e4>)
 8008824:	fba3 1302 	umull	r1, r3, r3, r2
 8008828:	095b      	lsrs	r3, r3, #5
 800882a:	2164      	movs	r1, #100	@ 0x64
 800882c:	fb01 f303 	mul.w	r3, r1, r3
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	3332      	adds	r3, #50	@ 0x32
 8008836:	4a08      	ldr	r2, [pc, #32]	@ (8008858 <UART_SetConfig+0x4e4>)
 8008838:	fba2 2303 	umull	r2, r3, r2, r3
 800883c:	095b      	lsrs	r3, r3, #5
 800883e:	f003 020f 	and.w	r2, r3, #15
 8008842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4422      	add	r2, r4
 800884a:	609a      	str	r2, [r3, #8]
}
 800884c:	bf00      	nop
 800884e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008852:	46bd      	mov	sp, r7
 8008854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008858:	51eb851f 	.word	0x51eb851f

0800885c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800885c:	b084      	sub	sp, #16
 800885e:	b480      	push	{r7}
 8008860:	b085      	sub	sp, #20
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	f107 001c 	add.w	r0, r7, #28
 800886a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008872:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008874:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008876:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800887a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800887e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008882:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008886:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008896:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	b004      	add	sp, #16
 80088b0:	4770      	bx	lr

080088b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b083      	sub	sp, #12
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2203      	movs	r2, #3
 80088fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0303 	and.w	r3, r3, #3
}
 800891a:	4618      	mov	r0, r3
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008944:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800894a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008950:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008960:	f023 030f 	bic.w	r3, r3, #15
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	431a      	orrs	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	b2db      	uxtb	r3, r3
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3314      	adds	r3, #20
 80089a2:	461a      	mov	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	4413      	add	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
}  
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80089e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80089ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	431a      	orrs	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0

}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b088      	sub	sp, #32
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008a20:	2310      	movs	r3, #16
 8008a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a24:	2340      	movs	r3, #64	@ 0x40
 8008a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a32:	f107 0308 	add.w	r3, r7, #8
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff ff74 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a42:	2110      	movs	r1, #16
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fa19 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008a64:	2311      	movs	r3, #17
 8008a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a68:	2340      	movs	r3, #64	@ 0x40
 8008a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a76:	f107 0308 	add.w	r3, r7, #8
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f7ff ff52 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a86:	2111      	movs	r1, #17
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f9f7 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a90:	69fb      	ldr	r3, [r7, #28]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b088      	sub	sp, #32
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008aa8:	2312      	movs	r3, #18
 8008aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008aac:	2340      	movs	r3, #64	@ 0x40
 8008aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4619      	mov	r1, r3
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff ff30 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aca:	2112      	movs	r1, #18
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f9d5 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008ad2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ad4:	69fb      	ldr	r3, [r7, #28]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3720      	adds	r7, #32
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b088      	sub	sp, #32
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008aec:	2318      	movs	r3, #24
 8008aee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008af0:	2340      	movs	r3, #64	@ 0x40
 8008af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008af4:	2300      	movs	r3, #0
 8008af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008af8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008afc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008afe:	f107 0308 	add.w	r3, r7, #8
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ff0e 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b0e:	2118      	movs	r1, #24
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f9b3 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b18:	69fb      	ldr	r3, [r7, #28]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b088      	sub	sp, #32
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008b30:	2319      	movs	r3, #25
 8008b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b34:	2340      	movs	r3, #64	@ 0x40
 8008b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b42:	f107 0308 	add.w	r3, r7, #8
 8008b46:	4619      	mov	r1, r3
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff feec 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b52:	2119      	movs	r1, #25
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f991 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b5c:	69fb      	ldr	r3, [r7, #28]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3720      	adds	r7, #32
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008b74:	230c      	movs	r3, #12
 8008b76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b78:	2340      	movs	r3, #64	@ 0x40
 8008b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b86:	f107 0308 	add.w	r3, r7, #8
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7ff feca 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008b92:	4a05      	ldr	r2, [pc, #20]	@ (8008ba8 <SDMMC_CmdStopTransfer+0x40>)
 8008b94:	210c      	movs	r1, #12
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f970 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008b9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3720      	adds	r7, #32
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	05f5e100 	.word	0x05f5e100

08008bac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	@ 0x28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008bbc:	2307      	movs	r3, #7
 8008bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bc0:	2340      	movs	r3, #64	@ 0x40
 8008bc2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bcc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bce:	f107 0310 	add.w	r3, r7, #16
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff fea6 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bde:	2107      	movs	r1, #7
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f94b 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008be6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3728      	adds	r7, #40	@ 0x28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b088      	sub	sp, #32
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008c02:	2300      	movs	r3, #0
 8008c04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c06:	2300      	movs	r3, #0
 8008c08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c10:	f107 0308 	add.w	r3, r7, #8
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff fe85 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fb65 	bl	80092ec <SDMMC_GetCmdError>
 8008c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c24:	69fb      	ldr	r3, [r7, #28]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3720      	adds	r7, #32
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b088      	sub	sp, #32
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008c36:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008c3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c40:	2340      	movs	r3, #64	@ 0x40
 8008c42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c44:	2300      	movs	r3, #0
 8008c46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c4e:	f107 0308 	add.w	r3, r7, #8
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff fe66 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 faf8 	bl	8009250 <SDMMC_GetCmdResp7>
 8008c60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c62:	69fb      	ldr	r3, [r7, #28]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3720      	adds	r7, #32
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008c7a:	2337      	movs	r3, #55	@ 0x37
 8008c7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c7e:	2340      	movs	r3, #64	@ 0x40
 8008c80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c8c:	f107 0308 	add.w	r3, r7, #8
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fe47 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008c98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c9c:	2137      	movs	r1, #55	@ 0x37
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f8ec 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008ca4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3720      	adds	r7, #32
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008cc6:	2329      	movs	r3, #41	@ 0x29
 8008cc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cca:	2340      	movs	r3, #64	@ 0x40
 8008ccc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cd8:	f107 0308 	add.w	r3, r7, #8
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff fe21 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9ff 	bl	80090e8 <SDMMC_GetCmdResp3>
 8008cea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cec:	69fb      	ldr	r3, [r7, #28]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3720      	adds	r7, #32
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b088      	sub	sp, #32
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008d04:	2306      	movs	r3, #6
 8008d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d08:	2340      	movs	r3, #64	@ 0x40
 8008d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d16:	f107 0308 	add.w	r3, r7, #8
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff fe02 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d26:	2106      	movs	r1, #6
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f8a7 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008d2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d30:	69fb      	ldr	r3, [r7, #28]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3720      	adds	r7, #32
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b088      	sub	sp, #32
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008d46:	2333      	movs	r3, #51	@ 0x33
 8008d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d4a:	2340      	movs	r3, #64	@ 0x40
 8008d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d58:	f107 0308 	add.w	r3, r7, #8
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7ff fde1 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d68:	2133      	movs	r1, #51	@ 0x33
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f886 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d72:	69fb      	ldr	r3, [r7, #28]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008d8c:	23c0      	movs	r3, #192	@ 0xc0
 8008d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d90:	2300      	movs	r3, #0
 8008d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d9a:	f107 0308 	add.w	r3, r7, #8
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fdc0 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f956 	bl	8009058 <SDMMC_GetCmdResp2>
 8008dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dae:	69fb      	ldr	r3, [r7, #28]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3720      	adds	r7, #32
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b088      	sub	sp, #32
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008dc6:	2309      	movs	r3, #9
 8008dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008dca:	23c0      	movs	r3, #192	@ 0xc0
 8008dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008dd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dd8:	f107 0308 	add.w	r3, r7, #8
 8008ddc:	4619      	mov	r1, r3
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff fda1 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f937 	bl	8009058 <SDMMC_GetCmdResp2>
 8008dea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dec:	69fb      	ldr	r3, [r7, #28]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b088      	sub	sp, #32
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
 8008dfe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008e04:	2303      	movs	r3, #3
 8008e06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e08:	2340      	movs	r3, #64	@ 0x40
 8008e0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fd82 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	2103      	movs	r1, #3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f99c 	bl	8009164 <SDMMC_GetCmdResp6>
 8008e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3720      	adds	r7, #32
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008e46:	230d      	movs	r3, #13
 8008e48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e4a:	2340      	movs	r3, #64	@ 0x40
 8008e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e58:	f107 0308 	add.w	r3, r7, #8
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff fd61 	bl	8008926 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e68:	210d      	movs	r1, #13
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f806 	bl	8008e7c <SDMMC_GetCmdResp1>
 8008e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e72:	69fb      	ldr	r3, [r7, #28]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3720      	adds	r7, #32
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	460b      	mov	r3, r1
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008e8a:	4b70      	ldr	r3, [pc, #448]	@ (800904c <SDMMC_GetCmdResp1+0x1d0>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a70      	ldr	r2, [pc, #448]	@ (8009050 <SDMMC_GetCmdResp1+0x1d4>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	0a5a      	lsrs	r2, r3, #9
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	fb02 f303 	mul.w	r3, r2, r3
 8008e9c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	1e5a      	subs	r2, r3, #1
 8008ea2:	61fa      	str	r2, [r7, #28]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d102      	bne.n	8008eae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ea8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008eac:	e0c9      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0ef      	beq.n	8008e9e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1ea      	bne.n	8008e9e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2204      	movs	r2, #4
 8008ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008eda:	2304      	movs	r3, #4
 8008edc:	e0b1      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee2:	f003 0301 	and.w	r3, r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d004      	beq.n	8008ef4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e0a6      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	22c5      	movs	r2, #197	@ 0xc5
 8008ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f7ff fd3d 	bl	800897a <SDIO_GetCommandResponse>
 8008f00:	4603      	mov	r3, r0
 8008f02:	461a      	mov	r2, r3
 8008f04:	7afb      	ldrb	r3, [r7, #11]
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d001      	beq.n	8008f0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e099      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008f0e:	2100      	movs	r1, #0
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f7ff fd3f 	bl	8008994 <SDIO_GetResponse>
 8008f16:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8009054 <SDMMC_GetCmdResp1+0x1d8>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e08d      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	da02      	bge.n	8008f32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008f2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f30:	e087      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008f3c:	2340      	movs	r3, #64	@ 0x40
 8008f3e:	e080      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008f4a:	2380      	movs	r3, #128	@ 0x80
 8008f4c:	e079      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f5c:	e071      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008f68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f6c:	e069      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008f78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f7c:	e061      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008f88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f8c:	e059      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008f98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f9c:	e051      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008fa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008fac:	e049      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008fb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008fbc:	e041      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008fc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fcc:	e039      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008fd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008fdc:	e031      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008fe8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008fec:	e029      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008ff8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ffc:	e021      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009008:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800900c:	e019      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009018:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800901c:	e011      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009028:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800902c:	e009      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f003 0308 	and.w	r3, r3, #8
 8009034:	2b00      	cmp	r3, #0
 8009036:	d002      	beq.n	800903e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009038:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800903c:	e001      	b.n	8009042 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800903e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009042:	4618      	mov	r0, r3
 8009044:	3720      	adds	r7, #32
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	2000000c 	.word	0x2000000c
 8009050:	10624dd3 	.word	0x10624dd3
 8009054:	fdffe008 	.word	0xfdffe008

08009058 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009060:	4b1f      	ldr	r3, [pc, #124]	@ (80090e0 <SDMMC_GetCmdResp2+0x88>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a1f      	ldr	r2, [pc, #124]	@ (80090e4 <SDMMC_GetCmdResp2+0x8c>)
 8009066:	fba2 2303 	umull	r2, r3, r2, r3
 800906a:	0a5b      	lsrs	r3, r3, #9
 800906c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009070:	fb02 f303 	mul.w	r3, r2, r3
 8009074:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1e5a      	subs	r2, r3, #1
 800907a:	60fa      	str	r2, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009080:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009084:	e026      	b.n	80090d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800908a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0ef      	beq.n	8009076 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800909c:	2b00      	cmp	r3, #0
 800909e:	d1ea      	bne.n	8009076 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2204      	movs	r2, #4
 80090b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090b2:	2304      	movs	r3, #4
 80090b4:	e00e      	b.n	80090d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e003      	b.n	80090d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	22c5      	movs	r2, #197	@ 0xc5
 80090d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	2000000c 	.word	0x2000000c
 80090e4:	10624dd3 	.word	0x10624dd3

080090e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090f0:	4b1a      	ldr	r3, [pc, #104]	@ (800915c <SDMMC_GetCmdResp3+0x74>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009160 <SDMMC_GetCmdResp3+0x78>)
 80090f6:	fba2 2303 	umull	r2, r3, r2, r3
 80090fa:	0a5b      	lsrs	r3, r3, #9
 80090fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009100:	fb02 f303 	mul.w	r3, r2, r3
 8009104:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	1e5a      	subs	r2, r3, #1
 800910a:	60fa      	str	r2, [r7, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d102      	bne.n	8009116 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009110:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009114:	e01b      	b.n	800914e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800911a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0ef      	beq.n	8009106 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1ea      	bne.n	8009106 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b00      	cmp	r3, #0
 800913a:	d004      	beq.n	8009146 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2204      	movs	r2, #4
 8009140:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009142:	2304      	movs	r3, #4
 8009144:	e003      	b.n	800914e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	22c5      	movs	r2, #197	@ 0xc5
 800914a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	2000000c 	.word	0x2000000c
 8009160:	10624dd3 	.word	0x10624dd3

08009164 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	460b      	mov	r3, r1
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009172:	4b35      	ldr	r3, [pc, #212]	@ (8009248 <SDMMC_GetCmdResp6+0xe4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a35      	ldr	r2, [pc, #212]	@ (800924c <SDMMC_GetCmdResp6+0xe8>)
 8009178:	fba2 2303 	umull	r2, r3, r2, r3
 800917c:	0a5b      	lsrs	r3, r3, #9
 800917e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009182:	fb02 f303 	mul.w	r3, r2, r3
 8009186:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	1e5a      	subs	r2, r3, #1
 800918c:	61fa      	str	r2, [r7, #28]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d102      	bne.n	8009198 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009192:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009196:	e052      	b.n	800923e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800919c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0ef      	beq.n	8009188 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1ea      	bne.n	8009188 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d004      	beq.n	80091c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2204      	movs	r2, #4
 80091c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091c4:	2304      	movs	r3, #4
 80091c6:	e03a      	b.n	800923e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091da:	2301      	movs	r3, #1
 80091dc:	e02f      	b.n	800923e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80091de:	68f8      	ldr	r0, [r7, #12]
 80091e0:	f7ff fbcb 	bl	800897a <SDIO_GetCommandResponse>
 80091e4:	4603      	mov	r3, r0
 80091e6:	461a      	mov	r2, r3
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d001      	beq.n	80091f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e025      	b.n	800923e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	22c5      	movs	r2, #197	@ 0xc5
 80091f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80091f8:	2100      	movs	r1, #0
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff fbca 	bl	8008994 <SDIO_GetResponse>
 8009200:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d106      	bne.n	800921a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	0c1b      	lsrs	r3, r3, #16
 8009210:	b29a      	uxth	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009216:	2300      	movs	r3, #0
 8009218:	e011      	b.n	800923e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009224:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009228:	e009      	b.n	800923e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009238:	e001      	b.n	800923e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800923a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	2000000c 	.word	0x2000000c
 800924c:	10624dd3 	.word	0x10624dd3

08009250 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009258:	4b22      	ldr	r3, [pc, #136]	@ (80092e4 <SDMMC_GetCmdResp7+0x94>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a22      	ldr	r2, [pc, #136]	@ (80092e8 <SDMMC_GetCmdResp7+0x98>)
 800925e:	fba2 2303 	umull	r2, r3, r2, r3
 8009262:	0a5b      	lsrs	r3, r3, #9
 8009264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009268:	fb02 f303 	mul.w	r3, r2, r3
 800926c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1e5a      	subs	r2, r3, #1
 8009272:	60fa      	str	r2, [r7, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009278:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800927c:	e02c      	b.n	80092d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009282:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800928a:	2b00      	cmp	r3, #0
 800928c:	d0ef      	beq.n	800926e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1ea      	bne.n	800926e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d004      	beq.n	80092ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2204      	movs	r2, #4
 80092a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092aa:	2304      	movs	r3, #4
 80092ac:	e014      	b.n	80092d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e009      	b.n	80092d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d002      	beq.n	80092d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2240      	movs	r2, #64	@ 0x40
 80092d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80092d6:	2300      	movs	r3, #0
  
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr
 80092e4:	2000000c 	.word	0x2000000c
 80092e8:	10624dd3 	.word	0x10624dd3

080092ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092f4:	4b11      	ldr	r3, [pc, #68]	@ (800933c <SDMMC_GetCmdError+0x50>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a11      	ldr	r2, [pc, #68]	@ (8009340 <SDMMC_GetCmdError+0x54>)
 80092fa:	fba2 2303 	umull	r2, r3, r2, r3
 80092fe:	0a5b      	lsrs	r3, r3, #9
 8009300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009304:	fb02 f303 	mul.w	r3, r2, r3
 8009308:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	1e5a      	subs	r2, r3, #1
 800930e:	60fa      	str	r2, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009314:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009318:	e009      	b.n	800932e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0f1      	beq.n	800930a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	22c5      	movs	r2, #197	@ 0xc5
 800932a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	2000000c 	.word	0x2000000c
 8009340:	10624dd3 	.word	0x10624dd3

08009344 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009348:	4904      	ldr	r1, [pc, #16]	@ (800935c <MX_FATFS_Init+0x18>)
 800934a:	4805      	ldr	r0, [pc, #20]	@ (8009360 <MX_FATFS_Init+0x1c>)
 800934c:	f003 fc36 	bl	800cbbc <FATFS_LinkDriver>
 8009350:	4603      	mov	r3, r0
 8009352:	461a      	mov	r2, r3
 8009354:	4b03      	ldr	r3, [pc, #12]	@ (8009364 <MX_FATFS_Init+0x20>)
 8009356:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009358:	bf00      	nop
 800935a:	bd80      	pop	{r7, pc}
 800935c:	2000437c 	.word	0x2000437c
 8009360:	0800ec38 	.word	0x0800ec38
 8009364:	20004378 	.word	0x20004378

08009368 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800936c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800936e:	4618      	mov	r0, r3
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800937e:	2300      	movs	r3, #0
 8009380:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009382:	f000 f89e 	bl	80094c2 <BSP_SD_IsDetected>
 8009386:	4603      	mov	r3, r0
 8009388:	2b01      	cmp	r3, #1
 800938a:	d001      	beq.n	8009390 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e005      	b.n	800939c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009390:	4804      	ldr	r0, [pc, #16]	@ (80093a4 <BSP_SD_Init+0x2c>)
 8009392:	f7fc fa3d 	bl	8005810 <HAL_SD_Init>
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800939a:	79fb      	ldrb	r3, [r7, #7]
}
 800939c:	4618      	mov	r0, r3
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000224 	.word	0x20000224

080093a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80093b6:	2300      	movs	r3, #0
 80093b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	68f9      	ldr	r1, [r7, #12]
 80093c4:	4806      	ldr	r0, [pc, #24]	@ (80093e0 <BSP_SD_ReadBlocks+0x38>)
 80093c6:	f7fc fad3 	bl	8005970 <HAL_SD_ReadBlocks>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000224 	.word	0x20000224

080093e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	4806      	ldr	r0, [pc, #24]	@ (800941c <BSP_SD_WriteBlocks+0x38>)
 8009402:	f7fc fc9b 	bl	8005d3c <HAL_SD_WriteBlocks>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009410:	7dfb      	ldrb	r3, [r7, #23]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000224 	.word	0x20000224

08009420 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009424:	4805      	ldr	r0, [pc, #20]	@ (800943c <BSP_SD_GetCardState+0x1c>)
 8009426:	f7fd fa11 	bl	800684c <HAL_SD_GetCardState>
 800942a:	4603      	mov	r3, r0
 800942c:	2b04      	cmp	r3, #4
 800942e:	bf14      	ite	ne
 8009430:	2301      	movne	r3, #1
 8009432:	2300      	moveq	r3, #0
 8009434:	b2db      	uxtb	r3, r3
}
 8009436:	4618      	mov	r0, r3
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000224 	.word	0x20000224

08009440 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009448:	6879      	ldr	r1, [r7, #4]
 800944a:	4803      	ldr	r0, [pc, #12]	@ (8009458 <BSP_SD_GetCardInfo+0x18>)
 800944c:	f7fd f938 	bl	80066c0 <HAL_SD_GetCardInfo>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	20000224 	.word	0x20000224

0800945c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009464:	f000 f818 	bl	8009498 <BSP_SD_AbortCallback>
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009478:	f000 f815 	bl	80094a6 <BSP_SD_WriteCpltCallback>
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800948c:	f000 f812 	bl	80094b4 <BSP_SD_ReadCpltCallback>
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0

}
 800949c:	bf00      	nop
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80094a6:	b480      	push	{r7}
 80094a8:	af00      	add	r7, sp, #0

}
 80094aa:	bf00      	nop
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0

}
 80094b8:	bf00      	nop
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80094c8:	2301      	movs	r3, #1
 80094ca:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	b2db      	uxtb	r3, r3
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	4603      	mov	r3, r0
 80094e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80094e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009514 <SD_CheckStatus+0x38>)
 80094e8:	2201      	movs	r2, #1
 80094ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80094ec:	f7ff ff98 	bl	8009420 <BSP_SD_GetCardState>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d107      	bne.n	8009506 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80094f6:	4b07      	ldr	r3, [pc, #28]	@ (8009514 <SD_CheckStatus+0x38>)
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	f023 0301 	bic.w	r3, r3, #1
 8009500:	b2da      	uxtb	r2, r3
 8009502:	4b04      	ldr	r3, [pc, #16]	@ (8009514 <SD_CheckStatus+0x38>)
 8009504:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009506:	4b03      	ldr	r3, [pc, #12]	@ (8009514 <SD_CheckStatus+0x38>)
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	b2db      	uxtb	r3, r3
}
 800950c:	4618      	mov	r0, r3
 800950e:	3708      	adds	r7, #8
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	20000015 	.word	0x20000015

08009518 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009522:	4b0b      	ldr	r3, [pc, #44]	@ (8009550 <SD_initialize+0x38>)
 8009524:	2201      	movs	r2, #1
 8009526:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009528:	f7ff ff26 	bl	8009378 <BSP_SD_Init>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	4618      	mov	r0, r3
 8009536:	f7ff ffd1 	bl	80094dc <SD_CheckStatus>
 800953a:	4603      	mov	r3, r0
 800953c:	461a      	mov	r2, r3
 800953e:	4b04      	ldr	r3, [pc, #16]	@ (8009550 <SD_initialize+0x38>)
 8009540:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009542:	4b03      	ldr	r3, [pc, #12]	@ (8009550 <SD_initialize+0x38>)
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b2db      	uxtb	r3, r3
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20000015 	.word	0x20000015

08009554 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800955e:	79fb      	ldrb	r3, [r7, #7]
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff ffbb 	bl	80094dc <SD_CheckStatus>
 8009566:	4603      	mov	r3, r0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b086      	sub	sp, #24
 8009574:	af00      	add	r7, sp, #0
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
 800957a:	603b      	str	r3, [r7, #0]
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009584:	f04f 33ff 	mov.w	r3, #4294967295
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	68b8      	ldr	r0, [r7, #8]
 800958e:	f7ff ff0b 	bl	80093a8 <BSP_SD_ReadBlocks>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d107      	bne.n	80095a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009598:	bf00      	nop
 800959a:	f7ff ff41 	bl	8009420 <BSP_SD_GetCardState>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1fa      	bne.n	800959a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
 80095be:	4603      	mov	r3, r0
 80095c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80095c6:	f04f 33ff 	mov.w	r3, #4294967295
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	68b8      	ldr	r0, [r7, #8]
 80095d0:	f7ff ff08 	bl	80093e4 <BSP_SD_WriteBlocks>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d107      	bne.n	80095ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80095da:	bf00      	nop
 80095dc:	f7ff ff20 	bl	8009420 <BSP_SD_GetCardState>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1fa      	bne.n	80095dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08c      	sub	sp, #48	@ 0x30
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	603a      	str	r2, [r7, #0]
 80095fe:	71fb      	strb	r3, [r7, #7]
 8009600:	460b      	mov	r3, r1
 8009602:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800960a:	4b25      	ldr	r3, [pc, #148]	@ (80096a0 <SD_ioctl+0xac>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <SD_ioctl+0x28>
 8009618:	2303      	movs	r3, #3
 800961a:	e03c      	b.n	8009696 <SD_ioctl+0xa2>

  switch (cmd)
 800961c:	79bb      	ldrb	r3, [r7, #6]
 800961e:	2b03      	cmp	r3, #3
 8009620:	d834      	bhi.n	800968c <SD_ioctl+0x98>
 8009622:	a201      	add	r2, pc, #4	@ (adr r2, 8009628 <SD_ioctl+0x34>)
 8009624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009628:	08009639 	.word	0x08009639
 800962c:	08009641 	.word	0x08009641
 8009630:	08009659 	.word	0x08009659
 8009634:	08009673 	.word	0x08009673
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800963e:	e028      	b.n	8009692 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009640:	f107 030c 	add.w	r3, r7, #12
 8009644:	4618      	mov	r0, r3
 8009646:	f7ff fefb 	bl	8009440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800964a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009656:	e01c      	b.n	8009692 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009658:	f107 030c 	add.w	r3, r7, #12
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff feef 	bl	8009440 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009664:	b29a      	uxth	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009670:	e00f      	b.n	8009692 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009672:	f107 030c 	add.w	r3, r7, #12
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff fee2 	bl	8009440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800967c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967e:	0a5a      	lsrs	r2, r3, #9
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800968a:	e002      	b.n	8009692 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800968c:	2304      	movs	r3, #4
 800968e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009696:	4618      	mov	r0, r3
 8009698:	3730      	adds	r7, #48	@ 0x30
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20000015 	.word	0x20000015

080096a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	4603      	mov	r3, r0
 80096ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80096ae:	79fb      	ldrb	r3, [r7, #7]
 80096b0:	4a08      	ldr	r2, [pc, #32]	@ (80096d4 <disk_status+0x30>)
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	4413      	add	r3, r2
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	79fa      	ldrb	r2, [r7, #7]
 80096bc:	4905      	ldr	r1, [pc, #20]	@ (80096d4 <disk_status+0x30>)
 80096be:	440a      	add	r2, r1
 80096c0:	7a12      	ldrb	r2, [r2, #8]
 80096c2:	4610      	mov	r0, r2
 80096c4:	4798      	blx	r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	200045a8 	.word	0x200045a8

080096d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80096e6:	79fb      	ldrb	r3, [r7, #7]
 80096e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009724 <disk_initialize+0x4c>)
 80096ea:	5cd3      	ldrb	r3, [r2, r3]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d114      	bne.n	800971a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009724 <disk_initialize+0x4c>)
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	79fa      	ldrb	r2, [r7, #7]
 80096fe:	4909      	ldr	r1, [pc, #36]	@ (8009724 <disk_initialize+0x4c>)
 8009700:	440a      	add	r2, r1
 8009702:	7a12      	ldrb	r2, [r2, #8]
 8009704:	4610      	mov	r0, r2
 8009706:	4798      	blx	r3
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800970c:	7bfb      	ldrb	r3, [r7, #15]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d103      	bne.n	800971a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	4a03      	ldr	r2, [pc, #12]	@ (8009724 <disk_initialize+0x4c>)
 8009716:	2101      	movs	r1, #1
 8009718:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	200045a8 	.word	0x200045a8

08009728 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b087      	sub	sp, #28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4a0a      	ldr	r2, [pc, #40]	@ (8009764 <disk_read+0x3c>)
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4413      	add	r3, r2
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	689c      	ldr	r4, [r3, #8]
 8009744:	7bfb      	ldrb	r3, [r7, #15]
 8009746:	4a07      	ldr	r2, [pc, #28]	@ (8009764 <disk_read+0x3c>)
 8009748:	4413      	add	r3, r2
 800974a:	7a18      	ldrb	r0, [r3, #8]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	47a0      	blx	r4
 8009754:	4603      	mov	r3, r0
 8009756:	75fb      	strb	r3, [r7, #23]
  return res;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
}
 800975a:	4618      	mov	r0, r3
 800975c:	371c      	adds	r7, #28
 800975e:	46bd      	mov	sp, r7
 8009760:	bd90      	pop	{r4, r7, pc}
 8009762:	bf00      	nop
 8009764:	200045a8 	.word	0x200045a8

08009768 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009768:	b590      	push	{r4, r7, lr}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	4a0a      	ldr	r2, [pc, #40]	@ (80097a4 <disk_write+0x3c>)
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	4413      	add	r3, r2
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	68dc      	ldr	r4, [r3, #12]
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	4a07      	ldr	r2, [pc, #28]	@ (80097a4 <disk_write+0x3c>)
 8009788:	4413      	add	r3, r2
 800978a:	7a18      	ldrb	r0, [r3, #8]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	47a0      	blx	r4
 8009794:	4603      	mov	r3, r0
 8009796:	75fb      	strb	r3, [r7, #23]
  return res;
 8009798:	7dfb      	ldrb	r3, [r7, #23]
}
 800979a:	4618      	mov	r0, r3
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd90      	pop	{r4, r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200045a8 	.word	0x200045a8

080097a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	4603      	mov	r3, r0
 80097b0:	603a      	str	r2, [r7, #0]
 80097b2:	71fb      	strb	r3, [r7, #7]
 80097b4:	460b      	mov	r3, r1
 80097b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80097b8:	79fb      	ldrb	r3, [r7, #7]
 80097ba:	4a09      	ldr	r2, [pc, #36]	@ (80097e0 <disk_ioctl+0x38>)
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	79fa      	ldrb	r2, [r7, #7]
 80097c6:	4906      	ldr	r1, [pc, #24]	@ (80097e0 <disk_ioctl+0x38>)
 80097c8:	440a      	add	r2, r1
 80097ca:	7a10      	ldrb	r0, [r2, #8]
 80097cc:	79b9      	ldrb	r1, [r7, #6]
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	4798      	blx	r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	200045a8 	.word	0x200045a8

080097e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	3301      	adds	r3, #1
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80097f4:	89fb      	ldrh	r3, [r7, #14]
 80097f6:	021b      	lsls	r3, r3, #8
 80097f8:	b21a      	sxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b21b      	sxth	r3, r3
 8009800:	4313      	orrs	r3, r2
 8009802:	b21b      	sxth	r3, r3
 8009804:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009806:	89fb      	ldrh	r3, [r7, #14]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3303      	adds	r3, #3
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	021b      	lsls	r3, r3, #8
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	3202      	adds	r2, #2
 800982c:	7812      	ldrb	r2, [r2, #0]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	021b      	lsls	r3, r3, #8
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	3201      	adds	r2, #1
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7812      	ldrb	r2, [r2, #0]
 8009848:	4313      	orrs	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]
	return rv;
 800984c:	68fb      	ldr	r3, [r7, #12]
}
 800984e:	4618      	mov	r0, r3
 8009850:	3714      	adds	r7, #20
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800985a:	b480      	push	{r7}
 800985c:	b083      	sub	sp, #12
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	460b      	mov	r3, r1
 8009864:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	887a      	ldrh	r2, [r7, #2]
 800986e:	b2d2      	uxtb	r2, r2
 8009870:	701a      	strb	r2, [r3, #0]
 8009872:	887b      	ldrh	r3, [r7, #2]
 8009874:	0a1b      	lsrs	r3, r3, #8
 8009876:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	607a      	str	r2, [r7, #4]
 800987e:	887a      	ldrh	r2, [r7, #2]
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	701a      	strb	r2, [r3, #0]
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	607a      	str	r2, [r7, #4]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	701a      	strb	r2, [r3, #0]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	0a1b      	lsrs	r3, r3, #8
 80098aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	607a      	str	r2, [r7, #4]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	701a      	strb	r2, [r3, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	0a1b      	lsrs	r3, r3, #8
 80098bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	b2d2      	uxtb	r2, r2
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	0a1b      	lsrs	r3, r3, #8
 80098ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	1c5a      	adds	r2, r3, #1
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	b2d2      	uxtb	r2, r2
 80098da:	701a      	strb	r2, [r3, #0]
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00d      	beq.n	800991e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	1c53      	adds	r3, r2, #1
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	1c59      	adds	r1, r3, #1
 800990c:	6179      	str	r1, [r7, #20]
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3b01      	subs	r3, #1
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1f1      	bne.n	8009902 <mem_cpy+0x1a>
	}
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800992a:	b480      	push	{r7}
 800992c:	b087      	sub	sp, #28
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	617a      	str	r2, [r7, #20]
 8009940:	68ba      	ldr	r2, [r7, #8]
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3b01      	subs	r3, #1
 800994a:	607b      	str	r3, [r7, #4]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1f3      	bne.n	800993a <mem_set+0x10>
}
 8009952:	bf00      	nop
 8009954:	bf00      	nop
 8009956:	371c      	adds	r7, #28
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009960:	b480      	push	{r7}
 8009962:	b089      	sub	sp, #36	@ 0x24
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	61fb      	str	r3, [r7, #28]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	61fa      	str	r2, [r7, #28]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	4619      	mov	r1, r3
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	61ba      	str	r2, [r7, #24]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	1acb      	subs	r3, r1, r3
 800998c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3b01      	subs	r3, #1
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <mem_cmp+0x40>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0eb      	beq.n	8009978 <mem_cmp+0x18>

	return r;
 80099a0:	697b      	ldr	r3, [r7, #20]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3724      	adds	r7, #36	@ 0x24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099b8:	e002      	b.n	80099c0 <chk_chr+0x12>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3301      	adds	r3, #1
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d005      	beq.n	80099d4 <chk_chr+0x26>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d1f2      	bne.n	80099ba <chk_chr+0xc>
	return *str;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	781b      	ldrb	r3, [r3, #0]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099ee:	2300      	movs	r3, #0
 80099f0:	60bb      	str	r3, [r7, #8]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	e029      	b.n	8009a4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80099f8:	4a27      	ldr	r2, [pc, #156]	@ (8009a98 <chk_lock+0xb4>)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	011b      	lsls	r3, r3, #4
 80099fe:	4413      	add	r3, r2
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01d      	beq.n	8009a42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a06:	4a24      	ldr	r2, [pc, #144]	@ (8009a98 <chk_lock+0xb4>)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	4413      	add	r3, r2
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d116      	bne.n	8009a46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a18:	4a1f      	ldr	r2, [pc, #124]	@ (8009a98 <chk_lock+0xb4>)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	011b      	lsls	r3, r3, #4
 8009a1e:	4413      	add	r3, r2
 8009a20:	3304      	adds	r3, #4
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d10c      	bne.n	8009a46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009a98 <chk_lock+0xb4>)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	011b      	lsls	r3, r3, #4
 8009a32:	4413      	add	r3, r2
 8009a34:	3308      	adds	r3, #8
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d102      	bne.n	8009a46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a40:	e007      	b.n	8009a52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a42:	2301      	movs	r3, #1
 8009a44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d9d2      	bls.n	80099f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d109      	bne.n	8009a6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d102      	bne.n	8009a64 <chk_lock+0x80>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d101      	bne.n	8009a68 <chk_lock+0x84>
 8009a64:	2300      	movs	r3, #0
 8009a66:	e010      	b.n	8009a8a <chk_lock+0xa6>
 8009a68:	2312      	movs	r3, #18
 8009a6a:	e00e      	b.n	8009a8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d108      	bne.n	8009a84 <chk_lock+0xa0>
 8009a72:	4a09      	ldr	r2, [pc, #36]	@ (8009a98 <chk_lock+0xb4>)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	011b      	lsls	r3, r3, #4
 8009a78:	4413      	add	r3, r2
 8009a7a:	330c      	adds	r3, #12
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a82:	d101      	bne.n	8009a88 <chk_lock+0xa4>
 8009a84:	2310      	movs	r3, #16
 8009a86:	e000      	b.n	8009a8a <chk_lock+0xa6>
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	20004388 	.word	0x20004388

08009a9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	e002      	b.n	8009aae <enq_lock+0x12>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	607b      	str	r3, [r7, #4]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d806      	bhi.n	8009ac2 <enq_lock+0x26>
 8009ab4:	4a09      	ldr	r2, [pc, #36]	@ (8009adc <enq_lock+0x40>)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	4413      	add	r3, r2
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f2      	bne.n	8009aa8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	bf14      	ite	ne
 8009ac8:	2301      	movne	r3, #1
 8009aca:	2300      	moveq	r3, #0
 8009acc:	b2db      	uxtb	r3, r3
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	20004388 	.word	0x20004388

08009ae0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
 8009aee:	e01f      	b.n	8009b30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009af0:	4a41      	ldr	r2, [pc, #260]	@ (8009bf8 <inc_lock+0x118>)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	4413      	add	r3, r2
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d113      	bne.n	8009b2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009b02:	4a3d      	ldr	r2, [pc, #244]	@ (8009bf8 <inc_lock+0x118>)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	011b      	lsls	r3, r3, #4
 8009b08:	4413      	add	r3, r2
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d109      	bne.n	8009b2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b16:	4a38      	ldr	r2, [pc, #224]	@ (8009bf8 <inc_lock+0x118>)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	4413      	add	r3, r2
 8009b1e:	3308      	adds	r3, #8
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d006      	beq.n	8009b38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d9dc      	bls.n	8009af0 <inc_lock+0x10>
 8009b36:	e000      	b.n	8009b3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d132      	bne.n	8009ba6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	e002      	b.n	8009b4c <inc_lock+0x6c>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	60fb      	str	r3, [r7, #12]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d806      	bhi.n	8009b60 <inc_lock+0x80>
 8009b52:	4a29      	ldr	r2, [pc, #164]	@ (8009bf8 <inc_lock+0x118>)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	011b      	lsls	r3, r3, #4
 8009b58:	4413      	add	r3, r2
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f2      	bne.n	8009b46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d101      	bne.n	8009b6a <inc_lock+0x8a>
 8009b66:	2300      	movs	r3, #0
 8009b68:	e040      	b.n	8009bec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	4922      	ldr	r1, [pc, #136]	@ (8009bf8 <inc_lock+0x118>)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	440b      	add	r3, r1
 8009b76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689a      	ldr	r2, [r3, #8]
 8009b7c:	491e      	ldr	r1, [pc, #120]	@ (8009bf8 <inc_lock+0x118>)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	440b      	add	r3, r1
 8009b84:	3304      	adds	r3, #4
 8009b86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	695a      	ldr	r2, [r3, #20]
 8009b8c:	491a      	ldr	r1, [pc, #104]	@ (8009bf8 <inc_lock+0x118>)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	440b      	add	r3, r1
 8009b94:	3308      	adds	r3, #8
 8009b96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b98:	4a17      	ldr	r2, [pc, #92]	@ (8009bf8 <inc_lock+0x118>)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	4413      	add	r3, r2
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d009      	beq.n	8009bc0 <inc_lock+0xe0>
 8009bac:	4a12      	ldr	r2, [pc, #72]	@ (8009bf8 <inc_lock+0x118>)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	4413      	add	r3, r2
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d001      	beq.n	8009bc0 <inc_lock+0xe0>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e015      	b.n	8009bec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d108      	bne.n	8009bd8 <inc_lock+0xf8>
 8009bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf8 <inc_lock+0x118>)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	011b      	lsls	r3, r3, #4
 8009bcc:	4413      	add	r3, r2
 8009bce:	330c      	adds	r3, #12
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	e001      	b.n	8009bdc <inc_lock+0xfc>
 8009bd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009bdc:	4906      	ldr	r1, [pc, #24]	@ (8009bf8 <inc_lock+0x118>)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	440b      	add	r3, r1
 8009be4:	330c      	adds	r3, #12
 8009be6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	20004388 	.word	0x20004388

08009bfc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3b01      	subs	r3, #1
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d825      	bhi.n	8009c5c <dec_lock+0x60>
		n = Files[i].ctr;
 8009c10:	4a17      	ldr	r2, [pc, #92]	@ (8009c70 <dec_lock+0x74>)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	4413      	add	r3, r2
 8009c18:	330c      	adds	r3, #12
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c1e:	89fb      	ldrh	r3, [r7, #14]
 8009c20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c24:	d101      	bne.n	8009c2a <dec_lock+0x2e>
 8009c26:	2300      	movs	r3, #0
 8009c28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c2a:	89fb      	ldrh	r3, [r7, #14]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <dec_lock+0x3a>
 8009c30:	89fb      	ldrh	r3, [r7, #14]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c36:	4a0e      	ldr	r2, [pc, #56]	@ (8009c70 <dec_lock+0x74>)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	011b      	lsls	r3, r3, #4
 8009c3c:	4413      	add	r3, r2
 8009c3e:	330c      	adds	r3, #12
 8009c40:	89fa      	ldrh	r2, [r7, #14]
 8009c42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c44:	89fb      	ldrh	r3, [r7, #14]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d105      	bne.n	8009c56 <dec_lock+0x5a>
 8009c4a:	4a09      	ldr	r2, [pc, #36]	@ (8009c70 <dec_lock+0x74>)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	4413      	add	r3, r2
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	737b      	strb	r3, [r7, #13]
 8009c5a:	e001      	b.n	8009c60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c60:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20004388 	.word	0x20004388

08009c74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e010      	b.n	8009ca4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c82:	4a0d      	ldr	r2, [pc, #52]	@ (8009cb8 <clear_lock+0x44>)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	4413      	add	r3, r2
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d105      	bne.n	8009c9e <clear_lock+0x2a>
 8009c92:	4a09      	ldr	r2, [pc, #36]	@ (8009cb8 <clear_lock+0x44>)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	011b      	lsls	r3, r3, #4
 8009c98:	4413      	add	r3, r2
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d9eb      	bls.n	8009c82 <clear_lock+0xe>
	}
}
 8009caa:	bf00      	nop
 8009cac:	bf00      	nop
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	20004388 	.word	0x20004388

08009cbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	78db      	ldrb	r3, [r3, #3]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d034      	beq.n	8009d3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	7858      	ldrb	r0, [r3, #1]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	f7ff fd40 	bl	8009768 <disk_write>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
 8009cf2:	e022      	b.n	8009d3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	1ad2      	subs	r2, r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6a1b      	ldr	r3, [r3, #32]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d217      	bcs.n	8009d3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	789b      	ldrb	r3, [r3, #2]
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	e010      	b.n	8009d34 <sync_window+0x78>
					wsect += fs->fsize;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	4413      	add	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	7858      	ldrb	r0, [r3, #1]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d26:	2301      	movs	r3, #1
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	f7ff fd1d 	bl	8009768 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	613b      	str	r3, [r7, #16]
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d8eb      	bhi.n	8009d12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d01b      	beq.n	8009d94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff ffad 	bl	8009cbc <sync_window>
 8009d62:	4603      	mov	r3, r0
 8009d64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d113      	bne.n	8009d94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	7858      	ldrb	r0, [r3, #1]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d76:	2301      	movs	r3, #1
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	f7ff fcd5 	bl	8009728 <disk_read>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d004      	beq.n	8009d8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d84:	f04f 33ff 	mov.w	r3, #4294967295
 8009d88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f7ff ff87 	bl	8009cbc <sync_window>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d159      	bne.n	8009e6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	2b03      	cmp	r3, #3
 8009dbe:	d149      	bne.n	8009e54 <sync_fs+0xb4>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	791b      	ldrb	r3, [r3, #4]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d145      	bne.n	8009e54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	899b      	ldrh	r3, [r3, #12]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	f7ff fda8 	bl	800992a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3338      	adds	r3, #56	@ 0x38
 8009dde:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009de2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7ff fd37 	bl	800985a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3338      	adds	r3, #56	@ 0x38
 8009df0:	4921      	ldr	r1, [pc, #132]	@ (8009e78 <sync_fs+0xd8>)
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff fd4c 	bl	8009890 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3338      	adds	r3, #56	@ 0x38
 8009dfc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009e00:	491e      	ldr	r1, [pc, #120]	@ (8009e7c <sync_fs+0xdc>)
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff fd44 	bl	8009890 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3338      	adds	r3, #56	@ 0x38
 8009e0c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	f7ff fd3a 	bl	8009890 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3338      	adds	r3, #56	@ 0x38
 8009e20:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	f7ff fd30 	bl	8009890 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	7858      	ldrb	r0, [r3, #1]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f7ff fc8d 	bl	8009768 <disk_write>
			fs->fsi_flag = 0;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2200      	movs	r2, #0
 8009e52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7ff fca3 	bl	80097a8 <disk_ioctl>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <sync_fs+0xcc>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	41615252 	.word	0x41615252
 8009e7c:	61417272 	.word	0x61417272

08009e80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	3b02      	subs	r3, #2
 8009e8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	3b02      	subs	r3, #2
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d301      	bcc.n	8009ea0 <clust2sect+0x20>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e008      	b.n	8009eb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	895b      	ldrh	r3, [r3, #10]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	fb03 f202 	mul.w	r2, r3, r2
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eb0:	4413      	add	r3, r2
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b086      	sub	sp, #24
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d904      	bls.n	8009ede <get_fat+0x20>
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d302      	bcc.n	8009ee4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ede:	2301      	movs	r3, #1
 8009ee0:	617b      	str	r3, [r7, #20]
 8009ee2:	e0ba      	b.n	800a05a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	f000 8082 	beq.w	8009ff8 <get_fat+0x13a>
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	f300 80a6 	bgt.w	800a046 <get_fat+0x188>
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d002      	beq.n	8009f04 <get_fat+0x46>
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	d055      	beq.n	8009fae <get_fat+0xf0>
 8009f02:	e0a0      	b.n	800a046 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	085b      	lsrs	r3, r3, #1
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	899b      	ldrh	r3, [r3, #12]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f22:	4413      	add	r3, r2
 8009f24:	4619      	mov	r1, r3
 8009f26:	6938      	ldr	r0, [r7, #16]
 8009f28:	f7ff ff0c 	bl	8009d44 <move_window>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f040 808c 	bne.w	800a04c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	60fa      	str	r2, [r7, #12]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	8992      	ldrh	r2, [r2, #12]
 8009f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f42:	fb01 f202 	mul.w	r2, r1, r2
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	899b      	ldrh	r3, [r3, #12]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f62:	4413      	add	r3, r2
 8009f64:	4619      	mov	r1, r3
 8009f66:	6938      	ldr	r0, [r7, #16]
 8009f68:	f7ff feec 	bl	8009d44 <move_window>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d16e      	bne.n	800a050 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	899b      	ldrh	r3, [r3, #12]
 8009f76:	461a      	mov	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f7e:	fb01 f202 	mul.w	r2, r1, r2
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	4413      	add	r3, r2
 8009f88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f8c:	021b      	lsls	r3, r3, #8
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <get_fat+0xe6>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	091b      	lsrs	r3, r3, #4
 8009fa2:	e002      	b.n	8009faa <get_fat+0xec>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009faa:	617b      	str	r3, [r7, #20]
			break;
 8009fac:	e055      	b.n	800a05a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	899b      	ldrh	r3, [r3, #12]
 8009fb6:	085b      	lsrs	r3, r3, #1
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	4619      	mov	r1, r3
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009fc2:	4413      	add	r3, r2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6938      	ldr	r0, [r7, #16]
 8009fc8:	f7ff febc 	bl	8009d44 <move_window>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d140      	bne.n	800a054 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	8992      	ldrh	r2, [r2, #12]
 8009fe0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fe4:	fb00 f202 	mul.w	r2, r0, r2
 8009fe8:	1a9b      	subs	r3, r3, r2
 8009fea:	440b      	add	r3, r1
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7ff fbf9 	bl	80097e4 <ld_word>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	617b      	str	r3, [r7, #20]
			break;
 8009ff6:	e030      	b.n	800a05a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	899b      	ldrh	r3, [r3, #12]
 800a000:	089b      	lsrs	r3, r3, #2
 800a002:	b29b      	uxth	r3, r3
 800a004:	4619      	mov	r1, r3
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	fbb3 f3f1 	udiv	r3, r3, r1
 800a00c:	4413      	add	r3, r2
 800a00e:	4619      	mov	r1, r3
 800a010:	6938      	ldr	r0, [r7, #16]
 800a012:	f7ff fe97 	bl	8009d44 <move_window>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d11d      	bne.n	800a058 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	693a      	ldr	r2, [r7, #16]
 800a028:	8992      	ldrh	r2, [r2, #12]
 800a02a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a02e:	fb00 f202 	mul.w	r2, r0, r2
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	440b      	add	r3, r1
 800a036:	4618      	mov	r0, r3
 800a038:	f7ff fbec 	bl	8009814 <ld_dword>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a042:	617b      	str	r3, [r7, #20]
			break;
 800a044:	e009      	b.n	800a05a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a046:	2301      	movs	r3, #1
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	e006      	b.n	800a05a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a04c:	bf00      	nop
 800a04e:	e004      	b.n	800a05a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a050:	bf00      	nop
 800a052:	e002      	b.n	800a05a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a054:	bf00      	nop
 800a056:	e000      	b.n	800a05a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a058:	bf00      	nop
		}
	}

	return val;
 800a05a:	697b      	ldr	r3, [r7, #20]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3718      	adds	r7, #24
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a064:	b590      	push	{r4, r7, lr}
 800a066:	b089      	sub	sp, #36	@ 0x24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a070:	2302      	movs	r3, #2
 800a072:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b01      	cmp	r3, #1
 800a078:	f240 8109 	bls.w	800a28e <put_fat+0x22a>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	429a      	cmp	r2, r3
 800a084:	f080 8103 	bcs.w	800a28e <put_fat+0x22a>
		switch (fs->fs_type) {
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	f000 80b6 	beq.w	800a1fe <put_fat+0x19a>
 800a092:	2b03      	cmp	r3, #3
 800a094:	f300 80fb 	bgt.w	800a28e <put_fat+0x22a>
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d003      	beq.n	800a0a4 <put_fat+0x40>
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	f000 8083 	beq.w	800a1a8 <put_fat+0x144>
 800a0a2:	e0f4      	b.n	800a28e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	61bb      	str	r3, [r7, #24]
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	085b      	lsrs	r3, r3, #1
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	899b      	ldrh	r3, [r3, #12]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	fbb3 f3f1 	udiv	r3, r3, r1
 800a0c2:	4413      	add	r3, r2
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7ff fe3c 	bl	8009d44 <move_window>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0d0:	7ffb      	ldrb	r3, [r7, #31]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f040 80d4 	bne.w	800a280 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	61ba      	str	r2, [r7, #24]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	8992      	ldrh	r2, [r2, #12]
 800a0e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a0ec:	fb00 f202 	mul.w	r2, r0, r2
 800a0f0:	1a9b      	subs	r3, r3, r2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00d      	beq.n	800a11c <put_fat+0xb8>
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b25b      	sxtb	r3, r3
 800a106:	f003 030f 	and.w	r3, r3, #15
 800a10a:	b25a      	sxtb	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	b25b      	sxtb	r3, r3
 800a114:	4313      	orrs	r3, r2
 800a116:	b25b      	sxtb	r3, r3
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	e001      	b.n	800a120 <put_fat+0xbc>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2201      	movs	r2, #1
 800a128:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	899b      	ldrh	r3, [r3, #12]
 800a132:	4619      	mov	r1, r3
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	fbb3 f3f1 	udiv	r3, r3, r1
 800a13a:	4413      	add	r3, r2
 800a13c:	4619      	mov	r1, r3
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7ff fe00 	bl	8009d44 <move_window>
 800a144:	4603      	mov	r3, r0
 800a146:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a148:	7ffb      	ldrb	r3, [r7, #31]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f040 809a 	bne.w	800a284 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	899b      	ldrh	r3, [r3, #12]
 800a15a:	461a      	mov	r2, r3
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a162:	fb00 f202 	mul.w	r2, r0, r2
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	440b      	add	r3, r1
 800a16a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <put_fat+0x11a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	091b      	lsrs	r3, r3, #4
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	e00e      	b.n	800a19c <put_fat+0x138>
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b25b      	sxtb	r3, r3
 800a184:	f023 030f 	bic.w	r3, r3, #15
 800a188:	b25a      	sxtb	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	0a1b      	lsrs	r3, r3, #8
 800a18e:	b25b      	sxtb	r3, r3
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	b25b      	sxtb	r3, r3
 800a196:	4313      	orrs	r3, r2
 800a198:	b25b      	sxtb	r3, r3
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	70da      	strb	r2, [r3, #3]
			break;
 800a1a6:	e072      	b.n	800a28e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	899b      	ldrh	r3, [r3, #12]
 800a1b0:	085b      	lsrs	r3, r3, #1
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1bc:	4413      	add	r3, r2
 800a1be:	4619      	mov	r1, r3
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f7ff fdbf 	bl	8009d44 <move_window>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1ca:	7ffb      	ldrb	r3, [r7, #31]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d15b      	bne.n	800a288 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	8992      	ldrh	r2, [r2, #12]
 800a1de:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1e2:	fb00 f202 	mul.w	r2, r0, r2
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	440b      	add	r3, r1
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	b292      	uxth	r2, r2
 800a1ee:	4611      	mov	r1, r2
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7ff fb32 	bl	800985a <st_word>
			fs->wflag = 1;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	70da      	strb	r2, [r3, #3]
			break;
 800a1fc:	e047      	b.n	800a28e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	899b      	ldrh	r3, [r3, #12]
 800a206:	089b      	lsrs	r3, r3, #2
 800a208:	b29b      	uxth	r3, r3
 800a20a:	4619      	mov	r1, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a212:	4413      	add	r3, r2
 800a214:	4619      	mov	r1, r3
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7ff fd94 	bl	8009d44 <move_window>
 800a21c:	4603      	mov	r3, r0
 800a21e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a220:	7ffb      	ldrb	r3, [r7, #31]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d132      	bne.n	800a28c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	8992      	ldrh	r2, [r2, #12]
 800a23a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a23e:	fb00 f202 	mul.w	r2, r0, r2
 800a242:	1a9b      	subs	r3, r3, r2
 800a244:	440b      	add	r3, r1
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff fae4 	bl	8009814 <ld_dword>
 800a24c:	4603      	mov	r3, r0
 800a24e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a252:	4323      	orrs	r3, r4
 800a254:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	8992      	ldrh	r2, [r2, #12]
 800a264:	fbb3 f0f2 	udiv	r0, r3, r2
 800a268:	fb00 f202 	mul.w	r2, r0, r2
 800a26c:	1a9b      	subs	r3, r3, r2
 800a26e:	440b      	add	r3, r1
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fb0c 	bl	8009890 <st_dword>
			fs->wflag = 1;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	70da      	strb	r2, [r3, #3]
			break;
 800a27e:	e006      	b.n	800a28e <put_fat+0x22a>
			if (res != FR_OK) break;
 800a280:	bf00      	nop
 800a282:	e004      	b.n	800a28e <put_fat+0x22a>
			if (res != FR_OK) break;
 800a284:	bf00      	nop
 800a286:	e002      	b.n	800a28e <put_fat+0x22a>
			if (res != FR_OK) break;
 800a288:	bf00      	nop
 800a28a:	e000      	b.n	800a28e <put_fat+0x22a>
			if (res != FR_OK) break;
 800a28c:	bf00      	nop
		}
	}
	return res;
 800a28e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3724      	adds	r7, #36	@ 0x24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd90      	pop	{r4, r7, pc}

0800a298 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d904      	bls.n	800a2be <remove_chain+0x26>
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d301      	bcc.n	800a2c2 <remove_chain+0x2a>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	e04b      	b.n	800a35a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00c      	beq.n	800a2e2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	69b8      	ldr	r0, [r7, #24]
 800a2d0:	f7ff fec8 	bl	800a064 <put_fat>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a2d8:	7ffb      	ldrb	r3, [r7, #31]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <remove_chain+0x4a>
 800a2de:	7ffb      	ldrb	r3, [r7, #31]
 800a2e0:	e03b      	b.n	800a35a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a2e2:	68b9      	ldr	r1, [r7, #8]
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff fdea 	bl	8009ebe <get_fat>
 800a2ea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d031      	beq.n	800a356 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d101      	bne.n	800a2fc <remove_chain+0x64>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	e02e      	b.n	800a35a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d101      	bne.n	800a308 <remove_chain+0x70>
 800a304:	2301      	movs	r3, #1
 800a306:	e028      	b.n	800a35a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a308:	2200      	movs	r2, #0
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	69b8      	ldr	r0, [r7, #24]
 800a30e:	f7ff fea9 	bl	800a064 <put_fat>
 800a312:	4603      	mov	r3, r0
 800a314:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a316:	7ffb      	ldrb	r3, [r7, #31]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <remove_chain+0x88>
 800a31c:	7ffb      	ldrb	r3, [r7, #31]
 800a31e:	e01c      	b.n	800a35a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	699a      	ldr	r2, [r3, #24]
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	3b02      	subs	r3, #2
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d20b      	bcs.n	800a346 <remove_chain+0xae>
			fs->free_clst++;
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	791b      	ldrb	r3, [r3, #4]
 800a33c:	f043 0301 	orr.w	r3, r3, #1
 800a340:	b2da      	uxtb	r2, r3
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	429a      	cmp	r2, r3
 800a352:	d3c6      	bcc.n	800a2e2 <remove_chain+0x4a>
 800a354:	e000      	b.n	800a358 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a356:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3720      	adds	r7, #32
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b088      	sub	sp, #32
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10d      	bne.n	800a394 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d004      	beq.n	800a38e <create_chain+0x2c>
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d31b      	bcc.n	800a3c6 <create_chain+0x64>
 800a38e:	2301      	movs	r3, #1
 800a390:	61bb      	str	r3, [r7, #24]
 800a392:	e018      	b.n	800a3c6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a394:	6839      	ldr	r1, [r7, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff fd91 	bl	8009ebe <get_fat>
 800a39c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d801      	bhi.n	800a3a8 <create_chain+0x46>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e070      	b.n	800a48a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ae:	d101      	bne.n	800a3b4 <create_chain+0x52>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	e06a      	b.n	800a48a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	69db      	ldr	r3, [r3, #28]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d201      	bcs.n	800a3c2 <create_chain+0x60>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	e063      	b.n	800a48a <create_chain+0x128>
		scl = clst;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	69db      	ldr	r3, [r3, #28]
 800a3d4:	69fa      	ldr	r2, [r7, #28]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d307      	bcc.n	800a3ea <create_chain+0x88>
				ncl = 2;
 800a3da:	2302      	movs	r3, #2
 800a3dc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a3de:	69fa      	ldr	r2, [r7, #28]
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d901      	bls.n	800a3ea <create_chain+0x88>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e04f      	b.n	800a48a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a3ea:	69f9      	ldr	r1, [r7, #28]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7ff fd66 	bl	8009ebe <get_fat>
 800a3f2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d00e      	beq.n	800a418 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d003      	beq.n	800a408 <create_chain+0xa6>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a406:	d101      	bne.n	800a40c <create_chain+0xaa>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	e03e      	b.n	800a48a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a40c:	69fa      	ldr	r2, [r7, #28]
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	429a      	cmp	r2, r3
 800a412:	d1da      	bne.n	800a3ca <create_chain+0x68>
 800a414:	2300      	movs	r3, #0
 800a416:	e038      	b.n	800a48a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a418:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295
 800a41e:	69f9      	ldr	r1, [r7, #28]
 800a420:	6938      	ldr	r0, [r7, #16]
 800a422:	f7ff fe1f 	bl	800a064 <put_fat>
 800a426:	4603      	mov	r3, r0
 800a428:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a42a:	7dfb      	ldrb	r3, [r7, #23]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d109      	bne.n	800a444 <create_chain+0xe2>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d006      	beq.n	800a444 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a436:	69fa      	ldr	r2, [r7, #28]
 800a438:	6839      	ldr	r1, [r7, #0]
 800a43a:	6938      	ldr	r0, [r7, #16]
 800a43c:	f7ff fe12 	bl	800a064 <put_fat>
 800a440:	4603      	mov	r3, r0
 800a442:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a444:	7dfb      	ldrb	r3, [r7, #23]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d116      	bne.n	800a478 <create_chain+0x116>
		fs->last_clst = ncl;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	69fa      	ldr	r2, [r7, #28]
 800a44e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	699a      	ldr	r2, [r3, #24]
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	3b02      	subs	r3, #2
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d804      	bhi.n	800a468 <create_chain+0x106>
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	1e5a      	subs	r2, r3, #1
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	791b      	ldrb	r3, [r3, #4]
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	b2da      	uxtb	r2, r3
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	711a      	strb	r2, [r3, #4]
 800a476:	e007      	b.n	800a488 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d102      	bne.n	800a484 <create_chain+0x122>
 800a47e:	f04f 33ff 	mov.w	r3, #4294967295
 800a482:	e000      	b.n	800a486 <create_chain+0x124>
 800a484:	2301      	movs	r3, #1
 800a486:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a488:	69fb      	ldr	r3, [r7, #28]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3720      	adds	r7, #32
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a492:	b480      	push	{r7}
 800a494:	b087      	sub	sp, #28
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	899b      	ldrh	r3, [r3, #12]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	8952      	ldrh	r2, [r2, #10]
 800a4ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	1d1a      	adds	r2, r3, #4
 800a4c4:	613a      	str	r2, [r7, #16]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d101      	bne.n	800a4d4 <clmt_clust+0x42>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e010      	b.n	800a4f6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d307      	bcc.n	800a4ec <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	617b      	str	r3, [r7, #20]
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4ea:	e7e9      	b.n	800a4c0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a4ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	4413      	add	r3, r2
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b086      	sub	sp, #24
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a518:	d204      	bcs.n	800a524 <dir_sdi+0x22>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	f003 031f 	and.w	r3, r3, #31
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a524:	2302      	movs	r3, #2
 800a526:	e071      	b.n	800a60c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <dir_sdi+0x46>
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d902      	bls.n	800a548 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a546:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10c      	bne.n	800a568 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	095b      	lsrs	r3, r3, #5
 800a552:	693a      	ldr	r2, [r7, #16]
 800a554:	8912      	ldrh	r2, [r2, #8]
 800a556:	4293      	cmp	r3, r2
 800a558:	d301      	bcc.n	800a55e <dir_sdi+0x5c>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e056      	b.n	800a60c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	61da      	str	r2, [r3, #28]
 800a566:	e02d      	b.n	800a5c4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	895b      	ldrh	r3, [r3, #10]
 800a56c:	461a      	mov	r2, r3
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	899b      	ldrh	r3, [r3, #12]
 800a572:	fb02 f303 	mul.w	r3, r2, r3
 800a576:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a578:	e019      	b.n	800a5ae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6979      	ldr	r1, [r7, #20]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fc9d 	bl	8009ebe <get_fat>
 800a584:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58c:	d101      	bne.n	800a592 <dir_sdi+0x90>
 800a58e:	2301      	movs	r3, #1
 800a590:	e03c      	b.n	800a60c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2b01      	cmp	r3, #1
 800a596:	d904      	bls.n	800a5a2 <dir_sdi+0xa0>
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	69db      	ldr	r3, [r3, #28]
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d301      	bcc.n	800a5a6 <dir_sdi+0xa4>
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	e032      	b.n	800a60c <dir_sdi+0x10a>
			ofs -= csz;
 800a5a6:	683a      	ldr	r2, [r7, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d2e1      	bcs.n	800a57a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a5b6:	6979      	ldr	r1, [r7, #20]
 800a5b8:	6938      	ldr	r0, [r7, #16]
 800a5ba:	f7ff fc61 	bl	8009e80 <clust2sect>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <dir_sdi+0xd4>
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e01a      	b.n	800a60c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69da      	ldr	r2, [r3, #28]
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	899b      	ldrh	r3, [r3, #12]
 800a5de:	4619      	mov	r1, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a5e6:	441a      	add	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	899b      	ldrh	r3, [r3, #12]
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800a5fe:	fb00 f202 	mul.w	r2, r0, r2
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	18ca      	adds	r2, r1, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	3320      	adds	r3, #32
 800a62a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <dir_next+0x28>
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a63a:	d301      	bcc.n	800a640 <dir_next+0x2c>
 800a63c:	2304      	movs	r3, #4
 800a63e:	e0bb      	b.n	800a7b8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	899b      	ldrh	r3, [r3, #12]
 800a644:	461a      	mov	r2, r3
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	fbb3 f1f2 	udiv	r1, r3, r2
 800a64c:	fb01 f202 	mul.w	r2, r1, r2
 800a650:	1a9b      	subs	r3, r3, r2
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 809d 	bne.w	800a792 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	1c5a      	adds	r2, r3, #1
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	095b      	lsrs	r3, r3, #5
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	8912      	ldrh	r2, [r2, #8]
 800a672:	4293      	cmp	r3, r2
 800a674:	f0c0 808d 	bcc.w	800a792 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2200      	movs	r2, #0
 800a67c:	61da      	str	r2, [r3, #28]
 800a67e:	2304      	movs	r3, #4
 800a680:	e09a      	b.n	800a7b8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	899b      	ldrh	r3, [r3, #12]
 800a686:	461a      	mov	r2, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	8952      	ldrh	r2, [r2, #10]
 800a692:	3a01      	subs	r2, #1
 800a694:	4013      	ands	r3, r2
 800a696:	2b00      	cmp	r3, #0
 800a698:	d17b      	bne.n	800a792 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	4610      	mov	r0, r2
 800a6a4:	f7ff fc0b 	bl	8009ebe <get_fat>
 800a6a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d801      	bhi.n	800a6b4 <dir_next+0xa0>
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	e081      	b.n	800a7b8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ba:	d101      	bne.n	800a6c0 <dir_next+0xac>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e07b      	b.n	800a7b8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d359      	bcc.n	800a77e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d104      	bne.n	800a6da <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	61da      	str	r2, [r3, #28]
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	e06e      	b.n	800a7b8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	f7ff fe3d 	bl	800a362 <create_chain>
 800a6e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <dir_next+0xe0>
 800a6f0:	2307      	movs	r3, #7
 800a6f2:	e061      	b.n	800a7b8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d101      	bne.n	800a6fe <dir_next+0xea>
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	e05c      	b.n	800a7b8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d101      	bne.n	800a70a <dir_next+0xf6>
 800a706:	2301      	movs	r3, #1
 800a708:	e056      	b.n	800a7b8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff fad6 	bl	8009cbc <sync_window>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <dir_next+0x106>
 800a716:	2301      	movs	r3, #1
 800a718:	e04e      	b.n	800a7b8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	899b      	ldrh	r3, [r3, #12]
 800a724:	461a      	mov	r2, r3
 800a726:	2100      	movs	r1, #0
 800a728:	f7ff f8ff 	bl	800992a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a72c:	2300      	movs	r3, #0
 800a72e:	613b      	str	r3, [r7, #16]
 800a730:	6979      	ldr	r1, [r7, #20]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff fba4 	bl	8009e80 <clust2sect>
 800a738:	4602      	mov	r2, r0
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a73e:	e012      	b.n	800a766 <dir_next+0x152>
						fs->wflag = 1;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2201      	movs	r2, #1
 800a744:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff fab8 	bl	8009cbc <sync_window>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <dir_next+0x142>
 800a752:	2301      	movs	r3, #1
 800a754:	e030      	b.n	800a7b8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	3301      	adds	r3, #1
 800a75a:	613b      	str	r3, [r7, #16]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a760:	1c5a      	adds	r2, r3, #1
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	635a      	str	r2, [r3, #52]	@ 0x34
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	895b      	ldrh	r3, [r3, #10]
 800a76a:	461a      	mov	r2, r3
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	4293      	cmp	r3, r2
 800a770:	d3e6      	bcc.n	800a740 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	1ad2      	subs	r2, r2, r3
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a784:	6979      	ldr	r1, [r7, #20]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7ff fb7a 	bl	8009e80 <clust2sect>
 800a78c:	4602      	mov	r2, r0
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	899b      	ldrh	r3, [r3, #12]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7aa:	fb00 f202 	mul.w	r2, r0, r2
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	18ca      	adds	r2, r1, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3718      	adds	r7, #24
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a7d0:	2100      	movs	r1, #0
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f7ff fe95 	bl	800a502 <dir_sdi>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d12b      	bne.n	800a83a <dir_alloc+0x7a>
		n = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	69db      	ldr	r3, [r3, #28]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7ff faa9 	bl	8009d44 <move_window>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d11d      	bne.n	800a838 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2be5      	cmp	r3, #229	@ 0xe5
 800a804:	d004      	beq.n	800a810 <dir_alloc+0x50>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d107      	bne.n	800a820 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	3301      	adds	r3, #1
 800a814:	613b      	str	r3, [r7, #16]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d102      	bne.n	800a824 <dir_alloc+0x64>
 800a81e:	e00c      	b.n	800a83a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a820:	2300      	movs	r3, #0
 800a822:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a824:	2101      	movs	r1, #1
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f7ff fef4 	bl	800a614 <dir_next>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0d7      	beq.n	800a7e6 <dir_alloc+0x26>
 800a836:	e000      	b.n	800a83a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a838:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d101      	bne.n	800a844 <dir_alloc+0x84>
 800a840:	2307      	movs	r3, #7
 800a842:	75fb      	strb	r3, [r7, #23]
	return res;
 800a844:	7dfb      	ldrb	r3, [r7, #23]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3718      	adds	r7, #24
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	331a      	adds	r3, #26
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe ffc1 	bl	80097e4 <ld_word>
 800a862:	4603      	mov	r3, r0
 800a864:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d109      	bne.n	800a882 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	3314      	adds	r3, #20
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe ffb6 	bl	80097e4 <ld_word>
 800a878:	4603      	mov	r3, r0
 800a87a:	041b      	lsls	r3, r3, #16
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	4313      	orrs	r3, r2
 800a880:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a882:	68fb      	ldr	r3, [r7, #12]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	331a      	adds	r3, #26
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	b292      	uxth	r2, r2
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe ffd9 	bl	800985a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b03      	cmp	r3, #3
 800a8ae:	d109      	bne.n	800a8c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	f103 0214 	add.w	r2, r3, #20
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	0c1b      	lsrs	r3, r3, #16
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f7fe ffcb 	bl	800985a <st_word>
	}
}
 800a8c4:	bf00      	nop
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a8cc:	b590      	push	{r4, r7, lr}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	331a      	adds	r3, #26
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe ff82 	bl	80097e4 <ld_word>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d001      	beq.n	800a8ea <cmp_lfn+0x1e>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e059      	b.n	800a99e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8f2:	1e5a      	subs	r2, r3, #1
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	4413      	add	r3, r2
 800a8fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a900:	2301      	movs	r3, #1
 800a902:	81fb      	strh	r3, [r7, #14]
 800a904:	2300      	movs	r3, #0
 800a906:	613b      	str	r3, [r7, #16]
 800a908:	e033      	b.n	800a972 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a90a:	4a27      	ldr	r2, [pc, #156]	@ (800a9a8 <cmp_lfn+0xdc>)
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	4413      	add	r3, r2
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	461a      	mov	r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	4413      	add	r3, r2
 800a918:	4618      	mov	r0, r3
 800a91a:	f7fe ff63 	bl	80097e4 <ld_word>
 800a91e:	4603      	mov	r3, r0
 800a920:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a922:	89fb      	ldrh	r3, [r7, #14]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d01a      	beq.n	800a95e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a92c:	d812      	bhi.n	800a954 <cmp_lfn+0x88>
 800a92e:	89bb      	ldrh	r3, [r7, #12]
 800a930:	4618      	mov	r0, r3
 800a932:	f002 f98f 	bl	800cc54 <ff_wtoupper>
 800a936:	4603      	mov	r3, r0
 800a938:	461c      	mov	r4, r3
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	617a      	str	r2, [r7, #20]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	4413      	add	r3, r2
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	4618      	mov	r0, r3
 800a94a:	f002 f983 	bl	800cc54 <ff_wtoupper>
 800a94e:	4603      	mov	r3, r0
 800a950:	429c      	cmp	r4, r3
 800a952:	d001      	beq.n	800a958 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a954:	2300      	movs	r3, #0
 800a956:	e022      	b.n	800a99e <cmp_lfn+0xd2>
			}
			wc = uc;
 800a958:	89bb      	ldrh	r3, [r7, #12]
 800a95a:	81fb      	strh	r3, [r7, #14]
 800a95c:	e006      	b.n	800a96c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a95e:	89bb      	ldrh	r3, [r7, #12]
 800a960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a964:	4293      	cmp	r3, r2
 800a966:	d001      	beq.n	800a96c <cmp_lfn+0xa0>
 800a968:	2300      	movs	r3, #0
 800a96a:	e018      	b.n	800a99e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	3301      	adds	r3, #1
 800a970:	613b      	str	r3, [r7, #16]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b0c      	cmp	r3, #12
 800a976:	d9c8      	bls.n	800a90a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00b      	beq.n	800a99c <cmp_lfn+0xd0>
 800a984:	89fb      	ldrh	r3, [r7, #14]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d008      	beq.n	800a99c <cmp_lfn+0xd0>
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <cmp_lfn+0xd0>
 800a998:	2300      	movs	r3, #0
 800a99a:	e000      	b.n	800a99e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a99c:	2301      	movs	r3, #1
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd90      	pop	{r4, r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800eccc 	.word	0x0800eccc

0800a9ac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	331a      	adds	r3, #26
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe ff12 	bl	80097e4 <ld_word>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <pick_lfn+0x1e>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e04d      	b.n	800aa66 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9d2:	1e5a      	subs	r2, r3, #1
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	4413      	add	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	81fb      	strh	r3, [r7, #14]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	613b      	str	r3, [r7, #16]
 800a9e8:	e028      	b.n	800aa3c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a9ea:	4a21      	ldr	r2, [pc, #132]	@ (800aa70 <pick_lfn+0xc4>)
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe fef3 	bl	80097e4 <ld_word>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800aa02:	89fb      	ldrh	r3, [r7, #14]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00f      	beq.n	800aa28 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2bfe      	cmp	r3, #254	@ 0xfe
 800aa0c:	d901      	bls.n	800aa12 <pick_lfn+0x66>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e029      	b.n	800aa66 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800aa12:	89bb      	ldrh	r3, [r7, #12]
 800aa14:	81fb      	strh	r3, [r7, #14]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	1c5a      	adds	r2, r3, #1
 800aa1a:	617a      	str	r2, [r7, #20]
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	4413      	add	r3, r2
 800aa22:	89fa      	ldrh	r2, [r7, #14]
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	e006      	b.n	800aa36 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800aa28:	89bb      	ldrh	r3, [r7, #12]
 800aa2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d001      	beq.n	800aa36 <pick_lfn+0x8a>
 800aa32:	2300      	movs	r3, #0
 800aa34:	e017      	b.n	800aa66 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	613b      	str	r3, [r7, #16]
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	2b0c      	cmp	r3, #12
 800aa40:	d9d3      	bls.n	800a9ea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2bfe      	cmp	r3, #254	@ 0xfe
 800aa52:	d901      	bls.n	800aa58 <pick_lfn+0xac>
 800aa54:	2300      	movs	r3, #0
 800aa56:	e006      	b.n	800aa66 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	005b      	lsls	r3, r3, #1
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	4413      	add	r3, r2
 800aa60:	2200      	movs	r2, #0
 800aa62:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800aa64:	2301      	movs	r3, #1
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	0800eccc 	.word	0x0800eccc

0800aa74 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b088      	sub	sp, #32
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	461a      	mov	r2, r3
 800aa82:	460b      	mov	r3, r1
 800aa84:	71fb      	strb	r3, [r7, #7]
 800aa86:	4613      	mov	r3, r2
 800aa88:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	330d      	adds	r3, #13
 800aa8e:	79ba      	ldrb	r2, [r7, #6]
 800aa90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	330b      	adds	r3, #11
 800aa96:	220f      	movs	r2, #15
 800aa98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	330c      	adds	r3, #12
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	331a      	adds	r3, #26
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe fed6 	bl	800985a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	1e5a      	subs	r2, r3, #1
 800aab2:	4613      	mov	r3, r2
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	82fb      	strh	r3, [r7, #22]
 800aac2:	2300      	movs	r3, #0
 800aac4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800aac6:	8afb      	ldrh	r3, [r7, #22]
 800aac8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aacc:	4293      	cmp	r3, r2
 800aace:	d007      	beq.n	800aae0 <put_lfn+0x6c>
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	61fa      	str	r2, [r7, #28]
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	4413      	add	r3, r2
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800aae0:	4a17      	ldr	r2, [pc, #92]	@ (800ab40 <put_lfn+0xcc>)
 800aae2:	69bb      	ldr	r3, [r7, #24]
 800aae4:	4413      	add	r3, r2
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	4413      	add	r3, r2
 800aaee:	8afa      	ldrh	r2, [r7, #22]
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe feb1 	bl	800985a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800aaf8:	8afb      	ldrh	r3, [r7, #22]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <put_lfn+0x90>
 800aafe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ab02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	3301      	adds	r3, #1
 800ab08:	61bb      	str	r3, [r7, #24]
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	2b0c      	cmp	r3, #12
 800ab0e:	d9da      	bls.n	800aac6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ab10:	8afb      	ldrh	r3, [r7, #22]
 800ab12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d006      	beq.n	800ab28 <put_lfn+0xb4>
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	4413      	add	r3, r2
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d103      	bne.n	800ab30 <put_lfn+0xbc>
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	79fa      	ldrb	r2, [r7, #7]
 800ab34:	701a      	strb	r2, [r3, #0]
}
 800ab36:	bf00      	nop
 800ab38:	3720      	adds	r7, #32
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800eccc 	.word	0x0800eccc

0800ab44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b08c      	sub	sp, #48	@ 0x30
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ab52:	220b      	movs	r2, #11
 800ab54:	68b9      	ldr	r1, [r7, #8]
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f7fe fec6 	bl	80098e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	d92b      	bls.n	800abba <gen_numname+0x76>
		sr = seq;
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ab66:	e022      	b.n	800abae <gen_numname+0x6a>
			wc = *lfn++;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	1c9a      	adds	r2, r3, #2
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800ab72:	2300      	movs	r3, #0
 800ab74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab76:	e017      	b.n	800aba8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	005a      	lsls	r2, r3, #1
 800ab7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab7e:	f003 0301 	and.w	r3, r3, #1
 800ab82:	4413      	add	r3, r2
 800ab84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ab86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab88:	085b      	lsrs	r3, r3, #1
 800ab8a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d005      	beq.n	800aba2 <gen_numname+0x5e>
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ab9c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800aba0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800aba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba4:	3301      	adds	r3, #1
 800aba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	d9e4      	bls.n	800ab78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1d8      	bne.n	800ab68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800abba:	2307      	movs	r3, #7
 800abbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f003 030f 	and.w	r3, r3, #15
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	3330      	adds	r3, #48	@ 0x30
 800abca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800abce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abd2:	2b39      	cmp	r3, #57	@ 0x39
 800abd4:	d904      	bls.n	800abe0 <gen_numname+0x9c>
 800abd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800abda:	3307      	adds	r3, #7
 800abdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800abe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe2:	1e5a      	subs	r2, r3, #1
 800abe4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800abe6:	3330      	adds	r3, #48	@ 0x30
 800abe8:	443b      	add	r3, r7
 800abea:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800abee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1df      	bne.n	800abbe <gen_numname+0x7a>
	ns[i] = '~';
 800abfe:	f107 0214 	add.w	r2, r7, #20
 800ac02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac04:	4413      	add	r3, r2
 800ac06:	227e      	movs	r2, #126	@ 0x7e
 800ac08:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac0e:	e002      	b.n	800ac16 <gen_numname+0xd2>
 800ac10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac12:	3301      	adds	r3, #1
 800ac14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d205      	bcs.n	800ac2a <gen_numname+0xe6>
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	4413      	add	r3, r2
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b20      	cmp	r3, #32
 800ac28:	d1f2      	bne.n	800ac10 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ac2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2c:	2b07      	cmp	r3, #7
 800ac2e:	d807      	bhi.n	800ac40 <gen_numname+0xfc>
 800ac30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ac36:	3330      	adds	r3, #48	@ 0x30
 800ac38:	443b      	add	r3, r7
 800ac3a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ac3e:	e000      	b.n	800ac42 <gen_numname+0xfe>
 800ac40:	2120      	movs	r1, #32
 800ac42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	627a      	str	r2, [r7, #36]	@ 0x24
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	460a      	mov	r2, r1
 800ac4e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	2b07      	cmp	r3, #7
 800ac54:	d9e9      	bls.n	800ac2a <gen_numname+0xe6>
}
 800ac56:	bf00      	nop
 800ac58:	bf00      	nop
 800ac5a:	3730      	adds	r7, #48	@ 0x30
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ac6c:	230b      	movs	r3, #11
 800ac6e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	0852      	lsrs	r2, r2, #1
 800ac76:	01db      	lsls	r3, r3, #7
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	1c59      	adds	r1, r3, #1
 800ac80:	6079      	str	r1, [r7, #4]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	4413      	add	r3, r2
 800ac86:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	60bb      	str	r3, [r7, #8]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1ed      	bne.n	800ac70 <sum_sfn+0x10>
	return sum;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800acac:	2304      	movs	r3, #4
 800acae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800acb6:	23ff      	movs	r3, #255	@ 0xff
 800acb8:	757b      	strb	r3, [r7, #21]
 800acba:	23ff      	movs	r3, #255	@ 0xff
 800acbc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800acbe:	e081      	b.n	800adc4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	69db      	ldr	r3, [r3, #28]
 800acc4:	4619      	mov	r1, r3
 800acc6:	6938      	ldr	r0, [r7, #16]
 800acc8:	f7ff f83c 	bl	8009d44 <move_window>
 800accc:	4603      	mov	r3, r0
 800acce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800acd0:	7dfb      	ldrb	r3, [r7, #23]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d17c      	bne.n	800add0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800acde:	7dbb      	ldrb	r3, [r7, #22]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ace4:	2304      	movs	r3, #4
 800ace6:	75fb      	strb	r3, [r7, #23]
 800ace8:	e077      	b.n	800adda <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	330b      	adds	r3, #11
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acf6:	73fb      	strb	r3, [r7, #15]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	7bfa      	ldrb	r2, [r7, #15]
 800acfc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800acfe:	7dbb      	ldrb	r3, [r7, #22]
 800ad00:	2be5      	cmp	r3, #229	@ 0xe5
 800ad02:	d00e      	beq.n	800ad22 <dir_read+0x80>
 800ad04:	7dbb      	ldrb	r3, [r7, #22]
 800ad06:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad08:	d00b      	beq.n	800ad22 <dir_read+0x80>
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	f023 0320 	bic.w	r3, r3, #32
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	bf0c      	ite	eq
 800ad14:	2301      	moveq	r3, #1
 800ad16:	2300      	movne	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d002      	beq.n	800ad28 <dir_read+0x86>
				ord = 0xFF;
 800ad22:	23ff      	movs	r3, #255	@ 0xff
 800ad24:	757b      	strb	r3, [r7, #21]
 800ad26:	e044      	b.n	800adb2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
 800ad2a:	2b0f      	cmp	r3, #15
 800ad2c:	d12f      	bne.n	800ad8e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ad2e:	7dbb      	ldrb	r3, [r7, #22]
 800ad30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00d      	beq.n	800ad54 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	7b5b      	ldrb	r3, [r3, #13]
 800ad3e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ad40:	7dbb      	ldrb	r3, [r7, #22]
 800ad42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad46:	75bb      	strb	r3, [r7, #22]
 800ad48:	7dbb      	ldrb	r3, [r7, #22]
 800ad4a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	695a      	ldr	r2, [r3, #20]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ad54:	7dba      	ldrb	r2, [r7, #22]
 800ad56:	7d7b      	ldrb	r3, [r7, #21]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d115      	bne.n	800ad88 <dir_read+0xe6>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	330d      	adds	r3, #13
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	7d3a      	ldrb	r2, [r7, #20]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d10e      	bne.n	800ad88 <dir_read+0xe6>
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	691a      	ldr	r2, [r3, #16]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	4619      	mov	r1, r3
 800ad74:	4610      	mov	r0, r2
 800ad76:	f7ff fe19 	bl	800a9ac <pick_lfn>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <dir_read+0xe6>
 800ad80:	7d7b      	ldrb	r3, [r7, #21]
 800ad82:	3b01      	subs	r3, #1
 800ad84:	b2db      	uxtb	r3, r3
 800ad86:	e000      	b.n	800ad8a <dir_read+0xe8>
 800ad88:	23ff      	movs	r3, #255	@ 0xff
 800ad8a:	757b      	strb	r3, [r7, #21]
 800ad8c:	e011      	b.n	800adb2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ad8e:	7d7b      	ldrb	r3, [r7, #21]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d109      	bne.n	800ada8 <dir_read+0x106>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7ff ff61 	bl	800ac60 <sum_sfn>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	461a      	mov	r2, r3
 800ada2:	7d3b      	ldrb	r3, [r7, #20]
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d015      	beq.n	800add4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f04f 32ff 	mov.w	r2, #4294967295
 800adae:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800adb0:	e010      	b.n	800add4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800adb2:	2100      	movs	r1, #0
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff fc2d 	bl	800a614 <dir_next>
 800adba:	4603      	mov	r3, r0
 800adbc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800adbe:	7dfb      	ldrb	r3, [r7, #23]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d109      	bne.n	800add8 <dir_read+0x136>
	while (dp->sect) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f47f af79 	bne.w	800acc0 <dir_read+0x1e>
 800adce:	e004      	b.n	800adda <dir_read+0x138>
		if (res != FR_OK) break;
 800add0:	bf00      	nop
 800add2:	e002      	b.n	800adda <dir_read+0x138>
					break;
 800add4:	bf00      	nop
 800add6:	e000      	b.n	800adda <dir_read+0x138>
		if (res != FR_OK) break;
 800add8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <dir_read+0x144>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	61da      	str	r2, [r3, #28]
	return res;
 800ade6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800adfe:	2100      	movs	r1, #0
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff fb7e 	bl	800a502 <dir_sdi>
 800ae06:	4603      	mov	r3, r0
 800ae08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <dir_find+0x24>
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
 800ae12:	e0a9      	b.n	800af68 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae14:	23ff      	movs	r3, #255	@ 0xff
 800ae16:	753b      	strb	r3, [r7, #20]
 800ae18:	7d3b      	ldrb	r3, [r7, #20]
 800ae1a:	757b      	strb	r3, [r7, #21]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae22:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6938      	ldr	r0, [r7, #16]
 800ae2c:	f7fe ff8a 	bl	8009d44 <move_window>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f040 8090 	bne.w	800af5c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6a1b      	ldr	r3, [r3, #32]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae44:	7dbb      	ldrb	r3, [r7, #22]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d102      	bne.n	800ae50 <dir_find+0x60>
 800ae4a:	2304      	movs	r3, #4
 800ae4c:	75fb      	strb	r3, [r7, #23]
 800ae4e:	e08a      	b.n	800af66 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	330b      	adds	r3, #11
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae5c:	73fb      	strb	r3, [r7, #15]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	7bfa      	ldrb	r2, [r7, #15]
 800ae62:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ae64:	7dbb      	ldrb	r3, [r7, #22]
 800ae66:	2be5      	cmp	r3, #229	@ 0xe5
 800ae68:	d007      	beq.n	800ae7a <dir_find+0x8a>
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
 800ae6c:	f003 0308 	and.w	r3, r3, #8
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d009      	beq.n	800ae88 <dir_find+0x98>
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	2b0f      	cmp	r3, #15
 800ae78:	d006      	beq.n	800ae88 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae7a:	23ff      	movs	r3, #255	@ 0xff
 800ae7c:	757b      	strb	r3, [r7, #21]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f04f 32ff 	mov.w	r2, #4294967295
 800ae84:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae86:	e05e      	b.n	800af46 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	2b0f      	cmp	r3, #15
 800ae8c:	d136      	bne.n	800aefc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d154      	bne.n	800af46 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae9c:	7dbb      	ldrb	r3, [r7, #22]
 800ae9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00d      	beq.n	800aec2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	7b5b      	ldrb	r3, [r3, #13]
 800aeac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800aeae:	7dbb      	ldrb	r3, [r7, #22]
 800aeb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeb4:	75bb      	strb	r3, [r7, #22]
 800aeb6:	7dbb      	ldrb	r3, [r7, #22]
 800aeb8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	695a      	ldr	r2, [r3, #20]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aec2:	7dba      	ldrb	r2, [r7, #22]
 800aec4:	7d7b      	ldrb	r3, [r7, #21]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d115      	bne.n	800aef6 <dir_find+0x106>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	330d      	adds	r3, #13
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	7d3a      	ldrb	r2, [r7, #20]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d10e      	bne.n	800aef6 <dir_find+0x106>
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	691a      	ldr	r2, [r3, #16]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f7ff fcf2 	bl	800a8cc <cmp_lfn>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <dir_find+0x106>
 800aeee:	7d7b      	ldrb	r3, [r7, #21]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	e000      	b.n	800aef8 <dir_find+0x108>
 800aef6:	23ff      	movs	r3, #255	@ 0xff
 800aef8:	757b      	strb	r3, [r7, #21]
 800aefa:	e024      	b.n	800af46 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aefc:	7d7b      	ldrb	r3, [r7, #21]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d109      	bne.n	800af16 <dir_find+0x126>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff feaa 	bl	800ac60 <sum_sfn>
 800af0c:	4603      	mov	r3, r0
 800af0e:	461a      	mov	r2, r3
 800af10:	7d3b      	ldrb	r3, [r7, #20]
 800af12:	4293      	cmp	r3, r2
 800af14:	d024      	beq.n	800af60 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10a      	bne.n	800af3a <dir_find+0x14a>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a18      	ldr	r0, [r3, #32]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3324      	adds	r3, #36	@ 0x24
 800af2c:	220b      	movs	r2, #11
 800af2e:	4619      	mov	r1, r3
 800af30:	f7fe fd16 	bl	8009960 <mem_cmp>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d014      	beq.n	800af64 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af3a:	23ff      	movs	r3, #255	@ 0xff
 800af3c:	757b      	strb	r3, [r7, #21]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f04f 32ff 	mov.w	r2, #4294967295
 800af44:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800af46:	2100      	movs	r1, #0
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff fb63 	bl	800a614 <dir_next>
 800af4e:	4603      	mov	r3, r0
 800af50:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800af52:	7dfb      	ldrb	r3, [r7, #23]
 800af54:	2b00      	cmp	r3, #0
 800af56:	f43f af65 	beq.w	800ae24 <dir_find+0x34>
 800af5a:	e004      	b.n	800af66 <dir_find+0x176>
		if (res != FR_OK) break;
 800af5c:	bf00      	nop
 800af5e:	e002      	b.n	800af66 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af60:	bf00      	nop
 800af62:	e000      	b.n	800af66 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af64:	bf00      	nop

	return res;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08c      	sub	sp, #48	@ 0x30
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800af84:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d001      	beq.n	800af90 <dir_register+0x20>
 800af8c:	2306      	movs	r3, #6
 800af8e:	e0e0      	b.n	800b152 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800af90:	2300      	movs	r3, #0
 800af92:	627b      	str	r3, [r7, #36]	@ 0x24
 800af94:	e002      	b.n	800af9c <dir_register+0x2c>
 800af96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af98:	3301      	adds	r3, #1
 800af9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800af9c:	69fb      	ldr	r3, [r7, #28]
 800af9e:	691a      	ldr	r2, [r3, #16]
 800afa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	4413      	add	r3, r2
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1f4      	bne.n	800af96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800afb2:	f107 030c 	add.w	r3, r7, #12
 800afb6:	220c      	movs	r2, #12
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe fc95 	bl	80098e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
 800afc0:	f003 0301 	and.w	r3, r3, #1
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d032      	beq.n	800b02e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2240      	movs	r2, #64	@ 0x40
 800afcc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800afd0:	2301      	movs	r3, #1
 800afd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afd4:	e016      	b.n	800b004 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	691a      	ldr	r2, [r3, #16]
 800afe0:	f107 010c 	add.w	r1, r7, #12
 800afe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe6:	f7ff fdad 	bl	800ab44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff ff00 	bl	800adf0 <dir_find>
 800aff0:	4603      	mov	r3, r0
 800aff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800aff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800affa:	2b00      	cmp	r3, #0
 800affc:	d106      	bne.n	800b00c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800affe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b000:	3301      	adds	r3, #1
 800b002:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b006:	2b63      	cmp	r3, #99	@ 0x63
 800b008:	d9e5      	bls.n	800afd6 <dir_register+0x66>
 800b00a:	e000      	b.n	800b00e <dir_register+0x9e>
			if (res != FR_OK) break;
 800b00c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b010:	2b64      	cmp	r3, #100	@ 0x64
 800b012:	d101      	bne.n	800b018 <dir_register+0xa8>
 800b014:	2307      	movs	r3, #7
 800b016:	e09c      	b.n	800b152 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b01c:	2b04      	cmp	r3, #4
 800b01e:	d002      	beq.n	800b026 <dir_register+0xb6>
 800b020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b024:	e095      	b.n	800b152 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b026:	7dfa      	ldrb	r2, [r7, #23]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d007      	beq.n	800b048 <dir_register+0xd8>
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	330c      	adds	r3, #12
 800b03c:	4a47      	ldr	r2, [pc, #284]	@ (800b15c <dir_register+0x1ec>)
 800b03e:	fba2 2303 	umull	r2, r3, r2, r3
 800b042:	089b      	lsrs	r3, r3, #2
 800b044:	3301      	adds	r3, #1
 800b046:	e000      	b.n	800b04a <dir_register+0xda>
 800b048:	2301      	movs	r3, #1
 800b04a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b04c:	6a39      	ldr	r1, [r7, #32]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f7ff fbb6 	bl	800a7c0 <dir_alloc>
 800b054:	4603      	mov	r3, r0
 800b056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b05a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d148      	bne.n	800b0f4 <dir_register+0x184>
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	3b01      	subs	r3, #1
 800b066:	623b      	str	r3, [r7, #32]
 800b068:	6a3b      	ldr	r3, [r7, #32]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d042      	beq.n	800b0f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	695a      	ldr	r2, [r3, #20]
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	015b      	lsls	r3, r3, #5
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7ff fa41 	bl	800a502 <dir_sdi>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d132      	bne.n	800b0f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3324      	adds	r3, #36	@ 0x24
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff fde4 	bl	800ac60 <sum_sfn>
 800b098:	4603      	mov	r3, r0
 800b09a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	69db      	ldr	r3, [r3, #28]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	69f8      	ldr	r0, [r7, #28]
 800b0a4:	f7fe fe4e 	bl	8009d44 <move_window>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b0ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d11d      	bne.n	800b0f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	6918      	ldr	r0, [r3, #16]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a19      	ldr	r1, [r3, #32]
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	b2da      	uxtb	r2, r3
 800b0c2:	7efb      	ldrb	r3, [r7, #27]
 800b0c4:	f7ff fcd6 	bl	800aa74 <put_lfn>
				fs->wflag = 1;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff fa9f 	bl	800a614 <dir_next>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b0dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d107      	bne.n	800b0f4 <dir_register+0x184>
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	623b      	str	r3, [r7, #32]
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1d5      	bne.n	800b09c <dir_register+0x12c>
 800b0f0:	e000      	b.n	800b0f4 <dir_register+0x184>
				if (res != FR_OK) break;
 800b0f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b0f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d128      	bne.n	800b14e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	69db      	ldr	r3, [r3, #28]
 800b100:	4619      	mov	r1, r3
 800b102:	69f8      	ldr	r0, [r7, #28]
 800b104:	f7fe fe1e 	bl	8009d44 <move_window>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b10e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b112:	2b00      	cmp	r3, #0
 800b114:	d11b      	bne.n	800b14e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	2220      	movs	r2, #32
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe fc03 	bl	800992a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a18      	ldr	r0, [r3, #32]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3324      	adds	r3, #36	@ 0x24
 800b12c:	220b      	movs	r2, #11
 800b12e:	4619      	mov	r1, r3
 800b130:	f7fe fbda 	bl	80098e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	330c      	adds	r3, #12
 800b140:	f002 0218 	and.w	r2, r2, #24
 800b144:	b2d2      	uxtb	r2, r2
 800b146:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2201      	movs	r2, #1
 800b14c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b14e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b152:	4618      	mov	r0, r3
 800b154:	3730      	adds	r7, #48	@ 0x30
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	4ec4ec4f 	.word	0x4ec4ec4f

0800b160 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b088      	sub	sp, #32
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	2200      	movs	r2, #0
 800b174:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	69db      	ldr	r3, [r3, #28]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 80ca 	beq.w	800b314 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b188:	d032      	beq.n	800b1f0 <get_fileinfo+0x90>
			i = j = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b192:	e01b      	b.n	800b1cc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b194:	89fb      	ldrh	r3, [r7, #14]
 800b196:	2100      	movs	r1, #0
 800b198:	4618      	mov	r0, r3
 800b19a:	f001 fd1f 	bl	800cbdc <ff_convert>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b1a2:	89fb      	ldrh	r3, [r7, #14]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d102      	bne.n	800b1ae <get_fileinfo+0x4e>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61fb      	str	r3, [r7, #28]
 800b1ac:	e01a      	b.n	800b1e4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	2bfe      	cmp	r3, #254	@ 0xfe
 800b1b2:	d902      	bls.n	800b1ba <get_fileinfo+0x5a>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61fb      	str	r3, [r7, #28]
 800b1b8:	e014      	b.n	800b1e4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b1ba:	69fb      	ldr	r3, [r7, #28]
 800b1bc:	1c5a      	adds	r2, r3, #1
 800b1be:	61fa      	str	r2, [r7, #28]
 800b1c0:	89fa      	ldrh	r2, [r7, #14]
 800b1c2:	b2d1      	uxtb	r1, r2
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	460a      	mov	r2, r1
 800b1ca:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	691a      	ldr	r2, [r3, #16]
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	1c59      	adds	r1, r3, #1
 800b1d4:	61b9      	str	r1, [r7, #24]
 800b1d6:	005b      	lsls	r3, r3, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	881b      	ldrh	r3, [r3, #0]
 800b1dc:	81fb      	strh	r3, [r7, #14]
 800b1de:	89fb      	ldrh	r3, [r7, #14]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1d7      	bne.n	800b194 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	3316      	adds	r3, #22
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61bb      	str	r3, [r7, #24]
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	3316      	adds	r3, #22
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b204:	e04d      	b.n	800b2a2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1a      	ldr	r2, [r3, #32]
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	1c59      	adds	r1, r3, #1
 800b20e:	61f9      	str	r1, [r7, #28]
 800b210:	4413      	add	r3, r2
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b216:	7dfb      	ldrb	r3, [r7, #23]
 800b218:	2b20      	cmp	r3, #32
 800b21a:	d041      	beq.n	800b2a0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
 800b21e:	2b05      	cmp	r3, #5
 800b220:	d101      	bne.n	800b226 <get_fileinfo+0xc6>
 800b222:	23e5      	movs	r3, #229	@ 0xe5
 800b224:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	2b09      	cmp	r3, #9
 800b22a:	d10f      	bne.n	800b24c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800b22c:	89bb      	ldrh	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d105      	bne.n	800b23e <get_fileinfo+0xde>
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	4413      	add	r3, r2
 800b238:	3316      	adds	r3, #22
 800b23a:	222e      	movs	r2, #46	@ 0x2e
 800b23c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	1c5a      	adds	r2, r3, #1
 800b242:	61ba      	str	r2, [r7, #24]
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	4413      	add	r3, r2
 800b248:	222e      	movs	r2, #46	@ 0x2e
 800b24a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b24c:	683a      	ldr	r2, [r7, #0]
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	4413      	add	r3, r2
 800b252:	3309      	adds	r3, #9
 800b254:	7dfa      	ldrb	r2, [r7, #23]
 800b256:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b258:	89bb      	ldrh	r3, [r7, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11c      	bne.n	800b298 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
 800b260:	2b40      	cmp	r3, #64	@ 0x40
 800b262:	d913      	bls.n	800b28c <get_fileinfo+0x12c>
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	2b5a      	cmp	r3, #90	@ 0x5a
 800b268:	d810      	bhi.n	800b28c <get_fileinfo+0x12c>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	330c      	adds	r3, #12
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	2b08      	cmp	r3, #8
 800b278:	d901      	bls.n	800b27e <get_fileinfo+0x11e>
 800b27a:	2310      	movs	r3, #16
 800b27c:	e000      	b.n	800b280 <get_fileinfo+0x120>
 800b27e:	2308      	movs	r3, #8
 800b280:	4013      	ands	r3, r2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d002      	beq.n	800b28c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	3320      	adds	r3, #32
 800b28a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b28c:	683a      	ldr	r2, [r7, #0]
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	4413      	add	r3, r2
 800b292:	3316      	adds	r3, #22
 800b294:	7dfa      	ldrb	r2, [r7, #23]
 800b296:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	3301      	adds	r3, #1
 800b29c:	61bb      	str	r3, [r7, #24]
 800b29e:	e000      	b.n	800b2a2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b2a0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	2b0a      	cmp	r3, #10
 800b2a6:	d9ae      	bls.n	800b206 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b2a8:	89bb      	ldrh	r3, [r7, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10d      	bne.n	800b2ca <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	3316      	adds	r3, #22
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a1b      	ldr	r3, [r3, #32]
 800b2be:	330c      	adds	r3, #12
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d101      	bne.n	800b2ca <get_fileinfo+0x16a>
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3309      	adds	r3, #9
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	7ada      	ldrb	r2, [r3, #11]
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a1b      	ldr	r3, [r3, #32]
 800b2e4:	331c      	adds	r3, #28
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fe fa94 	bl	8009814 <ld_dword>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	3316      	adds	r3, #22
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7fe fa8b 	bl	8009814 <ld_dword>
 800b2fe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	b29a      	uxth	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	80da      	strh	r2, [r3, #6]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	0c1b      	lsrs	r3, r3, #16
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	809a      	strh	r2, [r3, #4]
 800b312:	e000      	b.n	800b316 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b314:	bf00      	nop
}
 800b316:	3720      	adds	r7, #32
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08a      	sub	sp, #40	@ 0x28
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	613b      	str	r3, [r7, #16]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	2300      	movs	r3, #0
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	1c5a      	adds	r2, r3, #1
 800b340:	61ba      	str	r2, [r7, #24]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	4413      	add	r3, r2
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b34a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b34c:	2b1f      	cmp	r3, #31
 800b34e:	d940      	bls.n	800b3d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b352:	2b2f      	cmp	r3, #47	@ 0x2f
 800b354:	d006      	beq.n	800b364 <create_name+0x48>
 800b356:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b358:	2b5c      	cmp	r3, #92	@ 0x5c
 800b35a:	d110      	bne.n	800b37e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b35c:	e002      	b.n	800b364 <create_name+0x48>
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	3301      	adds	r3, #1
 800b362:	61bb      	str	r3, [r7, #24]
 800b364:	693a      	ldr	r2, [r7, #16]
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	4413      	add	r3, r2
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b36e:	d0f6      	beq.n	800b35e <create_name+0x42>
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	4413      	add	r3, r2
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	2b5c      	cmp	r3, #92	@ 0x5c
 800b37a:	d0f0      	beq.n	800b35e <create_name+0x42>
			break;
 800b37c:	e02a      	b.n	800b3d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2bfe      	cmp	r3, #254	@ 0xfe
 800b382:	d901      	bls.n	800b388 <create_name+0x6c>
 800b384:	2306      	movs	r3, #6
 800b386:	e17d      	b.n	800b684 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b388:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b38e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b390:	2101      	movs	r1, #1
 800b392:	4618      	mov	r0, r3
 800b394:	f001 fc22 	bl	800cbdc <ff_convert>
 800b398:	4603      	mov	r3, r0
 800b39a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b39c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <create_name+0x8a>
 800b3a2:	2306      	movs	r3, #6
 800b3a4:	e16e      	b.n	800b684 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b3a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3aa:	d809      	bhi.n	800b3c0 <create_name+0xa4>
 800b3ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	488d      	ldr	r0, [pc, #564]	@ (800b5e8 <create_name+0x2cc>)
 800b3b2:	f7fe fafc 	bl	80099ae <chk_chr>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <create_name+0xa4>
 800b3bc:	2306      	movs	r3, #6
 800b3be:	e161      	b.n	800b684 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	617a      	str	r2, [r7, #20]
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b3ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b3d0:	e7b4      	b.n	800b33c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b3d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	441a      	add	r2, r3
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b3de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b3e0:	2b1f      	cmp	r3, #31
 800b3e2:	d801      	bhi.n	800b3e8 <create_name+0xcc>
 800b3e4:	2304      	movs	r3, #4
 800b3e6:	e000      	b.n	800b3ea <create_name+0xce>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b3ee:	e011      	b.n	800b414 <create_name+0xf8>
		w = lfn[di - 1];
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	005b      	lsls	r3, r3, #1
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800b402:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b404:	2b20      	cmp	r3, #32
 800b406:	d002      	beq.n	800b40e <create_name+0xf2>
 800b408:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b40a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b40c:	d106      	bne.n	800b41c <create_name+0x100>
		di--;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	3b01      	subs	r3, #1
 800b412:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1ea      	bne.n	800b3f0 <create_name+0xd4>
 800b41a:	e000      	b.n	800b41e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b41c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	4413      	add	r3, r2
 800b426:	2200      	movs	r2, #0
 800b428:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <create_name+0x118>
 800b430:	2306      	movs	r3, #6
 800b432:	e127      	b.n	800b684 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	3324      	adds	r3, #36	@ 0x24
 800b438:	220b      	movs	r2, #11
 800b43a:	2120      	movs	r1, #32
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fe fa74 	bl	800992a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b442:	2300      	movs	r3, #0
 800b444:	61bb      	str	r3, [r7, #24]
 800b446:	e002      	b.n	800b44e <create_name+0x132>
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	3301      	adds	r3, #1
 800b44c:	61bb      	str	r3, [r7, #24]
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	2b20      	cmp	r3, #32
 800b45a:	d0f5      	beq.n	800b448 <create_name+0x12c>
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	2b2e      	cmp	r3, #46	@ 0x2e
 800b468:	d0ee      	beq.n	800b448 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d009      	beq.n	800b484 <create_name+0x168>
 800b470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b474:	f043 0303 	orr.w	r3, r3, #3
 800b478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b47c:	e002      	b.n	800b484 <create_name+0x168>
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	3b01      	subs	r3, #1
 800b482:	617b      	str	r3, [r7, #20]
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <create_name+0x182>
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b490:	3b01      	subs	r3, #1
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4413      	add	r3, r2
 800b498:	881b      	ldrh	r3, [r3, #0]
 800b49a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b49c:	d1ef      	bne.n	800b47e <create_name+0x162>

	i = b = 0; ni = 8;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	623b      	str	r3, [r7, #32]
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	61ba      	str	r2, [r7, #24]
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b4bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 8090 	beq.w	800b5e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b4c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4c6:	2b20      	cmp	r3, #32
 800b4c8:	d006      	beq.n	800b4d8 <create_name+0x1bc>
 800b4ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4ce:	d10a      	bne.n	800b4e6 <create_name+0x1ca>
 800b4d0:	69ba      	ldr	r2, [r7, #24]
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d006      	beq.n	800b4e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4dc:	f043 0303 	orr.w	r3, r3, #3
 800b4e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b4e4:	e07d      	b.n	800b5e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b4e6:	6a3a      	ldr	r2, [r7, #32]
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d203      	bcs.n	800b4f6 <create_name+0x1da>
 800b4ee:	69ba      	ldr	r2, [r7, #24]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d123      	bne.n	800b53e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	2b0b      	cmp	r3, #11
 800b4fa:	d106      	bne.n	800b50a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b4fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b500:	f043 0303 	orr.w	r3, r3, #3
 800b504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b508:	e075      	b.n	800b5f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d005      	beq.n	800b51e <create_name+0x202>
 800b512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b516:	f043 0303 	orr.w	r3, r3, #3
 800b51a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	429a      	cmp	r2, r3
 800b524:	d866      	bhi.n	800b5f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	61bb      	str	r3, [r7, #24]
 800b52a:	2308      	movs	r3, #8
 800b52c:	623b      	str	r3, [r7, #32]
 800b52e:	230b      	movs	r3, #11
 800b530:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b532:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b53c:	e051      	b.n	800b5e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b53e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b540:	2b7f      	cmp	r3, #127	@ 0x7f
 800b542:	d914      	bls.n	800b56e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b544:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b546:	2100      	movs	r1, #0
 800b548:	4618      	mov	r0, r3
 800b54a:	f001 fb47 	bl	800cbdc <ff_convert>
 800b54e:	4603      	mov	r3, r0
 800b550:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b552:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b554:	2b00      	cmp	r3, #0
 800b556:	d004      	beq.n	800b562 <create_name+0x246>
 800b558:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b55a:	3b80      	subs	r3, #128	@ 0x80
 800b55c:	4a23      	ldr	r2, [pc, #140]	@ (800b5ec <create_name+0x2d0>)
 800b55e:	5cd3      	ldrb	r3, [r2, r3]
 800b560:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b566:	f043 0302 	orr.w	r3, r3, #2
 800b56a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b56e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b570:	2b00      	cmp	r3, #0
 800b572:	d007      	beq.n	800b584 <create_name+0x268>
 800b574:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b576:	4619      	mov	r1, r3
 800b578:	481d      	ldr	r0, [pc, #116]	@ (800b5f0 <create_name+0x2d4>)
 800b57a:	f7fe fa18 	bl	80099ae <chk_chr>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d008      	beq.n	800b596 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b584:	235f      	movs	r3, #95	@ 0x5f
 800b586:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b588:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b58c:	f043 0303 	orr.w	r3, r3, #3
 800b590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b594:	e01b      	b.n	800b5ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b596:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b598:	2b40      	cmp	r3, #64	@ 0x40
 800b59a:	d909      	bls.n	800b5b0 <create_name+0x294>
 800b59c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b59e:	2b5a      	cmp	r3, #90	@ 0x5a
 800b5a0:	d806      	bhi.n	800b5b0 <create_name+0x294>
					b |= 2;
 800b5a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5a6:	f043 0302 	orr.w	r3, r3, #2
 800b5aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5ae:	e00e      	b.n	800b5ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b5b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5b2:	2b60      	cmp	r3, #96	@ 0x60
 800b5b4:	d90b      	bls.n	800b5ce <create_name+0x2b2>
 800b5b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5b8:	2b7a      	cmp	r3, #122	@ 0x7a
 800b5ba:	d808      	bhi.n	800b5ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b5bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b5c0:	f043 0301 	orr.w	r3, r3, #1
 800b5c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800b5c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b5ca:	3b20      	subs	r3, #32
 800b5cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	623a      	str	r2, [r7, #32]
 800b5d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b5d6:	b2d1      	uxtb	r1, r2
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	4413      	add	r3, r2
 800b5dc:	460a      	mov	r2, r1
 800b5de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b5e2:	e763      	b.n	800b4ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b5e4:	bf00      	nop
 800b5e6:	e006      	b.n	800b5f6 <create_name+0x2da>
 800b5e8:	0800e464 	.word	0x0800e464
 800b5ec:	0800ec4c 	.word	0x0800ec4c
 800b5f0:	0800e470 	.word	0x0800e470
			if (si > di) break;			/* No extension */
 800b5f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5fc:	2be5      	cmp	r3, #229	@ 0xe5
 800b5fe:	d103      	bne.n	800b608 <create_name+0x2ec>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2205      	movs	r2, #5
 800b604:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2b08      	cmp	r3, #8
 800b60c:	d104      	bne.n	800b618 <create_name+0x2fc>
 800b60e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b612:	009b      	lsls	r3, r3, #2
 800b614:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b61c:	f003 030c 	and.w	r3, r3, #12
 800b620:	2b0c      	cmp	r3, #12
 800b622:	d005      	beq.n	800b630 <create_name+0x314>
 800b624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d105      	bne.n	800b63c <create_name+0x320>
 800b630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b634:	f043 0302 	orr.w	r3, r3, #2
 800b638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b63c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b640:	f003 0302 	and.w	r3, r3, #2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d117      	bne.n	800b678 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b648:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b64c:	f003 0303 	and.w	r3, r3, #3
 800b650:	2b01      	cmp	r3, #1
 800b652:	d105      	bne.n	800b660 <create_name+0x344>
 800b654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b658:	f043 0310 	orr.w	r3, r3, #16
 800b65c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b660:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b664:	f003 030c 	and.w	r3, r3, #12
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d105      	bne.n	800b678 <create_name+0x35c>
 800b66c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b670:	f043 0308 	orr.w	r3, r3, #8
 800b674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b67e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800b682:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b684:	4618      	mov	r0, r3
 800b686:	3728      	adds	r7, #40	@ 0x28
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b6a0:	e002      	b.n	800b6a8 <follow_path+0x1c>
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	603b      	str	r3, [r7, #0]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	2b2f      	cmp	r3, #47	@ 0x2f
 800b6ae:	d0f8      	beq.n	800b6a2 <follow_path+0x16>
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b6b6:	d0f4      	beq.n	800b6a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	2b1f      	cmp	r3, #31
 800b6c4:	d80a      	bhi.n	800b6dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2280      	movs	r2, #128	@ 0x80
 800b6ca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7fe ff16 	bl	800a502 <dir_sdi>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	75fb      	strb	r3, [r7, #23]
 800b6da:	e048      	b.n	800b76e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b6dc:	463b      	mov	r3, r7
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff fe1b 	bl	800b31c <create_name>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d139      	bne.n	800b764 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f7ff fb7d 	bl	800adf0 <dir_find>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b700:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00a      	beq.n	800b71e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b708:	7dfb      	ldrb	r3, [r7, #23]
 800b70a:	2b04      	cmp	r3, #4
 800b70c:	d12c      	bne.n	800b768 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b70e:	7afb      	ldrb	r3, [r7, #11]
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d127      	bne.n	800b768 <follow_path+0xdc>
 800b718:	2305      	movs	r3, #5
 800b71a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b71c:	e024      	b.n	800b768 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b71e:	7afb      	ldrb	r3, [r7, #11]
 800b720:	f003 0304 	and.w	r3, r3, #4
 800b724:	2b00      	cmp	r3, #0
 800b726:	d121      	bne.n	800b76c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	799b      	ldrb	r3, [r3, #6]
 800b72c:	f003 0310 	and.w	r3, r3, #16
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b734:	2305      	movs	r3, #5
 800b736:	75fb      	strb	r3, [r7, #23]
 800b738:	e019      	b.n	800b76e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	695b      	ldr	r3, [r3, #20]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	8992      	ldrh	r2, [r2, #12]
 800b748:	fbb3 f0f2 	udiv	r0, r3, r2
 800b74c:	fb00 f202 	mul.w	r2, r0, r2
 800b750:	1a9b      	subs	r3, r3, r2
 800b752:	440b      	add	r3, r1
 800b754:	4619      	mov	r1, r3
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff f879 	bl	800a84e <ld_clust>
 800b75c:	4602      	mov	r2, r0
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b762:	e7bb      	b.n	800b6dc <follow_path+0x50>
			if (res != FR_OK) break;
 800b764:	bf00      	nop
 800b766:	e002      	b.n	800b76e <follow_path+0xe2>
				break;
 800b768:	bf00      	nop
 800b76a:	e000      	b.n	800b76e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b76c:	bf00      	nop
			}
		}
	}

	return res;
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3718      	adds	r7, #24
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b778:	b480      	push	{r7}
 800b77a:	b087      	sub	sp, #28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b780:	f04f 33ff 	mov.w	r3, #4294967295
 800b784:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d031      	beq.n	800b7f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	617b      	str	r3, [r7, #20]
 800b794:	e002      	b.n	800b79c <get_ldnumber+0x24>
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	3301      	adds	r3, #1
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	2b1f      	cmp	r3, #31
 800b7a2:	d903      	bls.n	800b7ac <get_ldnumber+0x34>
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b3a      	cmp	r3, #58	@ 0x3a
 800b7aa:	d1f4      	bne.n	800b796 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	2b3a      	cmp	r3, #58	@ 0x3a
 800b7b2:	d11c      	bne.n	800b7ee <get_ldnumber+0x76>
			tp = *path;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	60fa      	str	r2, [r7, #12]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	3b30      	subs	r3, #48	@ 0x30
 800b7c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b09      	cmp	r3, #9
 800b7ca:	d80e      	bhi.n	800b7ea <get_ldnumber+0x72>
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d10a      	bne.n	800b7ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d107      	bne.n	800b7ea <get_ldnumber+0x72>
					vol = (int)i;
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	617b      	str	r3, [r7, #20]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	e002      	b.n	800b7f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b7f2:	693b      	ldr	r3, [r7, #16]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	371c      	adds	r7, #28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	70da      	strb	r2, [r3, #3]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f04f 32ff 	mov.w	r2, #4294967295
 800b816:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b818:	6839      	ldr	r1, [r7, #0]
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7fe fa92 	bl	8009d44 <move_window>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <check_fs+0x2a>
 800b826:	2304      	movs	r3, #4
 800b828:	e038      	b.n	800b89c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	3338      	adds	r3, #56	@ 0x38
 800b82e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b832:	4618      	mov	r0, r3
 800b834:	f7fd ffd6 	bl	80097e4 <ld_word>
 800b838:	4603      	mov	r3, r0
 800b83a:	461a      	mov	r2, r3
 800b83c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b840:	429a      	cmp	r2, r3
 800b842:	d001      	beq.n	800b848 <check_fs+0x48>
 800b844:	2303      	movs	r3, #3
 800b846:	e029      	b.n	800b89c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b84e:	2be9      	cmp	r3, #233	@ 0xe9
 800b850:	d009      	beq.n	800b866 <check_fs+0x66>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b858:	2beb      	cmp	r3, #235	@ 0xeb
 800b85a:	d11e      	bne.n	800b89a <check_fs+0x9a>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b862:	2b90      	cmp	r3, #144	@ 0x90
 800b864:	d119      	bne.n	800b89a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3338      	adds	r3, #56	@ 0x38
 800b86a:	3336      	adds	r3, #54	@ 0x36
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fd ffd1 	bl	8009814 <ld_dword>
 800b872:	4603      	mov	r3, r0
 800b874:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b878:	4a0a      	ldr	r2, [pc, #40]	@ (800b8a4 <check_fs+0xa4>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d101      	bne.n	800b882 <check_fs+0x82>
 800b87e:	2300      	movs	r3, #0
 800b880:	e00c      	b.n	800b89c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	3338      	adds	r3, #56	@ 0x38
 800b886:	3352      	adds	r3, #82	@ 0x52
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fd ffc3 	bl	8009814 <ld_dword>
 800b88e:	4603      	mov	r3, r0
 800b890:	4a05      	ldr	r2, [pc, #20]	@ (800b8a8 <check_fs+0xa8>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d101      	bne.n	800b89a <check_fs+0x9a>
 800b896:	2300      	movs	r3, #0
 800b898:	e000      	b.n	800b89c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b89a:	2302      	movs	r3, #2
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	00544146 	.word	0x00544146
 800b8a8:	33544146 	.word	0x33544146

0800b8ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b096      	sub	sp, #88	@ 0x58
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff ff59 	bl	800b778 <get_ldnumber>
 800b8c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b8c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	da01      	bge.n	800b8d2 <find_volume+0x26>
 800b8ce:	230b      	movs	r3, #11
 800b8d0:	e265      	b.n	800bd9e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b8d2:	4a9f      	ldr	r2, [pc, #636]	@ (800bb50 <find_volume+0x2a4>)
 800b8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8da:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <find_volume+0x3a>
 800b8e2:	230c      	movs	r3, #12
 800b8e4:	e25b      	b.n	800bd9e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	f023 0301 	bic.w	r3, r3, #1
 800b8f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d01a      	beq.n	800b932 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8fe:	785b      	ldrb	r3, [r3, #1]
 800b900:	4618      	mov	r0, r3
 800b902:	f7fd fecf 	bl	80096a4 <disk_status>
 800b906:	4603      	mov	r3, r0
 800b908:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b90c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10c      	bne.n	800b932 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d007      	beq.n	800b92e <find_volume+0x82>
 800b91e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b922:	f003 0304 	and.w	r3, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b92a:	230a      	movs	r3, #10
 800b92c:	e237      	b.n	800bd9e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b92e:	2300      	movs	r3, #0
 800b930:	e235      	b.n	800bd9e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b934:	2200      	movs	r2, #0
 800b936:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b942:	785b      	ldrb	r3, [r3, #1]
 800b944:	4618      	mov	r0, r3
 800b946:	f7fd fec7 	bl	80096d8 <disk_initialize>
 800b94a:	4603      	mov	r3, r0
 800b94c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b95c:	2303      	movs	r3, #3
 800b95e:	e21e      	b.n	800bd9e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d007      	beq.n	800b976 <find_volume+0xca>
 800b966:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b96a:	f003 0304 	and.w	r3, r3, #4
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b972:	230a      	movs	r3, #10
 800b974:	e213      	b.n	800bd9e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b978:	7858      	ldrb	r0, [r3, #1]
 800b97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97c:	330c      	adds	r3, #12
 800b97e:	461a      	mov	r2, r3
 800b980:	2102      	movs	r1, #2
 800b982:	f7fd ff11 	bl	80097a8 <disk_ioctl>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <find_volume+0xe4>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e206      	b.n	800bd9e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b992:	899b      	ldrh	r3, [r3, #12]
 800b994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b998:	d80d      	bhi.n	800b9b6 <find_volume+0x10a>
 800b99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99c:	899b      	ldrh	r3, [r3, #12]
 800b99e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9a2:	d308      	bcc.n	800b9b6 <find_volume+0x10a>
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	899b      	ldrh	r3, [r3, #12]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ac:	899b      	ldrh	r3, [r3, #12]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	4013      	ands	r3, r2
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <find_volume+0x10e>
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e1f1      	b.n	800bd9e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b9be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b9c2:	f7ff ff1d 	bl	800b800 <check_fs>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b9cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d149      	bne.n	800ba68 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9d8:	e01e      	b.n	800ba18 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9dc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b9e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9e2:	011b      	lsls	r3, r3, #4
 800b9e4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b9e8:	4413      	add	r3, r2
 800b9ea:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ee:	3304      	adds	r3, #4
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d006      	beq.n	800ba04 <find_volume+0x158>
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f8:	3308      	adds	r3, #8
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fd ff0a 	bl	8009814 <ld_dword>
 800ba00:	4602      	mov	r2, r0
 800ba02:	e000      	b.n	800ba06 <find_volume+0x15a>
 800ba04:	2200      	movs	r2, #0
 800ba06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	3358      	adds	r3, #88	@ 0x58
 800ba0c:	443b      	add	r3, r7
 800ba0e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ba12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba14:	3301      	adds	r3, #1
 800ba16:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d9dd      	bls.n	800b9da <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ba1e:	2300      	movs	r3, #0
 800ba20:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ba22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <find_volume+0x182>
 800ba28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ba2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	3358      	adds	r3, #88	@ 0x58
 800ba34:	443b      	add	r3, r7
 800ba36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ba3a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ba3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <find_volume+0x1a2>
 800ba42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba46:	f7ff fedb 	bl	800b800 <check_fs>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	e000      	b.n	800ba50 <find_volume+0x1a4>
 800ba4e:	2303      	movs	r3, #3
 800ba50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ba54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d905      	bls.n	800ba68 <find_volume+0x1bc>
 800ba5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba5e:	3301      	adds	r3, #1
 800ba60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d9e2      	bls.n	800ba2e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ba68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d101      	bne.n	800ba74 <find_volume+0x1c8>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e194      	b.n	800bd9e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ba74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d901      	bls.n	800ba80 <find_volume+0x1d4>
 800ba7c:	230d      	movs	r3, #13
 800ba7e:	e18e      	b.n	800bd9e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ba80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba82:	3338      	adds	r3, #56	@ 0x38
 800ba84:	330b      	adds	r3, #11
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fd feac 	bl	80097e4 <ld_word>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba92:	899b      	ldrh	r3, [r3, #12]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d001      	beq.n	800ba9c <find_volume+0x1f0>
 800ba98:	230d      	movs	r3, #13
 800ba9a:	e180      	b.n	800bd9e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ba9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba9e:	3338      	adds	r3, #56	@ 0x38
 800baa0:	3316      	adds	r3, #22
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fd fe9e 	bl	80097e4 <ld_word>
 800baa8:	4603      	mov	r3, r0
 800baaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800baac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d106      	bne.n	800bac0 <find_volume+0x214>
 800bab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab4:	3338      	adds	r3, #56	@ 0x38
 800bab6:	3324      	adds	r3, #36	@ 0x24
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fd feab 	bl	8009814 <ld_dword>
 800babe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bac4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad2:	789b      	ldrb	r3, [r3, #2]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d005      	beq.n	800bae4 <find_volume+0x238>
 800bad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bada:	789b      	ldrb	r3, [r3, #2]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d001      	beq.n	800bae4 <find_volume+0x238>
 800bae0:	230d      	movs	r3, #13
 800bae2:	e15c      	b.n	800bd9e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae6:	789b      	ldrb	r3, [r3, #2]
 800bae8:	461a      	mov	r2, r3
 800baea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baec:	fb02 f303 	mul.w	r3, r2, r3
 800baf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800baf8:	461a      	mov	r2, r3
 800bafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb00:	895b      	ldrh	r3, [r3, #10]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d008      	beq.n	800bb18 <find_volume+0x26c>
 800bb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb08:	895b      	ldrh	r3, [r3, #10]
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0e:	895b      	ldrh	r3, [r3, #10]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	4013      	ands	r3, r2
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d001      	beq.n	800bb1c <find_volume+0x270>
 800bb18:	230d      	movs	r3, #13
 800bb1a:	e140      	b.n	800bd9e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1e:	3338      	adds	r3, #56	@ 0x38
 800bb20:	3311      	adds	r3, #17
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fd fe5e 	bl	80097e4 <ld_word>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb32:	891b      	ldrh	r3, [r3, #8]
 800bb34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb36:	8992      	ldrh	r2, [r2, #12]
 800bb38:	0952      	lsrs	r2, r2, #5
 800bb3a:	b292      	uxth	r2, r2
 800bb3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb40:	fb01 f202 	mul.w	r2, r1, r2
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <find_volume+0x2a8>
 800bb4c:	230d      	movs	r3, #13
 800bb4e:	e126      	b.n	800bd9e <find_volume+0x4f2>
 800bb50:	20004380 	.word	0x20004380

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	3338      	adds	r3, #56	@ 0x38
 800bb58:	3313      	adds	r3, #19
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7fd fe42 	bl	80097e4 <ld_word>
 800bb60:	4603      	mov	r3, r0
 800bb62:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bb64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <find_volume+0x2cc>
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6c:	3338      	adds	r3, #56	@ 0x38
 800bb6e:	3320      	adds	r3, #32
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fd fe4f 	bl	8009814 <ld_dword>
 800bb76:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7a:	3338      	adds	r3, #56	@ 0x38
 800bb7c:	330e      	adds	r3, #14
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fd fe30 	bl	80097e4 <ld_word>
 800bb84:	4603      	mov	r3, r0
 800bb86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bb88:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <find_volume+0x2e6>
 800bb8e:	230d      	movs	r3, #13
 800bb90:	e105      	b.n	800bd9e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bb92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bb94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb96:	4413      	add	r3, r2
 800bb98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb9a:	8911      	ldrh	r1, [r2, #8]
 800bb9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb9e:	8992      	ldrh	r2, [r2, #12]
 800bba0:	0952      	lsrs	r2, r2, #5
 800bba2:	b292      	uxth	r2, r2
 800bba4:	fbb1 f2f2 	udiv	r2, r1, r2
 800bba8:	b292      	uxth	r2, r2
 800bbaa:	4413      	add	r3, r2
 800bbac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bbae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d201      	bcs.n	800bbba <find_volume+0x30e>
 800bbb6:	230d      	movs	r3, #13
 800bbb8:	e0f1      	b.n	800bd9e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bbba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	1ad3      	subs	r3, r2, r3
 800bbc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbc2:	8952      	ldrh	r2, [r2, #10]
 800bbc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbc8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <find_volume+0x328>
 800bbd0:	230d      	movs	r3, #13
 800bbd2:	e0e4      	b.n	800bd9e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d802      	bhi.n	800bbea <find_volume+0x33e>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbec:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d802      	bhi.n	800bbfa <find_volume+0x34e>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	1c9a      	adds	r2, r3, #2
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc00:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bc02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc06:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc08:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bc0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc0c:	441a      	add	r2, r3
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc10:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bc12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc16:	441a      	add	r2, r3
 800bc18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800bc1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	d11e      	bne.n	800bc62 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc26:	3338      	adds	r3, #56	@ 0x38
 800bc28:	332a      	adds	r3, #42	@ 0x2a
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7fd fdda 	bl	80097e4 <ld_word>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <find_volume+0x38e>
 800bc36:	230d      	movs	r3, #13
 800bc38:	e0b1      	b.n	800bd9e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bc3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc3c:	891b      	ldrh	r3, [r3, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <find_volume+0x39a>
 800bc42:	230d      	movs	r3, #13
 800bc44:	e0ab      	b.n	800bd9e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc48:	3338      	adds	r3, #56	@ 0x38
 800bc4a:	332c      	adds	r3, #44	@ 0x2c
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fd fde1 	bl	8009814 <ld_dword>
 800bc52:	4602      	mov	r2, r0
 800bc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc56:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5a:	69db      	ldr	r3, [r3, #28]
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc60:	e01f      	b.n	800bca2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc64:	891b      	ldrh	r3, [r3, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <find_volume+0x3c2>
 800bc6a:	230d      	movs	r3, #13
 800bc6c:	e097      	b.n	800bd9e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc74:	441a      	add	r2, r3
 800bc76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc78:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bc7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d103      	bne.n	800bc8a <find_volume+0x3de>
 800bc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	e00a      	b.n	800bca0 <find_volume+0x3f4>
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc8c:	69da      	ldr	r2, [r3, #28]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	4413      	add	r3, r2
 800bc94:	085a      	lsrs	r2, r3, #1
 800bc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc98:	69db      	ldr	r3, [r3, #28]
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bca0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca4:	6a1a      	ldr	r2, [r3, #32]
 800bca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca8:	899b      	ldrh	r3, [r3, #12]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcae:	440b      	add	r3, r1
 800bcb0:	3b01      	subs	r3, #1
 800bcb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bcb4:	8989      	ldrh	r1, [r1, #12]
 800bcb6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d201      	bcs.n	800bcc2 <find_volume+0x416>
 800bcbe:	230d      	movs	r3, #13
 800bcc0:	e06d      	b.n	800bd9e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc8:	619a      	str	r2, [r3, #24]
 800bcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bccc:	699a      	ldr	r2, [r3, #24]
 800bcce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	2280      	movs	r2, #128	@ 0x80
 800bcd6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bcd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d149      	bne.n	800bd74 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce2:	3338      	adds	r3, #56	@ 0x38
 800bce4:	3330      	adds	r3, #48	@ 0x30
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fd fd7c 	bl	80097e4 <ld_word>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d140      	bne.n	800bd74 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bcf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bcfa:	f7fe f823 	bl	8009d44 <move_window>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d137      	bne.n	800bd74 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd06:	2200      	movs	r2, #0
 800bd08:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd0c:	3338      	adds	r3, #56	@ 0x38
 800bd0e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7fd fd66 	bl	80097e4 <ld_word>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d127      	bne.n	800bd74 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd26:	3338      	adds	r3, #56	@ 0x38
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7fd fd73 	bl	8009814 <ld_dword>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	4a1d      	ldr	r2, [pc, #116]	@ (800bda8 <find_volume+0x4fc>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d11e      	bne.n	800bd74 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd38:	3338      	adds	r3, #56	@ 0x38
 800bd3a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fd fd68 	bl	8009814 <ld_dword>
 800bd44:	4603      	mov	r3, r0
 800bd46:	4a19      	ldr	r2, [pc, #100]	@ (800bdac <find_volume+0x500>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d113      	bne.n	800bd74 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd4e:	3338      	adds	r3, #56	@ 0x38
 800bd50:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fd fd5d 	bl	8009814 <ld_dword>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd5e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd62:	3338      	adds	r3, #56	@ 0x38
 800bd64:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fd fd53 	bl	8009814 <ld_dword>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd72:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd76:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bd7a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bd7c:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb0 <find_volume+0x504>)
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	3301      	adds	r3, #1
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	4b0a      	ldr	r3, [pc, #40]	@ (800bdb0 <find_volume+0x504>)
 800bd86:	801a      	strh	r2, [r3, #0]
 800bd88:	4b09      	ldr	r3, [pc, #36]	@ (800bdb0 <find_volume+0x504>)
 800bd8a:	881a      	ldrh	r2, [r3, #0]
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd92:	4a08      	ldr	r2, [pc, #32]	@ (800bdb4 <find_volume+0x508>)
 800bd94:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd98:	f7fd ff6c 	bl	8009c74 <clear_lock>
#endif
	return FR_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3758      	adds	r7, #88	@ 0x58
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	41615252 	.word	0x41615252
 800bdac:	61417272 	.word	0x61417272
 800bdb0:	20004384 	.word	0x20004384
 800bdb4:	200043a8 	.word	0x200043a8

0800bdb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bdc2:	2309      	movs	r3, #9
 800bdc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d01c      	beq.n	800be06 <validate+0x4e>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d018      	beq.n	800be06 <validate+0x4e>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d013      	beq.n	800be06 <validate+0x4e>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	889a      	ldrh	r2, [r3, #4]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	88db      	ldrh	r3, [r3, #6]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d10c      	bne.n	800be06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	785b      	ldrb	r3, [r3, #1]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fd fc56 	bl	80096a4 <disk_status>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f003 0301 	and.w	r3, r3, #1
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <validate+0x4e>
			res = FR_OK;
 800be02:	2300      	movs	r3, #0
 800be04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <validate+0x5a>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	e000      	b.n	800be14 <validate+0x5c>
 800be12:	2300      	movs	r3, #0
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	6013      	str	r3, [r2, #0]
	return res;
 800be18:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
	...

0800be24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	4613      	mov	r3, r2
 800be30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be36:	f107 0310 	add.w	r3, r7, #16
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff fc9c 	bl	800b778 <get_ldnumber>
 800be40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	2b00      	cmp	r3, #0
 800be46:	da01      	bge.n	800be4c <f_mount+0x28>
 800be48:	230b      	movs	r3, #11
 800be4a:	e02b      	b.n	800bea4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800be4c:	4a17      	ldr	r2, [pc, #92]	@ (800beac <f_mount+0x88>)
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d005      	beq.n	800be68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800be5c:	69b8      	ldr	r0, [r7, #24]
 800be5e:	f7fd ff09 	bl	8009c74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	2200      	movs	r2, #0
 800be66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d002      	beq.n	800be74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	490d      	ldr	r1, [pc, #52]	@ (800beac <f_mount+0x88>)
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <f_mount+0x66>
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d001      	beq.n	800be8e <f_mount+0x6a>
 800be8a:	2300      	movs	r3, #0
 800be8c:	e00a      	b.n	800bea4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be8e:	f107 010c 	add.w	r1, r7, #12
 800be92:	f107 0308 	add.w	r3, r7, #8
 800be96:	2200      	movs	r2, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f7ff fd07 	bl	800b8ac <find_volume>
 800be9e:	4603      	mov	r3, r0
 800bea0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3720      	adds	r7, #32
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	20004380 	.word	0x20004380

0800beb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b09a      	sub	sp, #104	@ 0x68
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	4613      	mov	r3, r2
 800bebc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <f_open+0x18>
 800bec4:	2309      	movs	r3, #9
 800bec6:	e1b7      	b.n	800c238 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bec8:	79fb      	ldrb	r3, [r7, #7]
 800beca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bece:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bed0:	79fa      	ldrb	r2, [r7, #7]
 800bed2:	f107 0114 	add.w	r1, r7, #20
 800bed6:	f107 0308 	add.w	r3, r7, #8
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff fce6 	bl	800b8ac <find_volume>
 800bee0:	4603      	mov	r3, r0
 800bee2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800bee6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800beea:	2b00      	cmp	r3, #0
 800beec:	f040 819b 	bne.w	800c226 <f_open+0x376>
		dj.obj.fs = fs;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	f107 0318 	add.w	r3, r7, #24
 800befa:	4611      	mov	r1, r2
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff fbc5 	bl	800b68c <follow_path>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bf08:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d118      	bne.n	800bf42 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bf10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800bf14:	b25b      	sxtb	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	da03      	bge.n	800bf22 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bf1a:	2306      	movs	r3, #6
 800bf1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bf20:	e00f      	b.n	800bf42 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf22:	79fb      	ldrb	r3, [r7, #7]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	bf8c      	ite	hi
 800bf28:	2301      	movhi	r3, #1
 800bf2a:	2300      	movls	r3, #0
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	461a      	mov	r2, r3
 800bf30:	f107 0318 	add.w	r3, r7, #24
 800bf34:	4611      	mov	r1, r2
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fd fd54 	bl	80099e4 <chk_lock>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf42:	79fb      	ldrb	r3, [r7, #7]
 800bf44:	f003 031c 	and.w	r3, r3, #28
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d07f      	beq.n	800c04c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bf4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d017      	beq.n	800bf84 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d10e      	bne.n	800bf7a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf5c:	f7fd fd9e 	bl	8009a9c <enq_lock>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d006      	beq.n	800bf74 <f_open+0xc4>
 800bf66:	f107 0318 	add.w	r3, r7, #24
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff f800 	bl	800af70 <dir_register>
 800bf70:	4603      	mov	r3, r0
 800bf72:	e000      	b.n	800bf76 <f_open+0xc6>
 800bf74:	2312      	movs	r3, #18
 800bf76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf7a:	79fb      	ldrb	r3, [r7, #7]
 800bf7c:	f043 0308 	orr.w	r3, r3, #8
 800bf80:	71fb      	strb	r3, [r7, #7]
 800bf82:	e010      	b.n	800bfa6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf84:	7fbb      	ldrb	r3, [r7, #30]
 800bf86:	f003 0311 	and.w	r3, r3, #17
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d003      	beq.n	800bf96 <f_open+0xe6>
					res = FR_DENIED;
 800bf8e:	2307      	movs	r3, #7
 800bf90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bf94:	e007      	b.n	800bfa6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d002      	beq.n	800bfa6 <f_open+0xf6>
 800bfa0:	2308      	movs	r3, #8
 800bfa2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bfa6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d168      	bne.n	800c080 <f_open+0x1d0>
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	f003 0308 	and.w	r3, r3, #8
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d063      	beq.n	800c080 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bfb8:	f7fd f9d6 	bl	8009368 <get_fattime>
 800bfbc:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc0:	330e      	adds	r3, #14
 800bfc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fd fc63 	bl	8009890 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfcc:	3316      	adds	r3, #22
 800bfce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7fd fc5d 	bl	8009890 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd8:	330b      	adds	r3, #11
 800bfda:	2220      	movs	r2, #32
 800bfdc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe fc32 	bl	800a84e <ld_clust>
 800bfea:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bff0:	2200      	movs	r2, #0
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe fc4a 	bl	800a88c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffa:	331c      	adds	r3, #28
 800bffc:	2100      	movs	r1, #0
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fd fc46 	bl	8009890 <st_dword>
					fs->wflag = 1;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2201      	movs	r2, #1
 800c008:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c00a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d037      	beq.n	800c080 <f_open+0x1d0>
						dw = fs->winsect;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c014:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c016:	f107 0318 	add.w	r3, r7, #24
 800c01a:	2200      	movs	r2, #0
 800c01c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe f93a 	bl	800a298 <remove_chain>
 800c024:	4603      	mov	r3, r0
 800c026:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c02a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d126      	bne.n	800c080 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c036:	4618      	mov	r0, r3
 800c038:	f7fd fe84 	bl	8009d44 <move_window>
 800c03c:	4603      	mov	r3, r0
 800c03e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c046:	3a01      	subs	r2, #1
 800c048:	615a      	str	r2, [r3, #20]
 800c04a:	e019      	b.n	800c080 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c04c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c050:	2b00      	cmp	r3, #0
 800c052:	d115      	bne.n	800c080 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c054:	7fbb      	ldrb	r3, [r7, #30]
 800c056:	f003 0310 	and.w	r3, r3, #16
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c05e:	2304      	movs	r3, #4
 800c060:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c064:	e00c      	b.n	800c080 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c066:	79fb      	ldrb	r3, [r7, #7]
 800c068:	f003 0302 	and.w	r3, r3, #2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d007      	beq.n	800c080 <f_open+0x1d0>
 800c070:	7fbb      	ldrb	r3, [r7, #30]
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d002      	beq.n	800c080 <f_open+0x1d0>
						res = FR_DENIED;
 800c07a:	2307      	movs	r3, #7
 800c07c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c080:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c084:	2b00      	cmp	r3, #0
 800c086:	d126      	bne.n	800c0d6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c088:	79fb      	ldrb	r3, [r7, #7]
 800c08a:	f003 0308 	and.w	r3, r3, #8
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d003      	beq.n	800c09a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c098:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c0a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0a8:	79fb      	ldrb	r3, [r7, #7]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	bf8c      	ite	hi
 800c0ae:	2301      	movhi	r3, #1
 800c0b0:	2300      	movls	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f107 0318 	add.w	r3, r7, #24
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fd fd0f 	bl	8009ae0 <inc_lock>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d102      	bne.n	800c0d6 <f_open+0x226>
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c0d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f040 80a3 	bne.w	800c226 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fe fbb1 	bl	800a84e <ld_clust>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0f4:	331c      	adds	r3, #28
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fd fb8c 	bl	8009814 <ld_dword>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	88da      	ldrh	r2, [r3, #6]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	79fa      	ldrb	r2, [r7, #7]
 800c11a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3330      	adds	r3, #48	@ 0x30
 800c132:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c136:	2100      	movs	r1, #0
 800c138:	4618      	mov	r0, r3
 800c13a:	f7fd fbf6 	bl	800992a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	f003 0320 	and.w	r3, r3, #32
 800c144:	2b00      	cmp	r3, #0
 800c146:	d06e      	beq.n	800c226 <f_open+0x376>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d06a      	beq.n	800c226 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	68da      	ldr	r2, [r3, #12]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	895b      	ldrh	r3, [r3, #10]
 800c15c:	461a      	mov	r2, r3
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	899b      	ldrh	r3, [r3, #12]
 800c162:	fb02 f303 	mul.w	r3, r2, r3
 800c166:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c174:	e016      	b.n	800c1a4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fd fe9f 	bl	8009ebe <get_fat>
 800c180:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c184:	2b01      	cmp	r3, #1
 800c186:	d802      	bhi.n	800c18e <f_open+0x2de>
 800c188:	2302      	movs	r3, #2
 800c18a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c18e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c194:	d102      	bne.n	800c19c <f_open+0x2ec>
 800c196:	2301      	movs	r3, #1
 800c198:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c19c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c19e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d103      	bne.n	800c1b4 <f_open+0x304>
 800c1ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c1ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d8e0      	bhi.n	800c176 <f_open+0x2c6>
				}
				fp->clust = clst;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c1ba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d131      	bne.n	800c226 <f_open+0x376>
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	899b      	ldrh	r3, [r3, #12]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1ce:	fb01 f202 	mul.w	r2, r1, r2
 800c1d2:	1a9b      	subs	r3, r3, r2
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d026      	beq.n	800c226 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fd fe4f 	bl	8009e80 <clust2sect>
 800c1e2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <f_open+0x342>
						res = FR_INT_ERR;
 800c1ea:	2302      	movs	r3, #2
 800c1ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c1f0:	e019      	b.n	800c226 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	899b      	ldrh	r3, [r3, #12]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800c1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c200:	441a      	add	r2, r3
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	7858      	ldrb	r0, [r3, #1]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6a1a      	ldr	r2, [r3, #32]
 800c214:	2301      	movs	r3, #1
 800c216:	f7fd fa87 	bl	8009728 <disk_read>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <f_open+0x376>
 800c220:	2301      	movs	r3, #1
 800c222:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c226:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <f_open+0x384>
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c234:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3768      	adds	r7, #104	@ 0x68
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b08e      	sub	sp, #56	@ 0x38
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
 800c24c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2200      	movs	r2, #0
 800c256:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f107 0214 	add.w	r2, r7, #20
 800c25e:	4611      	mov	r1, r2
 800c260:	4618      	mov	r0, r3
 800c262:	f7ff fda9 	bl	800bdb8 <validate>
 800c266:	4603      	mov	r3, r0
 800c268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c26c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c270:	2b00      	cmp	r3, #0
 800c272:	d107      	bne.n	800c284 <f_read+0x44>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	7d5b      	ldrb	r3, [r3, #21]
 800c278:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c27c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <f_read+0x4a>
 800c284:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c288:	e135      	b.n	800c4f6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	7d1b      	ldrb	r3, [r3, #20]
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <f_read+0x5a>
 800c296:	2307      	movs	r3, #7
 800c298:	e12d      	b.n	800c4f6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68da      	ldr	r2, [r3, #12]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	f240 811e 	bls.w	800c4ec <f_read+0x2ac>
 800c2b0:	6a3b      	ldr	r3, [r7, #32]
 800c2b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c2b4:	e11a      	b.n	800c4ec <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	697a      	ldr	r2, [r7, #20]
 800c2bc:	8992      	ldrh	r2, [r2, #12]
 800c2be:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2c2:	fb01 f202 	mul.w	r2, r1, r2
 800c2c6:	1a9b      	subs	r3, r3, r2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	f040 80d5 	bne.w	800c478 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	8992      	ldrh	r2, [r2, #12]
 800c2d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2da:	697a      	ldr	r2, [r7, #20]
 800c2dc:	8952      	ldrh	r2, [r2, #10]
 800c2de:	3a01      	subs	r2, #1
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d12f      	bne.n	800c34a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d103      	bne.n	800c2fa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2f8:	e013      	b.n	800c322 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d007      	beq.n	800c312 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	4619      	mov	r1, r3
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f7fe f8c2 	bl	800a492 <clmt_clust>
 800c30e:	6338      	str	r0, [r7, #48]	@ 0x30
 800c310:	e007      	b.n	800c322 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c312:	68fa      	ldr	r2, [r7, #12]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	69db      	ldr	r3, [r3, #28]
 800c318:	4619      	mov	r1, r3
 800c31a:	4610      	mov	r0, r2
 800c31c:	f7fd fdcf 	bl	8009ebe <get_fat>
 800c320:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c324:	2b01      	cmp	r3, #1
 800c326:	d804      	bhi.n	800c332 <f_read+0xf2>
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2202      	movs	r2, #2
 800c32c:	755a      	strb	r2, [r3, #21]
 800c32e:	2302      	movs	r3, #2
 800c330:	e0e1      	b.n	800c4f6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c338:	d104      	bne.n	800c344 <f_read+0x104>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2201      	movs	r2, #1
 800c33e:	755a      	strb	r2, [r3, #21]
 800c340:	2301      	movs	r3, #1
 800c342:	e0d8      	b.n	800c4f6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c348:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c34a:	697a      	ldr	r2, [r7, #20]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	4619      	mov	r1, r3
 800c352:	4610      	mov	r0, r2
 800c354:	f7fd fd94 	bl	8009e80 <clust2sect>
 800c358:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d104      	bne.n	800c36a <f_read+0x12a>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2202      	movs	r2, #2
 800c364:	755a      	strb	r2, [r3, #21]
 800c366:	2302      	movs	r3, #2
 800c368:	e0c5      	b.n	800c4f6 <f_read+0x2b6>
			sect += csect;
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	4413      	add	r3, r2
 800c370:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	899b      	ldrh	r3, [r3, #12]
 800c376:	461a      	mov	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c37e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c382:	2b00      	cmp	r3, #0
 800c384:	d041      	beq.n	800c40a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c386:	69fa      	ldr	r2, [r7, #28]
 800c388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c38a:	4413      	add	r3, r2
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	8952      	ldrh	r2, [r2, #10]
 800c390:	4293      	cmp	r3, r2
 800c392:	d905      	bls.n	800c3a0 <f_read+0x160>
					cc = fs->csize - csect;
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	895b      	ldrh	r3, [r3, #10]
 800c398:	461a      	mov	r2, r3
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	7858      	ldrb	r0, [r3, #1]
 800c3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a6:	69ba      	ldr	r2, [r7, #24]
 800c3a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c3aa:	f7fd f9bd 	bl	8009728 <disk_read>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d004      	beq.n	800c3be <f_read+0x17e>
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	755a      	strb	r2, [r3, #21]
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e09b      	b.n	800c4f6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	7d1b      	ldrb	r3, [r3, #20]
 800c3c2:	b25b      	sxtb	r3, r3
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	da18      	bge.n	800c3fa <f_read+0x1ba>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6a1a      	ldr	r2, [r3, #32]
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d911      	bls.n	800c3fa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6a1a      	ldr	r2, [r3, #32]
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	8992      	ldrh	r2, [r2, #12]
 800c3e2:	fb02 f303 	mul.w	r3, r2, r3
 800c3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3e8:	18d0      	adds	r0, r2, r3
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	899b      	ldrh	r3, [r3, #12]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	f7fd fa77 	bl	80098e8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	899b      	ldrh	r3, [r3, #12]
 800c3fe:	461a      	mov	r2, r3
 800c400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c402:	fb02 f303 	mul.w	r3, r2, r3
 800c406:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c408:	e05c      	b.n	800c4c4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	69ba      	ldr	r2, [r7, #24]
 800c410:	429a      	cmp	r2, r3
 800c412:	d02e      	beq.n	800c472 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	7d1b      	ldrb	r3, [r3, #20]
 800c418:	b25b      	sxtb	r3, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	da18      	bge.n	800c450 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	7858      	ldrb	r0, [r3, #1]
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6a1a      	ldr	r2, [r3, #32]
 800c42c:	2301      	movs	r3, #1
 800c42e:	f7fd f99b 	bl	8009768 <disk_write>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d004      	beq.n	800c442 <f_read+0x202>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2201      	movs	r2, #1
 800c43c:	755a      	strb	r2, [r3, #21]
 800c43e:	2301      	movs	r3, #1
 800c440:	e059      	b.n	800c4f6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	7d1b      	ldrb	r3, [r3, #20]
 800c446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	7858      	ldrb	r0, [r3, #1]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c45a:	2301      	movs	r3, #1
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	f7fd f963 	bl	8009728 <disk_read>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d004      	beq.n	800c472 <f_read+0x232>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2201      	movs	r2, #1
 800c46c:	755a      	strb	r2, [r3, #21]
 800c46e:	2301      	movs	r3, #1
 800c470:	e041      	b.n	800c4f6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	899b      	ldrh	r3, [r3, #12]
 800c47c:	4618      	mov	r0, r3
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	8992      	ldrh	r2, [r2, #12]
 800c486:	fbb3 f1f2 	udiv	r1, r3, r2
 800c48a:	fb01 f202 	mul.w	r2, r1, r2
 800c48e:	1a9b      	subs	r3, r3, r2
 800c490:	1ac3      	subs	r3, r0, r3
 800c492:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d901      	bls.n	800c4a0 <f_read+0x260>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	697a      	ldr	r2, [r7, #20]
 800c4ac:	8992      	ldrh	r2, [r2, #12]
 800c4ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4b2:	fb00 f202 	mul.w	r2, r0, r2
 800c4b6:	1a9b      	subs	r3, r3, r2
 800c4b8:	440b      	add	r3, r1
 800c4ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c4c0:	f7fd fa12 	bl	80098e8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c4c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c8:	4413      	add	r3, r2
 800c4ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	699a      	ldr	r2, [r3, #24]
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	441a      	add	r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	619a      	str	r2, [r3, #24]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4de:	441a      	add	r2, r3
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f47f aee1 	bne.w	800c2b6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c4f4:	2300      	movs	r3, #0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3738      	adds	r7, #56	@ 0x38
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b08c      	sub	sp, #48	@ 0x30
 800c502:	af00      	add	r7, sp, #0
 800c504:	60f8      	str	r0, [r7, #12]
 800c506:	60b9      	str	r1, [r7, #8]
 800c508:	607a      	str	r2, [r7, #4]
 800c50a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f107 0210 	add.w	r2, r7, #16
 800c51c:	4611      	mov	r1, r2
 800c51e:	4618      	mov	r0, r3
 800c520:	f7ff fc4a 	bl	800bdb8 <validate>
 800c524:	4603      	mov	r3, r0
 800c526:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c52a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d107      	bne.n	800c542 <f_write+0x44>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	7d5b      	ldrb	r3, [r3, #21]
 800c536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c53a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d002      	beq.n	800c548 <f_write+0x4a>
 800c542:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c546:	e16a      	b.n	800c81e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	7d1b      	ldrb	r3, [r3, #20]
 800c54c:	f003 0302 	and.w	r3, r3, #2
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <f_write+0x5a>
 800c554:	2307      	movs	r3, #7
 800c556:	e162      	b.n	800c81e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699a      	ldr	r2, [r3, #24]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	441a      	add	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	429a      	cmp	r2, r3
 800c566:	f080 814c 	bcs.w	800c802 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	43db      	mvns	r3, r3
 800c570:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c572:	e146      	b.n	800c802 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	8992      	ldrh	r2, [r2, #12]
 800c57c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c580:	fb01 f202 	mul.w	r2, r1, r2
 800c584:	1a9b      	subs	r3, r3, r2
 800c586:	2b00      	cmp	r3, #0
 800c588:	f040 80f1 	bne.w	800c76e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	8992      	ldrh	r2, [r2, #12]
 800c594:	fbb3 f3f2 	udiv	r3, r3, r2
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	8952      	ldrh	r2, [r2, #10]
 800c59c:	3a01      	subs	r2, #1
 800c59e:	4013      	ands	r3, r2
 800c5a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d143      	bne.n	800c630 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10c      	bne.n	800c5ca <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d11a      	bne.n	800c5f2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2100      	movs	r1, #0
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7fd fece 	bl	800a362 <create_chain>
 800c5c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c5c8:	e013      	b.n	800c5f2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d007      	beq.n	800c5e2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7fd ff5a 	bl	800a492 <clmt_clust>
 800c5de:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c5e0:	e007      	b.n	800c5f2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	4610      	mov	r0, r2
 800c5ec:	f7fd feb9 	bl	800a362 <create_chain>
 800c5f0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f000 8109 	beq.w	800c80c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d104      	bne.n	800c60a <f_write+0x10c>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2202      	movs	r2, #2
 800c604:	755a      	strb	r2, [r3, #21]
 800c606:	2302      	movs	r3, #2
 800c608:	e109      	b.n	800c81e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c610:	d104      	bne.n	800c61c <f_write+0x11e>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2201      	movs	r2, #1
 800c616:	755a      	strb	r2, [r3, #21]
 800c618:	2301      	movs	r3, #1
 800c61a:	e100      	b.n	800c81e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c620:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d102      	bne.n	800c630 <f_write+0x132>
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c62e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	7d1b      	ldrb	r3, [r3, #20]
 800c634:	b25b      	sxtb	r3, r3
 800c636:	2b00      	cmp	r3, #0
 800c638:	da18      	bge.n	800c66c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	7858      	ldrb	r0, [r3, #1]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6a1a      	ldr	r2, [r3, #32]
 800c648:	2301      	movs	r3, #1
 800c64a:	f7fd f88d 	bl	8009768 <disk_write>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <f_write+0x160>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2201      	movs	r2, #1
 800c658:	755a      	strb	r2, [r3, #21]
 800c65a:	2301      	movs	r3, #1
 800c65c:	e0df      	b.n	800c81e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	7d1b      	ldrb	r3, [r3, #20]
 800c662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c666:	b2da      	uxtb	r2, r3
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	69db      	ldr	r3, [r3, #28]
 800c672:	4619      	mov	r1, r3
 800c674:	4610      	mov	r0, r2
 800c676:	f7fd fc03 	bl	8009e80 <clust2sect>
 800c67a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d104      	bne.n	800c68c <f_write+0x18e>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2202      	movs	r2, #2
 800c686:	755a      	strb	r2, [r3, #21]
 800c688:	2302      	movs	r3, #2
 800c68a:	e0c8      	b.n	800c81e <f_write+0x320>
			sect += csect;
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	4413      	add	r3, r2
 800c692:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	899b      	ldrh	r3, [r3, #12]
 800c698:	461a      	mov	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6a0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d043      	beq.n	800c730 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c6a8:	69ba      	ldr	r2, [r7, #24]
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	693a      	ldr	r2, [r7, #16]
 800c6b0:	8952      	ldrh	r2, [r2, #10]
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d905      	bls.n	800c6c2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	895b      	ldrh	r3, [r3, #10]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	7858      	ldrb	r0, [r3, #1]
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	69f9      	ldr	r1, [r7, #28]
 800c6cc:	f7fd f84c 	bl	8009768 <disk_write>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <f_write+0x1e2>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	755a      	strb	r2, [r3, #21]
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e09e      	b.n	800c81e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	6a1a      	ldr	r2, [r3, #32]
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	6a3a      	ldr	r2, [r7, #32]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d918      	bls.n	800c720 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6a1a      	ldr	r2, [r3, #32]
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	8992      	ldrh	r2, [r2, #12]
 800c700:	fb02 f303 	mul.w	r3, r2, r3
 800c704:	69fa      	ldr	r2, [r7, #28]
 800c706:	18d1      	adds	r1, r2, r3
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	899b      	ldrh	r3, [r3, #12]
 800c70c:	461a      	mov	r2, r3
 800c70e:	f7fd f8eb 	bl	80098e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	7d1b      	ldrb	r3, [r3, #20]
 800c716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	899b      	ldrh	r3, [r3, #12]
 800c724:	461a      	mov	r2, r3
 800c726:	6a3b      	ldr	r3, [r7, #32]
 800c728:	fb02 f303 	mul.w	r3, r2, r3
 800c72c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c72e:	e04b      	b.n	800c7c8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6a1b      	ldr	r3, [r3, #32]
 800c734:	697a      	ldr	r2, [r7, #20]
 800c736:	429a      	cmp	r2, r3
 800c738:	d016      	beq.n	800c768 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	699a      	ldr	r2, [r3, #24]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c742:	429a      	cmp	r2, r3
 800c744:	d210      	bcs.n	800c768 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	7858      	ldrb	r0, [r3, #1]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c750:	2301      	movs	r3, #1
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	f7fc ffe8 	bl	8009728 <disk_read>
 800c758:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d004      	beq.n	800c768 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2201      	movs	r2, #1
 800c762:	755a      	strb	r2, [r3, #21]
 800c764:	2301      	movs	r3, #1
 800c766:	e05a      	b.n	800c81e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	899b      	ldrh	r3, [r3, #12]
 800c772:	4618      	mov	r0, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	699b      	ldr	r3, [r3, #24]
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	8992      	ldrh	r2, [r2, #12]
 800c77c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c780:	fb01 f202 	mul.w	r2, r1, r2
 800c784:	1a9b      	subs	r3, r3, r2
 800c786:	1ac3      	subs	r3, r0, r3
 800c788:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c78a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d901      	bls.n	800c796 <f_write+0x298>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	8992      	ldrh	r2, [r2, #12]
 800c7a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7a8:	fb00 f202 	mul.w	r2, r0, r2
 800c7ac:	1a9b      	subs	r3, r3, r2
 800c7ae:	440b      	add	r3, r1
 800c7b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7b2:	69f9      	ldr	r1, [r7, #28]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fd f897 	bl	80098e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	7d1b      	ldrb	r3, [r3, #20]
 800c7be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c7c8:	69fa      	ldr	r2, [r7, #28]
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	4413      	add	r3, r2
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	699a      	ldr	r2, [r3, #24]
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d6:	441a      	add	r2, r3
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	619a      	str	r2, [r3, #24]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	68da      	ldr	r2, [r3, #12]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	bf38      	it	cc
 800c7e8:	461a      	movcc	r2, r3
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	60da      	str	r2, [r3, #12]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f4:	441a      	add	r2, r3
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fe:	1ad3      	subs	r3, r2, r3
 800c800:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f47f aeb5 	bne.w	800c574 <f_write+0x76>
 800c80a:	e000      	b.n	800c80e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c80c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	7d1b      	ldrb	r3, [r3, #20]
 800c812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c816:	b2da      	uxtb	r2, r3
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c81c:	2300      	movs	r3, #0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3730      	adds	r7, #48	@ 0x30
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b086      	sub	sp, #24
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f107 0208 	add.w	r2, r7, #8
 800c834:	4611      	mov	r1, r2
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff fabe 	bl	800bdb8 <validate>
 800c83c:	4603      	mov	r3, r0
 800c83e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c840:	7dfb      	ldrb	r3, [r7, #23]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d168      	bne.n	800c918 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	7d1b      	ldrb	r3, [r3, #20]
 800c84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d062      	beq.n	800c918 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7d1b      	ldrb	r3, [r3, #20]
 800c856:	b25b      	sxtb	r3, r3
 800c858:	2b00      	cmp	r3, #0
 800c85a:	da15      	bge.n	800c888 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	7858      	ldrb	r0, [r3, #1]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1a      	ldr	r2, [r3, #32]
 800c86a:	2301      	movs	r3, #1
 800c86c:	f7fc ff7c 	bl	8009768 <disk_write>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <f_sync+0x54>
 800c876:	2301      	movs	r3, #1
 800c878:	e04f      	b.n	800c91a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	7d1b      	ldrb	r3, [r3, #20]
 800c87e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c882:	b2da      	uxtb	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c888:	f7fc fd6e 	bl	8009368 <get_fattime>
 800c88c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c894:	4619      	mov	r1, r3
 800c896:	4610      	mov	r0, r2
 800c898:	f7fd fa54 	bl	8009d44 <move_window>
 800c89c:	4603      	mov	r3, r0
 800c89e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d138      	bne.n	800c918 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8aa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	330b      	adds	r3, #11
 800c8b0:	781a      	ldrb	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	330b      	adds	r3, #11
 800c8b6:	f042 0220 	orr.w	r2, r2, #32
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6818      	ldr	r0, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689b      	ldr	r3, [r3, #8]
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	68f9      	ldr	r1, [r7, #12]
 800c8ca:	f7fd ffdf 	bl	800a88c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f103 021c 	add.w	r2, r3, #28
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f7fc ffd8 	bl	8009890 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	3316      	adds	r3, #22
 800c8e4:	6939      	ldr	r1, [r7, #16]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f7fc ffd2 	bl	8009890 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	3312      	adds	r3, #18
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fc ffb1 	bl	800985a <st_word>
					fs->wflag = 1;
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	4618      	mov	r0, r3
 800c902:	f7fd fa4d 	bl	8009da0 <sync_fs>
 800c906:	4603      	mov	r3, r0
 800c908:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	7d1b      	ldrb	r3, [r3, #20]
 800c90e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c912:	b2da      	uxtb	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c918:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3718      	adds	r7, #24
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b084      	sub	sp, #16
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff ff7b 	bl	800c826 <f_sync>
 800c930:	4603      	mov	r3, r0
 800c932:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d118      	bne.n	800c96c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f107 0208 	add.w	r2, r7, #8
 800c940:	4611      	mov	r1, r2
 800c942:	4618      	mov	r0, r3
 800c944:	f7ff fa38 	bl	800bdb8 <validate>
 800c948:	4603      	mov	r3, r0
 800c94a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d10c      	bne.n	800c96c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	4618      	mov	r0, r3
 800c958:	f7fd f950 	bl	8009bfc <dec_lock>
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c960:	7bfb      	ldrb	r3, [r7, #15]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d102      	bne.n	800c96c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2200      	movs	r2, #0
 800c96a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b086      	sub	sp, #24
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <f_opendir+0x14>
 800c986:	2309      	movs	r3, #9
 800c988:	e064      	b.n	800ca54 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c98e:	f107 010c 	add.w	r1, r7, #12
 800c992:	463b      	mov	r3, r7
 800c994:	2200      	movs	r2, #0
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe ff88 	bl	800b8ac <find_volume>
 800c99c:	4603      	mov	r3, r0
 800c99e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9a0:	7dfb      	ldrb	r3, [r7, #23]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d14f      	bne.n	800ca46 <f_opendir+0xd0>
		obj->fs = fs;
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7fe fe6b 	bl	800b68c <follow_path>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c9ba:	7dfb      	ldrb	r3, [r7, #23]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d13d      	bne.n	800ca3c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c9c6:	b25b      	sxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	db12      	blt.n	800c9f2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	799b      	ldrb	r3, [r3, #6]
 800c9d0:	f003 0310 	and.w	r3, r3, #16
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00a      	beq.n	800c9ee <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	4619      	mov	r1, r3
 800c9e0:	4610      	mov	r0, r2
 800c9e2:	f7fd ff34 	bl	800a84e <ld_clust>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	609a      	str	r2, [r3, #8]
 800c9ec:	e001      	b.n	800c9f2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c9ee:	2305      	movs	r3, #5
 800c9f0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d121      	bne.n	800ca3c <f_opendir+0xc6>
				obj->id = fs->id;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	88da      	ldrh	r2, [r3, #6]
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ca00:	2100      	movs	r1, #0
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7fd fd7d 	bl	800a502 <dir_sdi>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d114      	bne.n	800ca3c <f_opendir+0xc6>
					if (obj->sclust) {
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	689b      	ldr	r3, [r3, #8]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00d      	beq.n	800ca36 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f7fd f85f 	bl	8009ae0 <inc_lock>
 800ca22:	4602      	mov	r2, r0
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d105      	bne.n	800ca3c <f_opendir+0xc6>
 800ca30:	2312      	movs	r3, #18
 800ca32:	75fb      	strb	r3, [r7, #23]
 800ca34:	e002      	b.n	800ca3c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	2200      	movs	r2, #0
 800ca3a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	2b04      	cmp	r3, #4
 800ca40:	d101      	bne.n	800ca46 <f_opendir+0xd0>
 800ca42:	2305      	movs	r3, #5
 800ca44:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <f_opendir+0xdc>
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3718      	adds	r7, #24
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f107 0208 	add.w	r2, r7, #8
 800ca6a:	4611      	mov	r1, r2
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff f9a3 	bl	800bdb8 <validate>
 800ca72:	4603      	mov	r3, r0
 800ca74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d110      	bne.n	800ca9e <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	691b      	ldr	r3, [r3, #16]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d006      	beq.n	800ca92 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fd f8b7 	bl	8009bfc <dec_lock>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f107 0208 	add.w	r2, r7, #8
 800cab8:	4611      	mov	r1, r2
 800caba:	4618      	mov	r0, r3
 800cabc:	f7ff f97c 	bl	800bdb8 <validate>
 800cac0:	4603      	mov	r3, r0
 800cac2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d126      	bne.n	800cb18 <f_readdir+0x70>
		if (!fno) {
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d106      	bne.n	800cade <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cad0:	2100      	movs	r1, #0
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7fd fd15 	bl	800a502 <dir_sdi>
 800cad8:	4603      	mov	r3, r0
 800cada:	73fb      	strb	r3, [r7, #15]
 800cadc:	e01c      	b.n	800cb18 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800cade:	2100      	movs	r1, #0
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7fe f8de 	bl	800aca2 <dir_read>
 800cae6:	4603      	mov	r3, r0
 800cae8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800caea:	7bfb      	ldrb	r3, [r7, #15]
 800caec:	2b04      	cmp	r3, #4
 800caee:	d101      	bne.n	800caf4 <f_readdir+0x4c>
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10e      	bne.n	800cb18 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800cafa:	6839      	ldr	r1, [r7, #0]
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7fe fb2f 	bl	800b160 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cb02:	2100      	movs	r1, #0
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7fd fd85 	bl	800a614 <dir_next>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	2b04      	cmp	r3, #4
 800cb12:	d101      	bne.n	800cb18 <f_readdir+0x70>
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
	...

0800cb24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cb32:	2301      	movs	r3, #1
 800cb34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cb3a:	4b1f      	ldr	r3, [pc, #124]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb3c:	7a5b      	ldrb	r3, [r3, #9]
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d131      	bne.n	800cba8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cb44:	4b1c      	ldr	r3, [pc, #112]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb46:	7a5b      	ldrb	r3, [r3, #9]
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	4b1a      	ldr	r3, [pc, #104]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb4e:	2100      	movs	r1, #0
 800cb50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cb52:	4b19      	ldr	r3, [pc, #100]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb54:	7a5b      	ldrb	r3, [r3, #9]
 800cb56:	b2db      	uxtb	r3, r3
 800cb58:	4a17      	ldr	r2, [pc, #92]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4413      	add	r3, r2
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cb62:	4b15      	ldr	r3, [pc, #84]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb64:	7a5b      	ldrb	r3, [r3, #9]
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b13      	ldr	r3, [pc, #76]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb6c:	4413      	add	r3, r2
 800cb6e:	79fa      	ldrb	r2, [r7, #7]
 800cb70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb72:	4b11      	ldr	r3, [pc, #68]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb74:	7a5b      	ldrb	r3, [r3, #9]
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	b2d1      	uxtb	r1, r2
 800cb7c:	4a0e      	ldr	r2, [pc, #56]	@ (800cbb8 <FATFS_LinkDriverEx+0x94>)
 800cb7e:	7251      	strb	r1, [r2, #9]
 800cb80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb82:	7dbb      	ldrb	r3, [r7, #22]
 800cb84:	3330      	adds	r3, #48	@ 0x30
 800cb86:	b2da      	uxtb	r2, r3
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	223a      	movs	r2, #58	@ 0x3a
 800cb92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	3302      	adds	r3, #2
 800cb98:	222f      	movs	r2, #47	@ 0x2f
 800cb9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	3303      	adds	r3, #3
 800cba0:	2200      	movs	r2, #0
 800cba2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	371c      	adds	r7, #28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
 800cbb6:	bf00      	nop
 800cbb8:	200045a8 	.word	0x200045a8

0800cbbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	6839      	ldr	r1, [r7, #0]
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff ffaa 	bl	800cb24 <FATFS_LinkDriverEx>
 800cbd0:	4603      	mov	r3, r0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	6039      	str	r1, [r7, #0]
 800cbe6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800cbe8:	88fb      	ldrh	r3, [r7, #6]
 800cbea:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbec:	d802      	bhi.n	800cbf4 <ff_convert+0x18>
		c = chr;
 800cbee:	88fb      	ldrh	r3, [r7, #6]
 800cbf0:	81fb      	strh	r3, [r7, #14]
 800cbf2:	e025      	b.n	800cc40 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00b      	beq.n	800cc12 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800cbfa:	88fb      	ldrh	r3, [r7, #6]
 800cbfc:	2bff      	cmp	r3, #255	@ 0xff
 800cbfe:	d805      	bhi.n	800cc0c <ff_convert+0x30>
 800cc00:	88fb      	ldrh	r3, [r7, #6]
 800cc02:	3b80      	subs	r3, #128	@ 0x80
 800cc04:	4a12      	ldr	r2, [pc, #72]	@ (800cc50 <ff_convert+0x74>)
 800cc06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc0a:	e000      	b.n	800cc0e <ff_convert+0x32>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	81fb      	strh	r3, [r7, #14]
 800cc10:	e016      	b.n	800cc40 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cc12:	2300      	movs	r3, #0
 800cc14:	81fb      	strh	r3, [r7, #14]
 800cc16:	e009      	b.n	800cc2c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cc18:	89fb      	ldrh	r3, [r7, #14]
 800cc1a:	4a0d      	ldr	r2, [pc, #52]	@ (800cc50 <ff_convert+0x74>)
 800cc1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc20:	88fa      	ldrh	r2, [r7, #6]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d006      	beq.n	800cc34 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800cc26:	89fb      	ldrh	r3, [r7, #14]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	81fb      	strh	r3, [r7, #14]
 800cc2c:	89fb      	ldrh	r3, [r7, #14]
 800cc2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc30:	d9f2      	bls.n	800cc18 <ff_convert+0x3c>
 800cc32:	e000      	b.n	800cc36 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cc34:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800cc36:	89fb      	ldrh	r3, [r7, #14]
 800cc38:	3380      	adds	r3, #128	@ 0x80
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cc40:	89fb      	ldrh	r3, [r7, #14]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr
 800cc4e:	bf00      	nop
 800cc50:	0800ecdc 	.word	0x0800ecdc

0800cc54 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b087      	sub	sp, #28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cc5e:	88fb      	ldrh	r3, [r7, #6]
 800cc60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc64:	d201      	bcs.n	800cc6a <ff_wtoupper+0x16>
 800cc66:	4b3e      	ldr	r3, [pc, #248]	@ (800cd60 <ff_wtoupper+0x10c>)
 800cc68:	e000      	b.n	800cc6c <ff_wtoupper+0x18>
 800cc6a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd64 <ff_wtoupper+0x110>)
 800cc6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	1c9a      	adds	r2, r3, #2
 800cc72:	617a      	str	r2, [r7, #20]
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cc78:	8a7b      	ldrh	r3, [r7, #18]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d068      	beq.n	800cd50 <ff_wtoupper+0xfc>
 800cc7e:	88fa      	ldrh	r2, [r7, #6]
 800cc80:	8a7b      	ldrh	r3, [r7, #18]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d364      	bcc.n	800cd50 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	1c9a      	adds	r2, r3, #2
 800cc8a:	617a      	str	r2, [r7, #20]
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	823b      	strh	r3, [r7, #16]
 800cc90:	8a3b      	ldrh	r3, [r7, #16]
 800cc92:	0a1b      	lsrs	r3, r3, #8
 800cc94:	81fb      	strh	r3, [r7, #14]
 800cc96:	8a3b      	ldrh	r3, [r7, #16]
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cc9c:	88fa      	ldrh	r2, [r7, #6]
 800cc9e:	8a79      	ldrh	r1, [r7, #18]
 800cca0:	8a3b      	ldrh	r3, [r7, #16]
 800cca2:	440b      	add	r3, r1
 800cca4:	429a      	cmp	r2, r3
 800cca6:	da49      	bge.n	800cd3c <ff_wtoupper+0xe8>
			switch (cmd) {
 800cca8:	89fb      	ldrh	r3, [r7, #14]
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	d84f      	bhi.n	800cd4e <ff_wtoupper+0xfa>
 800ccae:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb4 <ff_wtoupper+0x60>)
 800ccb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb4:	0800ccd9 	.word	0x0800ccd9
 800ccb8:	0800cceb 	.word	0x0800cceb
 800ccbc:	0800cd01 	.word	0x0800cd01
 800ccc0:	0800cd09 	.word	0x0800cd09
 800ccc4:	0800cd11 	.word	0x0800cd11
 800ccc8:	0800cd19 	.word	0x0800cd19
 800cccc:	0800cd21 	.word	0x0800cd21
 800ccd0:	0800cd29 	.word	0x0800cd29
 800ccd4:	0800cd31 	.word	0x0800cd31
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ccd8:	88fa      	ldrh	r2, [r7, #6]
 800ccda:	8a7b      	ldrh	r3, [r7, #18]
 800ccdc:	1ad3      	subs	r3, r2, r3
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	4413      	add	r3, r2
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	80fb      	strh	r3, [r7, #6]
 800cce8:	e027      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ccea:	88fa      	ldrh	r2, [r7, #6]
 800ccec:	8a7b      	ldrh	r3, [r7, #18]
 800ccee:	1ad3      	subs	r3, r2, r3
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	88fa      	ldrh	r2, [r7, #6]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	80fb      	strh	r3, [r7, #6]
 800ccfe:	e01c      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cd00:	88fb      	ldrh	r3, [r7, #6]
 800cd02:	3b10      	subs	r3, #16
 800cd04:	80fb      	strh	r3, [r7, #6]
 800cd06:	e018      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	3b20      	subs	r3, #32
 800cd0c:	80fb      	strh	r3, [r7, #6]
 800cd0e:	e014      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cd10:	88fb      	ldrh	r3, [r7, #6]
 800cd12:	3b30      	subs	r3, #48	@ 0x30
 800cd14:	80fb      	strh	r3, [r7, #6]
 800cd16:	e010      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cd18:	88fb      	ldrh	r3, [r7, #6]
 800cd1a:	3b1a      	subs	r3, #26
 800cd1c:	80fb      	strh	r3, [r7, #6]
 800cd1e:	e00c      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cd20:	88fb      	ldrh	r3, [r7, #6]
 800cd22:	3308      	adds	r3, #8
 800cd24:	80fb      	strh	r3, [r7, #6]
 800cd26:	e008      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cd28:	88fb      	ldrh	r3, [r7, #6]
 800cd2a:	3b50      	subs	r3, #80	@ 0x50
 800cd2c:	80fb      	strh	r3, [r7, #6]
 800cd2e:	e004      	b.n	800cd3a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cd30:	88fb      	ldrh	r3, [r7, #6]
 800cd32:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800cd36:	80fb      	strh	r3, [r7, #6]
 800cd38:	bf00      	nop
			}
			break;
 800cd3a:	e008      	b.n	800cd4e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cd3c:	89fb      	ldrh	r3, [r7, #14]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d195      	bne.n	800cc6e <ff_wtoupper+0x1a>
 800cd42:	8a3b      	ldrh	r3, [r7, #16]
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	4413      	add	r3, r2
 800cd4a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800cd4c:	e78f      	b.n	800cc6e <ff_wtoupper+0x1a>
			break;
 800cd4e:	bf00      	nop
	}

	return chr;
 800cd50:	88fb      	ldrh	r3, [r7, #6]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	371c      	adds	r7, #28
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	0800eddc 	.word	0x0800eddc
 800cd64:	0800efd0 	.word	0x0800efd0

0800cd68 <std>:
 800cd68:	2300      	movs	r3, #0
 800cd6a:	b510      	push	{r4, lr}
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd76:	6083      	str	r3, [r0, #8]
 800cd78:	8181      	strh	r1, [r0, #12]
 800cd7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd7c:	81c2      	strh	r2, [r0, #14]
 800cd7e:	6183      	str	r3, [r0, #24]
 800cd80:	4619      	mov	r1, r3
 800cd82:	2208      	movs	r2, #8
 800cd84:	305c      	adds	r0, #92	@ 0x5c
 800cd86:	f000 fa4d 	bl	800d224 <memset>
 800cd8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cdc0 <std+0x58>)
 800cd8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd8e:	4b0d      	ldr	r3, [pc, #52]	@ (800cdc4 <std+0x5c>)
 800cd90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd92:	4b0d      	ldr	r3, [pc, #52]	@ (800cdc8 <std+0x60>)
 800cd94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd96:	4b0d      	ldr	r3, [pc, #52]	@ (800cdcc <std+0x64>)
 800cd98:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd0 <std+0x68>)
 800cd9c:	6224      	str	r4, [r4, #32]
 800cd9e:	429c      	cmp	r4, r3
 800cda0:	d006      	beq.n	800cdb0 <std+0x48>
 800cda2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cda6:	4294      	cmp	r4, r2
 800cda8:	d002      	beq.n	800cdb0 <std+0x48>
 800cdaa:	33d0      	adds	r3, #208	@ 0xd0
 800cdac:	429c      	cmp	r4, r3
 800cdae:	d105      	bne.n	800cdbc <std+0x54>
 800cdb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cdb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdb8:	f000 bad6 	b.w	800d368 <__retarget_lock_init_recursive>
 800cdbc:	bd10      	pop	{r4, pc}
 800cdbe:	bf00      	nop
 800cdc0:	0800d075 	.word	0x0800d075
 800cdc4:	0800d097 	.word	0x0800d097
 800cdc8:	0800d0cf 	.word	0x0800d0cf
 800cdcc:	0800d0f3 	.word	0x0800d0f3
 800cdd0:	200045b4 	.word	0x200045b4

0800cdd4 <stdio_exit_handler>:
 800cdd4:	4a02      	ldr	r2, [pc, #8]	@ (800cde0 <stdio_exit_handler+0xc>)
 800cdd6:	4903      	ldr	r1, [pc, #12]	@ (800cde4 <stdio_exit_handler+0x10>)
 800cdd8:	4803      	ldr	r0, [pc, #12]	@ (800cde8 <stdio_exit_handler+0x14>)
 800cdda:	f000 b869 	b.w	800ceb0 <_fwalk_sglue>
 800cdde:	bf00      	nop
 800cde0:	20000018 	.word	0x20000018
 800cde4:	0800dee5 	.word	0x0800dee5
 800cde8:	20000028 	.word	0x20000028

0800cdec <cleanup_stdio>:
 800cdec:	6841      	ldr	r1, [r0, #4]
 800cdee:	4b0c      	ldr	r3, [pc, #48]	@ (800ce20 <cleanup_stdio+0x34>)
 800cdf0:	4299      	cmp	r1, r3
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	d001      	beq.n	800cdfc <cleanup_stdio+0x10>
 800cdf8:	f001 f874 	bl	800dee4 <_fflush_r>
 800cdfc:	68a1      	ldr	r1, [r4, #8]
 800cdfe:	4b09      	ldr	r3, [pc, #36]	@ (800ce24 <cleanup_stdio+0x38>)
 800ce00:	4299      	cmp	r1, r3
 800ce02:	d002      	beq.n	800ce0a <cleanup_stdio+0x1e>
 800ce04:	4620      	mov	r0, r4
 800ce06:	f001 f86d 	bl	800dee4 <_fflush_r>
 800ce0a:	68e1      	ldr	r1, [r4, #12]
 800ce0c:	4b06      	ldr	r3, [pc, #24]	@ (800ce28 <cleanup_stdio+0x3c>)
 800ce0e:	4299      	cmp	r1, r3
 800ce10:	d004      	beq.n	800ce1c <cleanup_stdio+0x30>
 800ce12:	4620      	mov	r0, r4
 800ce14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce18:	f001 b864 	b.w	800dee4 <_fflush_r>
 800ce1c:	bd10      	pop	{r4, pc}
 800ce1e:	bf00      	nop
 800ce20:	200045b4 	.word	0x200045b4
 800ce24:	2000461c 	.word	0x2000461c
 800ce28:	20004684 	.word	0x20004684

0800ce2c <global_stdio_init.part.0>:
 800ce2c:	b510      	push	{r4, lr}
 800ce2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce5c <global_stdio_init.part.0+0x30>)
 800ce30:	4c0b      	ldr	r4, [pc, #44]	@ (800ce60 <global_stdio_init.part.0+0x34>)
 800ce32:	4a0c      	ldr	r2, [pc, #48]	@ (800ce64 <global_stdio_init.part.0+0x38>)
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	4620      	mov	r0, r4
 800ce38:	2200      	movs	r2, #0
 800ce3a:	2104      	movs	r1, #4
 800ce3c:	f7ff ff94 	bl	800cd68 <std>
 800ce40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce44:	2201      	movs	r2, #1
 800ce46:	2109      	movs	r1, #9
 800ce48:	f7ff ff8e 	bl	800cd68 <std>
 800ce4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce50:	2202      	movs	r2, #2
 800ce52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce56:	2112      	movs	r1, #18
 800ce58:	f7ff bf86 	b.w	800cd68 <std>
 800ce5c:	200046ec 	.word	0x200046ec
 800ce60:	200045b4 	.word	0x200045b4
 800ce64:	0800cdd5 	.word	0x0800cdd5

0800ce68 <__sfp_lock_acquire>:
 800ce68:	4801      	ldr	r0, [pc, #4]	@ (800ce70 <__sfp_lock_acquire+0x8>)
 800ce6a:	f000 ba7e 	b.w	800d36a <__retarget_lock_acquire_recursive>
 800ce6e:	bf00      	nop
 800ce70:	200046f5 	.word	0x200046f5

0800ce74 <__sfp_lock_release>:
 800ce74:	4801      	ldr	r0, [pc, #4]	@ (800ce7c <__sfp_lock_release+0x8>)
 800ce76:	f000 ba79 	b.w	800d36c <__retarget_lock_release_recursive>
 800ce7a:	bf00      	nop
 800ce7c:	200046f5 	.word	0x200046f5

0800ce80 <__sinit>:
 800ce80:	b510      	push	{r4, lr}
 800ce82:	4604      	mov	r4, r0
 800ce84:	f7ff fff0 	bl	800ce68 <__sfp_lock_acquire>
 800ce88:	6a23      	ldr	r3, [r4, #32]
 800ce8a:	b11b      	cbz	r3, 800ce94 <__sinit+0x14>
 800ce8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce90:	f7ff bff0 	b.w	800ce74 <__sfp_lock_release>
 800ce94:	4b04      	ldr	r3, [pc, #16]	@ (800cea8 <__sinit+0x28>)
 800ce96:	6223      	str	r3, [r4, #32]
 800ce98:	4b04      	ldr	r3, [pc, #16]	@ (800ceac <__sinit+0x2c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1f5      	bne.n	800ce8c <__sinit+0xc>
 800cea0:	f7ff ffc4 	bl	800ce2c <global_stdio_init.part.0>
 800cea4:	e7f2      	b.n	800ce8c <__sinit+0xc>
 800cea6:	bf00      	nop
 800cea8:	0800cded 	.word	0x0800cded
 800ceac:	200046ec 	.word	0x200046ec

0800ceb0 <_fwalk_sglue>:
 800ceb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceb4:	4607      	mov	r7, r0
 800ceb6:	4688      	mov	r8, r1
 800ceb8:	4614      	mov	r4, r2
 800ceba:	2600      	movs	r6, #0
 800cebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cec0:	f1b9 0901 	subs.w	r9, r9, #1
 800cec4:	d505      	bpl.n	800ced2 <_fwalk_sglue+0x22>
 800cec6:	6824      	ldr	r4, [r4, #0]
 800cec8:	2c00      	cmp	r4, #0
 800ceca:	d1f7      	bne.n	800cebc <_fwalk_sglue+0xc>
 800cecc:	4630      	mov	r0, r6
 800cece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ced2:	89ab      	ldrh	r3, [r5, #12]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d907      	bls.n	800cee8 <_fwalk_sglue+0x38>
 800ced8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cedc:	3301      	adds	r3, #1
 800cede:	d003      	beq.n	800cee8 <_fwalk_sglue+0x38>
 800cee0:	4629      	mov	r1, r5
 800cee2:	4638      	mov	r0, r7
 800cee4:	47c0      	blx	r8
 800cee6:	4306      	orrs	r6, r0
 800cee8:	3568      	adds	r5, #104	@ 0x68
 800ceea:	e7e9      	b.n	800cec0 <_fwalk_sglue+0x10>

0800ceec <iprintf>:
 800ceec:	b40f      	push	{r0, r1, r2, r3}
 800ceee:	b507      	push	{r0, r1, r2, lr}
 800cef0:	4906      	ldr	r1, [pc, #24]	@ (800cf0c <iprintf+0x20>)
 800cef2:	ab04      	add	r3, sp, #16
 800cef4:	6808      	ldr	r0, [r1, #0]
 800cef6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefa:	6881      	ldr	r1, [r0, #8]
 800cefc:	9301      	str	r3, [sp, #4]
 800cefe:	f000 fcc7 	bl	800d890 <_vfiprintf_r>
 800cf02:	b003      	add	sp, #12
 800cf04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf08:	b004      	add	sp, #16
 800cf0a:	4770      	bx	lr
 800cf0c:	20000024 	.word	0x20000024

0800cf10 <_puts_r>:
 800cf10:	6a03      	ldr	r3, [r0, #32]
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	6884      	ldr	r4, [r0, #8]
 800cf16:	4605      	mov	r5, r0
 800cf18:	460e      	mov	r6, r1
 800cf1a:	b90b      	cbnz	r3, 800cf20 <_puts_r+0x10>
 800cf1c:	f7ff ffb0 	bl	800ce80 <__sinit>
 800cf20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf22:	07db      	lsls	r3, r3, #31
 800cf24:	d405      	bmi.n	800cf32 <_puts_r+0x22>
 800cf26:	89a3      	ldrh	r3, [r4, #12]
 800cf28:	0598      	lsls	r0, r3, #22
 800cf2a:	d402      	bmi.n	800cf32 <_puts_r+0x22>
 800cf2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf2e:	f000 fa1c 	bl	800d36a <__retarget_lock_acquire_recursive>
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	0719      	lsls	r1, r3, #28
 800cf36:	d502      	bpl.n	800cf3e <_puts_r+0x2e>
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d135      	bne.n	800cfaa <_puts_r+0x9a>
 800cf3e:	4621      	mov	r1, r4
 800cf40:	4628      	mov	r0, r5
 800cf42:	f000 f919 	bl	800d178 <__swsetup_r>
 800cf46:	b380      	cbz	r0, 800cfaa <_puts_r+0x9a>
 800cf48:	f04f 35ff 	mov.w	r5, #4294967295
 800cf4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf4e:	07da      	lsls	r2, r3, #31
 800cf50:	d405      	bmi.n	800cf5e <_puts_r+0x4e>
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	059b      	lsls	r3, r3, #22
 800cf56:	d402      	bmi.n	800cf5e <_puts_r+0x4e>
 800cf58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf5a:	f000 fa07 	bl	800d36c <__retarget_lock_release_recursive>
 800cf5e:	4628      	mov	r0, r5
 800cf60:	bd70      	pop	{r4, r5, r6, pc}
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	da04      	bge.n	800cf70 <_puts_r+0x60>
 800cf66:	69a2      	ldr	r2, [r4, #24]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	dc17      	bgt.n	800cf9c <_puts_r+0x8c>
 800cf6c:	290a      	cmp	r1, #10
 800cf6e:	d015      	beq.n	800cf9c <_puts_r+0x8c>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	1c5a      	adds	r2, r3, #1
 800cf74:	6022      	str	r2, [r4, #0]
 800cf76:	7019      	strb	r1, [r3, #0]
 800cf78:	68a3      	ldr	r3, [r4, #8]
 800cf7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	60a3      	str	r3, [r4, #8]
 800cf82:	2900      	cmp	r1, #0
 800cf84:	d1ed      	bne.n	800cf62 <_puts_r+0x52>
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	da11      	bge.n	800cfae <_puts_r+0x9e>
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	210a      	movs	r1, #10
 800cf8e:	4628      	mov	r0, r5
 800cf90:	f000 f8b3 	bl	800d0fa <__swbuf_r>
 800cf94:	3001      	adds	r0, #1
 800cf96:	d0d7      	beq.n	800cf48 <_puts_r+0x38>
 800cf98:	250a      	movs	r5, #10
 800cf9a:	e7d7      	b.n	800cf4c <_puts_r+0x3c>
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f000 f8ab 	bl	800d0fa <__swbuf_r>
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d1e7      	bne.n	800cf78 <_puts_r+0x68>
 800cfa8:	e7ce      	b.n	800cf48 <_puts_r+0x38>
 800cfaa:	3e01      	subs	r6, #1
 800cfac:	e7e4      	b.n	800cf78 <_puts_r+0x68>
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	1c5a      	adds	r2, r3, #1
 800cfb2:	6022      	str	r2, [r4, #0]
 800cfb4:	220a      	movs	r2, #10
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	e7ee      	b.n	800cf98 <_puts_r+0x88>
	...

0800cfbc <puts>:
 800cfbc:	4b02      	ldr	r3, [pc, #8]	@ (800cfc8 <puts+0xc>)
 800cfbe:	4601      	mov	r1, r0
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f7ff bfa5 	b.w	800cf10 <_puts_r>
 800cfc6:	bf00      	nop
 800cfc8:	20000024 	.word	0x20000024

0800cfcc <sniprintf>:
 800cfcc:	b40c      	push	{r2, r3}
 800cfce:	b530      	push	{r4, r5, lr}
 800cfd0:	4b17      	ldr	r3, [pc, #92]	@ (800d030 <sniprintf+0x64>)
 800cfd2:	1e0c      	subs	r4, r1, #0
 800cfd4:	681d      	ldr	r5, [r3, #0]
 800cfd6:	b09d      	sub	sp, #116	@ 0x74
 800cfd8:	da08      	bge.n	800cfec <sniprintf+0x20>
 800cfda:	238b      	movs	r3, #139	@ 0x8b
 800cfdc:	602b      	str	r3, [r5, #0]
 800cfde:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe2:	b01d      	add	sp, #116	@ 0x74
 800cfe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfe8:	b002      	add	sp, #8
 800cfea:	4770      	bx	lr
 800cfec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cff0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cff4:	bf14      	ite	ne
 800cff6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cffa:	4623      	moveq	r3, r4
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	9307      	str	r3, [sp, #28]
 800d000:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d004:	9002      	str	r0, [sp, #8]
 800d006:	9006      	str	r0, [sp, #24]
 800d008:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d00c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d00e:	ab21      	add	r3, sp, #132	@ 0x84
 800d010:	a902      	add	r1, sp, #8
 800d012:	4628      	mov	r0, r5
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	f000 fb15 	bl	800d644 <_svfiprintf_r>
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	bfbc      	itt	lt
 800d01e:	238b      	movlt	r3, #139	@ 0x8b
 800d020:	602b      	strlt	r3, [r5, #0]
 800d022:	2c00      	cmp	r4, #0
 800d024:	d0dd      	beq.n	800cfe2 <sniprintf+0x16>
 800d026:	9b02      	ldr	r3, [sp, #8]
 800d028:	2200      	movs	r2, #0
 800d02a:	701a      	strb	r2, [r3, #0]
 800d02c:	e7d9      	b.n	800cfe2 <sniprintf+0x16>
 800d02e:	bf00      	nop
 800d030:	20000024 	.word	0x20000024

0800d034 <siprintf>:
 800d034:	b40e      	push	{r1, r2, r3}
 800d036:	b500      	push	{lr}
 800d038:	b09c      	sub	sp, #112	@ 0x70
 800d03a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d03c:	9002      	str	r0, [sp, #8]
 800d03e:	9006      	str	r0, [sp, #24]
 800d040:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d044:	4809      	ldr	r0, [pc, #36]	@ (800d06c <siprintf+0x38>)
 800d046:	9107      	str	r1, [sp, #28]
 800d048:	9104      	str	r1, [sp, #16]
 800d04a:	4909      	ldr	r1, [pc, #36]	@ (800d070 <siprintf+0x3c>)
 800d04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d050:	9105      	str	r1, [sp, #20]
 800d052:	6800      	ldr	r0, [r0, #0]
 800d054:	9301      	str	r3, [sp, #4]
 800d056:	a902      	add	r1, sp, #8
 800d058:	f000 faf4 	bl	800d644 <_svfiprintf_r>
 800d05c:	9b02      	ldr	r3, [sp, #8]
 800d05e:	2200      	movs	r2, #0
 800d060:	701a      	strb	r2, [r3, #0]
 800d062:	b01c      	add	sp, #112	@ 0x70
 800d064:	f85d eb04 	ldr.w	lr, [sp], #4
 800d068:	b003      	add	sp, #12
 800d06a:	4770      	bx	lr
 800d06c:	20000024 	.word	0x20000024
 800d070:	ffff0208 	.word	0xffff0208

0800d074 <__sread>:
 800d074:	b510      	push	{r4, lr}
 800d076:	460c      	mov	r4, r1
 800d078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d07c:	f000 f926 	bl	800d2cc <_read_r>
 800d080:	2800      	cmp	r0, #0
 800d082:	bfab      	itete	ge
 800d084:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d086:	89a3      	ldrhlt	r3, [r4, #12]
 800d088:	181b      	addge	r3, r3, r0
 800d08a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d08e:	bfac      	ite	ge
 800d090:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d092:	81a3      	strhlt	r3, [r4, #12]
 800d094:	bd10      	pop	{r4, pc}

0800d096 <__swrite>:
 800d096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09a:	461f      	mov	r7, r3
 800d09c:	898b      	ldrh	r3, [r1, #12]
 800d09e:	05db      	lsls	r3, r3, #23
 800d0a0:	4605      	mov	r5, r0
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	4616      	mov	r6, r2
 800d0a6:	d505      	bpl.n	800d0b4 <__swrite+0x1e>
 800d0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ac:	2302      	movs	r3, #2
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f000 f8fa 	bl	800d2a8 <_lseek_r>
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0be:	81a3      	strh	r3, [r4, #12]
 800d0c0:	4632      	mov	r2, r6
 800d0c2:	463b      	mov	r3, r7
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0ca:	f000 b911 	b.w	800d2f0 <_write_r>

0800d0ce <__sseek>:
 800d0ce:	b510      	push	{r4, lr}
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d6:	f000 f8e7 	bl	800d2a8 <_lseek_r>
 800d0da:	1c43      	adds	r3, r0, #1
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	bf15      	itete	ne
 800d0e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0ea:	81a3      	strheq	r3, [r4, #12]
 800d0ec:	bf18      	it	ne
 800d0ee:	81a3      	strhne	r3, [r4, #12]
 800d0f0:	bd10      	pop	{r4, pc}

0800d0f2 <__sclose>:
 800d0f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0f6:	f000 b8c7 	b.w	800d288 <_close_r>

0800d0fa <__swbuf_r>:
 800d0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fc:	460e      	mov	r6, r1
 800d0fe:	4614      	mov	r4, r2
 800d100:	4605      	mov	r5, r0
 800d102:	b118      	cbz	r0, 800d10c <__swbuf_r+0x12>
 800d104:	6a03      	ldr	r3, [r0, #32]
 800d106:	b90b      	cbnz	r3, 800d10c <__swbuf_r+0x12>
 800d108:	f7ff feba 	bl	800ce80 <__sinit>
 800d10c:	69a3      	ldr	r3, [r4, #24]
 800d10e:	60a3      	str	r3, [r4, #8]
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	071a      	lsls	r2, r3, #28
 800d114:	d501      	bpl.n	800d11a <__swbuf_r+0x20>
 800d116:	6923      	ldr	r3, [r4, #16]
 800d118:	b943      	cbnz	r3, 800d12c <__swbuf_r+0x32>
 800d11a:	4621      	mov	r1, r4
 800d11c:	4628      	mov	r0, r5
 800d11e:	f000 f82b 	bl	800d178 <__swsetup_r>
 800d122:	b118      	cbz	r0, 800d12c <__swbuf_r+0x32>
 800d124:	f04f 37ff 	mov.w	r7, #4294967295
 800d128:	4638      	mov	r0, r7
 800d12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	6922      	ldr	r2, [r4, #16]
 800d130:	1a98      	subs	r0, r3, r2
 800d132:	6963      	ldr	r3, [r4, #20]
 800d134:	b2f6      	uxtb	r6, r6
 800d136:	4283      	cmp	r3, r0
 800d138:	4637      	mov	r7, r6
 800d13a:	dc05      	bgt.n	800d148 <__swbuf_r+0x4e>
 800d13c:	4621      	mov	r1, r4
 800d13e:	4628      	mov	r0, r5
 800d140:	f000 fed0 	bl	800dee4 <_fflush_r>
 800d144:	2800      	cmp	r0, #0
 800d146:	d1ed      	bne.n	800d124 <__swbuf_r+0x2a>
 800d148:	68a3      	ldr	r3, [r4, #8]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	60a3      	str	r3, [r4, #8]
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	6022      	str	r2, [r4, #0]
 800d154:	701e      	strb	r6, [r3, #0]
 800d156:	6962      	ldr	r2, [r4, #20]
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d004      	beq.n	800d168 <__swbuf_r+0x6e>
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	07db      	lsls	r3, r3, #31
 800d162:	d5e1      	bpl.n	800d128 <__swbuf_r+0x2e>
 800d164:	2e0a      	cmp	r6, #10
 800d166:	d1df      	bne.n	800d128 <__swbuf_r+0x2e>
 800d168:	4621      	mov	r1, r4
 800d16a:	4628      	mov	r0, r5
 800d16c:	f000 feba 	bl	800dee4 <_fflush_r>
 800d170:	2800      	cmp	r0, #0
 800d172:	d0d9      	beq.n	800d128 <__swbuf_r+0x2e>
 800d174:	e7d6      	b.n	800d124 <__swbuf_r+0x2a>
	...

0800d178 <__swsetup_r>:
 800d178:	b538      	push	{r3, r4, r5, lr}
 800d17a:	4b29      	ldr	r3, [pc, #164]	@ (800d220 <__swsetup_r+0xa8>)
 800d17c:	4605      	mov	r5, r0
 800d17e:	6818      	ldr	r0, [r3, #0]
 800d180:	460c      	mov	r4, r1
 800d182:	b118      	cbz	r0, 800d18c <__swsetup_r+0x14>
 800d184:	6a03      	ldr	r3, [r0, #32]
 800d186:	b90b      	cbnz	r3, 800d18c <__swsetup_r+0x14>
 800d188:	f7ff fe7a 	bl	800ce80 <__sinit>
 800d18c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d190:	0719      	lsls	r1, r3, #28
 800d192:	d422      	bmi.n	800d1da <__swsetup_r+0x62>
 800d194:	06da      	lsls	r2, r3, #27
 800d196:	d407      	bmi.n	800d1a8 <__swsetup_r+0x30>
 800d198:	2209      	movs	r2, #9
 800d19a:	602a      	str	r2, [r5, #0]
 800d19c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1a0:	81a3      	strh	r3, [r4, #12]
 800d1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a6:	e033      	b.n	800d210 <__swsetup_r+0x98>
 800d1a8:	0758      	lsls	r0, r3, #29
 800d1aa:	d512      	bpl.n	800d1d2 <__swsetup_r+0x5a>
 800d1ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1ae:	b141      	cbz	r1, 800d1c2 <__swsetup_r+0x4a>
 800d1b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1b4:	4299      	cmp	r1, r3
 800d1b6:	d002      	beq.n	800d1be <__swsetup_r+0x46>
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f000 f8ef 	bl	800d39c <_free_r>
 800d1be:	2300      	movs	r3, #0
 800d1c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1c8:	81a3      	strh	r3, [r4, #12]
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	6063      	str	r3, [r4, #4]
 800d1ce:	6923      	ldr	r3, [r4, #16]
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	f043 0308 	orr.w	r3, r3, #8
 800d1d8:	81a3      	strh	r3, [r4, #12]
 800d1da:	6923      	ldr	r3, [r4, #16]
 800d1dc:	b94b      	cbnz	r3, 800d1f2 <__swsetup_r+0x7a>
 800d1de:	89a3      	ldrh	r3, [r4, #12]
 800d1e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1e8:	d003      	beq.n	800d1f2 <__swsetup_r+0x7a>
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f000 fec7 	bl	800df80 <__smakebuf_r>
 800d1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f6:	f013 0201 	ands.w	r2, r3, #1
 800d1fa:	d00a      	beq.n	800d212 <__swsetup_r+0x9a>
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	60a2      	str	r2, [r4, #8]
 800d200:	6962      	ldr	r2, [r4, #20]
 800d202:	4252      	negs	r2, r2
 800d204:	61a2      	str	r2, [r4, #24]
 800d206:	6922      	ldr	r2, [r4, #16]
 800d208:	b942      	cbnz	r2, 800d21c <__swsetup_r+0xa4>
 800d20a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d20e:	d1c5      	bne.n	800d19c <__swsetup_r+0x24>
 800d210:	bd38      	pop	{r3, r4, r5, pc}
 800d212:	0799      	lsls	r1, r3, #30
 800d214:	bf58      	it	pl
 800d216:	6962      	ldrpl	r2, [r4, #20]
 800d218:	60a2      	str	r2, [r4, #8]
 800d21a:	e7f4      	b.n	800d206 <__swsetup_r+0x8e>
 800d21c:	2000      	movs	r0, #0
 800d21e:	e7f7      	b.n	800d210 <__swsetup_r+0x98>
 800d220:	20000024 	.word	0x20000024

0800d224 <memset>:
 800d224:	4402      	add	r2, r0
 800d226:	4603      	mov	r3, r0
 800d228:	4293      	cmp	r3, r2
 800d22a:	d100      	bne.n	800d22e <memset+0xa>
 800d22c:	4770      	bx	lr
 800d22e:	f803 1b01 	strb.w	r1, [r3], #1
 800d232:	e7f9      	b.n	800d228 <memset+0x4>

0800d234 <strncpy>:
 800d234:	b510      	push	{r4, lr}
 800d236:	3901      	subs	r1, #1
 800d238:	4603      	mov	r3, r0
 800d23a:	b132      	cbz	r2, 800d24a <strncpy+0x16>
 800d23c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d240:	f803 4b01 	strb.w	r4, [r3], #1
 800d244:	3a01      	subs	r2, #1
 800d246:	2c00      	cmp	r4, #0
 800d248:	d1f7      	bne.n	800d23a <strncpy+0x6>
 800d24a:	441a      	add	r2, r3
 800d24c:	2100      	movs	r1, #0
 800d24e:	4293      	cmp	r3, r2
 800d250:	d100      	bne.n	800d254 <strncpy+0x20>
 800d252:	bd10      	pop	{r4, pc}
 800d254:	f803 1b01 	strb.w	r1, [r3], #1
 800d258:	e7f9      	b.n	800d24e <strncpy+0x1a>

0800d25a <strstr>:
 800d25a:	780a      	ldrb	r2, [r1, #0]
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	b96a      	cbnz	r2, 800d27c <strstr+0x22>
 800d260:	bd70      	pop	{r4, r5, r6, pc}
 800d262:	429a      	cmp	r2, r3
 800d264:	d109      	bne.n	800d27a <strstr+0x20>
 800d266:	460c      	mov	r4, r1
 800d268:	4605      	mov	r5, r0
 800d26a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d0f6      	beq.n	800d260 <strstr+0x6>
 800d272:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d276:	429e      	cmp	r6, r3
 800d278:	d0f7      	beq.n	800d26a <strstr+0x10>
 800d27a:	3001      	adds	r0, #1
 800d27c:	7803      	ldrb	r3, [r0, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1ef      	bne.n	800d262 <strstr+0x8>
 800d282:	4618      	mov	r0, r3
 800d284:	e7ec      	b.n	800d260 <strstr+0x6>
	...

0800d288 <_close_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d06      	ldr	r5, [pc, #24]	@ (800d2a4 <_close_r+0x1c>)
 800d28c:	2300      	movs	r3, #0
 800d28e:	4604      	mov	r4, r0
 800d290:	4608      	mov	r0, r1
 800d292:	602b      	str	r3, [r5, #0]
 800d294:	f7f5 fa5c 	bl	8002750 <_close>
 800d298:	1c43      	adds	r3, r0, #1
 800d29a:	d102      	bne.n	800d2a2 <_close_r+0x1a>
 800d29c:	682b      	ldr	r3, [r5, #0]
 800d29e:	b103      	cbz	r3, 800d2a2 <_close_r+0x1a>
 800d2a0:	6023      	str	r3, [r4, #0]
 800d2a2:	bd38      	pop	{r3, r4, r5, pc}
 800d2a4:	200046f0 	.word	0x200046f0

0800d2a8 <_lseek_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4d07      	ldr	r5, [pc, #28]	@ (800d2c8 <_lseek_r+0x20>)
 800d2ac:	4604      	mov	r4, r0
 800d2ae:	4608      	mov	r0, r1
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	602a      	str	r2, [r5, #0]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	f7f5 fa71 	bl	800279e <_lseek>
 800d2bc:	1c43      	adds	r3, r0, #1
 800d2be:	d102      	bne.n	800d2c6 <_lseek_r+0x1e>
 800d2c0:	682b      	ldr	r3, [r5, #0]
 800d2c2:	b103      	cbz	r3, 800d2c6 <_lseek_r+0x1e>
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	bd38      	pop	{r3, r4, r5, pc}
 800d2c8:	200046f0 	.word	0x200046f0

0800d2cc <_read_r>:
 800d2cc:	b538      	push	{r3, r4, r5, lr}
 800d2ce:	4d07      	ldr	r5, [pc, #28]	@ (800d2ec <_read_r+0x20>)
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	602a      	str	r2, [r5, #0]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f7f5 f9ff 	bl	80026de <_read>
 800d2e0:	1c43      	adds	r3, r0, #1
 800d2e2:	d102      	bne.n	800d2ea <_read_r+0x1e>
 800d2e4:	682b      	ldr	r3, [r5, #0]
 800d2e6:	b103      	cbz	r3, 800d2ea <_read_r+0x1e>
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	bd38      	pop	{r3, r4, r5, pc}
 800d2ec:	200046f0 	.word	0x200046f0

0800d2f0 <_write_r>:
 800d2f0:	b538      	push	{r3, r4, r5, lr}
 800d2f2:	4d07      	ldr	r5, [pc, #28]	@ (800d310 <_write_r+0x20>)
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	4608      	mov	r0, r1
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	602a      	str	r2, [r5, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	f7f5 fa0a 	bl	8002718 <_write>
 800d304:	1c43      	adds	r3, r0, #1
 800d306:	d102      	bne.n	800d30e <_write_r+0x1e>
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	b103      	cbz	r3, 800d30e <_write_r+0x1e>
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	bd38      	pop	{r3, r4, r5, pc}
 800d310:	200046f0 	.word	0x200046f0

0800d314 <__errno>:
 800d314:	4b01      	ldr	r3, [pc, #4]	@ (800d31c <__errno+0x8>)
 800d316:	6818      	ldr	r0, [r3, #0]
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20000024 	.word	0x20000024

0800d320 <__libc_init_array>:
 800d320:	b570      	push	{r4, r5, r6, lr}
 800d322:	4d0d      	ldr	r5, [pc, #52]	@ (800d358 <__libc_init_array+0x38>)
 800d324:	4c0d      	ldr	r4, [pc, #52]	@ (800d35c <__libc_init_array+0x3c>)
 800d326:	1b64      	subs	r4, r4, r5
 800d328:	10a4      	asrs	r4, r4, #2
 800d32a:	2600      	movs	r6, #0
 800d32c:	42a6      	cmp	r6, r4
 800d32e:	d109      	bne.n	800d344 <__libc_init_array+0x24>
 800d330:	4d0b      	ldr	r5, [pc, #44]	@ (800d360 <__libc_init_array+0x40>)
 800d332:	4c0c      	ldr	r4, [pc, #48]	@ (800d364 <__libc_init_array+0x44>)
 800d334:	f000 fee2 	bl	800e0fc <_init>
 800d338:	1b64      	subs	r4, r4, r5
 800d33a:	10a4      	asrs	r4, r4, #2
 800d33c:	2600      	movs	r6, #0
 800d33e:	42a6      	cmp	r6, r4
 800d340:	d105      	bne.n	800d34e <__libc_init_array+0x2e>
 800d342:	bd70      	pop	{r4, r5, r6, pc}
 800d344:	f855 3b04 	ldr.w	r3, [r5], #4
 800d348:	4798      	blx	r3
 800d34a:	3601      	adds	r6, #1
 800d34c:	e7ee      	b.n	800d32c <__libc_init_array+0xc>
 800d34e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d352:	4798      	blx	r3
 800d354:	3601      	adds	r6, #1
 800d356:	e7f2      	b.n	800d33e <__libc_init_array+0x1e>
 800d358:	0800f0c8 	.word	0x0800f0c8
 800d35c:	0800f0c8 	.word	0x0800f0c8
 800d360:	0800f0c8 	.word	0x0800f0c8
 800d364:	0800f0cc 	.word	0x0800f0cc

0800d368 <__retarget_lock_init_recursive>:
 800d368:	4770      	bx	lr

0800d36a <__retarget_lock_acquire_recursive>:
 800d36a:	4770      	bx	lr

0800d36c <__retarget_lock_release_recursive>:
 800d36c:	4770      	bx	lr

0800d36e <strcpy>:
 800d36e:	4603      	mov	r3, r0
 800d370:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d374:	f803 2b01 	strb.w	r2, [r3], #1
 800d378:	2a00      	cmp	r2, #0
 800d37a:	d1f9      	bne.n	800d370 <strcpy+0x2>
 800d37c:	4770      	bx	lr

0800d37e <memcpy>:
 800d37e:	440a      	add	r2, r1
 800d380:	4291      	cmp	r1, r2
 800d382:	f100 33ff 	add.w	r3, r0, #4294967295
 800d386:	d100      	bne.n	800d38a <memcpy+0xc>
 800d388:	4770      	bx	lr
 800d38a:	b510      	push	{r4, lr}
 800d38c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d390:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d394:	4291      	cmp	r1, r2
 800d396:	d1f9      	bne.n	800d38c <memcpy+0xe>
 800d398:	bd10      	pop	{r4, pc}
	...

0800d39c <_free_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4605      	mov	r5, r0
 800d3a0:	2900      	cmp	r1, #0
 800d3a2:	d041      	beq.n	800d428 <_free_r+0x8c>
 800d3a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a8:	1f0c      	subs	r4, r1, #4
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	bfb8      	it	lt
 800d3ae:	18e4      	addlt	r4, r4, r3
 800d3b0:	f000 f8e0 	bl	800d574 <__malloc_lock>
 800d3b4:	4a1d      	ldr	r2, [pc, #116]	@ (800d42c <_free_r+0x90>)
 800d3b6:	6813      	ldr	r3, [r2, #0]
 800d3b8:	b933      	cbnz	r3, 800d3c8 <_free_r+0x2c>
 800d3ba:	6063      	str	r3, [r4, #4]
 800d3bc:	6014      	str	r4, [r2, #0]
 800d3be:	4628      	mov	r0, r5
 800d3c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3c4:	f000 b8dc 	b.w	800d580 <__malloc_unlock>
 800d3c8:	42a3      	cmp	r3, r4
 800d3ca:	d908      	bls.n	800d3de <_free_r+0x42>
 800d3cc:	6820      	ldr	r0, [r4, #0]
 800d3ce:	1821      	adds	r1, r4, r0
 800d3d0:	428b      	cmp	r3, r1
 800d3d2:	bf01      	itttt	eq
 800d3d4:	6819      	ldreq	r1, [r3, #0]
 800d3d6:	685b      	ldreq	r3, [r3, #4]
 800d3d8:	1809      	addeq	r1, r1, r0
 800d3da:	6021      	streq	r1, [r4, #0]
 800d3dc:	e7ed      	b.n	800d3ba <_free_r+0x1e>
 800d3de:	461a      	mov	r2, r3
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	b10b      	cbz	r3, 800d3e8 <_free_r+0x4c>
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	d9fa      	bls.n	800d3de <_free_r+0x42>
 800d3e8:	6811      	ldr	r1, [r2, #0]
 800d3ea:	1850      	adds	r0, r2, r1
 800d3ec:	42a0      	cmp	r0, r4
 800d3ee:	d10b      	bne.n	800d408 <_free_r+0x6c>
 800d3f0:	6820      	ldr	r0, [r4, #0]
 800d3f2:	4401      	add	r1, r0
 800d3f4:	1850      	adds	r0, r2, r1
 800d3f6:	4283      	cmp	r3, r0
 800d3f8:	6011      	str	r1, [r2, #0]
 800d3fa:	d1e0      	bne.n	800d3be <_free_r+0x22>
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	6053      	str	r3, [r2, #4]
 800d402:	4408      	add	r0, r1
 800d404:	6010      	str	r0, [r2, #0]
 800d406:	e7da      	b.n	800d3be <_free_r+0x22>
 800d408:	d902      	bls.n	800d410 <_free_r+0x74>
 800d40a:	230c      	movs	r3, #12
 800d40c:	602b      	str	r3, [r5, #0]
 800d40e:	e7d6      	b.n	800d3be <_free_r+0x22>
 800d410:	6820      	ldr	r0, [r4, #0]
 800d412:	1821      	adds	r1, r4, r0
 800d414:	428b      	cmp	r3, r1
 800d416:	bf04      	itt	eq
 800d418:	6819      	ldreq	r1, [r3, #0]
 800d41a:	685b      	ldreq	r3, [r3, #4]
 800d41c:	6063      	str	r3, [r4, #4]
 800d41e:	bf04      	itt	eq
 800d420:	1809      	addeq	r1, r1, r0
 800d422:	6021      	streq	r1, [r4, #0]
 800d424:	6054      	str	r4, [r2, #4]
 800d426:	e7ca      	b.n	800d3be <_free_r+0x22>
 800d428:	bd38      	pop	{r3, r4, r5, pc}
 800d42a:	bf00      	nop
 800d42c:	200046fc 	.word	0x200046fc

0800d430 <sbrk_aligned>:
 800d430:	b570      	push	{r4, r5, r6, lr}
 800d432:	4e0f      	ldr	r6, [pc, #60]	@ (800d470 <sbrk_aligned+0x40>)
 800d434:	460c      	mov	r4, r1
 800d436:	6831      	ldr	r1, [r6, #0]
 800d438:	4605      	mov	r5, r0
 800d43a:	b911      	cbnz	r1, 800d442 <sbrk_aligned+0x12>
 800d43c:	f000 fe18 	bl	800e070 <_sbrk_r>
 800d440:	6030      	str	r0, [r6, #0]
 800d442:	4621      	mov	r1, r4
 800d444:	4628      	mov	r0, r5
 800d446:	f000 fe13 	bl	800e070 <_sbrk_r>
 800d44a:	1c43      	adds	r3, r0, #1
 800d44c:	d103      	bne.n	800d456 <sbrk_aligned+0x26>
 800d44e:	f04f 34ff 	mov.w	r4, #4294967295
 800d452:	4620      	mov	r0, r4
 800d454:	bd70      	pop	{r4, r5, r6, pc}
 800d456:	1cc4      	adds	r4, r0, #3
 800d458:	f024 0403 	bic.w	r4, r4, #3
 800d45c:	42a0      	cmp	r0, r4
 800d45e:	d0f8      	beq.n	800d452 <sbrk_aligned+0x22>
 800d460:	1a21      	subs	r1, r4, r0
 800d462:	4628      	mov	r0, r5
 800d464:	f000 fe04 	bl	800e070 <_sbrk_r>
 800d468:	3001      	adds	r0, #1
 800d46a:	d1f2      	bne.n	800d452 <sbrk_aligned+0x22>
 800d46c:	e7ef      	b.n	800d44e <sbrk_aligned+0x1e>
 800d46e:	bf00      	nop
 800d470:	200046f8 	.word	0x200046f8

0800d474 <_malloc_r>:
 800d474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d478:	1ccd      	adds	r5, r1, #3
 800d47a:	f025 0503 	bic.w	r5, r5, #3
 800d47e:	3508      	adds	r5, #8
 800d480:	2d0c      	cmp	r5, #12
 800d482:	bf38      	it	cc
 800d484:	250c      	movcc	r5, #12
 800d486:	2d00      	cmp	r5, #0
 800d488:	4606      	mov	r6, r0
 800d48a:	db01      	blt.n	800d490 <_malloc_r+0x1c>
 800d48c:	42a9      	cmp	r1, r5
 800d48e:	d904      	bls.n	800d49a <_malloc_r+0x26>
 800d490:	230c      	movs	r3, #12
 800d492:	6033      	str	r3, [r6, #0]
 800d494:	2000      	movs	r0, #0
 800d496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d49a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d570 <_malloc_r+0xfc>
 800d49e:	f000 f869 	bl	800d574 <__malloc_lock>
 800d4a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4a6:	461c      	mov	r4, r3
 800d4a8:	bb44      	cbnz	r4, 800d4fc <_malloc_r+0x88>
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f7ff ffbf 	bl	800d430 <sbrk_aligned>
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	d158      	bne.n	800d56a <_malloc_r+0xf6>
 800d4b8:	f8d8 4000 	ldr.w	r4, [r8]
 800d4bc:	4627      	mov	r7, r4
 800d4be:	2f00      	cmp	r7, #0
 800d4c0:	d143      	bne.n	800d54a <_malloc_r+0xd6>
 800d4c2:	2c00      	cmp	r4, #0
 800d4c4:	d04b      	beq.n	800d55e <_malloc_r+0xea>
 800d4c6:	6823      	ldr	r3, [r4, #0]
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	eb04 0903 	add.w	r9, r4, r3
 800d4d0:	f000 fdce 	bl	800e070 <_sbrk_r>
 800d4d4:	4581      	cmp	r9, r0
 800d4d6:	d142      	bne.n	800d55e <_malloc_r+0xea>
 800d4d8:	6821      	ldr	r1, [r4, #0]
 800d4da:	1a6d      	subs	r5, r5, r1
 800d4dc:	4629      	mov	r1, r5
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f7ff ffa6 	bl	800d430 <sbrk_aligned>
 800d4e4:	3001      	adds	r0, #1
 800d4e6:	d03a      	beq.n	800d55e <_malloc_r+0xea>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	442b      	add	r3, r5
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	f8d8 3000 	ldr.w	r3, [r8]
 800d4f2:	685a      	ldr	r2, [r3, #4]
 800d4f4:	bb62      	cbnz	r2, 800d550 <_malloc_r+0xdc>
 800d4f6:	f8c8 7000 	str.w	r7, [r8]
 800d4fa:	e00f      	b.n	800d51c <_malloc_r+0xa8>
 800d4fc:	6822      	ldr	r2, [r4, #0]
 800d4fe:	1b52      	subs	r2, r2, r5
 800d500:	d420      	bmi.n	800d544 <_malloc_r+0xd0>
 800d502:	2a0b      	cmp	r2, #11
 800d504:	d917      	bls.n	800d536 <_malloc_r+0xc2>
 800d506:	1961      	adds	r1, r4, r5
 800d508:	42a3      	cmp	r3, r4
 800d50a:	6025      	str	r5, [r4, #0]
 800d50c:	bf18      	it	ne
 800d50e:	6059      	strne	r1, [r3, #4]
 800d510:	6863      	ldr	r3, [r4, #4]
 800d512:	bf08      	it	eq
 800d514:	f8c8 1000 	streq.w	r1, [r8]
 800d518:	5162      	str	r2, [r4, r5]
 800d51a:	604b      	str	r3, [r1, #4]
 800d51c:	4630      	mov	r0, r6
 800d51e:	f000 f82f 	bl	800d580 <__malloc_unlock>
 800d522:	f104 000b 	add.w	r0, r4, #11
 800d526:	1d23      	adds	r3, r4, #4
 800d528:	f020 0007 	bic.w	r0, r0, #7
 800d52c:	1ac2      	subs	r2, r0, r3
 800d52e:	bf1c      	itt	ne
 800d530:	1a1b      	subne	r3, r3, r0
 800d532:	50a3      	strne	r3, [r4, r2]
 800d534:	e7af      	b.n	800d496 <_malloc_r+0x22>
 800d536:	6862      	ldr	r2, [r4, #4]
 800d538:	42a3      	cmp	r3, r4
 800d53a:	bf0c      	ite	eq
 800d53c:	f8c8 2000 	streq.w	r2, [r8]
 800d540:	605a      	strne	r2, [r3, #4]
 800d542:	e7eb      	b.n	800d51c <_malloc_r+0xa8>
 800d544:	4623      	mov	r3, r4
 800d546:	6864      	ldr	r4, [r4, #4]
 800d548:	e7ae      	b.n	800d4a8 <_malloc_r+0x34>
 800d54a:	463c      	mov	r4, r7
 800d54c:	687f      	ldr	r7, [r7, #4]
 800d54e:	e7b6      	b.n	800d4be <_malloc_r+0x4a>
 800d550:	461a      	mov	r2, r3
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	42a3      	cmp	r3, r4
 800d556:	d1fb      	bne.n	800d550 <_malloc_r+0xdc>
 800d558:	2300      	movs	r3, #0
 800d55a:	6053      	str	r3, [r2, #4]
 800d55c:	e7de      	b.n	800d51c <_malloc_r+0xa8>
 800d55e:	230c      	movs	r3, #12
 800d560:	6033      	str	r3, [r6, #0]
 800d562:	4630      	mov	r0, r6
 800d564:	f000 f80c 	bl	800d580 <__malloc_unlock>
 800d568:	e794      	b.n	800d494 <_malloc_r+0x20>
 800d56a:	6005      	str	r5, [r0, #0]
 800d56c:	e7d6      	b.n	800d51c <_malloc_r+0xa8>
 800d56e:	bf00      	nop
 800d570:	200046fc 	.word	0x200046fc

0800d574 <__malloc_lock>:
 800d574:	4801      	ldr	r0, [pc, #4]	@ (800d57c <__malloc_lock+0x8>)
 800d576:	f7ff bef8 	b.w	800d36a <__retarget_lock_acquire_recursive>
 800d57a:	bf00      	nop
 800d57c:	200046f4 	.word	0x200046f4

0800d580 <__malloc_unlock>:
 800d580:	4801      	ldr	r0, [pc, #4]	@ (800d588 <__malloc_unlock+0x8>)
 800d582:	f7ff bef3 	b.w	800d36c <__retarget_lock_release_recursive>
 800d586:	bf00      	nop
 800d588:	200046f4 	.word	0x200046f4

0800d58c <__ssputs_r>:
 800d58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d590:	688e      	ldr	r6, [r1, #8]
 800d592:	461f      	mov	r7, r3
 800d594:	42be      	cmp	r6, r7
 800d596:	680b      	ldr	r3, [r1, #0]
 800d598:	4682      	mov	sl, r0
 800d59a:	460c      	mov	r4, r1
 800d59c:	4690      	mov	r8, r2
 800d59e:	d82d      	bhi.n	800d5fc <__ssputs_r+0x70>
 800d5a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5a8:	d026      	beq.n	800d5f8 <__ssputs_r+0x6c>
 800d5aa:	6965      	ldr	r5, [r4, #20]
 800d5ac:	6909      	ldr	r1, [r1, #16]
 800d5ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5b2:	eba3 0901 	sub.w	r9, r3, r1
 800d5b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5ba:	1c7b      	adds	r3, r7, #1
 800d5bc:	444b      	add	r3, r9
 800d5be:	106d      	asrs	r5, r5, #1
 800d5c0:	429d      	cmp	r5, r3
 800d5c2:	bf38      	it	cc
 800d5c4:	461d      	movcc	r5, r3
 800d5c6:	0553      	lsls	r3, r2, #21
 800d5c8:	d527      	bpl.n	800d61a <__ssputs_r+0x8e>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	f7ff ff52 	bl	800d474 <_malloc_r>
 800d5d0:	4606      	mov	r6, r0
 800d5d2:	b360      	cbz	r0, 800d62e <__ssputs_r+0xa2>
 800d5d4:	6921      	ldr	r1, [r4, #16]
 800d5d6:	464a      	mov	r2, r9
 800d5d8:	f7ff fed1 	bl	800d37e <memcpy>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5e6:	81a3      	strh	r3, [r4, #12]
 800d5e8:	6126      	str	r6, [r4, #16]
 800d5ea:	6165      	str	r5, [r4, #20]
 800d5ec:	444e      	add	r6, r9
 800d5ee:	eba5 0509 	sub.w	r5, r5, r9
 800d5f2:	6026      	str	r6, [r4, #0]
 800d5f4:	60a5      	str	r5, [r4, #8]
 800d5f6:	463e      	mov	r6, r7
 800d5f8:	42be      	cmp	r6, r7
 800d5fa:	d900      	bls.n	800d5fe <__ssputs_r+0x72>
 800d5fc:	463e      	mov	r6, r7
 800d5fe:	6820      	ldr	r0, [r4, #0]
 800d600:	4632      	mov	r2, r6
 800d602:	4641      	mov	r1, r8
 800d604:	f000 fcf8 	bl	800dff8 <memmove>
 800d608:	68a3      	ldr	r3, [r4, #8]
 800d60a:	1b9b      	subs	r3, r3, r6
 800d60c:	60a3      	str	r3, [r4, #8]
 800d60e:	6823      	ldr	r3, [r4, #0]
 800d610:	4433      	add	r3, r6
 800d612:	6023      	str	r3, [r4, #0]
 800d614:	2000      	movs	r0, #0
 800d616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d61a:	462a      	mov	r2, r5
 800d61c:	f000 fd38 	bl	800e090 <_realloc_r>
 800d620:	4606      	mov	r6, r0
 800d622:	2800      	cmp	r0, #0
 800d624:	d1e0      	bne.n	800d5e8 <__ssputs_r+0x5c>
 800d626:	6921      	ldr	r1, [r4, #16]
 800d628:	4650      	mov	r0, sl
 800d62a:	f7ff feb7 	bl	800d39c <_free_r>
 800d62e:	230c      	movs	r3, #12
 800d630:	f8ca 3000 	str.w	r3, [sl]
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d63a:	81a3      	strh	r3, [r4, #12]
 800d63c:	f04f 30ff 	mov.w	r0, #4294967295
 800d640:	e7e9      	b.n	800d616 <__ssputs_r+0x8a>
	...

0800d644 <_svfiprintf_r>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	4698      	mov	r8, r3
 800d64a:	898b      	ldrh	r3, [r1, #12]
 800d64c:	061b      	lsls	r3, r3, #24
 800d64e:	b09d      	sub	sp, #116	@ 0x74
 800d650:	4607      	mov	r7, r0
 800d652:	460d      	mov	r5, r1
 800d654:	4614      	mov	r4, r2
 800d656:	d510      	bpl.n	800d67a <_svfiprintf_r+0x36>
 800d658:	690b      	ldr	r3, [r1, #16]
 800d65a:	b973      	cbnz	r3, 800d67a <_svfiprintf_r+0x36>
 800d65c:	2140      	movs	r1, #64	@ 0x40
 800d65e:	f7ff ff09 	bl	800d474 <_malloc_r>
 800d662:	6028      	str	r0, [r5, #0]
 800d664:	6128      	str	r0, [r5, #16]
 800d666:	b930      	cbnz	r0, 800d676 <_svfiprintf_r+0x32>
 800d668:	230c      	movs	r3, #12
 800d66a:	603b      	str	r3, [r7, #0]
 800d66c:	f04f 30ff 	mov.w	r0, #4294967295
 800d670:	b01d      	add	sp, #116	@ 0x74
 800d672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d676:	2340      	movs	r3, #64	@ 0x40
 800d678:	616b      	str	r3, [r5, #20]
 800d67a:	2300      	movs	r3, #0
 800d67c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d67e:	2320      	movs	r3, #32
 800d680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d684:	f8cd 800c 	str.w	r8, [sp, #12]
 800d688:	2330      	movs	r3, #48	@ 0x30
 800d68a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d828 <_svfiprintf_r+0x1e4>
 800d68e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d692:	f04f 0901 	mov.w	r9, #1
 800d696:	4623      	mov	r3, r4
 800d698:	469a      	mov	sl, r3
 800d69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d69e:	b10a      	cbz	r2, 800d6a4 <_svfiprintf_r+0x60>
 800d6a0:	2a25      	cmp	r2, #37	@ 0x25
 800d6a2:	d1f9      	bne.n	800d698 <_svfiprintf_r+0x54>
 800d6a4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6a8:	d00b      	beq.n	800d6c2 <_svfiprintf_r+0x7e>
 800d6aa:	465b      	mov	r3, fp
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	4629      	mov	r1, r5
 800d6b0:	4638      	mov	r0, r7
 800d6b2:	f7ff ff6b 	bl	800d58c <__ssputs_r>
 800d6b6:	3001      	adds	r0, #1
 800d6b8:	f000 80a7 	beq.w	800d80a <_svfiprintf_r+0x1c6>
 800d6bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6be:	445a      	add	r2, fp
 800d6c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 809f 	beq.w	800d80a <_svfiprintf_r+0x1c6>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6d6:	f10a 0a01 	add.w	sl, sl, #1
 800d6da:	9304      	str	r3, [sp, #16]
 800d6dc:	9307      	str	r3, [sp, #28]
 800d6de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6e4:	4654      	mov	r4, sl
 800d6e6:	2205      	movs	r2, #5
 800d6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ec:	484e      	ldr	r0, [pc, #312]	@ (800d828 <_svfiprintf_r+0x1e4>)
 800d6ee:	f7f2 fd8f 	bl	8000210 <memchr>
 800d6f2:	9a04      	ldr	r2, [sp, #16]
 800d6f4:	b9d8      	cbnz	r0, 800d72e <_svfiprintf_r+0xea>
 800d6f6:	06d0      	lsls	r0, r2, #27
 800d6f8:	bf44      	itt	mi
 800d6fa:	2320      	movmi	r3, #32
 800d6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d700:	0711      	lsls	r1, r2, #28
 800d702:	bf44      	itt	mi
 800d704:	232b      	movmi	r3, #43	@ 0x2b
 800d706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d70a:	f89a 3000 	ldrb.w	r3, [sl]
 800d70e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d710:	d015      	beq.n	800d73e <_svfiprintf_r+0xfa>
 800d712:	9a07      	ldr	r2, [sp, #28]
 800d714:	4654      	mov	r4, sl
 800d716:	2000      	movs	r0, #0
 800d718:	f04f 0c0a 	mov.w	ip, #10
 800d71c:	4621      	mov	r1, r4
 800d71e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d722:	3b30      	subs	r3, #48	@ 0x30
 800d724:	2b09      	cmp	r3, #9
 800d726:	d94b      	bls.n	800d7c0 <_svfiprintf_r+0x17c>
 800d728:	b1b0      	cbz	r0, 800d758 <_svfiprintf_r+0x114>
 800d72a:	9207      	str	r2, [sp, #28]
 800d72c:	e014      	b.n	800d758 <_svfiprintf_r+0x114>
 800d72e:	eba0 0308 	sub.w	r3, r0, r8
 800d732:	fa09 f303 	lsl.w	r3, r9, r3
 800d736:	4313      	orrs	r3, r2
 800d738:	9304      	str	r3, [sp, #16]
 800d73a:	46a2      	mov	sl, r4
 800d73c:	e7d2      	b.n	800d6e4 <_svfiprintf_r+0xa0>
 800d73e:	9b03      	ldr	r3, [sp, #12]
 800d740:	1d19      	adds	r1, r3, #4
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	9103      	str	r1, [sp, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	bfbb      	ittet	lt
 800d74a:	425b      	neglt	r3, r3
 800d74c:	f042 0202 	orrlt.w	r2, r2, #2
 800d750:	9307      	strge	r3, [sp, #28]
 800d752:	9307      	strlt	r3, [sp, #28]
 800d754:	bfb8      	it	lt
 800d756:	9204      	strlt	r2, [sp, #16]
 800d758:	7823      	ldrb	r3, [r4, #0]
 800d75a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d75c:	d10a      	bne.n	800d774 <_svfiprintf_r+0x130>
 800d75e:	7863      	ldrb	r3, [r4, #1]
 800d760:	2b2a      	cmp	r3, #42	@ 0x2a
 800d762:	d132      	bne.n	800d7ca <_svfiprintf_r+0x186>
 800d764:	9b03      	ldr	r3, [sp, #12]
 800d766:	1d1a      	adds	r2, r3, #4
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	9203      	str	r2, [sp, #12]
 800d76c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d770:	3402      	adds	r4, #2
 800d772:	9305      	str	r3, [sp, #20]
 800d774:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d838 <_svfiprintf_r+0x1f4>
 800d778:	7821      	ldrb	r1, [r4, #0]
 800d77a:	2203      	movs	r2, #3
 800d77c:	4650      	mov	r0, sl
 800d77e:	f7f2 fd47 	bl	8000210 <memchr>
 800d782:	b138      	cbz	r0, 800d794 <_svfiprintf_r+0x150>
 800d784:	9b04      	ldr	r3, [sp, #16]
 800d786:	eba0 000a 	sub.w	r0, r0, sl
 800d78a:	2240      	movs	r2, #64	@ 0x40
 800d78c:	4082      	lsls	r2, r0
 800d78e:	4313      	orrs	r3, r2
 800d790:	3401      	adds	r4, #1
 800d792:	9304      	str	r3, [sp, #16]
 800d794:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d798:	4824      	ldr	r0, [pc, #144]	@ (800d82c <_svfiprintf_r+0x1e8>)
 800d79a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d79e:	2206      	movs	r2, #6
 800d7a0:	f7f2 fd36 	bl	8000210 <memchr>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d036      	beq.n	800d816 <_svfiprintf_r+0x1d2>
 800d7a8:	4b21      	ldr	r3, [pc, #132]	@ (800d830 <_svfiprintf_r+0x1ec>)
 800d7aa:	bb1b      	cbnz	r3, 800d7f4 <_svfiprintf_r+0x1b0>
 800d7ac:	9b03      	ldr	r3, [sp, #12]
 800d7ae:	3307      	adds	r3, #7
 800d7b0:	f023 0307 	bic.w	r3, r3, #7
 800d7b4:	3308      	adds	r3, #8
 800d7b6:	9303      	str	r3, [sp, #12]
 800d7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ba:	4433      	add	r3, r6
 800d7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7be:	e76a      	b.n	800d696 <_svfiprintf_r+0x52>
 800d7c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	2001      	movs	r0, #1
 800d7c8:	e7a8      	b.n	800d71c <_svfiprintf_r+0xd8>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	3401      	adds	r4, #1
 800d7ce:	9305      	str	r3, [sp, #20]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	f04f 0c0a 	mov.w	ip, #10
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7dc:	3a30      	subs	r2, #48	@ 0x30
 800d7de:	2a09      	cmp	r2, #9
 800d7e0:	d903      	bls.n	800d7ea <_svfiprintf_r+0x1a6>
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d0c6      	beq.n	800d774 <_svfiprintf_r+0x130>
 800d7e6:	9105      	str	r1, [sp, #20]
 800d7e8:	e7c4      	b.n	800d774 <_svfiprintf_r+0x130>
 800d7ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e7f0      	b.n	800d7d6 <_svfiprintf_r+0x192>
 800d7f4:	ab03      	add	r3, sp, #12
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	462a      	mov	r2, r5
 800d7fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d834 <_svfiprintf_r+0x1f0>)
 800d7fc:	a904      	add	r1, sp, #16
 800d7fe:	4638      	mov	r0, r7
 800d800:	f3af 8000 	nop.w
 800d804:	1c42      	adds	r2, r0, #1
 800d806:	4606      	mov	r6, r0
 800d808:	d1d6      	bne.n	800d7b8 <_svfiprintf_r+0x174>
 800d80a:	89ab      	ldrh	r3, [r5, #12]
 800d80c:	065b      	lsls	r3, r3, #25
 800d80e:	f53f af2d 	bmi.w	800d66c <_svfiprintf_r+0x28>
 800d812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d814:	e72c      	b.n	800d670 <_svfiprintf_r+0x2c>
 800d816:	ab03      	add	r3, sp, #12
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	462a      	mov	r2, r5
 800d81c:	4b05      	ldr	r3, [pc, #20]	@ (800d834 <_svfiprintf_r+0x1f0>)
 800d81e:	a904      	add	r1, sp, #16
 800d820:	4638      	mov	r0, r7
 800d822:	f000 f9bb 	bl	800db9c <_printf_i>
 800d826:	e7ed      	b.n	800d804 <_svfiprintf_r+0x1c0>
 800d828:	0800f08c 	.word	0x0800f08c
 800d82c:	0800f096 	.word	0x0800f096
 800d830:	00000000 	.word	0x00000000
 800d834:	0800d58d 	.word	0x0800d58d
 800d838:	0800f092 	.word	0x0800f092

0800d83c <__sfputc_r>:
 800d83c:	6893      	ldr	r3, [r2, #8]
 800d83e:	3b01      	subs	r3, #1
 800d840:	2b00      	cmp	r3, #0
 800d842:	b410      	push	{r4}
 800d844:	6093      	str	r3, [r2, #8]
 800d846:	da08      	bge.n	800d85a <__sfputc_r+0x1e>
 800d848:	6994      	ldr	r4, [r2, #24]
 800d84a:	42a3      	cmp	r3, r4
 800d84c:	db01      	blt.n	800d852 <__sfputc_r+0x16>
 800d84e:	290a      	cmp	r1, #10
 800d850:	d103      	bne.n	800d85a <__sfputc_r+0x1e>
 800d852:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d856:	f7ff bc50 	b.w	800d0fa <__swbuf_r>
 800d85a:	6813      	ldr	r3, [r2, #0]
 800d85c:	1c58      	adds	r0, r3, #1
 800d85e:	6010      	str	r0, [r2, #0]
 800d860:	7019      	strb	r1, [r3, #0]
 800d862:	4608      	mov	r0, r1
 800d864:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <__sfputs_r>:
 800d86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86c:	4606      	mov	r6, r0
 800d86e:	460f      	mov	r7, r1
 800d870:	4614      	mov	r4, r2
 800d872:	18d5      	adds	r5, r2, r3
 800d874:	42ac      	cmp	r4, r5
 800d876:	d101      	bne.n	800d87c <__sfputs_r+0x12>
 800d878:	2000      	movs	r0, #0
 800d87a:	e007      	b.n	800d88c <__sfputs_r+0x22>
 800d87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d880:	463a      	mov	r2, r7
 800d882:	4630      	mov	r0, r6
 800d884:	f7ff ffda 	bl	800d83c <__sfputc_r>
 800d888:	1c43      	adds	r3, r0, #1
 800d88a:	d1f3      	bne.n	800d874 <__sfputs_r+0xa>
 800d88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d890 <_vfiprintf_r>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	460d      	mov	r5, r1
 800d896:	b09d      	sub	sp, #116	@ 0x74
 800d898:	4614      	mov	r4, r2
 800d89a:	4698      	mov	r8, r3
 800d89c:	4606      	mov	r6, r0
 800d89e:	b118      	cbz	r0, 800d8a8 <_vfiprintf_r+0x18>
 800d8a0:	6a03      	ldr	r3, [r0, #32]
 800d8a2:	b90b      	cbnz	r3, 800d8a8 <_vfiprintf_r+0x18>
 800d8a4:	f7ff faec 	bl	800ce80 <__sinit>
 800d8a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8aa:	07d9      	lsls	r1, r3, #31
 800d8ac:	d405      	bmi.n	800d8ba <_vfiprintf_r+0x2a>
 800d8ae:	89ab      	ldrh	r3, [r5, #12]
 800d8b0:	059a      	lsls	r2, r3, #22
 800d8b2:	d402      	bmi.n	800d8ba <_vfiprintf_r+0x2a>
 800d8b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8b6:	f7ff fd58 	bl	800d36a <__retarget_lock_acquire_recursive>
 800d8ba:	89ab      	ldrh	r3, [r5, #12]
 800d8bc:	071b      	lsls	r3, r3, #28
 800d8be:	d501      	bpl.n	800d8c4 <_vfiprintf_r+0x34>
 800d8c0:	692b      	ldr	r3, [r5, #16]
 800d8c2:	b99b      	cbnz	r3, 800d8ec <_vfiprintf_r+0x5c>
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7ff fc56 	bl	800d178 <__swsetup_r>
 800d8cc:	b170      	cbz	r0, 800d8ec <_vfiprintf_r+0x5c>
 800d8ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8d0:	07dc      	lsls	r4, r3, #31
 800d8d2:	d504      	bpl.n	800d8de <_vfiprintf_r+0x4e>
 800d8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d8:	b01d      	add	sp, #116	@ 0x74
 800d8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8de:	89ab      	ldrh	r3, [r5, #12]
 800d8e0:	0598      	lsls	r0, r3, #22
 800d8e2:	d4f7      	bmi.n	800d8d4 <_vfiprintf_r+0x44>
 800d8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8e6:	f7ff fd41 	bl	800d36c <__retarget_lock_release_recursive>
 800d8ea:	e7f3      	b.n	800d8d4 <_vfiprintf_r+0x44>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8f0:	2320      	movs	r3, #32
 800d8f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8fa:	2330      	movs	r3, #48	@ 0x30
 800d8fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800daac <_vfiprintf_r+0x21c>
 800d900:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d904:	f04f 0901 	mov.w	r9, #1
 800d908:	4623      	mov	r3, r4
 800d90a:	469a      	mov	sl, r3
 800d90c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d910:	b10a      	cbz	r2, 800d916 <_vfiprintf_r+0x86>
 800d912:	2a25      	cmp	r2, #37	@ 0x25
 800d914:	d1f9      	bne.n	800d90a <_vfiprintf_r+0x7a>
 800d916:	ebba 0b04 	subs.w	fp, sl, r4
 800d91a:	d00b      	beq.n	800d934 <_vfiprintf_r+0xa4>
 800d91c:	465b      	mov	r3, fp
 800d91e:	4622      	mov	r2, r4
 800d920:	4629      	mov	r1, r5
 800d922:	4630      	mov	r0, r6
 800d924:	f7ff ffa1 	bl	800d86a <__sfputs_r>
 800d928:	3001      	adds	r0, #1
 800d92a:	f000 80a7 	beq.w	800da7c <_vfiprintf_r+0x1ec>
 800d92e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d930:	445a      	add	r2, fp
 800d932:	9209      	str	r2, [sp, #36]	@ 0x24
 800d934:	f89a 3000 	ldrb.w	r3, [sl]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 809f 	beq.w	800da7c <_vfiprintf_r+0x1ec>
 800d93e:	2300      	movs	r3, #0
 800d940:	f04f 32ff 	mov.w	r2, #4294967295
 800d944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d948:	f10a 0a01 	add.w	sl, sl, #1
 800d94c:	9304      	str	r3, [sp, #16]
 800d94e:	9307      	str	r3, [sp, #28]
 800d950:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d954:	931a      	str	r3, [sp, #104]	@ 0x68
 800d956:	4654      	mov	r4, sl
 800d958:	2205      	movs	r2, #5
 800d95a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d95e:	4853      	ldr	r0, [pc, #332]	@ (800daac <_vfiprintf_r+0x21c>)
 800d960:	f7f2 fc56 	bl	8000210 <memchr>
 800d964:	9a04      	ldr	r2, [sp, #16]
 800d966:	b9d8      	cbnz	r0, 800d9a0 <_vfiprintf_r+0x110>
 800d968:	06d1      	lsls	r1, r2, #27
 800d96a:	bf44      	itt	mi
 800d96c:	2320      	movmi	r3, #32
 800d96e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d972:	0713      	lsls	r3, r2, #28
 800d974:	bf44      	itt	mi
 800d976:	232b      	movmi	r3, #43	@ 0x2b
 800d978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d97c:	f89a 3000 	ldrb.w	r3, [sl]
 800d980:	2b2a      	cmp	r3, #42	@ 0x2a
 800d982:	d015      	beq.n	800d9b0 <_vfiprintf_r+0x120>
 800d984:	9a07      	ldr	r2, [sp, #28]
 800d986:	4654      	mov	r4, sl
 800d988:	2000      	movs	r0, #0
 800d98a:	f04f 0c0a 	mov.w	ip, #10
 800d98e:	4621      	mov	r1, r4
 800d990:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d994:	3b30      	subs	r3, #48	@ 0x30
 800d996:	2b09      	cmp	r3, #9
 800d998:	d94b      	bls.n	800da32 <_vfiprintf_r+0x1a2>
 800d99a:	b1b0      	cbz	r0, 800d9ca <_vfiprintf_r+0x13a>
 800d99c:	9207      	str	r2, [sp, #28]
 800d99e:	e014      	b.n	800d9ca <_vfiprintf_r+0x13a>
 800d9a0:	eba0 0308 	sub.w	r3, r0, r8
 800d9a4:	fa09 f303 	lsl.w	r3, r9, r3
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	9304      	str	r3, [sp, #16]
 800d9ac:	46a2      	mov	sl, r4
 800d9ae:	e7d2      	b.n	800d956 <_vfiprintf_r+0xc6>
 800d9b0:	9b03      	ldr	r3, [sp, #12]
 800d9b2:	1d19      	adds	r1, r3, #4
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	9103      	str	r1, [sp, #12]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	bfbb      	ittet	lt
 800d9bc:	425b      	neglt	r3, r3
 800d9be:	f042 0202 	orrlt.w	r2, r2, #2
 800d9c2:	9307      	strge	r3, [sp, #28]
 800d9c4:	9307      	strlt	r3, [sp, #28]
 800d9c6:	bfb8      	it	lt
 800d9c8:	9204      	strlt	r2, [sp, #16]
 800d9ca:	7823      	ldrb	r3, [r4, #0]
 800d9cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9ce:	d10a      	bne.n	800d9e6 <_vfiprintf_r+0x156>
 800d9d0:	7863      	ldrb	r3, [r4, #1]
 800d9d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9d4:	d132      	bne.n	800da3c <_vfiprintf_r+0x1ac>
 800d9d6:	9b03      	ldr	r3, [sp, #12]
 800d9d8:	1d1a      	adds	r2, r3, #4
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	9203      	str	r2, [sp, #12]
 800d9de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9e2:	3402      	adds	r4, #2
 800d9e4:	9305      	str	r3, [sp, #20]
 800d9e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dabc <_vfiprintf_r+0x22c>
 800d9ea:	7821      	ldrb	r1, [r4, #0]
 800d9ec:	2203      	movs	r2, #3
 800d9ee:	4650      	mov	r0, sl
 800d9f0:	f7f2 fc0e 	bl	8000210 <memchr>
 800d9f4:	b138      	cbz	r0, 800da06 <_vfiprintf_r+0x176>
 800d9f6:	9b04      	ldr	r3, [sp, #16]
 800d9f8:	eba0 000a 	sub.w	r0, r0, sl
 800d9fc:	2240      	movs	r2, #64	@ 0x40
 800d9fe:	4082      	lsls	r2, r0
 800da00:	4313      	orrs	r3, r2
 800da02:	3401      	adds	r4, #1
 800da04:	9304      	str	r3, [sp, #16]
 800da06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da0a:	4829      	ldr	r0, [pc, #164]	@ (800dab0 <_vfiprintf_r+0x220>)
 800da0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da10:	2206      	movs	r2, #6
 800da12:	f7f2 fbfd 	bl	8000210 <memchr>
 800da16:	2800      	cmp	r0, #0
 800da18:	d03f      	beq.n	800da9a <_vfiprintf_r+0x20a>
 800da1a:	4b26      	ldr	r3, [pc, #152]	@ (800dab4 <_vfiprintf_r+0x224>)
 800da1c:	bb1b      	cbnz	r3, 800da66 <_vfiprintf_r+0x1d6>
 800da1e:	9b03      	ldr	r3, [sp, #12]
 800da20:	3307      	adds	r3, #7
 800da22:	f023 0307 	bic.w	r3, r3, #7
 800da26:	3308      	adds	r3, #8
 800da28:	9303      	str	r3, [sp, #12]
 800da2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da2c:	443b      	add	r3, r7
 800da2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da30:	e76a      	b.n	800d908 <_vfiprintf_r+0x78>
 800da32:	fb0c 3202 	mla	r2, ip, r2, r3
 800da36:	460c      	mov	r4, r1
 800da38:	2001      	movs	r0, #1
 800da3a:	e7a8      	b.n	800d98e <_vfiprintf_r+0xfe>
 800da3c:	2300      	movs	r3, #0
 800da3e:	3401      	adds	r4, #1
 800da40:	9305      	str	r3, [sp, #20]
 800da42:	4619      	mov	r1, r3
 800da44:	f04f 0c0a 	mov.w	ip, #10
 800da48:	4620      	mov	r0, r4
 800da4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da4e:	3a30      	subs	r2, #48	@ 0x30
 800da50:	2a09      	cmp	r2, #9
 800da52:	d903      	bls.n	800da5c <_vfiprintf_r+0x1cc>
 800da54:	2b00      	cmp	r3, #0
 800da56:	d0c6      	beq.n	800d9e6 <_vfiprintf_r+0x156>
 800da58:	9105      	str	r1, [sp, #20]
 800da5a:	e7c4      	b.n	800d9e6 <_vfiprintf_r+0x156>
 800da5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800da60:	4604      	mov	r4, r0
 800da62:	2301      	movs	r3, #1
 800da64:	e7f0      	b.n	800da48 <_vfiprintf_r+0x1b8>
 800da66:	ab03      	add	r3, sp, #12
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	462a      	mov	r2, r5
 800da6c:	4b12      	ldr	r3, [pc, #72]	@ (800dab8 <_vfiprintf_r+0x228>)
 800da6e:	a904      	add	r1, sp, #16
 800da70:	4630      	mov	r0, r6
 800da72:	f3af 8000 	nop.w
 800da76:	4607      	mov	r7, r0
 800da78:	1c78      	adds	r0, r7, #1
 800da7a:	d1d6      	bne.n	800da2a <_vfiprintf_r+0x19a>
 800da7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da7e:	07d9      	lsls	r1, r3, #31
 800da80:	d405      	bmi.n	800da8e <_vfiprintf_r+0x1fe>
 800da82:	89ab      	ldrh	r3, [r5, #12]
 800da84:	059a      	lsls	r2, r3, #22
 800da86:	d402      	bmi.n	800da8e <_vfiprintf_r+0x1fe>
 800da88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da8a:	f7ff fc6f 	bl	800d36c <__retarget_lock_release_recursive>
 800da8e:	89ab      	ldrh	r3, [r5, #12]
 800da90:	065b      	lsls	r3, r3, #25
 800da92:	f53f af1f 	bmi.w	800d8d4 <_vfiprintf_r+0x44>
 800da96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da98:	e71e      	b.n	800d8d8 <_vfiprintf_r+0x48>
 800da9a:	ab03      	add	r3, sp, #12
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	462a      	mov	r2, r5
 800daa0:	4b05      	ldr	r3, [pc, #20]	@ (800dab8 <_vfiprintf_r+0x228>)
 800daa2:	a904      	add	r1, sp, #16
 800daa4:	4630      	mov	r0, r6
 800daa6:	f000 f879 	bl	800db9c <_printf_i>
 800daaa:	e7e4      	b.n	800da76 <_vfiprintf_r+0x1e6>
 800daac:	0800f08c 	.word	0x0800f08c
 800dab0:	0800f096 	.word	0x0800f096
 800dab4:	00000000 	.word	0x00000000
 800dab8:	0800d86b 	.word	0x0800d86b
 800dabc:	0800f092 	.word	0x0800f092

0800dac0 <_printf_common>:
 800dac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dac4:	4616      	mov	r6, r2
 800dac6:	4698      	mov	r8, r3
 800dac8:	688a      	ldr	r2, [r1, #8]
 800daca:	690b      	ldr	r3, [r1, #16]
 800dacc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dad0:	4293      	cmp	r3, r2
 800dad2:	bfb8      	it	lt
 800dad4:	4613      	movlt	r3, r2
 800dad6:	6033      	str	r3, [r6, #0]
 800dad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dadc:	4607      	mov	r7, r0
 800dade:	460c      	mov	r4, r1
 800dae0:	b10a      	cbz	r2, 800dae6 <_printf_common+0x26>
 800dae2:	3301      	adds	r3, #1
 800dae4:	6033      	str	r3, [r6, #0]
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	0699      	lsls	r1, r3, #26
 800daea:	bf42      	ittt	mi
 800daec:	6833      	ldrmi	r3, [r6, #0]
 800daee:	3302      	addmi	r3, #2
 800daf0:	6033      	strmi	r3, [r6, #0]
 800daf2:	6825      	ldr	r5, [r4, #0]
 800daf4:	f015 0506 	ands.w	r5, r5, #6
 800daf8:	d106      	bne.n	800db08 <_printf_common+0x48>
 800dafa:	f104 0a19 	add.w	sl, r4, #25
 800dafe:	68e3      	ldr	r3, [r4, #12]
 800db00:	6832      	ldr	r2, [r6, #0]
 800db02:	1a9b      	subs	r3, r3, r2
 800db04:	42ab      	cmp	r3, r5
 800db06:	dc26      	bgt.n	800db56 <_printf_common+0x96>
 800db08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db0c:	6822      	ldr	r2, [r4, #0]
 800db0e:	3b00      	subs	r3, #0
 800db10:	bf18      	it	ne
 800db12:	2301      	movne	r3, #1
 800db14:	0692      	lsls	r2, r2, #26
 800db16:	d42b      	bmi.n	800db70 <_printf_common+0xb0>
 800db18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db1c:	4641      	mov	r1, r8
 800db1e:	4638      	mov	r0, r7
 800db20:	47c8      	blx	r9
 800db22:	3001      	adds	r0, #1
 800db24:	d01e      	beq.n	800db64 <_printf_common+0xa4>
 800db26:	6823      	ldr	r3, [r4, #0]
 800db28:	6922      	ldr	r2, [r4, #16]
 800db2a:	f003 0306 	and.w	r3, r3, #6
 800db2e:	2b04      	cmp	r3, #4
 800db30:	bf02      	ittt	eq
 800db32:	68e5      	ldreq	r5, [r4, #12]
 800db34:	6833      	ldreq	r3, [r6, #0]
 800db36:	1aed      	subeq	r5, r5, r3
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	bf0c      	ite	eq
 800db3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db40:	2500      	movne	r5, #0
 800db42:	4293      	cmp	r3, r2
 800db44:	bfc4      	itt	gt
 800db46:	1a9b      	subgt	r3, r3, r2
 800db48:	18ed      	addgt	r5, r5, r3
 800db4a:	2600      	movs	r6, #0
 800db4c:	341a      	adds	r4, #26
 800db4e:	42b5      	cmp	r5, r6
 800db50:	d11a      	bne.n	800db88 <_printf_common+0xc8>
 800db52:	2000      	movs	r0, #0
 800db54:	e008      	b.n	800db68 <_printf_common+0xa8>
 800db56:	2301      	movs	r3, #1
 800db58:	4652      	mov	r2, sl
 800db5a:	4641      	mov	r1, r8
 800db5c:	4638      	mov	r0, r7
 800db5e:	47c8      	blx	r9
 800db60:	3001      	adds	r0, #1
 800db62:	d103      	bne.n	800db6c <_printf_common+0xac>
 800db64:	f04f 30ff 	mov.w	r0, #4294967295
 800db68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db6c:	3501      	adds	r5, #1
 800db6e:	e7c6      	b.n	800dafe <_printf_common+0x3e>
 800db70:	18e1      	adds	r1, r4, r3
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	2030      	movs	r0, #48	@ 0x30
 800db76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db7a:	4422      	add	r2, r4
 800db7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db84:	3302      	adds	r3, #2
 800db86:	e7c7      	b.n	800db18 <_printf_common+0x58>
 800db88:	2301      	movs	r3, #1
 800db8a:	4622      	mov	r2, r4
 800db8c:	4641      	mov	r1, r8
 800db8e:	4638      	mov	r0, r7
 800db90:	47c8      	blx	r9
 800db92:	3001      	adds	r0, #1
 800db94:	d0e6      	beq.n	800db64 <_printf_common+0xa4>
 800db96:	3601      	adds	r6, #1
 800db98:	e7d9      	b.n	800db4e <_printf_common+0x8e>
	...

0800db9c <_printf_i>:
 800db9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dba0:	7e0f      	ldrb	r7, [r1, #24]
 800dba2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dba4:	2f78      	cmp	r7, #120	@ 0x78
 800dba6:	4691      	mov	r9, r2
 800dba8:	4680      	mov	r8, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	469a      	mov	sl, r3
 800dbae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dbb2:	d807      	bhi.n	800dbc4 <_printf_i+0x28>
 800dbb4:	2f62      	cmp	r7, #98	@ 0x62
 800dbb6:	d80a      	bhi.n	800dbce <_printf_i+0x32>
 800dbb8:	2f00      	cmp	r7, #0
 800dbba:	f000 80d2 	beq.w	800dd62 <_printf_i+0x1c6>
 800dbbe:	2f58      	cmp	r7, #88	@ 0x58
 800dbc0:	f000 80b9 	beq.w	800dd36 <_printf_i+0x19a>
 800dbc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbcc:	e03a      	b.n	800dc44 <_printf_i+0xa8>
 800dbce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbd2:	2b15      	cmp	r3, #21
 800dbd4:	d8f6      	bhi.n	800dbc4 <_printf_i+0x28>
 800dbd6:	a101      	add	r1, pc, #4	@ (adr r1, 800dbdc <_printf_i+0x40>)
 800dbd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbdc:	0800dc35 	.word	0x0800dc35
 800dbe0:	0800dc49 	.word	0x0800dc49
 800dbe4:	0800dbc5 	.word	0x0800dbc5
 800dbe8:	0800dbc5 	.word	0x0800dbc5
 800dbec:	0800dbc5 	.word	0x0800dbc5
 800dbf0:	0800dbc5 	.word	0x0800dbc5
 800dbf4:	0800dc49 	.word	0x0800dc49
 800dbf8:	0800dbc5 	.word	0x0800dbc5
 800dbfc:	0800dbc5 	.word	0x0800dbc5
 800dc00:	0800dbc5 	.word	0x0800dbc5
 800dc04:	0800dbc5 	.word	0x0800dbc5
 800dc08:	0800dd49 	.word	0x0800dd49
 800dc0c:	0800dc73 	.word	0x0800dc73
 800dc10:	0800dd03 	.word	0x0800dd03
 800dc14:	0800dbc5 	.word	0x0800dbc5
 800dc18:	0800dbc5 	.word	0x0800dbc5
 800dc1c:	0800dd6b 	.word	0x0800dd6b
 800dc20:	0800dbc5 	.word	0x0800dbc5
 800dc24:	0800dc73 	.word	0x0800dc73
 800dc28:	0800dbc5 	.word	0x0800dbc5
 800dc2c:	0800dbc5 	.word	0x0800dbc5
 800dc30:	0800dd0b 	.word	0x0800dd0b
 800dc34:	6833      	ldr	r3, [r6, #0]
 800dc36:	1d1a      	adds	r2, r3, #4
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6032      	str	r2, [r6, #0]
 800dc3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc44:	2301      	movs	r3, #1
 800dc46:	e09d      	b.n	800dd84 <_printf_i+0x1e8>
 800dc48:	6833      	ldr	r3, [r6, #0]
 800dc4a:	6820      	ldr	r0, [r4, #0]
 800dc4c:	1d19      	adds	r1, r3, #4
 800dc4e:	6031      	str	r1, [r6, #0]
 800dc50:	0606      	lsls	r6, r0, #24
 800dc52:	d501      	bpl.n	800dc58 <_printf_i+0xbc>
 800dc54:	681d      	ldr	r5, [r3, #0]
 800dc56:	e003      	b.n	800dc60 <_printf_i+0xc4>
 800dc58:	0645      	lsls	r5, r0, #25
 800dc5a:	d5fb      	bpl.n	800dc54 <_printf_i+0xb8>
 800dc5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc60:	2d00      	cmp	r5, #0
 800dc62:	da03      	bge.n	800dc6c <_printf_i+0xd0>
 800dc64:	232d      	movs	r3, #45	@ 0x2d
 800dc66:	426d      	negs	r5, r5
 800dc68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc6c:	4859      	ldr	r0, [pc, #356]	@ (800ddd4 <_printf_i+0x238>)
 800dc6e:	230a      	movs	r3, #10
 800dc70:	e011      	b.n	800dc96 <_printf_i+0xfa>
 800dc72:	6821      	ldr	r1, [r4, #0]
 800dc74:	6833      	ldr	r3, [r6, #0]
 800dc76:	0608      	lsls	r0, r1, #24
 800dc78:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc7c:	d402      	bmi.n	800dc84 <_printf_i+0xe8>
 800dc7e:	0649      	lsls	r1, r1, #25
 800dc80:	bf48      	it	mi
 800dc82:	b2ad      	uxthmi	r5, r5
 800dc84:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc86:	4853      	ldr	r0, [pc, #332]	@ (800ddd4 <_printf_i+0x238>)
 800dc88:	6033      	str	r3, [r6, #0]
 800dc8a:	bf14      	ite	ne
 800dc8c:	230a      	movne	r3, #10
 800dc8e:	2308      	moveq	r3, #8
 800dc90:	2100      	movs	r1, #0
 800dc92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc96:	6866      	ldr	r6, [r4, #4]
 800dc98:	60a6      	str	r6, [r4, #8]
 800dc9a:	2e00      	cmp	r6, #0
 800dc9c:	bfa2      	ittt	ge
 800dc9e:	6821      	ldrge	r1, [r4, #0]
 800dca0:	f021 0104 	bicge.w	r1, r1, #4
 800dca4:	6021      	strge	r1, [r4, #0]
 800dca6:	b90d      	cbnz	r5, 800dcac <_printf_i+0x110>
 800dca8:	2e00      	cmp	r6, #0
 800dcaa:	d04b      	beq.n	800dd44 <_printf_i+0x1a8>
 800dcac:	4616      	mov	r6, r2
 800dcae:	fbb5 f1f3 	udiv	r1, r5, r3
 800dcb2:	fb03 5711 	mls	r7, r3, r1, r5
 800dcb6:	5dc7      	ldrb	r7, [r0, r7]
 800dcb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dcbc:	462f      	mov	r7, r5
 800dcbe:	42bb      	cmp	r3, r7
 800dcc0:	460d      	mov	r5, r1
 800dcc2:	d9f4      	bls.n	800dcae <_printf_i+0x112>
 800dcc4:	2b08      	cmp	r3, #8
 800dcc6:	d10b      	bne.n	800dce0 <_printf_i+0x144>
 800dcc8:	6823      	ldr	r3, [r4, #0]
 800dcca:	07df      	lsls	r7, r3, #31
 800dccc:	d508      	bpl.n	800dce0 <_printf_i+0x144>
 800dcce:	6923      	ldr	r3, [r4, #16]
 800dcd0:	6861      	ldr	r1, [r4, #4]
 800dcd2:	4299      	cmp	r1, r3
 800dcd4:	bfde      	ittt	le
 800dcd6:	2330      	movle	r3, #48	@ 0x30
 800dcd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dcdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dce0:	1b92      	subs	r2, r2, r6
 800dce2:	6122      	str	r2, [r4, #16]
 800dce4:	f8cd a000 	str.w	sl, [sp]
 800dce8:	464b      	mov	r3, r9
 800dcea:	aa03      	add	r2, sp, #12
 800dcec:	4621      	mov	r1, r4
 800dcee:	4640      	mov	r0, r8
 800dcf0:	f7ff fee6 	bl	800dac0 <_printf_common>
 800dcf4:	3001      	adds	r0, #1
 800dcf6:	d14a      	bne.n	800dd8e <_printf_i+0x1f2>
 800dcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfc:	b004      	add	sp, #16
 800dcfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	f043 0320 	orr.w	r3, r3, #32
 800dd08:	6023      	str	r3, [r4, #0]
 800dd0a:	4833      	ldr	r0, [pc, #204]	@ (800ddd8 <_printf_i+0x23c>)
 800dd0c:	2778      	movs	r7, #120	@ 0x78
 800dd0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	6831      	ldr	r1, [r6, #0]
 800dd16:	061f      	lsls	r7, r3, #24
 800dd18:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd1c:	d402      	bmi.n	800dd24 <_printf_i+0x188>
 800dd1e:	065f      	lsls	r7, r3, #25
 800dd20:	bf48      	it	mi
 800dd22:	b2ad      	uxthmi	r5, r5
 800dd24:	6031      	str	r1, [r6, #0]
 800dd26:	07d9      	lsls	r1, r3, #31
 800dd28:	bf44      	itt	mi
 800dd2a:	f043 0320 	orrmi.w	r3, r3, #32
 800dd2e:	6023      	strmi	r3, [r4, #0]
 800dd30:	b11d      	cbz	r5, 800dd3a <_printf_i+0x19e>
 800dd32:	2310      	movs	r3, #16
 800dd34:	e7ac      	b.n	800dc90 <_printf_i+0xf4>
 800dd36:	4827      	ldr	r0, [pc, #156]	@ (800ddd4 <_printf_i+0x238>)
 800dd38:	e7e9      	b.n	800dd0e <_printf_i+0x172>
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	f023 0320 	bic.w	r3, r3, #32
 800dd40:	6023      	str	r3, [r4, #0]
 800dd42:	e7f6      	b.n	800dd32 <_printf_i+0x196>
 800dd44:	4616      	mov	r6, r2
 800dd46:	e7bd      	b.n	800dcc4 <_printf_i+0x128>
 800dd48:	6833      	ldr	r3, [r6, #0]
 800dd4a:	6825      	ldr	r5, [r4, #0]
 800dd4c:	6961      	ldr	r1, [r4, #20]
 800dd4e:	1d18      	adds	r0, r3, #4
 800dd50:	6030      	str	r0, [r6, #0]
 800dd52:	062e      	lsls	r6, r5, #24
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	d501      	bpl.n	800dd5c <_printf_i+0x1c0>
 800dd58:	6019      	str	r1, [r3, #0]
 800dd5a:	e002      	b.n	800dd62 <_printf_i+0x1c6>
 800dd5c:	0668      	lsls	r0, r5, #25
 800dd5e:	d5fb      	bpl.n	800dd58 <_printf_i+0x1bc>
 800dd60:	8019      	strh	r1, [r3, #0]
 800dd62:	2300      	movs	r3, #0
 800dd64:	6123      	str	r3, [r4, #16]
 800dd66:	4616      	mov	r6, r2
 800dd68:	e7bc      	b.n	800dce4 <_printf_i+0x148>
 800dd6a:	6833      	ldr	r3, [r6, #0]
 800dd6c:	1d1a      	adds	r2, r3, #4
 800dd6e:	6032      	str	r2, [r6, #0]
 800dd70:	681e      	ldr	r6, [r3, #0]
 800dd72:	6862      	ldr	r2, [r4, #4]
 800dd74:	2100      	movs	r1, #0
 800dd76:	4630      	mov	r0, r6
 800dd78:	f7f2 fa4a 	bl	8000210 <memchr>
 800dd7c:	b108      	cbz	r0, 800dd82 <_printf_i+0x1e6>
 800dd7e:	1b80      	subs	r0, r0, r6
 800dd80:	6060      	str	r0, [r4, #4]
 800dd82:	6863      	ldr	r3, [r4, #4]
 800dd84:	6123      	str	r3, [r4, #16]
 800dd86:	2300      	movs	r3, #0
 800dd88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd8c:	e7aa      	b.n	800dce4 <_printf_i+0x148>
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	4632      	mov	r2, r6
 800dd92:	4649      	mov	r1, r9
 800dd94:	4640      	mov	r0, r8
 800dd96:	47d0      	blx	sl
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d0ad      	beq.n	800dcf8 <_printf_i+0x15c>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	079b      	lsls	r3, r3, #30
 800dda0:	d413      	bmi.n	800ddca <_printf_i+0x22e>
 800dda2:	68e0      	ldr	r0, [r4, #12]
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	4298      	cmp	r0, r3
 800dda8:	bfb8      	it	lt
 800ddaa:	4618      	movlt	r0, r3
 800ddac:	e7a6      	b.n	800dcfc <_printf_i+0x160>
 800ddae:	2301      	movs	r3, #1
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	47d0      	blx	sl
 800ddb8:	3001      	adds	r0, #1
 800ddba:	d09d      	beq.n	800dcf8 <_printf_i+0x15c>
 800ddbc:	3501      	adds	r5, #1
 800ddbe:	68e3      	ldr	r3, [r4, #12]
 800ddc0:	9903      	ldr	r1, [sp, #12]
 800ddc2:	1a5b      	subs	r3, r3, r1
 800ddc4:	42ab      	cmp	r3, r5
 800ddc6:	dcf2      	bgt.n	800ddae <_printf_i+0x212>
 800ddc8:	e7eb      	b.n	800dda2 <_printf_i+0x206>
 800ddca:	2500      	movs	r5, #0
 800ddcc:	f104 0619 	add.w	r6, r4, #25
 800ddd0:	e7f5      	b.n	800ddbe <_printf_i+0x222>
 800ddd2:	bf00      	nop
 800ddd4:	0800f09d 	.word	0x0800f09d
 800ddd8:	0800f0ae 	.word	0x0800f0ae

0800dddc <__sflush_r>:
 800dddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dde0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde4:	0716      	lsls	r6, r2, #28
 800dde6:	4605      	mov	r5, r0
 800dde8:	460c      	mov	r4, r1
 800ddea:	d454      	bmi.n	800de96 <__sflush_r+0xba>
 800ddec:	684b      	ldr	r3, [r1, #4]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dc02      	bgt.n	800ddf8 <__sflush_r+0x1c>
 800ddf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	dd48      	ble.n	800de8a <__sflush_r+0xae>
 800ddf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddfa:	2e00      	cmp	r6, #0
 800ddfc:	d045      	beq.n	800de8a <__sflush_r+0xae>
 800ddfe:	2300      	movs	r3, #0
 800de00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de04:	682f      	ldr	r7, [r5, #0]
 800de06:	6a21      	ldr	r1, [r4, #32]
 800de08:	602b      	str	r3, [r5, #0]
 800de0a:	d030      	beq.n	800de6e <__sflush_r+0x92>
 800de0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	0759      	lsls	r1, r3, #29
 800de12:	d505      	bpl.n	800de20 <__sflush_r+0x44>
 800de14:	6863      	ldr	r3, [r4, #4]
 800de16:	1ad2      	subs	r2, r2, r3
 800de18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de1a:	b10b      	cbz	r3, 800de20 <__sflush_r+0x44>
 800de1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de1e:	1ad2      	subs	r2, r2, r3
 800de20:	2300      	movs	r3, #0
 800de22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de24:	6a21      	ldr	r1, [r4, #32]
 800de26:	4628      	mov	r0, r5
 800de28:	47b0      	blx	r6
 800de2a:	1c43      	adds	r3, r0, #1
 800de2c:	89a3      	ldrh	r3, [r4, #12]
 800de2e:	d106      	bne.n	800de3e <__sflush_r+0x62>
 800de30:	6829      	ldr	r1, [r5, #0]
 800de32:	291d      	cmp	r1, #29
 800de34:	d82b      	bhi.n	800de8e <__sflush_r+0xb2>
 800de36:	4a2a      	ldr	r2, [pc, #168]	@ (800dee0 <__sflush_r+0x104>)
 800de38:	410a      	asrs	r2, r1
 800de3a:	07d6      	lsls	r6, r2, #31
 800de3c:	d427      	bmi.n	800de8e <__sflush_r+0xb2>
 800de3e:	2200      	movs	r2, #0
 800de40:	6062      	str	r2, [r4, #4]
 800de42:	04d9      	lsls	r1, r3, #19
 800de44:	6922      	ldr	r2, [r4, #16]
 800de46:	6022      	str	r2, [r4, #0]
 800de48:	d504      	bpl.n	800de54 <__sflush_r+0x78>
 800de4a:	1c42      	adds	r2, r0, #1
 800de4c:	d101      	bne.n	800de52 <__sflush_r+0x76>
 800de4e:	682b      	ldr	r3, [r5, #0]
 800de50:	b903      	cbnz	r3, 800de54 <__sflush_r+0x78>
 800de52:	6560      	str	r0, [r4, #84]	@ 0x54
 800de54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de56:	602f      	str	r7, [r5, #0]
 800de58:	b1b9      	cbz	r1, 800de8a <__sflush_r+0xae>
 800de5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de5e:	4299      	cmp	r1, r3
 800de60:	d002      	beq.n	800de68 <__sflush_r+0x8c>
 800de62:	4628      	mov	r0, r5
 800de64:	f7ff fa9a 	bl	800d39c <_free_r>
 800de68:	2300      	movs	r3, #0
 800de6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800de6c:	e00d      	b.n	800de8a <__sflush_r+0xae>
 800de6e:	2301      	movs	r3, #1
 800de70:	4628      	mov	r0, r5
 800de72:	47b0      	blx	r6
 800de74:	4602      	mov	r2, r0
 800de76:	1c50      	adds	r0, r2, #1
 800de78:	d1c9      	bne.n	800de0e <__sflush_r+0x32>
 800de7a:	682b      	ldr	r3, [r5, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d0c6      	beq.n	800de0e <__sflush_r+0x32>
 800de80:	2b1d      	cmp	r3, #29
 800de82:	d001      	beq.n	800de88 <__sflush_r+0xac>
 800de84:	2b16      	cmp	r3, #22
 800de86:	d11e      	bne.n	800dec6 <__sflush_r+0xea>
 800de88:	602f      	str	r7, [r5, #0]
 800de8a:	2000      	movs	r0, #0
 800de8c:	e022      	b.n	800ded4 <__sflush_r+0xf8>
 800de8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de92:	b21b      	sxth	r3, r3
 800de94:	e01b      	b.n	800dece <__sflush_r+0xf2>
 800de96:	690f      	ldr	r7, [r1, #16]
 800de98:	2f00      	cmp	r7, #0
 800de9a:	d0f6      	beq.n	800de8a <__sflush_r+0xae>
 800de9c:	0793      	lsls	r3, r2, #30
 800de9e:	680e      	ldr	r6, [r1, #0]
 800dea0:	bf08      	it	eq
 800dea2:	694b      	ldreq	r3, [r1, #20]
 800dea4:	600f      	str	r7, [r1, #0]
 800dea6:	bf18      	it	ne
 800dea8:	2300      	movne	r3, #0
 800deaa:	eba6 0807 	sub.w	r8, r6, r7
 800deae:	608b      	str	r3, [r1, #8]
 800deb0:	f1b8 0f00 	cmp.w	r8, #0
 800deb4:	dde9      	ble.n	800de8a <__sflush_r+0xae>
 800deb6:	6a21      	ldr	r1, [r4, #32]
 800deb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800deba:	4643      	mov	r3, r8
 800debc:	463a      	mov	r2, r7
 800debe:	4628      	mov	r0, r5
 800dec0:	47b0      	blx	r6
 800dec2:	2800      	cmp	r0, #0
 800dec4:	dc08      	bgt.n	800ded8 <__sflush_r+0xfc>
 800dec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dece:	81a3      	strh	r3, [r4, #12]
 800ded0:	f04f 30ff 	mov.w	r0, #4294967295
 800ded4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ded8:	4407      	add	r7, r0
 800deda:	eba8 0800 	sub.w	r8, r8, r0
 800dede:	e7e7      	b.n	800deb0 <__sflush_r+0xd4>
 800dee0:	dfbffffe 	.word	0xdfbffffe

0800dee4 <_fflush_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	690b      	ldr	r3, [r1, #16]
 800dee8:	4605      	mov	r5, r0
 800deea:	460c      	mov	r4, r1
 800deec:	b913      	cbnz	r3, 800def4 <_fflush_r+0x10>
 800deee:	2500      	movs	r5, #0
 800def0:	4628      	mov	r0, r5
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	b118      	cbz	r0, 800defe <_fflush_r+0x1a>
 800def6:	6a03      	ldr	r3, [r0, #32]
 800def8:	b90b      	cbnz	r3, 800defe <_fflush_r+0x1a>
 800defa:	f7fe ffc1 	bl	800ce80 <__sinit>
 800defe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0f3      	beq.n	800deee <_fflush_r+0xa>
 800df06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df08:	07d0      	lsls	r0, r2, #31
 800df0a:	d404      	bmi.n	800df16 <_fflush_r+0x32>
 800df0c:	0599      	lsls	r1, r3, #22
 800df0e:	d402      	bmi.n	800df16 <_fflush_r+0x32>
 800df10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df12:	f7ff fa2a 	bl	800d36a <__retarget_lock_acquire_recursive>
 800df16:	4628      	mov	r0, r5
 800df18:	4621      	mov	r1, r4
 800df1a:	f7ff ff5f 	bl	800dddc <__sflush_r>
 800df1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df20:	07da      	lsls	r2, r3, #31
 800df22:	4605      	mov	r5, r0
 800df24:	d4e4      	bmi.n	800def0 <_fflush_r+0xc>
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	059b      	lsls	r3, r3, #22
 800df2a:	d4e1      	bmi.n	800def0 <_fflush_r+0xc>
 800df2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df2e:	f7ff fa1d 	bl	800d36c <__retarget_lock_release_recursive>
 800df32:	e7dd      	b.n	800def0 <_fflush_r+0xc>

0800df34 <__swhatbuf_r>:
 800df34:	b570      	push	{r4, r5, r6, lr}
 800df36:	460c      	mov	r4, r1
 800df38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df3c:	2900      	cmp	r1, #0
 800df3e:	b096      	sub	sp, #88	@ 0x58
 800df40:	4615      	mov	r5, r2
 800df42:	461e      	mov	r6, r3
 800df44:	da0d      	bge.n	800df62 <__swhatbuf_r+0x2e>
 800df46:	89a3      	ldrh	r3, [r4, #12]
 800df48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800df4c:	f04f 0100 	mov.w	r1, #0
 800df50:	bf14      	ite	ne
 800df52:	2340      	movne	r3, #64	@ 0x40
 800df54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800df58:	2000      	movs	r0, #0
 800df5a:	6031      	str	r1, [r6, #0]
 800df5c:	602b      	str	r3, [r5, #0]
 800df5e:	b016      	add	sp, #88	@ 0x58
 800df60:	bd70      	pop	{r4, r5, r6, pc}
 800df62:	466a      	mov	r2, sp
 800df64:	f000 f862 	bl	800e02c <_fstat_r>
 800df68:	2800      	cmp	r0, #0
 800df6a:	dbec      	blt.n	800df46 <__swhatbuf_r+0x12>
 800df6c:	9901      	ldr	r1, [sp, #4]
 800df6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800df72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800df76:	4259      	negs	r1, r3
 800df78:	4159      	adcs	r1, r3
 800df7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df7e:	e7eb      	b.n	800df58 <__swhatbuf_r+0x24>

0800df80 <__smakebuf_r>:
 800df80:	898b      	ldrh	r3, [r1, #12]
 800df82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df84:	079d      	lsls	r5, r3, #30
 800df86:	4606      	mov	r6, r0
 800df88:	460c      	mov	r4, r1
 800df8a:	d507      	bpl.n	800df9c <__smakebuf_r+0x1c>
 800df8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800df90:	6023      	str	r3, [r4, #0]
 800df92:	6123      	str	r3, [r4, #16]
 800df94:	2301      	movs	r3, #1
 800df96:	6163      	str	r3, [r4, #20]
 800df98:	b003      	add	sp, #12
 800df9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df9c:	ab01      	add	r3, sp, #4
 800df9e:	466a      	mov	r2, sp
 800dfa0:	f7ff ffc8 	bl	800df34 <__swhatbuf_r>
 800dfa4:	9f00      	ldr	r7, [sp, #0]
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	4639      	mov	r1, r7
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f7ff fa62 	bl	800d474 <_malloc_r>
 800dfb0:	b948      	cbnz	r0, 800dfc6 <__smakebuf_r+0x46>
 800dfb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb6:	059a      	lsls	r2, r3, #22
 800dfb8:	d4ee      	bmi.n	800df98 <__smakebuf_r+0x18>
 800dfba:	f023 0303 	bic.w	r3, r3, #3
 800dfbe:	f043 0302 	orr.w	r3, r3, #2
 800dfc2:	81a3      	strh	r3, [r4, #12]
 800dfc4:	e7e2      	b.n	800df8c <__smakebuf_r+0xc>
 800dfc6:	89a3      	ldrh	r3, [r4, #12]
 800dfc8:	6020      	str	r0, [r4, #0]
 800dfca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfce:	81a3      	strh	r3, [r4, #12]
 800dfd0:	9b01      	ldr	r3, [sp, #4]
 800dfd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dfd6:	b15b      	cbz	r3, 800dff0 <__smakebuf_r+0x70>
 800dfd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfdc:	4630      	mov	r0, r6
 800dfde:	f000 f837 	bl	800e050 <_isatty_r>
 800dfe2:	b128      	cbz	r0, 800dff0 <__smakebuf_r+0x70>
 800dfe4:	89a3      	ldrh	r3, [r4, #12]
 800dfe6:	f023 0303 	bic.w	r3, r3, #3
 800dfea:	f043 0301 	orr.w	r3, r3, #1
 800dfee:	81a3      	strh	r3, [r4, #12]
 800dff0:	89a3      	ldrh	r3, [r4, #12]
 800dff2:	431d      	orrs	r5, r3
 800dff4:	81a5      	strh	r5, [r4, #12]
 800dff6:	e7cf      	b.n	800df98 <__smakebuf_r+0x18>

0800dff8 <memmove>:
 800dff8:	4288      	cmp	r0, r1
 800dffa:	b510      	push	{r4, lr}
 800dffc:	eb01 0402 	add.w	r4, r1, r2
 800e000:	d902      	bls.n	800e008 <memmove+0x10>
 800e002:	4284      	cmp	r4, r0
 800e004:	4623      	mov	r3, r4
 800e006:	d807      	bhi.n	800e018 <memmove+0x20>
 800e008:	1e43      	subs	r3, r0, #1
 800e00a:	42a1      	cmp	r1, r4
 800e00c:	d008      	beq.n	800e020 <memmove+0x28>
 800e00e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e012:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e016:	e7f8      	b.n	800e00a <memmove+0x12>
 800e018:	4402      	add	r2, r0
 800e01a:	4601      	mov	r1, r0
 800e01c:	428a      	cmp	r2, r1
 800e01e:	d100      	bne.n	800e022 <memmove+0x2a>
 800e020:	bd10      	pop	{r4, pc}
 800e022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e02a:	e7f7      	b.n	800e01c <memmove+0x24>

0800e02c <_fstat_r>:
 800e02c:	b538      	push	{r3, r4, r5, lr}
 800e02e:	4d07      	ldr	r5, [pc, #28]	@ (800e04c <_fstat_r+0x20>)
 800e030:	2300      	movs	r3, #0
 800e032:	4604      	mov	r4, r0
 800e034:	4608      	mov	r0, r1
 800e036:	4611      	mov	r1, r2
 800e038:	602b      	str	r3, [r5, #0]
 800e03a:	f7f4 fb95 	bl	8002768 <_fstat>
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	d102      	bne.n	800e048 <_fstat_r+0x1c>
 800e042:	682b      	ldr	r3, [r5, #0]
 800e044:	b103      	cbz	r3, 800e048 <_fstat_r+0x1c>
 800e046:	6023      	str	r3, [r4, #0]
 800e048:	bd38      	pop	{r3, r4, r5, pc}
 800e04a:	bf00      	nop
 800e04c:	200046f0 	.word	0x200046f0

0800e050 <_isatty_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4d06      	ldr	r5, [pc, #24]	@ (800e06c <_isatty_r+0x1c>)
 800e054:	2300      	movs	r3, #0
 800e056:	4604      	mov	r4, r0
 800e058:	4608      	mov	r0, r1
 800e05a:	602b      	str	r3, [r5, #0]
 800e05c:	f7f4 fb94 	bl	8002788 <_isatty>
 800e060:	1c43      	adds	r3, r0, #1
 800e062:	d102      	bne.n	800e06a <_isatty_r+0x1a>
 800e064:	682b      	ldr	r3, [r5, #0]
 800e066:	b103      	cbz	r3, 800e06a <_isatty_r+0x1a>
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	bd38      	pop	{r3, r4, r5, pc}
 800e06c:	200046f0 	.word	0x200046f0

0800e070 <_sbrk_r>:
 800e070:	b538      	push	{r3, r4, r5, lr}
 800e072:	4d06      	ldr	r5, [pc, #24]	@ (800e08c <_sbrk_r+0x1c>)
 800e074:	2300      	movs	r3, #0
 800e076:	4604      	mov	r4, r0
 800e078:	4608      	mov	r0, r1
 800e07a:	602b      	str	r3, [r5, #0]
 800e07c:	f7f4 fb9c 	bl	80027b8 <_sbrk>
 800e080:	1c43      	adds	r3, r0, #1
 800e082:	d102      	bne.n	800e08a <_sbrk_r+0x1a>
 800e084:	682b      	ldr	r3, [r5, #0]
 800e086:	b103      	cbz	r3, 800e08a <_sbrk_r+0x1a>
 800e088:	6023      	str	r3, [r4, #0]
 800e08a:	bd38      	pop	{r3, r4, r5, pc}
 800e08c:	200046f0 	.word	0x200046f0

0800e090 <_realloc_r>:
 800e090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e094:	4680      	mov	r8, r0
 800e096:	4615      	mov	r5, r2
 800e098:	460c      	mov	r4, r1
 800e09a:	b921      	cbnz	r1, 800e0a6 <_realloc_r+0x16>
 800e09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	f7ff b9e7 	b.w	800d474 <_malloc_r>
 800e0a6:	b92a      	cbnz	r2, 800e0b4 <_realloc_r+0x24>
 800e0a8:	f7ff f978 	bl	800d39c <_free_r>
 800e0ac:	2400      	movs	r4, #0
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b4:	f000 f81a 	bl	800e0ec <_malloc_usable_size_r>
 800e0b8:	4285      	cmp	r5, r0
 800e0ba:	4606      	mov	r6, r0
 800e0bc:	d802      	bhi.n	800e0c4 <_realloc_r+0x34>
 800e0be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e0c2:	d8f4      	bhi.n	800e0ae <_realloc_r+0x1e>
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	f7ff f9d4 	bl	800d474 <_malloc_r>
 800e0cc:	4607      	mov	r7, r0
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d0ec      	beq.n	800e0ac <_realloc_r+0x1c>
 800e0d2:	42b5      	cmp	r5, r6
 800e0d4:	462a      	mov	r2, r5
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	bf28      	it	cs
 800e0da:	4632      	movcs	r2, r6
 800e0dc:	f7ff f94f 	bl	800d37e <memcpy>
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	4640      	mov	r0, r8
 800e0e4:	f7ff f95a 	bl	800d39c <_free_r>
 800e0e8:	463c      	mov	r4, r7
 800e0ea:	e7e0      	b.n	800e0ae <_realloc_r+0x1e>

0800e0ec <_malloc_usable_size_r>:
 800e0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f0:	1f18      	subs	r0, r3, #4
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bfbc      	itt	lt
 800e0f6:	580b      	ldrlt	r3, [r1, r0]
 800e0f8:	18c0      	addlt	r0, r0, r3
 800e0fa:	4770      	bx	lr

0800e0fc <_init>:
 800e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fe:	bf00      	nop
 800e100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e102:	bc08      	pop	{r3}
 800e104:	469e      	mov	lr, r3
 800e106:	4770      	bx	lr

0800e108 <_fini>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	bf00      	nop
 800e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10e:	bc08      	pop	{r3}
 800e110:	469e      	mov	lr, r3
 800e112:	4770      	bx	lr
